<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_lsa.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__lsa_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ospfd/ospf_lsa.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="hash_8h_source.html">hash.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="checksum_8h_source.html">checksum.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospfd_8h_source.html">ospfd/ospfd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__interface_8h_source.html">ospfd/ospf_interface.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__ism_8h_source.html">ospfd/ospf_ism.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__asbr_8h_source.html">ospfd/ospf_asbr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__lsa_8h_source.html">ospfd/ospf_lsa.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__lsdb_8h_source.html">ospfd/ospf_lsdb.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__neighbor_8h_source.html">ospfd/ospf_neighbor.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__nsm_8h_source.html">ospfd/ospf_nsm.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__flood_8h_source.html">ospfd/ospf_flood.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__packet_8h_source.html">ospfd/ospf_packet.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__spf_8h_source.html">ospfd/ospf_spf.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__dump_8h_source.html">ospfd/ospf_dump.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__route_8h_source.html">ospfd/ospf_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__ase_8h_source.html">ospfd/ospf_ase.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__zebra_8h_source.html">ospfd/ospf_zebra.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for ospf_lsa.c:</div>
<div class="dyncontent">
<div class="center"><img src="ospf__lsa_8c__incl.png" border="0" usemap="#ospfd_2ospf__lsa_8c" alt=""/></div>
<map name="ospfd_2ospf__lsa_8c" id="ospfd_2ospf__lsa_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1156,155,1223,181"/><area shape="rect" id="node49" href="linklist_8h.html" title="linklist.h" alt="" coords="7,155,77,181"/><area shape="rect" id="node51" href="prefix_8h.html" title="prefix.h" alt="" coords="2402,229,2469,256"/><area shape="rect" id="node53" href="sockunion_8h.html" title="sockunion.h" alt="" coords="1237,304,1331,331"/><area shape="rect" id="node55" href="if_8h.html" title="if.h" alt="" coords="5,80,45,107"/><area shape="rect" id="node58" href="table_8h.html" title="table.h" alt="" coords="1312,80,1376,107"/><area shape="rect" id="node60" href="memory_8h.html" title="memory.h" alt="" coords="1400,80,1483,107"/><area shape="rect" id="node62" href="stream_8h.html" title="stream.h" alt="" coords="1955,155,2029,181"/><area shape="rect" id="node65" href="log_8h.html" title="log.h" alt="" coords="1494,155,1545,181"/><area shape="rect" id="node68" href="thread_8h.html" title="thread.h" alt="" coords="1704,80,1776,107"/><area shape="rect" id="node70" href="hash_8h.html" title="hash.h" alt="" coords="1800,80,1861,107"/><area shape="rect" id="node73" href="checksum_8h.html" title="checksum.h" alt="" coords="1885,80,1979,107"/><area shape="rect" id="node75" href="ospfd_8h.html" title="ospfd/ospfd.h" alt="" coords="1181,80,1288,107"/><area shape="rect" id="node79" href="ospf__interface_8h.html" title="ospfd/ospf_interface.h" alt="" coords="2646,80,2804,107"/><area shape="rect" id="node81" href="ospf__packet_8h.html" title="ospfd/ospf_packet.h" alt="" coords="2228,155,2375,181"/><area shape="rect" id="node83" href="ospf__spf_8h.html" title="ospfd/ospf_spf.h" alt="" coords="2799,155,2923,181"/><area shape="rect" id="node85" href="ospf__ism_8h.html" title="ospfd/ospf_ism.h" alt="" coords="2339,80,2465,107"/><area shape="rect" id="node87" href="ospf__asbr_8h.html" title="ospfd/ospf_asbr.h" alt="" coords="2491,80,2621,107"/><area shape="rect" id="node89" href="ospf__lsa_8h.html" title="ospfd/ospf_lsa.h" alt="" coords="1557,80,1680,107"/><area shape="rect" id="node92" href="ospf__lsdb_8h.html" title="ospfd/ospf_lsdb.h" alt="" coords="2829,80,2960,107"/><area shape="rect" id="node94" href="ospf__neighbor_8h.html" title="ospfd/ospf_neighbor.h" alt="" coords="2105,80,2263,107"/><area shape="rect" id="node97" href="ospf__nsm_8h.html" title="ospfd/ospf_nsm.h" alt="" coords="3035,80,3165,107"/><area shape="rect" id="node99" href="ospf__flood_8h.html" title="ospfd/ospf_flood.h" alt="" coords="3189,80,3325,107"/><area shape="rect" id="node103" href="ospf__dump_8h.html" title="ospfd/ospf_dump.h" alt="" coords="3349,80,3488,107"/><area shape="rect" id="node105" href="ospf__route_8h.html" title="ospfd/ospf_route.h" alt="" coords="3513,80,3649,107"/><area shape="rect" id="node107" href="ospf__ase_8h.html" title="ospfd/ospf_ase.h" alt="" coords="3674,80,3800,107"/><area shape="rect" id="node109" href="ospf__zebra_8h.html" title="ospfd/ospf_zebra.h" alt="" coords="3825,80,3964,107"/></map>
</div>
</div>
<p><a href="ospf__lsa_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structlsa__action.html">lsa_action</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ac2cb28246e80b6521fdcf3a6f87cdae8">lsa_link_nbma_set</a>(S, O)&#160;&#160;&#160;lsa_link_broadcast_set (S, O)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a83dbba2d928d93b1fab8b1f1137828c7">DEFAULT_DEFAULT_METRIC</a>&#160;&#160;&#160;20</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a0b6af5141b556d1ff1e433c475742c71">DEFAULT_DEFAULT_ORIGINATE_METRIC</a>&#160;&#160;&#160;10</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a8f3d1904ca36a7ffd0778688e642b5fa">DEFAULT_DEFAULT_ALWAYS_METRIC</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a48c5c8065d990b12ae7ec8ae63ad87b3">DEFAULT_METRIC_TYPE</a>&#160;&#160;&#160;EXTERNAL_METRIC_TYPE_2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a00ef56a80eb931385ef7755ea1ae1009">OSPF_INTERFACE_TIMER_ON</a>(<a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>, F, V)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a0771b37557fd8283b02242fef0a3cde6">LSA_ACTION_FLOOD_AREA</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a880dbf45969502cf9f7b5b99a30a727d">LSA_ACTION_FLUSH_AREA</a>&#160;&#160;&#160;2</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a0b8bba9293004c8694ac4f48a910bcde">get_metric</a> (u_char *<a class="el" href="structmetric.html">metric</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ace21ae195421265bf16acf3d6d07f32b">tv_adjust</a> (struct timeval a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a3d712873cc4897fcc355a0c65e4e7009">tv_ceil</a> (struct timeval a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ac65f591e95cfd07e00f945e86cb3d470">tv_floor</a> (struct timeval a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a2543635ecb435d64f2b40f9cfdf75fc5">int2tv</a> (int a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#afde7d7c24e44ef9a87c68f81dad2bc16">tv_add</a> (struct timeval a, struct timeval b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct timeval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (struct timeval a, struct timeval b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a5ba57790910a88ececacfd1d3f69538c">tv_cmp</a> (struct timeval a, struct timeval b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a8f4fa72b19256ed0ecd962b21a9241a7">ospf_lsa_refresh_delay</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#aabea9a7010df99af7fd72822554cc25e">get_age</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a51f65ba10ce016111b959f7ce2790eaa">ospf_lsa_checksum</a> (struct <a class="el" href="structlsa__header.html">lsa_header</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ae1fc18f9e301f5d14a4090a434a3b14d">ospf_lsa_dup</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a904e1877aa655ae5311549df1b51efcf">ospf_lsa_free</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> **lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (size_t size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a8eac97d7859911bf5671284e8d03d1a9">ospf_lsa_data_dup</a> (struct <a class="el" href="structlsa__header.html">lsa_header</a> *lsah)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#af4bb20de4747d6f5a373b26584e0d4ce">ospf_lsa_data_free</a> (struct <a class="el" href="structlsa__header.html">lsa_header</a> *lsah)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a0951db1fe1ad120fc1831443a9c834ca">lsa_seqnum_increment</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#af7f1713ea04e1406ff0339fe9d3a45bd">lsa_header_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, u_char options, u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, struct in_addr <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>, struct in_addr router_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static u_char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a933091398aaec2e2fd8f491a75de49ad">router_lsa_flags</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a276f837fc6880a278a18915a5056c05e">ospf_nbr_lookup_ptop</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static u_int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a980e352e1f8a70a4cd0313ef1bdf9ede">ospf_link_cost</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a133d4b07d57007e049f7ff82279f45ab">link_info_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct in_addr <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>, struct in_addr data, u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, u_char tos, u_int16_t cost)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a196e7121aca3f53251fdeaa8425994e3">lsa_link_ptop_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ae47062e5fa5b505800c03d4d96358361">lsa_link_broadcast_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a3f7f68ba3b8a37ab599b08048b0dee35">lsa_link_loopback_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a48e981fec8f06ea064d6a2c4a691489d">lsa_link_virtuallink_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a95fd223fe6478011b2f5b4c50aaceb6e">lsa_link_ptomp_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ab3f0e4fff2defbc5bfa40bd93a1666d4">router_lsa_link_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ab81e6383be067658a00cd217b3000853">ospf_router_lsa_body_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a3e535ea8f7827d005f6d5f886860cf0a">ospf_stub_router_timer</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a353f9fae56b212ee9cb89a886fb2a459">ospf_stub_router_check</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a6fbeba86f3faffc552095a5857135c65">ospf_router_lsa_new</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a6740a0233b05e58420186ba666abcc54">ospf_router_lsa_originate</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a3d338f7fd5293f7399c47ba516109f8b">ospf_router_lsa_refresh</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a0aa16c23a7fe1f38a172c06579e5ca25">ospf_router_lsa_timer</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a66ad8a1fd151b43b11d7ec9650a644bf">ospf_router_lsa_timer_add</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a4db40452defbd5304d698f8d0cc855d1">ospf_router_lsa_update_timer</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ac61948fe0af2dbac4fa08c284ad189a6">ospf_network_lsa_body_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a38e5969eb071bb01f295114f99809694">ospf_network_lsa_new</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ab27a05b4cacc8b8b366967b6ed1c9fa8">ospf_network_lsa_originate</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a78354fe66789493f8350d0b6fd8b466c">ospf_network_lsa_refresh</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#af846c8b91a957413be3751610d0d3008">ospf_network_lsa_refresh_timer</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a42678c90c94d537b3d9c905d4685e2c5">ospf_network_lsa_timer_add</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ac8877b96dfac044bed2f32c1aa23b0ce">stream_put_ospf_metric</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, u_int32_t metric_value)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a448ed58dd69bf2882c6c7f7c7d6c7b68">ospf_summary_lsa_body_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_int32_t <a class="el" href="structmetric.html">metric</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#aa1b062969828a13e6912c100de373fcd">ospf_summary_lsa_new</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_int32_t <a class="el" href="structmetric.html">metric</a>, struct in_addr <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a93fd95cdd56566f3929ae642fe197276">ospf_summary_lsa_originate</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_int32_t <a class="el" href="structmetric.html">metric</a>, struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ad1ec944b0c3d672071952a4ec0112254">ospf_summary_lsa_refresh</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a186dd5ed3f8fe3c4d75ab221ca63232a">ospf_summary_asbr_lsa_body_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_int32_t <a class="el" href="structmetric.html">metric</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ac75ce3827118eaf0817aef1d5dee7322">ospf_summary_asbr_lsa_new</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_int32_t <a class="el" href="structmetric.html">metric</a>, struct in_addr <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a876eea14a76fdba052af58a1a69c2bfc">ospf_summary_asbr_lsa_originate</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_int32_t <a class="el" href="structmetric.html">metric</a>, struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a3d394fbfdef8b8da9ead7c5a38bc5204">ospf_summary_asbr_lsa_refresh</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct in_addr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a94f361334efa74a400a02c1ef9e6057b">ospf_external_lsa_nexthop_get</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct in_addr <a class="el" href="structnexthop.html">nexthop</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct in_addr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a3576776ab14a426e21170b01de869938">ospf_get_ip_from_ifp</a> (struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct in_addr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a921e59315c0352509765ca93fb2fc200">ospf_get_nssa_ip</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a10781678cf0418caa60ce806cb18f7f1">metric_type</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, u_char src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#aebf4067916a42ca176b32e7dbb15621d">metric_value</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, u_char src)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a3c7124f1f4f59d7577649a26a11241c1">ospf_external_lsa_body_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structexternal__info.html">external_info</a> *ei, struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a71319911c6d95fe6b798a45c5674732b">ospf_external_lsa_new</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structexternal__info.html">external_info</a> *ei, struct in_addr *old_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ac5aab1f054bdc79afeae5f25714ef277">ospf_install_flood_nssa</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa, struct <a class="el" href="structexternal__info.html">external_info</a> *ei)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a47659a8de2d310c23ffdb3852c9e3679">ospf_lsa_translated_nssa_new</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *type7)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ae0beb4bdc20ad5fe3224c7ab980312ab">ospf_translated_nssa_originate</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *type7)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#aa870c13f8cc5f9f7243bf1d73278d1d5">ospf_translated_nssa_refresh</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *type7, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *type5)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a96d24d54ba0ac3adc1ff557621ff2911">ospf_external_lsa_originate</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structexternal__info.html">external_info</a> *ei)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a3e9dc40b309b42e40bf32b5ec06fd3f8">ospf_external_lsa_originate_timer</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structexternal__info.html">external_info</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ad154699860ca80552cac4350e14a8023">ospf_default_external_info</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ab2bcb8bca8aa169076de0505e3ddad72">ospf_default_originate_timer</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ad7cf1f402786baeafb4b5c21bd6faf8d">ospf_nssa_lsa_flush</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ae6fd27bc0a44fb71638c23c3ea829905">ospf_external_lsa_flush</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, unsigned int ifindex)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a1be6376d9b23634a76f2a6a07833fe1e">ospf_external_lsa_refresh_default</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#aef94b25c2a2fad9088e82a85ee71f226">ospf_external_lsa_refresh_type</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int force)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a12f57ed226cea2cfd9499069dbde2f3c">ospf_external_lsa_refresh</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa, struct <a class="el" href="structexternal__info.html">external_info</a> *ei, int force)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a00547ded12be2b6f30d26527e6829584">ospf_router_lsa_install</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *new, int rt_recalc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#aeb017b8e734bbbae9f454b9bb23d7fd0">ospf_network_lsa_install</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *new, int rt_recalc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#abbee2c4a7e1898de8eee25d1cc6b3164">ospf_summary_lsa_install</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *new, int rt_recalc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a00b9af9ccc56dfb070dad158aef030fa">ospf_summary_asbr_lsa_install</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *new, int rt_recalc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a725ac21be05680d8dd3066c63e7c795f">ospf_external_lsa_install</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *new, int rt_recalc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ad6d5a002c1a2e4d50dfed4a627ea42a8">ospf_discard_from_db</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsdb.html">ospf_lsdb</a> *lsdb, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__interface.html">ospf_interface</a> *oi, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ad28d9267396cb553a97e361ffba89469">ospf_check_nbr_status</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a45711592b5267b56be96e4504967ea69">ospf_maxage_lsa_remover</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a08116d262e54a43525af086f2bafe87c">ospf_lsa_maxage_delete</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ab730b081b5aa660ffc5d0ec642d03d27">ospf_lsa_maxage</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a3782d39ad4a1fe76eb0bc8e4b5a9a86f">ospf_lsa_maxage_walker_remover</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a4069275df453331e7b1c742d1aa7e2e1">ospf_lsa_maxage_walker</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ab2e4bd0fdc42ab447eea95c79f21a7e2">ospf_lsa_lookup_by_prefix</a> (struct <a class="el" href="structospf__lsdb.html">ospf_lsdb</a> *lsdb, u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct in_addr router_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a1f0fd75e3aea10b1c15ffcc28fba7a58">ospf_lsa_lookup</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, u_int32_t <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, struct in_addr <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>, struct in_addr <a class="el" href="prefix_8h.html#aa4419784611184c74a36162ffcf0123d">adv_router</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ad8b31f978f44bc48a1b915183bcd04c1">ospf_lsa_lookup_by_id</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, u_int32_t <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, struct in_addr <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a02a444e61c60412cd2d17bd130ae06af">ospf_lsa_lookup_by_header</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct <a class="el" href="structlsa__header.html">lsa_header</a> *lsah)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a562753a50210d94f439aa232c260d433">ospf_lsa_more_recent</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *l1, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *l2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ab52aee7f3611698de9df9e83d65eab82">ospf_lsa_different</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *l1, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *l2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ae95776abdf9ff1a75f16cae6680e1a08">ospf_lsa_flush_schedule</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a286fff473dd64a6db6e15d1a04f4b5b2">ospf_flush_self_originated_lsas_now</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ad430a0bdeae46dc78ef311cf2c511bad">ospf_lsa_is_self_originated</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct in_addr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a3af5cb403d133f3276e5a744f03b309a">ospf_lsa_unique_id</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsdb.html">ospf_lsdb</a> *lsdb, u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#ae43288239f3e631018a7d2320b76fc6b">ospf_lsa_action</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a310feaf9384fb1379ab4ed56bff96c0e">ospf_schedule_lsa_flood_area</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a213c8ef3aeb0ac504641c617397fda07">ospf_schedule_lsa_flush_area</a> (struct <a class="el" href="structospf__area.html">ospf_area</a> *area, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a482369a73eab5b0a9bc39e9ad754e864">ospf_lsa_refresh</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#aac345ad0177ef3e0a5236ef623ffb176">ospf_refresher_register_lsa</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#a97aa8b72a68e3a1c96ce73a46d2c6c6c">ospf_refresher_unregister_lsa</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__lsa_8c.html#aba5248867f4c5f9ca904d27b89482c20">ospf_lsa_refresh_walker</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a8f3d1904ca36a7ffd0778688e642b5fa"></a><!-- doxytag: member="ospf_lsa.c::DEFAULT_DEFAULT_ALWAYS_METRIC" ref="a8f3d1904ca36a7ffd0778688e642b5fa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DEFAULT_DEFAULT_ALWAYS_METRIC&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01596">1596</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>

</div>
</div>
<a class="anchor" id="a83dbba2d928d93b1fab8b1f1137828c7"></a><!-- doxytag: member="ospf_lsa.c::DEFAULT_DEFAULT_METRIC" ref="a83dbba2d928d93b1fab8b1f1137828c7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DEFAULT_DEFAULT_METRIC&#160;&#160;&#160;20</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01594">1594</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>

</div>
</div>
<a class="anchor" id="a0b6af5141b556d1ff1e433c475742c71"></a><!-- doxytag: member="ospf_lsa.c::DEFAULT_DEFAULT_ORIGINATE_METRIC" ref="a0b6af5141b556d1ff1e433c475742c71" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DEFAULT_DEFAULT_ORIGINATE_METRIC&#160;&#160;&#160;10</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01595">1595</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>

</div>
</div>
<a class="anchor" id="a48c5c8065d990b12ae7ec8ae63ad87b3"></a><!-- doxytag: member="ospf_lsa.c::DEFAULT_METRIC_TYPE" ref="a48c5c8065d990b12ae7ec8ae63ad87b3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DEFAULT_METRIC_TYPE&#160;&#160;&#160;EXTERNAL_METRIC_TYPE_2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01598">1598</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>

</div>
</div>
<a class="anchor" id="a0771b37557fd8283b02242fef0a3cde6"></a><!-- doxytag: member="ospf_lsa.c::LSA_ACTION_FLOOD_AREA" ref="a0771b37557fd8283b02242fef0a3cde6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define LSA_ACTION_FLOOD_AREA&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03542">3542</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>

</div>
</div>
<a class="anchor" id="a880dbf45969502cf9f7b5b99a30a727d"></a><!-- doxytag: member="ospf_lsa.c::LSA_ACTION_FLUSH_AREA" ref="a880dbf45969502cf9f7b5b99a30a727d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define LSA_ACTION_FLUSH_AREA&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03543">3543</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>

</div>
</div>
<a class="anchor" id="ac2cb28246e80b6521fdcf3a6f87cdae8"></a><!-- doxytag: member="ospf_lsa.c::lsa_link_nbma_set" ref="ac2cb28246e80b6521fdcf3a6f87cdae8" args="(S, O)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define lsa_link_nbma_set</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">S, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">O&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;lsa_link_broadcast_set (S, O)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00616">616</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>

</div>
</div>
<a class="anchor" id="a00ef56a80eb931385ef7755ea1ae1009"></a><!-- doxytag: member="ospf_lsa.c::OSPF_INTERFACE_TIMER_ON" ref="a00ef56a80eb931385ef7755ea1ae1009" args="(T, F, V)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_INTERFACE_TIMER_ON</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">F, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">V&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">if</span> (!(<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>)) \
      (<a class="code" href="md5_8c.html#a7e83ec4daea14d9c3040af4e0ac30792">T</a>) = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, (<a class="code" href="md5_8c.html#ad6d7c306af62dbc87d1fcde6cb1bfb0e">F</a>), oi, (V))
</pre></div>
<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02443">2443</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="aa3a9efa2cceb09f1a6c7e3b5beba8bf6"></a><!-- doxytag: member="ospf_lsa.c::dump_lsa_key" ref="aa3a9efa2cceb09f1a6c7e3b5beba8bf6" args="(struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* dump_lsa_key </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00336">336</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">static</span> <span class="keywordtype">char</span> buf[] = {
    <span class="stringliteral">&quot;Type255,id(255.255.255.255),ar(255.255.255.255)&quot;</span>
  };
  <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;

  <span class="keywordflow">if</span> (lsa != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; (lsah = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordtype">char</span> <span class="keywordtype">id</span>[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>], ar[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
      strcpy (<span class="keywordtype">id</span>, inet_ntoa (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      strcpy (ar, inet_ntoa (lsah-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>));

      sprintf (buf, <span class="stringliteral">&quot;Type%d,id(%s),ar(%s)&quot;</span>, lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, <span class="keywordtype">id</span>, ar);
    }
  <span class="keywordflow">else</span>
    strcpy (buf, <span class="stringliteral">&quot;NULL&quot;</span>);

  <span class="keywordflow">return</span> buf;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aabea9a7010df99af7fd72822554cc25e"></a><!-- doxytag: member="ospf_lsa.c::get_age" ref="aabea9a7010df99af7fd72822554cc25e" args="(struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int get_age </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00164">164</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> age;

  age = ntohs (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a>) 
        + <a class="code" href="ospf__lsa_8c.html#ac65f591e95cfd07e00f945e86cb3d470">tv_floor</a> (<a class="code" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (<a class="code" href="thread_8c.html#a010d58e49a3c74ae856d5cd111f7eb62">recent_relative_time</a> (), lsa-&gt;<a class="code" href="structospf__lsa.html#a2bd331d17d54cdfcec251473668346da">tv_recv</a>));

  <span class="keywordflow">return</span> age;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0b8bba9293004c8694ac4f48a910bcde"></a><!-- doxytag: member="ospf_lsa.c::get_metric" ref="a0b8bba9293004c8694ac4f48a910bcde" args="(u_char *metric)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int32_t get_metric </td>
          <td>(</td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>metric</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00055">55</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t <a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
  m = <a class="code" href="structmetric.html">metric</a>[0];
  m = (m &lt;&lt; 8) + <a class="code" href="structmetric.html">metric</a>[1];
  m = (m &lt;&lt; 8) + <a class="code" href="structmetric.html">metric</a>[2];
  <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2543635ecb435d64f2b40f9cfdf75fc5"></a><!-- doxytag: member="ospf_lsa.c::int2tv" ref="a2543635ecb435d64f2b40f9cfdf75fc5" args="(int a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval int2tv </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00100">100</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval ret;

  ret.tv_sec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>;
  ret.tv_usec = 0;

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab361b6fb4bed2a417afb49ae46bae391"></a><!-- doxytag: member="ospf_lsa.c::is_prefix_default" ref="ab361b6fb4bed2a417afb49ae46bae391" args="(struct prefix_ipv4 *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int is_prefix_default </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02017">2017</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> q;

  q.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
  q.prefix.s_addr = 0;
  q.prefixlen = 0;

  <span class="keywordflow">return</span> <a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;q);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a133d4b07d57007e049f7ff82279f45ab"></a><!-- doxytag: member="ospf_lsa.c::link_info_set" ref="a133d4b07d57007e049f7ff82279f45ab" args="(struct stream *s, struct in_addr id, struct in_addr data, u_char type, u_char tos, u_int16_t cost)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static char link_info_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>tos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int16_t&#160;</td>
          <td class="paramname"><em>cost</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00473">473</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* LSA stream is initially allocated to OSPF_MAX_LSA_SIZE, suits</span>
<span class="comment">   * vast majority of cases. Some rare routers with lots of links need more.</span>
<span class="comment">   * we try accomodate those here.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a>(s) &lt; <a class="code" href="ospf__lsa_8h.html#a7b8bcb25ada885e766879978daeefb72">OSPF_ROUTER_LSA_LINK_SIZE</a>)
    {
      <span class="keywordtype">size_t</span> ret = <a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>;
      
      <span class="comment">/* Can we enlarge the stream still? */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a6e3b6e25ed5cfa2faea8485414a0c1a4">STREAM_SIZE</a>(s) == <a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>)
        {
          <span class="comment">/* we futz the size here for simplicity, really we need to account</span>
<span class="comment">           * for just:</span>
<span class="comment">           * IP Header - (sizeof (struct ip))</span>
<span class="comment">           * OSPF Header - OSPF_HEADER_SIZE</span>
<span class="comment">           * LSA Header - OSPF_LSA_HEADER_SIZE</span>
<span class="comment">           * MD5 auth data, if MD5 is configured - OSPF_AUTH_MD5_SIZE.</span>
<span class="comment">           *</span>
<span class="comment">           * Simpler just to subtract OSPF_MAX_LSA_SIZE though.</span>
<span class="comment">           */</span>
          ret = <a class="code" href="stream_8c.html#a6b923331d129d60c93a7cb32ffa1d767">stream_resize</a> (s, <a class="code" href="ospf__packet_8h.html#a931e4cc5c8888b6cf1d91636fd4340a6">OSPF_MAX_PACKET_SIZE</a> - <a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>);
        }
      
      <span class="keywordflow">if</span> (ret == <a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>)
        {
          <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: Out of space in LSA stream, left %zd, size %zd&quot;</span>,
                     __func__, <a class="code" href="stream_8h.html#a4705f0b1797c4f896404ec1549c91017">STREAM_REMAIN</a> (s), <a class="code" href="stream_8h.html#a6e3b6e25ed5cfa2faea8485414a0c1a4">STREAM_SIZE</a> (s));
          <span class="keywordflow">return</span> 0;
        }
    }
  
  <span class="comment">/* TOS based routing is not supported. */</span>
  <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, <span class="keywordtype">id</span>.s_addr);       <span class="comment">/* Link ID. */</span>
  <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>.s_addr);     <span class="comment">/* Link Data. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);            <span class="comment">/* Link Type. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, tos);             <span class="comment">/* TOS = 0. */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, cost);            <span class="comment">/* Link Cost. */</span>
  
  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af7f1713ea04e1406ff0339fe9d3a45bd"></a><!-- doxytag: member="ospf_lsa.c::lsa_header_set" ref="af7f1713ea04e1406ff0339fe9d3a45bd" args="(struct stream *s, u_char options, u_char type, struct in_addr id, struct in_addr router_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void lsa_header_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>router_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00368">368</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;

  lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s);

  lsah-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (0);
  lsah-&gt;<a class="code" href="structlsa__header.html#ab09eba50538b8481e12d4825dc803716">options</a> = <a class="code" href="structlsa__header.html#ab09eba50538b8481e12d4825dc803716">options</a>;
  lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a> = <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>;
  lsah-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a> = router_id;
  lsah-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a> = htonl (<a class="code" href="ospfd_8h.html#affb6c878aa462ae5de5e5db70631482d">OSPF_INITIAL_SEQUENCE_NUMBER</a>);

  <a class="code" href="stream_8c.html#aa8fdf46961b0a0aa3d014bb602712076">stream_forward_endp</a> (s, <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae47062e5fa5b505800c03d4d96358361"></a><!-- doxytag: member="ospf_lsa.c::lsa_link_broadcast_set" ref="ae47062e5fa5b505800c03d4d96358361" args="(struct stream *s, struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int lsa_link_broadcast_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00550">550</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *dr;
  <span class="keyword">struct </span>in_addr <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>, mask;
  u_int16_t cost = <a class="code" href="ospf__lsa_8c.html#a980e352e1f8a70a4cd0313ef1bdf9ede">ospf_link_cost</a> (oi);
  
  <span class="comment">/* Describe Type 3 Link. */</span>
  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#ad2f0936e61c22de1c5ffbb51f0f640a0">ISM_Waiting</a>)
    {
      <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;mask);
      <span class="keywordtype">id</span>.s_addr = oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr &amp; mask.s_addr;
      <span class="keywordflow">return</span> <a class="code" href="ospf__lsa_8c.html#a133d4b07d57007e049f7ff82279f45ab">link_info_set</a> (s, <span class="keywordtype">id</span>, mask, <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>, 0,
                            oi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a>);
    }

  dr = <a class="code" href="ospf__neighbor_8c.html#a9530eac0c0816f41b9c9306a90db3b98">ospf_nbr_lookup_by_addr</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>, &amp;<a class="code" href="ospf__interface_8h.html#aa84a7dde76ac0a31898992d050858ec5">DR</a> (oi));
  <span class="comment">/* Describe Type 2 link. */</span>
  <span class="keywordflow">if</span> (dr &amp;&amp; (dr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> == <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a> ||
         <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;<a class="code" href="ospf__interface_8h.html#aa84a7dde76ac0a31898992d050858ec5">DR</a> (oi))) &amp;&amp;
      <a class="code" href="ospf__neighbor_8c.html#a0988186d79c97a6ef8211bdf208e0113">ospf_nbr_count</a> (oi, <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>) &gt; 0)
    {
      <span class="keywordflow">return</span> <a class="code" href="ospf__lsa_8c.html#a133d4b07d57007e049f7ff82279f45ab">link_info_set</a> (s, <a class="code" href="ospf__interface_8h.html#aa84a7dde76ac0a31898992d050858ec5">DR</a> (oi), oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>,
                            <a class="code" href="ospf__lsa_8h.html#a1731562bead68083ecb572078dcce532">LSA_LINK_TYPE_TRANSIT</a>, 0, cost);
    }
  <span class="comment">/* Describe type 3 link. */</span>
  <span class="keywordflow">else</span>
    {
      <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;mask);
      <span class="keywordtype">id</span>.s_addr = oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr &amp; mask.s_addr;
      <span class="keywordflow">return</span> <a class="code" href="ospf__lsa_8c.html#a133d4b07d57007e049f7ff82279f45ab">link_info_set</a> (s, <span class="keywordtype">id</span>, mask, <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>, 0,
                            oi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3f7f68ba3b8a37ab599b08048b0dee35"></a><!-- doxytag: member="ospf_lsa.c::lsa_link_loopback_set" ref="a3f7f68ba3b8a37ab599b08048b0dee35" args="(struct stream *s, struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int lsa_link_loopback_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00585">585</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>in_addr <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>, mask;
  
  <span class="comment">/* Describe Type 3 Link. */</span>
  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> != <a class="code" href="ospf__ism_8h.html#ad5bbcdc6e422bf33064865a4aac0a172">ISM_Loopback</a>)
    <span class="keywordflow">return</span> 0;

  mask.s_addr = 0xffffffff;
  <span class="keywordtype">id</span>.s_addr = oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr;
  <span class="keywordflow">return</span> <a class="code" href="ospf__lsa_8c.html#a133d4b07d57007e049f7ff82279f45ab">link_info_set</a> (s, <span class="keywordtype">id</span>, mask, <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>, 0, oi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a95fd223fe6478011b2f5b4c50aaceb6e"></a><!-- doxytag: member="ospf_lsa.c::lsa_link_ptomp_set" ref="a95fd223fe6478011b2f5b4c50aaceb6e" args="(struct stream *s, struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int lsa_link_ptomp_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00623">623</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> links = 0;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span>in_addr <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>, mask;
  u_int16_t cost = <a class="code" href="ospf__lsa_8c.html#a980e352e1f8a70a4cd0313ef1bdf9ede">ospf_link_cost</a> (oi);

  mask.s_addr = 0xffffffff;
  <span class="keywordtype">id</span>.s_addr = oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr;
  links += <a class="code" href="ospf__lsa_8c.html#a133d4b07d57007e049f7ff82279f45ab">link_info_set</a> (s, <span class="keywordtype">id</span>, mask, <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>, 0, 0);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;PointToMultipoint: running ptomultip_set&quot;</span>);

  <span class="comment">/* Search neighbor, */</span>
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <span class="comment">/* Ignore myself. */</span>
      <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))
    <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> == <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>)

      {
        links += <a class="code" href="ospf__lsa_8c.html#a133d4b07d57007e049f7ff82279f45ab">link_info_set</a> (s, nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>,
                        <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>, 0, cost);
            <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;PointToMultipoint: set link to %s&quot;</span>,
                 inet_ntoa(oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>));
      }
  
  <span class="keywordflow">return</span> links;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a196e7121aca3f53251fdeaa8425994e3"></a><!-- doxytag: member="ospf_lsa.c::lsa_link_ptop_set" ref="a196e7121aca3f53251fdeaa8425994e3" args="(struct stream *s, struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int lsa_link_ptop_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00519">519</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> links = 0;
  <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
  <span class="keyword">struct </span>in_addr <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>, mask;
  u_int16_t cost = <a class="code" href="ospf__lsa_8c.html#a980e352e1f8a70a4cd0313ef1bdf9ede">ospf_link_cost</a> (oi);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type1]: Set link Point-to-Point&quot;</span>);

  <span class="keywordflow">if</span> ((nbr = <a class="code" href="ospf__lsa_8c.html#a276f837fc6880a278a18915a5056c05e">ospf_nbr_lookup_ptop</a> (oi)))
    <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> == <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>)
      {
    <span class="comment">/* For unnumbered point-to-point networks, the Link Data field</span>
<span class="comment">       should specify the interface&#39;s MIB-II ifIndex value. */</span>
    links += <a class="code" href="ospf__lsa_8c.html#a133d4b07d57007e049f7ff82279f45ab">link_info_set</a> (s, nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>,
                        <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>, 0, cost);
      }

  <span class="comment">/* Regardless of the state of the neighboring router, we must</span>
<span class="comment">     add a Type 3 link (stub network).</span>
<span class="comment">     N.B. Options 1 &amp; 2 share basically the same logic. */</span>
  <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;mask);
  <span class="keywordtype">id</span>.s_addr = <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(oi-&gt;<a class="code" href="structospf__interface.html#a3032c9001447ca661e19323b6c59aca6">connected</a>)-&gt;u.prefix4.s_addr &amp; mask.s_addr;
  links += <a class="code" href="ospf__lsa_8c.html#a133d4b07d57007e049f7ff82279f45ab">link_info_set</a> (s, <span class="keywordtype">id</span>, mask, <a class="code" href="ospf__lsa_8h.html#af1d17f85642c3c4a7308cb0fe1b2e9f4">LSA_LINK_TYPE_STUB</a>, 0,
              oi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a>);
  <span class="keywordflow">return</span> links;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a48e981fec8f06ea064d6a2c4a691489d"></a><!-- doxytag: member="ospf_lsa.c::lsa_link_virtuallink_set" ref="a48e981fec8f06ea064d6a2c4a691489d" args="(struct stream *s, struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int lsa_link_virtuallink_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00600">600</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
  u_int16_t cost = <a class="code" href="ospf__lsa_8c.html#a980e352e1f8a70a4cd0313ef1bdf9ede">ospf_link_cost</a> (oi);

  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a1076f1da99a0944266b120fe42fe4426">ISM_PointToPoint</a>)
    <span class="keywordflow">if</span> ((nbr = <a class="code" href="ospf__lsa_8c.html#a276f837fc6880a278a18915a5056c05e">ospf_nbr_lookup_ptop</a> (oi)))
      <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> == <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>)
    {
      <span class="keywordflow">return</span> <a class="code" href="ospf__lsa_8c.html#a133d4b07d57007e049f7ff82279f45ab">link_info_set</a> (s, nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>,
                    <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>, 0, cost);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0951db1fe1ad120fc1831443a9c834ca"></a><!-- doxytag: member="ospf_lsa.c::lsa_seqnum_increment" ref="a0951db1fe1ad120fc1831443a9c834ca" args="(struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int32_t lsa_seqnum_increment </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00358">358</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t seqnum;

  seqnum = ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>) + 1;

  <span class="keywordflow">return</span> htonl (seqnum);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a10781678cf0418caa60ce806cb18f7f1"></a><!-- doxytag: member="ospf_lsa.c::metric_type" ref="a10781678cf0418caa60ce806cb18f7f1" args="(struct ospf *ospf, u_char src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int metric_type </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01601">1601</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>].<a class="code" href="structospf.html#adcc2e8439120b1f4144a6be8d702f638">type</a> &lt; 0 ?
      <a class="code" href="ospf__lsa_8c.html#a48c5c8065d990b12ae7ec8ae63ad87b3">DEFAULT_METRIC_TYPE</a> : ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>].<a class="code" href="structospf.html#adcc2e8439120b1f4144a6be8d702f638">type</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aebf4067916a42ca176b32e7dbb15621d"></a><!-- doxytag: member="ospf_lsa.c::metric_value" ref="aebf4067916a42ca176b32e7dbb15621d" args="(struct ospf *ospf, u_char src)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int metric_value </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>src</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01608">1608</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>].<a class="code" href="structospf.html#a2bd05e59ebe8b6b342e19562d55a8a10">value</a> &lt; 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a> == <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>)
    {
      <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a1111f78d01dc9e8d522e639da7a2a36c">default_originate</a> == <a class="code" href="ospfd_8h.html#a7b4793232fba8efda09caec7411191ae">DEFAULT_ORIGINATE_ZEBRA</a>)
        <span class="keywordflow">return</span> <a class="code" href="ospf__lsa_8c.html#a0b6af5141b556d1ff1e433c475742c71">DEFAULT_DEFAULT_ORIGINATE_METRIC</a>;
      <span class="keywordflow">else</span>
        <span class="keywordflow">return</span> <a class="code" href="ospf__lsa_8c.html#a8f3d1904ca36a7ffd0778688e642b5fa">DEFAULT_DEFAULT_ALWAYS_METRIC</a>;
    }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#ac586617fdf758555fca97155ad205a64">default_metric</a> &lt; 0)
    <span class="keywordflow">return</span> <a class="code" href="ospf__lsa_8c.html#a83dbba2d928d93b1fab8b1f1137828c7">DEFAULT_DEFAULT_METRIC</a>;
      <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> ospf-&gt;<a class="code" href="structospf.html#ac586617fdf758555fca97155ad205a64">default_metric</a>;
    }

  <span class="keywordflow">return</span> ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>].<a class="code" href="structospf.html#a2bd05e59ebe8b6b342e19562d55a8a10">value</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad28d9267396cb553a97e361ffba89469"></a><!-- doxytag: member="ospf_lsa.c::ospf_check_nbr_status" ref="ad28d9267396cb553a97e361ffba89469" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_check_nbr_status </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02837">2837</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
    {
      <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
      <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;

      <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8c.html#a25678bf88909391ee05583a4e73a838d">ospf_if_is_enable</a> (oi))
    <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
          <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> == <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a> || nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> == <a class="code" href="ospf__nsm_8h.html#ab83ae0b2039dc911b4752c05da97bc8b">NSM_Loading</a>)
          {
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
        <span class="keywordflow">return</span> 0;
          }
    }

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad154699860ca80552cac4350e14a8023"></a><!-- doxytag: member="ospf_lsa.c::ospf_default_external_info" ref="ad154699860ca80552cac4350e14a8023" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structexternal__info.html">external_info</a>* ospf_default_external_info </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02132">2132</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix.s_addr = 0;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = 0;

  <span class="comment">/* First, lookup redistributed default route. */</span>
  <span class="keywordflow">for</span> (type = 0; type &lt;= <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; type++)
    <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a> (type) &amp;&amp; type != <a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>)
      {
    rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a> (type), (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
    <span class="keywordflow">if</span> (rn != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
        <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
        <span class="keywordflow">if</span> (<a class="code" href="ospf__zebra_8c.html#a7568b2d6ccc3687ad4a001cd142c4f6d">ospf_redistribute_check</a> (ospf, rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>))
          <span class="keywordflow">return</span> rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
      }
      }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab2bcb8bca8aa169076de0505e3ddad72"></a><!-- doxytag: member="ospf_lsa.c::ospf_default_originate_timer" ref="ab2bcb8bca8aa169076de0505e3ddad72" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_default_originate_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02160">2160</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span>in_addr <a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keyword">struct </span><a class="code" href="structexternal__info.html">external_info</a> *ei;
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;
  
  ospf = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);

  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix.s_addr = 0;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = 0;

  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a1111f78d01dc9e8d522e639da7a2a36c">default_originate</a> == <a class="code" href="ospfd_8h.html#aeaa21d94c404a9d98bc03e154e7db8ab">DEFAULT_ORIGINATE_ALWAYS</a>)
    {
      <span class="comment">/* If there is no default route via redistribute,</span>
<span class="comment">     then originate AS-external-LSA with nexthop 0 (self). */</span>
      <a class="code" href="structnexthop.html">nexthop</a>.s_addr = 0;
      <a class="code" href="ospf__asbr_8c.html#a6a90eaa85c3352db338f42b615933d9c">ospf_external_info_add</a> (<a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <a class="code" href="structnexthop.html">nexthop</a>);
    }

  <span class="keywordflow">if</span> ((ei = <a class="code" href="ospf__lsa_8c.html#ad154699860ca80552cac4350e14a8023">ospf_default_external_info</a> (ospf)))
    <a class="code" href="ospf__lsa_8c.html#a96d24d54ba0ac3adc1ff557621ff2911">ospf_external_lsa_originate</a> (ospf, ei);
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad6d5a002c1a2e4d50dfed4a627ea42a8"></a><!-- doxytag: member="ospf_lsa.c::ospf_discard_from_db" ref="ad6d5a002c1a2e4d50dfed4a627ea42a8" args="(struct ospf *ospf, struct ospf_lsdb *lsdb, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_discard_from_db </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsdb.html">ospf_lsdb</a> *&#160;</td>
          <td class="paramname"><em>lsdb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02590">2590</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *old;
  
  <span class="keywordflow">if</span> (!lsdb)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: Called with NULL lsdb!&quot;</span>, __func__);
      <span class="keywordflow">if</span> (!lsa)
        <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: and NULL LSA!&quot;</span>, __func__);
      <span class="keywordflow">else</span>
        <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: not associated with LSDB!&quot;</span>,
                   lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      <span class="keywordflow">return</span>;
    }
  
  old = <a class="code" href="ospf__lsdb_8c.html#aaa05b45206ad37981306f38e098eae7d">ospf_lsdb_lookup</a> (lsdb, lsa);

  <span class="keywordflow">if</span> (!old)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (old-&gt;<a class="code" href="structospf__lsa.html#a91e4ad20d925dcea4ad488137cce0e40">refresh_list</a> &gt;= 0)
    <a class="code" href="ospf__lsa_8c.html#a97aa8b72a68e3a1c96ce73a46d2c6c6c">ospf_refresher_unregister_lsa</a> (ospf, old);

  <span class="keywordflow">switch</span> (old-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
      <a class="code" href="ospf__ase_8c.html#a163acf395d21ed38123a06213d1050eb">ospf_ase_unregister_external_lsa</a> (old, ospf);
      <a class="code" href="ospf__flood_8c.html#add1aa73829326bf3733d0d442002cb95">ospf_ls_retransmit_delete_nbr_as</a> (ospf, old);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
      <a class="code" href="ospf__flood_8c.html#add1aa73829326bf3733d0d442002cb95">ospf_ls_retransmit_delete_nbr_as</a> (ospf, old);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
      <a class="code" href="ospf__flood_8c.html#a8f46211a0fe7065405e8bdda81963204">ospf_ls_retransmit_delete_nbr_area</a> (old-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>, old);
      <a class="code" href="ospf__ase_8c.html#a163acf395d21ed38123a06213d1050eb">ospf_ase_unregister_external_lsa</a> (old, ospf);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <a class="code" href="ospf__flood_8c.html#a8f46211a0fe7065405e8bdda81963204">ospf_ls_retransmit_delete_nbr_area</a> (old-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>, old);
      <span class="keywordflow">break</span>;
    }

  <a class="code" href="ospf__lsa_8c.html#a08116d262e54a43525af086f2bafe87c">ospf_lsa_maxage_delete</a> (ospf, old);
  <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (old);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3c7124f1f4f59d7577649a26a11241c1"></a><!-- doxytag: member="ospf_lsa.c::ospf_external_lsa_body_set" ref="a3c7124f1f4f59d7577649a26a11241c1" args="(struct stream *s, struct external_info *ei, struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_external_lsa_body_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structexternal__info.html">external_info</a> *&#160;</td>
          <td class="paramname"><em>ei</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01630">1630</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = &amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>;
  <span class="keyword">struct </span>in_addr mask, fwd_addr;
  u_int32_t mvalue;
  <span class="keywordtype">int</span> mtype;
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;

  <span class="comment">/* Put Network Mask. */</span>
  <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;mask);
  <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, mask.s_addr);

  <span class="comment">/* If prefix is default, specify DEFAULT_ROUTE. */</span>
  type = <a class="code" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> (&amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>) ? <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a> : ei-&gt;<a class="code" href="structexternal__info.html#ad815e4322555ec84d18056c00745008f">type</a>;
  
  mtype = (<a class="code" href="ospf__asbr_8h.html#a16928d187ee6766d6ab6c70e86bace4b">ROUTEMAP_METRIC_TYPE</a> (ei) != -1) ?
    <a class="code" href="ospf__asbr_8h.html#a16928d187ee6766d6ab6c70e86bace4b">ROUTEMAP_METRIC_TYPE</a> (ei) : <a class="code" href="ospf__lsa_8c.html#a10781678cf0418caa60ce806cb18f7f1">metric_type</a> (ospf, type);

  mvalue = (<a class="code" href="ospf__asbr_8h.html#a93186a4e5e46376f70257a370fb36325">ROUTEMAP_METRIC</a> (ei) != -1) ?
    <a class="code" href="ospf__asbr_8h.html#a93186a4e5e46376f70257a370fb36325">ROUTEMAP_METRIC</a> (ei) : <a class="code" href="ospf__lsa_8c.html#aebf4067916a42ca176b32e7dbb15621d">metric_value</a> (ospf, type);

  <span class="comment">/* Put type of external metric. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, (mtype == <a class="code" href="ospf__zebra_8h.html#a19e51df0e6ea1f740e25a2325274861c">EXTERNAL_METRIC_TYPE_2</a> ? 0x80 : 0));

  <span class="comment">/* Put 0 metric. TOS metric is not supported. */</span>
  <a class="code" href="ospf__lsa_8c.html#ac8877b96dfac044bed2f32c1aa23b0ce">stream_put_ospf_metric</a> (s, mvalue);
  
  <span class="comment">/* Get forwarding address to nexthop if on the Connection List, else 0. */</span>
  fwd_addr = <a class="code" href="ospf__lsa_8c.html#a94f361334efa74a400a02c1ef9e6057b">ospf_external_lsa_nexthop_get</a> (ospf, ei-&gt;<a class="code" href="structexternal__info.html#ab0a7fe93407788fa4e06cd66d356991b">nexthop</a>);

  <span class="comment">/* Put forwarding address. */</span>
  <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, fwd_addr.s_addr);
  
  <span class="comment">/* Put route tag -- This value should be introduced from configuration. */</span>
  <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae6fd27bc0a44fb71638c23c3ea829905"></a><!-- doxytag: member="ospf_lsa.c::ospf_external_lsa_flush" ref="ae6fd27bc0a44fb71638c23c3ea829905" args="(struct ospf *ospf, u_char type, struct prefix_ipv4 *p, unsigned int ifindex)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_external_lsa_flush </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02219">2219</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA: Flushing AS-external-LSA %s/%d&quot;</span>,
           inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);

  <span class="comment">/* First lookup LSA from LSDB. */</span>
  <span class="keywordflow">if</span> (!(lsa = <a class="code" href="ospf__asbr_8c.html#ad45c036a67747a7f65338b7ec6ff748d">ospf_external_info_find_lsa</a> (ospf, p)))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA: There is no such AS-external-LSA %s/%d in LSDB&quot;</span>,
           inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* If LSA is selforiginated, not a translated LSA, and there is </span>
<span class="comment">   * NSSA area, flush Type-7 LSA&#39;s at first. </span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a>(lsa) &amp;&amp; (ospf-&gt;<a class="code" href="structospf.html#ad20715ef15a9c610284474aa9f1df3bc">anyNSSA</a>)
      &amp;&amp; !(<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>)))
    <a class="code" href="ospf__lsa_8c.html#ad7cf1f402786baeafb4b5c21bd6faf8d">ospf_nssa_lsa_flush</a> (ospf, p);

  <span class="comment">/* Sweep LSA from Link State Retransmit List. */</span>
  <a class="code" href="ospf__flood_8c.html#add1aa73829326bf3733d0d442002cb95">ospf_ls_retransmit_delete_nbr_as</a> (ospf, lsa);

  <span class="comment">/* There must be no self-originated LSA in rtrs_external. */</span>
<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>  <span class="comment">/* Remove External route from Zebra. */</span>
  <a class="code" href="ospf__zebra_8c.html#a083ae682548f0d7eb0761a2469c8d3f3">ospf_zebra_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) p, &amp;<a class="code" href="structnexthop.html">nexthop</a>);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
  <span class="keywordflow">if</span> (!<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (lsa))
    {
      <span class="comment">/* Unregister LSA from Refresh queue. */</span>
      <a class="code" href="ospf__lsa_8c.html#a97aa8b72a68e3a1c96ce73a46d2c6c6c">ospf_refresher_unregister_lsa</a> (ospf, lsa);

      <span class="comment">/* Flush AS-external-LSA through AS. */</span>
      <a class="code" href="ospf__flood_8c.html#a68d550b90a6cd775d965f6e8f9309863">ospf_lsa_flush_as</a> (ospf, lsa);
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_external_lsa_flush(): stop&quot;</span>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a725ac21be05680d8dd3066c63e7c795f"></a><!-- doxytag: member="ospf_lsa.c::ospf_external_lsa_install" ref="a725ac21be05680d8dd3066c63e7c795f" args="(struct ospf *ospf, struct ospf_lsa *new, int rt_recalc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_external_lsa_install </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>new</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rt_recalc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02548">2548</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ospf__ase_8c.html#a8e89d2d1ed7ad307108222fad996d322">ospf_ase_register_external_lsa</a> (<span class="keyword">new</span>, ospf);
  <span class="comment">/* If LSA is not self-originated, calculate an external route. */</span>
  <span class="keywordflow">if</span> (rt_recalc)
    {
      <span class="comment">/* RFC 2328 Section 13.2 AS-external-LSAs</span>
<span class="comment">            The best route to the destination described by the AS-</span>
<span class="comment">            external-LSA must be recalculated (see Section 16.6).</span>
<span class="comment">      */</span>

      <span class="keywordflow">if</span> (!<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (<span class="keyword">new</span>))
        <a class="code" href="ospf__ase_8c.html#a0c7dee8c77caeb98ddcec77a973cf4c5">ospf_ase_incremental_update</a> (ospf, <span class="keyword">new</span>);
    }

  <span class="keywordflow">if</span> (new-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>)
    {
      <span class="comment">/* There is no point to register selforiginate Type-7 LSA for</span>
<span class="comment">       * refreshing. We rely on refreshing Type-5 LSA&#39;s </span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (<span class="keyword">new</span>))
        <span class="keywordflow">return</span> <span class="keyword">new</span>;
      <span class="keywordflow">else</span>
        {
          <span class="comment">/* Try refresh type-5 translated LSA for this LSA, if one exists.</span>
<span class="comment">           * New translations will be taken care of by the abr_task.</span>
<span class="comment">           */</span> 
          <a class="code" href="ospf__lsa_8c.html#aa870c13f8cc5f9f7243bf1d73278d1d5">ospf_translated_nssa_refresh</a> (ospf, <span class="keyword">new</span>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
        }
    }

  <span class="comment">/* Register self-originated LSA to refresh queue. </span>
<span class="comment">   * Leave Translated LSAs alone if NSSA is enabled</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (<span class="keyword">new</span>) &amp;&amp; !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (new-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a> ) )
    <a class="code" href="ospf__lsa_8c.html#aac345ad0177ef3e0a5236ef623ffb176">ospf_refresher_register_lsa</a> (ospf, <span class="keyword">new</span>);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a71319911c6d95fe6b798a45c5674732b"></a><!-- doxytag: member="ospf_lsa.c::ospf_external_lsa_new" ref="a71319911c6d95fe6b798a45c5674732b" args="(struct ospf *ospf, struct external_info *ei, struct in_addr *old_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_external_lsa_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structexternal__info.html">external_info</a> *&#160;</td>
          <td class="paramname"><em>ei</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>old_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01670">1670</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span>in_addr <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  <span class="keywordflow">if</span> (ei == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type5]: External info is NULL, could not originated&quot;</span>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type5]: Originate AS-external-LSA instance&quot;</span>);

  <span class="comment">/* If old Link State ID is specified, refresh LSA with same ID. */</span>
  <span class="keywordflow">if</span> (old_id)
    <span class="keywordtype">id</span> = *old_id;
  <span class="comment">/* Get Link State with unique ID. */</span>
  <span class="keywordflow">else</span>
    {
      <span class="keywordtype">id</span> = <a class="code" href="ospf__lsa_8c.html#a3af5cb403d133f3276e5a744f03b309a">ospf_lsa_unique_id</a> (ospf, ospf-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>, <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>, &amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>);
      <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.s_addr == 0xffffffff)
    {
      <span class="comment">/* Maybe Link State ID not available. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type5]: Link ID not available, can&#39;t originate&quot;</span>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
    }

  <span class="comment">/* Create new stream for LSA. */</span>
  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>);
  lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s);

  <span class="comment">/* Set LSA common header fields. */</span>
  <a class="code" href="ospf__lsa_8c.html#af7f1713ea04e1406ff0339fe9d3a45bd">lsa_header_set</a> (s, <a class="code" href="ospfd_8h.html#a0cb690faccaae5c2692a2f2c1b273720">OSPF_OPTION_E</a>, <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>,
          <span class="keywordtype">id</span>, ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>);

  <span class="comment">/* Set AS-external-LSA body fields. */</span>
  <a class="code" href="ospf__lsa_8c.html#a3c7124f1f4f59d7577649a26a11241c1">ospf_external_lsa_body_set</a> (s, ei, ospf);

  <span class="comment">/* Set length. */</span>
  length = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a> = htons (length);

  <span class="comment">/* Now, create OSPF LSA instance. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ();
  <span class="keyword">new</span>-&gt;area = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a> | <a class="code" href="ospf__lsa_8h.html#a7d310b6c5bc390fbe0a0da8a73c43d82">OSPF_LSA_APPROVED</a> | <a class="code" href="ospf__lsa_8h.html#a1e84ca07fab175368ae0125c93e06e4f">OSPF_LSA_SELF_CHECKED</a>);

  <span class="comment">/* Copy LSA data to store, discard stream. */</span>
  <span class="keyword">new</span>-&gt;data = <a class="code" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (length);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;data, lsah, length);
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a94f361334efa74a400a02c1ef9e6057b"></a><!-- doxytag: member="ospf_lsa.c::ospf_external_lsa_nexthop_get" ref="a94f361334efa74a400a02c1ef9e6057b" args="(struct ospf *ospf, struct in_addr nexthop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct in_addr ospf_external_lsa_nexthop_get </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>nexthop</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01515">1515</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>in_addr fwd;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> nh;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  fwd.s_addr = 0;

  <span class="keywordflow">if</span> (!<a class="code" href="structnexthop.html">nexthop</a>.s_addr)
    <span class="keywordflow">return</span> fwd;

  <span class="comment">/* Check whether nexthop is covered by OSPF network. */</span>
  nh.family = AF_INET;
  nh.u.prefix4 = <a class="code" href="structnexthop.html">nexthop</a>;
  nh.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
  
  <span class="comment">/* XXX/SCALE: If there were a lot of oi&#39;s on an ifp, then it&#39;d be</span>
<span class="comment">   * better to make use of the per-ifp table of ois.</span>
<span class="comment">   */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
    <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>))
      <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>, &amp;nh))
          <span class="keywordflow">return</span> <a class="code" href="structnexthop.html">nexthop</a>;

  <span class="keywordflow">return</span> fwd;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a96d24d54ba0ac3adc1ff557621ff2911"></a><!-- doxytag: member="ospf_lsa.c::ospf_external_lsa_originate" ref="a96d24d54ba0ac3adc1ff557621ff2911" args="(struct ospf *ospf, struct external_info *ei)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_external_lsa_originate </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structexternal__info.html">external_info</a> *&#160;</td>
          <td class="paramname"><em>ei</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02030">2030</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;

  <span class="comment">/* Added for NSSA project....</span>
<span class="comment"></span>
<span class="comment">       External LSAs are originated in ASBRs as usual, but for NSSA systems.</span>
<span class="comment">     there is the global Type-5 LSDB and a Type-7 LSDB installed for</span>
<span class="comment">     every area.  The Type-7&#39;s are flooded to every IR and every ABR; We</span>
<span class="comment">     install the Type-5 LSDB so that the normal &quot;refresh&quot; code operates</span>
<span class="comment">     as usual, and flag them as not used during ASE calculations.  The</span>
<span class="comment">     Type-7 LSDB is used for calculations.  Each Type-7 has a Forwarding</span>
<span class="comment">     Address of non-zero.</span>
<span class="comment"></span>
<span class="comment">     If an ABR is the elected NSSA translator, following SPF and during</span>
<span class="comment">     the ABR task it will translate all the scanned Type-7&#39;s, with P-bit</span>
<span class="comment">     ON and not-self generated, and translate to Type-5&#39;s throughout the</span>
<span class="comment">     non-NSSA/STUB AS.</span>
<span class="comment"></span>
<span class="comment">     A difference in operation depends whether this ASBR is an ABR</span>
<span class="comment">     or not.  If not an ABR, the P-bit is ON, to indicate that any</span>
<span class="comment">     elected NSSA-ABR can perform its translation.</span>
<span class="comment"></span>
<span class="comment">     If an ABR, the P-bit is OFF;  No ABR will perform translation and</span>
<span class="comment">     this ASBR will flood the Type-5 LSA as usual.</span>
<span class="comment"></span>
<span class="comment">     For the case where this ASBR is not an ABR, the ASE calculations</span>
<span class="comment">     are based on the Type-5 LSDB;  The Type-7 LSDB exists just to</span>
<span class="comment">     demonstrate to the user that there are LSA&#39;s that belong to any</span>
<span class="comment">     attached NSSA.</span>
<span class="comment"></span>
<span class="comment">     Finally, it just so happens that when the ABR is translating every</span>
<span class="comment">     Type-7 into Type-5, it installs it into the Type-5 LSDB as an</span>
<span class="comment">     approved Type-5 (translated from Type-7);  at the end of translation</span>
<span class="comment">     if any Translated Type-5&#39;s remain unapproved, then they must be</span>
<span class="comment">     flushed from the AS.</span>
<span class="comment"></span>
<span class="comment">     */</span>
  
  <span class="comment">/* Check the AS-external-LSA should be originated. */</span>
  <span class="keywordflow">if</span> (!<a class="code" href="ospf__zebra_8c.html#a7568b2d6ccc3687ad4a001cd142c4f6d">ospf_redistribute_check</a> (ospf, ei, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>))
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <span class="comment">/* Create new AS-external-LSA instance. */</span>
  <span class="keywordflow">if</span> ((<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a71319911c6d95fe6b798a45c5674732b">ospf_external_lsa_new</a> (ospf, ei, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type5:%s]: Could not originate AS-external-LSA&quot;</span>,
           inet_ntoa (ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>.prefix));
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="comment">/* Install newly created LSA into Type-5 LSDB, lock = 1. */</span>
  <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="comment">/* Update LSA origination count. */</span>
  ospf-&gt;<a class="code" href="structospf.html#a4a3d13744fa4c72bfdab00cb7c7a3783">lsa_originate_count</a>++;

  <span class="comment">/* Flooding new LSA. only to AS (non-NSSA/STUB) */</span>
  <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="comment">/* If there is any attached NSSA, do special handling */</span>
  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#ad20715ef15a9c610284474aa9f1df3bc">anyNSSA</a> &amp;&amp;
      <span class="comment">/* stay away from translated LSAs! */</span>
      !(<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>)))
    <a class="code" href="ospf__lsa_8c.html#ac5aab1f054bdc79afeae5f25714ef277">ospf_install_flood_nssa</a> (ospf, <span class="keyword">new</span>, ei); <span class="comment">/* Install/Flood Type-7 to all NSSAs */</span>

  <span class="comment">/* Debug logging. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Originate AS-external-LSA %p&quot;</span>,
         new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id), <span class="keyword">new</span>);
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
    }

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3e9dc40b309b42e40bf32b5ec06fd3f8"></a><!-- doxytag: member="ospf_lsa.c::ospf_external_lsa_originate_timer" ref="a3e9dc40b309b42e40bf32b5ec06fd3f8" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_external_lsa_originate_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02110">2110</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structexternal__info.html">external_info</a> *ei;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *rt;
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = <a class="code" href="thread_8h.html#a88d7c483cad15baac709fac747480a11">THREAD_VAL</a> (thread);

  ospf-&gt;<a class="code" href="structospf.html#ad5e7d717716a67c3b2198f40c2bf2598">t_external_lsa</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Originate As-external-LSA from all type of distribute source. */</span>
  <span class="keywordflow">if</span> ((rt = <a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a> (type)))
    <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
      <span class="keywordflow">if</span> ((ei = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">if</span> (!<a class="code" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>))
      <span class="keywordflow">if</span> (!<a class="code" href="ospf__lsa_8c.html#a96d24d54ba0ac3adc1ff557621ff2911">ospf_external_lsa_originate</a> (ospf, ei))
        <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;LSA: AS-external-LSA was not originated.&quot;</span>);
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a12f57ed226cea2cfd9499069dbde2f3c"></a><!-- doxytag: member="ospf_lsa.c::ospf_external_lsa_refresh" ref="a12f57ed226cea2cfd9499069dbde2f3c" args="(struct ospf *ospf, struct ospf_lsa *lsa, struct external_info *ei, int force)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_external_lsa_refresh </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structexternal__info.html">external_info</a> *&#160;</td>
          <td class="paramname"><em>ei</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>force</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02331">2331</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keywordtype">int</span> changed;
  
  <span class="comment">/* Check the AS-external-LSA should be originated. */</span>
  <span class="keywordflow">if</span> (!<a class="code" href="ospf__zebra_8c.html#a7568b2d6ccc3687ad4a001cd142c4f6d">ospf_redistribute_check</a> (ospf, ei, &amp;changed))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Could not be refreshed, &quot;</span>
                   <span class="stringliteral">&quot;redist check fail&quot;</span>, 
                   lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      <a class="code" href="ospf__lsa_8c.html#ae6fd27bc0a44fb71638c23c3ea829905">ospf_external_lsa_flush</a> (ospf, ei-&gt;<a class="code" href="structexternal__info.html#ad815e4322555ec84d18056c00745008f">type</a>, &amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>,
                   ei-&gt;<a class="code" href="structexternal__info.html#aa44606ec20e4cd877211173bceaac116">ifindex</a> <span class="comment">/*, ei-&gt;nexthop */</span>);
      <span class="keywordflow">return</span>;
    }

  <span class="keywordflow">if</span> (!changed &amp;&amp; !force)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Not refreshed, not changed/forced&quot;</span>,
                   lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* Delete LSA from neighbor retransmit-list. */</span>
  <a class="code" href="ospf__flood_8c.html#add1aa73829326bf3733d0d442002cb95">ospf_ls_retransmit_delete_nbr_as</a> (ospf, lsa);

  <span class="comment">/* Unregister AS-external-LSA from refresh-list. */</span>
  <a class="code" href="ospf__lsa_8c.html#a97aa8b72a68e3a1c96ce73a46d2c6c6c">ospf_refresher_unregister_lsa</a> (ospf, lsa);

  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a71319911c6d95fe6b798a45c5674732b">ospf_external_lsa_new</a> (ospf, ei, &amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>);
  
  <span class="keywordflow">if</span> (<span class="keyword">new</span> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Could not be refreshed&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>,
           inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      <span class="keywordflow">return</span>;
    }
  
  <span class="keyword">new</span>-&gt;data-&gt;ls_seqnum = <a class="code" href="ospf__lsa_8c.html#a0951db1fe1ad120fc1831443a9c834ca">lsa_seqnum_increment</a> (lsa);

  <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);   <span class="comment">/* As type-5. */</span>

  <span class="comment">/* Flood LSA through AS. */</span>
  <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="comment">/* If any attached NSSA, install as Type-7, flood to all NSSA Areas */</span>
  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#ad20715ef15a9c610284474aa9f1df3bc">anyNSSA</a> &amp;&amp; !(<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>)))
    <a class="code" href="ospf__lsa_8c.html#ac5aab1f054bdc79afeae5f25714ef277">ospf_install_flood_nssa</a> (ospf, <span class="keyword">new</span>, ei); <span class="comment">/* Install/Flood per new rules */</span>

  <span class="comment">/* Register self-originated LSA to refresh queue. </span>
<span class="comment">   * Translated LSAs should not be registered, but refreshed upon </span>
<span class="comment">   * refresh of the Type-7</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> ( !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>) )
    <a class="code" href="ospf__lsa_8c.html#aac345ad0177ef3e0a5236ef623ffb176">ospf_refresher_register_lsa</a> (ospf, <span class="keyword">new</span>);

  <span class="comment">/* Debug logging. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: AS-external-LSA refresh&quot;</span>,
                 new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id));
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
    }

  <span class="keywordflow">return</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1be6376d9b23634a76f2a6a07833fe1e"></a><!-- doxytag: member="ospf_lsa.c::ospf_external_lsa_refresh_default" ref="a1be6376d9b23634a76f2a6a07833fe1e" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_external_lsa_refresh_default </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02268">2268</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structexternal__info.html">external_info</a> *ei;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;

  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = 0;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix.s_addr = 0;

  ei = <a class="code" href="ospf__lsa_8c.html#ad154699860ca80552cac4350e14a8023">ospf_default_external_info</a> (ospf);
  lsa = <a class="code" href="ospf__asbr_8c.html#ad45c036a67747a7f65338b7ec6ff748d">ospf_external_info_find_lsa</a> (ospf, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="keywordflow">if</span> (ei)
    {
      <span class="keywordflow">if</span> (lsa)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type5:0.0.0.0]: Refresh AS-external-LSA %p&quot;</span>, lsa);
      <a class="code" href="ospf__lsa_8c.html#a12f57ed226cea2cfd9499069dbde2f3c">ospf_external_lsa_refresh</a> (ospf, lsa, ei, <a class="code" href="ospf__lsa_8h.html#a389234e05af4a29be76c63dc46576791">LSA_REFRESH_FORCE</a>);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type5:0.0.0.0]: Originate AS-external-LSA&quot;</span>);
      <a class="code" href="ospf__lsa_8c.html#a96d24d54ba0ac3adc1ff557621ff2911">ospf_external_lsa_originate</a> (ospf, ei);
    }
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (lsa)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type5:0.0.0.0]: Flush AS-external-LSA&quot;</span>);
      <a class="code" href="ospf__flood_8c.html#a68d550b90a6cd775d965f6e8f9309863">ospf_lsa_flush_as</a> (ospf, lsa);
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aef94b25c2a2fad9088e82a85ee71f226"></a><!-- doxytag: member="ospf_lsa.c::ospf_external_lsa_refresh_type" ref="aef94b25c2a2fad9088e82a85ee71f226" args="(struct ospf *ospf, u_char type, int force)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_external_lsa_refresh_type </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>force</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02308">2308</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structexternal__info.html">external_info</a> *ei;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> != <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>)
    <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a>(<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>))
      <span class="comment">/* Refresh each redistributed AS-external-LSAs. */</span>
      <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((ei = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>))
      <span class="keywordflow">if</span> (!<a class="code" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> (&amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>))
        {
          <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;

          <span class="keywordflow">if</span> ((lsa = <a class="code" href="ospf__asbr_8c.html#ad45c036a67747a7f65338b7ec6ff748d">ospf_external_info_find_lsa</a> (ospf, &amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>)))
        <a class="code" href="ospf__lsa_8c.html#a12f57ed226cea2cfd9499069dbde2f3c">ospf_external_lsa_refresh</a> (ospf, lsa, ei, force);
          <span class="keywordflow">else</span>
        <a class="code" href="ospf__lsa_8c.html#a96d24d54ba0ac3adc1ff557621ff2911">ospf_external_lsa_originate</a> (ospf, ei);
        }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a286fff473dd64a6db6e15d1a04f4b5b2"></a><!-- doxytag: member="ospf_lsa.c::ospf_flush_self_originated_lsas_now" ref="a286fff473dd64a6db6e15d1a04f4b5b2" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_flush_self_originated_lsas_now </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03371">3371</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node2, *nnode2;
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keywordtype">int</span> need_to_flush_ase = 0;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, nnode, area))
    {
      <span class="keywordflow">if</span> ((lsa = area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Schedule self-originated LSA to FLUSH&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));

          <a class="code" href="ospf__flood_8c.html#ad3049ba87364a6fbed7d352023e33a4a">ospf_lsa_flush_area</a> (lsa, area);
          <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>);
          area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (area-&gt;<a class="code" href="structospf__area.html#a7101904a0d8d145b671919e47eb7c107">t_router_lsa_self</a>);
        }

      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (area-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, node2, nnode2, oi))
        {
          <span class="keywordflow">if</span> ((lsa = oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
               &amp;&amp;   oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a7f179a571f4f8e112c0b887f39c87f23">ISM_DR</a>
               &amp;&amp;   oi-&gt;<a class="code" href="structospf__interface.html#a6030ef4a9cb03295e6ab3481df3e6147">full_nbrs</a> &gt; 0)
            {
              <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Schedule self-originated LSA to FLUSH&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));

              <a class="code" href="ospf__flood_8c.html#ad3049ba87364a6fbed7d352023e33a4a">ospf_lsa_flush_area</a> (oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>, area);
              <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>);
              oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
              <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (oi-&gt;<a class="code" href="structospf__interface.html#a278866980d98aa3ae2c393acb08c0337">t_network_lsa_self</a>);
            }

          <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>
          &amp;&amp;  area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a43f84c8e8584ccc8b82990d251abec4d">OSPF_AREA_DEFAULT</a>)
            need_to_flush_ase = 1;
        }

      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a58ae6df59f7476d7784e19f7ca19db1f">SUMMARY_LSDB</a> (area), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#ae95776abdf9ff1a75f16cae6680e1a08">ospf_lsa_flush_schedule</a> (ospf, lsa);
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a145a10afd0c8a801d2e84b26c0becbfd">ASBR_SUMMARY_LSDB</a> (area), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#ae95776abdf9ff1a75f16cae6680e1a08">ospf_lsa_flush_schedule</a> (ospf, lsa);
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a7b6d75a56662bb4e124777b376bb84da">OPAQUE_LINK_LSDB</a> (area), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#ae95776abdf9ff1a75f16cae6680e1a08">ospf_lsa_flush_schedule</a> (ospf, lsa);
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#aec3918874489142043aedd1ac5855f57">OPAQUE_AREA_LSDB</a> (area), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#ae95776abdf9ff1a75f16cae6680e1a08">ospf_lsa_flush_schedule</a> (ospf, lsa);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
    }

  <span class="keywordflow">if</span> (need_to_flush_ase)
    {
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#ae56a8a7b638bd22caf86ea3d810fdbd9">EXTERNAL_LSDB</a> (ospf), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#ae95776abdf9ff1a75f16cae6680e1a08">ospf_lsa_flush_schedule</a> (ospf, lsa);
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#ac7a1aa21490d2bd86999d2e494cde6d0">OPAQUE_AS_LSDB</a> (ospf), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#ae95776abdf9ff1a75f16cae6680e1a08">ospf_lsa_flush_schedule</a> (ospf, lsa);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
    }

  <span class="comment">/*</span>
<span class="comment">   * Make sure that the MaxAge LSA remover is executed immediately,</span>
<span class="comment">   * without conflicting to other threads.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (ospf-&gt;t_maxage != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (ospf-&gt;t_maxage);
      <a class="code" href="thread_8h.html#adfc9185c89375a240b90ab50241c497d">thread_execute</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__lsa_8c.html#a45711592b5267b56be96e4504967ea69">ospf_maxage_lsa_remover</a>, ospf, 0);
    }

  <span class="keywordflow">return</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3576776ab14a426e21170b01de869938"></a><!-- doxytag: member="ospf_lsa.c::ospf_get_ip_from_ifp" ref="a3576776ab14a426e21170b01de869938" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct in_addr ospf_get_ip_from_ifp </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01549">1549</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>in_addr fwd;

  fwd.s_addr = 0;

  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>))
    <span class="keywordflow">return</span> oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
  
  <span class="keywordflow">return</span> fwd;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a921e59315c0352509765ca93fb2fc200"></a><!-- doxytag: member="ospf_lsa.c::ospf_get_nssa_ip" ref="a921e59315c0352509765ca93fb2fc200" args="(struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct in_addr ospf_get_nssa_ip </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01563">1563</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>in_addr fwd;
  <span class="keyword">struct </span>in_addr best_default;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  fwd.s_addr = 0;
  best_default.s_addr = 0;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
    {
      <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>))
    <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a>)
      <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a> &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
        {
          <span class="keywordflow">if</span> (best_default.s_addr == 0)
        best_default = oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
          <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a> == area)
        <span class="keywordflow">return</span> oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
        }
    }
  <span class="keywordflow">if</span> (best_default.s_addr != 0)
    <span class="keywordflow">return</span> best_default;

  <span class="keywordflow">if</span> (best_default.s_addr != 0)
    <span class="keywordflow">return</span> best_default;

  <span class="keywordflow">return</span> fwd;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac5aab1f054bdc79afeae5f25714ef277"></a><!-- doxytag: member="ospf_lsa.c::ospf_install_flood_nssa" ref="ac5aab1f054bdc79afeae5f25714ef277" args="(struct ospf *ospf, struct ospf_lsa *lsa, struct external_info *ei)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_install_flood_nssa </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structexternal__info.html">external_info</a> *&#160;</td>
          <td class="paramname"><em>ei</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01735">1735</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *extlsa;
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="comment">/* LSA may be a Type-5 originated via translation of a Type-7 LSA</span>
<span class="comment">   * which originated from an NSSA area. In which case it should not be </span>
<span class="comment">   * flooded back to NSSA areas.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>))
    <span class="keywordflow">return</span>;
    
  <span class="comment">/* NSSA Originate or Refresh (If anyNSSA)</span>
<span class="comment"></span>
<span class="comment">  LSA is self-originated. And just installed as Type-5.</span>
<span class="comment">  Additionally, install as Type-7 LSDB for every attached NSSA.</span>
<span class="comment"></span>
<span class="comment">  P-Bit controls which ABR performs translation to outside world; If</span>
<span class="comment">  we are an ABR....do not set the P-bit, because we send the Type-5,</span>
<span class="comment">  not as the ABR Translator, but as the ASBR owner within the AS!</span>
<span class="comment"></span>
<span class="comment">  If we are NOT ABR, Flood through NSSA as Type-7 w/P-bit set.  The</span>
<span class="comment">  elected ABR Translator will see the P-bit, Translate, and re-flood.</span>
<span class="comment"></span>
<span class="comment">  Later, ABR_TASK and P-bit will scan Type-7 LSDB and translate to</span>
<span class="comment">  Type-5&#39;s to non-NSSA Areas.  (it will also attempt a re-install) */</span>

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, nnode, area))
    {
      <span class="comment">/* Don&#39;t install Type-7 LSA&#39;s into nonNSSA area */</span>
      <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> != <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a>)
        <span class="keywordflow">continue</span>;

      <span class="comment">/* make lsa duplicate, lock=1 */</span>
      <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#ae1fc18f9e301f5d14a4090a434a3b14d">ospf_lsa_dup</a> (lsa);
      <span class="keyword">new</span>-&gt;area = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
      <span class="keyword">new</span>-&gt;data-&gt;type = <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>;

      <span class="comment">/* set P-bit if not ABR */</span>
      <span class="keywordflow">if</span> (! <a class="code" href="ospfd_8h.html#a66c6ce8df7e5b79426d9eca9f8ef6d27">IS_OSPF_ABR</a> (ospf))
        {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a>(new-&gt;data-&gt;options, <a class="code" href="ospfd_8h.html#af9739335948debe99dd1e5e62d87c00c">OSPF_OPTION_NP</a>);
       
      <span class="comment">/* set non-zero FWD ADDR</span>
<span class="comment">       </span>
<span class="comment">      draft-ietf-ospf-nssa-update-09.txt</span>
<span class="comment">       </span>
<span class="comment">      if the network between the NSSA AS boundary router and the</span>
<span class="comment">      adjacent AS is advertised into OSPF as an internal OSPF route,</span>
<span class="comment">      the forwarding address should be the next op address as is cu</span>
<span class="comment">      currently done with type-5 LSAs.  If the intervening network is</span>
<span class="comment">      not adversited into OSPF as an internal OSPF route and the</span>
<span class="comment">      type-7 LSA&#39;s P-bit is set a forwarding address should be</span>
<span class="comment">      selected from one of the router&#39;s active OSPF inteface addresses</span>
<span class="comment">      which belong to the NSSA.  If no such addresses exist, then</span>
<span class="comment">      no type-7 LSA&#39;s with the P-bit set should originate from this</span>
<span class="comment">      router.   */</span>
       
      <span class="comment">/* kevinm: not updating lsa anymore, just new */</span>
      extlsa = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *)(new-&gt;data);
       
      <span class="keywordflow">if</span> (extlsa-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>.s_addr == 0)
        extlsa-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a> = <a class="code" href="ospf__lsa_8c.html#a921e59315c0352509765ca93fb2fc200">ospf_get_nssa_ip</a>(area); <span class="comment">/* this NSSA area in ifp */</span>

      <span class="keywordflow">if</span> (extlsa-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>.s_addr == 0) 
      {
        <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type-7]: Could not build FWD-ADDR&quot;</span>);
        <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (<span class="keyword">new</span>);
        <span class="keywordflow">return</span>;
      }
    }

      <span class="comment">/* install also as Type-7 */</span>
      <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);   <span class="comment">/* Remove Old, Lock New = 2 */</span>

      <span class="comment">/* will send each copy, lock=2+n */</span>
      <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>); <span class="comment">/* all attached NSSA&#39;s, no AS/STUBs */</span>
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a980e352e1f8a70a4cd0313ef1bdf9ede"></a><!-- doxytag: member="ospf_lsa.c::ospf_link_cost" ref="a980e352e1f8a70a4cd0313ef1bdf9ede" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static u_int16_t ospf_link_cost </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00462">462</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* RFC3137 stub router support */</span>
  <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#a867d739fef4ebeba5904af241dbcf88f">stub_router_state</a>, <a class="code" href="ospfd_8h.html#a11d7f12dfe50bd7cc95c7e76615cb8bc">OSPF_AREA_IS_STUB_ROUTED</a>))
    <span class="keywordflow">return</span> oi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a>;
  <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> <a class="code" href="ospfd_8h.html#a79eb766203fe4ecce14c1b90b135a69d">OSPF_OUTPUT_COST_INFINITE</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae43288239f3e631018a7d2320b76fc6b"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_action" ref="ae43288239f3e631018a7d2320b76fc6b" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_lsa_action </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03553">3553</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlsa__action.html">lsa_action</a> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;

  data = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="structlsa__action.html#a32e411c8427242dd9b30498702559a88">lsa</a>, LSA) == <a class="code" href="ospf__dump_8h.html#a53cfd985a6bfab8b48b939e4b8a5a32a">OSPF_DEBUG_LSA</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Action]: Performing scheduled LSA action: %d&quot;</span>,
           data-&gt;<a class="code" href="structlsa__action.html#a81079a909cd32f9abb9f4fc1d71c82f4">action</a>);

  <span class="keywordflow">switch</span> (data-&gt;<a class="code" href="structlsa__action.html#a81079a909cd32f9abb9f4fc1d71c82f4">action</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8c.html#a0771b37557fd8283b02242fef0a3cde6">LSA_ACTION_FLOOD_AREA</a>:
      <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (data-&gt;<a class="code" href="structlsa__action.html#aadabd29582be574d1435449db2549728">area</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, data-&gt;<a class="code" href="structlsa__action.html#a32e411c8427242dd9b30498702559a88">lsa</a>);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8c.html#a880dbf45969502cf9f7b5b99a30a727d">LSA_ACTION_FLUSH_AREA</a>:
      <a class="code" href="ospf__flood_8c.html#ad3049ba87364a6fbed7d352023e33a4a">ospf_lsa_flush_area</a> (data-&gt;<a class="code" href="structlsa__action.html#a32e411c8427242dd9b30498702559a88">lsa</a>, data-&gt;<a class="code" href="structlsa__action.html#aadabd29582be574d1435449db2549728">area</a>);
      <span class="keywordflow">break</span>;
    }

  <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;data-&gt;<a class="code" href="structlsa__action.html#a32e411c8427242dd9b30498702559a88">lsa</a>); <span class="comment">/* Message */</span>
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba66fb9102d923b5abeecd720d1a6e1342">MTYPE_OSPF_MESSAGE</a>, data);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a51f65ba10ce016111b959f7ce2790eaa"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_checksum" ref="a51f65ba10ce016111b959f7ce2790eaa" args="(struct lsa_header *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int16_t ospf_lsa_checksum </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00180">180</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char *<a class="code" href="structbuffer.html">buffer</a> = (u_char *) &amp;lsa-&gt;<a class="code" href="structlsa__header.html#ab09eba50538b8481e12d4825dc803716">options</a>;
  <span class="keywordtype">int</span> options_offset = buffer - (u_char *) &amp;lsa-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a>; <span class="comment">/* should be 2 */</span>

  <span class="comment">/* Skip the AGE field */</span>
  u_int16_t len = ntohs(lsa-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>) - options_offset; 

  <span class="comment">/* Checksum offset starts from &quot;options&quot; field, not the beginning of the</span>
<span class="comment">     lsa_header struct. The offset is 14, rather than 16. */</span>
  <span class="keywordtype">int</span> checksum_offset = (u_char *) &amp;lsa-&gt;<a class="code" href="structlsa__header.html#aa481a4d27dbba4c1921a74ba672fc2f4">checksum</a> - buffer;

  <span class="keywordflow">return</span> <a class="code" href="checksum_8c.html#a097fa5404eb654e8e112bb954bf4ef15">fletcher_checksum</a>(buffer, len, checksum_offset);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8eac97d7859911bf5671284e8d03d1a9"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_data_dup" ref="a8eac97d7859911bf5671284e8d03d1a9" args="(struct lsa_header *lsah)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structlsa__header.html">lsa_header</a>* ospf_lsa_data_dup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td>
          <td class="paramname"><em>lsah</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00311">311</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *<span class="keyword">new</span>;

  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (ntohs (lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>));
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<span class="keyword">new</span>, lsah, ntohs (lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>));

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af4bb20de4747d6f5a373b26584e0d4ce"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_data_free" ref="af4bb20de4747d6f5a373b26584e0d4ce" args="(struct lsa_header *lsah)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_lsa_data_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td>
          <td class="paramname"><em>lsah</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00323">323</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: data freed %p&quot;</span>,
           lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), lsah);

  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba69acc604a5c50231d2ce7a109094885e">MTYPE_OSPF_LSA_DATA</a>, lsah);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6ac1c58b3b248e433f625521b186f923"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_data_new" ref="a6ac1c58b3b248e433f625521b186f923" args="(size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structlsa__header.html">lsa_header</a>* ospf_lsa_data_new </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00304">304</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba69acc604a5c50231d2ce7a109094885e">MTYPE_OSPF_LSA_DATA</a>, size);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab52aee7f3611698de9df9e83d65eab82"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_different" ref="ab52aee7f3611698de9df9e83d65eab82" args="(struct ospf_lsa *l1, struct ospf_lsa *l2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_lsa_different </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>l1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>l2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03263">3263</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">char</span> *p1, *p2;
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (l1);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (l2);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (l1-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (l2-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);

  <span class="keywordflow">if</span> (l1-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ab09eba50538b8481e12d4825dc803716">options</a> != l2-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ab09eba50538b8481e12d4825dc803716">options</a>)
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (l1) &amp;&amp; !<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (l2))
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (l2) &amp;&amp; !<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (l1))
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">if</span> (l1-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a> != l2-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>)
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">if</span> (l1-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a> ==  0)
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> ((l1-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a> ^ l2-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>), <a class="code" href="ospf__lsa_8h.html#a780906236e4b5ef16a4a720a57e3f617">OSPF_LSA_RECEIVED</a>))
    <span class="keywordflow">return</span> 1; <span class="comment">/* May be a stale LSA in the LSBD */</span>

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> ( ntohs(l1-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>) &gt; <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>);

  p1 = (<span class="keywordtype">char</span> *) l1-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
  p2 = (<span class="keywordtype">char</span> *) l2-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;

  <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (p1 + <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>, p2 + <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>,
              ntohs( l1-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a> ) - <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>) != 0)
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a85a6af80b4a93ce1a4e9ebb397920de4"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_discard" ref="a85a6af80b4a93ce1a4e9ebb397920de4" args="(struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_lsa_discard </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00293">293</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a7c24685e365aa6c180d976e7ccfeb302">OSPF_LSA_DISCARD</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a7c24685e365aa6c180d976e7ccfeb302">OSPF_LSA_DISCARD</a>);
      <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;lsa);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae1fc18f9e301f5d14a4090a434a3b14d"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_dup" ref="ae1fc18f9e301f5d14a4090a434a3b14d" args="(struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_lsa_dup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00217">217</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;

  <span class="keywordflow">if</span> (lsa == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5bccaee3075ceeb63ae53e83a6ec262b">MTYPE_OSPF_LSA</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a>));

  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<span class="keyword">new</span>, lsa, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a>));
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a7c24685e365aa6c180d976e7ccfeb302">OSPF_LSA_DISCARD</a>);
  <span class="keyword">new</span>-&gt;lock = 1;
  <span class="keyword">new</span>-&gt;retransmit_counter = 0;
  <span class="keyword">new</span>-&gt;data = <a class="code" href="ospf__lsa_8c.html#a8eac97d7859911bf5671284e8d03d1a9">ospf_lsa_data_dup</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);

  <span class="comment">/* kevinm: Clear the refresh_list, otherwise there are going</span>
<span class="comment">     to be problems when we try to remove the LSA from the</span>
<span class="comment">     queue (which it&#39;s not a member of.)</span>
<span class="comment">     XXX: Should we add the LSA to the refresh_list queue? */</span>
  <span class="keyword">new</span>-&gt;refresh_list = -1;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA: duplicated %p (new: %p)&quot;</span>, lsa, <span class="keyword">new</span>);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae95776abdf9ff1a75f16cae6680e1a08"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_flush_schedule" ref="ae95776abdf9ff1a75f16cae6680e1a08" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_lsa_flush_schedule </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03342">3342</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (lsa == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || !<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (lsa))
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Schedule self-originated LSA to FLUSH&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));

  <span class="comment">/* Force given lsa&#39;s age to MaxAge. */</span>
  lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>);

  <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
    {
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
      <a class="code" href="ospf__opaque_8h.html#a5d47cc4e0de52b67511124fcb5aa2be5">ospf_opaque_lsa_refresh</a> (lsa);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
    <span class="keywordflow">default</span>:
      <a class="code" href="ospf__lsa_8c.html#ab730b081b5aa660ffc5d0ec642d03d27">ospf_lsa_maxage</a> (ospf, lsa);
      <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a904e1877aa655ae5311549df1b51efcf"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_free" ref="a904e1877aa655ae5311549df1b51efcf" args="(struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_lsa_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00246">246</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a460987678e5eaec9ae6033dc5982e6ee">lock</a> == 0);
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA: freed %p&quot;</span>, lsa);

  <span class="comment">/* Delete LSA data. */</span>
  <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <a class="code" href="ospf__lsa_8c.html#af4bb20de4747d6f5a373b26584e0d4ce">ospf_lsa_data_free</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a91e4ad20d925dcea4ad488137cce0e40">refresh_list</a> &lt; 0);

  memset (lsa, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a>)); 
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5bccaee3075ceeb63ae53e83a6ec262b">MTYPE_OSPF_LSA</a>, lsa);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1733ac6eff32161699d5e9d80a893351"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_install" ref="a1733ac6eff32161699d5e9d80a893351" args="(struct ospf *ospf, struct ospf_interface *oi, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_lsa_install </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02639">2639</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *old = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__lsdb.html">ospf_lsdb</a> *lsdb = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keywordtype">int</span> rt_recalc;

  <span class="comment">/* Set LSDB. */</span>
  <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
    {
      <span class="comment">/* kevinm */</span>
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
      <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>)
    lsdb = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>;
      <span class="keywordflow">else</span>
    lsdb = ospf-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
      lsdb = ospf-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      lsdb = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>;
      <span class="keywordflow">break</span>;
    }

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsdb);

  <span class="comment">/*  RFC 2328 13.2.  Installing LSAs in the database</span>
<span class="comment"></span>
<span class="comment">        Installing a new LSA in the database, either as the result of</span>
<span class="comment">        flooding or a newly self-originated LSA, may cause the OSPF</span>
<span class="comment">        routing table structure to be recalculated.  The contents of the</span>
<span class="comment">        new LSA should be compared to the old instance, if present.  If</span>
<span class="comment">        there is no difference, there is no need to recalculate the</span>
<span class="comment">        routing table. When comparing an LSA to its previous instance,</span>
<span class="comment">        the following are all considered to be differences in contents:</span>
<span class="comment"></span>
<span class="comment">            o   The LSA&#39;s Options field has changed.</span>
<span class="comment"></span>
<span class="comment">            o   One of the LSA instances has LS age set to MaxAge, and</span>
<span class="comment">                the other does not.</span>
<span class="comment"></span>
<span class="comment">            o   The length field in the LSA header has changed.</span>
<span class="comment"></span>
<span class="comment">            o   The body of the LSA (i.e., anything outside the 20-byte</span>
<span class="comment">                LSA header) has changed. Note that this excludes changes</span>
<span class="comment">                in LS Sequence Number and LS Checksum.</span>
<span class="comment"></span>
<span class="comment">  */</span>
  <span class="comment">/* Look up old LSA and determine if any SPF calculation or incremental</span>
<span class="comment">     update is needed */</span>
  old = <a class="code" href="ospf__lsdb_8c.html#aaa05b45206ad37981306f38e098eae7d">ospf_lsdb_lookup</a> (lsdb, lsa);

  <span class="comment">/* Do comparision and record if recalc needed. */</span>
  rt_recalc = 0;
  <span class="keywordflow">if</span> (  old == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || <a class="code" href="ospf__lsa_8c.html#ab52aee7f3611698de9df9e83d65eab82">ospf_lsa_different</a>(old, lsa))
    rt_recalc = 1;

  <span class="comment">/*</span>
<span class="comment">     Sequence number check (Section 14.1 of rfc 2328)</span>
<span class="comment">     &quot;Premature aging is used when it is time for a self-originated</span>
<span class="comment">      LSA&#39;s sequence number field to wrap.  At this point, the current</span>
<span class="comment">      LSA instance (having LS sequence number MaxSequenceNumber) must</span>
<span class="comment">      be prematurely aged and flushed from the routing domain before a</span>
<span class="comment">      new instance with sequence number equal to InitialSequenceNumber</span>
<span class="comment">      can be originated. &quot;</span>
<span class="comment">   */</span>

  <span class="keywordflow">if</span> (ntohl(lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>) - 1 == <a class="code" href="ospfd_8h.html#aac7261415d362e8c1ee96d13ddfe25de">OSPF_MAX_SEQUENCE_NUMBER</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#ad430a0bdeae46dc78ef311cf2c511bad">ospf_lsa_is_self_originated</a>(ospf, lsa))
        {
          lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a> = htonl(<a class="code" href="ospfd_8h.html#aac7261415d362e8c1ee96d13ddfe25de">OSPF_MAX_SEQUENCE_NUMBER</a>);
          
          <span class="keywordflow">if</span> (!<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a>(lsa))
            lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a> |= <a class="code" href="ospf__lsa_8h.html#a8a7a31ebbedfab83203700cb050661af">OSPF_LSA_PREMATURE_AGE</a>;
          lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>);
        
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_REFRESH))
            {
              <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_lsa_install() Premature Aging &quot;</span>
                 <span class="stringliteral">&quot;lsa 0x%lx&quot;</span>, (u_long)lsa);
              <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
            }
        }
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
            {
              <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_lsa_install() got an lsa with seq 0x80000000 &quot;</span>
                 <span class="stringliteral">&quot;that was not self originated. Ignoring\n&quot;</span>);
              <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
            }
      <span class="keywordflow">return</span> old;
        }
    }

  <span class="comment">/* discard old LSA from LSDB */</span>
  <span class="keywordflow">if</span> (old != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <a class="code" href="ospf__lsa_8c.html#ad6d5a002c1a2e4d50dfed4a627ea42a8">ospf_discard_from_db</a> (ospf, lsdb, lsa);

  <span class="comment">/* Calculate Checksum if self-originated?. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (lsa))
    <a class="code" href="ospf__lsa_8c.html#a51f65ba10ce016111b959f7ce2790eaa">ospf_lsa_checksum</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);

  <span class="comment">/* Insert LSA to LSDB. */</span>
  <a class="code" href="ospf__lsdb_8c.html#a4247fc1a76fbbc491d0d55ac0d77be71">ospf_lsdb_add</a> (lsdb, lsa);
  lsa-&gt;<a class="code" href="structospf__lsa.html#acba2998d58a36757e13007afd1e6a224">lsdb</a> = lsdb;

  <span class="comment">/* Do LSA specific installation process. */</span>
  <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>:
      <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a00547ded12be2b6f30d26527e6829584">ospf_router_lsa_install</a> (ospf, lsa, rt_recalc);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>:
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (oi);
      <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#aeb017b8e734bbbae9f454b9bb23d7fd0">ospf_network_lsa_install</a> (ospf, oi, lsa, rt_recalc);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>:
      <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#abbee2c4a7e1898de8eee25d1cc6b3164">ospf_summary_lsa_install</a> (ospf, lsa, rt_recalc);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>:
      <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a00b9af9ccc56dfb070dad158aef030fa">ospf_summary_asbr_lsa_install</a> (ospf, lsa, rt_recalc);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
      <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a725ac21be05680d8dd3066c63e7c795f">ospf_external_lsa_install</a> (ospf, lsa, rt_recalc);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
      <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (lsa))
    lsa-&gt;oi = oi; <span class="comment">/* Specify outgoing ospf-interface for this LSA. */</span>
      else
    ; <span class="comment">/* Incoming &quot;oi&quot; for this LSA has set at LSUpd reception. */</span>
      <span class="comment">/* Fallthrough */</span>
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
      <span class="keyword">new</span> = <a class="code" href="ospf__opaque_8h.html#adcdf3f83a447665cfcb282c18ab5cc71">ospf_opaque_lsa_install</a> (lsa, rt_recalc);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
      <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a725ac21be05680d8dd3066c63e7c795f">ospf_external_lsa_install</a> (ospf, lsa, rt_recalc);
    <span class="keywordflow">default</span>: <span class="comment">/* type-6,8,9....nothing special */</span>
      <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">if</span> (<span class="keyword">new</span> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <span class="keyword">new</span>;  <span class="comment">/* Installation failed, cannot proceed further -- endo. */</span>

  <span class="comment">/* Debug logs. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_INSTALL))
    {
      <span class="keywordtype">char</span> area_str[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];

      <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
        {
        <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>        <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
        <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[%s]: Install %s&quot;</span>,
                 <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (<span class="keyword">new</span>),
                 <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#a00a70af067512935cf2897331ec40bb2">ospf_lsa_type_msg</a>, new-&gt;data-&gt;type));
          <span class="keywordflow">break</span>;
        <span class="keywordflow">default</span>:
      strcpy (area_str, inet_ntoa (new-&gt;area-&gt;area_id));
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[%s]: Install %s to Area %s&quot;</span>,
                 <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (<span class="keyword">new</span>),
                 <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#a00a70af067512935cf2897331ec40bb2">ospf_lsa_type_msg</a>, new-&gt;data-&gt;type), area_str);
          <span class="keywordflow">break</span>;
        }
    }

  <span class="comment">/* </span>
<span class="comment">     If received LSA&#39; ls_age is MaxAge, or lsa is being prematurely aged</span>
<span class="comment">     (it&#39;s getting flushed out of the area), set LSA on MaxAge LSA list. </span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> ((lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a> &amp; <a class="code" href="ospf__lsa_8h.html#a8a7a31ebbedfab83203700cb050661af">OSPF_LSA_PREMATURE_AGE</a>) ||
      (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (<span class="keyword">new</span>) &amp;&amp; !<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (<span class="keyword">new</span>)))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_INSTALL))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Install LSA 0x%p, MaxAge&quot;</span>,
                   new-&gt;data-&gt;type, 
                   inet_ntoa (new-&gt;data-&gt;id), 
                   lsa);
      <a class="code" href="ospf__lsa_8c.html#ab730b081b5aa660ffc5d0ec642d03d27">ospf_lsa_maxage</a> (ospf, lsa);
    }

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad430a0bdeae46dc78ef311cf2c511bad"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_is_self_originated" ref="ad430a0bdeae46dc78ef311cf2c511bad" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_lsa_is_self_originated </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03453">3453</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  <span class="comment">/* This LSA is already checked. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a1e84ca07fab175368ae0125c93e06e4f">OSPF_LSA_SELF_CHECKED</a>))
    <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>);

  <span class="comment">/* Make sure LSA is self-checked. */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a1e84ca07fab175368ae0125c93e06e4f">OSPF_LSA_SELF_CHECKED</a>);

  <span class="comment">/* AdvRouter and Router ID is the same. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>, &amp;ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>);

  <span class="comment">/* LSA is router-LSA. */</span>
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a> &amp;&amp;
      <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, &amp;ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>);

  <span class="comment">/* LSA is network-LSA.  Compare Link ID with all interfaces. */</span>
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>)
    <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
      {
    <span class="comment">/* Ignore virtual link. */</span>
        <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
      <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
          {
        <span class="comment">/* to make it easier later */</span>
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>);
        <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>);
          }
      }

  <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a312850eed27e83bb9f66d27bb5bfb144"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_lock" ref="a312850eed27e83bb9f66d27bb5bfb144" args="(struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_lsa_lock </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00265">265</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  lsa-&gt;<a class="code" href="structospf__lsa.html#a460987678e5eaec9ae6033dc5982e6ee">lock</a>++;
  <span class="keywordflow">return</span> lsa;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1f0fd75e3aea10b1c15ffcc28fba7a58"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_lookup" ref="a1f0fd75e3aea10b1c15ffcc28fba7a58" args="(struct ospf_area *area, u_int32_t type, struct in_addr id, struct in_addr adv_router)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_lsa_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>adv_router</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03121">3121</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a>();
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(ospf);

  <span class="keywordflow">switch</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
      <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#a272e7b17825b0ec09ece8ffe848d9a9f">ospf_lsdb_lookup_by_id</a> (area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">id</span>, <a class="code" href="prefix_8h.html#aa4419784611184c74a36162ffcf0123d">adv_router</a>);
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
      <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#a272e7b17825b0ec09ece8ffe848d9a9f">ospf_lsdb_lookup_by_id</a> (ospf-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">id</span>, <a class="code" href="prefix_8h.html#aa4419784611184c74a36162ffcf0123d">adv_router</a>);
    <span class="keywordflow">default</span>:
      <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a02a444e61c60412cd2d17bd130ae06af"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_lookup_by_header" ref="a02a444e61c60412cd2d17bd130ae06af" args="(struct ospf_area *area, struct lsa_header *lsah)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_lsa_lookup_by_header </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structlsa__header.html">lsa_header</a> *&#160;</td>
          <td class="paramname"><em>lsah</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03193">3193</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *match;

<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>  <span class="comment">/*</span>
<span class="comment">   * Strictly speaking, the LSA-ID field for Opaque-LSAs (type-9/10/11)</span>
<span class="comment">   * is redefined to have two subfields; opaque-type and opaque-id.</span>
<span class="comment">   * However, it is harmless to treat the two sub fields together, as if</span>
<span class="comment">   * they two were forming a unique LSA-ID.</span>
<span class="comment">   */</span>
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>

  match = <a class="code" href="ospf__lsa_8c.html#a1f0fd75e3aea10b1c15ffcc28fba7a58">ospf_lsa_lookup</a> (area, lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, lsah-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>);

  <span class="keywordflow">if</span> (match == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA) == <a class="code" href="ospf__dump_8h.html#a53cfd985a6bfab8b48b939e4b8a5a32a">OSPF_DEBUG_LSA</a>)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Lookup by header, NO MATCH&quot;</span>,
         lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));

  <span class="keywordflow">return</span> match;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad8b31f978f44bc48a1b915183bcd04c1"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_lookup_by_id" ref="ad8b31f978f44bc48a1b915183bcd04c1" args="(struct ospf_area *area, u_int32_t type, struct in_addr id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_lsa_lookup_by_id </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03152">3152</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;

  <span class="keywordflow">switch</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>:
      <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#a272e7b17825b0ec09ece8ffe848d9a9f">ospf_lsdb_lookup_by_id</a> (area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">id</span>, <span class="keywordtype">id</span>);
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>:
      <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__lsdb_8h.html#a73230fbde5946c52a9905d9d56f5eb0d">NETWORK_LSDB</a> (area)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((lsa = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>))
      <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, &amp;<span class="keywordtype">id</span>))
        {
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
          <span class="keywordflow">return</span> lsa;
        }
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>:
      <span class="comment">/* Currently not used. */</span>
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (1);
      <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#a272e7b17825b0ec09ece8ffe848d9a9f">ospf_lsdb_lookup_by_id</a> (area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">id</span>, <span class="keywordtype">id</span>);
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
      <span class="comment">/* Currently not used. */</span>
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
    <span class="keywordflow">default</span>:
      <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab2e4bd0fdc42ab447eea95c79f21a7e2"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_lookup_by_prefix" ref="ab2e4bd0fdc42ab447eea95c79f21a7e2" args="(struct ospf_lsdb *lsdb, u_char type, struct prefix_ipv4 *p, struct in_addr router_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_lsa_lookup_by_prefix </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsdb.html">ospf_lsdb</a> *&#160;</td>
          <td class="paramname"><em>lsdb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>router_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03090">3090</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keyword">struct </span>in_addr mask, <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>;
  <span class="keyword">struct </span>lsa_header_mask
  {
    <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> header;
    <span class="keyword">struct </span>in_addr mask;
  } *hmask;

  lsa = <a class="code" href="ospf__lsdb_8c.html#a272e7b17825b0ec09ece8ffe848d9a9f">ospf_lsdb_lookup_by_id</a> (lsdb, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, p-&gt;prefix, router_id);
  <span class="keywordflow">if</span> (lsa == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;mask);

  hmask = (<span class="keyword">struct </span>lsa_header_mask *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;

  if (mask.s_addr != hmask-&gt;mask.s_addr)
    {
      <span class="keywordtype">id</span>.s_addr = p-&gt;prefix.s_addr | (~mask.s_addr);
      lsa = <a class="code" href="ospf__lsdb_8c.html#a272e7b17825b0ec09ece8ffe848d9a9f">ospf_lsdb_lookup_by_id</a> (lsdb, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">id</span>, router_id);
      <span class="keywordflow">if</span> (!lsa)
        <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">return</span> lsa;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab730b081b5aa660ffc5d0ec642d03d27"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_maxage" ref="ab730b081b5aa660ffc5d0ec642d03d27" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_lsa_maxage </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02975">2975</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* When we saw a MaxAge LSA flooded to us, we put it on the list</span>
<span class="comment">     and schedule the MaxAge LSA remover. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a6c66943e47af1d443fee615f1a91b622">OSPF_LSA_IN_MAXAGE</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: %p already exists on MaxAge LSA list&quot;</span>,
           lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), lsa);
      <span class="keywordflow">return</span>;
    }

  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (ospf-&gt;<a class="code" href="structospf.html#a846adae0f5fad7050467a638fc775ee1">maxage_lsa</a>, <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa));
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a>(lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a6c66943e47af1d443fee615f1a91b622">OSPF_LSA_IN_MAXAGE</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[%s]: MaxAge LSA remover scheduled.&quot;</span>, <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));

  <a class="code" href="ospfd_8h.html#af55bc6c498265fffa9294d0f1b952267">OSPF_TIMER_ON</a> (ospf-&gt;<a class="code" href="structospf.html#ab8f18d70bc4436f4f060a328ebea77b1">t_maxage</a>, <a class="code" href="ospf__lsa_8c.html#a45711592b5267b56be96e4504967ea69">ospf_maxage_lsa_remover</a>, 2);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a08116d262e54a43525af086f2bafe87c"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_maxage_delete" ref="a08116d262e54a43525af086f2bafe87c" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_lsa_maxage_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02962">2962</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;

  <span class="keywordflow">if</span> ((n = <a class="code" href="linklist_8c.html#aff2a6c7dcdf74c05eb320db319f83990">listnode_lookup</a> (ospf-&gt;<a class="code" href="structospf.html#a846adae0f5fad7050467a638fc775ee1">maxage_lsa</a>, lsa)))
    {
      <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (ospf-&gt;<a class="code" href="structospf.html#a846adae0f5fad7050467a638fc775ee1">maxage_lsa</a>, n);
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a>(lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a6c66943e47af1d443fee615f1a91b622">OSPF_LSA_IN_MAXAGE</a>);
      <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;lsa); <span class="comment">/* maxage_lsa */</span>
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4069275df453331e7b1c742d1aa7e2e1"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_maxage_walker" ref="a4069275df453331e7b1c742d1aa7e2e1" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_lsa_maxage_walker </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03043">3043</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  ospf-&gt;<a class="code" href="structospf.html#afc0d99523632821dde306d634e1c5ad1">t_maxage_walker</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, nnode, area))
    {
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a9b953d2ac1c54862e897adada93cb8a4">ROUTER_LSDB</a> (area), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#a3782d39ad4a1fe76eb0bc8e4b5a9a86f">ospf_lsa_maxage_walker_remover</a> (ospf, lsa);
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a73230fbde5946c52a9905d9d56f5eb0d">NETWORK_LSDB</a> (area), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#a3782d39ad4a1fe76eb0bc8e4b5a9a86f">ospf_lsa_maxage_walker_remover</a> (ospf, lsa);
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a58ae6df59f7476d7784e19f7ca19db1f">SUMMARY_LSDB</a> (area), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#a3782d39ad4a1fe76eb0bc8e4b5a9a86f">ospf_lsa_maxage_walker_remover</a> (ospf, lsa);
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a145a10afd0c8a801d2e84b26c0becbfd">ASBR_SUMMARY_LSDB</a> (area), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#a3782d39ad4a1fe76eb0bc8e4b5a9a86f">ospf_lsa_maxage_walker_remover</a> (ospf, lsa);
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#aec3918874489142043aedd1ac5855f57">OPAQUE_AREA_LSDB</a> (area), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#a3782d39ad4a1fe76eb0bc8e4b5a9a86f">ospf_lsa_maxage_walker_remover</a> (ospf, lsa);
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#a7b6d75a56662bb4e124777b376bb84da">OPAQUE_LINK_LSDB</a> (area), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#a3782d39ad4a1fe76eb0bc8e4b5a9a86f">ospf_lsa_maxage_walker_remover</a> (ospf, lsa);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#aa704d331d2ac4e4034faca5c0f177364">NSSA_LSDB</a> (area), rn, lsa)
        <a class="code" href="ospf__lsa_8c.html#a3782d39ad4a1fe76eb0bc8e4b5a9a86f">ospf_lsa_maxage_walker_remover</a> (ospf, lsa);
    }

  <span class="comment">/* for AS-external-LSAs. */</span>
  if (ospf-&gt;lsdb)
    {
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#ae56a8a7b638bd22caf86ea3d810fdbd9">EXTERNAL_LSDB</a> (ospf), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#a3782d39ad4a1fe76eb0bc8e4b5a9a86f">ospf_lsa_maxage_walker_remover</a> (ospf, lsa);
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#ac7a1aa21490d2bd86999d2e494cde6d0">OPAQUE_AS_LSDB</a> (ospf), rn, lsa)
    <a class="code" href="ospf__lsa_8c.html#a3782d39ad4a1fe76eb0bc8e4b5a9a86f">ospf_lsa_maxage_walker_remover</a> (ospf, lsa);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
    }

  <a class="code" href="ospfd_8h.html#af55bc6c498265fffa9294d0f1b952267">OSPF_TIMER_ON</a> (ospf-&gt;t_maxage_walker, <a class="code" href="ospf__lsa_8c.html#a4069275df453331e7b1c742d1aa7e2e1">ospf_lsa_maxage_walker</a>,
         <a class="code" href="ospfd_8h.html#a5344576f6e042edd999d545d7b530aa3">OSPF_LSA_MAXAGE_CHECK_INTERVAL</a>);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3782d39ad4a1fe76eb0bc8e4b5a9a86f"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_maxage_walker_remover" ref="a3782d39ad4a1fe76eb0bc8e4b5a9a86f" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_lsa_maxage_walker_remover </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02997">2997</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Stay away from any Local Translated Type-7 LSAs */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>))
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (lsa))
    <span class="comment">/* Self-originated LSAs should NOT time-out instead,</span>
<span class="comment">       they&#39;re flushed and submitted to the max_age list explicitly. */</span>
    <span class="keywordflow">if</span> (!<a class="code" href="ospf__lsa_8c.html#ad430a0bdeae46dc78ef311cf2c511bad">ospf_lsa_is_self_originated</a> (ospf, lsa))
      {
    <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;LSA[%s]: is MaxAge&quot;</span>, <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));

        <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
          {
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>          <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
          <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
          <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
            <span class="comment">/*</span>
<span class="comment">             * As a general rule, whenever network topology has changed</span>
<span class="comment">             * (due to an LSA removal in this case), routing recalculation</span>
<span class="comment">             * should be triggered. However, this is not true for opaque</span>
<span class="comment">             * LSAs. Even if an opaque LSA instance is going to be removed</span>
<span class="comment">             * from the routing domain, it does not mean a change in network</span>
<span class="comment">             * topology, and thus, routing recalculation is not needed here.</span>
<span class="comment">             */</span>
            <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
          <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
          <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
        <a class="code" href="ospf__ase_8c.html#a0c7dee8c77caeb98ddcec77a973cf4c5">ospf_ase_incremental_update</a> (ospf, lsa);
            <span class="keywordflow">break</span>;
          <span class="keywordflow">default</span>:
        <a class="code" href="ospf__spf_8c.html#a3422ebf3062fac786ecdb7b419c22cf1">ospf_spf_calculate_schedule</a> (ospf);
            <span class="keywordflow">break</span>;
          }
    <a class="code" href="ospf__lsa_8c.html#ab730b081b5aa660ffc5d0ec642d03d27">ospf_lsa_maxage</a> (ospf, lsa);
      }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a562753a50210d94f439aa232c260d433"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_more_recent" ref="a562753a50210d94f439aa232c260d433" args="(struct ospf_lsa *l1, struct ospf_lsa *l2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_lsa_more_recent </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>l1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>l2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03220">3220</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> r;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>, <a class="code" href="spgrid_8c.html#a04ee6b20e6d3476ab1f51397993cfeef">y</a>;

  <span class="keywordflow">if</span> (l1 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; l2 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;
  <span class="keywordflow">if</span> (l1 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> -1;
  <span class="keywordflow">if</span> (l2 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 1;

  <span class="comment">/* compare LS sequence number. */</span>
  x = (int) ntohl (l1-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>);
  y = (int) ntohl (l2-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>);
  <span class="keywordflow">if</span> (x &gt; y)
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">if</span> (x &lt; y)
    <span class="keywordflow">return</span> -1;

  <span class="comment">/* compare LS checksum. */</span>
  r = ntohs (l1-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#aa481a4d27dbba4c1921a74ba672fc2f4">checksum</a>) - ntohs (l2-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#aa481a4d27dbba4c1921a74ba672fc2f4">checksum</a>);
  <span class="keywordflow">if</span> (r)
    <span class="keywordflow">return</span> r;

  <span class="comment">/* compare LS age. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (l1) &amp;&amp; !<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (l2))
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (l1) &amp;&amp; <a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (l2))
    <span class="keywordflow">return</span> -1;

  <span class="comment">/* compare LS age with MaxAgeDiff. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#ac3af6344813262fea1e037637547443f">LS_AGE</a> (l1) - <a class="code" href="ospf__lsa_8h.html#ac3af6344813262fea1e037637547443f">LS_AGE</a> (l2) &gt; <a class="code" href="ospfd_8h.html#aae6f593f9fdab4f907f59f1676e4f98c">OSPF_LSA_MAXAGE_DIFF</a>)
    <span class="keywordflow">return</span> -1;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#ac3af6344813262fea1e037637547443f">LS_AGE</a> (l2) - <a class="code" href="ospf__lsa_8h.html#ac3af6344813262fea1e037637547443f">LS_AGE</a> (l1) &gt; <a class="code" href="ospfd_8h.html#aae6f593f9fdab4f907f59f1676e4f98c">OSPF_LSA_MAXAGE_DIFF</a>)
    <span class="keywordflow">return</span> 1;

  <span class="comment">/* LSAs are identical. */</span>
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="add9074cfc3c1a160b044a9ce5ebb6d4b"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_new" ref="add9074cfc3c1a160b044a9ce5ebb6d4b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_lsa_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00199">199</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;

  <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5bccaee3075ceeb63ae53e83a6ec262b">MTYPE_OSPF_LSA</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a>));

  <span class="keyword">new</span>-&gt;flags = 0;
  <span class="keyword">new</span>-&gt;lock = 1;
  <span class="keyword">new</span>-&gt;retransmit_counter = 0;
  <span class="keyword">new</span>-&gt;tv_recv = <a class="code" href="thread_8c.html#a010d58e49a3c74ae856d5cd111f7eb62">recent_relative_time</a> ();
  <span class="keyword">new</span>-&gt;tv_orig = <span class="keyword">new</span>-&gt;tv_recv;
  <span class="keyword">new</span>-&gt;refresh_list = -1;
  
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a482369a73eab5b0a9bc39e9ad754e864"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_refresh" ref="a482369a73eab5b0a9bc39e9ad754e864" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_lsa_refresh </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03607">3607</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structexternal__info.html">external_info</a> *ei;
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>));

  <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
    {
      <span class="comment">/* Router and Network LSAs are processed differently. */</span>
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>: 
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>:
      <a class="code" href="ospf__lsa_8c.html#ad1ec944b0c3d672071952a4ec0112254">ospf_summary_lsa_refresh</a> (ospf, lsa);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>:
      <a class="code" href="ospf__lsa_8c.html#a3d394fbfdef8b8da9ead7c5a38bc5204">ospf_summary_asbr_lsa_refresh</a> (ospf, lsa);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
      <span class="comment">/* Translated from NSSA Type-5s are refreshed when </span>
<span class="comment">       * from refresh of Type-7 - do not refresh these directly.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>))
        <span class="keywordflow">break</span>;
      ei = <a class="code" href="ospf__flood_8c.html#a28fc4c5b15a10f380b4d1f79924ad3f5">ospf_external_info_check</a> (lsa);
      <span class="keywordflow">if</span> (ei)
        <a class="code" href="ospf__lsa_8c.html#a12f57ed226cea2cfd9499069dbde2f3c">ospf_external_lsa_refresh</a> (ospf, lsa, ei, <a class="code" href="ospf__lsa_8h.html#a389234e05af4a29be76c63dc46576791">LSA_REFRESH_FORCE</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="ospf__flood_8c.html#a68d550b90a6cd775d965f6e8f9309863">ospf_lsa_flush_as</a> (ospf, lsa);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
      <a class="code" href="ospf__opaque_8h.html#a5d47cc4e0de52b67511124fcb5aa2be5">ospf_opaque_lsa_refresh</a> (lsa);
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
    <span class="keywordflow">default</span>:
      <span class="keywordflow">break</span>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8f4fa72b19256ed0ecd962b21a9241a7"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_refresh_delay" ref="a8f4fa72b19256ed0ecd962b21a9241a7" args="(struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_lsa_refresh_delay </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00140">140</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval delta, now;
  <span class="keywordtype">int</span> delay = 0;

  <a class="code" href="thread_8c.html#abf5861abe71d6f9a1ddd493be0218de1">quagga_gettime</a> (<a class="code" href="thread_8h.html#a64fff521e88ba8b01645c5bb89085b33a7f92aaa461f13c163b13f96085eb3cd9">QUAGGA_CLK_MONOTONIC</a>, &amp;now);
  delta = <a class="code" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (now, lsa-&gt;<a class="code" href="structospf__lsa.html#a19040aaf3ab0f6fdfa3924374afea9b9">tv_orig</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a5ba57790910a88ececacfd1d3f69538c">tv_cmp</a> (delta, <a class="code" href="ospf__lsa_8c.html#a2543635ecb435d64f2b40f9cfdf75fc5">int2tv</a> (<a class="code" href="ospfd_8h.html#a8e517a858d0da0eb3b4fcf8c06391117">OSPF_MIN_LS_INTERVAL</a>)) &lt; 0)
    {
      delay = <a class="code" href="ospf__lsa_8c.html#a3d712873cc4897fcc355a0c65e4e7009">tv_ceil</a> (<a class="code" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (<a class="code" href="ospf__lsa_8c.html#a2543635ecb435d64f2b40f9cfdf75fc5">int2tv</a> (<a class="code" href="ospfd_8h.html#a8e517a858d0da0eb3b4fcf8c06391117">OSPF_MIN_LS_INTERVAL</a>), delta));

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Refresh timer delay %d seconds&quot;</span>,
               lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), delay);

      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (delay &gt; 0);
    }

  <span class="keywordflow">return</span> delay;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aba5248867f4c5f9ca904d27b89482c20"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_refresh_walker" ref="aba5248867f4c5f9ca904d27b89482c20" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_lsa_refresh_walker </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03711">3711</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *refresh_list;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *lsa_to_refresh = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_REFRESH))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Refresh]:ospf_lsa_refresh_walker(): start&quot;</span>);

  
  i = ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#a65bdce49ac806b7af091220184559635">index</a>;
  
  <span class="comment">/* Note: if clock has jumped backwards, then time change could be negative,</span>
<span class="comment">     so we are careful to cast the expression to unsigned before taking</span>
<span class="comment">     modulus. */</span>
  ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#a65bdce49ac806b7af091220184559635">index</a> =
   ((<span class="keywordtype">unsigned</span> long)(ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#a65bdce49ac806b7af091220184559635">index</a> +
            (<a class="code" href="thread_8c.html#acbaf2206b84f93fbe18f33483bf101d2">quagga_time</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) - ospf-&gt;<a class="code" href="structospf.html#ab5d0a648175f600f62a12444c237dd8f">lsa_refresher_started</a>) /
            <a class="code" href="ospfd_8h.html#a62aca10324b168da898934617ebf36f9">OSPF_LSA_REFRESHER_GRANULARITY</a>)) % <a class="code" href="ospfd_8h.html#a09a36e0ed4763356a713ba83d0bc3dda">OSPF_LSA_REFRESHER_SLOTS</a>;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_REFRESH))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Refresh]: ospf_lsa_refresh_walker(): next index %d&quot;</span>,
           ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#a65bdce49ac806b7af091220184559635">index</a>);

  <span class="keywordflow">for</span> (;i != ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#a65bdce49ac806b7af091220184559635">index</a>;
       i = (i + 1) % <a class="code" href="ospfd_8h.html#a09a36e0ed4763356a713ba83d0bc3dda">OSPF_LSA_REFRESHER_SLOTS</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_REFRESH))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Refresh]: ospf_lsa_refresh_walker(): &quot;</span>
               <span class="stringliteral">&quot;refresh index %d&quot;</span>, i);

      refresh_list = ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#ac5484d1394af906226eb62611a0329d1">qs</a> [<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>];
      
      ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#ac5484d1394af906226eb62611a0329d1">qs</a> [<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <span class="keywordflow">if</span> (refresh_list)
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (refresh_list, node, nnode, lsa))
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_REFRESH))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Refresh:%s]: ospf_lsa_refresh_walker(): &quot;</span>
                   <span class="stringliteral">&quot;refresh lsa %p (slot %d)&quot;</span>, 
                   inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), lsa, <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>);
          
          <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (refresh_list, node);
          <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;lsa); <span class="comment">/* lsa_refresh_queue */</span>
          lsa-&gt;<a class="code" href="structospf__lsa.html#a91e4ad20d925dcea4ad488137cce0e40">refresh_list</a> = -1;
          <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (lsa_to_refresh, lsa);
        }
      <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (refresh_list);
    }
    }

  ospf-&gt;<a class="code" href="structospf.html#a3f56b5850d9efb087ddb6d2eb79dd291">t_lsa_refresher</a> = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__lsa_8c.html#aba5248867f4c5f9ca904d27b89482c20">ospf_lsa_refresh_walker</a>,
                       ospf, ospf-&gt;<a class="code" href="structospf.html#acbe4f365624a63f3ec08e10e296050a3">lsa_refresh_interval</a>);
  ospf-&gt;<a class="code" href="structospf.html#ab5d0a648175f600f62a12444c237dd8f">lsa_refresher_started</a> = <a class="code" href="thread_8c.html#acbaf2206b84f93fbe18f33483bf101d2">quagga_time</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (lsa_to_refresh, node, nnode, lsa))
    <a class="code" href="ospf__lsa_8c.html#a482369a73eab5b0a9bc39e9ad754e864">ospf_lsa_refresh</a> (ospf, lsa);
  
  <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (lsa_to_refresh);
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_REFRESH))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Refresh]: ospf_lsa_refresh_walker(): end&quot;</span>);
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a47659a8de2d310c23ffdb3852c9e3679"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_translated_nssa_new" ref="a47659a8de2d310c23ffdb3852c9e3679" args="(struct ospf *ospf, struct ospf_lsa *type7)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_lsa_translated_nssa_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>type7</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01820">1820</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *<a class="code" href="spgrid_8c.html#a1425d79154ffdc9e1fa0e41d6e6c85b8">ext</a>, *extnew;
  <span class="keyword">struct </span><a class="code" href="structexternal__info.html">external_info</a> ei;
  
  ext = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *)(type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);

  <span class="comment">/* need external_info struct, fill in bare minimum */</span>  
  ei.p.family = AF_INET;
  ei.p.prefix = type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>;
  ei.p.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (ext-&gt;mask);
  ei.type = <a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>;
  ei.nexthop = ext-&gt;header.adv_router;
  ei.route_map_set.metric = -1;
  ei.route_map_set.metric_type = -1;
  ei.tag = 0;
  
  <span class="keywordflow">if</span> ( (<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a71319911c6d95fe6b798a45c5674732b">ospf_external_lsa_new</a> (ospf, &amp;ei, &amp;type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
  {
    <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_nssa_translate_originate(): Could not originate &quot;</span>
                 <span class="stringliteral">&quot;Translated Type-5 for %s&quot;</span>, 
                 inet_ntoa (ei.p.prefix));
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  }

  extnew = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *)(new-&gt;data);
   
  <span class="comment">/* copy over Type-7 data to new */</span>
  extnew-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#ae0866e78e3123cc6a8d5c870b89dc0bd">tos</a> = ext-&gt;e[0].tos;
  extnew-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a6d3446651375dc471db4366afe6ae3ea">route_tag</a> = ext-&gt;e[0].route_tag;
  extnew-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>.s_addr = ext-&gt;e[0].fwd_addr.s_addr;
  <span class="keyword">new</span>-&gt;data-&gt;ls_seqnum = type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>;

  <span class="comment">/* add translated flag, checksum and lock new lsa */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>); <span class="comment">/* Translated from 7  */</span>   
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (<span class="keyword">new</span>);
  
  <span class="keywordflow">return</span> <span class="keyword">new</span>; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3af5cb403d133f3276e5a744f03b309a"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_unique_id" ref="a3af5cb403d133f3276e5a744f03b309a" args="(struct ospf *ospf, struct ospf_lsdb *lsdb, u_char type, struct prefix_ipv4 *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct in_addr ospf_lsa_unique_id </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsdb.html">ospf_lsdb</a> *&#160;</td>
          <td class="paramname"><em>lsdb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03494">3494</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keyword">struct </span>in_addr mask, <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>;

  <span class="keywordtype">id</span> = p-&gt;prefix;

  <span class="comment">/* Check existence of LSA instance. */</span>
  lsa = <a class="code" href="ospf__lsdb_8c.html#a272e7b17825b0ec09ece8ffe848d9a9f">ospf_lsdb_lookup_by_id</a> (lsdb, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">id</span>, ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>);
  <span class="keywordflow">if</span> (lsa)
    {
      <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *<a class="code" href="spgrid_8c.html#a7c4593313d1839d57c28594a69357bab">al</a> = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
      if (<a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (al-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>) == p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_lsa_unique_id(): &quot;</span>
               <span class="stringliteral">&quot;Can&#39;t get Link State ID for %s/%d&quot;</span>,
               inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
      <span class="comment">/*      id.s_addr = 0; */</span>
      <span class="keywordtype">id</span>.s_addr = 0xffffffff;
      <span class="keywordflow">return</span> <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>;
    }
      <span class="comment">/* Masklen differs, then apply wildcard mask to Link State ID. */</span>
      <span class="keywordflow">else</span>
    {
      <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>);

      <span class="keywordtype">id</span>.s_addr = p-&gt;prefix.s_addr | (~<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>.s_addr);
      lsa = <a class="code" href="ospf__lsdb_8c.html#a272e7b17825b0ec09ece8ffe848d9a9f">ospf_lsdb_lookup_by_id</a> (ospf-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>,
                       <span class="keywordtype">id</span>, ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>);
      <span class="keywordflow">if</span> (lsa)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_lsa_unique_id(): &quot;</span>
               <span class="stringliteral">&quot;Can&#39;t get Link State ID for %s/%d&quot;</span>,
               inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
          <span class="comment">/*          id.s_addr = 0; */</span>
          <span class="keywordtype">id</span>.s_addr = 0xffffffff;
          <span class="keywordflow">return</span> <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>;
        }
    }
    }

  <span class="keywordflow">return</span> <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a268fc5c6673caf7ee94c0eaaa88455b8"></a><!-- doxytag: member="ospf_lsa.c::ospf_lsa_unlock" ref="a268fc5c6673caf7ee94c0eaaa88455b8" args="(struct ospf_lsa **lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_lsa_unlock </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> **&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00273">273</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* This is sanity check. */</span>
  <span class="keywordflow">if</span> (!lsa || !*lsa)
    <span class="keywordflow">return</span>;
  
  (*lsa)-&gt;lock--;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> ((*lsa)-&gt;lock &gt;= 0);

  <span class="keywordflow">if</span> ((*lsa)-&gt;lock == 0)
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> ((*lsa)-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a7c24685e365aa6c180d976e7ccfeb302">OSPF_LSA_DISCARD</a>));
      <a class="code" href="ospf__lsa_8c.html#a904e1877aa655ae5311549df1b51efcf">ospf_lsa_free</a> (*lsa);
      *lsa = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a45711592b5267b56be96e4504967ea69"></a><!-- doxytag: member="ospf_lsa.c::ospf_maxage_lsa_remover" ref="a45711592b5267b56be96e4504967ea69" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_maxage_lsa_remover </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02892">2892</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keywordtype">int</span> reschedule = 0;

  ospf-&gt;<a class="code" href="structospf.html#ab8f18d70bc4436f4f060a328ebea77b1">t_maxage</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[MaxAge]: remover Start&quot;</span>);

  reschedule = !<a class="code" href="ospf__lsa_8c.html#ad28d9267396cb553a97e361ffba89469">ospf_check_nbr_status</a> (ospf);

  <span class="keywordflow">if</span> (!reschedule)
    <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a846adae0f5fad7050467a638fc775ee1">maxage_lsa</a>, node, nnode, lsa))
      {
        <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a752d828403f41dafa1bd85a443f51d5a">retransmit_counter</a> &gt; 0)
          {
            reschedule = 1;
            <span class="keywordflow">continue</span>;
          }

        <span class="comment">/* Remove LSA from the LSDB */</span>
        <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>))
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: LSA 0x%lx is self-oririnated: &quot;</span>,
                       lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), (u_long)lsa);

        <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: MaxAge LSA removed from list&quot;</span>,
                     lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));

    <span class="comment">/* Flood max age LSA. */</span>
<span class="preprocessor">#ifdef ORIGINAL_CODING</span>
<span class="preprocessor"></span>    ospf_maxage_flood (lsa);
<span class="preprocessor">#else </span><span class="comment">/* ORIGINAL_CODING */</span>
        <a class="code" href="ospf__flood_8c.html#a32ab724834b131f44a7756bb220d14ac">ospf_flood_through</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, lsa);
<span class="preprocessor">#endif </span><span class="comment">/* ORIGINAL_CODING */</span>

    <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a> &amp; <a class="code" href="ospf__lsa_8h.html#a8a7a31ebbedfab83203700cb050661af">OSPF_LSA_PREMATURE_AGE</a>)  
          {
            <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
              <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;originating new router lsa for lsa 0x%lx \n&quot;</span>, 
                         (u_long)lsa);
            <a class="code" href="ospf__lsa_8c.html#a6740a0233b05e58420186ba666abcc54">ospf_router_lsa_originate</a>(lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>);
          }

    <span class="comment">/* Remove from lsdb. */</span>
    <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#acba2998d58a36757e13007afd1e6a224">lsdb</a>)
      {
        <a class="code" href="ospf__lsa_8c.html#ad6d5a002c1a2e4d50dfed4a627ea42a8">ospf_discard_from_db</a> (ospf, lsa-&gt;<a class="code" href="structospf__lsa.html#acba2998d58a36757e13007afd1e6a224">lsdb</a>, lsa);
        <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#acba2998d58a36757e13007afd1e6a224">lsdb</a>, lsa);
          }
        <span class="keywordflow">else</span>
          <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: LSA[Type%d:%s]: No associated LSDB!&quot;</span>, __func__,
                     lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      }

  <span class="comment">/*    A MaxAge LSA must be removed immediately from the router&#39;s link</span>
<span class="comment">        state database as soon as both a) it is no longer contained on any</span>
<span class="comment">        neighbor Link state retransmission lists and b) none of the router&#39;s</span>
<span class="comment">        neighbors are in states Exchange or Loading. */</span>
  <span class="keywordflow">if</span> (reschedule)
    <a class="code" href="ospfd_8h.html#af55bc6c498265fffa9294d0f1b952267">OSPF_TIMER_ON</a> (ospf-&gt;<a class="code" href="structospf.html#ab8f18d70bc4436f4f060a328ebea77b1">t_maxage</a>, <a class="code" href="ospf__lsa_8c.html#a45711592b5267b56be96e4504967ea69">ospf_maxage_lsa_remover</a>, 2);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a276f837fc6880a278a18915a5056c05e"></a><!-- doxytag: member="ospf_lsa.c::ospf_nbr_lookup_ptop" ref="a276f837fc6880a278a18915a5056c05e" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__neighbor.html">ospf_neighbor</a>* ospf_nbr_lookup_ptop </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00436">436</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;

  <span class="comment">/* Search neighbor, there must be one of two nbrs. */</span>
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>))
      <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))
    <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> == <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>)
      {
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
        <span class="keywordflow">break</span>;
      }

  <span class="comment">/* PtoP link must have only 1 neighbor. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__neighbor_8c.html#a0988186d79c97a6ef8211bdf208e0113">ospf_nbr_count</a> (oi, 0) &gt; 1)
    <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Point-to-Point link has more than 1 neighobrs.&quot;</span>);

  <span class="keywordflow">return</span> nbr;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac61948fe0af2dbac4fa08c284ad189a6"></a><!-- doxytag: member="ospf_lsa.c::ospf_network_lsa_body_set" ref="ac61948fe0af2dbac4fa08c284ad189a6" args="(struct stream *s, struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_network_lsa_body_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01025">1025</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>in_addr mask;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;

  <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;mask);
  <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, mask.s_addr);

  <span class="comment">/* The network-LSA lists those routers that are fully adjacent to</span>
<span class="comment">    the Designated Router; each fully adjacent router is identified by</span>
<span class="comment">    its OSPF Router ID.  The Designated Router includes itself in this</span>
<span class="comment">    list. RFC2328, Section 12.4.2 */</span>

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> == <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a> || nbr == oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>)
    <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>.s_addr);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aeb017b8e734bbbae9f454b9bb23d7fd0"></a><!-- doxytag: member="ospf_lsa.c::ospf_network_lsa_install" ref="aeb017b8e734bbbae9f454b9bb23d7fd0" args="(struct ospf *ospf, struct ospf_interface *oi, struct ospf_lsa *new, int rt_recalc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_network_lsa_install </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>new</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rt_recalc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02449">2449</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="comment">/* RFC 2328 Section 13.2 Router-LSAs and network-LSAs</span>
<span class="comment">     The entire routing table must be recalculated, starting with</span>
<span class="comment">     the shortest path calculations for each area (not just the</span>
<span class="comment">     area whose link-state database has changed). </span>
<span class="comment">  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (<span class="keyword">new</span>))
    {
      <span class="comment">/* We supposed that when LSA is originated by us, we pass the int</span>
<span class="comment">     for which it was originated. If LSA was received by flooding,</span>
<span class="comment">     the RECEIVED flag is set, so we do not link the LSA to the int. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (new-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a780906236e4b5ef16a4a720a57e3f617">OSPF_LSA_RECEIVED</a>))
    <span class="keywordflow">return</span> <span class="keyword">new</span>; <span class="comment">/* ignore stale LSA */</span>

      <span class="comment">/* Set LSRefresh timer. */</span>
      <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (oi-&gt;<a class="code" href="structospf__interface.html#a278866980d98aa3ae2c393acb08c0337">t_network_lsa_self</a>);

      <a class="code" href="ospf__lsa_8c.html#a00ef56a80eb931385ef7755ea1ae1009">OSPF_INTERFACE_TIMER_ON</a> (oi-&gt;<a class="code" href="structospf__interface.html#a278866980d98aa3ae2c393acb08c0337">t_network_lsa_self</a>,
                   <a class="code" href="ospf__lsa_8c.html#af846c8b91a957413be3751610d0d3008">ospf_network_lsa_refresh_timer</a>,
                   <a class="code" href="ospfd_8h.html#a5fe58ce24b916ba7a90e574173aa0349">OSPF_LS_REFRESH_TIME</a>);

      <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>);
      oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a> = <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (<span class="keyword">new</span>);
    }
  <span class="keywordflow">if</span> (rt_recalc)
    <a class="code" href="ospf__spf_8c.html#a3422ebf3062fac786ecdb7b419c22cf1">ospf_spf_calculate_schedule</a> (ospf);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a38e5969eb071bb01f295114f99809694"></a><!-- doxytag: member="ospf_lsa.c::ospf_network_lsa_new" ref="a38e5969eb071bb01f295114f99809694" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_network_lsa_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01046">1046</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  <span class="comment">/* If there are no neighbours on this network (the net is stub),</span>
<span class="comment">     the router does not originate network-LSA (see RFC 12.4.2) */</span>
  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a6030ef4a9cb03295e6ab3481df3e6147">full_nbrs</a> == 0)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type2]: Create network-LSA instance&quot;</span>);

  <span class="comment">/* Create new stream for LSA. */</span>
  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>);
  lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s);

  <a class="code" href="ospf__lsa_8c.html#af7f1713ea04e1406ff0339fe9d3a45bd">lsa_header_set</a> (s, (<a class="code" href="ospf__interface_8h.html#af4be2fbb5f97ac9946d943e9e4f4dec8">OPTIONS</a> (oi) | <a class="code" href="ospfd_8h.html#a2ed6617f58a7d168ffb30a323a532597">LSA_OPTIONS_GET</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>)),
          <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>, <a class="code" href="ospf__interface_8h.html#aa84a7dde76ac0a31898992d050858ec5">DR</a> (oi), oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>);

  <span class="comment">/* Set network-LSA body fields. */</span>
  <a class="code" href="ospf__lsa_8c.html#ac61948fe0af2dbac4fa08c284ad189a6">ospf_network_lsa_body_set</a> (s, oi);

  <span class="comment">/* Set length. */</span>
  length = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a> = htons (length);

  <span class="comment">/* Create OSPF LSA instance. */</span>
  <span class="keywordflow">if</span> ( (<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ()) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: ospf_lsa_new returned NULL&quot;</span>, __func__);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  
  <span class="keyword">new</span>-&gt;area = oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>;
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a> | <a class="code" href="ospf__lsa_8h.html#a1e84ca07fab175368ae0125c93e06e4f">OSPF_LSA_SELF_CHECKED</a>);

  <span class="comment">/* Copy LSA to store. */</span>
  <span class="keyword">new</span>-&gt;data = <a class="code" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (length);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;data, lsah, length);
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab27a05b4cacc8b8b366967b6ed1c9fa8"></a><!-- doxytag: member="ospf_lsa.c::ospf_network_lsa_originate" ref="ab27a05b4cacc8b8b366967b6ed1c9fa8" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_network_lsa_originate </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01095">1095</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;

  <span class="comment">/* Create new network-LSA instance. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a38e5969eb071bb01f295114f99809694">ospf_network_lsa_new</a> (oi);
  <span class="keywordflow">if</span> (<span class="keyword">new</span> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Install LSA to LSDB. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>, oi, <span class="keyword">new</span>);

  <span class="comment">/* Update LSA origination count. */</span>
  oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#a4a3d13744fa4c72bfdab00cb7c7a3783">lsa_originate_count</a>++;

  <span class="comment">/* Flooding new LSA through area. */</span>
  <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Originate network-LSA %p&quot;</span>,
         new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id), <span class="keyword">new</span>);
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
    }

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a78354fe66789493f8350d0b6fd8b466c"></a><!-- doxytag: member="ospf_lsa.c::ospf_network_lsa_refresh" ref="a78354fe66789493f8350d0b6fd8b466c" args="(struct ospf_lsa *lsa, struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_network_lsa_refresh </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01124">1124</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a> = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);

  <span class="comment">/* Delete LSA from neighbor retransmit-list. */</span>
  <a class="code" href="ospf__flood_8c.html#a8f46211a0fe7065405e8bdda81963204">ospf_ls_retransmit_delete_nbr_area</a> (area, lsa);

  <span class="comment">/* Create new network-LSA instance. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a38e5969eb071bb01f295114f99809694">ospf_network_lsa_new</a> (oi);
  <span class="keywordflow">if</span> (<span class="keyword">new</span> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> -1;
  <span class="keyword">new</span>-&gt;data-&gt;ls_seqnum = <a class="code" href="ospf__lsa_8c.html#a0951db1fe1ad120fc1831443a9c834ca">lsa_seqnum_increment</a> (lsa);

  <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, oi, <span class="keyword">new</span>);

  <span class="comment">/* Flood LSA through aera. */</span>
  <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (area, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: network-LSA refresh&quot;</span>,
         new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id));
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af846c8b91a957413be3751610d0d3008"></a><!-- doxytag: member="ospf_lsa.c::ospf_network_lsa_refresh_timer" ref="af846c8b91a957413be3751610d0d3008" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_network_lsa_refresh_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01156">1156</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  oi = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  oi-&gt;<a class="code" href="structospf__interface.html#a278866980d98aa3ae2c393acb08c0337">t_network_lsa_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>)
    <span class="comment">/* Now refresh network-LSA. */</span>
    <a class="code" href="ospf__lsa_8c.html#a78354fe66789493f8350d0b6fd8b466c">ospf_network_lsa_refresh</a> (oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>, oi);
  <span class="keywordflow">else</span>
    <span class="comment">/* Newly create network-LSA. */</span>
    <a class="code" href="ospf__lsa_8c.html#ab27a05b4cacc8b8b366967b6ed1c9fa8">ospf_network_lsa_originate</a> (oi);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a42678c90c94d537b3d9c905d4685e2c5"></a><!-- doxytag: member="ospf_lsa.c::ospf_network_lsa_timer_add" ref="a42678c90c94d537b3d9c905d4685e2c5" args="(struct ospf_interface *oi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_network_lsa_timer_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__interface.html">ospf_interface</a> *&#160;</td>
          <td class="paramname"><em>oi</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01174">1174</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Keep interface&#39;s self-originated network-LSA. */</span>
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa = oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>;

  <span class="comment">/* Cancel previously schedules network-LSA timer. */</span>
  <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a278866980d98aa3ae2c393acb08c0337">t_network_lsa_self</a>)
    <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type2]: Cancel previous network-LSA timer&quot;</span>);
  <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (oi-&gt;<a class="code" href="structospf__interface.html#a278866980d98aa3ae2c393acb08c0337">t_network_lsa_self</a>);

  <span class="comment">/* If network-LSA is originated previously, check the interval time. */</span>
  <span class="keywordflow">if</span> (lsa)
    {
      <span class="keywordtype">int</span> delay;
      <span class="keywordflow">if</span> ((delay = <a class="code" href="ospf__lsa_8c.html#a8f4fa72b19256ed0ecd962b21a9241a7">ospf_lsa_refresh_delay</a> (lsa)) &gt; 0)
        {
          oi-&gt;<a class="code" href="structospf__interface.html#a278866980d98aa3ae2c393acb08c0337">t_network_lsa_self</a> =
            <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__lsa_8c.html#af846c8b91a957413be3751610d0d3008">ospf_network_lsa_refresh_timer</a>,
                  oi, delay);
          <span class="keywordflow">return</span>;
        }
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Scheduling network-LSA origination right away&quot;</span>);

  <span class="comment">/* Immediately refresh network-LSA. */</span>
  oi-&gt;<a class="code" href="structospf__interface.html#a278866980d98aa3ae2c393acb08c0337">t_network_lsa_self</a> =
    <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__lsa_8c.html#af846c8b91a957413be3751610d0d3008">ospf_network_lsa_refresh_timer</a>, oi, 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad7cf1f402786baeafb4b5c21bd6faf8d"></a><!-- doxytag: member="ospf_lsa.c::ospf_nssa_lsa_flush" ref="ad7cf1f402786baeafb4b5c21bd6faf8d" args="(struct ospf *ospf, struct prefix_ipv4 *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_nssa_lsa_flush </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02189">2189</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, nnode, area))
  {
    <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a>)
    {
      <span class="keywordflow">if</span> (!(lsa = <a class="code" href="ospf__lsa_8c.html#a1f0fd75e3aea10b1c15ffcc28fba7a58">ospf_lsa_lookup</a> (area, <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>, p-&gt;prefix,
                                ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))) 
      {
        <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING)) 
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA: There is no such AS-NSSA-LSA %s/%d in LSDB&quot;</span>,
                    inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
        <span class="keywordflow">continue</span>;
      }
      <a class="code" href="ospf__flood_8c.html#a8f46211a0fe7065405e8bdda81963204">ospf_ls_retransmit_delete_nbr_area</a> (area, lsa);
      <span class="keywordflow">if</span> (!<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (lsa)) 
      {
        <a class="code" href="ospf__lsa_8c.html#a97aa8b72a68e3a1c96ce73a46d2c6c6c">ospf_refresher_unregister_lsa</a> (ospf, lsa);
        <a class="code" href="ospf__flood_8c.html#ad3049ba87364a6fbed7d352023e33a4a">ospf_lsa_flush_area</a> (lsa, area);
      }
    }
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aac345ad0177ef3e0a5236ef623ffb176"></a><!-- doxytag: member="ospf_lsa.c::ospf_refresher_register_lsa" ref="aac345ad0177ef3e0a5236ef623ffb176" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_refresher_register_lsa </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03649">3649</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int16_t index, current_index;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>));

  <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a91e4ad20d925dcea4ad488137cce0e40">refresh_list</a> &lt; 0)
    {
      <span class="keywordtype">int</span> delay;

      <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#ac3af6344813262fea1e037637547443f">LS_AGE</a> (lsa) == 0 &amp;&amp;
      ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>) == <a class="code" href="ospfd_8h.html#affb6c878aa462ae5de5e5db70631482d">OSPF_INITIAL_SEQUENCE_NUMBER</a>)
    <span class="comment">/* Randomize first update by  OSPF_LS_REFRESH_SHIFT factor */</span> 
    delay = <a class="code" href="ospfd_8h.html#a1baa2977bccd65eda7f1c3dcede72af2">OSPF_LS_REFRESH_SHIFT</a> + (random () % <a class="code" href="ospfd_8h.html#a5fe58ce24b916ba7a90e574173aa0349">OSPF_LS_REFRESH_TIME</a>);
      <span class="keywordflow">else</span>
    <span class="comment">/* Randomize another updates by +-OSPF_LS_REFRESH_JITTER factor */</span>
    delay = <a class="code" href="ospfd_8h.html#a5fe58ce24b916ba7a90e574173aa0349">OSPF_LS_REFRESH_TIME</a> - <a class="code" href="ospf__lsa_8h.html#ac3af6344813262fea1e037637547443f">LS_AGE</a> (lsa) - <a class="code" href="ospfd_8h.html#aa4491785ec311e7281d1b48564cefd6b">OSPF_LS_REFRESH_JITTER</a>
      + (random () % (2*<a class="code" href="ospfd_8h.html#aa4491785ec311e7281d1b48564cefd6b">OSPF_LS_REFRESH_JITTER</a>)); 

      <span class="keywordflow">if</span> (delay &lt; 0)
    delay = 0;

      current_index = ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#a65bdce49ac806b7af091220184559635">index</a> +
    (<a class="code" href="thread_8c.html#acbaf2206b84f93fbe18f33483bf101d2">quagga_time</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) - ospf-&gt;<a class="code" href="structospf.html#ab5d0a648175f600f62a12444c237dd8f">lsa_refresher_started</a>)/<a class="code" href="ospfd_8h.html#a62aca10324b168da898934617ebf36f9">OSPF_LSA_REFRESHER_GRANULARITY</a>;
      
      index = (current_index + delay/<a class="code" href="ospfd_8h.html#a62aca10324b168da898934617ebf36f9">OSPF_LSA_REFRESHER_GRANULARITY</a>)
    % (<a class="code" href="ospfd_8h.html#a09a36e0ed4763356a713ba83d0bc3dda">OSPF_LSA_REFRESHER_SLOTS</a>);

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_REFRESH))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Refresh]: lsa %s with age %d added to index %d&quot;</span>,
           inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), <a class="code" href="ospf__lsa_8h.html#ac3af6344813262fea1e037637547443f">LS_AGE</a> (lsa), index);
      <span class="keywordflow">if</span> (!ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#ac5484d1394af906226eb62611a0329d1">qs</a>[index])
    ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#ac5484d1394af906226eb62611a0329d1">qs</a>[index] = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
      <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#ac5484d1394af906226eb62611a0329d1">qs</a>[index],
                    <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa)); <span class="comment">/* lsa_refresh_queue */</span>
      lsa-&gt;<a class="code" href="structospf__lsa.html#a91e4ad20d925dcea4ad488137cce0e40">refresh_list</a> = index;
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_REFRESH))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Refresh:%s]: ospf_refresher_register_lsa(): &quot;</span>
                   <span class="stringliteral">&quot;setting refresh_list on lsa %p (slod %d)&quot;</span>, 
                   inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), lsa, index);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a97aa8b72a68e3a1c96ce73a46d2c6c6c"></a><!-- doxytag: member="ospf_lsa.c::ospf_refresher_unregister_lsa" ref="a97aa8b72a68e3a1c96ce73a46d2c6c6c" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_refresher_unregister_lsa </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03693">3693</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a>));
  <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a91e4ad20d925dcea4ad488137cce0e40">refresh_list</a> &gt;= 0)
    {
      <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *refresh_list = ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#ac5484d1394af906226eb62611a0329d1">qs</a>[lsa-&gt;<a class="code" href="structospf__lsa.html#a91e4ad20d925dcea4ad488137cce0e40">refresh_list</a>];
      <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (refresh_list, lsa);
      <span class="keywordflow">if</span> (!<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (refresh_list))
    {
      <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (refresh_list);
      ospf-&gt;<a class="code" href="structospf.html#a063c49a13f4c394dafb8d92113410e9a">lsa_refresh_queue</a>.<a class="code" href="structospf.html#ac5484d1394af906226eb62611a0329d1">qs</a>[lsa-&gt;<a class="code" href="structospf__lsa.html#a91e4ad20d925dcea4ad488137cce0e40">refresh_list</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
      <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;lsa); <span class="comment">/* lsa_refresh_queue */</span>
      lsa-&gt;<a class="code" href="structospf__lsa.html#a91e4ad20d925dcea4ad488137cce0e40">refresh_list</a> = -1;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab81e6383be067658a00cd217b3000853"></a><!-- doxytag: member="ospf_lsa.c::ospf_router_lsa_body_set" ref="ab81e6383be067658a00cd217b3000853" args="(struct stream *s, struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_router_lsa_body_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00703">703</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> putp;
  u_int16_t cnt;

  <span class="comment">/* Set flags. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="ospf__lsa_8c.html#a933091398aaec2e2fd8f491a75de49ad">router_lsa_flags</a> (area));

  <span class="comment">/* Set Zero fields. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);

  <span class="comment">/* Keep pointer to # links. */</span>
  putp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(s);

  <span class="comment">/* Forward word */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a>(s, 0);

  <span class="comment">/* Set all link information. */</span>
  cnt = <a class="code" href="ospf__lsa_8c.html#ab3f0e4fff2defbc5bfa40bd93a1666d4">router_lsa_link_set</a> (s, area);

  <span class="comment">/* Set # of links here. */</span>
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, putp, cnt);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a00547ded12be2b6f30d26527e6829584"></a><!-- doxytag: member="ospf_lsa.c::ospf_router_lsa_install" ref="a00547ded12be2b6f30d26527e6829584" args="(struct ospf *ospf, struct ospf_lsa *new, int rt_recalc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_router_lsa_install </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>new</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rt_recalc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02407">2407</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a> = <span class="keyword">new</span>-&gt;area;

  <span class="comment">/* RFC 2328 Section 13.2 Router-LSAs and network-LSAs</span>
<span class="comment">     The entire routing table must be recalculated, starting with</span>
<span class="comment">     the shortest path calculations for each area (not just the</span>
<span class="comment">     area whose link-state database has changed). </span>
<span class="comment">  */</span>

  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (<span class="keyword">new</span>))
    {

      <span class="comment">/* Only install LSA if it is originated/refreshed by us.</span>
<span class="comment">       * If LSA was received by flooding, the RECEIVED flag is set so do</span>
<span class="comment">       * not link the LSA */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (new-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a780906236e4b5ef16a4a720a57e3f617">OSPF_LSA_RECEIVED</a>))
    <span class="keywordflow">return</span> <span class="keyword">new</span>; <span class="comment">/* ignore stale LSA */</span>

      <span class="comment">/* Set router-LSA refresh timer. */</span>
      <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (area-&gt;<a class="code" href="structospf__area.html#a7101904a0d8d145b671919e47eb7c107">t_router_lsa_self</a>);
      <a class="code" href="ospfd_8h.html#a9ebaef78d2ca515b0c4fbc4aebd82d5e">OSPF_AREA_TIMER_ON</a> (area-&gt;<a class="code" href="structospf__area.html#a7101904a0d8d145b671919e47eb7c107">t_router_lsa_self</a>,
                          <a class="code" href="ospf__lsa_8c.html#a0aa16c23a7fe1f38a172c06579e5ca25">ospf_router_lsa_timer</a>, <a class="code" href="ospfd_8h.html#a5fe58ce24b916ba7a90e574173aa0349">OSPF_LS_REFRESH_TIME</a>);

      <span class="comment">/* Set self-originated router-LSA. */</span>
      <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>);
      area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a> = <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (<span class="keyword">new</span>);

    }
  <span class="keywordflow">if</span> (rt_recalc)
    <a class="code" href="ospf__spf_8c.html#a3422ebf3062fac786ecdb7b419c22cf1">ospf_spf_calculate_schedule</a> (ospf);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6fbeba86f3faffc552095a5857135c65"></a><!-- doxytag: member="ospf_lsa.c::ospf_router_lsa_new" ref="a6fbeba86f3faffc552095a5857135c65" args="(struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_router_lsa_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00786">786</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type1]: Create router-LSA instance&quot;</span>);

  <span class="comment">/* check whether stub-router is desired, and if this is the first </span>
<span class="comment">   * router LSA.</span>
<span class="comment">   */</span>
  <a class="code" href="ospf__lsa_8c.html#a353f9fae56b212ee9cb89a886fb2a459">ospf_stub_router_check</a> (area);
  
  <span class="comment">/* Create a stream for LSA. */</span>
  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>);
  <span class="comment">/* Set LSA common header fields. */</span>
  <a class="code" href="ospf__lsa_8c.html#af7f1713ea04e1406ff0339fe9d3a45bd">lsa_header_set</a> (s, <a class="code" href="ospfd_8h.html#a2ed6617f58a7d168ffb30a323a532597">LSA_OPTIONS_GET</a> (area) | <a class="code" href="ospfd_8h.html#a733255e8400f4b76dc3ed952ef7c1c0a">LSA_OPTIONS_NSSA_GET</a> (area),
          <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>, ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>, ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>);

  <span class="comment">/* Set router-LSA body fields. */</span>
  <a class="code" href="ospf__lsa_8c.html#ab81e6383be067658a00cd217b3000853">ospf_router_lsa_body_set</a> (s, area);

  <span class="comment">/* Set length. */</span>
  length = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s);
  lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a> = htons (length);

  <span class="comment">/* Now, create OSPF LSA instance. */</span>
  <span class="keywordflow">if</span> ( (<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ()) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: Unable to create new lsa&quot;</span>, __func__);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  
  <span class="keyword">new</span>-&gt;area = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a> | <a class="code" href="ospf__lsa_8h.html#a1e84ca07fab175368ae0125c93e06e4f">OSPF_LSA_SELF_CHECKED</a>);

  <span class="comment">/* Copy LSA data to store, discard stream. */</span>
  <span class="keyword">new</span>-&gt;data = <a class="code" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (length);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;data, lsah, length);
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6740a0233b05e58420186ba666abcc54"></a><!-- doxytag: member="ospf_lsa.c::ospf_router_lsa_originate" ref="a6740a0233b05e58420186ba666abcc54" args="(struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_router_lsa_originate </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00836">836</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  
  <span class="comment">/* Create new router-LSA instance. */</span>
  <span class="keywordflow">if</span> ( (<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a6fbeba86f3faffc552095a5857135c65">ospf_router_lsa_new</a> (area)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: ospf_router_lsa_new returned NULL&quot;</span>, __func__);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="comment">/* Sanity check. */</span>
  <span class="keywordflow">if</span> (new-&gt;data-&gt;adv_router.s_addr == 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type1]: AdvRouter is 0, discard&quot;</span>);
      <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (<span class="keyword">new</span>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="comment">/* Install LSA to LSDB. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="comment">/* Update LSA origination count. */</span>
  area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#a4a3d13744fa4c72bfdab00cb7c7a3783">lsa_originate_count</a>++;

  <span class="comment">/* Flooding new LSA through area. */</span>
  <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (area, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Originate router-LSA %p&quot;</span>,
         new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id), <span class="keyword">new</span>);
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
    }

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3d338f7fd5293f7399c47ba516109f8b"></a><!-- doxytag: member="ospf_lsa.c::ospf_router_lsa_refresh" ref="a3d338f7fd5293f7399c47ba516109f8b" args="(struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_router_lsa_refresh </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00877">877</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a> = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;

  <span class="comment">/* Sanity check. */</span>
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);

  <span class="comment">/* Delete LSA from neighbor retransmit-list. */</span>
  <a class="code" href="ospf__flood_8c.html#a8f46211a0fe7065405e8bdda81963204">ospf_ls_retransmit_delete_nbr_area</a> (area, lsa);

  <span class="comment">/* Create new router-LSA instance. */</span>
  <span class="keywordflow">if</span> ( (<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a6fbeba86f3faffc552095a5857135c65">ospf_router_lsa_new</a> (area)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: ospf_router_lsa_new returned NULL&quot;</span>, __func__);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  
  <span class="keyword">new</span>-&gt;data-&gt;ls_seqnum = <a class="code" href="ospf__lsa_8c.html#a0951db1fe1ad120fc1831443a9c834ca">lsa_seqnum_increment</a> (lsa);

  <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="comment">/* Flood LSA through area. */</span>
  <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (area, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="comment">/* Debug logging. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: router-LSA refresh&quot;</span>,
         new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id));
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0aa16c23a7fe1f38a172c06579e5ca25"></a><!-- doxytag: member="ospf_lsa.c::ospf_router_lsa_timer" ref="a0aa16c23a7fe1f38a172c06579e5ca25" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_router_lsa_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00914">914</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Timer[router-LSA]: (router-LSA Refresh expire)&quot;</span>);

  area = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  area-&gt;<a class="code" href="structospf__area.html#a7101904a0d8d145b671919e47eb7c107">t_router_lsa_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Now refresh router-LSA. */</span>
  <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>)
    <a class="code" href="ospf__lsa_8c.html#a3d338f7fd5293f7399c47ba516109f8b">ospf_router_lsa_refresh</a> (area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>);
  <span class="comment">/* Newly originate router-LSA. */</span>
  <span class="keywordflow">else</span>
    <a class="code" href="ospf__lsa_8c.html#a6740a0233b05e58420186ba666abcc54">ospf_router_lsa_originate</a> (area);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a66ad8a1fd151b43b11d7ec9650a644bf"></a><!-- doxytag: member="ospf_lsa.c::ospf_router_lsa_timer_add" ref="a66ad8a1fd151b43b11d7ec9650a644bf" args="(struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_router_lsa_timer_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00935">935</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Keep area&#39;s self-originated router-LSA. */</span>
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa = area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>;

  <span class="comment">/* Cancel previously scheduled router-LSA timer. */</span>
  <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#a7101904a0d8d145b671919e47eb7c107">t_router_lsa_self</a>)
    <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type1]: Cancel previous router-LSA timer&quot;</span>);

  <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (area-&gt;<a class="code" href="structospf__area.html#a7101904a0d8d145b671919e47eb7c107">t_router_lsa_self</a>);

  <span class="comment">/* If router-LSA is originated previously, check the interval time. */</span>
  <span class="keywordflow">if</span> (lsa)
    {
      <span class="keywordtype">int</span> delay;
      <span class="keywordflow">if</span> ((delay = <a class="code" href="ospf__lsa_8c.html#a8f4fa72b19256ed0ecd962b21a9241a7">ospf_lsa_refresh_delay</a> (lsa)) &gt; 0)
        {
      <a class="code" href="ospfd_8h.html#a9ebaef78d2ca515b0c4fbc4aebd82d5e">OSPF_AREA_TIMER_ON</a> (area-&gt;<a class="code" href="structospf__area.html#a7101904a0d8d145b671919e47eb7c107">t_router_lsa_self</a>,
                  <a class="code" href="ospf__lsa_8c.html#a0aa16c23a7fe1f38a172c06579e5ca25">ospf_router_lsa_timer</a>, delay);
      <span class="keywordflow">return</span>;
        }
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type1]: Scheduling router-LSA origination right away&quot;</span>);

  <span class="comment">/* Immediately refresh router-LSA. */</span>
  <a class="code" href="ospfd_8h.html#a9ebaef78d2ca515b0c4fbc4aebd82d5e">OSPF_AREA_TIMER_ON</a> (area-&gt;<a class="code" href="structospf__area.html#a7101904a0d8d145b671919e47eb7c107">t_router_lsa_self</a>, <a class="code" href="ospf__lsa_8c.html#a0aa16c23a7fe1f38a172c06579e5ca25">ospf_router_lsa_timer</a>, 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4db40452defbd5304d698f8d0cc855d1"></a><!-- doxytag: member="ospf_lsa.c::ospf_router_lsa_update_timer" ref="a4db40452defbd5304d698f8d0cc855d1" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_router_lsa_update_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00967">967</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Timer[router-LSA Update]: (timer expire)&quot;</span>);

  ospf-&gt;<a class="code" href="structospf.html#a94a369b811b335e1d05e1dab77096606">t_router_lsa_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, nnode, area))
    {
      <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa = area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>;
      <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *rl;
      <span class="keyword">const</span> <span class="keywordtype">char</span> *area_str;

      <span class="comment">/* Keep Area ID string. */</span>
      area_str = <a class="code" href="ospf__dump_8h.html#ac60094bacaf4a0d4f8036cbbebb17e6f">AREA_NAME</a> (area);

      <span class="comment">/* If LSA not exist in this Area, originate new. */</span>
      <span class="keywordflow">if</span> (lsa == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;LSA[Type1]: Create router-LSA for Area %s&quot;</span>, area_str);

      <a class="code" href="ospf__lsa_8c.html#a6740a0233b05e58420186ba666abcc54">ospf_router_lsa_originate</a> (area);
        }
      <span class="comment">/* If router-ID is changed, Link ID must change.</span>
<span class="comment">     First flush old LSA, then originate new. */</span>
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, &amp;ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;LSA[Type%d:%s]: Refresh router-LSA for Area %s&quot;</span>,
              lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), area_str);
      <a class="code" href="ospf__flood_8c.html#ad3049ba87364a6fbed7d352023e33a4a">ospf_lsa_flush_area</a> (lsa, area);
      <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>);
      area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <span class="comment">/* Refresh router-LSA, (not install) and flood through area. */</span>
      <a class="code" href="ospf__lsa_8c.html#a66ad8a1fd151b43b11d7ec9650a644bf">ospf_router_lsa_timer_add</a> (area);
    }
      <span class="keywordflow">else</span>
    {
      rl = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
      <span class="comment">/* Refresh router-LSA, (not install) and flood through area. */</span>
      if (rl-&gt;<a class="code" href="structrouter__lsa.html#a1fdd09ba13cd7ca0f1b1d694d2d839aa">flags</a> != ospf-&gt;<a class="code" href="structospf.html#a435f2a4e7119f86c682366f6319ce64f">flags</a>)
        <a class="code" href="ospf__lsa_8c.html#a66ad8a1fd151b43b11d7ec9650a644bf">ospf_router_lsa_timer_add</a> (area);
    }
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a310feaf9384fb1379ab4ed56bff96c0e"></a><!-- doxytag: member="ospf_lsa.c::ospf_schedule_lsa_flood_area" ref="a310feaf9384fb1379ab4ed56bff96c0e" args="(struct ospf_area *area, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_schedule_lsa_flood_area </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03579">3579</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlsa__action.html">lsa_action</a> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;

  data = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba66fb9102d923b5abeecd720d1a6e1342">MTYPE_OSPF_MESSAGE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structlsa__action.html">lsa_action</a>));
  data-&gt;<a class="code" href="structlsa__action.html#a81079a909cd32f9abb9f4fc1d71c82f4">action</a> = <a class="code" href="ospf__lsa_8c.html#a0771b37557fd8283b02242fef0a3cde6">LSA_ACTION_FLOOD_AREA</a>;
  data-&gt;<a class="code" href="structlsa__action.html#aadabd29582be574d1435449db2549728">area</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  data-&gt;<a class="code" href="structlsa__action.html#a32e411c8427242dd9b30498702559a88">lsa</a>  = <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa); <span class="comment">/* Message / Flood area */</span>

  <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__lsa_8c.html#ae43288239f3e631018a7d2320b76fc6b">ospf_lsa_action</a>, data, 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a213c8ef3aeb0ac504641c617397fda07"></a><!-- doxytag: member="ospf_lsa.c::ospf_schedule_lsa_flush_area" ref="a213c8ef3aeb0ac504641c617397fda07" args="(struct ospf_area *area, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_schedule_lsa_flush_area </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l03592">3592</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlsa__action.html">lsa_action</a> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;

  data = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba66fb9102d923b5abeecd720d1a6e1342">MTYPE_OSPF_MESSAGE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structlsa__action.html">lsa_action</a>));
  data-&gt;<a class="code" href="structlsa__action.html#a81079a909cd32f9abb9f4fc1d71c82f4">action</a> = <a class="code" href="ospf__lsa_8c.html#a880dbf45969502cf9f7b5b99a30a727d">LSA_ACTION_FLUSH_AREA</a>;
  data-&gt;<a class="code" href="structlsa__action.html#aadabd29582be574d1435449db2549728">area</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  data-&gt;<a class="code" href="structlsa__action.html#a32e411c8427242dd9b30498702559a88">lsa</a>  = <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa); <span class="comment">/* Message / Flush area */</span>

  <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__lsa_8c.html#ae43288239f3e631018a7d2320b76fc6b">ospf_lsa_action</a>, data, 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a353f9fae56b212ee9cb89a886fb2a459"></a><!-- doxytag: member="ospf_lsa.c::ospf_stub_router_check" ref="a353f9fae56b212ee9cb89a886fb2a459" args="(struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_stub_router_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00750">750</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* area must either be administratively configured to be stub</span>
<span class="comment">   * or startup-time stub-router must be configured and we must in a pre-stub</span>
<span class="comment">   * state.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (area-&gt;<a class="code" href="structospf__area.html#a867d739fef4ebeba5904af241dbcf88f">stub_router_state</a>, <a class="code" href="ospfd_8h.html#ab939bce5a7f69489b162a0304569c36e">OSPF_AREA_ADMIN_STUB_ROUTED</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (area-&gt;<a class="code" href="structospf__area.html#a867d739fef4ebeba5904af241dbcf88f">stub_router_state</a>, <a class="code" href="ospfd_8h.html#a11d7f12dfe50bd7cc95c7e76615cb8bc">OSPF_AREA_IS_STUB_ROUTED</a>);
      <span class="keywordflow">return</span>;
    }
  
  <span class="comment">/* not admin-stubbed, check whether startup stubbing is configured and</span>
<span class="comment">   * whether it&#39;s not been done yet</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (area-&gt;<a class="code" href="structospf__area.html#a867d739fef4ebeba5904af241dbcf88f">stub_router_state</a>, <a class="code" href="ospfd_8h.html#a83cc91e0f31c45d5ef458a880b6b3370">OSPF_AREA_WAS_START_STUB_ROUTED</a>))
    <span class="keywordflow">return</span>;
  
  <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#a5324ff0964c9c45a5a7b0a822e895e9d">stub_router_startup_time</a> == <a class="code" href="ospfd_8h.html#a4a68456603adc72536dfd42656a45bce">OSPF_STUB_ROUTER_UNCONFIGURED</a>)
    {
      <span class="comment">/* stub-router is hence done forever for this area, even if someone</span>
<span class="comment">       * tries configure it (take effect next restart).</span>
<span class="comment">       */</span>
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (area-&gt;<a class="code" href="structospf__area.html#a867d739fef4ebeba5904af241dbcf88f">stub_router_state</a>, <a class="code" href="ospfd_8h.html#a83cc91e0f31c45d5ef458a880b6b3370">OSPF_AREA_WAS_START_STUB_ROUTED</a>);
      <span class="keywordflow">return</span>;
    }
  
  <span class="comment">/* startup stub-router configured and not yet done */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (area-&gt;<a class="code" href="structospf__area.html#a867d739fef4ebeba5904af241dbcf88f">stub_router_state</a>, <a class="code" href="ospfd_8h.html#a11d7f12dfe50bd7cc95c7e76615cb8bc">OSPF_AREA_IS_STUB_ROUTED</a>);
  
  <a class="code" href="ospfd_8h.html#a9ebaef78d2ca515b0c4fbc4aebd82d5e">OSPF_AREA_TIMER_ON</a> (area-&gt;<a class="code" href="structospf__area.html#a92d4bf45a2078da60d208952324c868b">t_stub_router</a>, <a class="code" href="ospf__lsa_8c.html#a3e535ea8f7827d005f6d5f886860cf0a">ospf_stub_router_timer</a>,
                      area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#a5324ff0964c9c45a5a7b0a822e895e9d">stub_router_startup_time</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3e535ea8f7827d005f6d5f886860cf0a"></a><!-- doxytag: member="ospf_lsa.c::ospf_stub_router_timer" ref="a3e535ea8f7827d005f6d5f886860cf0a" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_stub_router_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00728">728</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a> = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  
  area-&gt;<a class="code" href="structospf__area.html#a92d4bf45a2078da60d208952324c868b">t_stub_router</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (area-&gt;<a class="code" href="structospf__area.html#a867d739fef4ebeba5904af241dbcf88f">stub_router_state</a>, <a class="code" href="ospfd_8h.html#a83cc91e0f31c45d5ef458a880b6b3370">OSPF_AREA_WAS_START_STUB_ROUTED</a>);
  
  <span class="comment">/* clear stub route state and generate router-lsa refresh, don&#39;t</span>
<span class="comment">   * clobber an administratively set stub-router state though.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (area-&gt;<a class="code" href="structospf__area.html#a867d739fef4ebeba5904af241dbcf88f">stub_router_state</a>, <a class="code" href="ospfd_8h.html#ab939bce5a7f69489b162a0304569c36e">OSPF_AREA_ADMIN_STUB_ROUTED</a>))
    <span class="keywordflow">return</span> 0;
  
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (area-&gt;<a class="code" href="structospf__area.html#a867d739fef4ebeba5904af241dbcf88f">stub_router_state</a>, <a class="code" href="ospfd_8h.html#a11d7f12dfe50bd7cc95c7e76615cb8bc">OSPF_AREA_IS_STUB_ROUTED</a>);
  
  <a class="code" href="ospf__lsa_8c.html#a66ad8a1fd151b43b11d7ec9650a644bf">ospf_router_lsa_timer_add</a> (area);
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a186dd5ed3f8fe3c4d75ab221ca63232a"></a><!-- doxytag: member="ospf_lsa.c::ospf_summary_asbr_lsa_body_set" ref="a186dd5ed3f8fe3c4d75ab221ca63232a" args="(struct stream *s, struct prefix *p, u_int32_t metric)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_summary_asbr_lsa_body_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>metric</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01368">1368</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>in_addr mask;

  <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;mask);

  <span class="comment">/* Put Network Mask. */</span>
  <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, mask.s_addr);

  <span class="comment">/* Set # TOS. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, (u_char) 0);

  <span class="comment">/* Set metric. */</span>
  <a class="code" href="ospf__lsa_8c.html#ac8877b96dfac044bed2f32c1aa23b0ce">stream_put_ospf_metric</a> (s, <a class="code" href="structmetric.html">metric</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a00b9af9ccc56dfb070dad158aef030fa"></a><!-- doxytag: member="ospf_lsa.c::ospf_summary_asbr_lsa_install" ref="a00b9af9ccc56dfb070dad158aef030fa" args="(struct ospf *ospf, struct ospf_lsa *new, int rt_recalc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_summary_asbr_lsa_install </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>new</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rt_recalc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02517">2517</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (rt_recalc &amp;&amp; !<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (<span class="keyword">new</span>))
    {
      <span class="comment">/* RFC 2328 Section 13.2 Summary-LSAs</span>
<span class="comment">     The best route to the destination described by the summary-</span>
<span class="comment">     LSA must be recalculated (see Section 16.5).  If this</span>
<span class="comment">     destination is an AS boundary router, it may also be</span>
<span class="comment">     necessary to re-examine all the AS-external-LSAs.</span>
<span class="comment">      */</span>
<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>      <span class="comment">/* These don&#39;t exist yet... */</span>
      ospf_summary_incremental_update(<span class="keyword">new</span>);
      <span class="comment">/* Isn&#39;t this done by the above call? </span>
<span class="comment">     - RFC 2328 Section 16.5 implies it should be */</span>
      <span class="comment">/* ospf_ase_calculate_schedule(); */</span>
<span class="preprocessor">#else  </span><span class="comment">/* #if 0 */</span>
      <a class="code" href="ospf__spf_8c.html#a3422ebf3062fac786ecdb7b419c22cf1">ospf_spf_calculate_schedule</a> (ospf);
<span class="preprocessor">#endif </span><span class="comment">/* #if 0 */</span>
    }

  <span class="comment">/* register LSA to refresh-list. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (<span class="keyword">new</span>))
    <a class="code" href="ospf__lsa_8c.html#aac345ad0177ef3e0a5236ef623ffb176">ospf_refresher_register_lsa</a> (ospf, <span class="keyword">new</span>);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac75ce3827118eaf0817aef1d5dee7322"></a><!-- doxytag: member="ospf_lsa.c::ospf_summary_asbr_lsa_new" ref="ac75ce3827118eaf0817aef1d5dee7322" args="(struct ospf_area *area, struct prefix *p, u_int32_t metric, struct in_addr id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_summary_asbr_lsa_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>metric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01386">1386</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.s_addr == 0xffffffff)
    {
      <span class="comment">/* Maybe Link State ID not available. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d]: Link ID not available, can&#39;t originate&quot;</span>,
                    <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type3]: Create summary-LSA instance&quot;</span>);

  <span class="comment">/* Create new stream for LSA. */</span>
  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>);
  lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s);

  <a class="code" href="ospf__lsa_8c.html#af7f1713ea04e1406ff0339fe9d3a45bd">lsa_header_set</a> (s, <a class="code" href="ospfd_8h.html#a2ed6617f58a7d168ffb30a323a532597">LSA_OPTIONS_GET</a> (area), <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>,
          <span class="keywordtype">id</span>, area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>);

  <span class="comment">/* Set summary-LSA body fields. */</span>
  <a class="code" href="ospf__lsa_8c.html#a186dd5ed3f8fe3c4d75ab221ca63232a">ospf_summary_asbr_lsa_body_set</a> (s, p, <a class="code" href="structmetric.html">metric</a>);

  <span class="comment">/* Set length. */</span>
  length = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a> = htons (length);

  <span class="comment">/* Create OSPF LSA instance. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ();
  <span class="keyword">new</span>-&gt;area = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a> | <a class="code" href="ospf__lsa_8h.html#a1e84ca07fab175368ae0125c93e06e4f">OSPF_LSA_SELF_CHECKED</a>);

  <span class="comment">/* Copy LSA to store. */</span>
  <span class="keyword">new</span>-&gt;data = <a class="code" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (length);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;data, lsah, length);
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a876eea14a76fdba052af58a1a69c2bfc"></a><!-- doxytag: member="ospf_lsa.c::ospf_summary_asbr_lsa_originate" ref="a876eea14a76fdba052af58a1a69c2bfc" args="(struct prefix_ipv4 *p, u_int32_t metric, struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_summary_asbr_lsa_originate </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>metric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01435">1435</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span>in_addr <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>;
  
  <span class="keywordtype">id</span> = <a class="code" href="ospf__lsa_8c.html#a3af5cb403d133f3276e5a744f03b309a">ospf_lsa_unique_id</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>, <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>, p);

  <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.s_addr == 0xffffffff)
    {
      <span class="comment">/* Maybe Link State ID not available. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d]: Link ID not available, can&#39;t originate&quot;</span>,
                    <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  
  <span class="comment">/* Create new summary-LSA instance. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#ac75ce3827118eaf0817aef1d5dee7322">ospf_summary_asbr_lsa_new</a> (area, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p, <a class="code" href="structmetric.html">metric</a>, <span class="keywordtype">id</span>);
  <span class="keywordflow">if</span> (!<span class="keyword">new</span>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Install LSA to LSDB. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);
  
  <span class="comment">/* Update LSA origination count. */</span>
  area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#a4a3d13744fa4c72bfdab00cb7c7a3783">lsa_originate_count</a>++;

  <span class="comment">/* Flooding new LSA through area. */</span>
  <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (area, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Originate summary-ASBR-LSA %p&quot;</span>,
         new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id), <span class="keyword">new</span>);
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
    }

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3d394fbfdef8b8da9ead7c5a38bc5204"></a><!-- doxytag: member="ospf_lsa.c::ospf_summary_asbr_lsa_refresh" ref="a3d394fbfdef8b8da9ead7c5a38bc5204" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_summary_asbr_lsa_refresh </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01477">1477</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structsummary__lsa.html">summary_lsa</a> *<a class="code" href="spgrid_8c.html#a1c244c66d157ebaf785a7d1368bf4a28">sl</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="comment">/* Sanity check. */</span>
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);

  sl = (<span class="keyword">struct </span><a class="code" href="structsummary__lsa.html">summary_lsa</a> *)lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (sl-&gt;<a class="code" href="structsummary__lsa.html#a3e279837bb9ae312a172bda61fb24043">mask</a>);
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#ac75ce3827118eaf0817aef1d5dee7322">ospf_summary_asbr_lsa_new</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="ospf__lsa_8h.html#af484b7995c962cc7558d5fc385b835fc">GET_METRIC</a> (sl-&gt;<a class="code" href="structsummary__lsa.html#a0353f250382513bdfb5962e9c23f822a">metric</a>),
                   sl-&gt;<a class="code" href="structsummary__lsa.html#a78511b56eed6986c0288fa7da9c4b7a1">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>);
  <span class="keywordflow">if</span> (!<span class="keyword">new</span>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <span class="keyword">new</span>-&gt;data-&gt;ls_seqnum = <a class="code" href="ospf__lsa_8c.html#a0951db1fe1ad120fc1831443a9c834ca">lsa_seqnum_increment</a> (lsa);

  <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);
  
  <span class="comment">/* Flood LSA through area. */</span>
  <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (new-&gt;area, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: summary-ASBR-LSA refresh&quot;</span>,
         new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id));
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
    }

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a448ed58dd69bf2882c6c7f7c7d6c7b68"></a><!-- doxytag: member="ospf_lsa.c::ospf_summary_lsa_body_set" ref="a448ed58dd69bf2882c6c7f7c7d6c7b68" args="(struct stream *s, struct prefix *p, u_int32_t metric)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_summary_lsa_body_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>metric</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01222">1222</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>in_addr mask;

  <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, &amp;mask);

  <span class="comment">/* Put Network Mask. */</span>
  <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, mask.s_addr);

  <span class="comment">/* Set # TOS. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, (u_char) 0);

  <span class="comment">/* Set metric. */</span>
  <a class="code" href="ospf__lsa_8c.html#ac8877b96dfac044bed2f32c1aa23b0ce">stream_put_ospf_metric</a> (s, <a class="code" href="structmetric.html">metric</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="abbee2c4a7e1898de8eee25d1cc6b3164"></a><!-- doxytag: member="ospf_lsa.c::ospf_summary_lsa_install" ref="abbee2c4a7e1898de8eee25d1cc6b3164" args="(struct ospf *ospf, struct ospf_lsa *new, int rt_recalc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_summary_lsa_install </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>new</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rt_recalc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l02486">2486</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (rt_recalc &amp;&amp; !<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (<span class="keyword">new</span>))
    {
      <span class="comment">/* RFC 2328 Section 13.2 Summary-LSAs</span>
<span class="comment">     The best route to the destination described by the summary-</span>
<span class="comment">     LSA must be recalculated (see Section 16.5).  If this</span>
<span class="comment">     destination is an AS boundary router, it may also be</span>
<span class="comment">     necessary to re-examine all the AS-external-LSAs.</span>
<span class="comment">      */</span>

<span class="preprocessor">#if 0</span>
<span class="preprocessor"></span>      <span class="comment">/* This doesn&#39;t exist yet... */</span>
      ospf_summary_incremental_update(<span class="keyword">new</span>); */
<span class="preprocessor">#else </span><span class="comment">/* #if 0 */</span>
      <a class="code" href="ospf__spf_8c.html#a3422ebf3062fac786ecdb7b419c22cf1">ospf_spf_calculate_schedule</a> (ospf);
<span class="preprocessor">#endif </span><span class="comment">/* #if 0 */</span>
 
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_INSTALL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_summary_lsa_install(): SPF scheduled&quot;</span>);
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (<span class="keyword">new</span>))
    <a class="code" href="ospf__lsa_8c.html#aac345ad0177ef3e0a5236ef623ffb176">ospf_refresher_register_lsa</a> (ospf, <span class="keyword">new</span>);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa1b062969828a13e6912c100de373fcd"></a><!-- doxytag: member="ospf_lsa.c::ospf_summary_lsa_new" ref="aa1b062969828a13e6912c100de373fcd" args="(struct ospf_area *area, struct prefix *p, u_int32_t metric, struct in_addr id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_summary_lsa_new </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>metric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01240">1240</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.s_addr == 0xffffffff)
    {
      <span class="comment">/* Maybe Link State ID not available. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d]: Link ID not available, can&#39;t originate&quot;</span>,
                    <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type3]: Create summary-LSA instance&quot;</span>);

  <span class="comment">/* Create new stream for LSA. */</span>
  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="ospf__lsa_8h.html#ac2b86f4ba477efd3b5ef794faa1a3300">OSPF_MAX_LSA_SIZE</a>);
  lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s);

  <a class="code" href="ospf__lsa_8c.html#af7f1713ea04e1406ff0339fe9d3a45bd">lsa_header_set</a> (s, <a class="code" href="ospfd_8h.html#a2ed6617f58a7d168ffb30a323a532597">LSA_OPTIONS_GET</a> (area), <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>,
          <span class="keywordtype">id</span>, area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>);

  <span class="comment">/* Set summary-LSA body fields. */</span>
  <a class="code" href="ospf__lsa_8c.html#a448ed58dd69bf2882c6c7f7c7d6c7b68">ospf_summary_lsa_body_set</a> (s, p, <a class="code" href="structmetric.html">metric</a>);

  <span class="comment">/* Set length. */</span>
  length = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a> = htons (length);

  <span class="comment">/* Create OSPF LSA instance. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ();
  <span class="keyword">new</span>-&gt;area = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a718b20342734d47ebbdfe717b19084e1">OSPF_LSA_SELF</a> | <a class="code" href="ospf__lsa_8h.html#a1e84ca07fab175368ae0125c93e06e4f">OSPF_LSA_SELF_CHECKED</a>);

  <span class="comment">/* Copy LSA to store. */</span>
  <span class="keyword">new</span>-&gt;data = <a class="code" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (length);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;data, lsah, length);
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a93fd95cdd56566f3929ae642fe197276"></a><!-- doxytag: member="ospf_lsa.c::ospf_summary_lsa_originate" ref="a93fd95cdd56566f3929ae642fe197276" args="(struct prefix_ipv4 *p, u_int32_t metric, struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_summary_lsa_originate </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>metric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01289">1289</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span>in_addr <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>;
  
  <span class="keywordtype">id</span> = <a class="code" href="ospf__lsa_8c.html#a3af5cb403d133f3276e5a744f03b309a">ospf_lsa_unique_id</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>, <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>, p);

  <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.s_addr == 0xffffffff)
    {
      <span class="comment">/* Maybe Link State ID not available. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d]: Link ID not available, can&#39;t originate&quot;</span>,
                    <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>);
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  
  <span class="comment">/* Create new summary-LSA instance. */</span>
  <span class="keywordflow">if</span> ( !(<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#aa1b062969828a13e6912c100de373fcd">ospf_summary_lsa_new</a> (area, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p, <a class="code" href="structmetric.html">metric</a>, <span class="keywordtype">id</span>)))
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Instlal LSA to LSDB. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="comment">/* Update LSA origination count. */</span>
  area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#a4a3d13744fa4c72bfdab00cb7c7a3783">lsa_originate_count</a>++;

  <span class="comment">/* Flooding new LSA through area. */</span>
  <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (area, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Originate summary-LSA %p&quot;</span>,
         new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id), <span class="keyword">new</span>);
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
    }

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad1ec944b0c3d672071952a4ec0112254"></a><!-- doxytag: member="ospf_lsa.c::ospf_summary_lsa_refresh" ref="ad1ec944b0c3d672071952a4ec0112254" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_summary_lsa_refresh </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01330">1330</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structsummary__lsa.html">summary_lsa</a> *<a class="code" href="spgrid_8c.html#a1c244c66d157ebaf785a7d1368bf4a28">sl</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  
  <span class="comment">/* Sanity check. */</span>
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);

  sl = (<span class="keyword">struct </span><a class="code" href="structsummary__lsa.html">summary_lsa</a> *)lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (sl-&gt;<a class="code" href="structsummary__lsa.html#a3e279837bb9ae312a172bda61fb24043">mask</a>);
  <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#aa1b062969828a13e6912c100de373fcd">ospf_summary_lsa_new</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="ospf__lsa_8h.html#af484b7995c962cc7558d5fc385b835fc">GET_METRIC</a> (sl-&gt;<a class="code" href="structsummary__lsa.html#a0353f250382513bdfb5962e9c23f822a">metric</a>),
                  sl-&gt;<a class="code" href="structsummary__lsa.html#a78511b56eed6986c0288fa7da9c4b7a1">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>);
  
  <span class="keywordflow">if</span> (!<span class="keyword">new</span>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <span class="keyword">new</span>-&gt;data-&gt;ls_seqnum = <a class="code" href="ospf__lsa_8c.html#a0951db1fe1ad120fc1831443a9c834ca">lsa_seqnum_increment</a> (lsa);

  <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);
  
  <span class="comment">/* Flood LSA through AS. */</span>
  <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (new-&gt;area, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="comment">/* Debug logging. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_GENERATE))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: summary-LSA refresh&quot;</span>,
         new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id));
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
    }
  
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae0beb4bdc20ad5fe3224c7ab980312ab"></a><!-- doxytag: member="ospf_lsa.c::ospf_translated_nssa_originate" ref="ae0beb4bdc20ad5fe3224c7ab980312ab" args="(struct ospf *ospf, struct ospf_lsa *type7)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_translated_nssa_originate </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>type7</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01866">1866</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *extnew;
  
  <span class="comment">/* we cant use ospf_external_lsa_originate() as we need to set</span>
<span class="comment">   * the OSPF_LSA_LOCAL_XLT flag, must originate by hand</span>
<span class="comment">   */</span>
  
  <span class="keywordflow">if</span> ( (<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a47659a8de2d310c23ffdb3852c9e3679">ospf_lsa_translated_nssa_new</a> (ospf, type7)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_translated_nssa_originate(): Could not translate &quot;</span>
                 <span class="stringliteral">&quot;Type-7, Id %s, to Type-5&quot;</span>,
                 inet_ntoa (type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
    
  extnew = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *)<span class="keyword">new</span>;
  
  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_translated_nssa_originate(): &quot;</span>
                 <span class="stringliteral">&quot;translated Type 7, installed:&quot;</span>);
      <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (new-&gt;data);
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;   Network mask: %d&quot;</span>,<a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (extnew-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>));
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;   Forward addr: %s&quot;</span>, inet_ntoa (extnew-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>));
    }
  
  <span class="keywordflow">if</span> ( (<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>);
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_lsa_translated_nssa_originate(): &quot;</span>
                   <span class="stringliteral">&quot;Could not install LSA &quot;</span>
                   <span class="stringliteral">&quot;id %s&quot;</span>, inet_ntoa (type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
    
  ospf-&gt;<a class="code" href="structospf.html#a4a3d13744fa4c72bfdab00cb7c7a3783">lsa_originate_count</a>++;
  <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa870c13f8cc5f9f7243bf1d73278d1d5"></a><!-- doxytag: member="ospf_lsa.c::ospf_translated_nssa_refresh" ref="aa870c13f8cc5f9f7243bf1d73278d1d5" args="(struct ospf *ospf, struct ospf_lsa *type7, struct ospf_lsa *type5)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a>* ospf_translated_nssa_refresh </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>type7</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>type5</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01912">1912</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <span class="comment">/* Sanity checks. */</span>
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (type7 || type5);
  <span class="keywordflow">if</span> (!(type7 || type5))
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keywordflow">if</span> (type7)
    <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
  <span class="keywordflow">if</span> (type5)
    <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (type5-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ospf-&gt;<a class="code" href="structospf.html#ad20715ef15a9c610284474aa9f1df3bc">anyNSSA</a>);

  <span class="comment">/* get required data according to what has been given */</span>
  <span class="keywordflow">if</span> (type7 &amp;&amp; type5 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="comment">/* find the translated Type-5 for this Type-7 */</span>
      <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *<a class="code" href="spgrid_8c.html#a1425d79154ffdc9e1fa0e41d6e6c85b8">ext</a> = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *)(type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>);
      <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = 
        { 
          .prefix = type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>,
          .prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (ext-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>),
          .family = AF_INET,
        };

      type5 = <a class="code" href="ospf__asbr_8c.html#ad45c036a67747a7f65338b7ec6ff748d">ospf_external_info_find_lsa</a> (ospf, &amp;p);
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (type5 &amp;&amp; type7 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="comment">/* find the type-7 from which supplied type-5 was translated,</span>
<span class="comment">       * ie find first type-7 with same LSA Id.</span>
<span class="comment">       */</span>
      <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ln, *lnn;
      <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
      <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
      <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
          
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, ln, lnn, area))
        {
          <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> != <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a> 
              &amp;&amp; !type7)
            <span class="keywordflow">continue</span>;
            
          <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#aa704d331d2ac4e4034faca5c0f177364">NSSA_LSDB</a>(area), rn, lsa)
            {
              <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr == type5-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)
                {
                  type7 = lsa;
                  <span class="keywordflow">break</span>;
                }
            }
        }
    }

  <span class="comment">/* do we have type7? */</span>
  <span class="keywordflow">if</span> (!type7)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_translated_nssa_refresh(): no Type-7 found for &quot;</span>
                   <span class="stringliteral">&quot;Type-5 LSA Id %s&quot;</span>,
                   inet_ntoa (type5-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="comment">/* do we have valid translated type5? */</span>
  <span class="keywordflow">if</span> (type5 == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (type5-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>) )
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_translated_nssa_refresh(): No translated Type-5 &quot;</span>
                   <span class="stringliteral">&quot;found for Type-7 with Id %s&quot;</span>,
                   inet_ntoa (type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="comment">/* Delete LSA from neighbor retransmit-list. */</span>
  <a class="code" href="ospf__flood_8c.html#add1aa73829326bf3733d0d442002cb95">ospf_ls_retransmit_delete_nbr_as</a> (ospf, type5);
  
  <span class="comment">/* create new translated LSA */</span>
  <span class="keywordflow">if</span> ( (<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a47659a8de2d310c23ffdb3852c9e3679">ospf_lsa_translated_nssa_new</a> (ospf, type7)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_translated_nssa_refresh(): Could not translate &quot;</span>
                   <span class="stringliteral">&quot;Type-7 for %s to Type-5&quot;</span>,
                   inet_ntoa (type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <span class="keywordflow">if</span> ( !(<span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>)) )
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_translated_nssa_refresh(): Could not install &quot;</span>
                   <span class="stringliteral">&quot;translated LSA, Id %s&quot;</span>,
                   inet_ntoa (type7-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
      <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  
  <span class="comment">/* Flood LSA through area. */</span>
  <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a933091398aaec2e2fd8f491a75de49ad"></a><!-- doxytag: member="ospf_lsa.c::router_lsa_flags" ref="a933091398aaec2e2fd8f491a75de49ad" args="(struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static u_char router_lsa_flags </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00389">389</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char <a class="code" href="structflags.html">flags</a>;

  flags = area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#a435f2a4e7119f86c682366f6319ce64f">flags</a>;

  <span class="comment">/* Set virtual link flag. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8c.html#a93d2e8b88095d3bf655211da23f5069f">ospf_full_virtual_nbrs</a> (area))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="ospf__lsa_8h.html#ad4c4e0d4e06fdc774a8959655d3687d2">ROUTER_LSA_VIRTUAL</a>);
  <span class="keywordflow">else</span>
    <span class="comment">/* Just sanity check */</span>
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (flags, <a class="code" href="ospf__lsa_8h.html#ad4c4e0d4e06fdc774a8959655d3687d2">ROUTER_LSA_VIRTUAL</a>);

  <span class="comment">/* Set Shortcut ABR behabiour flag. */</span>
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (flags, <a class="code" href="ospf__lsa_8h.html#ae763d55031a619d49a3b9dc7dbdbed15">ROUTER_LSA_SHORTCUT</a>);
  <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#ad1c5b3263ee1326f5720d0d09bfce53c">abr_type</a> == <a class="code" href="ospfd_8h.html#a9dae55988b0aa4f2ec2a954209ec0630">OSPF_ABR_SHORTCUT</a>)
    <span class="keywordflow">if</span> (!<a class="code" href="ospfd_8h.html#a62518cec4ea9ee2a4db410d3c42b23f7">OSPF_IS_AREA_BACKBONE</a> (area))
      <span class="keywordflow">if</span> ((area-&gt;<a class="code" href="structospf__area.html#ac5b177716c810e517f0aacbdbe68a6e4">shortcut_configured</a> == <a class="code" href="ospfd_8h.html#a830dd703d89739f72962f5d4ccd8929d">OSPF_SHORTCUT_DEFAULT</a> &amp;&amp;
       area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) ||
      area-&gt;<a class="code" href="structospf__area.html#ac5b177716c810e517f0aacbdbe68a6e4">shortcut_configured</a> == <a class="code" href="ospfd_8h.html#a273346a3fce6d90abaf85c6b57c3d17b">OSPF_SHORTCUT_ENABLE</a>)
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="ospf__lsa_8h.html#ae763d55031a619d49a3b9dc7dbdbed15">ROUTER_LSA_SHORTCUT</a>);

  <span class="comment">/* ASBR can&#39;t exit in stub area. */</span>
  <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a34e738eee2ef9dfcea3d7f31d36de08c">OSPF_AREA_STUB</a>)
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (flags, <a class="code" href="ospf__lsa_8h.html#a050470d5439fd96299124e0debe3444f">ROUTER_LSA_EXTERNAL</a>);
  <span class="comment">/* If ASBR set External flag */</span>
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a98f44a930aaed671a18f2ca6b1435b2f">IS_OSPF_ASBR</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="ospf__lsa_8h.html#a050470d5439fd96299124e0debe3444f">ROUTER_LSA_EXTERNAL</a>);

  <span class="comment">/* Set ABR dependent flags */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a66c6ce8df7e5b79426d9eca9f8ef6d27">IS_OSPF_ABR</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags,  <a class="code" href="ospf__lsa_8h.html#a209278297866e72da9d2f58dd83b17af">ROUTER_LSA_BORDER</a>);
      <span class="comment">/* If Area is NSSA and we are both ABR and unconditional translator, </span>
<span class="comment">       * set Nt bit to inform other routers.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> ( (area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a>)
           &amp;&amp; (area-&gt;<a class="code" href="structospf__area.html#a42f4ce1b9291935fc71a30d93049d588">NSSATranslatorRole</a> == <a class="code" href="ospfd_8h.html#a961ac1771b39d1a78dcfa6a0ac084d79">OSPF_NSSA_ROLE_ALWAYS</a>))
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="ospf__lsa_8h.html#a0de58a5368b872addf7bad6fee7805da">ROUTER_LSA_NT</a>);
    }
  <span class="keywordflow">return</span> flags;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab3f0e4fff2defbc5bfa40bd93a1666d4"></a><!-- doxytag: member="ospf_lsa.c::router_lsa_link_set" ref="ab3f0e4fff2defbc5bfa40bd93a1666d4" args="(struct stream *s, struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int router_lsa_link_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00658">658</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  <span class="keywordtype">int</span> links = 0;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (area-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, node, oi))
    {
      <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp = oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>;

      <span class="comment">/* Check interface is up, OSPF is enable. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
    {
      <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> != <a class="code" href="ospf__ism_8h.html#ad66e19ab772d9038c5f31fad74cfa113">ISM_Down</a>)
        {
          <span class="comment">/* Describe each link. */</span>
          <span class="keywordflow">switch</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a>)
        {
        <span class="keywordflow">case</span> <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>:
          links += <a class="code" href="ospf__lsa_8c.html#a196e7121aca3f53251fdeaa8425994e3">lsa_link_ptop_set</a> (s, oi);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="ospf__interface_8h.html#a6c044d3118d79d243c1547176a4c5281">OSPF_IFTYPE_BROADCAST</a>:
          links += <a class="code" href="ospf__lsa_8c.html#ae47062e5fa5b505800c03d4d96358361">lsa_link_broadcast_set</a> (s, oi);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>:
          links += <a class="code" href="ospf__lsa_8c.html#ac2cb28246e80b6521fdcf3a6f87cdae8">lsa_link_nbma_set</a> (s, oi);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="ospf__interface_8h.html#aa65cd67781b9573131ead326b8976194">OSPF_IFTYPE_POINTOMULTIPOINT</a>:
          links += <a class="code" href="ospf__lsa_8c.html#a95fd223fe6478011b2f5b4c50aaceb6e">lsa_link_ptomp_set</a> (s, oi);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>:
          links += <a class="code" href="ospf__lsa_8c.html#a48e981fec8f06ea064d6a2c4a691489d">lsa_link_virtuallink_set</a> (s, oi);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="ospf__interface_8h.html#ad1bc5e92d8d0f8c50fc99ec0ae3f1772">OSPF_IFTYPE_LOOPBACK</a>:
          links += <a class="code" href="ospf__lsa_8c.html#a3f7f68ba3b8a37ab599b08048b0dee35">lsa_link_loopback_set</a> (s, oi); 
        }
        }
    }
    }

  <span class="keywordflow">return</span> links;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac8877b96dfac044bed2f32c1aa23b0ce"></a><!-- doxytag: member="ospf_lsa.c::stream_put_ospf_metric" ref="ac8877b96dfac044bed2f32c1aa23b0ce" args="(struct stream *s, u_int32_t metric_value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void stream_put_ospf_metric </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>metric_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l01208">1208</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t <a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a>;
  <span class="keywordtype">char</span> *mp;

  <span class="comment">/* Put 0 metric. TOS metric is not supported. */</span>
  metric = htonl (<a class="code" href="ospf__lsa_8c.html#aebf4067916a42ca176b32e7dbb15621d">metric_value</a>);
  mp = (<span class="keywordtype">char</span> *) &amp;metric;
  mp++;
  <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, mp, 3);
}
</pre></div>
</div>
</div>
<a class="anchor" id="afde7d7c24e44ef9a87c68f81dad2bc16"></a><!-- doxytag: member="ospf_lsa.c::tv_add" ref="afde7d7c24e44ef9a87c68f81dad2bc16" args="(struct timeval a, struct timeval b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval tv_add </td>
          <td>(</td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00111">111</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval ret;

  ret.tv_sec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec + <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_sec;
  ret.tv_usec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec + <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_usec;

  <span class="keywordflow">return</span> <a class="code" href="ospf__lsa_8c.html#ace21ae195421265bf16acf3d6d07f32b">tv_adjust</a> (ret);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ace21ae195421265bf16acf3d6d07f32b"></a><!-- doxytag: member="ospf_lsa.c::tv_adjust" ref="ace21ae195421265bf16acf3d6d07f32b" args="(struct timeval a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval tv_adjust </td>
          <td>(</td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00066">66</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">while</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec &gt;= 1000000)
    {
      <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec -= 1000000;
      <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec++;
    }

  <span class="keywordflow">while</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec &lt; 0)
    {
      <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec += 1000000;
      <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec--;
    }

  <span class="keywordflow">return</span> <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3d712873cc4897fcc355a0c65e4e7009"></a><!-- doxytag: member="ospf_lsa.c::tv_ceil" ref="a3d712873cc4897fcc355a0c65e4e7009" args="(struct timeval a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int tv_ceil </td>
          <td>(</td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00084">84</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a> = <a class="code" href="ospf__lsa_8c.html#ace21ae195421265bf16acf3d6d07f32b">tv_adjust</a> (a);

  <span class="keywordflow">return</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec ? <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec + 1 : <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5ba57790910a88ececacfd1d3f69538c"></a><!-- doxytag: member="ospf_lsa.c::tv_cmp" ref="a5ba57790910a88ececacfd1d3f69538c" args="(struct timeval a, struct timeval b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int tv_cmp </td>
          <td>(</td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00133">133</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (<a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec == <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_sec ?
      <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_usec : <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_sec);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac65f591e95cfd07e00f945e86cb3d470"></a><!-- doxytag: member="ospf_lsa.c::tv_floor" ref="ac65f591e95cfd07e00f945e86cb3d470" args="(struct timeval a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int tv_floor </td>
          <td>(</td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00092">92</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a> = <a class="code" href="ospf__lsa_8c.html#ace21ae195421265bf16acf3d6d07f32b">tv_adjust</a> (a);

  <span class="keywordflow">return</span> <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aaa9daa06f817fbcc8ff12657aeb5996c"></a><!-- doxytag: member="ospf_lsa.c::tv_sub" ref="aaa9daa06f817fbcc8ff12657aeb5996c" args="(struct timeval a, struct timeval b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval tv_sub </td>
          <td>(</td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct timeval&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__lsa_8c_source.html#l00122">122</a> of file <a class="el" href="ospf__lsa_8c_source.html">ospf_lsa.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>timeval ret;

  ret.tv_sec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_sec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_sec;
  ret.tv_usec = <a class="code" href="ripng__nexthop_8h.html#aa9b8e98b3989bdffd7f36b281c72a693">a</a>.tv_usec - <a class="code" href="ripng__nexthop_8h.html#a337ad8a7e52da2d584c2018f2ec2c81e">b</a>.tv_usec;

  <span class="keywordflow">return</span> <a class="code" href="ospf__lsa_8c.html#ace21ae195421265bf16acf3d6d07f32b">tv_adjust</a> (ret);
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__lsa_8c.html">ospf_lsa.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:29 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
