<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_flood.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__flood_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ospfd/ospf_flood.c</div>  </div>
</div>
<div class="contents">
<a href="ospf__flood_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * OSPF Flooding -- RFC2328 Section 13.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1999, 2000 Toshiaki Takada</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> * </span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published</span>
<a name="l00009"></a>00009 <span class="comment"> * by the Free Software Foundation; either version 2, or (at your</span>
<a name="l00010"></a>00010 <span class="comment"> * option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the</span>
<a name="l00019"></a>00019 <span class="comment"> * Free Software Foundation, Inc., 59 Temple Place - Suite 330,</span>
<a name="l00020"></a>00020 <span class="comment"> * Boston, MA 02111-1307, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="zclient_8h.html">zclient.h</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="ospfd_8h.html">ospfd/ospfd.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="ospf__interface_8h.html">ospfd/ospf_interface.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ism_8h.html">ospfd/ospf_ism.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="ospf__asbr_8h.html">ospfd/ospf_asbr.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsa_8h.html">ospfd/ospf_lsa.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsdb_8h.html">ospfd/ospf_lsdb.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="ospf__neighbor_8h.html">ospfd/ospf_neighbor.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="ospf__nsm_8h.html">ospfd/ospf_nsm.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="ospf__spf_8h.html">ospfd/ospf_spf.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="ospf__flood_8h.html">ospfd/ospf_flood.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="ospf__packet_8h.html">ospfd/ospf_packet.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="ospf__abr_8h.html">ospfd/ospf_abr.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="ospf__route_8h.html">ospfd/ospf_route.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="ospf__zebra_8h.html">ospfd/ospf_zebra.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="ospf__dump_8h.html">ospfd/ospf_dump.h</a>&quot;</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzclient.html">zclient</a> *<a class="code" href="bgp__zebra_8c.html#abe1502972ba9aa40adc080e419c496bf">zclient</a>;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">/* Do the LSA acking specified in table 19, Section 13.5, row 2</span>
<a name="l00054"></a>00054 <span class="comment"> * This get called from ospf_flood_out_interface. Declared inline </span>
<a name="l00055"></a>00055 <span class="comment"> * for speed. */</span>
<a name="l00056"></a>00056 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00057"></a><a class="code" href="ospf__flood_8c.html#ad5f4da4984c6453f549c42e5ebfec281">00057</a> <a class="code" href="ospf__flood_8c.html#ad5f4da4984c6453f549c42e5ebfec281">ospf_flood_delayed_lsa_ack</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *inbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059   <span class="comment">/* LSA is more recent than database copy, but was not</span>
<a name="l00060"></a>00060 <span class="comment">     flooded back out receiving interface.  Delayed</span>
<a name="l00061"></a>00061 <span class="comment">     acknowledgment sent. If interface is in Backup state</span>
<a name="l00062"></a>00062 <span class="comment">     delayed acknowledgment sent only if advertisement</span>
<a name="l00063"></a>00063 <span class="comment">     received from Designated Router, otherwise do nothing See</span>
<a name="l00064"></a>00064 <span class="comment">     RFC 2328 Section 13.5 */</span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066   <span class="comment">/* Whether LSA is more recent or not, and whether this is in</span>
<a name="l00067"></a>00067 <span class="comment">     response to the LSA being sent out recieving interface has been </span>
<a name="l00068"></a>00068 <span class="comment">     worked out previously */</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070   <span class="comment">/* Deal with router as BDR */</span>
<a name="l00071"></a>00071   <span class="keywordflow">if</span> (inbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a3676782add5a8ecdb86981965ef9f37e">ISM_Backup</a> &amp;&amp; ! <a class="code" href="ospf__neighbor_8h.html#ad422e372f51656c4649d96641b24f6e0">NBR_IS_DR</a> (inbr))
<a name="l00072"></a>00072     <span class="keywordflow">return</span>;
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   <span class="comment">/* Schedule a delayed LSA Ack to be sent */</span> 
<a name="l00075"></a>00075   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (inbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>, <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa)); <span class="comment">/* delayed LSA Ack */</span>
<a name="l00076"></a>00076 }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">/* Check LSA is related to external info. */</span>
<a name="l00079"></a>00079 <span class="keyword">struct </span><a class="code" href="structexternal__info.html">external_info</a> *
<a name="l00080"></a><a class="code" href="ospf__flood_8h.html#a6bd7b22bfe8e596a210bd7564ab6bb68">00080</a> <a class="code" href="ospf__flood_8c.html#a28fc4c5b15a10f380b4d1f79924ad3f5">ospf_external_info_check</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00081"></a>00081 {
<a name="l00082"></a>00082   <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *<a class="code" href="spgrid_8c.html#a7c4593313d1839d57c28594a69357bab">al</a>;
<a name="l00083"></a>00083   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00084"></a>00084   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00085"></a>00085   <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   al = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
<a name="l00088"></a>00088 
<a name="l00089"></a>00089   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00090"></a>00090   p.prefix = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>;
<a name="l00091"></a>00091   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (al-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>);
<a name="l00092"></a>00092 
<a name="l00093"></a>00093   <span class="keywordflow">for</span> (type = 0; type &lt;= <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; type++)
<a name="l00094"></a>00094     {
<a name="l00095"></a>00095       <span class="keywordtype">int</span> <a class="code" href="rip__zebra_8c.html#a6de0063d659a004efdd2c263e76b7721">redist_type</a> = <a class="code" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> (&amp;p) ? <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a> : <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00096"></a>00096       <span class="keywordflow">if</span> (<a class="code" href="ospf__zebra_8c.html#a0b61d95e6baf19bdd9d8a7705788a226">ospf_is_type_redistributed</a> (redist_type))
<a name="l00097"></a>00097     <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a> (type))
<a name="l00098"></a>00098       {
<a name="l00099"></a>00099         rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a> (type),
<a name="l00100"></a>00100                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00101"></a>00101         <span class="keywordflow">if</span> (rn)
<a name="l00102"></a>00102           {
<a name="l00103"></a>00103         <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00104"></a>00104         <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00105"></a>00105           <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structexternal__info.html">external_info</a> *) rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00106"></a>00106           }
<a name="l00107"></a>00107       }
<a name="l00108"></a>00108     }
<a name="l00109"></a>00109 
<a name="l00110"></a>00110   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00114"></a><a class="code" href="ospf__flood_8c.html#a6adc4ff40641399b21c1007c9dd14c47">00114</a> <a class="code" href="ospf__flood_8c.html#a6adc4ff40641399b21c1007c9dd14c47">ospf_process_self_originated_lsa</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>,
<a name="l00115"></a>00115                   <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>, <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>)
<a name="l00116"></a>00116 {
<a name="l00117"></a>00117   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00118"></a>00118   <span class="keyword">struct </span><a class="code" href="structexternal__info.html">external_info</a> *ei;
<a name="l00119"></a>00119   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00120"></a>00120   
<a name="l00121"></a>00121   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00122"></a>00122     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Process self-originated LSA seq 0x%x&quot;</span>,
<a name="l00123"></a>00123            new-&gt;data-&gt;type, inet_ntoa (new-&gt;data-&gt;id), 
<a name="l00124"></a>00124            ntohl(new-&gt;data-&gt;ls_seqnum));
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">/* If we&#39;re here, we installed a self-originated LSA that we received</span>
<a name="l00127"></a>00127 <span class="comment">     from a neighbor, i.e. it&#39;s more recent.  We must see whether we want</span>
<a name="l00128"></a>00128 <span class="comment">     to originate it.</span>
<a name="l00129"></a>00129 <span class="comment">     If yes, we should use this LSA&#39;s sequence number and reoriginate</span>
<a name="l00130"></a>00130 <span class="comment">     a new instance.</span>
<a name="l00131"></a>00131 <span class="comment">     if not --- we must flush this LSA from the domain. */</span>
<a name="l00132"></a>00132   <span class="keywordflow">switch</span> (new-&gt;data-&gt;type)
<a name="l00133"></a>00133     {
<a name="l00134"></a>00134     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>:
<a name="l00135"></a>00135       <span class="comment">/* Originate a new instance and schedule flooding */</span>
<a name="l00136"></a>00136       <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>)
<a name="l00137"></a>00137     area-&gt;<a class="code" href="structospf__area.html#a53c30c4d48396f97336cf4e1ae4545e2">router_lsa_self</a>-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a> = <span class="keyword">new</span>-&gt;data-&gt;ls_seqnum;
<a name="l00138"></a>00138       <a class="code" href="ospf__lsa_8c.html#a66ad8a1fd151b43b11d7ec9650a644bf">ospf_router_lsa_timer_add</a> (area);
<a name="l00139"></a>00139       <span class="keywordflow">return</span>;
<a name="l00140"></a>00140     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>:
<a name="l00141"></a>00141 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00142"></a>00142 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l00143"></a>00143 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00144"></a>00144       <span class="comment">/* We must find the interface the LSA could belong to.</span>
<a name="l00145"></a>00145 <span class="comment">     If the interface is no more a broadcast type or we are no more</span>
<a name="l00146"></a>00146 <span class="comment">     the DR, we flush the LSA otherwise -- create the new instance and</span>
<a name="l00147"></a>00147 <span class="comment">     schedule flooding. */</span>
<a name="l00148"></a>00148 
<a name="l00149"></a>00149       <span class="comment">/* Look through all interfaces, not just area, since interface</span>
<a name="l00150"></a>00150 <span class="comment">     could be moved from one area to another. */</span>
<a name="l00151"></a>00151       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
<a name="l00152"></a>00152     <span class="comment">/* These are sanity check. */</span>
<a name="l00153"></a>00153         <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;new-&gt;data-&gt;id))
<a name="l00154"></a>00154           {
<a name="l00155"></a>00155             <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a> != area ||
<a name="l00156"></a>00156                 oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a6c044d3118d79d243c1547176a4c5281">OSPF_IFTYPE_BROADCAST</a> ||
<a name="l00157"></a>00157                 !<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;<a class="code" href="ospf__interface_8h.html#aa84a7dde76ac0a31898992d050858ec5">DR</a> (oi)))
<a name="l00158"></a>00158               {
<a name="l00159"></a>00159                 <a class="code" href="ospf__lsa_8c.html#a213c8ef3aeb0ac504641c617397fda07">ospf_schedule_lsa_flush_area</a> (area, <span class="keyword">new</span>);
<a name="l00160"></a>00160                 <span class="keywordflow">return</span>;
<a name="l00161"></a>00161               }
<a name="l00162"></a>00162             
<a name="l00163"></a>00163 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span>            <span class="keywordflow">if</span> (new-&gt;data-&gt;type == <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>)
<a name="l00165"></a>00165               {
<a name="l00166"></a>00166                 <a class="code" href="ospf__opaque_8h.html#a5d47cc4e0de52b67511124fcb5aa2be5">ospf_opaque_lsa_refresh</a> (<span class="keyword">new</span>);
<a name="l00167"></a>00167                 <span class="keywordflow">return</span>;
<a name="l00168"></a>00168               }
<a name="l00169"></a>00169 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00170"></a>00170 
<a name="l00171"></a>00171             <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>)
<a name="l00172"></a>00172           oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a> = <span class="keyword">new</span>-&gt;data-&gt;ls_seqnum;
<a name="l00173"></a>00173             <span class="comment">/* Schedule network-LSA origination. */</span>
<a name="l00174"></a>00174             <a class="code" href="ospf__lsa_8c.html#a42678c90c94d537b3d9c905d4685e2c5">ospf_network_lsa_timer_add</a> (oi);
<a name="l00175"></a>00175             <span class="keywordflow">return</span>;
<a name="l00176"></a>00176           }
<a name="l00177"></a>00177       <span class="keywordflow">break</span>;
<a name="l00178"></a>00178     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>:
<a name="l00179"></a>00179     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>:
<a name="l00180"></a>00180       <a class="code" href="ospf__abr_8c.html#a1ff6c727604d00c49b9c4a26131e5462">ospf_schedule_abr_task</a> (ospf);
<a name="l00181"></a>00181       <span class="keywordflow">break</span>;
<a name="l00182"></a>00182     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a> :
<a name="l00183"></a>00183     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
<a name="l00184"></a>00184        <span class="keywordflow">if</span> ( (new-&gt;data-&gt;type == <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>)
<a name="l00185"></a>00185              &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>))
<a name="l00186"></a>00186          {
<a name="l00187"></a>00187            <a class="code" href="ospf__lsa_8c.html#aa870c13f8cc5f9f7243bf1d73278d1d5">ospf_translated_nssa_refresh</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <span class="keyword">new</span>);
<a name="l00188"></a>00188            <span class="keywordflow">return</span>;
<a name="l00189"></a>00189          }
<a name="l00190"></a>00190       ei = <a class="code" href="ospf__flood_8c.html#a28fc4c5b15a10f380b4d1f79924ad3f5">ospf_external_info_check</a> (<span class="keyword">new</span>);
<a name="l00191"></a>00191       <span class="keywordflow">if</span> (ei)
<a name="l00192"></a>00192         <a class="code" href="ospf__lsa_8c.html#a12f57ed226cea2cfd9499069dbde2f3c">ospf_external_lsa_refresh</a> (ospf, <span class="keyword">new</span>, ei, <a class="code" href="ospf__lsa_8h.html#a389234e05af4a29be76c63dc46576791">LSA_REFRESH_FORCE</a>);
<a name="l00193"></a>00193       <span class="keywordflow">else</span>
<a name="l00194"></a>00194         <a class="code" href="ospf__flood_8c.html#a68d550b90a6cd775d965f6e8f9309863">ospf_lsa_flush_as</a> (ospf, <span class="keyword">new</span>);
<a name="l00195"></a>00195       <span class="keywordflow">break</span>;
<a name="l00196"></a>00196 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l00198"></a>00198       <a class="code" href="ospf__opaque_8h.html#a5d47cc4e0de52b67511124fcb5aa2be5">ospf_opaque_lsa_refresh</a> (<span class="keyword">new</span>);
<a name="l00199"></a>00199       <span class="keywordflow">break</span>;
<a name="l00200"></a>00200     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l00201"></a>00201       <a class="code" href="ospf__opaque_8h.html#a5d47cc4e0de52b67511124fcb5aa2be5">ospf_opaque_lsa_refresh</a> (<span class="keyword">new</span>); <span class="comment">/* Reconsideration may needed. */</span><span class="comment">/* XXX */</span>
<a name="l00202"></a>00202       <span class="keywordflow">break</span>;
<a name="l00203"></a>00203 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00204"></a>00204     <span class="keywordflow">default</span>:
<a name="l00205"></a>00205       <span class="keywordflow">break</span>;
<a name="l00206"></a>00206     }
<a name="l00207"></a>00207 }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 <span class="comment">/* OSPF LSA flooding -- RFC2328 Section 13.(5). */</span>
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 <span class="comment">/* Now Updated for NSSA operation, as follows:</span>
<a name="l00212"></a>00212 <span class="comment"></span>
<a name="l00213"></a>00213 <span class="comment"></span>
<a name="l00214"></a>00214 <span class="comment">    Type-5&#39;s have no change.  Blocked to STUB or NSSA.</span>
<a name="l00215"></a>00215 <span class="comment"></span>
<a name="l00216"></a>00216 <span class="comment">    Type-7&#39;s can be received, and if a DR</span>
<a name="l00217"></a>00217 <span class="comment">    they will also flood the local NSSA Area as Type-7&#39;s</span>
<a name="l00218"></a>00218 <span class="comment"></span>
<a name="l00219"></a>00219 <span class="comment">    If a Self-Originated LSA (now an ASBR), </span>
<a name="l00220"></a>00220 <span class="comment">    The LSDB will be updated as Type-5&#39;s, (for continual re-fresh)</span>
<a name="l00221"></a>00221 <span class="comment"></span>
<a name="l00222"></a>00222 <span class="comment">        If an NSSA-IR it is installed/flooded as Type-7, P-bit on.</span>
<a name="l00223"></a>00223 <span class="comment">        if an NSSA-ABR it is installed/flooded as Type-7, P-bit off.</span>
<a name="l00224"></a>00224 <span class="comment"></span>
<a name="l00225"></a>00225 <span class="comment">    Later, during the ABR TASK, if the ABR is the Elected NSSA</span>
<a name="l00226"></a>00226 <span class="comment">    translator, then All Type-7s (with P-bit ON) are Translated to</span>
<a name="l00227"></a>00227 <span class="comment">    Type-5&#39;s and flooded to all non-NSSA/STUB areas.</span>
<a name="l00228"></a>00228 <span class="comment"></span>
<a name="l00229"></a>00229 <span class="comment">    During ASE Calculations, </span>
<a name="l00230"></a>00230 <span class="comment">        non-ABRs calculate external routes from Type-7&#39;s</span>
<a name="l00231"></a>00231 <span class="comment">        ABRs calculate external routes from Type-5&#39;s and non-self Type-7s</span>
<a name="l00232"></a>00232 <span class="comment">*/</span>
<a name="l00233"></a>00233 <span class="keywordtype">int</span>
<a name="l00234"></a><a class="code" href="ospf__flood_8h.html#a1d6b0d6cd950a6f1610ea2fa86c6cc49">00234</a> <a class="code" href="ospf__flood_8c.html#a3163fd032113f23c9df7f9c3ec40c560">ospf_flood</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr,
<a name="l00235"></a>00235         <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *current, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>)
<a name="l00236"></a>00236 {
<a name="l00237"></a>00237   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00238"></a>00238   <span class="keywordtype">int</span> lsa_ack_flag;
<a name="l00239"></a>00239 
<a name="l00240"></a>00240   <span class="comment">/* Type-7 LSA&#39;s will be flooded throughout their native NSSA area,</span>
<a name="l00241"></a>00241 <span class="comment">     but will also be flooded as Type-5&#39;s into ABR capable links.  */</span>
<a name="l00242"></a>00242 
<a name="l00243"></a>00243   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00244"></a>00244     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Flooding]: start, NBR %s (%s), cur(%p), New-LSA[%s]&quot;</span>,
<a name="l00245"></a>00245                inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>),
<a name="l00246"></a>00246                <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#a7addd69d09415cd935c591a40b74ac46">ospf_nsm_state_msg</a>, nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>),
<a name="l00247"></a>00247                current,
<a name="l00248"></a>00248                <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (<span class="keyword">new</span>));
<a name="l00249"></a>00249 
<a name="l00250"></a>00250   lsa_ack_flag = 0;
<a name="l00251"></a>00251   oi = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>;
<a name="l00252"></a>00252 
<a name="l00253"></a>00253   <span class="comment">/* If there is already a database copy, and if the</span>
<a name="l00254"></a>00254 <span class="comment">     database copy was received via flooding and installed less</span>
<a name="l00255"></a>00255 <span class="comment">     than MinLSArrival seconds ago, discard the new LSA</span>
<a name="l00256"></a>00256 <span class="comment">     (without acknowledging it). */</span>
<a name="l00257"></a>00257   <span class="keywordflow">if</span> (current != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)      <span class="comment">/* -- endo. */</span>
<a name="l00258"></a>00258     {
<a name="l00259"></a>00259       <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (current)
<a name="l00260"></a>00260       &amp;&amp; (ntohs (current-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a>)    == 0
<a name="l00261"></a>00261       &amp;&amp;  ntohl (current-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>) == <a class="code" href="ospfd_8h.html#affb6c878aa462ae5de5e5db70631482d">OSPF_INITIAL_SEQUENCE_NUMBER</a>))
<a name="l00262"></a>00262         {
<a name="l00263"></a>00263           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00264"></a>00264         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Flooding]: Got a self-originated LSA, &quot;</span>
<a name="l00265"></a>00265                <span class="stringliteral">&quot;while local one is initial instance.&quot;</span>);
<a name="l00266"></a>00266           ; <span class="comment">/* Accept this LSA for quick LSDB resynchronization. */</span>
<a name="l00267"></a>00267         }
<a name="l00268"></a>00268       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a5ba57790910a88ececacfd1d3f69538c">tv_cmp</a> (<a class="code" href="ospf__lsa_8c.html#aaa9daa06f817fbcc8ff12657aeb5996c">tv_sub</a> (<a class="code" href="thread_8c.html#a010d58e49a3c74ae856d5cd111f7eb62">recent_relative_time</a> (), current-&gt;<a class="code" href="structospf__lsa.html#a2bd331d17d54cdfcec251473668346da">tv_recv</a>),
<a name="l00269"></a>00269                    <a class="code" href="ospf__lsa_8c.html#a2543635ecb435d64f2b40f9cfdf75fc5">int2tv</a> (<a class="code" href="ospfd_8h.html#ae567e64e4e08a38164953b22f9603bfc">OSPF_MIN_LS_ARRIVAL</a>)) &lt; 0)
<a name="l00270"></a>00270         {
<a name="l00271"></a>00271           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00272"></a>00272         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Flooding]: LSA is received recently.&quot;</span>);
<a name="l00273"></a>00273           <span class="keywordflow">return</span> -1;
<a name="l00274"></a>00274         }
<a name="l00275"></a>00275     }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277   <span class="comment">/* Flood the new LSA out some subset of the router&#39;s interfaces.</span>
<a name="l00278"></a>00278 <span class="comment">     In some cases (e.g., the state of the receiving interface is</span>
<a name="l00279"></a>00279 <span class="comment">     DR and the LSA was received from a router other than the</span>
<a name="l00280"></a>00280 <span class="comment">     Backup DR) the LSA will be flooded back out the receiving</span>
<a name="l00281"></a>00281 <span class="comment">     interface. */</span>
<a name="l00282"></a>00282   lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#a32ab724834b131f44a7756bb220d14ac">ospf_flood_through</a> (ospf, nbr, <span class="keyword">new</span>);
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00285"></a>00285 <span class="preprocessor"></span>  <span class="comment">/* Remove the current database copy from all neighbors&#39; Link state</span>
<a name="l00286"></a>00286 <span class="comment">     retransmission lists.  AS_EXTERNAL and AS_EXTERNAL_OPAQUE does</span>
<a name="l00287"></a>00287 <span class="comment">                                        ^^^^^^^^^^^^^^^^^^^^^^^</span>
<a name="l00288"></a>00288 <span class="comment">     not have area ID.</span>
<a name="l00289"></a>00289 <span class="comment">     All other (even NSSA&#39;s) do have area ID.  */</span>
<a name="l00290"></a>00290 <span class="preprocessor">#else </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00291"></a>00291   <span class="comment">/* Remove the current database copy from all neighbors&#39; Link state</span>
<a name="l00292"></a>00292 <span class="comment">     retransmission lists.  Only AS_EXTERNAL does not have area ID.</span>
<a name="l00293"></a>00293 <span class="comment">     All other (even NSSA&#39;s) do have area ID.  */</span>
<a name="l00294"></a>00294 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00295"></a>00295   <span class="keywordflow">if</span> (current)
<a name="l00296"></a>00296     {
<a name="l00297"></a>00297       <span class="keywordflow">switch</span> (current-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l00298"></a>00298         {
<a name="l00299"></a>00299         <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>:
<a name="l00300"></a>00300 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00301"></a>00301 <span class="preprocessor"></span>        <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l00302"></a>00302 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00303"></a>00303           <a class="code" href="ospf__flood_8c.html#add1aa73829326bf3733d0d442002cb95">ospf_ls_retransmit_delete_nbr_as</a> (ospf, current);
<a name="l00304"></a>00304           <span class="keywordflow">break</span>;
<a name="l00305"></a>00305         <span class="keywordflow">default</span>:
<a name="l00306"></a>00306           <a class="code" href="ospf__flood_8c.html#a8f46211a0fe7065405e8bdda81963204">ospf_ls_retransmit_delete_nbr_area</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, current);
<a name="l00307"></a>00307           <span class="keywordflow">break</span>;
<a name="l00308"></a>00308         }
<a name="l00309"></a>00309     }
<a name="l00310"></a>00310 
<a name="l00311"></a>00311   <span class="comment">/* Do some internal house keeping that is needed here */</span>
<a name="l00312"></a>00312   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (new-&gt;flags, <a class="code" href="ospf__lsa_8h.html#a780906236e4b5ef16a4a720a57e3f617">OSPF_LSA_RECEIVED</a>);
<a name="l00313"></a>00313   <a class="code" href="ospf__lsa_8c.html#ad430a0bdeae46dc78ef311cf2c511bad">ospf_lsa_is_self_originated</a> (ospf, <span class="keyword">new</span>); <span class="comment">/* Let it set the flag */</span>
<a name="l00314"></a>00314 
<a name="l00315"></a>00315   <span class="comment">/* Install the new LSA in the link state database</span>
<a name="l00316"></a>00316 <span class="comment">     (replacing the current database copy).  This may cause the</span>
<a name="l00317"></a>00317 <span class="comment">     routing table calculation to be scheduled.  In addition,</span>
<a name="l00318"></a>00318 <span class="comment">     timestamp the new LSA with the current time.  The flooding</span>
<a name="l00319"></a>00319 <span class="comment">     procedure cannot overwrite the newly installed LSA until</span>
<a name="l00320"></a>00320 <span class="comment">     MinLSArrival seconds have elapsed. */</span>  
<a name="l00321"></a>00321 
<a name="l00322"></a>00322   <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#a1733ac6eff32161699d5e9d80a893351">ospf_lsa_install</a> (ospf, nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>, <span class="keyword">new</span>);
<a name="l00323"></a>00323 
<a name="l00324"></a>00324   <span class="comment">/* Acknowledge the receipt of the LSA by sending a Link State</span>
<a name="l00325"></a>00325 <span class="comment">     Acknowledgment packet back out the receiving interface. */</span>
<a name="l00326"></a>00326   <span class="keywordflow">if</span> (lsa_ack_flag)
<a name="l00327"></a>00327     <a class="code" href="ospf__flood_8c.html#ad5f4da4984c6453f549c42e5ebfec281">ospf_flood_delayed_lsa_ack</a> (nbr, <span class="keyword">new</span>);     
<a name="l00328"></a>00328 
<a name="l00329"></a>00329   <span class="comment">/* If this new LSA indicates that it was originated by the</span>
<a name="l00330"></a>00330 <span class="comment">     receiving router itself, the router must take special action,</span>
<a name="l00331"></a>00331 <span class="comment">     either updating the LSA or in some cases flushing it from</span>
<a name="l00332"></a>00332 <span class="comment">     the routing domain. */</span>
<a name="l00333"></a>00333   <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#ad430a0bdeae46dc78ef311cf2c511bad">ospf_lsa_is_self_originated</a> (ospf, <span class="keyword">new</span>))
<a name="l00334"></a>00334     <a class="code" href="ospf__flood_8c.html#a6adc4ff40641399b21c1007c9dd14c47">ospf_process_self_originated_lsa</a> (ospf, <span class="keyword">new</span>, oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>);
<a name="l00335"></a>00335   <span class="keywordflow">else</span>
<a name="l00336"></a>00336     <span class="comment">/* Update statistics value for OSPF-MIB. */</span>
<a name="l00337"></a>00337     ospf-&gt;<a class="code" href="structospf.html#a9a1f25184f2f198f43b23b1b94f63060">rx_lsa_count</a>++;
<a name="l00338"></a>00338 
<a name="l00339"></a>00339   <span class="keywordflow">return</span> 0;
<a name="l00340"></a>00340 }
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 <span class="comment">/* OSPF LSA flooding -- RFC2328 Section 13.3. */</span>
<a name="l00343"></a>00343 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00344"></a><a class="code" href="ospf__flood_8c.html#a8beea81565f86a66155c1daacd90c3db">00344</a> <a class="code" href="ospf__flood_8c.html#a8beea81565f86a66155c1daacd90c3db">ospf_flood_through_interface</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi,
<a name="l00345"></a>00345                   <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *inbr,
<a name="l00346"></a>00346                   <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00347"></a>00347 {
<a name="l00348"></a>00348   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *onbr;
<a name="l00349"></a>00349   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00350"></a>00350   <span class="keywordtype">int</span> retx_flag;
<a name="l00351"></a>00351 
<a name="l00352"></a>00352   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00353"></a>00353     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_flood_through_interface(): &quot;</span>
<a name="l00354"></a>00354            <span class="stringliteral">&quot;considering int %s, INBR(%s), LSA[%s]&quot;</span>,
<a name="l00355"></a>00355            <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi), inbr ? inet_ntoa (inbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>) : <span class="stringliteral">&quot;NULL&quot;</span>,
<a name="l00356"></a>00356                <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
<a name="l00357"></a>00357 
<a name="l00358"></a>00358   <span class="keywordflow">if</span> (!<a class="code" href="ospf__interface_8c.html#a25678bf88909391ee05583a4e73a838d">ospf_if_is_enable</a> (oi))
<a name="l00359"></a>00359     <span class="keywordflow">return</span> 0;
<a name="l00360"></a>00360 
<a name="l00361"></a>00361   <span class="comment">/* Remember if new LSA is aded to a retransmit list. */</span>
<a name="l00362"></a>00362   retx_flag = 0;
<a name="l00363"></a>00363 
<a name="l00364"></a>00364   <span class="comment">/* Each of the neighbors attached to this interface are examined,</span>
<a name="l00365"></a>00365 <span class="comment">     to determine whether they must receive the new LSA.  The following</span>
<a name="l00366"></a>00366 <span class="comment">     steps are executed for each neighbor: */</span>
<a name="l00367"></a>00367   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00368"></a>00368     {
<a name="l00369"></a>00369       <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *ls_req;
<a name="l00370"></a>00370  
<a name="l00371"></a>00371       <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00372"></a>00372     <span class="keywordflow">continue</span>;
<a name="l00373"></a>00373 
<a name="l00374"></a>00374       onbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00375"></a>00375       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00376"></a>00376     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_flood_through_interface(): considering nbr %s (%s)&quot;</span>,
<a name="l00377"></a>00377            inet_ntoa (onbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>),
<a name="l00378"></a>00378                    <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#a7addd69d09415cd935c591a40b74ac46">ospf_nsm_state_msg</a>, onbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>));
<a name="l00379"></a>00379 
<a name="l00380"></a>00380       <span class="comment">/* If the neighbor is in a lesser state than Exchange, it</span>
<a name="l00381"></a>00381 <span class="comment">     does not participate in flooding, and the next neighbor</span>
<a name="l00382"></a>00382 <span class="comment">     should be examined. */</span>
<a name="l00383"></a>00383       <span class="keywordflow">if</span> (onbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> &lt; <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a>)
<a name="l00384"></a>00384     <span class="keywordflow">continue</span>;
<a name="l00385"></a>00385 
<a name="l00386"></a>00386       <span class="comment">/* If the adjacency is not yet full (neighbor state is</span>
<a name="l00387"></a>00387 <span class="comment">     Exchange or Loading), examine the Link state request</span>
<a name="l00388"></a>00388 <span class="comment">     list associated with this adjacency.  If there is an</span>
<a name="l00389"></a>00389 <span class="comment">     instance of the new LSA on the list, it indicates that</span>
<a name="l00390"></a>00390 <span class="comment">     the neighboring router has an instance of the LSA</span>
<a name="l00391"></a>00391 <span class="comment">     already.  Compare the new LSA to the neighbor&#39;s copy: */</span>
<a name="l00392"></a>00392       <span class="keywordflow">if</span> (onbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> &lt; <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>)
<a name="l00393"></a>00393     {
<a name="l00394"></a>00394       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00395"></a>00395         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_flood_through_interface(): nbr adj is not Full&quot;</span>);
<a name="l00396"></a>00396       ls_req = <a class="code" href="ospf__flood_8c.html#a27c6e0c56e71024a8f2906b22ff31558">ospf_ls_request_lookup</a> (onbr, lsa);
<a name="l00397"></a>00397       <span class="keywordflow">if</span> (ls_req != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00398"></a>00398         {
<a name="l00399"></a>00399           <span class="keywordtype">int</span> ret;
<a name="l00400"></a>00400 
<a name="l00401"></a>00401           ret = <a class="code" href="ospf__lsa_8c.html#a562753a50210d94f439aa232c260d433">ospf_lsa_more_recent</a> (ls_req, lsa);
<a name="l00402"></a>00402           <span class="comment">/* The new LSA is less recent. */</span>
<a name="l00403"></a>00403           <span class="keywordflow">if</span> (ret &gt; 0)
<a name="l00404"></a>00404         <span class="keywordflow">continue</span>;
<a name="l00405"></a>00405           <span class="comment">/* The two copies are the same instance, then delete</span>
<a name="l00406"></a>00406 <span class="comment">         the LSA from the Link state request list. */</span>
<a name="l00407"></a>00407           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ret == 0)
<a name="l00408"></a>00408         {
<a name="l00409"></a>00409           <a class="code" href="ospf__flood_8c.html#a140fef53d3293227a5f51d11580cdcb8">ospf_ls_request_delete</a> (onbr, ls_req);
<a name="l00410"></a>00410           <a class="code" href="ospf__nsm_8c.html#a8c79532418548f4027b82bc41b4ed871">ospf_check_nbr_loading</a> (onbr);
<a name="l00411"></a>00411           <span class="keywordflow">continue</span>;
<a name="l00412"></a>00412         }
<a name="l00413"></a>00413           <span class="comment">/* The new LSA is more recent.  Delete the LSA</span>
<a name="l00414"></a>00414 <span class="comment">         from the Link state request list. */</span>
<a name="l00415"></a>00415           <span class="keywordflow">else</span>
<a name="l00416"></a>00416         {
<a name="l00417"></a>00417           <a class="code" href="ospf__flood_8c.html#a140fef53d3293227a5f51d11580cdcb8">ospf_ls_request_delete</a> (onbr, ls_req);
<a name="l00418"></a>00418           <a class="code" href="ospf__nsm_8c.html#a8c79532418548f4027b82bc41b4ed871">ospf_check_nbr_loading</a> (onbr);
<a name="l00419"></a>00419         }
<a name="l00420"></a>00420         }
<a name="l00421"></a>00421     }
<a name="l00422"></a>00422 
<a name="l00423"></a>00423 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00424"></a>00424 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>))
<a name="l00425"></a>00425         {
<a name="l00426"></a>00426           <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (onbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>))
<a name="l00427"></a>00427             {
<a name="l00428"></a>00428               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
<a name="l00429"></a>00429                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Skip this neighbor: Not Opaque-capable.&quot;</span>);
<a name="l00430"></a>00430               <span class="keywordflow">continue</span>;
<a name="l00431"></a>00431             }
<a name="l00432"></a>00432 
<a name="l00433"></a>00433           <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#a22f5fbb8d8c29a987847ca54159bb24e">IS_OPAQUE_LSA_ORIGINATION_BLOCKED</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;opaque)
<a name="l00434"></a>00434           &amp;&amp;  <a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (lsa)
<a name="l00435"></a>00435           &amp;&amp;  onbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> == <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>)
<a name="l00436"></a>00436             {
<a name="l00437"></a>00437               <span class="comment">/* Small attempt to reduce unnecessary retransmission. */</span>
<a name="l00438"></a>00438               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
<a name="l00439"></a>00439                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Skip this neighbor: Initial flushing done.&quot;</span>);
<a name="l00440"></a>00440               <span class="keywordflow">continue</span>;
<a name="l00441"></a>00441             }
<a name="l00442"></a>00442         }
<a name="l00443"></a>00443 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00444"></a>00444 
<a name="l00445"></a>00445       <span class="comment">/* If the new LSA was received from this neighbor,</span>
<a name="l00446"></a>00446 <span class="comment">     examine the next neighbor. */</span>
<a name="l00447"></a>00447 <span class="preprocessor">#ifdef ORIGINAL_CODING</span>
<a name="l00448"></a>00448 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (inbr)
<a name="l00449"></a>00449     <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;inbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, &amp;onbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>))
<a name="l00450"></a>00450       <span class="keywordflow">continue</span>;
<a name="l00451"></a>00451 <span class="preprocessor">#else </span><span class="comment">/* ORIGINAL_CODING */</span>
<a name="l00452"></a>00452       <span class="keywordflow">if</span> (inbr)
<a name="l00453"></a>00453         {
<a name="l00454"></a>00454           <span class="comment">/*</span>
<a name="l00455"></a>00455 <span class="comment">           * Triggered by LSUpd message parser &quot;ospf_ls_upd ()&quot;.</span>
<a name="l00456"></a>00456 <span class="comment">           * E.g., all LSAs handling here is received via network.</span>
<a name="l00457"></a>00457 <span class="comment">           */</span>
<a name="l00458"></a>00458           <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;inbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, &amp;onbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>))
<a name="l00459"></a>00459             {
<a name="l00460"></a>00460               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
<a name="l00461"></a>00461                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Skip this neighbor: inbr == onbr&quot;</span>);
<a name="l00462"></a>00462               <span class="keywordflow">continue</span>;
<a name="l00463"></a>00463             }
<a name="l00464"></a>00464         }
<a name="l00465"></a>00465       <span class="keywordflow">else</span>
<a name="l00466"></a>00466         {
<a name="l00467"></a>00467           <span class="comment">/*</span>
<a name="l00468"></a>00468 <span class="comment">           * Triggered by MaxAge remover, so far.</span>
<a name="l00469"></a>00469 <span class="comment">           * NULL &quot;inbr&quot; means flooding starts from this node.</span>
<a name="l00470"></a>00470 <span class="comment">           */</span>
<a name="l00471"></a>00471           <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>, &amp;onbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>))
<a name="l00472"></a>00472             {
<a name="l00473"></a>00473               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
<a name="l00474"></a>00474                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Skip this neighbor: lsah-&gt;adv_router == onbr&quot;</span>);
<a name="l00475"></a>00475               <span class="keywordflow">continue</span>;
<a name="l00476"></a>00476             }
<a name="l00477"></a>00477         }
<a name="l00478"></a>00478 <span class="preprocessor">#endif </span><span class="comment">/* ORIGINAL_CODING */</span>
<a name="l00479"></a>00479 
<a name="l00480"></a>00480       <span class="comment">/* Add the new LSA to the Link state retransmission list</span>
<a name="l00481"></a>00481 <span class="comment">     for the adjacency. The LSA will be retransmitted</span>
<a name="l00482"></a>00482 <span class="comment">     at intervals until an acknowledgment is seen from</span>
<a name="l00483"></a>00483 <span class="comment">     the neighbor. */</span>
<a name="l00484"></a>00484       <a class="code" href="ospf__flood_8c.html#af8c025c82461d3cb8c96d04692dc656c">ospf_ls_retransmit_add</a> (onbr, lsa);
<a name="l00485"></a>00485       retx_flag = 1;
<a name="l00486"></a>00486     }
<a name="l00487"></a>00487 
<a name="l00488"></a>00488   <span class="comment">/* If in the previous step, the LSA was NOT added to any of</span>
<a name="l00489"></a>00489 <span class="comment">     the Link state retransmission lists, there is no need to</span>
<a name="l00490"></a>00490 <span class="comment">     flood the LSA out the interface. */</span>
<a name="l00491"></a>00491   <span class="keywordflow">if</span> (retx_flag == 0) 
<a name="l00492"></a>00492     {
<a name="l00493"></a>00493       <span class="keywordflow">return</span> (inbr &amp;&amp; inbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a> == oi);
<a name="l00494"></a>00494     }
<a name="l00495"></a>00495 
<a name="l00496"></a>00496   <span class="comment">/* if we&#39;ve received the lsa on this interface we need to perform</span>
<a name="l00497"></a>00497 <span class="comment">     additional checking */</span>
<a name="l00498"></a>00498   <span class="keywordflow">if</span> (inbr &amp;&amp; (inbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a> == oi))
<a name="l00499"></a>00499     {
<a name="l00500"></a>00500       <span class="comment">/* If the new LSA was received on this interface, and it was</span>
<a name="l00501"></a>00501 <span class="comment">     received from either the Designated Router or the Backup</span>
<a name="l00502"></a>00502 <span class="comment">     Designated Router, chances are that all the neighbors have</span>
<a name="l00503"></a>00503 <span class="comment">     received the LSA already. */</span>
<a name="l00504"></a>00504       <span class="keywordflow">if</span> (<a class="code" href="ospf__neighbor_8h.html#ad422e372f51656c4649d96641b24f6e0">NBR_IS_DR</a> (inbr) || <a class="code" href="ospf__neighbor_8h.html#a1b94db83d088198f33a207de991a5316">NBR_IS_BDR</a> (inbr))
<a name="l00505"></a>00505     {
<a name="l00506"></a>00506       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
<a name="l00507"></a>00507         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_flood_through_interface(): &quot;</span>
<a name="l00508"></a>00508                <span class="stringliteral">&quot;DR/BDR NOT SEND to int %s&quot;</span>, <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l00509"></a>00509       <span class="keywordflow">return</span> 1;
<a name="l00510"></a>00510     }
<a name="l00511"></a>00511       
<a name="l00512"></a>00512       <span class="comment">/* If the new LSA was received on this interface, and the</span>
<a name="l00513"></a>00513 <span class="comment">     interface state is Backup, examine the next interface.  The</span>
<a name="l00514"></a>00514 <span class="comment">     Designated Router will do the flooding on this interface.</span>
<a name="l00515"></a>00515 <span class="comment">     However, if the Designated Router fails the router will</span>
<a name="l00516"></a>00516 <span class="comment">     end up retransmitting the updates. */</span>
<a name="l00517"></a>00517 
<a name="l00518"></a>00518       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a3676782add5a8ecdb86981965ef9f37e">ISM_Backup</a>)
<a name="l00519"></a>00519     {
<a name="l00520"></a>00520       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
<a name="l00521"></a>00521         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_flood_through_interface(): &quot;</span>
<a name="l00522"></a>00522                <span class="stringliteral">&quot;ISM_Backup NOT SEND to int %s&quot;</span>, <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l00523"></a>00523       <span class="keywordflow">return</span> 1;
<a name="l00524"></a>00524     }
<a name="l00525"></a>00525     }
<a name="l00526"></a>00526 
<a name="l00527"></a>00527   <span class="comment">/* The LSA must be flooded out the interface. Send a Link State</span>
<a name="l00528"></a>00528 <span class="comment">     Update packet (including the new LSA as contents) out the</span>
<a name="l00529"></a>00529 <span class="comment">     interface.  The LSA&#39;s LS age must be incremented by InfTransDelay</span>
<a name="l00530"></a>00530 <span class="comment">     (which must be &gt; 0) when it is copied into the outgoing Link</span>
<a name="l00531"></a>00531 <span class="comment">     State Update packet (until the LS age field reaches the maximum</span>
<a name="l00532"></a>00532 <span class="comment">     value of MaxAge). */</span>
<a name="l00533"></a>00533   <span class="comment">/* XXX HASSO: Is this IS_DEBUG_OSPF_NSSA really correct? */</span>
<a name="l00534"></a>00534   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
<a name="l00535"></a>00535     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_flood_through_interface(): &quot;</span>
<a name="l00536"></a>00536            <span class="stringliteral">&quot;DR/BDR sending upd to int %s&quot;</span>, <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l00537"></a>00537 
<a name="l00538"></a>00538   <span class="comment">/*  RFC2328  Section 13.3</span>
<a name="l00539"></a>00539 <span class="comment">      On non-broadcast networks, separate   Link State Update</span>
<a name="l00540"></a>00540 <span class="comment">      packets must be sent, as unicasts, to each adjacent   neighbor</span>
<a name="l00541"></a>00541 <span class="comment">      (i.e., those in state Exchange or greater).    The destination</span>
<a name="l00542"></a>00542 <span class="comment">      IP addresses for these packets are the neighbors&#39; IP</span>
<a name="l00543"></a>00543 <span class="comment">      addresses.   */</span>
<a name="l00544"></a>00544   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>)
<a name="l00545"></a>00545     {
<a name="l00546"></a>00546       <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00547"></a>00547       <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l00548"></a>00548 
<a name="l00549"></a>00549       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00550"></a>00550         <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00551"></a>00551       <span class="keywordflow">if</span> (nbr != oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a> &amp;&amp; nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> &gt;= <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a>)
<a name="l00552"></a>00552         <a class="code" href="ospf__packet_8c.html#a725d9c1aa0cf357d4411f9bcbad7d441">ospf_ls_upd_send_lsa</a> (nbr, lsa, <a class="code" href="ospf__packet_8h.html#a040f276a34d92cb9426454753718e81b">OSPF_SEND_PACKET_DIRECT</a>);
<a name="l00553"></a>00553     }
<a name="l00554"></a>00554   <span class="keywordflow">else</span>
<a name="l00555"></a>00555     <a class="code" href="ospf__packet_8c.html#a725d9c1aa0cf357d4411f9bcbad7d441">ospf_ls_upd_send_lsa</a> (oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>, lsa, <a class="code" href="ospf__packet_8h.html#a76f6e5970f4cddaa077a801063a4c0ef">OSPF_SEND_PACKET_INDIRECT</a>);
<a name="l00556"></a>00556 
<a name="l00557"></a>00557   <span class="keywordflow">return</span> 0;
<a name="l00558"></a>00558 }
<a name="l00559"></a>00559 
<a name="l00560"></a>00560 <span class="keywordtype">int</span>
<a name="l00561"></a><a class="code" href="ospf__flood_8h.html#a29849a1f1daed4bd4ca28dd083576e45">00561</a> <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>,
<a name="l00562"></a>00562              <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *inbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00563"></a>00563 {
<a name="l00564"></a>00564   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00565"></a>00565   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00566"></a>00566   <span class="keywordtype">int</span> lsa_ack_flag = 0;
<a name="l00567"></a>00567 
<a name="l00568"></a>00568   <span class="comment">/* All other types are specific to a single area (Area A).  The</span>
<a name="l00569"></a>00569 <span class="comment">     eligible interfaces are all those interfaces attaching to the</span>
<a name="l00570"></a>00570 <span class="comment">     Area A.  If Area A is the backbone, this includes all the virtual</span>
<a name="l00571"></a>00571 <span class="comment">     links.  */</span>
<a name="l00572"></a>00572   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (area-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, node, nnode, oi))
<a name="l00573"></a>00573     {
<a name="l00574"></a>00574       <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>.s_addr != <a class="code" href="ospfd_8h.html#a1f0c659cdd89cdac0e14ea0fdec8b7f7">OSPF_AREA_BACKBONE</a> &amp;&amp;
<a name="l00575"></a>00575       oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> ==  <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>) 
<a name="l00576"></a>00576     <span class="keywordflow">continue</span>;
<a name="l00577"></a>00577 
<a name="l00578"></a>00578 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00579"></a>00579 <span class="preprocessor"></span>      <span class="keywordflow">if</span> ((lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>) &amp;&amp; (lsa-&gt;oi != oi))
<a name="l00580"></a>00580         {
<a name="l00581"></a>00581           <span class="comment">/*</span>
<a name="l00582"></a>00582 <span class="comment">           * Link local scoped Opaque-LSA should only be flooded</span>
<a name="l00583"></a>00583 <span class="comment">           * for the link on which the LSA has received.</span>
<a name="l00584"></a>00584 <span class="comment">           */</span>
<a name="l00585"></a>00585           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
<a name="l00586"></a>00586             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Type-9 Opaque-LSA: lsa-&gt;oi(%p) != oi(%p)&quot;</span>, lsa-&gt;oi, oi);
<a name="l00587"></a>00587           <span class="keywordflow">continue</span>;
<a name="l00588"></a>00588         }
<a name="l00589"></a>00589 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00590"></a>00590 
<a name="l00591"></a>00591       <span class="keywordflow">if</span> (<a class="code" href="ospf__flood_8c.html#a8beea81565f86a66155c1daacd90c3db">ospf_flood_through_interface</a> (oi, inbr, lsa))
<a name="l00592"></a>00592     lsa_ack_flag = 1;
<a name="l00593"></a>00593     }
<a name="l00594"></a>00594 
<a name="l00595"></a>00595   <span class="keywordflow">return</span> (lsa_ack_flag);
<a name="l00596"></a>00596 }
<a name="l00597"></a>00597 
<a name="l00598"></a>00598 <span class="keywordtype">int</span>
<a name="l00599"></a><a class="code" href="ospf__flood_8h.html#a608687efecd7b5cb146b6761492b0ebe">00599</a> <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *inbr,
<a name="l00600"></a>00600                <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00601"></a>00601 {
<a name="l00602"></a>00602   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00603"></a>00603   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00604"></a>00604   <span class="keywordtype">int</span> lsa_ack_flag;
<a name="l00605"></a>00605 
<a name="l00606"></a>00606   lsa_ack_flag = 0;
<a name="l00607"></a>00607 
<a name="l00608"></a>00608   <span class="comment">/* The incoming LSA is type 5 or type 7  (AS-EXTERNAL or AS-NSSA )</span>
<a name="l00609"></a>00609 <span class="comment"></span>
<a name="l00610"></a>00610 <span class="comment">    Divert the Type-5 LSA&#39;s to all non-NSSA/STUB areas</span>
<a name="l00611"></a>00611 <span class="comment"></span>
<a name="l00612"></a>00612 <span class="comment">    Divert the Type-7 LSA&#39;s to all NSSA areas</span>
<a name="l00613"></a>00613 <span class="comment"></span>
<a name="l00614"></a>00614 <span class="comment">     AS-external-LSAs are flooded throughout the entire AS, with the</span>
<a name="l00615"></a>00615 <span class="comment">     exception of stub areas (see Section 3.6).  The eligible</span>
<a name="l00616"></a>00616 <span class="comment">     interfaces are all the router&#39;s interfaces, excluding virtual</span>
<a name="l00617"></a>00617 <span class="comment">     links and those interfaces attaching to stub areas.  */</span>
<a name="l00618"></a>00618 
<a name="l00619"></a>00619   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>)) <span class="comment">/* Translated from 7  */</span>
<a name="l00620"></a>00620     <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
<a name="l00621"></a>00621       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Flood/AS: NSSA TRANSLATED LSA&quot;</span>);
<a name="l00622"></a>00622 
<a name="l00623"></a>00623   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, area))
<a name="l00624"></a>00624     {
<a name="l00625"></a>00625       <span class="keywordtype">int</span> continue_flag = 0;
<a name="l00626"></a>00626       <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *if_node;
<a name="l00627"></a>00627       <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00628"></a>00628 
<a name="l00629"></a>00629       <span class="keywordflow">switch</span> (area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a>)
<a name="l00630"></a>00630     {
<a name="l00631"></a>00631       <span class="comment">/* Don&#39;t send AS externals into stub areas.  Various types</span>
<a name="l00632"></a>00632 <span class="comment">             of support for partial stub areas can be implemented</span>
<a name="l00633"></a>00633 <span class="comment">             here.  NSSA&#39;s will receive Type-7&#39;s that have areas</span>
<a name="l00634"></a>00634 <span class="comment">             matching the originl LSA. */</span>
<a name="l00635"></a>00635     <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a>:    <span class="comment">/* Sending Type 5 or 7 into NSSA area */</span>
<a name="l00636"></a>00636       <span class="comment">/* Type-7, flood NSSA area */</span>
<a name="l00637"></a>00637           <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>
<a name="l00638"></a>00638           &amp;&amp; area == lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>)
<a name="l00639"></a>00639         <span class="comment">/* We will send it. */</span>
<a name="l00640"></a>00640         continue_flag = 0;
<a name="l00641"></a>00641           <span class="keywordflow">else</span>
<a name="l00642"></a>00642         continue_flag = 1;  <span class="comment">/* Skip this NSSA area for Type-5&#39;s et al */</span>
<a name="l00643"></a>00643           <span class="keywordflow">break</span>;
<a name="l00644"></a>00644 
<a name="l00645"></a>00645     <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#acd1fa1b30b89ecd580dc0a836ec92e4d">OSPF_AREA_TYPE_MAX</a>:
<a name="l00646"></a>00646     <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#a34e738eee2ef9dfcea3d7f31d36de08c">OSPF_AREA_STUB</a>:
<a name="l00647"></a>00647       continue_flag = 1;    <span class="comment">/* Skip this area. */</span>
<a name="l00648"></a>00648       <span class="keywordflow">break</span>;
<a name="l00649"></a>00649 
<a name="l00650"></a>00650     <span class="keywordflow">case</span> <a class="code" href="ospfd_8h.html#a43f84c8e8584ccc8b82990d251abec4d">OSPF_AREA_DEFAULT</a>:
<a name="l00651"></a>00651     <span class="keywordflow">default</span>:
<a name="l00652"></a>00652       <span class="comment">/* No Type-7 into normal area */</span>
<a name="l00653"></a>00653           <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>) 
<a name="l00654"></a>00654         continue_flag = 1; <span class="comment">/* skip Type-7 */</span>
<a name="l00655"></a>00655           <span class="keywordflow">else</span>
<a name="l00656"></a>00656         continue_flag = 0;  <span class="comment">/* Do this area. */</span>
<a name="l00657"></a>00657       <span class="keywordflow">break</span>;
<a name="l00658"></a>00658     }
<a name="l00659"></a>00659       
<a name="l00660"></a>00660       <span class="comment">/* Do continue for above switch.  Saves a big if then mess */</span>
<a name="l00661"></a>00661       <span class="keywordflow">if</span> (continue_flag) 
<a name="l00662"></a>00662     <span class="keywordflow">continue</span>; <span class="comment">/* main for-loop */</span>
<a name="l00663"></a>00663       
<a name="l00664"></a>00664       <span class="comment">/* send to every interface in this area */</span>
<a name="l00665"></a>00665 
<a name="l00666"></a>00666       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (area-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, if_node, oi))
<a name="l00667"></a>00667     {
<a name="l00668"></a>00668       <span class="comment">/* Skip virtual links */</span>
<a name="l00669"></a>00669       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> !=  <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l00670"></a>00670         <span class="keywordflow">if</span> (<a class="code" href="ospf__flood_8c.html#a8beea81565f86a66155c1daacd90c3db">ospf_flood_through_interface</a> (oi, inbr, lsa)) <span class="comment">/* lsa */</span>
<a name="l00671"></a>00671           lsa_ack_flag = 1;
<a name="l00672"></a>00672     }
<a name="l00673"></a>00673     } <span class="comment">/* main area for-loop */</span>
<a name="l00674"></a>00674   
<a name="l00675"></a>00675   <span class="keywordflow">return</span> (lsa_ack_flag);
<a name="l00676"></a>00676 }
<a name="l00677"></a>00677 
<a name="l00678"></a>00678 <span class="keywordtype">int</span>
<a name="l00679"></a><a class="code" href="ospf__flood_8h.html#ae63535f8bbbababf007c76d1451618e6">00679</a> <a class="code" href="ospf__flood_8c.html#a32ab724834b131f44a7756bb220d14ac">ospf_flood_through</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>,
<a name="l00680"></a>00680             <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *inbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00681"></a>00681 {
<a name="l00682"></a>00682   <span class="keywordtype">int</span> lsa_ack_flag = 0;
<a name="l00683"></a>00683   
<a name="l00684"></a>00684   <span class="comment">/* Type-7 LSA&#39;s for NSSA are flooded throughout the AS here, and</span>
<a name="l00685"></a>00685 <span class="comment">     upon return are updated in the LSDB for Type-7&#39;s.  Later,</span>
<a name="l00686"></a>00686 <span class="comment">     re-fresh will re-send them (and also, if ABR, packet code will</span>
<a name="l00687"></a>00687 <span class="comment">     translate to Type-5&#39;s)</span>
<a name="l00688"></a>00688 <span class="comment">  </span>
<a name="l00689"></a>00689 <span class="comment">     As usual, Type-5 LSA&#39;s (if not DISCARDED because we are STUB or</span>
<a name="l00690"></a>00690 <span class="comment">     NSSA) are flooded throughout the AS, and are updated in the</span>
<a name="l00691"></a>00691 <span class="comment">     global table.  */</span>
<a name="l00692"></a>00692 <span class="preprocessor">#ifdef ORIGINAL_CODING</span>
<a name="l00693"></a>00693 <span class="preprocessor"></span>  <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l00694"></a>00694     {
<a name="l00695"></a>00695     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a35879db42bef5fa9b3c1540b7db95b6f">OSPF_ROUTER_LSA</a>:
<a name="l00696"></a>00696     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a28b795ddb745c95eef700c9a2134c806">OSPF_NETWORK_LSA</a>:
<a name="l00697"></a>00697     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a3a501e86708401620a7a61e9920cd9bd">OSPF_SUMMARY_LSA</a>:
<a name="l00698"></a>00698     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a09d9e4a35705f96a15952c63088c0ccc">OSPF_ASBR_SUMMARY_LSA</a>:
<a name="l00699"></a>00699 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00700"></a>00700 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>: <span class="comment">/* ospf_flood_through_interface ? */</span>
<a name="l00701"></a>00701     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l00702"></a>00702 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00703"></a>00703       lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (inbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, inbr, lsa);
<a name="l00704"></a>00704       <span class="keywordflow">break</span>;
<a name="l00705"></a>00705     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>: <span class="comment">/* Type-5 */</span>
<a name="l00706"></a>00706 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00707"></a>00707 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l00708"></a>00708 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00709"></a>00709       lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (ospf, inbr, lsa);
<a name="l00710"></a>00710       <span class="keywordflow">break</span>;
<a name="l00711"></a>00711       <span class="comment">/* Type-7 Only received within NSSA, then flooded */</span>
<a name="l00712"></a>00712     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
<a name="l00713"></a>00713       <span class="comment">/* Any P-bit was installed with the Type-7. */</span>
<a name="l00714"></a>00714       lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (inbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, inbr, lsa);
<a name="l00715"></a>00715 
<a name="l00716"></a>00716       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
<a name="l00717"></a>00717     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_flood_through: LOCAL NSSA FLOOD of Type-7.&quot;</span>);
<a name="l00718"></a>00718       <span class="keywordflow">break</span>;
<a name="l00719"></a>00719     <span class="keywordflow">default</span>:
<a name="l00720"></a>00720       <span class="keywordflow">break</span>;
<a name="l00721"></a>00721     }
<a name="l00722"></a>00722 <span class="preprocessor">#else </span><span class="comment">/* ORIGINAL_CODING */</span>
<a name="l00723"></a>00723   <span class="comment">/*</span>
<a name="l00724"></a>00724 <span class="comment">   * At the common sub-sub-function &quot;ospf_flood_through_interface()&quot;,</span>
<a name="l00725"></a>00725 <span class="comment">   * a parameter &quot;inbr&quot; will be used to distinguish the called context</span>
<a name="l00726"></a>00726 <span class="comment">   * whether the given LSA was received from the neighbor, or the</span>
<a name="l00727"></a>00727 <span class="comment">   * flooding for the LSA starts from this node (e.g. the LSA was self-</span>
<a name="l00728"></a>00728 <span class="comment">   * originated, or the LSA is going to be flushed from routing domain).</span>
<a name="l00729"></a>00729 <span class="comment">   *</span>
<a name="l00730"></a>00730 <span class="comment">   * So, for consistency reasons, this function &quot;ospf_flood_through()&quot;</span>
<a name="l00731"></a>00731 <span class="comment">   * should also allow the usage that the given &quot;inbr&quot; parameter to be</span>
<a name="l00732"></a>00732 <span class="comment">   * NULL. If we do so, corresponding AREA parameter should be referred</span>
<a name="l00733"></a>00733 <span class="comment">   * by &quot;lsa-&gt;area&quot;, instead of &quot;inbr-&gt;oi-&gt;area&quot;.</span>
<a name="l00734"></a>00734 <span class="comment">   */</span>
<a name="l00735"></a>00735   <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l00736"></a>00736     {
<a name="l00737"></a>00737     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>: <span class="comment">/* Type-5 */</span>
<a name="l00738"></a>00738 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00739"></a>00739 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l00740"></a>00740 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00741"></a>00741       lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (ospf, inbr, lsa);
<a name="l00742"></a>00742       <span class="keywordflow">break</span>;
<a name="l00743"></a>00743       <span class="comment">/* Type-7 Only received within NSSA, then flooded */</span>
<a name="l00744"></a>00744     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>:
<a name="l00745"></a>00745       <span class="comment">/* Any P-bit was installed with the Type-7. */</span>
<a name="l00746"></a>00746 
<a name="l00747"></a>00747       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
<a name="l00748"></a>00748     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_flood_through: LOCAL NSSA FLOOD of Type-7.&quot;</span>);
<a name="l00749"></a>00749       <span class="comment">/* Fallthrough */</span>
<a name="l00750"></a>00750     <span class="keywordflow">default</span>:
<a name="l00751"></a>00751       lsa_ack_flag = <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>, inbr, lsa);
<a name="l00752"></a>00752       <span class="keywordflow">break</span>;
<a name="l00753"></a>00753     }
<a name="l00754"></a>00754 <span class="preprocessor">#endif </span><span class="comment">/* ORIGINAL_CODING */</span>
<a name="l00755"></a>00755   
<a name="l00756"></a>00756   <span class="keywordflow">return</span> (lsa_ack_flag);
<a name="l00757"></a>00757 }
<a name="l00758"></a>00758 
<a name="l00759"></a>00759 
<a name="l00760"></a>00760 
<a name="l00761"></a>00761 <span class="comment">/* Management functions for neighbor&#39;s Link State Request list. */</span>
<a name="l00762"></a>00762 <span class="keywordtype">void</span>
<a name="l00763"></a><a class="code" href="ospf__flood_8h.html#a90953f3c876eec9ce23f619d5e969d81">00763</a> <a class="code" href="ospf__flood_8c.html#ae6da3c20ff8542f795b735b5b177e7bd">ospf_ls_request_add</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00764"></a>00764 {
<a name="l00765"></a>00765   <span class="comment">/*</span>
<a name="l00766"></a>00766 <span class="comment">   * We cannot make use of the newly introduced callback function</span>
<a name="l00767"></a>00767 <span class="comment">   * &quot;lsdb-&gt;new_lsa_hook&quot; to replace debug output below, just because</span>
<a name="l00768"></a>00768 <span class="comment">   * it seems no simple and smart way to pass neighbor information to</span>
<a name="l00769"></a>00769 <span class="comment">   * the common function &quot;ospf_lsdb_add()&quot; -- endo.</span>
<a name="l00770"></a>00770 <span class="comment">   */</span>
<a name="l00771"></a>00771   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
<a name="l00772"></a>00772       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RqstL(%lu)++, NBR(%s), LSA[%s]&quot;</span>,
<a name="l00773"></a>00773                   <a class="code" href="ospf__flood_8c.html#a9544780854006403934ea809e4e99caa">ospf_ls_request_count</a> (nbr),
<a name="l00774"></a>00774                   inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>), <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
<a name="l00775"></a>00775 
<a name="l00776"></a>00776   <a class="code" href="ospf__lsdb_8c.html#a4247fc1a76fbbc491d0d55ac0d77be71">ospf_lsdb_add</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#ac1ff0219316301982d09b282b86dc16d">ls_req</a>, lsa);
<a name="l00777"></a>00777 }
<a name="l00778"></a>00778 
<a name="l00779"></a>00779 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l00780"></a><a class="code" href="ospf__flood_8h.html#a9d2874ac4fbe1b8794dbcdf2f8e1e007">00780</a> <a class="code" href="ospf__flood_8c.html#a9544780854006403934ea809e4e99caa">ospf_ls_request_count</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l00781"></a>00781 {
<a name="l00782"></a>00782   <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#aac22a3316876f4a266649e4f2d902973">ospf_lsdb_count_all</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#ac1ff0219316301982d09b282b86dc16d">ls_req</a>);
<a name="l00783"></a>00783 }
<a name="l00784"></a>00784 
<a name="l00785"></a>00785 <span class="keywordtype">int</span>
<a name="l00786"></a><a class="code" href="ospf__flood_8h.html#a49e2cb3f510170eb1366f9cd2c8b1203">00786</a> <a class="code" href="ospf__flood_8c.html#a1fad8802afa3d754e1ecf810d7cc1bd5">ospf_ls_request_isempty</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l00787"></a>00787 {
<a name="l00788"></a>00788   <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#a2b5faf4a42f54a62fcf14d5a7ff0c481">ospf_lsdb_isempty</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#ac1ff0219316301982d09b282b86dc16d">ls_req</a>);
<a name="l00789"></a>00789 }
<a name="l00790"></a>00790 
<a name="l00791"></a>00791 <span class="comment">/* Remove LSA from neighbor&#39;s ls-request list. */</span>
<a name="l00792"></a>00792 <span class="keywordtype">void</span>
<a name="l00793"></a><a class="code" href="ospf__flood_8h.html#a89fa735e5273828f62685a1cee13386a">00793</a> <a class="code" href="ospf__flood_8c.html#a140fef53d3293227a5f51d11580cdcb8">ospf_ls_request_delete</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00794"></a>00794 {
<a name="l00795"></a>00795   <span class="keywordflow">if</span> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a0071c28cc3ed4b8330606973e0f16323">ls_req_last</a> == lsa)
<a name="l00796"></a>00796     {
<a name="l00797"></a>00797       <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a0071c28cc3ed4b8330606973e0f16323">ls_req_last</a>);
<a name="l00798"></a>00798       nbr-&gt;<a class="code" href="structospf__neighbor.html#a0071c28cc3ed4b8330606973e0f16323">ls_req_last</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00799"></a>00799     }
<a name="l00800"></a>00800 
<a name="l00801"></a>00801   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))    <span class="comment">/* -- endo. */</span>
<a name="l00802"></a>00802       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RqstL(%lu)--, NBR(%s), LSA[%s]&quot;</span>,
<a name="l00803"></a>00803                   <a class="code" href="ospf__flood_8c.html#a9544780854006403934ea809e4e99caa">ospf_ls_request_count</a> (nbr),
<a name="l00804"></a>00804                   inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>), <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
<a name="l00805"></a>00805 
<a name="l00806"></a>00806   <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#ac1ff0219316301982d09b282b86dc16d">ls_req</a>, lsa);
<a name="l00807"></a>00807 }
<a name="l00808"></a>00808 
<a name="l00809"></a>00809 <span class="comment">/* Remove all LSA from neighbor&#39;s ls-requenst list. */</span>
<a name="l00810"></a>00810 <span class="keywordtype">void</span>
<a name="l00811"></a><a class="code" href="ospf__flood_8h.html#a9dba7e2c72b557bfceede70f3a47f7a1">00811</a> <a class="code" href="ospf__flood_8c.html#a90c072738e661b151c8fd6b180cb7fcd">ospf_ls_request_delete_all</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l00812"></a>00812 {
<a name="l00813"></a>00813   <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a0071c28cc3ed4b8330606973e0f16323">ls_req_last</a>);
<a name="l00814"></a>00814   nbr-&gt;<a class="code" href="structospf__neighbor.html#a0071c28cc3ed4b8330606973e0f16323">ls_req_last</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00815"></a>00815   <a class="code" href="ospf__lsdb_8c.html#aac04ea2aea1f1895b940fe30fa531a5f">ospf_lsdb_delete_all</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#ac1ff0219316301982d09b282b86dc16d">ls_req</a>);
<a name="l00816"></a>00816 }
<a name="l00817"></a>00817 
<a name="l00818"></a>00818 <span class="comment">/* Lookup LSA from neighbor&#39;s ls-request list. */</span>
<a name="l00819"></a>00819 <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *
<a name="l00820"></a><a class="code" href="ospf__flood_8h.html#a27126767a3610710aa8b3b227a2e50d9">00820</a> <a class="code" href="ospf__flood_8c.html#a27c6e0c56e71024a8f2906b22ff31558">ospf_ls_request_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00821"></a>00821 {
<a name="l00822"></a>00822   <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#aaa05b45206ad37981306f38e098eae7d">ospf_lsdb_lookup</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#ac1ff0219316301982d09b282b86dc16d">ls_req</a>, lsa);
<a name="l00823"></a>00823 }
<a name="l00824"></a>00824 
<a name="l00825"></a>00825 <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *
<a name="l00826"></a><a class="code" href="ospf__flood_8h.html#a85cb5650679fa29e7c83cee9a320f681">00826</a> <a class="code" href="ospf__flood_8c.html#aedb5408ac5f2016547b85154747a8398">ospf_ls_request_new</a> (<span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a> *lsah)
<a name="l00827"></a>00827 {
<a name="l00828"></a>00828   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>;
<a name="l00829"></a>00829 
<a name="l00830"></a>00830   <span class="keyword">new</span> = <a class="code" href="ospf__lsa_8c.html#add9074cfc3c1a160b044a9ce5ebb6d4b">ospf_lsa_new</a> ();
<a name="l00831"></a>00831   <span class="keyword">new</span>-&gt;data = <a class="code" href="ospf__lsa_8c.html#a6ac1c58b3b248e433f625521b186f923">ospf_lsa_data_new</a> (<a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>);
<a name="l00832"></a>00832   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (new-&gt;data, lsah, <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>);
<a name="l00833"></a>00833 
<a name="l00834"></a>00834   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00835"></a>00835 }
<a name="l00836"></a>00836 
<a name="l00837"></a>00837 
<a name="l00838"></a>00838 <span class="comment">/* Management functions for neighbor&#39;s ls-retransmit list. */</span>
<a name="l00839"></a>00839 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l00840"></a><a class="code" href="ospf__flood_8h.html#a9e0a883c21681d1bdd51202f87c55463">00840</a> <a class="code" href="ospf__flood_8c.html#a9fc5f626cdb9afa119113fb7a8b9daf2">ospf_ls_retransmit_count</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l00841"></a>00841 {
<a name="l00842"></a>00842   <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#aac22a3316876f4a266649e4f2d902973">ospf_lsdb_count_all</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaab4ea26de244d322ac4c82abb4defab">ls_rxmt</a>);
<a name="l00843"></a>00843 }
<a name="l00844"></a>00844 
<a name="l00845"></a>00845 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l00846"></a><a class="code" href="ospf__flood_8h.html#af88789a37ddad181d56c060286d5b4d0">00846</a> <a class="code" href="ospf__flood_8c.html#a2f1065151b3c6941df7b5f5f8f89bd76">ospf_ls_retransmit_count_self</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keywordtype">int</span> lsa_type)
<a name="l00847"></a>00847 {
<a name="l00848"></a>00848   <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#acbcaa15968fddc5e037aa7a18109fadd">ospf_lsdb_count_self</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaab4ea26de244d322ac4c82abb4defab">ls_rxmt</a>, lsa_type);
<a name="l00849"></a>00849 }
<a name="l00850"></a>00850 
<a name="l00851"></a>00851 <span class="keywordtype">int</span>
<a name="l00852"></a><a class="code" href="ospf__flood_8h.html#aa284b03ddb9bd18e5b1ef6ad7c23fe53">00852</a> <a class="code" href="ospf__flood_8c.html#a00eeafc55321936ff86756ad0804c98b">ospf_ls_retransmit_isempty</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l00853"></a>00853 {
<a name="l00854"></a>00854   <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#a2b5faf4a42f54a62fcf14d5a7ff0c481">ospf_lsdb_isempty</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaab4ea26de244d322ac4c82abb4defab">ls_rxmt</a>);
<a name="l00855"></a>00855 }
<a name="l00856"></a>00856 
<a name="l00857"></a>00857 <span class="comment">/* Add LSA to be retransmitted to neighbor&#39;s ls-retransmit list. */</span>
<a name="l00858"></a>00858 <span class="keywordtype">void</span>
<a name="l00859"></a><a class="code" href="ospf__flood_8h.html#a23094df82d33c8162134f1ece488a1f1">00859</a> <a class="code" href="ospf__flood_8c.html#af8c025c82461d3cb8c96d04692dc656c">ospf_ls_retransmit_add</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00860"></a>00860 {
<a name="l00861"></a>00861   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *old;
<a name="l00862"></a>00862 
<a name="l00863"></a>00863   old = <a class="code" href="ospf__flood_8c.html#ac58d995c667e0b1d491b76d0536ac0dd">ospf_ls_retransmit_lookup</a> (nbr, lsa);
<a name="l00864"></a>00864 
<a name="l00865"></a>00865   <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a562753a50210d94f439aa232c260d433">ospf_lsa_more_recent</a> (old, lsa) &lt; 0)
<a name="l00866"></a>00866     {
<a name="l00867"></a>00867       <span class="keywordflow">if</span> (old)
<a name="l00868"></a>00868     {
<a name="l00869"></a>00869       old-&gt;<a class="code" href="structospf__lsa.html#a752d828403f41dafa1bd85a443f51d5a">retransmit_counter</a>--;
<a name="l00870"></a>00870       <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaab4ea26de244d322ac4c82abb4defab">ls_rxmt</a>, old);
<a name="l00871"></a>00871     }
<a name="l00872"></a>00872       lsa-&gt;<a class="code" href="structospf__lsa.html#a752d828403f41dafa1bd85a443f51d5a">retransmit_counter</a>++;
<a name="l00873"></a>00873       <span class="comment">/*</span>
<a name="l00874"></a>00874 <span class="comment">       * We cannot make use of the newly introduced callback function</span>
<a name="l00875"></a>00875 <span class="comment">       * &quot;lsdb-&gt;new_lsa_hook&quot; to replace debug output below, just because</span>
<a name="l00876"></a>00876 <span class="comment">       * it seems no simple and smart way to pass neighbor information to</span>
<a name="l00877"></a>00877 <span class="comment">       * the common function &quot;ospf_lsdb_add()&quot; -- endo.</span>
<a name="l00878"></a>00878 <span class="comment">       */</span>
<a name="l00879"></a>00879       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))
<a name="l00880"></a>00880       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RXmtL(%lu)++, NBR(%s), LSA[%s]&quot;</span>,
<a name="l00881"></a>00881                      <a class="code" href="ospf__flood_8c.html#a9fc5f626cdb9afa119113fb7a8b9daf2">ospf_ls_retransmit_count</a> (nbr),
<a name="l00882"></a>00882              inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>), <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
<a name="l00883"></a>00883       <a class="code" href="ospf__lsdb_8c.html#a4247fc1a76fbbc491d0d55ac0d77be71">ospf_lsdb_add</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaab4ea26de244d322ac4c82abb4defab">ls_rxmt</a>, lsa);
<a name="l00884"></a>00884     }
<a name="l00885"></a>00885 }
<a name="l00886"></a>00886 
<a name="l00887"></a>00887 <span class="comment">/* Remove LSA from neibghbor&#39;s ls-retransmit list. */</span>
<a name="l00888"></a>00888 <span class="keywordtype">void</span>
<a name="l00889"></a><a class="code" href="ospf__flood_8h.html#ab1c144ffb5a7c6bf24399399d2644ae9">00889</a> <a class="code" href="ospf__flood_8c.html#a9409fb977977ecae3646621d04802a7f">ospf_ls_retransmit_delete</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00890"></a>00890 {
<a name="l00891"></a>00891   <span class="keywordflow">if</span> (<a class="code" href="ospf__flood_8c.html#ac58d995c667e0b1d491b76d0536ac0dd">ospf_ls_retransmit_lookup</a> (nbr, lsa))
<a name="l00892"></a>00892     {
<a name="l00893"></a>00893       lsa-&gt;<a class="code" href="structospf__lsa.html#a752d828403f41dafa1bd85a443f51d5a">retransmit_counter</a>--;  
<a name="l00894"></a>00894       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_FLOODING))        <span class="comment">/* -- endo. */</span>
<a name="l00895"></a>00895       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RXmtL(%lu)--, NBR(%s), LSA[%s]&quot;</span>,
<a name="l00896"></a>00896                      <a class="code" href="ospf__flood_8c.html#a9fc5f626cdb9afa119113fb7a8b9daf2">ospf_ls_retransmit_count</a> (nbr),
<a name="l00897"></a>00897              inet_ntoa (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>), <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
<a name="l00898"></a>00898       <a class="code" href="ospf__lsdb_8c.html#aea96804c9a8cf2e0f59e8cce0b7a264e">ospf_lsdb_delete</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaab4ea26de244d322ac4c82abb4defab">ls_rxmt</a>, lsa);
<a name="l00899"></a>00899     }
<a name="l00900"></a>00900 }
<a name="l00901"></a>00901 
<a name="l00902"></a>00902 <span class="comment">/* Clear neighbor&#39;s ls-retransmit list. */</span>
<a name="l00903"></a>00903 <span class="keywordtype">void</span>
<a name="l00904"></a><a class="code" href="ospf__flood_8h.html#aaf6abd7949694eb30bdc3b58245dfa14">00904</a> <a class="code" href="ospf__flood_8c.html#afa1fd3e1ddaf46a4674019b35f527667">ospf_ls_retransmit_clear</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr)
<a name="l00905"></a>00905 {
<a name="l00906"></a>00906   <span class="keyword">struct </span><a class="code" href="structospf__lsdb.html">ospf_lsdb</a> *lsdb;
<a name="l00907"></a>00907   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00908"></a>00908 
<a name="l00909"></a>00909   lsdb = &amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaab4ea26de244d322ac4c82abb4defab">ls_rxmt</a>;
<a name="l00910"></a>00910 
<a name="l00911"></a>00911   <span class="keywordflow">for</span> (i = <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a>; i &lt; <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>; i++)
<a name="l00912"></a>00912     {
<a name="l00913"></a>00913       <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table = lsdb-&gt;<a class="code" href="structospf__lsdb.html#a0af6d8740509eb2ed0ad1aa9c6599d56">type</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structospf__lsdb.html#ac02ad39566534869219d3e9d942bf565">db</a>;
<a name="l00914"></a>00914       <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00915"></a>00915       <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l00916"></a>00916 
<a name="l00917"></a>00917       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00918"></a>00918     <span class="keywordflow">if</span> ((lsa = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00919"></a>00919       <a class="code" href="ospf__flood_8c.html#a9409fb977977ecae3646621d04802a7f">ospf_ls_retransmit_delete</a> (nbr, lsa);
<a name="l00920"></a>00920     }
<a name="l00921"></a>00921 
<a name="l00922"></a>00922   <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a0071c28cc3ed4b8330606973e0f16323">ls_req_last</a>);
<a name="l00923"></a>00923   nbr-&gt;<a class="code" href="structospf__neighbor.html#a0071c28cc3ed4b8330606973e0f16323">ls_req_last</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00924"></a>00924 }
<a name="l00925"></a>00925 
<a name="l00926"></a>00926 <span class="comment">/* Lookup LSA from neighbor&#39;s ls-retransmit list. */</span>
<a name="l00927"></a>00927 <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *
<a name="l00928"></a><a class="code" href="ospf__flood_8h.html#a64fb70fd057afea0ff5500214207658b">00928</a> <a class="code" href="ospf__flood_8c.html#ac58d995c667e0b1d491b76d0536ac0dd">ospf_ls_retransmit_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00929"></a>00929 {
<a name="l00930"></a>00930   <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#aaa05b45206ad37981306f38e098eae7d">ospf_lsdb_lookup</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#aaab4ea26de244d322ac4c82abb4defab">ls_rxmt</a>, lsa);
<a name="l00931"></a>00931 }
<a name="l00932"></a>00932 
<a name="l00933"></a>00933 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00934"></a><a class="code" href="ospf__flood_8c.html#a9e7c064f04730b9b5331d68b0a6ff959">00934</a> <a class="code" href="ospf__flood_8c.html#a9e7c064f04730b9b5331d68b0a6ff959">ospf_ls_retransmit_delete_nbr_if</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi,
<a name="l00935"></a>00935                   <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00936"></a>00936 {
<a name="l00937"></a>00937   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00938"></a>00938   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l00939"></a>00939   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsr;
<a name="l00940"></a>00940 
<a name="l00941"></a>00941   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8c.html#a25678bf88909391ee05583a4e73a838d">ospf_if_is_enable</a> (oi))
<a name="l00942"></a>00942     <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00943"></a>00943       <span class="comment">/* If LSA find in LS-retransmit list, then remove it. */</span>
<a name="l00944"></a>00944       <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00945"></a>00945     {
<a name="l00946"></a>00946       lsr = <a class="code" href="ospf__flood_8c.html#ac58d995c667e0b1d491b76d0536ac0dd">ospf_ls_retransmit_lookup</a> (nbr, lsa);
<a name="l00947"></a>00947          
<a name="l00948"></a>00948       <span class="comment">/* If LSA find in ls-retransmit list, remove it. */</span>
<a name="l00949"></a>00949       <span class="keywordflow">if</span> (lsr != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; lsr-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a> == lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>)
<a name="l00950"></a>00950         <a class="code" href="ospf__flood_8c.html#a9409fb977977ecae3646621d04802a7f">ospf_ls_retransmit_delete</a> (nbr, lsr);
<a name="l00951"></a>00951     }
<a name="l00952"></a>00952 }
<a name="l00953"></a>00953 
<a name="l00954"></a>00954 <span class="keywordtype">void</span>
<a name="l00955"></a><a class="code" href="ospf__flood_8h.html#ae8c2f9f48504f891db852e18b8627e4e">00955</a> <a class="code" href="ospf__flood_8c.html#a8f46211a0fe7065405e8bdda81963204">ospf_ls_retransmit_delete_nbr_area</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>,
<a name="l00956"></a>00956                     <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00957"></a>00957 {
<a name="l00958"></a>00958   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00959"></a>00959   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00960"></a>00960 
<a name="l00961"></a>00961   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (area-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, node, nnode, oi))
<a name="l00962"></a>00962     <a class="code" href="ospf__flood_8c.html#a9e7c064f04730b9b5331d68b0a6ff959">ospf_ls_retransmit_delete_nbr_if</a> (oi, lsa);
<a name="l00963"></a>00963 }
<a name="l00964"></a>00964 
<a name="l00965"></a>00965 <span class="keywordtype">void</span>
<a name="l00966"></a><a class="code" href="ospf__flood_8h.html#aa065c2148efdea34e59d6db2fb3c725d">00966</a> <a class="code" href="ospf__flood_8c.html#add1aa73829326bf3733d0d442002cb95">ospf_ls_retransmit_delete_nbr_as</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00967"></a>00967 {
<a name="l00968"></a>00968   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00969"></a>00969   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00970"></a>00970 
<a name="l00971"></a>00971   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
<a name="l00972"></a>00972     <a class="code" href="ospf__flood_8c.html#a9e7c064f04730b9b5331d68b0a6ff959">ospf_ls_retransmit_delete_nbr_if</a> (oi, lsa);
<a name="l00973"></a>00973 }
<a name="l00974"></a>00974 
<a name="l00975"></a>00975 
<a name="l00976"></a>00976 <span class="comment">/* Sets ls_age to MaxAge and floods throu the area. </span>
<a name="l00977"></a>00977 <span class="comment">   When we implement ASE routing, there will be anothe function</span>
<a name="l00978"></a>00978 <span class="comment">   flushing an LSA from the whole domain. */</span>
<a name="l00979"></a>00979 <span class="keywordtype">void</span>
<a name="l00980"></a><a class="code" href="ospf__flood_8h.html#aeb4cc897fdc8e4e3d99008c20675f088">00980</a> <a class="code" href="ospf__flood_8c.html#ad3049ba87364a6fbed7d352023e33a4a">ospf_lsa_flush_area</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa, <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>)
<a name="l00981"></a>00981 {
<a name="l00982"></a>00982   lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>);
<a name="l00983"></a>00983   <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (area, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, lsa);
<a name="l00984"></a>00984   <a class="code" href="ospf__lsa_8c.html#ab730b081b5aa660ffc5d0ec642d03d27">ospf_lsa_maxage</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, lsa);
<a name="l00985"></a>00985 }
<a name="l00986"></a>00986 
<a name="l00987"></a>00987 <span class="keywordtype">void</span>
<a name="l00988"></a><a class="code" href="ospf__flood_8h.html#a6bee8552f1167cb8cc1d4b5101e4df3a">00988</a> <a class="code" href="ospf__flood_8c.html#a68d550b90a6cd775d965f6e8f9309863">ospf_lsa_flush_as</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00989"></a>00989 {
<a name="l00990"></a>00990   lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>);
<a name="l00991"></a>00991   <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (ospf, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, lsa);
<a name="l00992"></a>00992   <a class="code" href="ospf__lsa_8c.html#ab730b081b5aa660ffc5d0ec642d03d27">ospf_lsa_maxage</a> (ospf, lsa);
<a name="l00993"></a>00993 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__flood_8c.html">ospf_flood.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:07 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
