<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/hash.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('hash_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/hash.c</div>  </div>
</div>
<div class="contents">
<a href="hash_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Hash routine.</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1998 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published</span>
<a name="l00008"></a>00008 <span class="comment"> * by the Free Software Foundation; either version 2, or (at your</span>
<a name="l00009"></a>00009 <span class="comment"> * option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the</span>
<a name="l00018"></a>00018 <span class="comment"> * Free Software Foundation, Inc., 59 Temple Place - Suite 330,</span>
<a name="l00019"></a>00019 <span class="comment"> * Boston, MA 02111-1307, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="hash_8h.html">hash.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="comment">/* Allocate a new hash.  */</span>
<a name="l00028"></a>00028 <span class="keyword">struct </span><a class="code" href="structhash.html">hash</a> *
<a name="l00029"></a><a class="code" href="hash_8c.html#a5a114f3e041a28afaf1acfa760728c24">00029</a> <a class="code" href="hash_8c.html#a5a114f3e041a28afaf1acfa760728c24">hash_create_size</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structhash.html#ad58883cffca7225da64e2569ada98ffb">size</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> (*<a class="code" href="structhash.html#ac92ed84876daaffa7b8aa9199265fabd">hash_key</a>) (<span class="keywordtype">void</span> *),
<a name="l00030"></a>00030                                      <span class="keywordtype">int</span> (*<a class="code" href="structhash.html#af8628111238df82b2d631281ea64e8e6">hash_cmp</a>) (<span class="keyword">const</span> <span class="keywordtype">void</span> *, <span class="keyword">const</span> <span class="keywordtype">void</span> *))
<a name="l00031"></a>00031 {
<a name="l00032"></a>00032   <span class="keyword">struct </span><a class="code" href="structhash.html">hash</a> *<a class="code" href="structhash.html">hash</a>;
<a name="l00033"></a>00033 
<a name="l00034"></a>00034   hash = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baffb650a6d400aa589c4b90020d6f36ae">MTYPE_HASH</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> hash));
<a name="l00035"></a>00035   hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad72a319703c9c6a8d0ce2a8aec764431">MTYPE_HASH_INDEX</a>,
<a name="l00036"></a>00036              <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structhash__backet.html">hash_backet</a> *) * size);
<a name="l00037"></a>00037   hash-&gt;<a class="code" href="structhash.html#ad58883cffca7225da64e2569ada98ffb">size</a> = <a class="code" href="structhash.html#ad58883cffca7225da64e2569ada98ffb">size</a>;
<a name="l00038"></a>00038   hash-&gt;<a class="code" href="structhash.html#ac92ed84876daaffa7b8aa9199265fabd">hash_key</a> = <a class="code" href="structhash.html#ac92ed84876daaffa7b8aa9199265fabd">hash_key</a>;
<a name="l00039"></a>00039   hash-&gt;<a class="code" href="structhash.html#af8628111238df82b2d631281ea64e8e6">hash_cmp</a> = <a class="code" href="structhash.html#af8628111238df82b2d631281ea64e8e6">hash_cmp</a>;
<a name="l00040"></a>00040   hash-&gt;<a class="code" href="structhash.html#a4d82055a4a52d99ee887d24004fd91d3">count</a> = 0;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042   <span class="keywordflow">return</span> hash;
<a name="l00043"></a>00043 }
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="comment">/* Allocate a new hash with default hash size.  */</span>
<a name="l00046"></a>00046 <span class="keyword">struct </span><a class="code" href="structhash.html">hash</a> *
<a name="l00047"></a><a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">00047</a> <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> (*<a class="code" href="structhash.html#ac92ed84876daaffa7b8aa9199265fabd">hash_key</a>) (<span class="keywordtype">void</span> *), 
<a name="l00048"></a>00048              <span class="keywordtype">int</span> (*<a class="code" href="structhash.html#af8628111238df82b2d631281ea64e8e6">hash_cmp</a>) (<span class="keyword">const</span> <span class="keywordtype">void</span> *, <span class="keyword">const</span> <span class="keywordtype">void</span> *))
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050   <span class="keywordflow">return</span> <a class="code" href="hash_8c.html#a5a114f3e041a28afaf1acfa760728c24">hash_create_size</a> (<a class="code" href="hash_8h.html#a5739747e355fccf120c983d2eb57d9d3">HASHTABSIZE</a>, <a class="code" href="structhash.html#ac92ed84876daaffa7b8aa9199265fabd">hash_key</a>, <a class="code" href="structhash.html#af8628111238df82b2d631281ea64e8e6">hash_cmp</a>);
<a name="l00051"></a>00051 }
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">/* Utility function for hash_get().  When this function is specified</span>
<a name="l00054"></a>00054 <span class="comment">   as alloc_func, return arugment as it is.  This function is used for</span>
<a name="l00055"></a>00055 <span class="comment">   intern already allocated value.  */</span>
<a name="l00056"></a>00056 <span class="keywordtype">void</span> *
<a name="l00057"></a><a class="code" href="hash_8h.html#aeb7e1bce3ad8b220104916d397668d00">00057</a> <a class="code" href="hash_8c.html#ac2705f6d220cf4d8049201e369ff6d62">hash_alloc_intern</a> (<span class="keywordtype">void</span> *arg)
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059   <span class="keywordflow">return</span> arg;
<a name="l00060"></a>00060 }
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">/* Lookup and return hash backet in hash.  If there is no</span>
<a name="l00063"></a>00063 <span class="comment">   corresponding hash backet and alloc_func is specified, create new</span>
<a name="l00064"></a>00064 <span class="comment">   hash backet.  */</span>
<a name="l00065"></a>00065 <span class="keywordtype">void</span> *
<a name="l00066"></a><a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">00066</a> <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (<span class="keyword">struct</span> <a class="code" href="structhash.html">hash</a> *<a class="code" href="structhash.html">hash</a>, <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>, <span class="keywordtype">void</span> * (*alloc_func) (<span class="keywordtype">void</span> *))
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
<a name="l00069"></a>00069   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>;
<a name="l00070"></a>00070   <span class="keywordtype">void</span> *newdata;
<a name="l00071"></a>00071   <span class="keyword">struct </span><a class="code" href="structhash__backet.html">hash_backet</a> *backet;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073   key = (*hash-&gt;<a class="code" href="structhash.html#ac92ed84876daaffa7b8aa9199265fabd">hash_key</a>) (data);
<a name="l00074"></a>00074   index = key % hash-&gt;<a class="code" href="structhash.html#ad58883cffca7225da64e2569ada98ffb">size</a>;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076   <span class="keywordflow">for</span> (backet = hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>[index]; backet != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>; backet = backet-&gt;<a class="code" href="structhash__backet.html#aa074298b0abc2d712d04dba0070f34cf">next</a>) 
<a name="l00077"></a>00077     <span class="keywordflow">if</span> (backet-&gt;<a class="code" href="structhash__backet.html#a54f1c03a2c3a4bba2c37aaa617a907bf">key</a> == key &amp;&amp; (*hash-&gt;<a class="code" href="structhash.html#af8628111238df82b2d631281ea64e8e6">hash_cmp</a>) (backet-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>, <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>))
<a name="l00078"></a>00078       <span class="keywordflow">return</span> backet-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080   <span class="keywordflow">if</span> (alloc_func)
<a name="l00081"></a>00081     {
<a name="l00082"></a>00082       newdata = (*alloc_func) (<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>);
<a name="l00083"></a>00083       <span class="keywordflow">if</span> (newdata == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00084"></a>00084     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086       backet = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167badd2b9550ac951df36dec3f63d3796f94">MTYPE_HASH_BACKET</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structhash__backet.html">hash_backet</a>));
<a name="l00087"></a>00087       backet-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a> = newdata;
<a name="l00088"></a>00088       backet-&gt;<a class="code" href="structhash__backet.html#a54f1c03a2c3a4bba2c37aaa617a907bf">key</a> = <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
<a name="l00089"></a>00089       backet-&gt;<a class="code" href="structhash__backet.html#aa074298b0abc2d712d04dba0070f34cf">next</a> = hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>[index];
<a name="l00090"></a>00090       hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>[index] = backet;
<a name="l00091"></a>00091       hash-&gt;<a class="code" href="structhash.html#a4d82055a4a52d99ee887d24004fd91d3">count</a>++;
<a name="l00092"></a>00092       <span class="keywordflow">return</span> backet-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>;
<a name="l00093"></a>00093     }
<a name="l00094"></a>00094   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00095"></a>00095 }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">/* Hash lookup.  */</span>
<a name="l00098"></a>00098 <span class="keywordtype">void</span> *
<a name="l00099"></a><a class="code" href="hash_8h.html#aaad91ac4c62840bc98939bd2930a8573">00099</a> <a class="code" href="hash_8c.html#afb1c9fb470bb0292adb5f7ed0dd90e71">hash_lookup</a> (<span class="keyword">struct</span> hash *hash, <span class="keywordtype">void</span> *data)
<a name="l00100"></a>00100 {
<a name="l00101"></a>00101   <span class="keywordflow">return</span> <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (hash, data, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00102"></a>00102 }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="comment">/* This function release registered value from specified hash.  When</span>
<a name="l00105"></a>00105 <span class="comment">   release is successfully finished, return the data pointer in the</span>
<a name="l00106"></a>00106 <span class="comment">   hash backet.  */</span>
<a name="l00107"></a>00107 <span class="keywordtype">void</span> *
<a name="l00108"></a><a class="code" href="hash_8h.html#a627bc26aef65c560773ed80cbe72d189">00108</a> <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (<span class="keyword">struct</span> hash *hash, <span class="keywordtype">void</span> *data)
<a name="l00109"></a>00109 {
<a name="l00110"></a>00110   <span class="keywordtype">void</span> *ret;
<a name="l00111"></a>00111   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
<a name="l00112"></a>00112   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index;
<a name="l00113"></a>00113   <span class="keyword">struct </span><a class="code" href="structhash__backet.html">hash_backet</a> *backet;
<a name="l00114"></a>00114   <span class="keyword">struct </span><a class="code" href="structhash__backet.html">hash_backet</a> *pp;
<a name="l00115"></a>00115 
<a name="l00116"></a>00116   key = (*hash-&gt;<a class="code" href="structhash.html#ac92ed84876daaffa7b8aa9199265fabd">hash_key</a>) (data);
<a name="l00117"></a>00117   index = key % hash-&gt;<a class="code" href="structhash.html#ad58883cffca7225da64e2569ada98ffb">size</a>;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119   <span class="keywordflow">for</span> (backet = pp = hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>[index]; backet; backet = backet-&gt;<a class="code" href="structhash__backet.html#aa074298b0abc2d712d04dba0070f34cf">next</a>)
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121       <span class="keywordflow">if</span> (backet-&gt;<a class="code" href="structhash__backet.html#a54f1c03a2c3a4bba2c37aaa617a907bf">key</a> == key &amp;&amp; (*hash-&gt;<a class="code" href="structhash.html#af8628111238df82b2d631281ea64e8e6">hash_cmp</a>) (backet-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>, <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)) 
<a name="l00122"></a>00122     {
<a name="l00123"></a>00123       <span class="keywordflow">if</span> (backet == pp) 
<a name="l00124"></a>00124         hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>[index] = backet-&gt;<a class="code" href="structhash__backet.html#aa074298b0abc2d712d04dba0070f34cf">next</a>;
<a name="l00125"></a>00125       <span class="keywordflow">else</span> 
<a name="l00126"></a>00126         pp-&gt;<a class="code" href="structhash__backet.html#aa074298b0abc2d712d04dba0070f34cf">next</a> = backet-&gt;<a class="code" href="structhash__backet.html#aa074298b0abc2d712d04dba0070f34cf">next</a>;
<a name="l00127"></a>00127 
<a name="l00128"></a>00128       ret = backet-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>;
<a name="l00129"></a>00129       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167badd2b9550ac951df36dec3f63d3796f94">MTYPE_HASH_BACKET</a>, backet);
<a name="l00130"></a>00130       hash-&gt;<a class="code" href="structhash.html#a4d82055a4a52d99ee887d24004fd91d3">count</a>--;
<a name="l00131"></a>00131       <span class="keywordflow">return</span> ret;
<a name="l00132"></a>00132     }
<a name="l00133"></a>00133       pp = backet;
<a name="l00134"></a>00134     }
<a name="l00135"></a>00135   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00136"></a>00136 }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="comment">/* Iterator function for hash.  */</span>
<a name="l00139"></a>00139 <span class="keywordtype">void</span>
<a name="l00140"></a><a class="code" href="hash_8h.html#af4c75d3baba02d03cb3701a73634fa35">00140</a> <a class="code" href="hash_8c.html#a69eb0b2447b78899dac4da27895b41e7">hash_iterate</a> (<span class="keyword">struct</span> hash *hash, 
<a name="l00141"></a>00141           <span class="keywordtype">void</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structhash__backet.html">hash_backet</a> *, <span class="keywordtype">void</span> *), <span class="keywordtype">void</span> *arg)
<a name="l00142"></a>00142 {
<a name="l00143"></a>00143   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00144"></a>00144   <span class="keyword">struct </span><a class="code" href="structhash__backet.html">hash_backet</a> *hb;
<a name="l00145"></a>00145   <span class="keyword">struct </span><a class="code" href="structhash__backet.html">hash_backet</a> *hbnext;
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   <span class="keywordflow">for</span> (i = 0; i &lt; hash-&gt;<a class="code" href="structhash.html#ad58883cffca7225da64e2569ada98ffb">size</a>; i++)
<a name="l00148"></a>00148     <span class="keywordflow">for</span> (hb = hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>[i]; hb; hb = hbnext)
<a name="l00149"></a>00149       {
<a name="l00150"></a>00150     <span class="comment">/* get pointer to next hash backet here, in case (*func)</span>
<a name="l00151"></a>00151 <span class="comment">     * decides to delete hb by calling hash_release</span>
<a name="l00152"></a>00152 <span class="comment">     */</span>
<a name="l00153"></a>00153     hbnext = hb-&gt;<a class="code" href="structhash__backet.html#aa074298b0abc2d712d04dba0070f34cf">next</a>;
<a name="l00154"></a>00154     (*func) (hb, arg);
<a name="l00155"></a>00155       }
<a name="l00156"></a>00156 }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="comment">/* Clean up hash.  */</span>
<a name="l00159"></a>00159 <span class="keywordtype">void</span>
<a name="l00160"></a><a class="code" href="hash_8h.html#afa4284160b344a9aaa9d9dbbc814cac2">00160</a> <a class="code" href="hash_8c.html#aec49275a7c4ae924ed351163af53c8c4">hash_clean</a> (<span class="keyword">struct</span> hash *hash, <span class="keywordtype">void</span> (*free_func) (<span class="keywordtype">void</span> *))
<a name="l00161"></a>00161 {
<a name="l00162"></a>00162   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00163"></a>00163   <span class="keyword">struct </span><a class="code" href="structhash__backet.html">hash_backet</a> *hb;
<a name="l00164"></a>00164   <span class="keyword">struct </span><a class="code" href="structhash__backet.html">hash_backet</a> *<a class="code" href="structhash__backet.html#aa074298b0abc2d712d04dba0070f34cf">next</a>;
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   <span class="keywordflow">for</span> (i = 0; i &lt; hash-&gt;<a class="code" href="structhash.html#ad58883cffca7225da64e2569ada98ffb">size</a>; i++)
<a name="l00167"></a>00167     {
<a name="l00168"></a>00168       <span class="keywordflow">for</span> (hb = hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>[i]; hb; hb = next)
<a name="l00169"></a>00169     {
<a name="l00170"></a>00170       next = hb-&gt;<a class="code" href="structhash__backet.html#aa074298b0abc2d712d04dba0070f34cf">next</a>;
<a name="l00171"></a>00171           
<a name="l00172"></a>00172       <span class="keywordflow">if</span> (free_func)
<a name="l00173"></a>00173         (*free_func) (hb-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>);
<a name="l00174"></a>00174 
<a name="l00175"></a>00175       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167badd2b9550ac951df36dec3f63d3796f94">MTYPE_HASH_BACKET</a>, hb);
<a name="l00176"></a>00176       hash-&gt;<a class="code" href="structhash.html#a4d82055a4a52d99ee887d24004fd91d3">count</a>--;
<a name="l00177"></a>00177     }
<a name="l00178"></a>00178       hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00179"></a>00179     }
<a name="l00180"></a>00180 }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 <span class="comment">/* Free hash memory.  You may call hash_clean before call this</span>
<a name="l00183"></a>00183 <span class="comment">   function.  */</span>
<a name="l00184"></a>00184 <span class="keywordtype">void</span>
<a name="l00185"></a><a class="code" href="hash_8h.html#a07e0389cc3fc1c147d243652938a1b9a">00185</a> <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (<span class="keyword">struct</span> hash *hash)
<a name="l00186"></a>00186 {
<a name="l00187"></a>00187   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad72a319703c9c6a8d0ce2a8aec764431">MTYPE_HASH_INDEX</a>, hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>);
<a name="l00188"></a>00188   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baffb650a6d400aa589c4b90020d6f36ae">MTYPE_HASH</a>, hash);
<a name="l00189"></a>00189 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="hash_8c.html">hash.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
