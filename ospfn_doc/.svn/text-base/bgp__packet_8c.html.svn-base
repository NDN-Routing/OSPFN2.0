<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_packet.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__packet_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_packet.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="network_8h_source.html">network.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="plist_8h_source.html">plist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgpd_8h_source.html">bgpd/bgpd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__table_8h_source.html">bgpd/bgp_table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__dump_8h_source.html">bgpd/bgp_dump.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__attr_8h_source.html">bgpd/bgp_attr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__debug_8h_source.html">bgpd/bgp_debug.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__fsm_8h_source.html">bgpd/bgp_fsm.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__route_8h_source.html">bgpd/bgp_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__packet_8h_source.html">bgpd/bgp_packet.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__open_8h_source.html">bgpd/bgp_open.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__aspath_8h_source.html">bgpd/bgp_aspath.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__community_8h_source.html">bgpd/bgp_community.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__ecommunity_8h_source.html">bgpd/bgp_ecommunity.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__network_8h_source.html">bgpd/bgp_network.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__mplsvpn_8h_source.html">bgpd/bgp_mplsvpn.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__advertise_8h_source.html">bgpd/bgp_advertise.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__vty_8h_source.html">bgpd/bgp_vty.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for bgp_packet.c:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__packet_8c__incl.png" border="0" usemap="#bgpd_2bgp__packet_8c" alt=""/></div>
<map name="bgpd_2bgp__packet_8c" id="bgpd_2bgp__packet_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1111,80,1177,107"/><area shape="rect" id="node49" href="thread_8h.html" title="thread.h" alt="" coords="2029,80,2101,107"/><area shape="rect" id="node51" href="stream_8h.html" title="stream.h" alt="" coords="2253,80,2328,107"/><area shape="rect" id="node53" href="prefix_8h.html" title="prefix.h" alt="" coords="2257,155,2324,181"/><area shape="rect" id="node55" href="sockunion_8h.html" title="sockunion.h" alt="" coords="2543,229,2636,256"/><area shape="rect" id="node57" href="network_8h.html" title="network.h" alt="" coords="2352,80,2435,107"/><area shape="rect" id="node60" href="command_8h.html" title="command.h" alt="" coords="2459,80,2551,107"/><area shape="rect" id="node62" href="log_8h.html" title="log.h" alt="" coords="2126,80,2177,107"/><area shape="rect" id="node65" href="memory_8h.html" title="memory.h" alt="" coords="2627,80,2709,107"/><area shape="rect" id="node68" href="linklist_8h.html" title="linklist.h" alt="" coords="2734,80,2804,107"/><area shape="rect" id="node70" href="plist_8h.html" title="plist.h" alt="" coords="2829,80,2888,107"/><area shape="rect" id="node72" href="bgpd_8h.html" title="bgpd/bgpd.h" alt="" coords="2913,80,3012,107"/><area shape="rect" id="node75" href="bgp__table_8h.html" title="bgpd/bgp_table.h" alt="" coords="3532,155,3663,181"/><area shape="rect" id="node77" href="bgp__dump_8h.html" title="bgpd/bgp_dump.h" alt="" coords="3088,80,3221,107"/><area shape="rect" id="node79" href="bgp__attr_8h.html" title="bgpd/bgp_attr.h" alt="" coords="3059,155,3179,181"/><area shape="rect" id="node81" href="bgp__debug_8h.html" title="bgpd/bgp_debug.h" alt="" coords="3245,80,3384,107"/><area shape="rect" id="node84" href="bgp__fsm_8h.html" title="bgpd/bgp_fsm.h" alt="" coords="3563,80,3684,107"/><area shape="rect" id="node86" href="bgp__route_8h.html" title="bgpd/bgp_route.h" alt="" coords="3408,80,3539,107"/><area shape="rect" id="node89" href="bgp__packet_8h.html" title="bgpd/bgp_packet.h" alt="" coords="3761,80,3900,107"/><area shape="rect" id="node91" href="bgp__open_8h.html" title="bgpd/bgp_open.h" alt="" coords="3925,80,4056,107"/><area shape="rect" id="node93" href="bgp__aspath_8h.html" title="bgpd/bgp_aspath.h" alt="" coords="4081,80,4220,107"/><area shape="rect" id="node95" href="bgp__community_8h.html" title="bgpd/bgp_community.h" alt="" coords="4245,80,4411,107"/><area shape="rect" id="node97" href="bgp__ecommunity_8h.html" title="bgpd/bgp_ecommunity.h" alt="" coords="4435,80,4608,107"/><area shape="rect" id="node99" href="bgp__network_8h.html" title="bgpd/bgp_network.h" alt="" coords="4633,80,4780,107"/><area shape="rect" id="node101" href="bgp__mplsvpn_8h.html" title="bgpd/bgp_mplsvpn.h" alt="" coords="4805,80,4955,107"/><area shape="rect" id="node103" href="bgp__advertise_8h.html" title="bgpd/bgp_advertise.h" alt="" coords="4979,80,5135,107"/><area shape="rect" id="node105" href="bgp__vty_8h.html" title="bgpd/bgp_vty.h" alt="" coords="5159,80,5277,107"/></map>
</div>
</div>
<p><a href="bgp__packet_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (struct <a class="el" href="structstream.html">stream</a> *, struct <a class="el" href="structprefix.html">prefix</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#aa529c538a0a9df61107f11602ca3c524">bgp_packet_delete</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#afa3f4ee76734007f952c560c6e6d3124">bgp_connect_check</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structstream.html">stream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a70551f4df0090523408c9f19d97b97b6">bgp_update_packet</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structstream.html">stream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a5fd59a2d80d58f55d06eaa5d015c893b">bgp_update_packet_eor</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structstream.html">stream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#ae745068443230e6f96f4ea075c0ee8d6">bgp_withdraw_packet</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#abe0b30eef3af58da0c5ae5e870e91851">bgp_default_update_send</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, struct <a class="el" href="structpeer.html">peer</a> *from)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#aa71da9143ef196d665fd6cb773885f61">bgp_default_withdraw_send</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structstream.html">stream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a379c7164298b8b6294eec50512466660">bgp_write_packet</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a2f88d64d5a585237b317b5a98d9fdf29">bgp_write_proceed</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#aa850751bf6d2a251acac9e81a799d97a">bgp_write_notify</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a8b6e388946a87579949ef337af70d3b2">bgp_keepalive_send</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#ae1767b91e9e958ab92372f1e2af46c2b">bgp_open_send</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_char code, u_char sub_code, u_char *data, size_t datalen)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_char code, u_char sub_code)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_char orf_type, u_char when_to_refresh, int remove)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a132f1ba13128e1fa1837b9c01239dc85">bgp_capability_send</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, int capability_code, int action)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a811fe9db59d5e1f485a38f8509b5d6b1">bgp_collision_detect</a> (struct <a class="el" href="structpeer.html">peer</a> *new, struct in_addr remote_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a97f0b0875f50fbbba10f0938e820075e">bgp_open_receive</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a43a9bbf186d894f26c76480c541ca436">bgp_update_receive</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a695a91d3e1f6a6ec619c0397c27c7e71">bgp_notify_receive</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a7541e468418602cf15e6e5244f880ca5">bgp_keepalive_receive</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a74d7b10930867d6ff40854fba54736a3">bgp_route_refresh_receive</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a82eb04635adbeab2d9def6dacd24f3b5">bgp_capability_msg_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_char *pnt, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#ad9b67c079a9d84a3091831acc2a15e2f">bgp_capability_receive</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a88e8d1d76630adbf1345f4f64560e377">bgp_read_packet</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#ae3982eb6a6b11aa51844ea259f63aa49">bgp_marker_all_one</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, int <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__packet_8c.html#a3a37390260357b584d8fd7b3591b2058">bgp_read</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a82eb04635adbeab2d9def6dacd24f3b5"></a><!-- doxytag: member="bgp_packet.c::bgp_capability_msg_parse" ref="a82eb04635adbeab2d9def6dacd24f3b5" args="(struct peer *peer, u_char *pnt, bgp_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_capability_msg_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>pnt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l02112">2112</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char *end;
  <span class="keyword">struct </span><a class="code" href="structcapability__mp__data.html">capability_mp_data</a> <a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>;
  <span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> *hdr;
  u_char action;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;

  bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
  end = pnt + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  <span class="keywordflow">while</span> (pnt &lt; end)
    {      
      <span class="comment">/* We need at least action, capability code and capability length. */</span>
      <span class="keywordflow">if</span> (pnt + 3 &gt; end)
        {
          <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Capability length error&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
          <span class="keywordflow">return</span> -1;
        }
      action = *pnt;
      hdr = (<span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> *)(pnt + 1);
      
      <span class="comment">/* Action value check.  */</span>
      <span class="keywordflow">if</span> (action != <a class="code" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a>
      &amp;&amp; action != <a class="code" href="bgp__open_8h.html#af5dd57265f518ffafc0fdb1957a7b706">CAPABILITY_ACTION_UNSET</a>)
        {
          <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Capability Action Value error %d&quot;</span>,
             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, action);
          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
          <span class="keywordflow">return</span> -1;
        }

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s CAPABILITY has action: %d, code: %u, length %u&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, action, hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>, hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>);

      <span class="comment">/* Capability length check. */</span>
      <span class="keywordflow">if</span> ((pnt + hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 3) &gt; end)
        {
          <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Capability length error&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
          <span class="keywordflow">return</span> -1;
        }

      <span class="comment">/* Fetch structure to the byte stream. */</span>
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>, pnt + 3, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcapability__mp__data.html">capability_mp_data</a>));

      <span class="comment">/* We know MP Capability Code. */</span>
      <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>)
        {
      afi = ntohs (<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>);
      safi = <a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>;

          <span class="comment">/* Ignore capability when override-capability is set. */</span>
          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
        <span class="keywordflow">continue</span>;
          
          <span class="keywordflow">if</span> (!<a class="code" href="bgp__open_8c.html#aa9bd7a6fd45645368bfa07d3a9b4ea7b">bgp_afi_safi_valid_indices</a> (afi, &amp;safi))
            {
              <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Dynamic Capability MP_EXT afi/safi invalid &quot;</span>
                            <span class="stringliteral">&quot;(%u/%u)&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
              <span class="keywordflow">continue</span>;
            }
          
      <span class="comment">/* Address family check.  */</span>
          <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s CAPABILITY has %s MP_EXT CAP for afi/safi: %u/%u&quot;</span>,
                       peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
                       action == <a class="code" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a> 
                       ? <span class="stringliteral">&quot;Advertising&quot;</span> : <span class="stringliteral">&quot;Removing&quot;</span>,
                       ntohs(<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>) , <a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>);
              
          <span class="keywordflow">if</span> (action == <a class="code" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a>)
            {
              peer-&gt;<a class="code" href="structpeer.html#a69bf8dd8a30764344085b68b398dd619">afc_recv</a>[afi][safi] = 1;
              <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
                {
                  peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] = 1;
                  <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);
                }
            }
          <span class="keywordflow">else</span>
            {
              peer-&gt;<a class="code" href="structpeer.html#a69bf8dd8a30764344085b68b398dd619">afc_recv</a>[afi][safi] = 0;
              peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] = 0;

              <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a21e9fbe5ad7e478f84d9e61379bbe9b2">peer_active_nego</a> (peer))
                <a class="code" href="bgp__route_8c.html#a6b07bcee214a0802a945370276bb213e">bgp_clear_route</a> (peer, afi, safi, <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a362c076b1b729ff5b2c64125e029bb83">BGP_CLEAR_ROUTE_NORMAL</a>);
              <span class="keywordflow">else</span>
                <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
            }
        }
      <span class="keywordflow">else</span>
        {
          <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s unrecognized capability code: %d - ignored&quot;</span>,
                     peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);
        }
      pnt += hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 3;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad9b67c079a9d84a3091831acc2a15e2f"></a><!-- doxytag: member="bgp_packet.c::bgp_capability_receive" ref="ad9b67c079a9d84a3091831acc2a15e2f" args="(struct peer *peer, bgp_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_capability_receive </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l02223">2223</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char *pnt;

  <span class="comment">/* Fetch pointer. */</span>
  pnt = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcv CAPABILITY&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);

  <span class="comment">/* If peer does not have the capability, send notification. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a3836f3a28c34e009bf7c06d7ea751686">PEER_CAP_DYNAMIC_ADV</a>))
    {
      <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Error] BGP dynamic capability is not enabled&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
               <a class="code" href="bgpd_8h.html#a8a435e0e2033f183fcd82cfe4ed59443">BGP_NOTIFY_HEADER_ERR</a>,
               <a class="code" href="bgpd_8h.html#a61d92861d20bda6984fa61f01a59fb16">BGP_NOTIFY_HEADER_BAD_MESTYPE</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Status must be Established. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    {
      <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
        <span class="stringliteral">&quot;%s [Error] Dynamic capability packet received under status %s&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#af56552e5c55a4c8733dfee55beddb2f8">BGP_NOTIFY_FSM_ERR</a>, 0);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Parse packet. */</span>
  <span class="keywordflow">return</span> <a class="code" href="bgp__packet_8c.html#a82eb04635adbeab2d9def6dacd24f3b5">bgp_capability_msg_parse</a> (peer, pnt, size);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a132f1ba13128e1fa1837b9c01239dc85"></a><!-- doxytag: member="bgp_packet.c::bgp_capability_send" ref="a132f1ba13128e1fa1837b9c01239dc85" args="(struct peer *peer, afi_t afi, safi_t safi, int capability_code, int action)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_capability_send </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>capability_code</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>action</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l01022">1022</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  <span class="comment">/* Adjust safi code. */</span>
  <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
    safi = <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>;

  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);

  <span class="comment">/* Make BGP update packet. */</span>
  <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a>);

  <span class="comment">/* Encode MP_EXT capability. */</span>
  <span class="keywordflow">if</span> (capability_code == <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, action);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, afi);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending CAPABILITY has %s MP_EXT CAP for afi/safi: %d/%d&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, action == <a class="code" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a> ?
           <span class="stringliteral">&quot;Advertising&quot;</span> : <span class="stringliteral">&quot;Removing&quot;</span>, afi, safi);
    }

  <span class="comment">/* Set packet size. */</span>
  length = <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);

  <span class="comment">/* Make real packet. */</span>
  packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);

  <span class="comment">/* Add packet to the peer. */</span>
  <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s send message type %d, length (incl. header) %d&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a>, length);

  <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a811fe9db59d5e1f485a38f8509b5d6b1"></a><!-- doxytag: member="bgp_packet.c::bgp_collision_detect" ref="a811fe9db59d5e1f485a38f8509b5d6b1" args="(struct peer *new, struct in_addr remote_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_collision_detect </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>new</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>remote_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l01073">1073</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;

  bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
  <span class="keywordflow">if</span> (! bgp)
    <span class="keywordflow">return</span> 0;
  
  <span class="comment">/* Upon receipt of an OPEN message, the local system must examine</span>
<span class="comment">     all of its connections that are in the OpenConfirm state.  A BGP</span>
<span class="comment">     speaker may also examine connections in an OpenSent state if it</span>
<span class="comment">     knows the BGP Identifier of the peer by means outside of the</span>
<span class="comment">     protocol.  If among these connections there is a connection to a</span>
<span class="comment">     remote BGP speaker whose BGP Identifier equals the one in the</span>
<span class="comment">     OPEN message, then the local system performs the following</span>
<span class="comment">     collision resolution procedure: */</span>

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
    {
      <span class="comment">/* Under OpenConfirm status, local peer structure already hold</span>
<span class="comment">         remote router ID. */</span>

      <span class="keywordflow">if</span> (peer != <span class="keyword">new</span>
      &amp;&amp; (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#a0bf5b4ab03c60ff4c23c94a1d683b0b9">OpenConfirm</a> || peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#a1873a46d77babce8de80c71ce1624718">OpenSent</a>)
      &amp;&amp; <a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, &amp;new-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>))
    {
      <span class="comment">/* 1. The BGP Identifier of the local system is compared to</span>
<span class="comment">         the BGP Identifier of the remote system (as specified in</span>
<span class="comment">         the OPEN message). */</span>

      <span class="keywordflow">if</span> (ntohl (peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>.s_addr) &lt; ntohl (remote_id.s_addr))
        {
          <span class="comment">/* 2. If the value of the local BGP Identifier is less</span>
<span class="comment">         than the remote one, the local system closes BGP</span>
<span class="comment">         connection that already exists (the one that is</span>
<span class="comment">         already in the OpenConfirm state), and accepts BGP</span>
<span class="comment">         connection initiated by the remote system. */</span>

          <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0)
        <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, <a class="code" href="bgpd_8h.html#a1a56da3ecfc587ca3c5ccc7ce1afc88d">BGP_NOTIFY_CEASE_COLLISION_RESOLUTION</a>);
          <span class="keywordflow">return</span> 1;
        }
      <span class="keywordflow">else</span>
        {
          <span class="comment">/* 3. Otherwise, the local system closes newly created</span>
<span class="comment">         BGP connection (the one associated with the newly</span>
<span class="comment">         received OPEN message), and continues to use the</span>
<span class="comment">         existing one (the one that is already in the</span>
<span class="comment">         OpenConfirm state). */</span>

          <span class="keywordflow">if</span> (new-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0)
        <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<span class="keyword">new</span>, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 
                     <a class="code" href="bgpd_8h.html#a1a56da3ecfc587ca3c5ccc7ce1afc88d">BGP_NOTIFY_CEASE_COLLISION_RESOLUTION</a>);
          <span class="keywordflow">return</span> -1;
        }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afa3f4ee76734007f952c560c6e6d3124"></a><!-- doxytag: member="bgp_packet.c::bgp_connect_check" ref="afa3f4ee76734007f952c560c6e6d3124" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_connect_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00104">104</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> status;
  <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> slen;
  <span class="keywordtype">int</span> ret;

  <span class="comment">/* Anyway I have to reset read and write thread. */</span>
  <a class="code" href="bgp__fsm_8h.html#abda2b4012d32bfc561f7c97e37263bbe">BGP_READ_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a>);
  <a class="code" href="bgp__fsm_8h.html#a49884b788209354868be2e7e580584ce">BGP_WRITE_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>);

  <span class="comment">/* Check file descriptor. */</span>
  slen = <span class="keyword">sizeof</span> (status);
  ret = getsockopt(peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, SOL_SOCKET, SO_ERROR, (<span class="keywordtype">void</span> *) &amp;status, &amp;slen);

  <span class="comment">/* If getsockopt is fail, this is fatal error. */</span>
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_INFO, <span class="stringliteral">&quot;can&#39;t get sockopt for nonblocking connect&quot;</span>);
      <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#ab37344e5380c17e5b2c9be898d63ca67">TCP_fatal_error</a>);
      <span class="keywordflow">return</span>;
    }      

  <span class="comment">/* When status is 0 then TCP connection is established. */</span>
  <span class="keywordflow">if</span> (status == 0)
    {
      <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a752a14bd3217eb3b705dd20e50824eef">TCP_connection_open</a>);
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
      <a class="code" href="log_8h.html#a901efa2487b25c3a74846a52de919565">plog_debug</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Event] Connect failed (%s)&quot;</span>,
             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a3e6d939d6f371d5d5d6c61299c40a870">TCP_connection_open_failed</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="abe0b30eef3af58da0c5ae5e870e91851"></a><!-- doxytag: member="bgp_packet.c::bgp_default_update_send" ref="abe0b30eef3af58da0c5ae5e870e91851" args="(struct peer *peer, struct attr *attr, afi_t afi, safi_t safi, struct peer *from)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_default_update_send </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>from</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00360">360</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pos;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total_attr_len;
  <span class="keywordtype">char</span> attrstr[BUFSIZ];
  <span class="keywordtype">char</span> buf[BUFSIZ];

  <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
    <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="stringliteral">&quot;0.0.0.0/0&quot;</span>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">else</span> 
    <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="stringliteral">&quot;::/0&quot;</span>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="comment">/* Logging the attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_OUT))
    {
      <a class="code" href="bgp__debug_8c.html#a32d8ae5f48b2bf76b0a7c13182b2943f">bgp_dump_attr</a> (peer, attr, attrstr, BUFSIZ);
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s send UPDATE %s/%d %s&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family, &amp;(<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.u.prefix), buf, BUFSIZ),
        <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen, attrstr);
    }

  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);

  <span class="comment">/* Make BGP update packet. */</span>
  <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>);

  <span class="comment">/* Unfeasible Routes Length. */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);

  <span class="comment">/* Make place for total attribute length.  */</span>
  pos = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
  total_attr_len = <a class="code" href="bgp__attr_8c.html#afa6f3d227d043fc17b75503ec1b840f6">bgp_packet_attribute</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, peer, s, attr, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, afi, safi, from, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="comment">/* Set Total Path Attribute Length. */</span>
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, pos, total_attr_len);

  <span class="comment">/* NLRI set. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family == AF_INET &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
    <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* Set size. */</span>
  <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);

  packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);

  <span class="comment">/* Dump packet if debug option is set. */</span>
<span class="preprocessor">#ifdef DEBUG</span>
<span class="preprocessor"></span>  <span class="comment">/* bgp_packet_dump (packet); */</span>
<span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>

  <span class="comment">/* Add packet to the peer. */</span>
  <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);

  <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa71da9143ef196d665fd6cb773885f61"></a><!-- doxytag: member="bgp_packet.c::bgp_default_withdraw_send" ref="aa71da9143ef196d665fd6cb773885f61" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_default_withdraw_send </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00428">428</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pos;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> unfeasible_len;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total_attr_len;
  <span class="keywordtype">char</span> buf[BUFSIZ];

  <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
    <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="stringliteral">&quot;0.0.0.0/0&quot;</span>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">else</span> 
    <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="stringliteral">&quot;::/0&quot;</span>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  total_attr_len = 0;
  pos = 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_OUT))
    <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s send UPDATE %s/%d -- unreachable&quot;</span>,
          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family, &amp;(<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.u.prefix), buf, BUFSIZ),
          <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen);

  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);

  <span class="comment">/* Make BGP update packet. */</span>
  <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>);

  <span class="comment">/* Unfeasible Routes Length. */</span>;
  cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);

  <span class="comment">/* Withdrawn Routes. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family == AF_INET &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
    {
      <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

      unfeasible_len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp - 2;

      <span class="comment">/* Set unfeasible len.  */</span>
      <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, cp, unfeasible_len);

      <span class="comment">/* Set total path attribute length. */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
    }
  <span class="keywordflow">else</span>
    {
      pos = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
      total_attr_len = <a class="code" href="bgp__attr_8c.html#a307ab4e45f577239562b43a73ef8f3a3">bgp_packet_withdraw</a> (peer, s, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, afi, safi, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

      <span class="comment">/* Set total path attribute length. */</span>
      <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, pos, total_attr_len);
    }

  <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);

  packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);

  <span class="comment">/* Add packet to the peer. */</span>
  <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);

  <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7541e468418602cf15e6e5244f880ca5"></a><!-- doxytag: member="bgp_packet.c::bgp_keepalive_receive" ref="a7541e468418602cf15e6e5244f880ca5" args="(struct peer *peer, bgp_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_keepalive_receive </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l01898">1898</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (keepalive, KEEPALIVE))  
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s KEEPALIVE rcvd&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>); 
  
  <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a1959236cb786947c607c5428d257a994">Receive_KEEPALIVE_message</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8b6e388946a87579949ef337af70d3b2"></a><!-- doxytag: member="bgp_packet.c::bgp_keepalive_send" ref="a8b6e388946a87579949ef337af70d3b2" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_keepalive_send </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00749">749</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);

  <span class="comment">/* Make keepalive packet. */</span>
  <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a>);

  <span class="comment">/* Set packet size. */</span>
  length = <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);

  <span class="comment">/* Dump packet if debug option is set. */</span>
  <span class="comment">/* bgp_packet_dump (s); */</span>
 
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (keepalive, KEEPALIVE))  
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending KEEPALIVE&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>); 
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s send message type %d, length (incl. header) %d&quot;</span>,
               peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a>, length);

  <span class="comment">/* Add packet to the peer. */</span>
  <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, s);

  <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae3982eb6a6b11aa51844ea259f63aa49"></a><!-- doxytag: member="bgp_packet.c::bgp_marker_all_one" ref="ae3982eb6a6b11aa51844ea259f63aa49" args="(struct stream *s, int length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_marker_all_one </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l02328">2328</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>; i++)
    <span class="keywordflow">if</span> (s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>[i] != 0xff)
      <span class="keywordflow">return</span> 0;

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a695a91d3e1f6a6ec619c0397c27c7e71"></a><!-- doxytag: member="bgp_packet.c::bgp_notify_receive" ref="a695a91d3e1f6a6ec619c0397c27c7e71" args="(struct peer *peer, bgp_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_notify_receive </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l01818">1818</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__notify.html">bgp_notify</a> <a class="code" href="structbgp__notify.html">bgp_notify</a>;

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>);
      peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> = 0;
    }

  <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> = size - 2;
  <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Preserv notify code and sub code. */</span>
  peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a> = <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a>;
  peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a> = <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a>;
  <span class="comment">/* For further diagnostic record returned Data. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>)
    {
      peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> = size - 2;
      peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, size - 2);
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), size - 2);
    }

  <span class="comment">/* For debug */</span>
  {
    <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
    <span class="keywordtype">int</span> first = 0;
    <span class="keywordtype">char</span> c[4];

    <span class="keywordflow">if</span> (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>)
      {
    <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> * 3);
    <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>; i++)
      <span class="keywordflow">if</span> (first)
        {
          sprintf (c, <span class="stringliteral">&quot; %02x&quot;</span>, <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>));
          strcat (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>, c);
        }
      <span class="keywordflow">else</span>
        {
          first = 1;
          sprintf (c, <span class="stringliteral">&quot;%02x&quot;</span>, <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>));
          strcpy (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>, c);
        }
      }

    <a class="code" href="bgp__debug_8c.html#a9f3092319ccb5c7d6f684dd7fda40c74">bgp_notify_print</a>(peer, &amp;<a class="code" href="structbgp__notify.html">bgp_notify</a>, <span class="stringliteral">&quot;received&quot;</span>);
    <span class="keywordflow">if</span> (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>)
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>);
  }

  <span class="comment">/* peer count update */</span>
  peer-&gt;<a class="code" href="structpeer.html#ac87703f5a1621676779a0603453ff203">notify_in</a>++;

  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a4a7fae7dbb89c37cd471118e667f32f6">PEER_DOWN_NOTIFY_RECEIVED</a>;

  <span class="comment">/* We have to check for Notify with Unsupported Optional Parameter.</span>
<span class="comment">     in that case we fallback to open without the capability option.</span>
<span class="comment">     But this done in bgp_stop. We just mark it here to avoid changing</span>
<span class="comment">     the fsm tables.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a> == <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a> &amp;&amp;
      <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a> == <a class="code" href="bgpd_8h.html#a2fddbc10056aaf1a667e79c2bdbeff15">BGP_NOTIFY_OPEN_UNSUP_PARAM</a> )
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a9a660ebeb4fec952cc45f6945a6f1722">PEER_STATUS_CAPABILITY_OPEN</a>);

  <span class="comment">/* Also apply to Unsupported Capability until remote router support</span>
<span class="comment">     capability. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a> == <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a> &amp;&amp;
      <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a> == <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>)
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a9a660ebeb4fec952cc45f6945a6f1722">PEER_STATUS_CAPABILITY_OPEN</a>);

  <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a4c82d87743108d19ecb5c21294ab1b91">Receive_NOTIFICATION_message</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac17989ee6afabce09c9d326fbbf6607b"></a><!-- doxytag: member="bgp_packet.c::bgp_notify_send" ref="ac17989ee6afabce09c9d326fbbf6607b" args="(struct peer *peer, u_char code, u_char sub_code)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_notify_send </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>code</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>sub_code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00918">918</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, <a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a>, sub_code, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a451c099a790874d1bca55ccb2c4a4057"></a><!-- doxytag: member="bgp_packet.c::bgp_notify_send_with_data" ref="a451c099a790874d1bca55ccb2c4a4057" args="(struct peer *peer, u_char code, u_char sub_code, u_char *data, size_t datalen)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_notify_send_with_data </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>code</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>sub_code</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>datalen</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00835">835</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  <span class="comment">/* Allocate new stream. */</span>
  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);

  <span class="comment">/* Make nitify packet. */</span>
  <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a>);

  <span class="comment">/* Set notify packet values. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, code);        <span class="comment">/* BGP notify code */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, sub_code);    <span class="comment">/* BGP notify sub_code */</span>

  <span class="comment">/* If notify data is present. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)
    <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (s, <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>, datalen);
  
  <span class="comment">/* Set BGP packet length. */</span>
  length = <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
  
  <span class="comment">/* Add packet to the peer. */</span>
  <a class="code" href="stream_8c.html#a9e1a6e68edeeb87d009b54c7c2b22365">stream_fifo_clean</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>);
  <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, s);

  <span class="comment">/* For debug */</span>
  {
    <span class="keyword">struct </span><a class="code" href="structbgp__notify.html">bgp_notify</a> <a class="code" href="structbgp__notify.html">bgp_notify</a>;
    <span class="keywordtype">int</span> first = 0;
    <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
    <span class="keywordtype">char</span> c[4];

    <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a> = <a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a>;
    <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a> = sub_code;
    <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> = length - <a class="code" href="bgpd_8h.html#a8ec4c7e03d72e64bccae551622d5b3b0">BGP_MSG_NOTIFY_MIN_SIZE</a>;
    
    <span class="keywordflow">if</span> (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>)
      {
    <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> * 3);
    <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>; i++)
      <span class="keywordflow">if</span> (first)
        {
          sprintf (c, <span class="stringliteral">&quot; %02x&quot;</span>, <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>[i]);
          strcat (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>, c);
        }
      <span class="keywordflow">else</span>
        {
          first = 1;
          sprintf (c, <span class="stringliteral">&quot;%02x&quot;</span>, <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>[i]);
          strcpy (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>, c);
        }
      }
    <a class="code" href="bgp__debug_8c.html#a9f3092319ccb5c7d6f684dd7fda40c74">bgp_notify_print</a> (peer, &amp;<a class="code" href="structbgp__notify.html">bgp_notify</a>, <span class="stringliteral">&quot;sending&quot;</span>);
    <span class="keywordflow">if</span> (<a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>)
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, <a class="code" href="structbgp__notify.html">bgp_notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>);
  }

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s send message type %d, length (incl. header) %d&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a>, length);

  <span class="comment">/* peer reset cause */</span>
  <span class="keywordflow">if</span> (sub_code != <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>)
    {
      <span class="keywordflow">if</span> (sub_code == <a class="code" href="bgpd_8h.html#ae1672a288d642f221bb61ab2cb63e354">BGP_NOTIFY_CEASE_ADMIN_RESET</a>)
      peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#aabe57499083bfc468ad2e4136556f59f">PEER_DOWN_USER_RESET</a>;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (sub_code == <a class="code" href="bgpd_8h.html#af9421e5cbfffb8ca7839d448d1b816b0">BGP_NOTIFY_CEASE_ADMIN_SHUTDOWN</a>)
      peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a1526a96200c5cd901303b8652088d291">PEER_DOWN_USER_SHUTDOWN</a>;
      <span class="keywordflow">else</span>
      peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ab5d2095460394a99e752d6fe56cfa6c0">PEER_DOWN_NOTIFY_SEND</a>;
    }

  <span class="comment">/* Call imidiately. */</span>
  <a class="code" href="bgp__fsm_8h.html#a49884b788209354868be2e7e580584ce">BGP_WRITE_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>);

  <a class="code" href="bgp__packet_8c.html#aa850751bf6d2a251acac9e81a799d97a">bgp_write_notify</a> (peer);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a97f0b0875f50fbbba10f0938e820075e"></a><!-- doxytag: member="bgp_packet.c::bgp_open_receive" ref="a97f0b0875f50fbbba10f0938e820075e" args="(struct peer *peer, bgp_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_open_receive </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l01136">1136</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
  u_char optlen;
  u_int16_t <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>;
  u_int16_t send_holdtime;
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> remote_as;
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4 = 0;
  <span class="keyword">struct </span>peer *realpeer;
  <span class="keyword">struct </span>in_addr remote_id;
  <span class="keywordtype">int</span> capability;
  u_int8_t notify_data_remote_as[2];
  u_int8_t notify_data_remote_id[4];

  realpeer = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  
  <span class="comment">/* Parse open packet. */</span>
  version = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (notify_data_remote_as, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), 2);
  remote_as  = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  holdtime = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (notify_data_remote_id, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), 4);
  remote_id.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);

  <span class="comment">/* Receive OPEN message log  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcv OPEN, version %d, remote-as (in open) %u,&quot;</span>
                <span class="stringliteral">&quot; holdtime %d, id %s&quot;</span>,
            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, version, remote_as, holdtime,
            inet_ntoa (remote_id));
  
  <span class="comment">/* BEGIN to read the capability here, but dont do it yet */</span>
  capability = 0;
  optlen = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  
  <span class="keywordflow">if</span> (optlen != 0)
    {
      <span class="comment">/* We need the as4 capability value *right now* because</span>
<span class="comment">       * if it is there, we have not got the remote_as yet, and without</span>
<span class="comment">       * that we do not know which peer is connecting to us now.</span>
<span class="comment">       */</span> 
      as4 = <a class="code" href="bgp__open_8c.html#aa94f4ded4a8074c681b0e153744fed37">peek_for_as4_capability</a> (peer, optlen);
    }
  
  <span class="comment">/* Just in case we have a silly peer who sends AS4 capability set to 0 */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>) &amp;&amp; !as4)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s bad OPEN, got AS4 capability, but AS4 set to 0&quot;</span>,
                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>,
                       <a class="code" href="bgpd_8h.html#a40bb6566865df4b899e2f4f271bb40f5">BGP_NOTIFY_OPEN_BAD_PEER_AS</a>);
      <span class="keywordflow">return</span> -1;
    }
  
  <span class="keywordflow">if</span> (remote_as == <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a>)
    {
      <span class="comment">/* Take the AS4 from the capability.  We must have received the</span>
<span class="comment">       * capability now!  Otherwise we have a asn16 peer who uses</span>
<span class="comment">       * BGP_AS_TRANS, for some unknown reason.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (as4 == <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a>)
        {
          <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s [AS4] NEW speaker using AS_TRANS for AS4, not allowed&quot;</span>,
                    peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>,
                 <a class="code" href="bgpd_8h.html#a40bb6566865df4b899e2f4f271bb40f5">BGP_NOTIFY_OPEN_BAD_PEER_AS</a>);
          <span class="keywordflow">return</span> -1;
        }
      
      <span class="keywordflow">if</span> (!as4 &amp;&amp; <a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [AS4] OPEN remote_as is AS_TRANS, but no AS4.&quot;</span>
                    <span class="stringliteral">&quot; Odd, but proceeding.&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (as4 &lt; <a class="code" href="bgp__aspath_8h.html#a5a3365c8e7924ca85bd9675dc6597908">BGP_AS_MAX</a> &amp;&amp; <a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [AS4] OPEN remote_as is AS_TRANS, but AS4 (%u) fits &quot;</span>
                    <span class="stringliteral">&quot;in 2-bytes, very odd peer.&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, as4);
      <span class="keywordflow">if</span> (as4)
        remote_as = as4;
    } 
  <span class="keywordflow">else</span> 
    {
      <span class="comment">/* We may have a partner with AS4 who has an asno &lt; BGP_AS_MAX */</span>
      <span class="comment">/* If we have got the capability, peer-&gt;as4cap must match remote_as */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>)
          &amp;&amp; as4 != remote_as)
        {
      <span class="comment">/* raise error, log this, close session */</span>
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s bad OPEN, got AS4 capability, but remote_as %u&quot;</span>
                <span class="stringliteral">&quot; mismatch with 16bit &#39;myasn&#39; %u in open&quot;</span>,
                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, as4, remote_as);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>,
               <a class="code" href="bgpd_8h.html#a40bb6566865df4b899e2f4f271bb40f5">BGP_NOTIFY_OPEN_BAD_PEER_AS</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* Lookup peer from Open packet. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
    {
      <span class="keywordtype">int</span> as = 0;

      realpeer = <a class="code" href="bgpd_8c.html#a38fe2d829b66f299b42e47bd2d3d5a6c">peer_lookup_with_open</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, remote_as, &amp;remote_id, &amp;as);

      <span class="keywordflow">if</span> (! realpeer)
    {
      <span class="comment">/* Peer&#39;s source IP address is check in bgp_accept(), so this</span>
<span class="comment">         must be AS number mismatch or remote-id configuration</span>
<span class="comment">         mismatch. */</span>
      <span class="keywordflow">if</span> (as)
        {
          <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s bad OPEN, wrong router identifier %s&quot;</span>,
                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, inet_ntoa (remote_id));
          <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
                     <a class="code" href="bgpd_8h.html#a523800f0ae18023edb46e21359fb2904">BGP_NOTIFY_OPEN_BAD_BGP_IDENT</a>,
                     notify_data_remote_id, 4);
        }
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s bad OPEN, remote AS is %u, expected %u&quot;</span>,
                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, remote_as, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
          <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>,
                     <a class="code" href="bgpd_8h.html#a40bb6566865df4b899e2f4f271bb40f5">BGP_NOTIFY_OPEN_BAD_PEER_AS</a>,
                     notify_data_remote_as, 2);
        }
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* When collision is detected and this peer is closed.  Retrun</span>
<span class="comment">     immidiately. */</span>
  ret = <a class="code" href="bgp__packet_8c.html#a811fe9db59d5e1f485a38f8509b5d6b1">bgp_collision_detect</a> (peer, remote_id);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;

  <span class="comment">/* Hack part. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
    {
    <span class="keywordflow">if</span> (realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>
        &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (realpeer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4ff62dffb922440e74de66efee6f8f42">PEER_STATUS_NSF_MODE</a>))
    {
      realpeer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6d8edd574001f795d4969c0f389364c0">PEER_DOWN_NSF_CLOSE_SESSION</a>;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (realpeer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>);
    }
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ret == 0 &amp;&amp; realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a3e4aba4f7d3a690fdce5d1fe31156421">Active</a>
             &amp;&amp; realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a1873a46d77babce8de80c71ce1624718">OpenSent</a>
         &amp;&amp; realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a0bf5b4ab03c60ff4c23c94a1d683b0b9">OpenConfirm</a>
         &amp;&amp; realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a58672521fe155cead3bd1f0653be62ee">Connect</a>)
    {
      <span class="comment">/* XXX: This is an awful problem.. </span>
<span class="comment">       *</span>
<span class="comment">       * According to the RFC we should just let this connection (of the</span>
<span class="comment">       * accepted &#39;peer&#39;) continue on to Established if the other</span>
<span class="comment">       * connection (the &#39;realpeer&#39; one) is in state Connect, and deal</span>
<span class="comment">       * with the more larval FSM as/when it gets far enough to receive</span>
<span class="comment">       * an Open. We don&#39;t do that though, we instead close the (more</span>
<span class="comment">       * developed) accepted connection.</span>
<span class="comment">       *</span>
<span class="comment">       * This means there&#39;s a race, which if hit, can loop:</span>
<span class="comment">       *</span>
<span class="comment">       *       FSM for A                        FSM for B</span>
<span class="comment">       *  realpeer     accept-peer       realpeer     accept-peer</span>
<span class="comment">       *</span>
<span class="comment">       *  Connect                        Connect</span>
<span class="comment">       *               Active</span>
<span class="comment">       *               OpenSent          OpenSent</span>
<span class="comment">       *               &lt;arrive here,</span>
<span class="comment">       *               Notify, delete&gt;   </span>
<span class="comment">       *                                 Idle         Active</span>
<span class="comment">       *   OpenSent                                   OpenSent</span>
<span class="comment">       *                                              &lt;arrive here,</span>
<span class="comment">       *                                              Notify, delete&gt;</span>
<span class="comment">       *   Idle</span>
<span class="comment">       *   &lt;wait&gt;                        &lt;wait&gt;</span>
<span class="comment">       *   Connect                       Connect</span>
<span class="comment">       *</span>
<span class="comment">           *</span>
<span class="comment">       * If both sides are Quagga, they&#39;re almost certain to wait for</span>
<span class="comment">       * the same amount of time of course (which doesn&#39;t preclude other</span>
<span class="comment">       * implementations also waiting for same time). The race is</span>
<span class="comment">       * exacerbated by high-latency (in bgpd and/or the network).</span>
<span class="comment">       *</span>
<span class="comment">       * The reason we do this is because our FSM is tied to our peer</span>
<span class="comment">       * structure, which carries our configuration information, etc. </span>
<span class="comment">       * I.e. we can&#39;t let the accepted-peer FSM continue on as it is,</span>
<span class="comment">       * cause it&#39;s not associated with any actual peer configuration -</span>
<span class="comment">       * it&#39;s just a dummy.</span>
<span class="comment">       *</span>
<span class="comment">       * It&#39;s possible we could hack-fix this by just bgp_stop&#39;ing the</span>
<span class="comment">       * realpeer and continueing on with the &#39;transfer FSM&#39; below. </span>
<span class="comment">       * Ideally, we need to seperate FSMs from struct peer.</span>
<span class="comment">       *</span>
<span class="comment">       * Setting one side to passive avoids the race, as a workaround.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s peer status is %s close connection&quot;</span>,
            realpeer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>,
            realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
               <a class="code" href="bgpd_8h.html#aca678413e6c438a242f9be167636c2eb">BGP_NOTIFY_CEASE_CONNECT_REJECT</a>);

      <span class="keywordflow">return</span> -1;
    }

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [Event] Transfer accept BGP peer to real (state %s)&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, 
           <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));

      <a class="code" href="bgp__fsm_8c.html#a70832c80e2f7e40a453d23689818d84a">bgp_stop</a> (realpeer);
      
      <span class="comment">/* Transfer file descriptor. */</span>
      realpeer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> = peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>;
      peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> = -1;

      <span class="comment">/* Transfer input buffer. */</span>
      <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (realpeer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
      realpeer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a> = peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>;
      realpeer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a>;
      peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <span class="comment">/* Transfer status. */</span>
      realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> = peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>;
      <a class="code" href="bgp__fsm_8c.html#a70832c80e2f7e40a453d23689818d84a">bgp_stop</a> (peer);
      
      <span class="comment">/* peer pointer change. Open packet send to neighbor. */</span>
      peer = realpeer;
      <a class="code" href="bgp__packet_8c.html#ae1767b91e9e958ab92372f1e2af46c2b">bgp_open_send</a> (peer);
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &lt; 0)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;bgp_open_receive peer&#39;s fd is negative value %d&quot;</span>,
            peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
      <span class="keywordflow">return</span> -1;
    }
      <a class="code" href="bgp__fsm_8h.html#a62b5746c9e6a92bffde54f2dc61557d7">BGP_READ_ON</a> (peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a>, <a class="code" href="bgp__packet_8c.html#a3a37390260357b584d8fd7b3591b2058">bgp_read</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
    }

  <span class="comment">/* remote router-id check. */</span>
  <span class="keywordflow">if</span> (remote_id.s_addr == 0
      || ntohl (remote_id.s_addr) &gt;= 0xe0000000
      || ntohl (peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>.s_addr) == ntohl (remote_id.s_addr))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s bad OPEN, wrong router identifier %s&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, inet_ntoa (remote_id));
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#a523800f0ae18023edb46e21359fb2904">BGP_NOTIFY_OPEN_BAD_BGP_IDENT</a>,
                 notify_data_remote_id, 4);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Set remote router-id */</span>
  peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a> = remote_id;

  <span class="comment">/* Peer BGP version check. */</span>
  <span class="keywordflow">if</span> (version != <a class="code" href="bgpd_8h.html#a9379703a2ec6cf40b147ec96a7777ef3">BGP_VERSION_4</a>)
    {
      u_int8_t maxver = <a class="code" href="bgpd_8h.html#a9379703a2ec6cf40b147ec96a7777ef3">BGP_VERSION_4</a>;
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s bad protocol version, remote requested %d, local request %d&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, version, <a class="code" href="bgpd_8h.html#a9379703a2ec6cf40b147ec96a7777ef3">BGP_VERSION_4</a>);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#ab7bf59c5dba1fe9d921cefa56b91688b">BGP_NOTIFY_OPEN_UNSUP_VERSION</a>,
                 &amp;maxver, 1);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Check neighbor as number. */</span>
  <span class="keywordflow">if</span> (remote_as != peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s bad OPEN, remote AS is %u, expected %u&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, remote_as, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                 <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#a40bb6566865df4b899e2f4f271bb40f5">BGP_NOTIFY_OPEN_BAD_PEER_AS</a>,
                 notify_data_remote_as, 2);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* From the rfc: Upon receipt of an OPEN message, a BGP speaker MUST</span>
<span class="comment">     calculate the value of the Hold Timer by using the smaller of its</span>
<span class="comment">     configured Hold Time and the Hold Time received in the OPEN message.</span>
<span class="comment">     The Hold Time MUST be either zero or at least three seconds.  An</span>
<span class="comment">     implementation may reject connections on the basis of the Hold Time. */</span>

  <span class="keywordflow">if</span> (holdtime &lt; 3 &amp;&amp; holdtime != 0)
    {
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
               <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a57a9d1349581d9e93c50cc7796e31479">BGP_NOTIFY_OPEN_UNACEP_HOLDTIME</a>);
      <span class="keywordflow">return</span> -1;
    }
    
  <span class="comment">/* From the rfc: A reasonable maximum time between KEEPALIVE messages</span>
<span class="comment">     would be one third of the Hold Time interval.  KEEPALIVE messages</span>
<span class="comment">     MUST NOT be sent more frequently than one per second.  An</span>
<span class="comment">     implementation MAY adjust the rate at which it sends KEEPALIVE</span>
<span class="comment">     messages as a function of the Hold Time interval. */</span>

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>))
    send_holdtime = peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>;
  <span class="keywordflow">else</span>
    send_holdtime = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a>;

  <span class="keywordflow">if</span> (holdtime &lt; send_holdtime)
    peer-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> = <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> = send_holdtime;

  peer-&gt;<a class="code" href="structpeer.html#a4683327b18d77b5888cc293b180f01ff">v_keepalive</a> = peer-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> / 3;

  <span class="comment">/* Open option part parse. */</span>
  <span class="keywordflow">if</span> (optlen != 0) 
    {
      ret = <a class="code" href="bgp__open_8c.html#aec7b4d53e9f585305641d2561f7596f0">bgp_open_option_parse</a> (peer, optlen, &amp;capability);
      <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd OPEN w/ OPTION parameter len: 0&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
    }

  <span class="comment">/* Override capability. */</span>
  <span class="keywordflow">if</span> (! capability || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
    {
      peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>];
      peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>];
      peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>];
      peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>];
    }

  <span class="comment">/* Get sockname. */</span>
  <a class="code" href="bgp__network_8c.html#a2079c55451759a453b0f416a16d75f86">bgp_getsockname</a> (peer);

  <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a7b910ae176dbd833e93c13b54d6d9969">Receive_OPEN_message</a>);

  peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = 0;
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>)
    <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae1767b91e9e958ab92372f1e2af46c2b"></a><!-- doxytag: member="bgp_packet.c::bgp_open_send" ref="ae1767b91e9e958ab92372f1e2af46c2b" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_open_send </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00779">779</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  u_int16_t send_holdtime;
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> local_as;

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>))
    send_holdtime = peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>;
  <span class="keywordflow">else</span>
    send_holdtime = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a>;

  <span class="comment">/* local-as Change */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
    local_as = peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>; 
  <span class="keywordflow">else</span>
    local_as = peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>; 

  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);

  <span class="comment">/* Make open packet. */</span>
  <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a>);

  <span class="comment">/* Set open packet values. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a9379703a2ec6cf40b147ec96a7777ef3">BGP_VERSION_4</a>);        <span class="comment">/* BGP version */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, (local_as &lt;= <a class="code" href="bgp__aspath_8h.html#a5a3365c8e7924ca85bd9675dc6597908">BGP_AS_MAX</a>) ? (u_int16_t) local_as 
                                           : <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a>);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, send_holdtime);        <span class="comment">/* Hold Time */</span>
  <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>); <span class="comment">/* BGP Identifier */</span>

  <span class="comment">/* Set capability code. */</span>
  <a class="code" href="bgp__open_8c.html#aa7660eff88133071e216cf984179877e">bgp_open_capability</a> (s, peer);

  <span class="comment">/* Set BGP packet length. */</span>
  length = <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending OPEN, version %d, my as %u, holdtime %d, id %s&quot;</span>, 
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgpd_8h.html#a9379703a2ec6cf40b147ec96a7777ef3">BGP_VERSION_4</a>, local_as,
           send_holdtime, inet_ntoa (peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>));

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s send message type %d, length (incl. header) %d&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a>, length);

  <span class="comment">/* Dump packet if debug option is set. */</span>
  <span class="comment">/* bgp_packet_dump (s); */</span>

  <span class="comment">/* Add packet to the peer. */</span>
  <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, s);

  <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac1112a3a8cf02e203843a0beaa7b465f"></a><!-- doxytag: member="bgp_packet.c::bgp_packet_add" ref="ac1112a3a8cf02e203843a0beaa7b465f" args="(struct peer *peer, struct stream *s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_packet_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00089">89</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Add packet to the end of list. */</span>
  <a class="code" href="stream_8c.html#a3aac13f498e678975277dd9017f912bd">stream_fifo_push</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>, s);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa529c538a0a9df61107f11602ca3c524"></a><!-- doxytag: member="bgp_packet.c::bgp_packet_delete" ref="aa529c538a0a9df61107f11602ca3c524" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_packet_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00097">97</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (<a class="code" href="stream_8c.html#aabd281e811fa716e5c22fe485acbb68e">stream_fifo_pop</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="abd97bf221857a76aedb9e136d8271ad2"></a><!-- doxytag: member="bgp_packet.c::bgp_packet_set_marker" ref="abd97bf221857a76aedb9e136d8271ad2" args="(struct stream *s, u_char type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_packet_set_marker </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00055">55</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  <span class="comment">/* Fill in marker. */</span>
  <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a>; i++)
    <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0xff);

  <span class="comment">/* Dummy total length. This field is should be filled in later on. */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);

  <span class="comment">/* BGP packet type. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);

  <span class="comment">/* Return current stream size. */</span>
  <span class="keywordflow">return</span> <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7e9932216f445778d1c21dd471a6ef3a"></a><!-- doxytag: member="bgp_packet.c::bgp_packet_set_size" ref="a7e9932216f445778d1c21dd471a6ef3a" args="(struct stream *s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_packet_set_size </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00076">76</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> cp;

  <span class="comment">/* Preserve current pointer. */</span>
  cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a>, cp);

  <span class="keywordflow">return</span> cp;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3a37390260357b584d8fd7b3591b2058"></a><!-- doxytag: member="bgp_packet.c::bgp_read" ref="a3a37390260357b584d8fd7b3591b2058" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_read </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l02341">2341</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size;
  <span class="keywordtype">char</span> notify_data_length[2];

  <span class="comment">/* Yes first of all get peer pointer. */</span>
  peer = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
  peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* For non-blocking IO check. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#a58672521fe155cead3bd1f0653be62ee">Connect</a>)
    {
      <a class="code" href="bgp__packet_8c.html#afa3f4ee76734007f952c560c6e6d3124">bgp_connect_check</a> (peer);
      <span class="keywordflow">goto</span> done;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &lt; 0)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;bgp_read peer&#39;s fd is negative value %d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
      <span class="keywordflow">return</span> -1;
    }
      <a class="code" href="bgp__fsm_8h.html#a62b5746c9e6a92bffde54f2dc61557d7">BGP_READ_ON</a> (peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a>, <a class="code" href="bgp__packet_8c.html#a3a37390260357b584d8fd7b3591b2058">bgp_read</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
    }

  <span class="comment">/* Read packet header to determine type of the packet */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> == 0)
    peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>;

  <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>) &lt; <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>)
    {
      ret = <a class="code" href="bgp__packet_8c.html#a88e8d1d76630adbf1345f4f64560e377">bgp_read_packet</a> (peer);

      <span class="comment">/* Header read error or partial read packet. */</span>
      <span class="keywordflow">if</span> (ret &lt; 0) 
    <span class="keywordflow">goto</span> done;

      <span class="comment">/* Get size and type. */</span>
      <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a>);
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (notify_data_length, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), 2);
      size = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
      type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL) &amp;&amp; type != 2 &amp;&amp; type != 0)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcv message type %d, length (excl. header) %d&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type, size - <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>);

      <span class="comment">/* Marker check */</span>
      <span class="keywordflow">if</span> (((type == <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a>) || (type == <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a>))
      &amp;&amp; ! <a class="code" href="bgp__packet_8c.html#ae3982eb6a6b11aa51844ea259f63aa49">bgp_marker_all_one</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a>))
    {
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
               <a class="code" href="bgpd_8h.html#a8a435e0e2033f183fcd82cfe4ed59443">BGP_NOTIFY_HEADER_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a25225385b28d64a38e2ae07eceb4bf0d">BGP_NOTIFY_HEADER_NOT_SYNC</a>);
      <span class="keywordflow">goto</span> done;
    }

      <span class="comment">/* BGP type check. */</span>
      <span class="keywordflow">if</span> (type != <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a> &amp;&amp; type != <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a> 
      &amp;&amp; type != <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a> &amp;&amp; type != <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a> 
      &amp;&amp; type != <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a>
      &amp;&amp; type != <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a>
      &amp;&amp; type != <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
        <a class="code" href="log_8h.html#a901efa2487b25c3a74846a52de919565">plog_debug</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
              <span class="stringliteral">&quot;%s unknown message type 0x%02x&quot;</span>,
              peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer,
                     <a class="code" href="bgpd_8h.html#a8a435e0e2033f183fcd82cfe4ed59443">BGP_NOTIFY_HEADER_ERR</a>,
                     <a class="code" href="bgpd_8h.html#a61d92861d20bda6984fa61f01a59fb16">BGP_NOTIFY_HEADER_BAD_MESTYPE</a>,
                     &amp;type, 1);
      <span class="keywordflow">goto</span> done;
    }
      <span class="comment">/* Mimimum packet length check. */</span>
      <span class="keywordflow">if</span> ((size &lt; <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>)
      || (size &gt; <a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>)
      || (type == <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#a4f6499d62f6a3b2f694149912d9c8988">BGP_MSG_OPEN_MIN_SIZE</a>)
      || (type == <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#a0ef011551c8692b5c2fc86c9ab8abc11">BGP_MSG_UPDATE_MIN_SIZE</a>)
      || (type == <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#a8ec4c7e03d72e64bccae551622d5b3b0">BGP_MSG_NOTIFY_MIN_SIZE</a>)
      || (type == <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a> &amp;&amp; size != <a class="code" href="bgpd_8h.html#a797b79580c983a81b6b752afbf9e6506">BGP_MSG_KEEPALIVE_MIN_SIZE</a>)
      || (type == <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#abbeda9e0f7ccb8484e9a3de2b83586bf">BGP_MSG_ROUTE_REFRESH_MIN_SIZE</a>)
      || (type == <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#abbeda9e0f7ccb8484e9a3de2b83586bf">BGP_MSG_ROUTE_REFRESH_MIN_SIZE</a>)
      || (type == <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#a832757f94a322ba227a4f2f386aeb046">BGP_MSG_CAPABILITY_MIN_SIZE</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
        <a class="code" href="log_8h.html#a901efa2487b25c3a74846a52de919565">plog_debug</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
              <span class="stringliteral">&quot;%s bad message length - %d for %s&quot;</span>,
              peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, size, 
              type == 128 ? <span class="stringliteral">&quot;ROUTE-REFRESH&quot;</span> :
              <a class="code" href="bgp__debug_8c.html#ab3ba22219d24863d590cda1738f6ec1b">bgp_type_str</a>[(<span class="keywordtype">int</span>) type]);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer,
                     <a class="code" href="bgpd_8h.html#a8a435e0e2033f183fcd82cfe4ed59443">BGP_NOTIFY_HEADER_ERR</a>,
                     <a class="code" href="bgpd_8h.html#af913f37e5cd1375f2f3948a2946de262">BGP_NOTIFY_HEADER_BAD_MESLEN</a>,
                     (u_char *) notify_data_length, 2);
      <span class="keywordflow">goto</span> done;
    }

      <span class="comment">/* Adjust size to message length. */</span>
      peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = size;
    }

  ret = <a class="code" href="bgp__packet_8c.html#a88e8d1d76630adbf1345f4f64560e377">bgp_read_packet</a> (peer);
  <span class="keywordflow">if</span> (ret &lt; 0) 
    <span class="keywordflow">goto</span> done;

  <span class="comment">/* Get size and type again. */</span>
  size = <a class="code" href="stream_8c.html#ac14f5ef12c68d16e2a654e3922f7c03b">stream_getw_from</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a>);
  type = <a class="code" href="stream_8c.html#af7a4ed58eb43625677649eb111f52feb">stream_getc_from</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a> + 2);

  <span class="comment">/* BGP packet dump function. */</span>
  <a class="code" href="bgp__dump_8c.html#aa97689fd779f7eaaaad6d74bb3ffc837">bgp_dump_packet</a> (peer, type, peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
  
  size = (peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> - <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>);

  <span class="comment">/* Read rest of the packet and call each sort of packet routine */</span>
  <span class="keywordflow">switch</span> (type) 
    {
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a>:
      peer-&gt;<a class="code" href="structpeer.html#a76ca0a8b7f67bf4d7abab5609ec90aca">open_in</a>++;
      <a class="code" href="bgp__packet_8c.html#a97f0b0875f50fbbba10f0938e820075e">bgp_open_receive</a> (peer, size); <span class="comment">/* XXX return value ignored! */</span>
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>:
      peer-&gt;<a class="code" href="structpeer.html#a9006b32a7b8b2dbd8aa09c2b193efa57">readtime</a> = time(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);    <span class="comment">/* Last read timer reset */</span>
      <a class="code" href="bgp__packet_8c.html#a43a9bbf186d894f26c76480c541ca436">bgp_update_receive</a> (peer, size);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a>:
      <a class="code" href="bgp__packet_8c.html#a695a91d3e1f6a6ec619c0397c27c7e71">bgp_notify_receive</a> (peer, size);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a>:
      peer-&gt;<a class="code" href="structpeer.html#a9006b32a7b8b2dbd8aa09c2b193efa57">readtime</a> = time(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);    <span class="comment">/* Last read timer reset */</span>
      <a class="code" href="bgp__packet_8c.html#a7541e468418602cf15e6e5244f880ca5">bgp_keepalive_receive</a> (peer, size);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a>:
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a>:
      peer-&gt;<a class="code" href="structpeer.html#a2d6e4e26d5cc36e86e0c35e992273035">refresh_in</a>++;
      <a class="code" href="bgp__packet_8c.html#a74d7b10930867d6ff40854fba54736a3">bgp_route_refresh_receive</a> (peer, size);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a>:
      peer-&gt;<a class="code" href="structpeer.html#a0a23af24ef314346a4522804b82290e8">dynamic_cap_in</a>++;
      <a class="code" href="bgp__packet_8c.html#ad9b67c079a9d84a3091831acc2a15e2f">bgp_capability_receive</a> (peer, size);
      <span class="keywordflow">break</span>;
    }

  <span class="comment">/* Clear input buffer. */</span>
  peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = 0;
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>)
    <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);

 done:
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [Event] Accepting BGP peer delete&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (peer);
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a88e8d1d76630adbf1345f4f64560e377"></a><!-- doxytag: member="bgp_packet.c::bgp_read_packet" ref="a88e8d1d76630adbf1345f4f64560e377" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_read_packet </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l02259">2259</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> nbytes;
  <span class="keywordtype">int</span> readsize;

  readsize = peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> - <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);

  <span class="comment">/* If size is zero then return. */</span>
  <span class="keywordflow">if</span> (! readsize)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Read packet from fd. */</span>
  nbytes = <a class="code" href="stream_8c.html#a35a37560b1d2d7a4ad50aa1538657902">stream_read_unblock</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, readsize);

  <span class="comment">/* If read byte is smaller than zero then error occured. */</span>
  <span class="keywordflow">if</span> (nbytes &lt; 0) 
    {
      <span class="keywordflow">if</span> (errno == EAGAIN)
    <span class="keywordflow">return</span> -1;

      <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Error] bgp_read_packet error: %s&quot;</span>,
         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>) 
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4ff62dffb922440e74de66efee6f8f42">PEER_STATUS_NSF_MODE</a>))
        {
          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6d8edd574001f795d4969c0f389364c0">PEER_DOWN_NSF_CLOSE_SESSION</a>;
          <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>);
        }
      <span class="keywordflow">else</span>
        peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ab18345a3c7944036ed8ca8fd5dac475e">PEER_DOWN_CLOSE_SESSION</a>;
    }

      <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#ab37344e5380c17e5b2c9be898d63ca67">TCP_fatal_error</a>);
      <span class="keywordflow">return</span> -1;
    }  

  <span class="comment">/* When read byte is zero : clear bgp peer and return */</span>
  <span class="keywordflow">if</span> (nbytes == 0) 
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
    <a class="code" href="log_8h.html#a901efa2487b25c3a74846a52de919565">plog_debug</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Event] BGP connection closed fd %d&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);

      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>) 
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4ff62dffb922440e74de66efee6f8f42">PEER_STATUS_NSF_MODE</a>))
        {
          peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6d8edd574001f795d4969c0f389364c0">PEER_DOWN_NSF_CLOSE_SESSION</a>;
          <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>);
        }
      <span class="keywordflow">else</span>
        peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ab18345a3c7944036ed8ca8fd5dac475e">PEER_DOWN_CLOSE_SESSION</a>;
    }

      <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#aea9f7889a35561c8eab9c607c1a0e56d">TCP_connection_closed</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* We read partial packet. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>) != peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a>)
    <span class="keywordflow">return</span> -1;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a74d7b10930867d6ff40854fba54736a3"></a><!-- doxytag: member="bgp_packet.c::bgp_route_refresh_receive" ref="a74d7b10930867d6ff40854fba54736a3" args="(struct peer *peer, bgp_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_route_refresh_receive </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l01908">1908</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  u_char reserved;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;

  <span class="comment">/* If peer does not have the capability, send notification. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a2794496f1536e05dd62d79c6cecb4cfe">PEER_CAP_REFRESH_ADV</a>))
    {
      <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Error] BGP route refresh is not enabled&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
               <a class="code" href="bgpd_8h.html#a8a435e0e2033f183fcd82cfe4ed59443">BGP_NOTIFY_HEADER_ERR</a>,
               <a class="code" href="bgpd_8h.html#a61d92861d20bda6984fa61f01a59fb16">BGP_NOTIFY_HEADER_BAD_MESTYPE</a>);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* Status must be Established. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>) 
    {
      <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
        <span class="stringliteral">&quot;%s [Error] Route refresh packet received under status %s&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#af56552e5c55a4c8733dfee55beddb2f8">BGP_NOTIFY_FSM_ERR</a>, 0);
      <span class="keywordflow">return</span>;
    }

  s = peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>;
  
  <span class="comment">/* Parse packet. */</span>
  afi = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
  reserved = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  safi = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd REFRESH_REQ for afi/safi: %d/%d&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);

  <span class="comment">/* Check AFI and SAFI. */</span>
  <span class="keywordflow">if</span> ((afi != <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; afi != <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
      || (safi != <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a> &amp;&amp; safi != <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>
      &amp;&amp; safi != <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s REFRESH_REQ for unrecognized afi/safi: %d/%d - ignored&quot;</span>,
             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
    }
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* Adjust safi code. */</span>
  <span class="keywordflow">if</span> (safi == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
    safi = <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a> != <a class="code" href="bgpd_8h.html#abbeda9e0f7ccb8484e9a3de2b83586bf">BGP_MSG_ROUTE_REFRESH_MIN_SIZE</a> - <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>)
    {
      u_char *end;
      u_char when_to_refresh;
      u_char orf_type;
      u_int16_t orf_len;

      <span class="keywordflow">if</span> (<a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a> - (<a class="code" href="bgpd_8h.html#abbeda9e0f7ccb8484e9a3de2b83586bf">BGP_MSG_ROUTE_REFRESH_MIN_SIZE</a> - <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>) &lt; 5)
        {
          <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s ORF route refresh length error&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
          <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
          <span class="keywordflow">return</span>;
        }

      when_to_refresh = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      end = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + (<a class="code" href="structstream.html#ab20814173fac3f3040eb16f2e3a28d23">size</a> - 5);

      <span class="keywordflow">while</span> ((<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + 2) &lt; end)
    {
      orf_type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s); 
      orf_len = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
      
      <span class="comment">/* orf_len in bounds? */</span>
      <span class="keywordflow">if</span> ((<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + orf_len) &gt; end)
        <span class="keywordflow">break</span>; <span class="comment">/* XXX: Notify instead?? */</span>
      <span class="keywordflow">if</span> (orf_type == <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>
          || orf_type == <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>)
        {
          u_char *p_pnt = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
          u_char *p_end = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + orf_len;
          <span class="keyword">struct </span><a class="code" href="structorf__prefix.html">orf_prefix</a> orfp;
          u_char common = 0;
          u_int32_t <a class="code" href="structorf__prefix.html#a452fdaa3c1a2c63842fc6dc55c231f08">seq</a>;
          <span class="keywordtype">int</span> psize;
          <span class="keywordtype">char</span> <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>[BUFSIZ];
          <span class="keywordtype">char</span> buf[BUFSIZ];
          <span class="keywordtype">int</span> ret;

          <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
        {
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd Prefixlist ORF(%d) length %d&quot;</span>,
                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, orf_type, orf_len);
        }

              <span class="comment">/* we&#39;re going to read at least 1 byte of common ORF header,</span>
<span class="comment">               * and 7 bytes of ORF Address-filter entry from the stream</span>
<span class="comment">               */</span>
              <span class="keywordflow">if</span> (orf_len &lt; 7)
                <span class="keywordflow">break</span>; 
                
          <span class="comment">/* ORF prefix-list name */</span>
          sprintf (name, <span class="stringliteral">&quot;%s.%d.%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);

          <span class="keywordflow">while</span> (p_pnt &lt; p_end)
        {
                  <span class="comment">/* If the ORF entry is malformed, want to read as much of it</span>
<span class="comment">                   * as possible without going beyond the bounds of the entry,</span>
<span class="comment">                   * to maximise debug information.</span>
<span class="comment">                   */</span>
          <span class="keywordtype">int</span> ok ;
          memset (&amp;orfp, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structorf__prefix.html">orf_prefix</a>));
          common = *p_pnt++;
          <span class="comment">/* after ++: p_pnt &lt;= p_end */</span>
          <span class="keywordflow">if</span> (common &amp; <a class="code" href="bgp__packet_8h.html#aaa55ed31dd48f7faf00c0f0b83740c05">ORF_COMMON_PART_REMOVE_ALL</a>)
            {
              <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd Remove-All pfxlist ORF request&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
              <a class="code" href="plist_8c.html#ab45c235a305a061e5ac9fceecfc90a55">prefix_bgp_orf_remove_all</a> (name);
              <span class="keywordflow">break</span>;
            }
          ok = ((p_end - p_pnt) &gt;= <span class="keyword">sizeof</span>(u_int32_t)) ;
          <span class="keywordflow">if</span> (ok)
            {
          <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;seq, p_pnt, <span class="keyword">sizeof</span> (u_int32_t));
          p_pnt += <span class="keyword">sizeof</span> (u_int32_t);
          orfp.seq = ntohl (seq);
            }
          <span class="keywordflow">else</span>
            p_pnt = p_end ;

          <span class="keywordflow">if</span> ((ok = (p_pnt &lt; p_end)))
            orfp.ge = *p_pnt++ ;      <span class="comment">/* value checked in prefix_bgp_orf_set() */</span>
          <span class="keywordflow">if</span> ((ok = (p_pnt &lt; p_end)))
            orfp.le = *p_pnt++ ;      <span class="comment">/* value checked in prefix_bgp_orf_set() */</span>
          <span class="keywordflow">if</span> ((ok = (p_pnt &lt; p_end)))
            orfp.p.prefixlen = *p_pnt++ ;
          orfp.p.family = <a class="code" href="prefix_8c.html#a6d5ede437568763fc6ef7d9cc772b501">afi2family</a> (afi);   <span class="comment">/* afi checked already  */</span>

          psize = <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (orfp.p.prefixlen);   <span class="comment">/* 0 if not ok          */</span>
          <span class="keywordflow">if</span> (psize &gt; <a class="code" href="prefix_8c.html#ad076653f7c139acd0fdedb511542e915">prefix_blen</a>(&amp;orfp.p))   <span class="comment">/* valid for family ?   */</span>
            {
              ok = 0 ;
              psize = <a class="code" href="prefix_8c.html#ad076653f7c139acd0fdedb511542e915">prefix_blen</a>(&amp;orfp.p) ;
            }
          <span class="keywordflow">if</span> (psize &gt; (p_end - p_pnt))        <span class="comment">/* valid for packet ?   */</span>
            {
              ok = 0 ;
              psize = p_end - p_pnt ;
            }

          <span class="keywordflow">if</span> (psize &gt; 0)
            <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;orfp.p.u.prefix, p_pnt, psize);
          p_pnt += psize;

          <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd %s %s seq %u %s/%d ge %d le %d%s&quot;</span>,
                   peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
                   (common &amp; <a class="code" href="bgp__packet_8h.html#a15d6c72a4ef5d887b537e19d100f516b">ORF_COMMON_PART_REMOVE</a> ? <span class="stringliteral">&quot;Remove&quot;</span> : <span class="stringliteral">&quot;Add&quot;</span>), 
                   (common &amp; <a class="code" href="bgp__packet_8h.html#ad4dae47ed99f26afef0dbdbee312094e">ORF_COMMON_PART_DENY</a> ? <span class="stringliteral">&quot;deny&quot;</span> : <span class="stringliteral">&quot;permit&quot;</span>),
                   orfp.seq, 
                   <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (orfp.p.family, &amp;orfp.p.u.prefix, buf, BUFSIZ),
                   orfp.p.prefixlen, orfp.ge, orfp.le,
                   ok ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot; MALFORMED&quot;</span>);

          <span class="keywordflow">if</span> (ok)
          ret = <a class="code" href="plist_8c.html#a5e6f89d9e5bf6353d71df9ea21d732d0">prefix_bgp_orf_set</a> (name, afi, &amp;orfp,
                 (common &amp; ORF_COMMON_PART_DENY ? 0 : 1 ),
                 (common &amp; ORF_COMMON_PART_REMOVE ? 0 : 1));

          <span class="keywordflow">if</span> (!ok || (ret != <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>))
            {
              <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Received misformatted prefixlist ORF. Remove All pfxlist&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
              <a class="code" href="plist_8c.html#ab45c235a305a061e5ac9fceecfc90a55">prefix_bgp_orf_remove_all</a> (name);
              <span class="keywordflow">break</span>;
            }
        }
          peer-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi] =
             <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="plist_8h.html#aa217ec31c92f3842209d9991a42a675c">AFI_ORF_PREFIX</a>, name);
        }
      <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, orf_len);
    }
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd Refresh %s ORF request&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
           when_to_refresh == <a class="code" href="bgp__packet_8h.html#a4dc1e6799b406a23e99cfaf8e680df70">REFRESH_DEFER</a> ? <span class="stringliteral">&quot;Defer&quot;</span> : <span class="stringliteral">&quot;Immediate&quot;</span>);
      <span class="keywordflow">if</span> (when_to_refresh == <a class="code" href="bgp__packet_8h.html#a4dc1e6799b406a23e99cfaf8e680df70">REFRESH_DEFER</a>)
    <span class="keywordflow">return</span>;
    }

  <span class="comment">/* First update is deferred until ORF or ROUTE-REFRESH is received */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#af38b3d01fa7faa6698e76d7932ff717f">PEER_STATUS_ORF_WAIT_REFRESH</a>))
    <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#af38b3d01fa7faa6698e76d7932ff717f">PEER_STATUS_ORF_WAIT_REFRESH</a>);

  <span class="comment">/* Perform route refreshment to the peer */</span>
  <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af79d4c999f0c6321ab65049fb47dc78d"></a><!-- doxytag: member="bgp_packet.c::bgp_route_refresh_send" ref="af79d4c999f0c6321ab65049fb47dc78d" args="(struct peer *peer, afi_t afi, safi_t safi, u_char orf_type, u_char when_to_refresh, int remove)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_route_refresh_send </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>orf_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>when_to_refresh</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>remove</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00925">925</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
  <span class="keywordtype">int</span> orf_refresh = 0;

  <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
    <span class="keywordflow">return</span>;

  filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];

  <span class="comment">/* Adjust safi code. */</span>
  <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
    safi = <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>;
  
  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);

  <span class="comment">/* Make BGP update packet. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ac1d6ee4b70cb694a4f70664fe966a014">PEER_CAP_REFRESH_NEW_RCV</a>))
    <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a>);
  <span class="keywordflow">else</span>
    <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a>);

  <span class="comment">/* Encode Route Refresh message. */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, afi);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);
 
  <span class="keywordflow">if</span> (orf_type == <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>
      || orf_type == <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>)
    <span class="keywordflow">if</span> (<span class="keyword">remove</span> || filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>].plist)
      {
    u_int16_t orf_len;
    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> orfp;

    orf_refresh = 1; 
    <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, when_to_refresh);
    <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, orf_type);
    orfp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
    <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);

    <span class="keywordflow">if</span> (<span class="keyword">remove</span>)
      {
        <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#ad1a4beaaf01dc6e5e251aebab1615a8a">PEER_STATUS_ORF_PREFIX_SEND</a>);
        <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__packet_8h.html#aaa55ed31dd48f7faf00c0f0b83740c05">ORF_COMMON_PART_REMOVE_ALL</a>);
        <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending REFRESH_REQ to remove ORF(%d) (%s) for afi/safi: %d/%d&quot;</span>, 
             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, orf_type,
             (when_to_refresh == <a class="code" href="bgp__packet_8h.html#a4dc1e6799b406a23e99cfaf8e680df70">REFRESH_DEFER</a> ? <span class="stringliteral">&quot;defer&quot;</span> : <span class="stringliteral">&quot;immediate&quot;</span>),
             afi, safi);
      }
    <span class="keywordflow">else</span>
      {
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#ad1a4beaaf01dc6e5e251aebab1615a8a">PEER_STATUS_ORF_PREFIX_SEND</a>);
        <a class="code" href="plist_8c.html#afc282a7288efb63da57b4d55d144fff7">prefix_bgp_orf_entry</a> (s, filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>].plist,
                  <a class="code" href="bgp__packet_8h.html#a739d323f7e1d604a5bc1777c99e3a663">ORF_COMMON_PART_ADD</a>, <a class="code" href="bgp__packet_8h.html#aa62477116e8caf3e21fb37a789cd03a9">ORF_COMMON_PART_PERMIT</a>,
                  <a class="code" href="bgp__packet_8h.html#ad4dae47ed99f26afef0dbdbee312094e">ORF_COMMON_PART_DENY</a>);
        <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending REFRESH_REQ with pfxlist ORF(%d) (%s) for afi/safi: %d/%d&quot;</span>, 
             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, orf_type,
             (when_to_refresh == <a class="code" href="bgp__packet_8h.html#a4dc1e6799b406a23e99cfaf8e680df70">REFRESH_DEFER</a> ? <span class="stringliteral">&quot;defer&quot;</span> : <span class="stringliteral">&quot;immediate&quot;</span>),
             afi, safi);
      }

    <span class="comment">/* Total ORF Entry Len. */</span>
    orf_len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - orfp - 2;
    <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, orfp, orf_len);
      }

  <span class="comment">/* Set packet size. */</span>
  length = <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    {
      <span class="keywordflow">if</span> (! orf_refresh)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending REFRESH_REQ for afi/safi: %d/%d&quot;</span>, 
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s send message type %d, length (incl. header) %d&quot;</span>,
         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ac1d6ee4b70cb694a4f70664fe966a014">PEER_CAP_REFRESH_NEW_RCV</a>) ?
         <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a> : <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a>, length);
    }

  <span class="comment">/* Make real packet. */</span>
  packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);

  <span class="comment">/* Add packet to the peer. */</span>
  <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);

  <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a70551f4df0090523408c9f19d97b97b6"></a><!-- doxytag: member="bgp_packet.c::bgp_update_packet" ref="a70551f4df0090523408c9f19d97b97b6" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structstream.html">stream</a>* bgp_update_packet </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00142">142</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *binfo = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total_attr_len = 0;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pos;
  <span class="keywordtype">char</span> buf[BUFSIZ];

  s = peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a>;
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);

  adv = <a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>);

  <span class="keywordflow">while</span> (adv)
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>);
      rn = adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>;
      adj = adv-&gt;<a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>;
      <span class="keywordflow">if</span> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>)
        binfo = adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>;

      <span class="comment">/* When remaining space can&#39;t include NLRI and it&#39;s length.  */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a4705f0b1797c4f896404ec1549c91017">STREAM_REMAIN</a> (s) &lt;= <a class="code" href="bgp__packet_8h.html#a0ea4158b5023b844b3ef24ae90760d18">BGP_NLRI_LENGTH</a> + <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>))
    <span class="keywordflow">break</span>;

      <span class="comment">/* If packet is empty, set attribute. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ac6e5029f661be512743a4e9f8bc06787">stream_empty</a> (s))
    {
      <span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> *prd = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      u_char *tag = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <span class="keyword">struct </span>peer *from = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>)
        prd = (<span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> *) &amp;rn-&gt;<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
          if (binfo &amp;&amp; binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
            {
              tag = binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#ab5ce51bbce0f9dc8bb7a922f25e44da0">tag</a>;
              from = binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
            }
          
      <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);       
      pos = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
      total_attr_len = <a class="code" href="bgp__attr_8c.html#afa6f3d227d043fc17b75503ec1b840f6">bgp_packet_attribute</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, peer, s, 
                                             adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a>-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>,
                                             &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, afi, safi, 
                                             from, prd, tag);
      <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, pos, total_attr_len);
    }

      <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
    <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>);
      
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_OUT))
    <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s send UPDATE %s/%d&quot;</span>,
          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;(rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), buf, BUFSIZ),
          rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);

      <span class="comment">/* Synchnorize attribute.  */</span>
      <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>)
    <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>);
      <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#a0f455af89f5e19b5ab2779df2e4218bb">scount</a>[afi][safi]++;

      adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a>-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>);

      adv = <a class="code" href="bgp__advertise_8c.html#ae3db721dd592035054c399b932338af0">bgp_advertise_clean</a> (peer, adj, afi, safi);

      <span class="keywordflow">if</span> (! (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>))
    <span class="keywordflow">break</span>;
    }
     
  <span class="keywordflow">if</span> (! <a class="code" href="stream_8c.html#ac6e5029f661be512743a4e9f8bc06787">stream_empty</a> (s))
    {
      <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
      packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
      <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);
      <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
      <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
      <span class="keywordflow">return</span> packet;
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5fd59a2d80d58f55d06eaa5d015c893b"></a><!-- doxytag: member="bgp_packet.c::bgp_update_packet_eor" ref="a5fd59a2d80d58f55d06eaa5d015c893b" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structstream.html">stream</a>* bgp_update_packet_eor </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00233">233</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;

  <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;send End-of-RIB for %s to %s&quot;</span>, <a class="code" href="bgp__vty_8c.html#a12e00d9262b9e4efc00b5f1216541967">afi_safi_print</a> (afi, safi), peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);

  s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);

  <span class="comment">/* Make BGP update packet. */</span>
  <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>);

  <span class="comment">/* Unfeasible Routes Length */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);

  <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
    {
      <span class="comment">/* Total Path Attribute Length */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* Total Path Attribute Length */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 6);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a75e156b1375161f4b5587249f7703cdc">BGP_ATTR_MP_UNREACH_NLRI</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 3);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, afi);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);
    }

  <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
  packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
  <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);
  <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
  <span class="keywordflow">return</span> packet;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a43a9bbf186d894f26c76480c541ca436"></a><!-- doxytag: member="bgp_packet.c::bgp_update_receive" ref="a43a9bbf186d894f26c76480c541ca436" args="(struct peer *peer, bgp_size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_update_receive </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l01488">1488</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  u_char *end;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> <a class="code" href="structattr.html">attr</a>;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> attribute_len;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> update_len;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> withdraw_len;
  <span class="keyword">struct </span><a class="code" href="structbgp__nlri.html">bgp_nlri</a> update;
  <span class="keyword">struct </span><a class="code" href="structbgp__nlri.html">bgp_nlri</a> withdraw;
  <span class="keyword">struct </span><a class="code" href="structbgp__nlri.html">bgp_nlri</a> mp_update;
  <span class="keyword">struct </span><a class="code" href="structbgp__nlri.html">bgp_nlri</a> mp_withdraw;
  <span class="keywordtype">char</span> attrstr[BUFSIZ] = <span class="stringliteral">&quot;&quot;</span>;

  <span class="comment">/* Status must be Established. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>) 
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s [FSM] Update packet received under status %s&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#af56552e5c55a4c8733dfee55beddb2f8">BGP_NOTIFY_FSM_ERR</a>, 0);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Set initial values. */</span>
  memset (&amp;<a class="code" href="structattr.html">attr</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a>));
  memset (&amp;update, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a>));
  memset (&amp;withdraw, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a>));
  memset (&amp;mp_update, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a>));
  memset (&amp;mp_withdraw, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a>));

  s = peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>;
  end = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + size;

  <span class="comment">/* RFC1771 6.3 If the Unfeasible Routes Length or Total Attribute</span>
<span class="comment">     Length is too large (i.e., if Unfeasible Routes Length + Total</span>
<span class="comment">     Attribute Length + 23 exceeds the message Length), then the Error</span>
<span class="comment">     Subcode is set to Malformed Attribute List.  */</span>
  <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + 2 &gt; end)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s [Error] Update packet error&quot;</span>
        <span class="stringliteral">&quot; (packet length is short for unfeasible length)&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Unfeasible Route Length. */</span>
  withdraw_len = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);

  <span class="comment">/* Unfeasible Route Length check. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + withdraw_len &gt; end)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s [Error] Update packet error&quot;</span>
        <span class="stringliteral">&quot; (packet unfeasible length overflow %d)&quot;</span>,
        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, withdraw_len);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Unfeasible Route packet format check. */</span>
  <span class="keywordflow">if</span> (withdraw_len &gt; 0)
    {
      ret = <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s), withdraw_len);
      <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> -1;

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (packet, PACKET_RECV))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [Update:RECV] Unfeasible NLRI received&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);

      withdraw.afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>;
      withdraw.safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>;
      withdraw.nlri = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
      withdraw.length = withdraw_len;
      <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, withdraw_len);
    }
  
  <span class="comment">/* Attribute total length check. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + 2 &gt; end)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s [Error] Packet Error&quot;</span>
         <span class="stringliteral">&quot; (update packet is short for attribute length)&quot;</span>,
         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Fetch attribute total length. */</span>
  attribute_len = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);

  <span class="comment">/* Attribute length check. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + attribute_len &gt; end)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s [Error] Packet Error&quot;</span>
         <span class="stringliteral">&quot; (update packet attribute length overflow %d)&quot;</span>,
         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, attribute_len);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Parse attribute when it exists. */</span>
  <span class="keywordflow">if</span> (attribute_len)
    {
      ret = <a class="code" href="bgp__attr_8c.html#aa14660c4ba4237fe5afa5f0e7700479a">bgp_attr_parse</a> (peer, &amp;<a class="code" href="structattr.html">attr</a>, attribute_len, 
                &amp;mp_update, &amp;mp_withdraw);
      <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Logging the attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
    {
      ret= <a class="code" href="bgp__debug_8c.html#a32d8ae5f48b2bf76b0a7c13182b2943f">bgp_dump_attr</a> (peer, &amp;<a class="code" href="structattr.html">attr</a>, attrstr, BUFSIZ);

      <span class="keywordflow">if</span> (ret)
    <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s rcvd UPDATE w/ attr: %s&quot;</span>,
          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, attrstr);
    }

  <span class="comment">/* Network Layer Reachability Information. */</span>
  update_len = end - <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);

  <span class="keywordflow">if</span> (update_len)
    {
      <span class="comment">/* Check NLRI packet format and prefix length. */</span>
      ret = <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s), update_len);
      <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> -1;

      <span class="comment">/* Set NLRI portion to structure. */</span>
      update.afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>;
      update.safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>;
      update.nlri = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
      update.length = update_len;
      <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, update_len);
    }

  <span class="comment">/* NLRI is processed only when the peer is configured specific</span>
<span class="comment">     Address Family and Subsequent Address Family. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
    {
      <span class="keywordflow">if</span> (withdraw.length)
    <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;withdraw);

      <span class="keywordflow">if</span> (update.length)
    {
      <span class="comment">/* We check well-known attribute only for IPv4 unicast</span>
<span class="comment">         update. */</span>
      ret = <a class="code" href="bgp__attr_8c.html#a8a1ebdfc7d1986e7f14e9146c58915e4">bgp_attr_check</a> (peer, &amp;<a class="code" href="structattr.html">attr</a>);
      <span class="keywordflow">if</span> (ret &lt; 0)
        <span class="keywordflow">return</span> -1;

      <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, &amp;<a class="code" href="structattr.html">attr</a>, &amp;update);
    }

      <span class="keywordflow">if</span> (mp_update.length
      &amp;&amp; mp_update.afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
      &amp;&amp; mp_update.safi == SAFI_UNICAST)
    <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, &amp;<a class="code" href="structattr.html">attr</a>, &amp;mp_update);

      <span class="keywordflow">if</span> (mp_withdraw.length
      &amp;&amp; mp_withdraw.afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
      &amp;&amp; mp_withdraw.safi == SAFI_UNICAST)
    <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;mp_withdraw);

      <span class="keywordflow">if</span> (! attribute_len &amp;&amp; ! withdraw_len)
    {
      <span class="comment">/* End-of-RIB received */</span>
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST],
            <a class="code" href="bgpd_8h.html#a9644d56ec1353f125c50e97ae40ab71c">PEER_STATUS_EOR_RECEIVED</a>);

      <span class="comment">/* NSF delete stale route */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST])
        <a class="code" href="bgp__route_8c.html#aa1dd948948425c7e30941a8816af5bb1">bgp_clear_stale_route</a> (peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
        <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;rcvd End-of-RIB for IPv4 Unicast from %s&quot;</span>,
          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
    }
    }
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
    {
      <span class="keywordflow">if</span> (mp_update.length
      &amp;&amp; mp_update.afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
      &amp;&amp; mp_update.safi == SAFI_MULTICAST)
    <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, &amp;<a class="code" href="structattr.html">attr</a>, &amp;mp_update);

      <span class="keywordflow">if</span> (mp_withdraw.length
      &amp;&amp; mp_withdraw.afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
      &amp;&amp; mp_withdraw.safi == SAFI_MULTICAST)
    <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;mp_withdraw);

      <span class="keywordflow">if</span> (! withdraw_len
      &amp;&amp; mp_withdraw.afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>
      &amp;&amp; mp_withdraw.safi == SAFI_MULTICAST
      &amp;&amp; mp_withdraw.length == 0)
    {
      <span class="comment">/* End-of-RIB received */</span>
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_MULTICAST],
            <a class="code" href="bgpd_8h.html#a9644d56ec1353f125c50e97ae40ab71c">PEER_STATUS_EOR_RECEIVED</a>);

      <span class="comment">/* NSF delete stale route */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_MULTICAST])
        <a class="code" href="bgp__route_8c.html#aa1dd948948425c7e30941a8816af5bb1">bgp_clear_stale_route</a> (peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_MULTICAST);

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
        <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;rcvd End-of-RIB for IPv4 Multicast from %s&quot;</span>,
          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
    }
    }
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST])
    {
      <span class="keywordflow">if</span> (mp_update.length 
      &amp;&amp; mp_update.afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> 
      &amp;&amp; mp_update.safi == SAFI_UNICAST)
    <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, &amp;<a class="code" href="structattr.html">attr</a>, &amp;mp_update);

      <span class="keywordflow">if</span> (mp_withdraw.length 
      &amp;&amp; mp_withdraw.afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> 
      &amp;&amp; mp_withdraw.safi == SAFI_UNICAST)
    <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;mp_withdraw);

      <span class="keywordflow">if</span> (! withdraw_len
      &amp;&amp; mp_withdraw.afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>
      &amp;&amp; mp_withdraw.safi == SAFI_UNICAST
      &amp;&amp; mp_withdraw.length == 0)
    {
      <span class="comment">/* End-of-RIB received */</span>
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST], <a class="code" href="bgpd_8h.html#a9644d56ec1353f125c50e97ae40ab71c">PEER_STATUS_EOR_RECEIVED</a>);

      <span class="comment">/* NSF delete stale route */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST])
        <a class="code" href="bgp__route_8c.html#aa1dd948948425c7e30941a8816af5bb1">bgp_clear_stale_route</a> (peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
        <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;rcvd End-of-RIB for IPv6 Unicast from %s&quot;</span>,
          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
    }
    }
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_MULTICAST])
    {
      <span class="keywordflow">if</span> (mp_update.length 
      &amp;&amp; mp_update.afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> 
      &amp;&amp; mp_update.safi == SAFI_MULTICAST)
    <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, &amp;<a class="code" href="structattr.html">attr</a>, &amp;mp_update);

      <span class="keywordflow">if</span> (mp_withdraw.length 
      &amp;&amp; mp_withdraw.afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> 
      &amp;&amp; mp_withdraw.safi == SAFI_MULTICAST)
    <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;mp_withdraw);

      <span class="keywordflow">if</span> (! withdraw_len
      &amp;&amp; mp_withdraw.afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>
      &amp;&amp; mp_withdraw.safi == SAFI_MULTICAST
      &amp;&amp; mp_withdraw.length == 0)
    {
      <span class="comment">/* End-of-RIB received */</span>

      <span class="comment">/* NSF delete stale route */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_MULTICAST])
        <a class="code" href="bgp__route_8c.html#aa1dd948948425c7e30941a8816af5bb1">bgp_clear_stale_route</a> (peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_MULTICAST);

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
        <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;rcvd End-of-RIB for IPv6 Multicast from %s&quot;</span>,
          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
    }
    }
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>])
    {
      <span class="keywordflow">if</span> (mp_update.length 
      &amp;&amp; mp_update.afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
      &amp;&amp; mp_update.safi == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
    <a class="code" href="bgp__mplsvpn_8c.html#a2e29628712bf37fc59b006b90d0aa909">bgp_nlri_parse_vpnv4</a> (peer, &amp;<a class="code" href="structattr.html">attr</a>, &amp;mp_update);

      <span class="keywordflow">if</span> (mp_withdraw.length 
      &amp;&amp; mp_withdraw.afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
      &amp;&amp; mp_withdraw.safi == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
    <a class="code" href="bgp__mplsvpn_8c.html#a2e29628712bf37fc59b006b90d0aa909">bgp_nlri_parse_vpnv4</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;mp_withdraw);

      <span class="keywordflow">if</span> (! withdraw_len
      &amp;&amp; mp_withdraw.afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>
      &amp;&amp; mp_withdraw.safi == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>
      &amp;&amp; mp_withdraw.length == 0)
    {
      <span class="comment">/* End-of-RIB received */</span>

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
        <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;rcvd End-of-RIB for VPNv4 Unicast from %s&quot;</span>,
          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
    }
    }

  <span class="comment">/* Everything is done.  We unintern temporary structures which</span>
<span class="comment">     interned in bgp_attr_parse(). */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
    <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
    <a class="code" href="bgp__community_8c.html#add62474cd8c7fed6877c64537b6c78a2">community_unintern</a> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>)
        <a class="code" href="bgp__ecommunity_8c.html#af18451af10079ec0c849b84cef248e7b">ecommunity_unintern</a> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
      <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
        <a class="code" href="bgp__attr_8c.html#a3ebf5b6e2c65cef7624b6b1e88e61bc6">cluster_unintern</a> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
      <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
        <a class="code" href="bgp__attr_8c.html#a9b8a411861d16f67929a3359ef7c51a4">transit_unintern</a> (<a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);
      <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;<a class="code" href="structattr.html">attr</a>);
    }

  <span class="comment">/* If peering is stopped due to some reason, do not generate BGP</span>
<span class="comment">     event.  */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Increment packet counter. */</span>
  peer-&gt;<a class="code" href="structpeer.html#ae48025e5febc2a1c549110d9326c589f">update_in</a>++;
  peer-&gt;<a class="code" href="structpeer.html#a417a77217f3ecfb948016245a4eaf650">update_time</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();

  <span class="comment">/* Generate BGP event. */</span>
  <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a9530d4f98b88cc8cecfb892d3e6ab798">Receive_UPDATE_message</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae745068443230e6f96f4ea075c0ee8d6"></a><!-- doxytag: member="bgp_packet.c::bgp_withdraw_packet" ref="ae745068443230e6f96f4ea075c0ee8d6" args="(struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structstream.html">stream</a>* bgp_withdraw_packet </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00277">277</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pos;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> unfeasible_len;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total_attr_len;
  <span class="keywordtype">char</span> buf[BUFSIZ];

  s = peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a>;
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);

  <span class="keywordflow">while</span> ((adv = <a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>);
      adj = adv-&gt;<a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>;
      rn = adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>;

      <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a4705f0b1797c4f896404ec1549c91017">STREAM_REMAIN</a> (s) 
      &lt; (<a class="code" href="bgp__packet_8h.html#a0ea4158b5023b844b3ef24ae90760d18">BGP_NLRI_LENGTH</a> + <a class="code" href="bgp__packet_8h.html#ad6c5e016e5a245f6b2c271e930c632cf">BGP_TOTAL_ATTR_LEN</a> + <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)))
    <span class="keywordflow">break</span>;

      <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ac6e5029f661be512743a4e9f8bc06787">stream_empty</a> (s))
    {
      <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
    }

      <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
    <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>);
      <span class="keywordflow">else</span>
    {
      <span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> *prd = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>)
        prd = (<span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> *) &amp;rn-&gt;<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
      pos = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
      total_attr_len
        = <a class="code" href="bgp__attr_8c.html#a307ab4e45f577239562b43a73ef8f3a3">bgp_packet_withdraw</a> (peer, s, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, afi, safi, prd, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
      
      <span class="comment">/* Set total path attribute length. */</span>
      <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, pos, total_attr_len);
    }

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_OUT))
    <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s send UPDATE %s/%d -- unreachable&quot;</span>,
          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;(rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), buf, BUFSIZ),
          rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);

      peer-&gt;<a class="code" href="structpeer.html#a0f455af89f5e19b5ab2779df2e4218bb">scount</a>[afi][safi]--;

      <a class="code" href="bgp__advertise_8c.html#a4f008d09b6f5c7288dc27f5a5fbf376f">bgp_adj_out_remove</a> (rn, adj, peer, afi, safi);
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);

      <span class="keywordflow">if</span> (! (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>))
    <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">if</span> (! <a class="code" href="stream_8c.html#ac6e5029f661be512743a4e9f8bc06787">stream_empty</a> (s))
    {
      <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
    {
      unfeasible_len 
        = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a> - <a class="code" href="bgp__packet_8h.html#a5f87d076829c52f458d31bbd1b32bacf">BGP_UNFEASIBLE_LEN</a>;
      <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>, unfeasible_len);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
    }
      <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
      packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
      <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);
      <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
      <span class="keywordflow">return</span> packet;
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad43cdddbeb3aa17bb2aa199409455c1c"></a><!-- doxytag: member="bgp_packet.c::bgp_write" ref="ad43cdddbeb3aa17bb2aa199409455c1c" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_write </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00593">593</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>; 
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a> = 0;
  <span class="keywordtype">int</span> write_errno;

  <span class="comment">/* Yes first of all get peer pointer. */</span>
  peer = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
  peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* For non-blocking IO check. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#a58672521fe155cead3bd1f0653be62ee">Connect</a>)
    {
      <a class="code" href="bgp__packet_8c.html#afa3f4ee76734007f952c560c6e6d3124">bgp_connect_check</a> (peer);
      <span class="keywordflow">return</span> 0;
    }

    <span class="comment">/* Nonblocking write until TCP output buffer is full.  */</span>
  <span class="keywordflow">while</span> (1)
    {
      <span class="keywordtype">int</span> writenum;
      <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;

      s = <a class="code" href="bgp__packet_8c.html#a379c7164298b8b6294eec50512466660">bgp_write_packet</a> (peer);
      <span class="keywordflow">if</span> (! s)
    <span class="keywordflow">return</span> 0;
      
      <span class="comment">/* XXX: FIXME, the socket should be NONBLOCK from the start</span>
<span class="comment">       * status shouldnt need to be toggled on each write</span>
<span class="comment">       */</span>
      val = fcntl (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, F_GETFL, 0);
      fcntl (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, F_SETFL, val|O_NONBLOCK);

      <span class="comment">/* Number of bytes to be sent.  */</span>
      writenum = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s);

      <span class="comment">/* Call write() system call.  */</span>
      num = write (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (s), writenum);
      write_errno = errno;
      fcntl (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, F_SETFL, val);
      <span class="keywordflow">if</span> (num &lt;= 0)
    {
      <span class="comment">/* Partial write. */</span>
      <span class="keywordflow">if</span> (write_errno == EWOULDBLOCK || write_errno == EAGAIN)
          <span class="keywordflow">break</span>;

      <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#ab37344e5380c17e5b2c9be898d63ca67">TCP_fatal_error</a>);
      <span class="keywordflow">return</span> 0;
    }
      <span class="keywordflow">if</span> (num != writenum)
    {
      <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, num);

      <span class="keywordflow">if</span> (write_errno == EAGAIN)
        <span class="keywordflow">break</span>;

      <span class="keywordflow">continue</span>;
    }

      <span class="comment">/* Retrieve BGP packet type. */</span>
      <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (s, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a> + 2);
      type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);

      <span class="keywordflow">switch</span> (type)
    {
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a>:
      peer-&gt;<a class="code" href="structpeer.html#a6372a52ffefb71ae6e45658ba6961c48">open_out</a>++;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>:
      peer-&gt;<a class="code" href="structpeer.html#ae471ee06ab605d6101199ec38f06f3b6">update_out</a>++;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a>:
      peer-&gt;<a class="code" href="structpeer.html#a3c2d072c10be8fbf3d56dad221b799cc">notify_out</a>++;
      <span class="comment">/* Double start timer. */</span>
      peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> *= 2;

      <span class="comment">/* Overflow check. */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> &gt;= (60 * 2))
        peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> = (60 * 2);

      <span class="comment">/* Flush any existing events */</span>
      <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
      <span class="keywordflow">return</span> 0;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a>:
      peer-&gt;<a class="code" href="structpeer.html#af879557d041a38f1603e09a38834f241">keepalive_out</a>++;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a>:
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a>:
      peer-&gt;<a class="code" href="structpeer.html#abba30cc4402a799a43f4eb7bd04e4dfe">refresh_out</a>++;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a>:
      peer-&gt;<a class="code" href="structpeer.html#a787d4c08df4bb74dbd15d58f206f6768">dynamic_cap_out</a>++;
      <span class="keywordflow">break</span>;
    }

      <span class="comment">/* OK we send packet so delete it. */</span>
      <a class="code" href="bgp__packet_8c.html#aa529c538a0a9df61107f11602ca3c524">bgp_packet_delete</a> (peer);

      <span class="keywordflow">if</span> (++count &gt;= <a class="code" href="bgp__packet_8h.html#a69f0a11991c18cd78e31d458dfb2ec33">BGP_WRITE_PACKET_MAX</a>)
    <span class="keywordflow">break</span>;
    }
  
  <span class="keywordflow">if</span> (<a class="code" href="bgp__packet_8c.html#a2f88d64d5a585237b317b5a98d9fdf29">bgp_write_proceed</a> (peer))
    <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa850751bf6d2a251acac9e81a799d97a"></a><!-- doxytag: member="bgp_packet.c::bgp_write_notify" ref="aa850751bf6d2a251acac9e81a799d97a" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_write_notify </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00706">706</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>; 

  <span class="comment">/* There should be at least one packet. */</span>
  s = <a class="code" href="stream_8c.html#a11eebf8ef20ce7257c51bc7efc6b17de">stream_fifo_head</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>);
  <span class="keywordflow">if</span> (!s)
    <span class="keywordflow">return</span> 0;
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) &gt;= <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>);

  <span class="comment">/* I&#39;m not sure fd is writable. */</span>
  ret = <a class="code" href="network_8c.html#ae7fc0505143ee1a9a30340c4863a6ea6">writen</a> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
  <span class="keywordflow">if</span> (ret &lt;= 0)
    {
      <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#ab37344e5380c17e5b2c9be898d63ca67">TCP_fatal_error</a>);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* Retrieve BGP packet type. */</span>
  <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (s, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a> + 2);
  type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (type == <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a>);

  <span class="comment">/* Type should be notify. */</span>
  peer-&gt;<a class="code" href="structpeer.html#a3c2d072c10be8fbf3d56dad221b799cc">notify_out</a>++;

  <span class="comment">/* Double start timer. */</span>
  peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> *= 2;

  <span class="comment">/* Overflow check. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> &gt;= (60 * 2))
    peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> = (60 * 2);

  <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a379c7164298b8b6294eec50512466660"></a><!-- doxytag: member="bgp_packet.c::bgp_write_packet" ref="a379c7164298b8b6294eec50512466660" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structstream.html">stream</a>* bgp_write_packet </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00502">502</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;

  s = <a class="code" href="stream_8c.html#a11eebf8ef20ce7257c51bc7efc6b17de">stream_fifo_head</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>);
  <span class="keywordflow">if</span> (s)
    <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;

  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      {
    adv = <a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>);
    <span class="keywordflow">if</span> (adv)
      {
        s = <a class="code" href="bgp__packet_8c.html#ae745068443230e6f96f4ea075c0ee8d6">bgp_withdraw_packet</a> (peer, afi, safi);
        <span class="keywordflow">if</span> (s)
          <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
      }
      }
    
  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      {
    adv = <a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>);
    <span class="keywordflow">if</span> (adv)
      {
            <span class="keywordflow">if</span> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a> &amp;&amp; adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a> &lt; peer-&gt;<a class="code" href="structpeer.html#ac634a8cdc8e00d064d9d9fcdd324a950">synctime</a>)
          {
        <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#aab0e7899c7f4ffb2b280a37d9647a061">PEER_CAP_RESTART_RCV</a>)
            &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a0676dbf05f735073d261e5a01b1c7dcb">PEER_CAP_RESTART_ADV</a>)
            &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>)
            &amp;&amp; safi != <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
          {
            <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi],
            <a class="code" href="bgpd_8h.html#a9644d56ec1353f125c50e97ae40ab71c">PEER_STATUS_EOR_RECEIVED</a>))
              s = <a class="code" href="bgp__packet_8c.html#a70551f4df0090523408c9f19d97b97b6">bgp_update_packet</a> (peer, afi, safi);
          }
        <span class="keywordflow">else</span>
          s = <a class="code" href="bgp__packet_8c.html#a70551f4df0090523408c9f19d97b97b6">bgp_update_packet</a> (peer, afi, safi);
          }

        <span class="keywordflow">if</span> (s)
          <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
      }

    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#aab0e7899c7f4ffb2b280a37d9647a061">PEER_CAP_RESTART_RCV</a>))
      {
        <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ac634a8cdc8e00d064d9d9fcdd324a950">synctime</a>
        &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a0e4cbda72bcedfa25ea9216a5cf1bf11">PEER_STATUS_EOR_SEND</a>)
        &amp;&amp; safi != <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
          {
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a0e4cbda72bcedfa25ea9216a5cf1bf11">PEER_STATUS_EOR_SEND</a>);
        <span class="keywordflow">return</span> <a class="code" href="bgp__packet_8c.html#a5fd59a2d80d58f55d06eaa5d015c893b">bgp_update_packet_eor</a> (peer, afi, safi);
          }
      }
      }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2f88d64d5a585237b317b5a98d9fdf29"></a><!-- doxytag: member="bgp_packet.c::bgp_write_proceed" ref="a2f88d64d5a585237b317b5a98d9fdf29" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_write_proceed </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__packet_8c_source.html#l00568">568</a> of file <a class="el" href="bgp__packet_8c_source.html">bgp_packet.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;

  <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a11eebf8ef20ce7257c51bc7efc6b17de">stream_fifo_head</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>))
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>))
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      <span class="keywordflow">if</span> ((adv = <a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">if</span> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a> &lt; peer-&gt;<a class="code" href="structpeer.html#ac634a8cdc8e00d064d9d9fcdd324a950">synctime</a>)
      <span class="keywordflow">return</span> 1;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a003809094eb7833898bd97bf6da16d3b"></a><!-- doxytag: member="bgp_packet.c::stream_put_prefix" ref="a003809094eb7833898bd97bf6da16d3b" args="(struct stream *, struct prefix *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int stream_put_prefix </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="stream_8c_source.html#l00671">671</a> of file <a class="el" href="stream_8c_source.html">stream.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">size_t</span> psize;
  
  <a class="code" href="stream_8c.html#afc11a4f5119aec199ffe20c8827128cd">STREAM_VERIFY_SANE</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  
  psize = <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen);
  
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a9e7170eddfbd82389e4fcbbb0185f70f">STREAM_WRITEABLE</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) &lt; psize)
    {
      <a class="code" href="stream_8c.html#afc553ef1d11fc5e913bafc0923e3585b">STREAM_BOUND_WARN</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="stringliteral">&quot;put&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen);
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;data + <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix, psize);
  <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>-&gt;endp += psize;
  
  <span class="keywordflow">return</span> psize;
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__packet_8c.html">bgp_packet.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:12 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
