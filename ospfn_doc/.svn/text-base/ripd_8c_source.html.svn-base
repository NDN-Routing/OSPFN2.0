<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ripd/ripd.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ripd_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ripd/ripd.c</div>  </div>
</div>
<div class="contents">
<a href="ripd_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* RIP version 1 and 2.</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005 6WIND &lt;alain.ritoux@6wind.com&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1997, 98, 99 Kunihiro Ishiguro &lt;kunihiro@zebra.org&gt;</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="filter_8h.html">filter.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="sockopt_8h.html">sockopt.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="routemap_8h.html">routemap.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="if__rmap_8h.html">if_rmap.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="plist_8h.html">plist.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="distribute_8h.html">distribute.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="md5_8h.html">md5.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="keychain_8h.html">keychain.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="privs_8h.html">privs.h</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="ripd_8h.html">ripd/ripd.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="rip__debug_8h.html">ripd/rip_debug.h</a>&quot;</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">/* UDP receive buffer size */</span>
<a name="l00048"></a><a class="code" href="ripd_8c.html#abc1fc2f690463e7cf27850b0365c49b4">00048</a> <span class="preprocessor">#define RIP_UDP_RCV_BUF 41600</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span>
<a name="l00050"></a>00050 <span class="comment">/* privileges global */</span>
<a name="l00051"></a>00051 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="code" href="rip__interface_8c.html#a86af5d820616c880d6fd680778713f3b">ripd_privs</a>;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">/* RIP Structure. */</span>
<a name="l00054"></a><a class="code" href="ripd_8h.html#a678c9045be94160362e65c0e26e9e38b">00054</a> <span class="keyword">struct </span><a class="code" href="structrip.html">rip</a> *<a class="code" href="structrip.html">rip</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">/* RIP neighbor address table. */</span>
<a name="l00057"></a><a class="code" href="ripd_8c.html#aab861d5ec0475cd48794fd36d785f3fd">00057</a> <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *<a class="code" href="ripd_8c.html#aab861d5ec0475cd48794fd36d785f3fd">rip_neighbor_table</a>;
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="comment">/* RIP route changes. */</span>
<a name="l00060"></a><a class="code" href="ripd_8h.html#aee2f7ac8649bf74e5d65e6bb98e495cc">00060</a> <span class="keywordtype">long</span> <a class="code" href="ripd_8c.html#aee2f7ac8649bf74e5d65e6bb98e495cc">rip_global_route_changes</a> = 0;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">/* RIP queries. */</span>
<a name="l00063"></a><a class="code" href="ripd_8h.html#acee583ab67011897c4887052fdb3645d">00063</a> <span class="keywordtype">long</span> <a class="code" href="ripd_8c.html#acee583ab67011897c4887052fdb3645d">rip_global_queries</a> = 0;
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="comment">/* Prototypes. */</span>
<a name="l00066"></a>00066 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<span class="keyword">enum</span> <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a>, <span class="keywordtype">int</span>);
<a name="l00067"></a>00067 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (<span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *, <span class="keyword">struct</span> sockaddr_in *, <span class="keywordtype">int</span>, u_char);
<a name="l00068"></a>00068 <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="ripd_8c.html#a44a6353160beda1a7b670c61a67dd818">rip_triggered_update</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *);
<a name="l00069"></a>00069 <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="ripd_8c.html#adf7591fcda9ffc86ca850c74c268495d">rip_update_jitter</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>);
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="comment">/* RIP output routes type. */</span>
<a name="l00072"></a>00072 <span class="keyword">enum</span>
<a name="l00073"></a>00073 {
<a name="l00074"></a><a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a500d4c9125340f27abf4fa013f88dab6">00074</a>   <a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a500d4c9125340f27abf4fa013f88dab6">rip_all_route</a>,
<a name="l00075"></a><a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a875a9ec24e36cc0e1b6b6628dcfe5cdb">00075</a>   <a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a875a9ec24e36cc0e1b6b6628dcfe5cdb">rip_changed_route</a>
<a name="l00076"></a>00076 };
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">/* RIP command strings. */</span>
<a name="l00079"></a><a class="code" href="ripd_8c.html#acbf78a319ce7a605ba4ab6c76b6ac0f1">00079</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="ripd_8c.html#acbf78a319ce7a605ba4ab6c76b6ac0f1">rip_msg</a>[] =
<a name="l00080"></a>00080 {
<a name="l00081"></a>00081   {<a class="code" href="ripd_8h.html#ac4d0419fac5cd68dfee1bb1920e9689e">RIP_REQUEST</a>,    <span class="stringliteral">&quot;REQUEST&quot;</span>},
<a name="l00082"></a>00082   {<a class="code" href="ripd_8h.html#abbe6ab2f9449480e4c580b8b5e6d73a4">RIP_RESPONSE</a>,   <span class="stringliteral">&quot;RESPONSE&quot;</span>},
<a name="l00083"></a>00083   {<a class="code" href="ripd_8h.html#a6a7ceb19e2a34e38de55d31b0bcf4e60">RIP_TRACEON</a>,    <span class="stringliteral">&quot;TRACEON&quot;</span>},
<a name="l00084"></a>00084   {<a class="code" href="ripd_8h.html#a3b1ad5694c2b14ab3dd843178e03c878">RIP_TRACEOFF</a>,   <span class="stringliteral">&quot;TRACEOFF&quot;</span>},
<a name="l00085"></a>00085   {<a class="code" href="ripd_8h.html#a8f9db168b5c1d9e7b229df2919976f1b">RIP_POLL</a>,       <span class="stringliteral">&quot;POLL&quot;</span>},
<a name="l00086"></a>00086   {<a class="code" href="ripd_8h.html#a2a1e079e9594db598a6ed6e25e1564d9">RIP_POLL_ENTRY</a>, <span class="stringliteral">&quot;POLL ENTRY&quot;</span>},
<a name="l00087"></a>00087   {0, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>},
<a name="l00088"></a>00088 };
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="comment">/* Utility function to set boradcast option to the socket. */</span>
<a name="l00091"></a>00091 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00092"></a><a class="code" href="ripd_8c.html#a1a4b51c3d8f41cf229c1e3475a188d55">00092</a> <a class="code" href="ripd_8c.html#a1a4b51c3d8f41cf229c1e3475a188d55">sockopt_broadcast</a> (<span class="keywordtype">int</span> sock)
<a name="l00093"></a>00093 {
<a name="l00094"></a>00094   <span class="keywordtype">int</span> ret;
<a name="l00095"></a>00095   <span class="keywordtype">int</span> on = 1;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   ret = setsockopt (sock, SOL_SOCKET, SO_BROADCAST, (<span class="keywordtype">char</span> *) &amp;on, <span class="keyword">sizeof</span> on);
<a name="l00098"></a>00098   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00099"></a>00099     {
<a name="l00100"></a>00100       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t set sockopt SO_BROADCAST to socket %d&quot;</span>, sock);
<a name="l00101"></a>00101       <span class="keywordflow">return</span> -1;
<a name="l00102"></a>00102     }
<a name="l00103"></a>00103   <span class="keywordflow">return</span> 0;
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00107"></a><a class="code" href="ripd_8c.html#acfdc2cf7ec0359b1fabb24e48f5f0dee">00107</a> <a class="code" href="ripd_8c.html#acfdc2cf7ec0359b1fabb24e48f5f0dee">rip_route_rte</a> (<span class="keyword">struct</span> <a class="code" href="structrip__info.html">rip_info</a> *rinfo)
<a name="l00108"></a>00108 {
<a name="l00109"></a>00109   <span class="keywordflow">return</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>);
<a name="l00110"></a>00110 }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *
<a name="l00113"></a><a class="code" href="ripd_8c.html#a3c9e3f9e1fee01f622533b045fa090aa">00113</a> <a class="code" href="ripd_8c.html#a3c9e3f9e1fee01f622533b045fa090aa">rip_info_new</a> (<span class="keywordtype">void</span>)
<a name="l00114"></a>00114 {
<a name="l00115"></a>00115   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf0f7221055fe1dd5a198b56bd913850a">MTYPE_RIP_INFO</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structrip__info.html">rip_info</a>));
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="keywordtype">void</span>
<a name="l00119"></a><a class="code" href="ripd_8h.html#a4a0c0ee7722097be24b209eebf90339d">00119</a> <a class="code" href="ripd_8c.html#adc7ff2705d42a1ee587b92bbfc256f86">rip_info_free</a> (<span class="keyword">struct</span> <a class="code" href="structrip__info.html">rip_info</a> *rinfo)
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf0f7221055fe1dd5a198b56bd913850a">MTYPE_RIP_INFO</a>, rinfo);
<a name="l00122"></a>00122 }
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 <span class="comment">/* RIP route garbage collect timer. */</span>
<a name="l00125"></a>00125 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00126"></a><a class="code" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">00126</a> <a class="code" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">rip_garbage_collect</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l00127"></a>00127 {
<a name="l00128"></a>00128   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l00129"></a>00129   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131   rinfo = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l00132"></a>00132   rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134   <span class="comment">/* Off timeout timer. */</span>
<a name="l00135"></a>00135   <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
<a name="l00136"></a>00136   
<a name="l00137"></a>00137   <span class="comment">/* Get route_node pointer. */</span>
<a name="l00138"></a>00138   rp = rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140   <span class="comment">/* Unlock route_node. */</span>
<a name="l00141"></a>00141   rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00142"></a>00142   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144   <span class="comment">/* Free RIP routing information. */</span>
<a name="l00145"></a>00145   <a class="code" href="ripd_8c.html#adc7ff2705d42a1ee587b92bbfc256f86">rip_info_free</a> (rinfo);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   <span class="keywordflow">return</span> 0;
<a name="l00148"></a>00148 }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="comment">/* Timeout RIP routes. */</span>
<a name="l00151"></a>00151 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00152"></a><a class="code" href="ripd_8c.html#ae748ef0c36c9479eb5ae09eb08fb3ee3">00152</a> <a class="code" href="ripd_8c.html#ae748ef0c36c9479eb5ae09eb08fb3ee3">rip_timeout</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l00153"></a>00153 {
<a name="l00154"></a>00154   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l00155"></a>00155   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157   rinfo = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l00158"></a>00158   rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00159"></a>00159 
<a name="l00160"></a>00160   rn = rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;
<a name="l00161"></a>00161 
<a name="l00162"></a>00162   <span class="comment">/* - The garbage-collection timer is set for 120 seconds. */</span>
<a name="l00163"></a>00163   <a class="code" href="ripd_8h.html#ac82fe6284825b1b8ac9e1323196e96c4">RIP_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>, <a class="code" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">rip_garbage_collect</a>, 
<a name="l00164"></a>00164         rip-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>);
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>,
<a name="l00167"></a>00167              rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
<a name="l00168"></a>00168   <span class="comment">/* - The metric for the route is set to 16 (infinity).  This causes</span>
<a name="l00169"></a>00169 <span class="comment">     the route to be removed from service. */</span>
<a name="l00170"></a>00170   rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
<a name="l00171"></a>00171   rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> &amp;= ~<a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173   <span class="comment">/* - The route change flag is to indicate that this entry has been</span>
<a name="l00174"></a>00174 <span class="comment">     changed. */</span>
<a name="l00175"></a>00175   rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177   <span class="comment">/* - The output process is signalled to trigger a response. */</span>
<a name="l00178"></a>00178   <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);
<a name="l00179"></a>00179 
<a name="l00180"></a>00180   <span class="keywordflow">return</span> 0;
<a name="l00181"></a>00181 }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00184"></a><a class="code" href="ripd_8c.html#aa150b740aca867d0d693c0caab1d6a1c">00184</a> <a class="code" href="ripd_8c.html#aa150b740aca867d0d693c0caab1d6a1c">rip_timeout_update</a> (<span class="keyword">struct</span> <a class="code" href="structrip__info.html">rip_info</a> *rinfo)
<a name="l00185"></a>00185 {
<a name="l00186"></a>00186   <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l00187"></a>00187     {
<a name="l00188"></a>00188       <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
<a name="l00189"></a>00189       <a class="code" href="ripd_8h.html#ac82fe6284825b1b8ac9e1323196e96c4">RIP_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>, <a class="code" href="ripd_8c.html#ae748ef0c36c9479eb5ae09eb08fb3ee3">rip_timeout</a>, rip-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a>);
<a name="l00190"></a>00190     }
<a name="l00191"></a>00191 }
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00194"></a><a class="code" href="ripd_8c.html#a1b2cdbd40854edbc3b13aae5ab587431">00194</a> <a class="code" href="ripd_8c.html#a1b2cdbd40854edbc3b13aae5ab587431">rip_incoming_filter</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structrip__interface.html">rip_interface</a> *ri)
<a name="l00195"></a>00195 {
<a name="l00196"></a>00196   <span class="keyword">struct </span><a class="code" href="structdistribute.html">distribute</a> *dist;
<a name="l00197"></a>00197   <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
<a name="l00198"></a>00198   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l00199"></a>00199 
<a name="l00200"></a>00200   <span class="comment">/* Input distribute-list filtering. */</span>
<a name="l00201"></a>00201   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>])
<a name="l00202"></a>00202     {
<a name="l00203"></a>00203       <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>], 
<a name="l00204"></a>00204                  (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
<a name="l00205"></a>00205     {
<a name="l00206"></a>00206       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l00207"></a>00207         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by distribute in&quot;</span>,
<a name="l00208"></a>00208                inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00209"></a>00209       <span class="keywordflow">return</span> -1;
<a name="l00210"></a>00210     }
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>])
<a name="l00213"></a>00213     {
<a name="l00214"></a>00214       <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>], 
<a name="l00215"></a>00215                  (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l00218"></a>00218         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by prefix-list in&quot;</span>,
<a name="l00219"></a>00219                inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00220"></a>00220       <span class="keywordflow">return</span> -1;
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222     }
<a name="l00223"></a>00223 
<a name="l00224"></a>00224   <span class="comment">/* All interface filter check. */</span>
<a name="l00225"></a>00225   dist = <a class="code" href="distribute_8c.html#ad9181c39aaaf02fa3d608dc7b03aecca">distribute_lookup</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00226"></a>00226   <span class="keywordflow">if</span> (dist)
<a name="l00227"></a>00227     {
<a name="l00228"></a>00228       <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
<a name="l00229"></a>00229     {
<a name="l00230"></a>00230       alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
<a name="l00231"></a>00231         
<a name="l00232"></a>00232       <span class="keywordflow">if</span> (alist)
<a name="l00233"></a>00233         {
<a name="l00234"></a>00234           <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (alist,
<a name="l00235"></a>00235                      (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
<a name="l00236"></a>00236         {
<a name="l00237"></a>00237           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l00238"></a>00238             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by distribute in&quot;</span>,
<a name="l00239"></a>00239                    inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00240"></a>00240           <span class="keywordflow">return</span> -1;
<a name="l00241"></a>00241         }
<a name="l00242"></a>00242         }
<a name="l00243"></a>00243     }
<a name="l00244"></a>00244       <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
<a name="l00245"></a>00245     {
<a name="l00246"></a>00246       plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
<a name="l00247"></a>00247       
<a name="l00248"></a>00248       <span class="keywordflow">if</span> (plist)
<a name="l00249"></a>00249         {
<a name="l00250"></a>00250           <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (plist,
<a name="l00251"></a>00251                      (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
<a name="l00252"></a>00252         {
<a name="l00253"></a>00253           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l00254"></a>00254             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by prefix-list in&quot;</span>,
<a name="l00255"></a>00255                    inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00256"></a>00256           <span class="keywordflow">return</span> -1;
<a name="l00257"></a>00257         }
<a name="l00258"></a>00258         }
<a name="l00259"></a>00259     }
<a name="l00260"></a>00260     }
<a name="l00261"></a>00261   <span class="keywordflow">return</span> 0;
<a name="l00262"></a>00262 }
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00265"></a><a class="code" href="ripd_8c.html#aefc4f415c4c80ce04efebb7798274245">00265</a> <a class="code" href="ripd_8c.html#aefc4f415c4c80ce04efebb7798274245">rip_outgoing_filter</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structrip__interface.html">rip_interface</a> *ri)
<a name="l00266"></a>00266 {
<a name="l00267"></a>00267   <span class="keyword">struct </span><a class="code" href="structdistribute.html">distribute</a> *dist;
<a name="l00268"></a>00268   <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
<a name="l00269"></a>00269   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l00270"></a>00270 
<a name="l00271"></a>00271   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>])
<a name="l00272"></a>00272     {
<a name="l00273"></a>00273       <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>],
<a name="l00274"></a>00274                  (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
<a name="l00275"></a>00275     {
<a name="l00276"></a>00276       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l00277"></a>00277         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d is filtered by distribute out&quot;</span>,
<a name="l00278"></a>00278                inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00279"></a>00279       <span class="keywordflow">return</span> -1;
<a name="l00280"></a>00280     }
<a name="l00281"></a>00281     }
<a name="l00282"></a>00282   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>])
<a name="l00283"></a>00283     {
<a name="l00284"></a>00284       <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>],
<a name="l00285"></a>00285                  (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
<a name="l00286"></a>00286     {
<a name="l00287"></a>00287       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l00288"></a>00288         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d is filtered by prefix-list out&quot;</span>,
<a name="l00289"></a>00289                inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00290"></a>00290       <span class="keywordflow">return</span> -1;
<a name="l00291"></a>00291     }
<a name="l00292"></a>00292     }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294   <span class="comment">/* All interface filter check. */</span>
<a name="l00295"></a>00295   dist = <a class="code" href="distribute_8c.html#ad9181c39aaaf02fa3d608dc7b03aecca">distribute_lookup</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00296"></a>00296   <span class="keywordflow">if</span> (dist)
<a name="l00297"></a>00297     {
<a name="l00298"></a>00298       <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
<a name="l00299"></a>00299     {
<a name="l00300"></a>00300       alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
<a name="l00301"></a>00301         
<a name="l00302"></a>00302       <span class="keywordflow">if</span> (alist)
<a name="l00303"></a>00303         {
<a name="l00304"></a>00304           <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (alist,
<a name="l00305"></a>00305                      (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
<a name="l00306"></a>00306         {
<a name="l00307"></a>00307           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l00308"></a>00308             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by distribute out&quot;</span>,
<a name="l00309"></a>00309                    inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00310"></a>00310           <span class="keywordflow">return</span> -1;
<a name="l00311"></a>00311         }
<a name="l00312"></a>00312         }
<a name="l00313"></a>00313     }
<a name="l00314"></a>00314       <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
<a name="l00315"></a>00315     {
<a name="l00316"></a>00316       plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
<a name="l00317"></a>00317       
<a name="l00318"></a>00318       <span class="keywordflow">if</span> (plist)
<a name="l00319"></a>00319         {
<a name="l00320"></a>00320           <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (plist,
<a name="l00321"></a>00321                      (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
<a name="l00322"></a>00322         {
<a name="l00323"></a>00323           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l00324"></a>00324             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by prefix-list out&quot;</span>,
<a name="l00325"></a>00325                    inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00326"></a>00326           <span class="keywordflow">return</span> -1;
<a name="l00327"></a>00327         }
<a name="l00328"></a>00328         }
<a name="l00329"></a>00329     }
<a name="l00330"></a>00330     }
<a name="l00331"></a>00331   <span class="keywordflow">return</span> 0;
<a name="l00332"></a>00332 }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 <span class="comment">/* Check nexthop address validity. */</span>
<a name="l00335"></a>00335 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00336"></a><a class="code" href="ripd_8c.html#aa10550a1906f12d805d9c3ee5599ad4a">00336</a> <a class="code" href="ripd_8c.html#aa10550a1906f12d805d9c3ee5599ad4a">rip_nexthop_check</a> (<span class="keyword">struct</span> in_addr *addr)
<a name="l00337"></a>00337 {
<a name="l00338"></a>00338   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00339"></a>00339   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode;
<a name="l00340"></a>00340   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00341"></a>00341   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l00342"></a>00342   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00343"></a>00343 
<a name="l00344"></a>00344   <span class="comment">/* If nexthop address matches local configured address then it is</span>
<a name="l00345"></a>00345 <span class="comment">     invalid nexthop. */</span>
<a name="l00346"></a>00346   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
<a name="l00347"></a>00347     {
<a name="l00348"></a>00348       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, cnode, ifc))
<a name="l00349"></a>00349     {       
<a name="l00350"></a>00350       p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00351"></a>00351 
<a name="l00352"></a>00352       <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET
<a name="l00353"></a>00353           &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, addr))
<a name="l00354"></a>00354         <span class="keywordflow">return</span> -1;
<a name="l00355"></a>00355     }
<a name="l00356"></a>00356     }
<a name="l00357"></a>00357   <span class="keywordflow">return</span> 0;
<a name="l00358"></a>00358 }
<a name="l00359"></a>00359 
<a name="l00360"></a>00360 <span class="comment">/* RIP add route to routing table. */</span>
<a name="l00361"></a>00361 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00362"></a><a class="code" href="ripd_8c.html#a0c793e931cf8a5d290cd9cd6b7105c2f">00362</a> <a class="code" href="ripd_8c.html#a0c793e931cf8a5d290cd9cd6b7105c2f">rip_rte_process</a> (<span class="keyword">struct</span> <a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>, <span class="keyword">struct</span> sockaddr_in *from,
<a name="l00363"></a>00363                  <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00364"></a>00364 {
<a name="l00365"></a>00365   <span class="keywordtype">int</span> ret;
<a name="l00366"></a>00366   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00367"></a>00367   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
<a name="l00368"></a>00368   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo, rinfotmp;
<a name="l00369"></a>00369   <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
<a name="l00370"></a>00370   <span class="keyword">struct </span>in_addr *<a class="code" href="structnexthop.html">nexthop</a>;
<a name="l00371"></a>00371   u_char oldmetric;
<a name="l00372"></a>00372   <span class="keywordtype">int</span> same = 0;
<a name="l00373"></a>00373   <span class="keywordtype">int</span> route_reuse = 0;
<a name="l00374"></a>00374   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> old_dist, new_dist;
<a name="l00375"></a>00375 
<a name="l00376"></a>00376   <span class="comment">/* Make prefix structure. */</span>
<a name="l00377"></a>00377   memset (&amp;p, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
<a name="l00378"></a>00378   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00379"></a>00379   p.prefix = rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>;
<a name="l00380"></a>00380   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
<a name="l00381"></a>00381 
<a name="l00382"></a>00382   <span class="comment">/* Make sure mask is applied. */</span>
<a name="l00383"></a>00383   <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;p);
<a name="l00384"></a>00384 
<a name="l00385"></a>00385   <span class="comment">/* Apply input filters. */</span>
<a name="l00386"></a>00386   ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00387"></a>00387 
<a name="l00388"></a>00388   ret = <a class="code" href="ripd_8c.html#a1b2cdbd40854edbc3b13aae5ab587431">rip_incoming_filter</a> (&amp;p, ri);
<a name="l00389"></a>00389   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00390"></a>00390     <span class="keywordflow">return</span>;
<a name="l00391"></a>00391 
<a name="l00392"></a>00392   <span class="comment">/* Modify entry according to the interface routemap. */</span>
<a name="l00393"></a>00393   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>])
<a name="l00394"></a>00394     {
<a name="l00395"></a>00395       <span class="keywordtype">int</span> ret;
<a name="l00396"></a>00396       <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> newinfo;
<a name="l00397"></a>00397 
<a name="l00398"></a>00398       memset (&amp;newinfo, 0, <span class="keyword">sizeof</span> (newinfo));
<a name="l00399"></a>00399       newinfo.<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> = <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>;
<a name="l00400"></a>00400       newinfo.<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> = <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>;
<a name="l00401"></a>00401       newinfo.<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a> = rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>;
<a name="l00402"></a>00402       newinfo.<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a> = from-&gt;sin_addr;
<a name="l00403"></a>00403       newinfo.<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l00404"></a>00404       newinfo.<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>;
<a name="l00405"></a>00405       newinfo.<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>; <span class="comment">/* XXX */</span>
<a name="l00406"></a>00406       newinfo.<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a> = ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>);   <span class="comment">/* XXX */</span>
<a name="l00407"></a>00407 
<a name="l00408"></a>00408       <span class="comment">/* The object should be of the type of rip_info */</span>
<a name="l00409"></a>00409       ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>],
<a name="l00410"></a>00410                              (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370acea1c1ac711770ac85bef02d97449004">RMAP_RIP</a>, &amp;newinfo);
<a name="l00411"></a>00411 
<a name="l00412"></a>00412       <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l00413"></a>00413         {
<a name="l00414"></a>00414           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l00415"></a>00415             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIP %s/%d is filtered by route-map in&quot;</span>,
<a name="l00416"></a>00416                        inet_ntoa (p.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00417"></a>00417           <span class="keywordflow">return</span>;
<a name="l00418"></a>00418         }
<a name="l00419"></a>00419 
<a name="l00420"></a>00420       <span class="comment">/* Get back the object */</span>
<a name="l00421"></a>00421       rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a> = newinfo.<a class="code" href="structrip__info.html#aa36603c28bc184f689e674ec0bcc84bc">nexthop_out</a>;
<a name="l00422"></a>00422       rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a> = htons (newinfo.<a class="code" href="structrip__info.html#aa73d70cc27289940aeab90f33c16cf77">tag_out</a>);       <span class="comment">/* XXX */</span>
<a name="l00423"></a>00423       rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = newinfo.<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a>; <span class="comment">/* XXX: the routemap uses the metric_out field */</span>
<a name="l00424"></a>00424     }
<a name="l00425"></a>00425 
<a name="l00426"></a>00426   <span class="comment">/* Once the entry has been validated, update the metric by</span>
<a name="l00427"></a>00427 <span class="comment">     adding the cost of the network on wich the message</span>
<a name="l00428"></a>00428 <span class="comment">     arrived. If the result is greater than infinity, use infinity</span>
<a name="l00429"></a>00429 <span class="comment">     (RFC2453 Sec. 3.9.2) */</span>
<a name="l00430"></a>00430   <span class="comment">/* Zebra ripd can handle offset-list in. */</span>
<a name="l00431"></a>00431   ret = <a class="code" href="rip__offset_8c.html#a5691a4f42bb1f8a03304d60a26c89a6d">rip_offset_list_apply_in</a> (&amp;p, ifp, &amp;rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>);
<a name="l00432"></a>00432 
<a name="l00433"></a>00433   <span class="comment">/* If offset-list does not modify the metric use interface&#39;s</span>
<a name="l00434"></a>00434 <span class="comment">     metric. */</span>
<a name="l00435"></a>00435   <span class="keywordflow">if</span> (!ret)
<a name="l00436"></a>00436     rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> += ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a>;
<a name="l00437"></a>00437 
<a name="l00438"></a>00438   <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &gt; <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l00439"></a>00439     rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
<a name="l00440"></a>00440 
<a name="l00441"></a>00441   <span class="comment">/* Set nexthop pointer. */</span>
<a name="l00442"></a>00442   <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr == 0)
<a name="l00443"></a>00443     nexthop = &amp;from-&gt;sin_addr;
<a name="l00444"></a>00444   <span class="keywordflow">else</span>
<a name="l00445"></a>00445     nexthop = &amp;rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>;
<a name="l00446"></a>00446 
<a name="l00447"></a>00447   <span class="comment">/* Check if nexthop address is myself, then do nothing. */</span>
<a name="l00448"></a>00448   <span class="keywordflow">if</span> (<a class="code" href="ripd_8c.html#aa10550a1906f12d805d9c3ee5599ad4a">rip_nexthop_check</a> (nexthop) &lt; 0)
<a name="l00449"></a>00449     {
<a name="l00450"></a>00450       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l00451"></a>00451         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Nexthop address %s is myself&quot;</span>, inet_ntoa (*nexthop));
<a name="l00452"></a>00452       <span class="keywordflow">return</span>;
<a name="l00453"></a>00453     }
<a name="l00454"></a>00454 
<a name="l00455"></a>00455   <span class="comment">/* Get index for the prefix. */</span>
<a name="l00456"></a>00456   rp = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00457"></a>00457 
<a name="l00458"></a>00458   <span class="comment">/* Check to see whether there is already RIP route on the table. */</span>
<a name="l00459"></a>00459   rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00460"></a>00460 
<a name="l00461"></a>00461   <span class="keywordflow">if</span> (rinfo)
<a name="l00462"></a>00462     {
<a name="l00463"></a>00463       <span class="comment">/* Local static route. */</span>
<a name="l00464"></a>00464       <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>
<a name="l00465"></a>00465           &amp;&amp; ((rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>) ||
<a name="l00466"></a>00466               (rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#aebaf1d3e550cd8b70cf9ed9f435e72af">RIP_ROUTE_DEFAULT</a>))
<a name="l00467"></a>00467           &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l00468"></a>00468         {
<a name="l00469"></a>00469           <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l00470"></a>00470           <span class="keywordflow">return</span>;
<a name="l00471"></a>00471         }
<a name="l00472"></a>00472 
<a name="l00473"></a>00473       <span class="comment">/* Redistributed route check. */</span>
<a name="l00474"></a>00474       <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> != <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>
<a name="l00475"></a>00475           &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l00476"></a>00476         {
<a name="l00477"></a>00477           <span class="comment">/* Fill in a minimaly temporary rip_info structure, for a future</span>
<a name="l00478"></a>00478 <span class="comment">             rip_distance_apply() use) */</span>
<a name="l00479"></a>00479           memset (&amp;rinfotmp, 0, <span class="keyword">sizeof</span> (rinfotmp));
<a name="l00480"></a>00480           <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfotmp.<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, &amp;from-&gt;sin_addr);
<a name="l00481"></a>00481           rinfotmp.<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a> = rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;
<a name="l00482"></a>00482           new_dist = <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (&amp;rinfotmp);
<a name="l00483"></a>00483           new_dist = new_dist ? new_dist : <a class="code" href="zebra_8h.html#a59b508b9cafa2524d610279687c68ed3">ZEBRA_RIP_DISTANCE_DEFAULT</a>;
<a name="l00484"></a>00484           old_dist = rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a>;
<a name="l00485"></a>00485           <span class="comment">/* Only connected routes may have a valid NULL distance */</span>
<a name="l00486"></a>00486           <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
<a name="l00487"></a>00487             old_dist = old_dist ? old_dist : <a class="code" href="zebra_8h.html#a59b508b9cafa2524d610279687c68ed3">ZEBRA_RIP_DISTANCE_DEFAULT</a>;
<a name="l00488"></a>00488           <span class="comment">/* If imported route does not have STRICT precedence, </span>
<a name="l00489"></a>00489 <span class="comment">             mark it as a ghost */</span>
<a name="l00490"></a>00490           <span class="keywordflow">if</span> (new_dist &gt; old_dist 
<a name="l00491"></a>00491               || rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> == <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l00492"></a>00492             {
<a name="l00493"></a>00493               <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l00494"></a>00494               <span class="keywordflow">return</span>;
<a name="l00495"></a>00495             }
<a name="l00496"></a>00496           <span class="keywordflow">else</span>
<a name="l00497"></a>00497             {
<a name="l00498"></a>00498               <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
<a name="l00499"></a>00499               <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>);
<a name="l00500"></a>00500                                                                                 
<a name="l00501"></a>00501               rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00502"></a>00502               <span class="keywordflow">if</span> (<a class="code" href="ripd_8c.html#acfdc2cf7ec0359b1fabb24e48f5f0dee">rip_route_rte</a> (rinfo))
<a name="l00503"></a>00503                 <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, 
<a name="l00504"></a>00504                                         &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
<a name="l00505"></a>00505               <a class="code" href="ripd_8c.html#adc7ff2705d42a1ee587b92bbfc256f86">rip_info_free</a> (rinfo);
<a name="l00506"></a>00506               rinfo = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00507"></a>00507               route_reuse = 1;
<a name="l00508"></a>00508             }
<a name="l00509"></a>00509         }
<a name="l00510"></a>00510     }
<a name="l00511"></a>00511 
<a name="l00512"></a>00512   <span class="keywordflow">if</span> (!rinfo)
<a name="l00513"></a>00513     {
<a name="l00514"></a>00514       <span class="comment">/* Now, check to see whether there is already an explicit route</span>
<a name="l00515"></a>00515 <span class="comment">         for the destination prefix.  If there is no such route, add</span>
<a name="l00516"></a>00516 <span class="comment">         this route to the routing table, unless the metric is</span>
<a name="l00517"></a>00517 <span class="comment">         infinity (there is no point in adding a route which</span>
<a name="l00518"></a>00518 <span class="comment">         unusable). */</span>
<a name="l00519"></a>00519       <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l00520"></a>00520         {
<a name="l00521"></a>00521           rinfo = <a class="code" href="ripd_8c.html#a3c9e3f9e1fee01f622533b045fa090aa">rip_info_new</a> ();
<a name="l00522"></a>00522 
<a name="l00523"></a>00523           <span class="comment">/* - Setting the destination prefix and length to those in</span>
<a name="l00524"></a>00524 <span class="comment">             the RTE. */</span>
<a name="l00525"></a>00525           rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a> = <a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;
<a name="l00526"></a>00526 
<a name="l00527"></a>00527           <span class="comment">/* - Setting the metric to the newly calculated metric (as</span>
<a name="l00528"></a>00528 <span class="comment">             described above). */</span>
<a name="l00529"></a>00529           rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>;
<a name="l00530"></a>00530           rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a> = ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>);
<a name="l00531"></a>00531 
<a name="l00532"></a>00532           <span class="comment">/* - Set the next hop address to be the address of the router</span>
<a name="l00533"></a>00533 <span class="comment">             from which the datagram came or the next hop address</span>
<a name="l00534"></a>00534 <span class="comment">             specified by a next hop RTE. */</span>
<a name="l00535"></a>00535           <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, nexthop);
<a name="l00536"></a>00536           <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, &amp;from-&gt;sin_addr);
<a name="l00537"></a>00537           rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l00538"></a>00538 
<a name="l00539"></a>00539           <span class="comment">/* - Initialize the timeout for the route.  If the</span>
<a name="l00540"></a>00540 <span class="comment">             garbage-collection timer is running for this route, stop it</span>
<a name="l00541"></a>00541 <span class="comment">             (see section 2.3 for a discussion of the timers). */</span>
<a name="l00542"></a>00542           <a class="code" href="ripd_8c.html#aa150b740aca867d0d693c0caab1d6a1c">rip_timeout_update</a> (rinfo);
<a name="l00543"></a>00543 
<a name="l00544"></a>00544           <span class="comment">/* - Set the route change flag. */</span>
<a name="l00545"></a>00545           rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;
<a name="l00546"></a>00546 
<a name="l00547"></a>00547           <span class="comment">/* - Signal the output process to trigger an update (see section</span>
<a name="l00548"></a>00548 <span class="comment">             2.5). */</span>
<a name="l00549"></a>00549           <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);
<a name="l00550"></a>00550 
<a name="l00551"></a>00551           <span class="comment">/* Finally, route goes into the kernel. */</span>
<a name="l00552"></a>00552           rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> = <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>;
<a name="l00553"></a>00553           rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> = <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>;
<a name="l00554"></a>00554 
<a name="l00555"></a>00555           <span class="comment">/* Set distance value. */</span>
<a name="l00556"></a>00556           rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a> = <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (rinfo);
<a name="l00557"></a>00557 
<a name="l00558"></a>00558           rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rinfo;
<a name="l00559"></a>00559           <a class="code" href="rip__zebra_8c.html#a460a3829f5b473e965b8534e7576ba58">rip_zebra_ipv4_add</a> (&amp;p, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>,
<a name="l00560"></a>00560                               rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a>);
<a name="l00561"></a>00561           rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;
<a name="l00562"></a>00562         }
<a name="l00563"></a>00563 
<a name="l00564"></a>00564       <span class="comment">/* Unlock temporary lock, i.e. same behaviour */</span>
<a name="l00565"></a>00565       <span class="keywordflow">if</span> (route_reuse)
<a name="l00566"></a>00566         <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l00567"></a>00567     }
<a name="l00568"></a>00568   <span class="keywordflow">else</span>
<a name="l00569"></a>00569     {
<a name="l00570"></a>00570       <span class="comment">/* Route is there but we are not sure the route is RIP or not. */</span>
<a name="l00571"></a>00571       rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00572"></a>00572 
<a name="l00573"></a>00573       <span class="comment">/* If there is an existing route, compare the next hop address</span>
<a name="l00574"></a>00574 <span class="comment">         to the address of the router from which the datagram came.</span>
<a name="l00575"></a>00575 <span class="comment">         If this datagram is from the same router as the existing</span>
<a name="l00576"></a>00576 <span class="comment">         route, reinitialize the timeout.  */</span>
<a name="l00577"></a>00577       same = (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, &amp;from-&gt;sin_addr)
<a name="l00578"></a>00578               &amp;&amp; (rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> == ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>));
<a name="l00579"></a>00579 
<a name="l00580"></a>00580       <span class="keywordflow">if</span> (same)
<a name="l00581"></a>00581         <a class="code" href="ripd_8c.html#aa150b740aca867d0d693c0caab1d6a1c">rip_timeout_update</a> (rinfo);
<a name="l00582"></a>00582 
<a name="l00583"></a>00583 
<a name="l00584"></a>00584       <span class="comment">/* Fill in a minimaly temporary rip_info structure, for a future</span>
<a name="l00585"></a>00585 <span class="comment">         rip_distance_apply() use) */</span>
<a name="l00586"></a>00586       memset (&amp;rinfotmp, 0, <span class="keyword">sizeof</span> (rinfotmp));
<a name="l00587"></a>00587       <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfotmp.<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, &amp;from-&gt;sin_addr);
<a name="l00588"></a>00588       rinfotmp.<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a> = rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;
<a name="l00589"></a>00589 
<a name="l00590"></a>00590 
<a name="l00591"></a>00591       <span class="comment">/* Next, compare the metrics.  If the datagram is from the same</span>
<a name="l00592"></a>00592 <span class="comment">         router as the existing route, and the new metric is different</span>
<a name="l00593"></a>00593 <span class="comment">         than the old one; or, if the new metric is lower than the old</span>
<a name="l00594"></a>00594 <span class="comment">         one, or if the tag has been changed; or if there is a route</span>
<a name="l00595"></a>00595 <span class="comment">         with a lower administrave distance; or an update of the</span>
<a name="l00596"></a>00596 <span class="comment">         distance on the actual route; do the following actions: */</span>
<a name="l00597"></a>00597       <span class="keywordflow">if</span> ((same &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>)
<a name="l00598"></a>00598           || (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &lt; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>)
<a name="l00599"></a>00599           || ((same)
<a name="l00600"></a>00600               &amp;&amp; (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> == rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>)
<a name="l00601"></a>00601               &amp;&amp; ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>) != rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a>)
<a name="l00602"></a>00602           || (rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a> &gt; <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (&amp;rinfotmp))
<a name="l00603"></a>00603           || ((rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a> != <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (rinfo)) &amp;&amp; same))
<a name="l00604"></a>00604         {
<a name="l00605"></a>00605           <span class="comment">/* - Adopt the route from the datagram.  That is, put the</span>
<a name="l00606"></a>00606 <span class="comment">             new metric in, and adjust the next hop address (if</span>
<a name="l00607"></a>00607 <span class="comment">             necessary). */</span>
<a name="l00608"></a>00608           oldmetric = rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>;
<a name="l00609"></a>00609           rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>;
<a name="l00610"></a>00610           rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a> = ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>);
<a name="l00611"></a>00611           <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, &amp;from-&gt;sin_addr);
<a name="l00612"></a>00612           rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l00613"></a>00613           rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a> = <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (rinfo);
<a name="l00614"></a>00614 
<a name="l00615"></a>00615           <span class="comment">/* Should a new route to this network be established</span>
<a name="l00616"></a>00616 <span class="comment">             while the garbage-collection timer is running, the</span>
<a name="l00617"></a>00617 <span class="comment">             new route will replace the one that is about to be</span>
<a name="l00618"></a>00618 <span class="comment">             deleted.  In this case the garbage-collection timer</span>
<a name="l00619"></a>00619 <span class="comment">             must be cleared. */</span>
<a name="l00620"></a>00620 
<a name="l00621"></a>00621           <span class="keywordflow">if</span> (oldmetric == <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a> &amp;&amp;
<a name="l00622"></a>00622               rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> &lt; <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l00623"></a>00623             {
<a name="l00624"></a>00624               rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> = <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>;
<a name="l00625"></a>00625               rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> = <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>;
<a name="l00626"></a>00626 
<a name="l00627"></a>00627               <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>);
<a name="l00628"></a>00628 
<a name="l00629"></a>00629               <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, nexthop))
<a name="l00630"></a>00630                 <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, nexthop);
<a name="l00631"></a>00631 
<a name="l00632"></a>00632               <a class="code" href="rip__zebra_8c.html#a460a3829f5b473e965b8534e7576ba58">rip_zebra_ipv4_add</a> (&amp;p, nexthop, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>,
<a name="l00633"></a>00633                                   rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a>);
<a name="l00634"></a>00634               rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;
<a name="l00635"></a>00635             }
<a name="l00636"></a>00636 
<a name="l00637"></a>00637           <span class="comment">/* Update nexthop and/or metric value.  */</span>
<a name="l00638"></a>00638           <span class="keywordflow">if</span> (oldmetric != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l00639"></a>00639             {
<a name="l00640"></a>00640               <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> (&amp;p, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, oldmetric);
<a name="l00641"></a>00641               <a class="code" href="rip__zebra_8c.html#a460a3829f5b473e965b8534e7576ba58">rip_zebra_ipv4_add</a> (&amp;p, nexthop, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>,
<a name="l00642"></a>00642                                   rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a>);
<a name="l00643"></a>00643               rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;
<a name="l00644"></a>00644 
<a name="l00645"></a>00645               <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, nexthop))
<a name="l00646"></a>00646                 <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, nexthop);
<a name="l00647"></a>00647             }
<a name="l00648"></a>00648 
<a name="l00649"></a>00649           <span class="comment">/* - Set the route change flag and signal the output process</span>
<a name="l00650"></a>00650 <span class="comment">             to trigger an update. */</span>
<a name="l00651"></a>00651           rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;
<a name="l00652"></a>00652           <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);
<a name="l00653"></a>00653 
<a name="l00654"></a>00654           <span class="comment">/* - If the new metric is infinity, start the deletion</span>
<a name="l00655"></a>00655 <span class="comment">             process (described above); */</span>
<a name="l00656"></a>00656           <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> == <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l00657"></a>00657             {
<a name="l00658"></a>00658               <span class="comment">/* If the new metric is infinity, the deletion process</span>
<a name="l00659"></a>00659 <span class="comment">                 begins for the route, which is no longer used for</span>
<a name="l00660"></a>00660 <span class="comment">                 routing packets.  Note that the deletion process is</span>
<a name="l00661"></a>00661 <span class="comment">                 started only when the metric is first set to</span>
<a name="l00662"></a>00662 <span class="comment">                 infinity.  If the metric was already infinity, then a</span>
<a name="l00663"></a>00663 <span class="comment">                 new deletion process is not started. */</span>
<a name="l00664"></a>00664               <span class="keywordflow">if</span> (oldmetric != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l00665"></a>00665                 {
<a name="l00666"></a>00666                   <span class="comment">/* - The garbage-collection timer is set for 120 seconds. */</span>
<a name="l00667"></a>00667                   <a class="code" href="ripd_8h.html#ac82fe6284825b1b8ac9e1323196e96c4">RIP_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>,
<a name="l00668"></a>00668                                 <a class="code" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">rip_garbage_collect</a>, rip-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>);
<a name="l00669"></a>00669                   <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
<a name="l00670"></a>00670 
<a name="l00671"></a>00671                   <span class="comment">/* - The metric for the route is set to 16</span>
<a name="l00672"></a>00672 <span class="comment">                     (infinity).  This causes the route to be removed</span>
<a name="l00673"></a>00673 <span class="comment">                     from service. */</span>
<a name="l00674"></a>00674                   <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> (&amp;p, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, oldmetric);
<a name="l00675"></a>00675                   rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> &amp;= ~<a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;
<a name="l00676"></a>00676 
<a name="l00677"></a>00677                   <span class="comment">/* - The route change flag is to indicate that this</span>
<a name="l00678"></a>00678 <span class="comment">                     entry has been changed. */</span>
<a name="l00679"></a>00679                   <span class="comment">/* - The output process is signalled to trigger a</span>
<a name="l00680"></a>00680 <span class="comment">                     response. */</span>
<a name="l00681"></a>00681                   ;             <span class="comment">/* Above processes are already done previously. */</span>
<a name="l00682"></a>00682                 }
<a name="l00683"></a>00683             }
<a name="l00684"></a>00684           <span class="keywordflow">else</span>
<a name="l00685"></a>00685             {
<a name="l00686"></a>00686               <span class="comment">/* otherwise, re-initialize the timeout. */</span>
<a name="l00687"></a>00687               <a class="code" href="ripd_8c.html#aa150b740aca867d0d693c0caab1d6a1c">rip_timeout_update</a> (rinfo);
<a name="l00688"></a>00688             }
<a name="l00689"></a>00689         }
<a name="l00690"></a>00690       <span class="comment">/* Unlock tempolary lock of the route. */</span>
<a name="l00691"></a>00691       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l00692"></a>00692     }
<a name="l00693"></a>00693 }
<a name="l00694"></a>00694 
<a name="l00695"></a>00695 <span class="comment">/* Dump RIP packet */</span>
<a name="l00696"></a>00696 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00697"></a><a class="code" href="ripd_8c.html#a04c8759c650299a52379cfe00f257283">00697</a> <a class="code" href="ripd_8c.html#a04c8759c650299a52379cfe00f257283">rip_packet_dump</a> (<span class="keyword">struct</span> <a class="code" href="structrip__packet.html">rip_packet</a> *packet, <span class="keywordtype">int</span> size, <span class="keyword">const</span> <span class="keywordtype">char</span> *sndrcv)
<a name="l00698"></a>00698 {
<a name="l00699"></a>00699   caddr_t lim;
<a name="l00700"></a>00700   <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
<a name="l00701"></a>00701   <span class="keyword">const</span> <span class="keywordtype">char</span> *command_str;
<a name="l00702"></a>00702   <span class="keywordtype">char</span> pbuf[BUFSIZ], nbuf[BUFSIZ];
<a name="l00703"></a>00703   u_char netmask = 0;
<a name="l00704"></a>00704   u_char *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00705"></a>00705 
<a name="l00706"></a>00706   <span class="comment">/* Set command string. */</span>
<a name="l00707"></a>00707   <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a> &gt; 0 &amp;&amp; packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a> &lt; <a class="code" href="ripd_8h.html#acba959b48de4cab194205e2bbce22edb">RIP_COMMAND_MAX</a>)
<a name="l00708"></a>00708     command_str = <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rip_msg, packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>);
<a name="l00709"></a>00709   <span class="keywordflow">else</span>
<a name="l00710"></a>00710     command_str = <span class="stringliteral">&quot;unknown&quot;</span>;
<a name="l00711"></a>00711 
<a name="l00712"></a>00712   <span class="comment">/* Dump packet header. */</span>
<a name="l00713"></a>00713   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s %s version %d packet size %d&quot;</span>,
<a name="l00714"></a>00714          sndrcv, command_str, packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>, size);
<a name="l00715"></a>00715 
<a name="l00716"></a>00716   <span class="comment">/* Dump each routing table entry. */</span>
<a name="l00717"></a>00717   rte = packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;
<a name="l00718"></a>00718   
<a name="l00719"></a>00719   <span class="keywordflow">for</span> (lim = (caddr_t) packet + size; (caddr_t) rte &lt; lim; rte++)
<a name="l00720"></a>00720     {
<a name="l00721"></a>00721       <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>)
<a name="l00722"></a>00722     {
<a name="l00723"></a>00723       netmask = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
<a name="l00724"></a>00724 
<a name="l00725"></a>00725           <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a> == htons (<a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>))
<a name="l00726"></a>00726             {
<a name="l00727"></a>00727               <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a> == htons (<a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>))
<a name="l00728"></a>00728         {
<a name="l00729"></a>00729           p = (u_char *)&amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>;
<a name="l00730"></a>00730 
<a name="l00731"></a>00731           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  family 0x%X type %d auth string: %s&quot;</span>,
<a name="l00732"></a>00732                  ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>), ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
<a name="l00733"></a>00733         }
<a name="l00734"></a>00734               <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a> == htons (<a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>))
<a name="l00735"></a>00735         {
<a name="l00736"></a>00736           <span class="keyword">struct </span><a class="code" href="structrip__md5__info.html">rip_md5_info</a> *md5;
<a name="l00737"></a>00737 
<a name="l00738"></a>00738           md5 = (<span class="keyword">struct </span><a class="code" href="structrip__md5__info.html">rip_md5_info</a> *) &amp;packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;
<a name="l00739"></a>00739 
<a name="l00740"></a>00740           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  family 0x%X type %d (MD5 authentication)&quot;</span>,
<a name="l00741"></a>00741                  ntohs (md5-&gt;<a class="code" href="structrip__md5__info.html#a70289921e83ac982f7890a8a18f184d9">family</a>), ntohs (md5-&gt;<a class="code" href="structrip__md5__info.html#a82b1691dcaf7b0532d0a88d5caba79b6">type</a>));
<a name="l00742"></a>00742           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    RIP-2 packet len %d Key ID %d&quot;</span>
<a name="l00743"></a>00743                              <span class="stringliteral">&quot; Auth Data len %d&quot;</span>,
<a name="l00744"></a>00744                              ntohs (md5-&gt;<a class="code" href="structrip__md5__info.html#abfcfa2b126c679e644267b084322f9cc">packet_len</a>), md5-&gt;<a class="code" href="structrip__md5__info.html#a5ca9121c92c6ab7c43f339ce2dd5307c">keyid</a>,
<a name="l00745"></a>00745                              md5-&gt;<a class="code" href="structrip__md5__info.html#a84616a46d0f48097b0c36dc20cbe7b4b">auth_len</a>);
<a name="l00746"></a>00746                   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    Sequence Number %ld&quot;</span>,
<a name="l00747"></a>00747                              (u_long) ntohl (md5-&gt;<a class="code" href="structrip__md5__info.html#abf8a2a3c0b0e80e0a5b92a2c705fcbaa">sequence</a>));
<a name="l00748"></a>00748         }
<a name="l00749"></a>00749               <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a> == htons (<a class="code" href="ripd_8h.html#aba0b4d86f4a1404f2ffa900d4ba2880d">RIP_AUTH_DATA</a>))
<a name="l00750"></a>00750         {
<a name="l00751"></a>00751           p = (u_char *)&amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>;
<a name="l00752"></a>00752 
<a name="l00753"></a>00753           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  family 0x%X type %d (MD5 data)&quot;</span>,
<a name="l00754"></a>00754                  ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>), ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>));
<a name="l00755"></a>00755           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    MD5: %02X%02X%02X%02X%02X%02X%02X%02X&quot;</span>
<a name="l00756"></a>00756                  <span class="stringliteral">&quot;%02X%02X%02X%02X%02X%02X%02X&quot;</span>,
<a name="l00757"></a>00757                              p[0], p[1], p[2], p[3], p[4], p[5], p[6],
<a name="l00758"></a>00758                              p[7], p[9], p[10], p[11], p[12], p[13],
<a name="l00759"></a>00759                              p[14], p[15]);
<a name="l00760"></a>00760         }
<a name="l00761"></a>00761           <span class="keywordflow">else</span>
<a name="l00762"></a>00762         {
<a name="l00763"></a>00763           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  family 0x%X type %d (Unknown auth type)&quot;</span>,
<a name="l00764"></a>00764                  ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>), ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>));
<a name="l00765"></a>00765         }
<a name="l00766"></a>00766             }
<a name="l00767"></a>00767       <span class="keywordflow">else</span>
<a name="l00768"></a>00768         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  %s/%d -&gt; %s family %d tag %d metric %ld&quot;</span>,
<a name="l00769"></a>00769                        <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>, pbuf, BUFSIZ),
<a name="l00770"></a>00770                        netmask, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>, nbuf,
<a name="l00771"></a>00771                                            BUFSIZ), ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>),
<a name="l00772"></a>00772                        ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>), (u_long) ntohl (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>));
<a name="l00773"></a>00773     }
<a name="l00774"></a>00774       <span class="keywordflow">else</span>
<a name="l00775"></a>00775     {
<a name="l00776"></a>00776       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  %s family %d tag %d metric %ld&quot;</span>, 
<a name="l00777"></a>00777              <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>, pbuf, BUFSIZ),
<a name="l00778"></a>00778              ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>), ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>),
<a name="l00779"></a>00779              (u_long)ntohl (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>));
<a name="l00780"></a>00780     }
<a name="l00781"></a>00781     }
<a name="l00782"></a>00782 }
<a name="l00783"></a>00783 
<a name="l00784"></a>00784 <span class="comment">/* Check if the destination address is valid (unicast; not net 0</span>
<a name="l00785"></a>00785 <span class="comment">   or 127) (RFC2453 Section 3.9.2 - Page 26).  But we don&#39;t</span>
<a name="l00786"></a>00786 <span class="comment">   check net 0 because we accept default route. */</span>
<a name="l00787"></a>00787 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00788"></a><a class="code" href="ripd_8c.html#a7b77dd9cb3d1dec4bcfd49dd7f69cf2d">00788</a> <a class="code" href="ripd_8c.html#a7b77dd9cb3d1dec4bcfd49dd7f69cf2d">rip_destination_check</a> (<span class="keyword">struct</span> in_addr addr)
<a name="l00789"></a>00789 {
<a name="l00790"></a>00790   u_int32_t destination;
<a name="l00791"></a>00791 
<a name="l00792"></a>00792   <span class="comment">/* Convert to host byte order. */</span>
<a name="l00793"></a>00793   destination = ntohl (addr.s_addr);
<a name="l00794"></a>00794 
<a name="l00795"></a>00795   <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a255d6e4fa5cfaf4cd252266a0bd4dfda">IPV4_NET127</a> (destination))
<a name="l00796"></a>00796     <span class="keywordflow">return</span> 0;
<a name="l00797"></a>00797 
<a name="l00798"></a>00798   <span class="comment">/* Net 0 may match to the default route. */</span>
<a name="l00799"></a>00799   <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a3864bb8a4b7cb6bff9e5c1d9ace8c215">IPV4_NET0</a> (destination) &amp;&amp; destination != 0)
<a name="l00800"></a>00800     <span class="keywordflow">return</span> 0;
<a name="l00801"></a>00801 
<a name="l00802"></a>00802   <span class="comment">/* Unicast address must belong to class A, B, C. */</span>
<a name="l00803"></a>00803   <span class="keywordflow">if</span> (IN_CLASSA (destination))
<a name="l00804"></a>00804     <span class="keywordflow">return</span> 1;
<a name="l00805"></a>00805   <span class="keywordflow">if</span> (IN_CLASSB (destination))
<a name="l00806"></a>00806     <span class="keywordflow">return</span> 1;
<a name="l00807"></a>00807   <span class="keywordflow">if</span> (IN_CLASSC (destination))
<a name="l00808"></a>00808     <span class="keywordflow">return</span> 1;
<a name="l00809"></a>00809 
<a name="l00810"></a>00810   <span class="keywordflow">return</span> 0;
<a name="l00811"></a>00811 }
<a name="l00812"></a>00812 
<a name="l00813"></a>00813 <span class="comment">/* RIP version 2 authentication. */</span>
<a name="l00814"></a>00814 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00815"></a><a class="code" href="ripd_8c.html#a2c3068b4df03ffa8845f74323ddfabcd">00815</a> <a class="code" href="ripd_8c.html#a2c3068b4df03ffa8845f74323ddfabcd">rip_auth_simple_password</a> (<span class="keyword">struct</span> <a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>, <span class="keyword">struct</span> sockaddr_in *from,
<a name="l00816"></a>00816               <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00817"></a>00817 {
<a name="l00818"></a>00818   <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
<a name="l00819"></a>00819   <span class="keywordtype">char</span> *<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>;
<a name="l00820"></a>00820 
<a name="l00821"></a>00821   <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l00822"></a>00822     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 simple password authentication from %s&quot;</span>,
<a name="l00823"></a>00823            inet_ntoa (from-&gt;sin_addr));
<a name="l00824"></a>00824 
<a name="l00825"></a>00825   ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00826"></a>00826 
<a name="l00827"></a>00827   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>
<a name="l00828"></a>00828       || rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a> != htons(<a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>))
<a name="l00829"></a>00829     <span class="keywordflow">return</span> 0;
<a name="l00830"></a>00830 
<a name="l00831"></a>00831   <span class="comment">/* Simple password authentication. */</span>
<a name="l00832"></a>00832   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>)
<a name="l00833"></a>00833     {
<a name="l00834"></a>00834       auth_str = (<span class="keywordtype">char</span> *) &amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>;
<a name="l00835"></a>00835       
<a name="l00836"></a>00836       if (strncmp (auth_str, ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>, 16) == 0)
<a name="l00837"></a>00837     <span class="keywordflow">return</span> 1;
<a name="l00838"></a>00838     }
<a name="l00839"></a>00839   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>)
<a name="l00840"></a>00840     {
<a name="l00841"></a>00841       <span class="keyword">struct </span><a class="code" href="structkeychain.html">keychain</a> *<a class="code" href="structkeychain.html">keychain</a>;
<a name="l00842"></a>00842       <span class="keyword">struct </span><a class="code" href="structkey.html">key</a> *<a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
<a name="l00843"></a>00843 
<a name="l00844"></a>00844       keychain = <a class="code" href="keychain_8c.html#a0d83c9f26473a5d9ab10051f72471278">keychain_lookup</a> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>);
<a name="l00845"></a>00845       <span class="keywordflow">if</span> (keychain == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00846"></a>00846     <span class="keywordflow">return</span> 0;
<a name="l00847"></a>00847 
<a name="l00848"></a>00848       key = <a class="code" href="keychain_8c.html#a847f99d89fd7c5aecbf63fb9dd0e5e97">key_match_for_accept</a> (keychain, (<span class="keywordtype">char</span> *) &amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>);
<a name="l00849"></a>00849       <span class="keywordflow">if</span> (key)
<a name="l00850"></a>00850     <span class="keywordflow">return</span> 1;
<a name="l00851"></a>00851     }
<a name="l00852"></a>00852   <span class="keywordflow">return</span> 0;
<a name="l00853"></a>00853 }
<a name="l00854"></a>00854 
<a name="l00855"></a>00855 <span class="comment">/* RIP version 2 authentication with MD5. */</span>
<a name="l00856"></a>00856 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00857"></a><a class="code" href="ripd_8c.html#a6f2010a631def9499b1db67a697568a2">00857</a> <a class="code" href="ripd_8c.html#a6f2010a631def9499b1db67a697568a2">rip_auth_md5</a> (<span class="keyword">struct</span> <a class="code" href="structrip__packet.html">rip_packet</a> *packet, <span class="keyword">struct</span> sockaddr_in *from,
<a name="l00858"></a>00858               <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00859"></a>00859 {
<a name="l00860"></a>00860   <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
<a name="l00861"></a>00861   <span class="keyword">struct </span><a class="code" href="structrip__md5__info.html">rip_md5_info</a> *md5;
<a name="l00862"></a>00862   <span class="keyword">struct </span><a class="code" href="structrip__md5__data.html">rip_md5_data</a> *md5data;
<a name="l00863"></a>00863   <span class="keyword">struct </span><a class="code" href="structkeychain.html">keychain</a> *<a class="code" href="structkeychain.html">keychain</a>;
<a name="l00864"></a>00864   <span class="keyword">struct </span><a class="code" href="structkey.html">key</a> *<a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
<a name="l00865"></a>00865   <a class="code" href="md5_8h.html#a71b7c53816d90dc180b03df889aacd18">MD5_CTX</a> ctx;
<a name="l00866"></a>00866   u_char digest[<a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>];
<a name="l00867"></a>00867   u_int16_t packet_len;
<a name="l00868"></a>00868   <span class="keywordtype">char</span> auth_str[<a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>];
<a name="l00869"></a>00869   
<a name="l00870"></a>00870   <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l00871"></a>00871     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 MD5 authentication from %s&quot;</span>,
<a name="l00872"></a>00872                inet_ntoa (from-&gt;sin_addr));
<a name="l00873"></a>00873 
<a name="l00874"></a>00874   ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00875"></a>00875   md5 = (<span class="keyword">struct </span><a class="code" href="structrip__md5__info.html">rip_md5_info</a> *) &amp;packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;
<a name="l00876"></a>00876 
<a name="l00877"></a>00877   <span class="comment">/* Check auth type. */</span>
<a name="l00878"></a>00878   if (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a> || md5-&gt;<a class="code" href="structrip__md5__info.html#a82b1691dcaf7b0532d0a88d5caba79b6">type</a> != htons(<a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>))
<a name="l00879"></a>00879     <span class="keywordflow">return</span> 0;
<a name="l00880"></a>00880 
<a name="l00881"></a>00881   <span class="comment">/* If the authentication length is less than 16, then it must be wrong for</span>
<a name="l00882"></a>00882 <span class="comment">   * any interpretation of rfc2082. Some implementations also interpret</span>
<a name="l00883"></a>00883 <span class="comment">   * this as RIP_HEADER_SIZE+ RIP_AUTH_MD5_SIZE, aka RIP_AUTH_MD5_COMPAT_SIZE.</span>
<a name="l00884"></a>00884 <span class="comment">   */</span>
<a name="l00885"></a>00885   <span class="keywordflow">if</span> ( !((md5-&gt;<a class="code" href="structrip__md5__info.html#a84616a46d0f48097b0c36dc20cbe7b4b">auth_len</a> == <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>)
<a name="l00886"></a>00886          || (md5-&gt;<a class="code" href="structrip__md5__info.html#a84616a46d0f48097b0c36dc20cbe7b4b">auth_len</a> == <a class="code" href="ripd_8h.html#a0c555d4d776823081ff9e4edef277657">RIP_AUTH_MD5_COMPAT_SIZE</a>)))
<a name="l00887"></a>00887     {
<a name="l00888"></a>00888       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l00889"></a>00889         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 MD5 authentication, strange authentication &quot;</span>
<a name="l00890"></a>00890                    <span class="stringliteral">&quot;length field %d&quot;</span>, md5-&gt;<a class="code" href="structrip__md5__info.html#a84616a46d0f48097b0c36dc20cbe7b4b">auth_len</a>);
<a name="l00891"></a>00891     <span class="keywordflow">return</span> 0;
<a name="l00892"></a>00892     }
<a name="l00893"></a>00893 
<a name="l00894"></a>00894   <span class="comment">/* grab and verify check packet length */</span>
<a name="l00895"></a>00895   packet_len = ntohs (md5-&gt;<a class="code" href="structrip__md5__info.html#abfcfa2b126c679e644267b084322f9cc">packet_len</a>);
<a name="l00896"></a>00896 
<a name="l00897"></a>00897   <span class="keywordflow">if</span> (packet_len &gt; (length - <a class="code" href="ripd_8h.html#a2b406f37d407dde3db724ee3d24d94a4">RIP_HEADER_SIZE</a> - <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>))
<a name="l00898"></a>00898     {
<a name="l00899"></a>00899       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l00900"></a>00900         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 MD5 authentication, packet length field %d &quot;</span>
<a name="l00901"></a>00901                    <span class="stringliteral">&quot;greater than received length %d!&quot;</span>,
<a name="l00902"></a>00902                    md5-&gt;<a class="code" href="structrip__md5__info.html#abfcfa2b126c679e644267b084322f9cc">packet_len</a>, length);
<a name="l00903"></a>00903       <span class="keywordflow">return</span> 0;
<a name="l00904"></a>00904     }
<a name="l00905"></a>00905 
<a name="l00906"></a>00906   <span class="comment">/* retrieve authentication data */</span>
<a name="l00907"></a>00907   md5data = (<span class="keyword">struct </span><a class="code" href="structrip__md5__data.html">rip_md5_data</a> *) (((u_char *) packet) + packet_len);
<a name="l00908"></a>00908   
<a name="l00909"></a>00909   memset (auth_str, 0, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);
<a name="l00910"></a>00910 
<a name="l00911"></a>00911   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>)
<a name="l00912"></a>00912     {
<a name="l00913"></a>00913       keychain = <a class="code" href="keychain_8c.html#a0d83c9f26473a5d9ab10051f72471278">keychain_lookup</a> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>);
<a name="l00914"></a>00914       <span class="keywordflow">if</span> (keychain == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00915"></a>00915     <span class="keywordflow">return</span> 0;
<a name="l00916"></a>00916 
<a name="l00917"></a>00917       key = <a class="code" href="keychain_8c.html#a60a0d8f69165cc362b08b1ff56bb3762">key_lookup_for_accept</a> (keychain, md5-&gt;<a class="code" href="structrip__md5__info.html#a5ca9121c92c6ab7c43f339ce2dd5307c">keyid</a>);
<a name="l00918"></a>00918       <span class="keywordflow">if</span> (key == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00919"></a>00919     <span class="keywordflow">return</span> 0;
<a name="l00920"></a>00920 
<a name="l00921"></a>00921       strncpy (auth_str, key-&gt;<a class="code" href="structkey.html#ab82f6af1953da7203884ced78d668fd0">string</a>, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);
<a name="l00922"></a>00922     }
<a name="l00923"></a>00923   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>)
<a name="l00924"></a>00924     strncpy (auth_str, ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);
<a name="l00925"></a>00925 
<a name="l00926"></a>00926   <span class="keywordflow">if</span> (auth_str[0] == 0)
<a name="l00927"></a>00927     <span class="keywordflow">return</span> 0;
<a name="l00928"></a>00928   
<a name="l00929"></a>00929   <span class="comment">/* MD5 digest authentication. */</span>
<a name="l00930"></a>00930   memset (&amp;ctx, 0, <span class="keyword">sizeof</span>(ctx));
<a name="l00931"></a>00931   <a class="code" href="md5_8h.html#a3651aa5847a3d8ca5141aa25086cc146">MD5Init</a>(&amp;ctx);
<a name="l00932"></a>00932   <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, packet, packet_len + <a class="code" href="ripd_8h.html#a2b406f37d407dde3db724ee3d24d94a4">RIP_HEADER_SIZE</a>);
<a name="l00933"></a>00933   <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, auth_str, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);
<a name="l00934"></a>00934   <a class="code" href="md5_8h.html#ae653f59a8022a8e4b0a6beccec24452d">MD5Final</a>(digest, &amp;ctx);
<a name="l00935"></a>00935   
<a name="l00936"></a>00936   <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (md5data-&gt;<a class="code" href="structrip__md5__data.html#adfb4b6fd27f910b953b470eb258cefe5">digest</a>, digest, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>) == 0)
<a name="l00937"></a>00937     <span class="keywordflow">return</span> packet_len;
<a name="l00938"></a>00938   <span class="keywordflow">else</span>
<a name="l00939"></a>00939     <span class="keywordflow">return</span> 0;
<a name="l00940"></a>00940 }
<a name="l00941"></a>00941 
<a name="l00942"></a>00942 <span class="comment">/* Pick correct auth string for sends, prepare auth_str buffer for use.</span>
<a name="l00943"></a>00943 <span class="comment"> * (left justified and padded).</span>
<a name="l00944"></a>00944 <span class="comment"> *</span>
<a name="l00945"></a>00945 <span class="comment"> * presumes one of ri or key is valid, and that the auth strings they point</span>
<a name="l00946"></a>00946 <span class="comment"> * to are nul terminated. If neither are present, auth_str will be fully</span>
<a name="l00947"></a>00947 <span class="comment"> * zero padded.</span>
<a name="l00948"></a>00948 <span class="comment"> *</span>
<a name="l00949"></a>00949 <span class="comment"> */</span>
<a name="l00950"></a>00950 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00951"></a><a class="code" href="ripd_8c.html#a2747a4f7653e3afdccb61a7412fe4555">00951</a> <a class="code" href="ripd_8c.html#a2747a4f7653e3afdccb61a7412fe4555">rip_auth_prepare_str_send</a> (<span class="keyword">struct</span> <a class="code" href="structrip__interface.html">rip_interface</a> *ri, <span class="keyword">struct</span> <a class="code" href="structkey.html">key</a> *<a class="code" href="structkey.html">key</a>, 
<a name="l00952"></a>00952                            <span class="keywordtype">char</span> *auth_str, <span class="keywordtype">int</span> len)
<a name="l00953"></a>00953 {
<a name="l00954"></a>00954   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ri || key);
<a name="l00955"></a>00955 
<a name="l00956"></a>00956   memset (auth_str, 0, len);
<a name="l00957"></a>00957   <span class="keywordflow">if</span> (key &amp;&amp; key-&gt;<a class="code" href="structkey.html#ab82f6af1953da7203884ced78d668fd0">string</a>)
<a name="l00958"></a>00958     strncpy (auth_str, key-&gt;<a class="code" href="structkey.html#ab82f6af1953da7203884ced78d668fd0">string</a>, len);
<a name="l00959"></a>00959   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>)
<a name="l00960"></a>00960     strncpy (auth_str, ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>, len);
<a name="l00961"></a>00961 
<a name="l00962"></a>00962   <span class="keywordflow">return</span>;
<a name="l00963"></a>00963 }
<a name="l00964"></a>00964 
<a name="l00965"></a>00965 <span class="comment">/* Write RIPv2 simple password authentication information</span>
<a name="l00966"></a>00966 <span class="comment"> *</span>
<a name="l00967"></a>00967 <span class="comment"> * auth_str is presumed to be 2 bytes and correctly prepared </span>
<a name="l00968"></a>00968 <span class="comment"> * (left justified and zero padded).</span>
<a name="l00969"></a>00969 <span class="comment"> */</span>
<a name="l00970"></a>00970 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00971"></a><a class="code" href="ripd_8c.html#a08c4416f33070c82500b7e5e0f05ee37">00971</a> <a class="code" href="ripd_8c.html#a08c4416f33070c82500b7e5e0f05ee37">rip_auth_simple_write</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keywordtype">char</span> *auth_str, <span class="keywordtype">int</span> len)
<a name="l00972"></a>00972 {
<a name="l00973"></a>00973   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (s &amp;&amp; len == <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);
<a name="l00974"></a>00974   
<a name="l00975"></a>00975   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>);
<a name="l00976"></a>00976   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>);
<a name="l00977"></a>00977   <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, auth_str, <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);
<a name="l00978"></a>00978   
<a name="l00979"></a>00979   <span class="keywordflow">return</span>;
<a name="l00980"></a>00980 }
<a name="l00981"></a>00981 
<a name="l00982"></a>00982 <span class="comment">/* write RIPv2 MD5 &quot;authentication header&quot; </span>
<a name="l00983"></a>00983 <span class="comment"> * (uses the auth key data field)</span>
<a name="l00984"></a>00984 <span class="comment"> *</span>
<a name="l00985"></a>00985 <span class="comment"> * Digest offset field is set to 0.</span>
<a name="l00986"></a>00986 <span class="comment"> *</span>
<a name="l00987"></a>00987 <span class="comment"> * returns: offset of the digest offset field, which must be set when</span>
<a name="l00988"></a>00988 <span class="comment"> * length to the auth-data MD5 digest is known.</span>
<a name="l00989"></a>00989 <span class="comment"> */</span>
<a name="l00990"></a>00990 <span class="keyword">static</span> <span class="keywordtype">size_t</span>
<a name="l00991"></a><a class="code" href="ripd_8c.html#a7d84f0f0f8b5dfab5862fff951a13eca">00991</a> <a class="code" href="ripd_8c.html#a7d84f0f0f8b5dfab5862fff951a13eca">rip_auth_md5_ah_write</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structrip__interface.html">rip_interface</a> *ri, 
<a name="l00992"></a>00992                        <span class="keyword">struct</span> <a class="code" href="structkey.html">key</a> *<a class="code" href="structkey.html">key</a>)
<a name="l00993"></a>00993 {
<a name="l00994"></a>00994   <span class="keywordtype">size_t</span> doff = 0;
<a name="l00995"></a>00995 
<a name="l00996"></a>00996   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (s &amp;&amp; ri &amp;&amp; ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>);
<a name="l00997"></a>00997 
<a name="l00998"></a>00998   <span class="comment">/* MD5 authentication. */</span>
<a name="l00999"></a>00999   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>);
<a name="l01000"></a>01000   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>);
<a name="l01001"></a>01001 
<a name="l01002"></a>01002   <span class="comment">/* MD5 AH digest offset field.</span>
<a name="l01003"></a>01003 <span class="comment">   *</span>
<a name="l01004"></a>01004 <span class="comment">   * Set to placeholder value here, to true value when RIP-2 Packet length</span>
<a name="l01005"></a>01005 <span class="comment">   * is known.  Actual value is set in .....().</span>
<a name="l01006"></a>01006 <span class="comment">   */</span>
<a name="l01007"></a>01007   doff = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(s);
<a name="l01008"></a>01008   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l01009"></a>01009 
<a name="l01010"></a>01010   <span class="comment">/* Key ID. */</span>
<a name="l01011"></a>01011   <span class="keywordflow">if</span> (key)
<a name="l01012"></a>01012     <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, key-&gt;<a class="code" href="structkey.html#a40b597137701dbab70d6cc8833c5e88f">index</a> % 256);
<a name="l01013"></a>01013   <span class="keywordflow">else</span>
<a name="l01014"></a>01014     <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 1);
<a name="l01015"></a>01015 
<a name="l01016"></a>01016   <span class="comment">/* Auth Data Len.  Set 16 for MD5 authentication data. Older ripds </span>
<a name="l01017"></a>01017 <span class="comment">   * however expect RIP_HEADER_SIZE + RIP_AUTH_MD5_SIZE so we allow for this</span>
<a name="l01018"></a>01018 <span class="comment">   * to be configurable. </span>
<a name="l01019"></a>01019 <span class="comment">   */</span>
<a name="l01020"></a>01020   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, ri-&gt;<a class="code" href="structrip__interface.html#a7853c3b761c4029aa4eebec5132c1286">md5_auth_len</a>);
<a name="l01021"></a>01021 
<a name="l01022"></a>01022   <span class="comment">/* Sequence Number (non-decreasing). */</span>
<a name="l01023"></a>01023   <span class="comment">/* RFC2080: The value used in the sequence number is</span>
<a name="l01024"></a>01024 <span class="comment">     arbitrary, but two suggestions are the time of the</span>
<a name="l01025"></a>01025 <span class="comment">     message&#39;s creation or a simple message counter. */</span>
<a name="l01026"></a>01026   <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>));
<a name="l01027"></a>01027           
<a name="l01028"></a>01028   <span class="comment">/* Reserved field must be zero. */</span>
<a name="l01029"></a>01029   <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, 0);
<a name="l01030"></a>01030   <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, 0);
<a name="l01031"></a>01031 
<a name="l01032"></a>01032   <span class="keywordflow">return</span> doff;
<a name="l01033"></a>01033 }
<a name="l01034"></a>01034 
<a name="l01035"></a>01035 <span class="comment">/* If authentication is in used, write the appropriate header</span>
<a name="l01036"></a>01036 <span class="comment"> * returns stream offset to which length must later be written</span>
<a name="l01037"></a>01037 <span class="comment"> * or 0 if this is not required</span>
<a name="l01038"></a>01038 <span class="comment"> */</span>
<a name="l01039"></a>01039 <span class="keyword">static</span> <span class="keywordtype">size_t</span>
<a name="l01040"></a><a class="code" href="ripd_8c.html#a72538cf9bcdaa839156ff1390c6cc2a0">01040</a> <a class="code" href="ripd_8c.html#a72538cf9bcdaa839156ff1390c6cc2a0">rip_auth_header_write</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structrip__interface.html">rip_interface</a> *ri, 
<a name="l01041"></a>01041                        <span class="keyword">struct</span> <a class="code" href="structkey.html">key</a> *<a class="code" href="structkey.html">key</a>, <span class="keywordtype">char</span> *auth_str, <span class="keywordtype">int</span> len)
<a name="l01042"></a>01042 {
<a name="l01043"></a>01043   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a>);
<a name="l01044"></a>01044   
<a name="l01045"></a>01045   <span class="keywordflow">switch</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a>)
<a name="l01046"></a>01046     {
<a name="l01047"></a>01047       <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>:
<a name="l01048"></a>01048         <a class="code" href="ripd_8c.html#a2747a4f7653e3afdccb61a7412fe4555">rip_auth_prepare_str_send</a> (ri, key, auth_str, len);
<a name="l01049"></a>01049         <a class="code" href="ripd_8c.html#a08c4416f33070c82500b7e5e0f05ee37">rip_auth_simple_write</a> (s, auth_str, len);
<a name="l01050"></a>01050         <span class="keywordflow">return</span> 0;
<a name="l01051"></a>01051       <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>:
<a name="l01052"></a>01052         <span class="keywordflow">return</span> <a class="code" href="ripd_8c.html#a7d84f0f0f8b5dfab5862fff951a13eca">rip_auth_md5_ah_write</a> (s, ri, key);
<a name="l01053"></a>01053     }
<a name="l01054"></a>01054   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (1);
<a name="l01055"></a>01055   <span class="keywordflow">return</span> 0;
<a name="l01056"></a>01056 }
<a name="l01057"></a>01057 
<a name="l01058"></a>01058 <span class="comment">/* Write RIPv2 MD5 authentication data trailer */</span>
<a name="l01059"></a>01059 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01060"></a><a class="code" href="ripd_8c.html#a4a48a7de91fb41ecbdfe8be6861c214d">01060</a> <a class="code" href="ripd_8c.html#a4a48a7de91fb41ecbdfe8be6861c214d">rip_auth_md5_set</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structrip__interface.html">rip_interface</a> *ri, <span class="keywordtype">size_t</span> doff,
<a name="l01061"></a>01061                   <span class="keywordtype">char</span> *auth_str, <span class="keywordtype">int</span> authlen)
<a name="l01062"></a>01062 {
<a name="l01063"></a>01063   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> len;
<a name="l01064"></a>01064   <a class="code" href="md5_8h.html#a71b7c53816d90dc180b03df889aacd18">MD5_CTX</a> ctx;
<a name="l01065"></a>01065   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="structrip__md5__data.html#adfb4b6fd27f910b953b470eb258cefe5">digest</a>[<a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>];
<a name="l01066"></a>01066 
<a name="l01067"></a>01067   <span class="comment">/* Make it sure this interface is configured as MD5</span>
<a name="l01068"></a>01068 <span class="comment">     authentication. */</span>
<a name="l01069"></a>01069   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> ((ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>) &amp;&amp; (authlen == <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>));
<a name="l01070"></a>01070   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (doff &gt; 0);
<a name="l01071"></a>01071   
<a name="l01072"></a>01072   <span class="comment">/* Get packet length. */</span>
<a name="l01073"></a>01073   len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(s);
<a name="l01074"></a>01074 
<a name="l01075"></a>01075   <span class="comment">/* Check packet length. */</span>
<a name="l01076"></a>01076   <span class="keywordflow">if</span> (len &lt; (<a class="code" href="ripd_8h.html#a2b406f37d407dde3db724ee3d24d94a4">RIP_HEADER_SIZE</a> + <a class="code" href="ripd_8h.html#a6bcabfdfe4b1b9865cb6c04bb6713497">RIP_RTE_SIZE</a>))
<a name="l01077"></a>01077     {
<a name="l01078"></a>01078       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rip_auth_md5_set(): packet length %ld is less than minimum length.&quot;</span>, len);
<a name="l01079"></a>01079       <span class="keywordflow">return</span>;
<a name="l01080"></a>01080     }
<a name="l01081"></a>01081 
<a name="l01082"></a>01082   <span class="comment">/* Set the digest offset length in the header */</span>
<a name="l01083"></a>01083   <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, doff, len);
<a name="l01084"></a>01084   
<a name="l01085"></a>01085   <span class="comment">/* Set authentication data. */</span>
<a name="l01086"></a>01086   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>);
<a name="l01087"></a>01087   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#aba0b4d86f4a1404f2ffa900d4ba2880d">RIP_AUTH_DATA</a>);
<a name="l01088"></a>01088 
<a name="l01089"></a>01089   <span class="comment">/* Generate a digest for the RIP packet. */</span>
<a name="l01090"></a>01090   memset(&amp;ctx, 0, <span class="keyword">sizeof</span>(ctx));
<a name="l01091"></a>01091   <a class="code" href="md5_8h.html#a3651aa5847a3d8ca5141aa25086cc146">MD5Init</a>(&amp;ctx);
<a name="l01092"></a>01092   <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
<a name="l01093"></a>01093   <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, auth_str, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);
<a name="l01094"></a>01094   <a class="code" href="md5_8h.html#ae653f59a8022a8e4b0a6beccec24452d">MD5Final</a>(digest, &amp;ctx);
<a name="l01095"></a>01095 
<a name="l01096"></a>01096   <span class="comment">/* Copy the digest to the packet. */</span>
<a name="l01097"></a>01097   <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (s, digest, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);
<a name="l01098"></a>01098 }
<a name="l01099"></a>01099 
<a name="l01100"></a>01100 <span class="comment">/* RIP routing information. */</span>
<a name="l01101"></a>01101 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01102"></a><a class="code" href="ripd_8c.html#a736ea390d3ed633046eb5c320ac21f30">01102</a> <a class="code" href="ripd_8c.html#a736ea390d3ed633046eb5c320ac21f30">rip_response_process</a> (<span class="keyword">struct</span> <a class="code" href="structrip__packet.html">rip_packet</a> *packet, <span class="keywordtype">int</span> size, 
<a name="l01103"></a>01103               <span class="keyword">struct</span> sockaddr_in *from, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l01104"></a>01104 {
<a name="l01105"></a>01105   caddr_t lim;
<a name="l01106"></a>01106   <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
<a name="l01107"></a>01107   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> ifaddr;
<a name="l01108"></a>01108   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> ifaddrclass;
<a name="l01109"></a>01109   <span class="keywordtype">int</span> subnetted;
<a name="l01110"></a>01110       
<a name="l01111"></a>01111   <span class="comment">/* We don&#39;t know yet. */</span>
<a name="l01112"></a>01112   subnetted = -1;
<a name="l01113"></a>01113 
<a name="l01114"></a>01114   <span class="comment">/* The Response must be ignored if it is not from the RIP</span>
<a name="l01115"></a>01115 <span class="comment">     port. (RFC2453 - Sec. 3.9.2)*/</span>
<a name="l01116"></a>01116   <span class="keywordflow">if</span> (from-&gt;sin_port != htons(<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>))
<a name="l01117"></a>01117     {
<a name="l01118"></a>01118       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;response doesn&#39;t come from RIP port: %d&quot;</span>,
<a name="l01119"></a>01119          from-&gt;sin_port);
<a name="l01120"></a>01120       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (from);
<a name="l01121"></a>01121       <span class="keywordflow">return</span>;
<a name="l01122"></a>01122     }
<a name="l01123"></a>01123 
<a name="l01124"></a>01124   <span class="comment">/* The datagram&#39;s IPv4 source address should be checked to see</span>
<a name="l01125"></a>01125 <span class="comment">     whether the datagram is from a valid neighbor; the source of the</span>
<a name="l01126"></a>01126 <span class="comment">     datagram must be on a directly connected network (RFC2453 - Sec. 3.9.2) */</span>
<a name="l01127"></a>01127   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a84f550f6181fac06214b71b6408fc8db">if_lookup_address</a>(from-&gt;sin_addr) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
<a name="l01128"></a>01128     {
<a name="l01129"></a>01129       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;This datagram doesn&#39;t came from a valid neighbor: %s&quot;</span>,
<a name="l01130"></a>01130          inet_ntoa (from-&gt;sin_addr));
<a name="l01131"></a>01131       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (from);
<a name="l01132"></a>01132       <span class="keywordflow">return</span>;
<a name="l01133"></a>01133     }
<a name="l01134"></a>01134 
<a name="l01135"></a>01135   <span class="comment">/* It is also worth checking to see whether the response is from one</span>
<a name="l01136"></a>01136 <span class="comment">     of the router&#39;s own addresses. */</span>
<a name="l01137"></a>01137 
<a name="l01138"></a>01138   ; <span class="comment">/* Alredy done in rip_read () */</span>
<a name="l01139"></a>01139 
<a name="l01140"></a>01140   <span class="comment">/* Update RIP peer. */</span>
<a name="l01141"></a>01141   <a class="code" href="rip__peer_8c.html#aa7cc288ea45c0c2961f86ee2aff648ad">rip_peer_update</a> (from, packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);
<a name="l01142"></a>01142 
<a name="l01143"></a>01143   <span class="comment">/* Set RTE pointer. */</span>
<a name="l01144"></a>01144   rte = packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;
<a name="l01145"></a>01145 
<a name="l01146"></a>01146   <span class="keywordflow">for</span> (lim = (caddr_t) packet + size; (caddr_t) rte &lt; lim; rte++)
<a name="l01147"></a>01147     {
<a name="l01148"></a>01148       <span class="comment">/* RIPv2 authentication check. */</span>
<a name="l01149"></a>01149       <span class="comment">/* If the Address Family Identifier of the first (and only the</span>
<a name="l01150"></a>01150 <span class="comment">     first) entry in the message is 0xFFFF, then the remainder of</span>
<a name="l01151"></a>01151 <span class="comment">     the entry contains the authentication. */</span>
<a name="l01152"></a>01152       <span class="comment">/* If the packet gets here it means authentication enabled */</span>
<a name="l01153"></a>01153       <span class="comment">/* Check is done in rip_read(). So, just skipping it */</span>
<a name="l01154"></a>01154       <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> &amp;&amp;
<a name="l01155"></a>01155       rte == packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a> &amp;&amp;
<a name="l01156"></a>01156       rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a> == htons(<a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>))
<a name="l01157"></a>01157     <span class="keywordflow">continue</span>;
<a name="l01158"></a>01158 
<a name="l01159"></a>01159       <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a> != htons(AF_INET))
<a name="l01160"></a>01160     {
<a name="l01161"></a>01161       <span class="comment">/* Address family check.  RIP only supports AF_INET. */</span>
<a name="l01162"></a>01162       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Unsupported family %d from %s.&quot;</span>,
<a name="l01163"></a>01163              ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>), inet_ntoa (from-&gt;sin_addr));
<a name="l01164"></a>01164       <span class="keywordflow">continue</span>;
<a name="l01165"></a>01165     }
<a name="l01166"></a>01166 
<a name="l01167"></a>01167       <span class="comment">/* - is the destination address valid (e.g., unicast; not net 0</span>
<a name="l01168"></a>01168 <span class="comment">         or 127) */</span>
<a name="l01169"></a>01169       <span class="keywordflow">if</span> (! <a class="code" href="ripd_8c.html#a7b77dd9cb3d1dec4bcfd49dd7f69cf2d">rip_destination_check</a> (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>))
<a name="l01170"></a>01170         {
<a name="l01171"></a>01171       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Network is net 0 or net 127 or it is not unicast network&quot;</span>);
<a name="l01172"></a>01172       <a class="code" href="rip__peer_8c.html#a6a38f0b9d042a51ce833b0810eb97dc8">rip_peer_bad_route</a> (from);
<a name="l01173"></a>01173       <span class="keywordflow">continue</span>;
<a name="l01174"></a>01174     } 
<a name="l01175"></a>01175 
<a name="l01176"></a>01176       <span class="comment">/* Convert metric value to host byte order. */</span>
<a name="l01177"></a>01177       rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = ntohl (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>);
<a name="l01178"></a>01178 
<a name="l01179"></a>01179       <span class="comment">/* - is the metric valid (i.e., between 1 and 16, inclusive) */</span>
<a name="l01180"></a>01180       <span class="keywordflow">if</span> (! (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &gt;= 1 &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &lt;= 16))
<a name="l01181"></a>01181     {
<a name="l01182"></a>01182       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Route&#39;s metric is not in the 1-16 range.&quot;</span>);
<a name="l01183"></a>01183       <a class="code" href="rip__peer_8c.html#a6a38f0b9d042a51ce833b0810eb97dc8">rip_peer_bad_route</a> (from);
<a name="l01184"></a>01184       <span class="keywordflow">continue</span>;
<a name="l01185"></a>01185     }
<a name="l01186"></a>01186 
<a name="l01187"></a>01187       <span class="comment">/* RIPv1 does not have nexthop value. */</span>
<a name="l01188"></a>01188       <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a> &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr != 0)
<a name="l01189"></a>01189     {
<a name="l01190"></a>01190       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;RIPv1 packet with nexthop value %s&quot;</span>,
<a name="l01191"></a>01191              inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>));
<a name="l01192"></a>01192       <a class="code" href="rip__peer_8c.html#a6a38f0b9d042a51ce833b0810eb97dc8">rip_peer_bad_route</a> (from);
<a name="l01193"></a>01193       <span class="keywordflow">continue</span>;
<a name="l01194"></a>01194     }
<a name="l01195"></a>01195 
<a name="l01196"></a>01196       <span class="comment">/* That is, if the provided information is ignored, a possibly</span>
<a name="l01197"></a>01197 <span class="comment">     sub-optimal, but absolutely valid, route may be taken.  If</span>
<a name="l01198"></a>01198 <span class="comment">     the received Next Hop is not directly reachable, it should be</span>
<a name="l01199"></a>01199 <span class="comment">     treated as 0.0.0.0. */</span>
<a name="l01200"></a>01200       <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr != 0)
<a name="l01201"></a>01201     {
<a name="l01202"></a>01202       u_int32_t addrval;
<a name="l01203"></a>01203 
<a name="l01204"></a>01204       <span class="comment">/* Multicast address check. */</span>
<a name="l01205"></a>01205       addrval = ntohl (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr);
<a name="l01206"></a>01206       <span class="keywordflow">if</span> (IN_CLASSD (addrval))
<a name="l01207"></a>01207         {
<a name="l01208"></a>01208           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Nexthop %s is multicast address, skip this rte&quot;</span>,
<a name="l01209"></a>01209              inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>));
<a name="l01210"></a>01210           <span class="keywordflow">continue</span>;
<a name="l01211"></a>01211         }
<a name="l01212"></a>01212 
<a name="l01213"></a>01213       <span class="keywordflow">if</span> (! <a class="code" href="if_8c.html#a84f550f6181fac06214b71b6408fc8db">if_lookup_address</a> (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>))
<a name="l01214"></a>01214         {
<a name="l01215"></a>01215           <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l01216"></a>01216           <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l01217"></a>01217 
<a name="l01218"></a>01218           rn = <a class="code" href="table_8c.html#a9c0fd90aeeed01fb5b5301c98f642a95">route_node_match_ipv4</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>, &amp;rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>);
<a name="l01219"></a>01219 
<a name="l01220"></a>01220           <span class="keywordflow">if</span> (rn)
<a name="l01221"></a>01221         {
<a name="l01222"></a>01222           rinfo = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l01223"></a>01223 
<a name="l01224"></a>01224           <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>
<a name="l01225"></a>01225               &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>)
<a name="l01226"></a>01226             {
<a name="l01227"></a>01227               <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01228"></a>01228             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Next hop %s is on RIP network.  Set nexthop to the packet&#39;s originator&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>));
<a name="l01229"></a>01229               rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a> = rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>;
<a name="l01230"></a>01230             }
<a name="l01231"></a>01231           <span class="keywordflow">else</span>
<a name="l01232"></a>01232             {
<a name="l01233"></a>01233               <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01234"></a>01234             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Next hop %s is not directly reachable. Treat it as 0.0.0.0&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>));
<a name="l01235"></a>01235               rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr = 0;
<a name="l01236"></a>01236             }
<a name="l01237"></a>01237 
<a name="l01238"></a>01238           <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l01239"></a>01239         }
<a name="l01240"></a>01240           <span class="keywordflow">else</span>
<a name="l01241"></a>01241         {
<a name="l01242"></a>01242           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01243"></a>01243             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Next hop %s is not directly reachable. Treat it as 0.0.0.0&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>));
<a name="l01244"></a>01244           rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr = 0;
<a name="l01245"></a>01245         }
<a name="l01246"></a>01246 
<a name="l01247"></a>01247         }
<a name="l01248"></a>01248     }
<a name="l01249"></a>01249 
<a name="l01250"></a>01250      <span class="comment">/* For RIPv1, there won&#39;t be a valid netmask.  </span>
<a name="l01251"></a>01251 <span class="comment"></span>
<a name="l01252"></a>01252 <span class="comment">    This is a best guess at the masks.  If everyone was using old</span>
<a name="l01253"></a>01253 <span class="comment">    Ciscos before the &#39;ip subnet zero&#39; option, it would be almost</span>
<a name="l01254"></a>01254 <span class="comment">    right too :-)</span>
<a name="l01255"></a>01255 <span class="comment">      </span>
<a name="l01256"></a>01256 <span class="comment">    Cisco summarize ripv1 advertisments to the classful boundary</span>
<a name="l01257"></a>01257 <span class="comment">    (/16 for class B&#39;s) except when the RIP packet does to inside</span>
<a name="l01258"></a>01258 <span class="comment">    the classful network in question.  */</span>
<a name="l01259"></a>01259 
<a name="l01260"></a>01260       <span class="keywordflow">if</span> ((packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a> &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr != 0) 
<a name="l01261"></a>01261       || (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> 
<a name="l01262"></a>01262           &amp;&amp; (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr != 0 &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr == 0)))
<a name="l01263"></a>01263     {
<a name="l01264"></a>01264       u_int32_t destination;
<a name="l01265"></a>01265 
<a name="l01266"></a>01266       <span class="keywordflow">if</span> (subnetted == -1)
<a name="l01267"></a>01267             {
<a name="l01268"></a>01268               <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifaddr, ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>, sizeof (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
<a name="l01269"></a>01269               <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifaddrclass, &amp;ifaddr, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
<a name="l01270"></a>01270               <a class="code" href="prefix_8c.html#a00e9cb624cf0d2526fbc5a48b340d046">apply_classful_mask_ipv4</a> (&amp;ifaddrclass);
<a name="l01271"></a>01271               subnetted = 0;
<a name="l01272"></a>01272               <span class="keywordflow">if</span> (ifaddr.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> &gt; ifaddrclass.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>)
<a name="l01273"></a>01273                 subnetted = 1;
<a name="l01274"></a>01274             }
<a name="l01275"></a>01275 
<a name="l01276"></a>01276       destination = ntohl (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr);
<a name="l01277"></a>01277 
<a name="l01278"></a>01278       <span class="keywordflow">if</span> (IN_CLASSA (destination))
<a name="l01279"></a>01279           <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (8, &amp;rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
<a name="l01280"></a>01280       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IN_CLASSB (destination))
<a name="l01281"></a>01281           <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (16, &amp;rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
<a name="l01282"></a>01282       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IN_CLASSC (destination))
<a name="l01283"></a>01283           <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (24, &amp;rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
<a name="l01284"></a>01284 
<a name="l01285"></a>01285       <span class="keywordflow">if</span> (subnetted == 1)
<a name="l01286"></a>01286         <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (ifaddrclass.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
<a name="l01287"></a>01287             (<span class="keyword">struct</span> in_addr *) &amp;destination);
<a name="l01288"></a>01288       <span class="keywordflow">if</span> ((subnetted == 1) &amp;&amp; ((rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr &amp; destination) ==
<a name="l01289"></a>01289           ifaddrclass.prefix.s_addr))
<a name="l01290"></a>01290         {
<a name="l01291"></a>01291           <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (ifaddr.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
<a name="l01292"></a>01292           <span class="keywordflow">if</span> ((rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr &amp; rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr) != rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr)
<a name="l01293"></a>01293         <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (32, &amp;rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
<a name="l01294"></a>01294           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01295"></a>01295         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Subnetted route %s&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>));
<a name="l01296"></a>01296         }
<a name="l01297"></a>01297       <span class="keywordflow">else</span>
<a name="l01298"></a>01298         {
<a name="l01299"></a>01299           <span class="keywordflow">if</span> ((rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr &amp; rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr) != rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr)
<a name="l01300"></a>01300         <span class="keywordflow">continue</span>;
<a name="l01301"></a>01301         }
<a name="l01302"></a>01302 
<a name="l01303"></a>01303       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01304"></a>01304         {
<a name="l01305"></a>01305           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Resultant route %s&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>));
<a name="l01306"></a>01306           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Resultant mask %s&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>));
<a name="l01307"></a>01307         }
<a name="l01308"></a>01308     }
<a name="l01309"></a>01309 
<a name="l01310"></a>01310       <span class="comment">/* In case of RIPv2, if prefix in RTE is not netmask applied one</span>
<a name="l01311"></a>01311 <span class="comment">         ignore the entry.  */</span>
<a name="l01312"></a>01312       <span class="keywordflow">if</span> ((packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>) 
<a name="l01313"></a>01313       &amp;&amp; (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr != 0) 
<a name="l01314"></a>01314       &amp;&amp; ((rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr &amp; rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr) != rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr))
<a name="l01315"></a>01315     {
<a name="l01316"></a>01316       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPv2 address %s is not mask /%d applied one&quot;</span>,
<a name="l01317"></a>01317              inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>), <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>));
<a name="l01318"></a>01318       <a class="code" href="rip__peer_8c.html#a6a38f0b9d042a51ce833b0810eb97dc8">rip_peer_bad_route</a> (from);
<a name="l01319"></a>01319       <span class="keywordflow">continue</span>;
<a name="l01320"></a>01320     }
<a name="l01321"></a>01321 
<a name="l01322"></a>01322       <span class="comment">/* Default route&#39;s netmask is ignored. */</span>
<a name="l01323"></a>01323       <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>
<a name="l01324"></a>01324       &amp;&amp; (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr == 0)
<a name="l01325"></a>01325       &amp;&amp; (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr != 0))
<a name="l01326"></a>01326     {
<a name="l01327"></a>01327       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01328"></a>01328         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Default route with non-zero netmask.  Set zero to netmask&quot;</span>);
<a name="l01329"></a>01329       rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr = 0;
<a name="l01330"></a>01330     }
<a name="l01331"></a>01331       
<a name="l01332"></a>01332       <span class="comment">/* Routing table updates. */</span>
<a name="l01333"></a>01333       <a class="code" href="ripd_8c.html#a0c793e931cf8a5d290cd9cd6b7105c2f">rip_rte_process</a> (rte, from, ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>);
<a name="l01334"></a>01334     }
<a name="l01335"></a>01335 }
<a name="l01336"></a>01336 
<a name="l01337"></a>01337 <span class="comment">/* Make socket for RIP protocol. */</span>
<a name="l01338"></a>01338 <span class="keyword">static</span> <span class="keywordtype">int</span> 
<a name="l01339"></a><a class="code" href="ripd_8c.html#a7d120833f5e80143c6dee4123ad86a4a">01339</a> <a class="code" href="ripd_8c.html#a7d120833f5e80143c6dee4123ad86a4a">rip_create_socket</a> (<span class="keyword">struct</span> sockaddr_in *<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>)
<a name="l01340"></a>01340 {
<a name="l01341"></a>01341   <span class="keywordtype">int</span> ret;
<a name="l01342"></a>01342   <span class="keywordtype">int</span> sock;
<a name="l01343"></a>01343   <span class="keyword">struct </span>sockaddr_in addr;
<a name="l01344"></a>01344   
<a name="l01345"></a>01345   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l01346"></a>01346   
<a name="l01347"></a>01347   <span class="keywordflow">if</span> (!from)
<a name="l01348"></a>01348     {
<a name="l01349"></a>01349       addr.sin_family = AF_INET;
<a name="l01350"></a>01350       addr.sin_addr.s_addr = INADDR_ANY;
<a name="l01351"></a>01351 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l01352"></a>01352 <span class="preprocessor"></span>      addr.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l01353"></a>01353 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l01354"></a>01354     } <span class="keywordflow">else</span> {
<a name="l01355"></a>01355       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(&amp;addr, from, <span class="keyword">sizeof</span>(addr));
<a name="l01356"></a>01356     }
<a name="l01357"></a>01357   
<a name="l01358"></a>01358   <span class="comment">/* sending port must always be the RIP port */</span>
<a name="l01359"></a>01359   addr.sin_port = htons (<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>);
<a name="l01360"></a>01360   
<a name="l01361"></a>01361   <span class="comment">/* Make datagram socket. */</span>
<a name="l01362"></a>01362   sock = socket (AF_INET, SOCK_DGRAM, 0);
<a name="l01363"></a>01363   <span class="keywordflow">if</span> (sock &lt; 0) 
<a name="l01364"></a>01364     {
<a name="l01365"></a>01365       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Cannot create UDP socket: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l01366"></a>01366       <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l01367"></a>01367     }
<a name="l01368"></a>01368 
<a name="l01369"></a>01369   <a class="code" href="ripd_8c.html#a1a4b51c3d8f41cf229c1e3475a188d55">sockopt_broadcast</a> (sock);
<a name="l01370"></a>01370   <a class="code" href="sockunion_8c.html#aa177c0a1e91bd7ac7af8d703768a56bc">sockopt_reuseaddr</a> (sock);
<a name="l01371"></a>01371   <a class="code" href="sockunion_8c.html#a1910bb0d088e8c63fcf2d1441a0ad4e4">sockopt_reuseport</a> (sock);
<a name="l01372"></a>01372 <span class="preprocessor">#ifdef RIP_RECVMSG</span>
<a name="l01373"></a>01373 <span class="preprocessor"></span>  setsockopt_pktinfo (sock);
<a name="l01374"></a>01374 <span class="preprocessor">#endif </span><span class="comment">/* RIP_RECVMSG */</span>
<a name="l01375"></a>01375 <span class="preprocessor">#ifdef IPTOS_PREC_INTERNETCONTROL</span>
<a name="l01376"></a>01376 <span class="preprocessor"></span>  <a class="code" href="sockopt_8c.html#a3ea00b83444773c5162871266744a286">setsockopt_ipv4_tos</a> (sock, <a class="code" href="ospfd_8h.html#aad2536be3b05d82e79158c07c0d26142">IPTOS_PREC_INTERNETCONTROL</a>);
<a name="l01377"></a>01377 <span class="preprocessor">#endif</span>
<a name="l01378"></a>01378 <span class="preprocessor"></span>
<a name="l01379"></a>01379   <span class="keywordflow">if</span> (<a class="code" href="rip__interface_8c.html#a86af5d820616c880d6fd680778713f3b">ripd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
<a name="l01380"></a>01380       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rip_create_socket: could not raise privs&quot;</span>);
<a name="l01381"></a>01381   <a class="code" href="sockopt_8c.html#abdfd124bd2b3b787be44b3e78e99bc37">setsockopt_so_recvbuf</a> (sock, <a class="code" href="ripd_8c.html#abc1fc2f690463e7cf27850b0365c49b4">RIP_UDP_RCV_BUF</a>);
<a name="l01382"></a>01382   <span class="keywordflow">if</span> ( (ret = bind (sock, (<span class="keyword">struct</span> sockaddr *) &amp; addr, <span class="keyword">sizeof</span> (addr))) &lt; 0)
<a name="l01383"></a>01383   
<a name="l01384"></a>01384     {
<a name="l01385"></a>01385       <span class="keywordtype">int</span> save_errno = errno;
<a name="l01386"></a>01386       <span class="keywordflow">if</span> (<a class="code" href="rip__interface_8c.html#a86af5d820616c880d6fd680778713f3b">ripd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l01387"></a>01387         <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rip_create_socket: could not lower privs&quot;</span>);
<a name="l01388"></a>01388       
<a name="l01389"></a>01389       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;%s: Can&#39;t bind socket %d to %s port %d: %s&quot;</span>, __func__,
<a name="l01390"></a>01390            sock, inet_ntoa(addr.sin_addr), 
<a name="l01391"></a>01391            (<span class="keywordtype">int</span>) ntohs(addr.sin_port), 
<a name="l01392"></a>01392            <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(save_errno));
<a name="l01393"></a>01393       
<a name="l01394"></a>01394       close (sock);
<a name="l01395"></a>01395       <span class="keywordflow">return</span> ret;
<a name="l01396"></a>01396     }
<a name="l01397"></a>01397   
<a name="l01398"></a>01398   <span class="keywordflow">if</span> (<a class="code" href="rip__interface_8c.html#a86af5d820616c880d6fd680778713f3b">ripd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l01399"></a>01399       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rip_create_socket: could not lower privs&quot;</span>);
<a name="l01400"></a>01400       
<a name="l01401"></a>01401   <span class="keywordflow">return</span> sock;
<a name="l01402"></a>01402 }
<a name="l01403"></a>01403 
<a name="l01404"></a>01404 <span class="comment">/* RIP packet send to destination address, on interface denoted by</span>
<a name="l01405"></a>01405 <span class="comment"> * by connected argument. NULL to argument denotes destination should be</span>
<a name="l01406"></a>01406 <span class="comment"> * should be RIP multicast group</span>
<a name="l01407"></a>01407 <span class="comment"> */</span>
<a name="l01408"></a>01408 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01409"></a><a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">01409</a> <a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> (u_char * buf, <span class="keywordtype">int</span> size, <span class="keyword">struct</span> sockaddr_in *to,
<a name="l01410"></a>01410                  <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l01411"></a>01411 {
<a name="l01412"></a>01412   <span class="keywordtype">int</span> ret, send_sock;
<a name="l01413"></a>01413   <span class="keyword">struct </span>sockaddr_in sin;
<a name="l01414"></a>01414   
<a name="l01415"></a>01415   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ifc != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01416"></a>01416   
<a name="l01417"></a>01417   <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l01418"></a>01418     {
<a name="l01419"></a>01419 <span class="preprocessor">#define ADDRESS_SIZE 20</span>
<a name="l01420"></a>01420 <span class="preprocessor"></span>      <span class="keywordtype">char</span> dst[<a class="code" href="ripd_8c.html#ac34ab37f5f69d07660e27a26e30ee861">ADDRESS_SIZE</a>];
<a name="l01421"></a>01421       dst[<a class="code" href="ripd_8c.html#ac34ab37f5f69d07660e27a26e30ee861">ADDRESS_SIZE</a> - 1] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l01422"></a>01422       
<a name="l01423"></a>01423       <span class="keywordflow">if</span> (to)
<a name="l01424"></a>01424         {
<a name="l01425"></a>01425           strncpy (dst, inet_ntoa(to-&gt;sin_addr), <a class="code" href="ripd_8c.html#ac34ab37f5f69d07660e27a26e30ee861">ADDRESS_SIZE</a> - 1);
<a name="l01426"></a>01426         }
<a name="l01427"></a>01427       <span class="keywordflow">else</span>
<a name="l01428"></a>01428         {
<a name="l01429"></a>01429           sin.sin_addr.s_addr = htonl (<a class="code" href="ripd_8h.html#a44583b015fb87161d1b2359ffe5fdc96">INADDR_RIP_GROUP</a>);
<a name="l01430"></a>01430           strncpy (dst, inet_ntoa(sin.sin_addr), <a class="code" href="ripd_8c.html#ac34ab37f5f69d07660e27a26e30ee861">ADDRESS_SIZE</a> - 1);
<a name="l01431"></a>01431         }
<a name="l01432"></a>01432 <span class="preprocessor">#undef ADDRESS_SIZE</span>
<a name="l01433"></a>01433 <span class="preprocessor"></span>      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;rip_send_packet %s &gt; %s (%s)&quot;</span>,
<a name="l01434"></a>01434                 inet_ntoa(ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
<a name="l01435"></a>01435                 dst, ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l01436"></a>01436     }
<a name="l01437"></a>01437   
<a name="l01438"></a>01438   <span class="keywordflow">if</span> ( <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>, <a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">ZEBRA_IFA_SECONDARY</a>) )
<a name="l01439"></a>01439     {
<a name="l01440"></a>01440       <span class="comment">/*</span>
<a name="l01441"></a>01441 <span class="comment">       * ZEBRA_IFA_SECONDARY is set on linux when an interface is configured</span>
<a name="l01442"></a>01442 <span class="comment">       * with multiple addresses on the same subnet: the first address</span>
<a name="l01443"></a>01443 <span class="comment">       * on the subnet is configured &quot;primary&quot;, and all subsequent addresses</span>
<a name="l01444"></a>01444 <span class="comment">       * on that subnet are treated as &quot;secondary&quot; addresses. </span>
<a name="l01445"></a>01445 <span class="comment">       * In order to avoid routing-table bloat on other rip listeners, </span>
<a name="l01446"></a>01446 <span class="comment">       * we do not send out RIP packets with ZEBRA_IFA_SECONDARY source addrs.</span>
<a name="l01447"></a>01447 <span class="comment">       * XXX Since Linux is the only system for which the ZEBRA_IFA_SECONDARY</span>
<a name="l01448"></a>01448 <span class="comment">       * flag is set, we would end up sending a packet for a &quot;secondary&quot;</span>
<a name="l01449"></a>01449 <span class="comment">       * source address on non-linux systems.  </span>
<a name="l01450"></a>01450 <span class="comment">       */</span>
<a name="l01451"></a>01451       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l01452"></a>01452         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;duplicate dropped&quot;</span>);
<a name="l01453"></a>01453       <span class="keywordflow">return</span> 0;
<a name="l01454"></a>01454     }
<a name="l01455"></a>01455 
<a name="l01456"></a>01456   <span class="comment">/* Make destination address. */</span>
<a name="l01457"></a>01457   memset (&amp;sin, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l01458"></a>01458   sin.sin_family = AF_INET;
<a name="l01459"></a>01459 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l01460"></a>01460 <span class="preprocessor"></span>  sin.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l01461"></a>01461 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l01462"></a>01462 
<a name="l01463"></a>01463   <span class="comment">/* When destination is specified, use it&#39;s port and address. */</span>
<a name="l01464"></a>01464   <span class="keywordflow">if</span> (to)
<a name="l01465"></a>01465     {
<a name="l01466"></a>01466       sin.sin_port = to-&gt;sin_port;
<a name="l01467"></a>01467       sin.sin_addr = to-&gt;sin_addr;
<a name="l01468"></a>01468       send_sock = rip-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a>;
<a name="l01469"></a>01469     }
<a name="l01470"></a>01470   <span class="keywordflow">else</span>
<a name="l01471"></a>01471     {
<a name="l01472"></a>01472       <span class="keyword">struct </span>sockaddr_in from;
<a name="l01473"></a>01473       
<a name="l01474"></a>01474       sin.sin_port = htons (<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>);
<a name="l01475"></a>01475       sin.sin_addr.s_addr = htonl (<a class="code" href="ripd_8h.html#a44583b015fb87161d1b2359ffe5fdc96">INADDR_RIP_GROUP</a>);
<a name="l01476"></a>01476       
<a name="l01477"></a>01477       <span class="comment">/* multicast send should bind to local interface address */</span>
<a name="l01478"></a>01478       from.sin_family = AF_INET;
<a name="l01479"></a>01479       from.sin_port = htons (<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>);
<a name="l01480"></a>01480       from.sin_addr = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l01481"></a>01481 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<a name="l01482"></a>01482 <span class="preprocessor"></span>      from.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l01483"></a>01483 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
<a name="l01484"></a>01484       
<a name="l01485"></a>01485       <span class="comment">/*</span>
<a name="l01486"></a>01486 <span class="comment">       * we have to open a new socket for each packet because this</span>
<a name="l01487"></a>01487 <span class="comment">       * is the most portable way to bind to a different source</span>
<a name="l01488"></a>01488 <span class="comment">       * ipv4 address for each packet. </span>
<a name="l01489"></a>01489 <span class="comment">       */</span>
<a name="l01490"></a>01490       <span class="keywordflow">if</span> ( (send_sock = <a class="code" href="ripd_8c.html#a7d120833f5e80143c6dee4123ad86a4a">rip_create_socket</a> (&amp;from)) &lt; 0)
<a name="l01491"></a>01491         {
<a name="l01492"></a>01492           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;rip_send_packet could not create socket.&quot;</span>);
<a name="l01493"></a>01493           <span class="keywordflow">return</span> -1;
<a name="l01494"></a>01494         }
<a name="l01495"></a>01495       <a class="code" href="rip__interface_8c.html#ac25af326e5d51d1e8acf4f05c405ee0e">rip_interface_multicast_set</a> (send_sock, ifc);
<a name="l01496"></a>01496     }
<a name="l01497"></a>01497 
<a name="l01498"></a>01498   ret = sendto (send_sock, buf, size, 0, (<span class="keyword">struct</span> sockaddr *)&amp;sin,
<a name="l01499"></a>01499         <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l01500"></a>01500 
<a name="l01501"></a>01501   <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01502"></a>01502       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SEND to  %s.%d&quot;</span>, inet_ntoa(sin.sin_addr), 
<a name="l01503"></a>01503                   ntohs (sin.sin_port));
<a name="l01504"></a>01504 
<a name="l01505"></a>01505   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01506"></a>01506     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t send packet : %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l01507"></a>01507 
<a name="l01508"></a>01508   <span class="keywordflow">if</span> (!to)
<a name="l01509"></a>01509     close(send_sock);
<a name="l01510"></a>01510 
<a name="l01511"></a>01511   <span class="keywordflow">return</span> ret;
<a name="l01512"></a>01512 }
<a name="l01513"></a>01513 
<a name="l01514"></a>01514 <span class="comment">/* Add redistributed route to RIP table. */</span>
<a name="l01515"></a>01515 <span class="keywordtype">void</span>
<a name="l01516"></a><a class="code" href="ripd_8h.html#aef759c9d527d69b8d39f0364dc58e324">01516</a> <a class="code" href="ripd_8c.html#ae2c5c932284eca5a2ee4ca2dfdf248ac">rip_redistribute_add</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">int</span> sub_type, <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 
<a name="l01517"></a>01517               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex, <span class="keyword">struct</span> in_addr *<a class="code" href="structnexthop.html">nexthop</a>,
<a name="l01518"></a>01518                       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structmetric.html">metric</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>)
<a name="l01519"></a>01519 {
<a name="l01520"></a>01520   <span class="keywordtype">int</span> ret;
<a name="l01521"></a>01521   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
<a name="l01522"></a>01522   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l01523"></a>01523 
<a name="l01524"></a>01524   <span class="comment">/* Redistribute route  */</span>
<a name="l01525"></a>01525   ret = <a class="code" href="ripd_8c.html#a7b77dd9cb3d1dec4bcfd49dd7f69cf2d">rip_destination_check</a> (p-&gt;prefix);
<a name="l01526"></a>01526   <span class="keywordflow">if</span> (! ret)
<a name="l01527"></a>01527     <span class="keywordflow">return</span>;
<a name="l01528"></a>01528 
<a name="l01529"></a>01529   rp = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);
<a name="l01530"></a>01530 
<a name="l01531"></a>01531   rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l01532"></a>01532 
<a name="l01533"></a>01533   <span class="keywordflow">if</span> (rinfo)
<a name="l01534"></a>01534     {
<a name="l01535"></a>01535       <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a> 
<a name="l01536"></a>01536       &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a9dca6cb74820d2f885ed8c71bfd403b9">RIP_ROUTE_INTERFACE</a>
<a name="l01537"></a>01537       &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l01538"></a>01538     {
<a name="l01539"></a>01539       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l01540"></a>01540       <span class="keywordflow">return</span>;
<a name="l01541"></a>01541     }
<a name="l01542"></a>01542 
<a name="l01543"></a>01543       <span class="comment">/* Manually configured RIP route check. */</span>
<a name="l01544"></a>01544       <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> 
<a name="l01545"></a>01545       &amp;&amp; ((rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>) ||
<a name="l01546"></a>01546           (rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#aebaf1d3e550cd8b70cf9ed9f435e72af">RIP_ROUTE_DEFAULT</a>)) )
<a name="l01547"></a>01547     {
<a name="l01548"></a>01548       <span class="keywordflow">if</span> (type != <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> || ((sub_type != <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>) &amp;&amp;
<a name="l01549"></a>01549                                       (sub_type != <a class="code" href="ripd_8h.html#aebaf1d3e550cd8b70cf9ed9f435e72af">RIP_ROUTE_DEFAULT</a>)))
<a name="l01550"></a>01550         {
<a name="l01551"></a>01551           <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l01552"></a>01552           <span class="keywordflow">return</span>;
<a name="l01553"></a>01553         }
<a name="l01554"></a>01554     }
<a name="l01555"></a>01555 
<a name="l01556"></a>01556       <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
<a name="l01557"></a>01557       <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>);
<a name="l01558"></a>01558 
<a name="l01559"></a>01559       <span class="keywordflow">if</span> (<a class="code" href="ripd_8c.html#acfdc2cf7ec0359b1fabb24e48f5f0dee">rip_route_rte</a> (rinfo))
<a name="l01560"></a>01560     <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>,
<a name="l01561"></a>01561                    rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
<a name="l01562"></a>01562       rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01563"></a>01563       <a class="code" href="ripd_8c.html#adc7ff2705d42a1ee587b92bbfc256f86">rip_info_free</a> (rinfo);
<a name="l01564"></a>01564       
<a name="l01565"></a>01565       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);      
<a name="l01566"></a>01566     }
<a name="l01567"></a>01567 
<a name="l01568"></a>01568   rinfo = <a class="code" href="ripd_8c.html#a3c9e3f9e1fee01f622533b045fa090aa">rip_info_new</a> ();
<a name="l01569"></a>01569     
<a name="l01570"></a>01570   rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l01571"></a>01571   rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> = <a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a>;
<a name="l01572"></a>01572   rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> = <a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a>;
<a name="l01573"></a>01573   rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = 1;
<a name="l01574"></a>01574   rinfo-&gt;<a class="code" href="structrip__info.html#a6c396a30341482a9f1d3e242293ec516">external_metric</a> = <a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>;
<a name="l01575"></a>01575   rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l01576"></a>01576   rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a> = <a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;
<a name="l01577"></a>01577 
<a name="l01578"></a>01578   <span class="keywordflow">if</span> (nexthop)
<a name="l01579"></a>01579     rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a> = *<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>;
<a name="l01580"></a>01580 
<a name="l01581"></a>01581   rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;
<a name="l01582"></a>01582   rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rinfo;
<a name="l01583"></a>01583 
<a name="l01584"></a>01584   rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;
<a name="l01585"></a>01585 
<a name="l01586"></a>01586   <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>) {
<a name="l01587"></a>01587     <span class="keywordflow">if</span> (!nexthop)
<a name="l01588"></a>01588       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute new prefix %s/%d on the interface %s&quot;</span>,
<a name="l01589"></a>01589                  inet_ntoa(p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l01590"></a>01590                  <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(ifindex));
<a name="l01591"></a>01591     <span class="keywordflow">else</span>
<a name="l01592"></a>01592       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute new prefix %s/%d with nexthop %s on the interface %s&quot;</span>,
<a name="l01593"></a>01593                  inet_ntoa(p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, inet_ntoa(rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>),
<a name="l01594"></a>01594                  <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(ifindex));
<a name="l01595"></a>01595   }
<a name="l01596"></a>01596 
<a name="l01597"></a>01597 
<a name="l01598"></a>01598   <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);
<a name="l01599"></a>01599 }
<a name="l01600"></a>01600 
<a name="l01601"></a>01601 <span class="comment">/* Delete redistributed route from RIP table. */</span>
<a name="l01602"></a>01602 <span class="keywordtype">void</span>
<a name="l01603"></a><a class="code" href="ripd_8h.html#a1ab853de21174bc1eeb4a6f14779546d">01603</a> <a class="code" href="ripd_8c.html#a33825a788df0587a784f9eb7d1d667d7">rip_redistribute_delete</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">int</span> <a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a>, <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 
<a name="l01604"></a>01604                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a>)
<a name="l01605"></a>01605 {
<a name="l01606"></a>01606   <span class="keywordtype">int</span> ret;
<a name="l01607"></a>01607   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
<a name="l01608"></a>01608   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l01609"></a>01609 
<a name="l01610"></a>01610   ret = <a class="code" href="ripd_8c.html#a7b77dd9cb3d1dec4bcfd49dd7f69cf2d">rip_destination_check</a> (p-&gt;prefix);
<a name="l01611"></a>01611   <span class="keywordflow">if</span> (! ret)
<a name="l01612"></a>01612     <span class="keywordflow">return</span>;
<a name="l01613"></a>01613 
<a name="l01614"></a>01614   rp = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);
<a name="l01615"></a>01615   <span class="keywordflow">if</span> (rp)
<a name="l01616"></a>01616     {
<a name="l01617"></a>01617       rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l01618"></a>01618 
<a name="l01619"></a>01619       <span class="keywordflow">if</span> (rinfo != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l01620"></a>01620       &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == type 
<a name="l01621"></a>01621       &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == sub_type 
<a name="l01622"></a>01622       &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> == ifindex)
<a name="l01623"></a>01623     {
<a name="l01624"></a>01624       <span class="comment">/* Perform poisoned reverse. */</span>
<a name="l01625"></a>01625       rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
<a name="l01626"></a>01626       <a class="code" href="ripd_8h.html#ac82fe6284825b1b8ac9e1323196e96c4">RIP_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>, 
<a name="l01627"></a>01627             <a class="code" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">rip_garbage_collect</a>, rip-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>);
<a name="l01628"></a>01628       <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
<a name="l01629"></a>01629       rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;
<a name="l01630"></a>01630 
<a name="l01631"></a>01631           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01632"></a>01632             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Poisone %s/%d on the interface %s with an infinity metric [delete]&quot;</span>,
<a name="l01633"></a>01633                        inet_ntoa(p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l01634"></a>01634                        <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(ifindex));
<a name="l01635"></a>01635 
<a name="l01636"></a>01636       <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);
<a name="l01637"></a>01637     }
<a name="l01638"></a>01638     }
<a name="l01639"></a>01639 }
<a name="l01640"></a>01640 
<a name="l01641"></a>01641 <span class="comment">/* Response to request called from rip_read ().*/</span>
<a name="l01642"></a>01642 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01643"></a><a class="code" href="ripd_8c.html#a41f9224825b265801d88ca8dad67b8d2">01643</a> <a class="code" href="ripd_8c.html#a41f9224825b265801d88ca8dad67b8d2">rip_request_process</a> (<span class="keyword">struct</span> <a class="code" href="structrip__packet.html">rip_packet</a> *packet, <span class="keywordtype">int</span> size, 
<a name="l01644"></a>01644              <span class="keyword">struct</span> sockaddr_in *<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l01645"></a>01645 {
<a name="l01646"></a>01646   caddr_t lim;
<a name="l01647"></a>01647   <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
<a name="l01648"></a>01648   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l01649"></a>01649   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
<a name="l01650"></a>01650   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l01651"></a>01651   <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
<a name="l01652"></a>01652 
<a name="l01653"></a>01653   <span class="comment">/* Does not reponse to the requests on the loopback interfaces */</span>
<a name="l01654"></a>01654   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>))
<a name="l01655"></a>01655     <span class="keywordflow">return</span>;
<a name="l01656"></a>01656 
<a name="l01657"></a>01657   <span class="comment">/* Check RIP process is enabled on this interface. */</span>
<a name="l01658"></a>01658   ri = ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01659"></a>01659   <span class="keywordflow">if</span> (! ri-&gt;<a class="code" href="structrip__interface.html#a29f1e7ea828dc3950b72ea63bc7068a4">running</a>)
<a name="l01660"></a>01660     <span class="keywordflow">return</span>;
<a name="l01661"></a>01661 
<a name="l01662"></a>01662   <span class="comment">/* When passive interface is specified, suppress responses */</span>
<a name="l01663"></a>01663   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#aa624d6a89ab2dcd614cc0fb89e08febf">passive</a>)
<a name="l01664"></a>01664     <span class="keywordflow">return</span>;
<a name="l01665"></a>01665   
<a name="l01666"></a>01666   <span class="comment">/* RIP peer update. */</span>
<a name="l01667"></a>01667   <a class="code" href="rip__peer_8c.html#aa7cc288ea45c0c2961f86ee2aff648ad">rip_peer_update</a> (from, packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);
<a name="l01668"></a>01668 
<a name="l01669"></a>01669   lim = ((caddr_t) packet) + size;
<a name="l01670"></a>01670   rte = packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;
<a name="l01671"></a>01671 
<a name="l01672"></a>01672   <span class="comment">/* The Request is processed entry by entry.  If there are no</span>
<a name="l01673"></a>01673 <span class="comment">     entries, no response is given. */</span>
<a name="l01674"></a>01674   <span class="keywordflow">if</span> (lim == (caddr_t) rte)
<a name="l01675"></a>01675     <span class="keywordflow">return</span>;
<a name="l01676"></a>01676 
<a name="l01677"></a>01677   <span class="comment">/* There is one special case.  If there is exactly one entry in the</span>
<a name="l01678"></a>01678 <span class="comment">     request, and it has an address family identifier of zero and a</span>
<a name="l01679"></a>01679 <span class="comment">     metric of infinity (i.e., 16), then this is a request to send the</span>
<a name="l01680"></a>01680 <span class="comment">     entire routing table. */</span>
<a name="l01681"></a>01681   <span class="keywordflow">if</span> (lim == ((caddr_t) (rte + 1)) &amp;&amp;
<a name="l01682"></a>01682       ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>) == 0 &amp;&amp;
<a name="l01683"></a>01683       ntohl (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>) == <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l01684"></a>01684     {   
<a name="l01685"></a>01685       <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> saddr;
<a name="l01686"></a>01686 
<a name="l01687"></a>01687       <span class="comment">/* saddr will be used for determining which routes to split-horizon.</span>
<a name="l01688"></a>01688 <span class="comment">         Since the source address we&#39;ll pick will be on the same subnet as the</span>
<a name="l01689"></a>01689 <span class="comment">         destination, for the purpose of split-horizoning, we&#39;ll</span>
<a name="l01690"></a>01690 <span class="comment">         pretend that &quot;from&quot; is our source address.  */</span>
<a name="l01691"></a>01691       saddr.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l01692"></a>01692       saddr.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l01693"></a>01693       saddr.prefix = from-&gt;sin_addr;
<a name="l01694"></a>01694 
<a name="l01695"></a>01695       <span class="comment">/* All route with split horizon */</span>
<a name="l01696"></a>01696       <a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (ifc, from, <a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a500d4c9125340f27abf4fa013f88dab6">rip_all_route</a>, packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);
<a name="l01697"></a>01697     }
<a name="l01698"></a>01698   <span class="keywordflow">else</span>
<a name="l01699"></a>01699     {
<a name="l01700"></a>01700       <span class="comment">/* Examine the list of RTEs in the Request one by one.  For each</span>
<a name="l01701"></a>01701 <span class="comment">     entry, look up the destination in the router&#39;s routing</span>
<a name="l01702"></a>01702 <span class="comment">     database and, if there is a route, put that route&#39;s metric in</span>
<a name="l01703"></a>01703 <span class="comment">     the metric field of the RTE.  If there is no explicit route</span>
<a name="l01704"></a>01704 <span class="comment">     to the specified destination, put infinity in the metric</span>
<a name="l01705"></a>01705 <span class="comment">     field.  Once all the entries have been filled in, change the</span>
<a name="l01706"></a>01706 <span class="comment">     command from Request to Response and send the datagram back</span>
<a name="l01707"></a>01707 <span class="comment">     to the requestor. */</span>
<a name="l01708"></a>01708       p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l01709"></a>01709 
<a name="l01710"></a>01710       <span class="keywordflow">for</span> (; ((caddr_t) rte) &lt; lim; rte++)
<a name="l01711"></a>01711     {
<a name="l01712"></a>01712       p.prefix = rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>;
<a name="l01713"></a>01713       p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
<a name="l01714"></a>01714       <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;p);
<a name="l01715"></a>01715       
<a name="l01716"></a>01716       rp = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l01717"></a>01717       <span class="keywordflow">if</span> (rp)
<a name="l01718"></a>01718         {
<a name="l01719"></a>01719           rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l01720"></a>01720           rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = htonl (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
<a name="l01721"></a>01721           <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l01722"></a>01722         }
<a name="l01723"></a>01723       <span class="keywordflow">else</span>
<a name="l01724"></a>01724         rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = htonl (<a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>);
<a name="l01725"></a>01725     }
<a name="l01726"></a>01726       packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a> = <a class="code" href="ripd_8h.html#abbe6ab2f9449480e4c580b8b5e6d73a4">RIP_RESPONSE</a>;
<a name="l01727"></a>01727 
<a name="l01728"></a>01728       <a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> ((u_char *)packet, size, from, ifc);
<a name="l01729"></a>01729     }
<a name="l01730"></a>01730   <a class="code" href="ripd_8c.html#acee583ab67011897c4887052fdb3645d">rip_global_queries</a>++;
<a name="l01731"></a>01731 }
<a name="l01732"></a>01732 
<a name="l01733"></a>01733 <span class="preprocessor">#if RIP_RECVMSG</span>
<a name="l01734"></a>01734 <span class="preprocessor"></span><span class="comment">/* Set IPv6 packet info to the socket. */</span>
<a name="l01735"></a>01735 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01736"></a>01736 setsockopt_pktinfo (<span class="keywordtype">int</span> sock)
<a name="l01737"></a>01737 {
<a name="l01738"></a>01738   <span class="keywordtype">int</span> ret;
<a name="l01739"></a>01739   <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a> = 1;
<a name="l01740"></a>01740     
<a name="l01741"></a>01741   ret = setsockopt(sock, IPPROTO_IP, IP_PKTINFO, &amp;val, <span class="keyword">sizeof</span>(val));
<a name="l01742"></a>01742   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01743"></a>01743     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t setsockopt IP_PKTINFO : %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l01744"></a>01744   <span class="keywordflow">return</span> ret;
<a name="l01745"></a>01745 }
<a name="l01746"></a>01746 
<a name="l01747"></a>01747 <span class="comment">/* Read RIP packet by recvmsg function. */</span>
<a name="l01748"></a>01748 <span class="keywordtype">int</span>
<a name="l01749"></a>01749 rip_recvmsg (<span class="keywordtype">int</span> sock, u_char *buf, <span class="keywordtype">int</span> size, <span class="keyword">struct</span> sockaddr_in *from,
<a name="l01750"></a>01750          <span class="keywordtype">int</span> *ifindex)
<a name="l01751"></a>01751 {
<a name="l01752"></a>01752   <span class="keywordtype">int</span> ret;
<a name="l01753"></a>01753   <span class="keyword">struct </span>msghdr <a class="code" href="structmsg.html">msg</a>;
<a name="l01754"></a>01754   <span class="keyword">struct </span>iovec iov;
<a name="l01755"></a>01755   <span class="keyword">struct </span>cmsghdr *ptr;
<a name="l01756"></a>01756   <span class="keywordtype">char</span> adata[1024];
<a name="l01757"></a>01757 
<a name="l01758"></a>01758   <a class="code" href="structmsg.html">msg</a>.msg_name = (<span class="keywordtype">void</span> *) from;
<a name="l01759"></a>01759   <a class="code" href="structmsg.html">msg</a>.msg_namelen = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l01760"></a>01760   <a class="code" href="structmsg.html">msg</a>.msg_iov = &amp;iov;
<a name="l01761"></a>01761   <a class="code" href="structmsg.html">msg</a>.msg_iovlen = 1;
<a name="l01762"></a>01762   <a class="code" href="structmsg.html">msg</a>.msg_control = (<span class="keywordtype">void</span> *) adata;
<a name="l01763"></a>01763   <a class="code" href="structmsg.html">msg</a>.msg_controllen = <span class="keyword">sizeof</span> adata;
<a name="l01764"></a>01764   iov.iov_base = buf;
<a name="l01765"></a>01765   iov.iov_len = size;
<a name="l01766"></a>01766 
<a name="l01767"></a>01767   ret = recvmsg (sock, &amp;<a class="code" href="structmsg.html">msg</a>, 0);
<a name="l01768"></a>01768   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01769"></a>01769     <span class="keywordflow">return</span> ret;
<a name="l01770"></a>01770 
<a name="l01771"></a>01771   <span class="keywordflow">for</span> (ptr = <a class="code" href="zebra_8h.html#af3b20d5606eb7dbfc120601cd3a889be">ZCMSG_FIRSTHDR</a>(&amp;<a class="code" href="structmsg.html">msg</a>); ptr != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>; ptr = CMSG_NXTHDR(&amp;<a class="code" href="structmsg.html">msg</a>, ptr))
<a name="l01772"></a>01772     <span class="keywordflow">if</span> (ptr-&gt;cmsg_level == IPPROTO_IP &amp;&amp; ptr-&gt;cmsg_type == IP_PKTINFO) 
<a name="l01773"></a>01773       {
<a name="l01774"></a>01774     <span class="keyword">struct </span>in_pktinfo *pktinfo;
<a name="l01775"></a>01775     <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l01776"></a>01776 
<a name="l01777"></a>01777     pktinfo = (<span class="keyword">struct </span>in_pktinfo *) CMSG_DATA (ptr);
<a name="l01778"></a>01778     i = pktinfo-&gt;ipi_ifindex;
<a name="l01779"></a>01779       }
<a name="l01780"></a>01780   <span class="keywordflow">return</span> ret;
<a name="l01781"></a>01781 }
<a name="l01782"></a>01782 
<a name="l01783"></a>01783 <span class="comment">/* RIP packet read function. */</span>
<a name="l01784"></a>01784 <span class="keywordtype">int</span>
<a name="l01785"></a>01785 rip_read_new (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l01786"></a>01786 {
<a name="l01787"></a>01787   <span class="keywordtype">int</span> ret;
<a name="l01788"></a>01788   <span class="keywordtype">int</span> sock;
<a name="l01789"></a>01789   <span class="keywordtype">char</span> buf[<a class="code" href="ripd_8h.html#aa54db4e9d7f1bc562bf9054f5502283f">RIP_PACKET_MAXSIZ</a>];
<a name="l01790"></a>01790   <span class="keyword">struct </span>sockaddr_in from;
<a name="l01791"></a>01791   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
<a name="l01792"></a>01792   
<a name="l01793"></a>01793   <span class="comment">/* Fetch socket then register myself. */</span>
<a name="l01794"></a>01794   sock = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (t);
<a name="l01795"></a>01795   <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67af36c3620e53d2176ba96ad1c7632b0ea">RIP_READ</a>, sock);
<a name="l01796"></a>01796 
<a name="l01797"></a>01797   <span class="comment">/* Read RIP packet. */</span>
<a name="l01798"></a>01798   ret = rip_recvmsg (sock, buf, <a class="code" href="ripd_8h.html#aa54db4e9d7f1bc562bf9054f5502283f">RIP_PACKET_MAXSIZ</a>, &amp;from, (<span class="keywordtype">int</span> *)&amp;ifindex);
<a name="l01799"></a>01799   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01800"></a>01800     {
<a name="l01801"></a>01801       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t read RIP packet: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l01802"></a>01802       <span class="keywordflow">return</span> ret;
<a name="l01803"></a>01803     }
<a name="l01804"></a>01804 
<a name="l01805"></a>01805   <span class="keywordflow">return</span> ret;
<a name="l01806"></a>01806 }
<a name="l01807"></a>01807 <span class="preprocessor">#endif </span><span class="comment">/* RIP_RECVMSG */</span>
<a name="l01808"></a>01808 
<a name="l01809"></a>01809 <span class="comment">/* First entry point of RIP packet. */</span>
<a name="l01810"></a>01810 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01811"></a><a class="code" href="ripd_8c.html#ad6a63ee8163b47ae9167b2220497cd19">01811</a> <a class="code" href="ripd_8c.html#ad6a63ee8163b47ae9167b2220497cd19">rip_read</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l01812"></a>01812 {
<a name="l01813"></a>01813   <span class="keywordtype">int</span> sock;
<a name="l01814"></a>01814   <span class="keywordtype">int</span> ret;
<a name="l01815"></a>01815   <span class="keywordtype">int</span> rtenum;
<a name="l01816"></a>01816   <span class="keyword">union </span><a class="code" href="unionrip__buf.html">rip_buf</a> rip_buf;
<a name="l01817"></a>01817   <span class="keyword">struct </span><a class="code" href="structrip__packet.html">rip_packet</a> *packet;
<a name="l01818"></a>01818   <span class="keyword">struct </span>sockaddr_in from;
<a name="l01819"></a>01819   <span class="keywordtype">int</span> len;
<a name="l01820"></a>01820   <span class="keywordtype">int</span> vrecv;
<a name="l01821"></a>01821   <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> fromlen;
<a name="l01822"></a>01822   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01823"></a>01823   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l01824"></a>01824   <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
<a name="l01825"></a>01825 
<a name="l01826"></a>01826   <span class="comment">/* Fetch socket then register myself. */</span>
<a name="l01827"></a>01827   sock = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (t);
<a name="l01828"></a>01828   rip-&gt;<a class="code" href="structrip.html#a73ff0450da2dfc1332af7a4b64c1e678">t_read</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01829"></a>01829 
<a name="l01830"></a>01830   <span class="comment">/* Add myself to tne next event */</span>
<a name="l01831"></a>01831   <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67af36c3620e53d2176ba96ad1c7632b0ea">RIP_READ</a>, sock);
<a name="l01832"></a>01832 
<a name="l01833"></a>01833   <span class="comment">/* RIPd manages only IPv4. */</span>
<a name="l01834"></a>01834   memset (&amp;from, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l01835"></a>01835   fromlen = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<a name="l01836"></a>01836 
<a name="l01837"></a>01837   len = recvfrom (sock, (<span class="keywordtype">char</span> *)&amp;rip_buf.<a class="code" href="unionrip__buf.html#a08f6622618e7fec36eb60777bafa9113">buf</a>, sizeof (rip_buf.<a class="code" href="unionrip__buf.html#a08f6622618e7fec36eb60777bafa9113">buf</a>), 0, 
<a name="l01838"></a>01838           (<span class="keyword">struct</span> sockaddr *) &amp;from, &amp;fromlen);
<a name="l01839"></a>01839   <span class="keywordflow">if</span> (len &lt; 0) 
<a name="l01840"></a>01840     {
<a name="l01841"></a>01841       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;recvfrom failed: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l01842"></a>01842       <span class="keywordflow">return</span> len;
<a name="l01843"></a>01843     }
<a name="l01844"></a>01844 
<a name="l01845"></a>01845   <span class="comment">/* Check is this packet comming from myself? */</span>
<a name="l01846"></a>01846   <span class="keywordflow">if</span> (<a class="code" href="rip__interface_8c.html#a11597bd242b65713ee3095d1f62747f6">if_check_address</a> (from.sin_addr)) 
<a name="l01847"></a>01847     {
<a name="l01848"></a>01848       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l01849"></a>01849     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ignore packet comes from myself&quot;</span>);
<a name="l01850"></a>01850       <span class="keywordflow">return</span> -1;
<a name="l01851"></a>01851     }
<a name="l01852"></a>01852 
<a name="l01853"></a>01853   <span class="comment">/* Which interface is this packet comes from. */</span>
<a name="l01854"></a>01854   ifp = <a class="code" href="if_8c.html#a84f550f6181fac06214b71b6408fc8db">if_lookup_address</a> (from.sin_addr);
<a name="l01855"></a>01855   
<a name="l01856"></a>01856   <span class="comment">/* RIP packet received */</span>
<a name="l01857"></a>01857   <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01858"></a>01858     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RECV packet from %s port %d on %s&quot;</span>,
<a name="l01859"></a>01859            inet_ntoa (from.sin_addr), ntohs (from.sin_port),
<a name="l01860"></a>01860            ifp ? ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a> : <span class="stringliteral">&quot;unknown&quot;</span>);
<a name="l01861"></a>01861 
<a name="l01862"></a>01862   <span class="comment">/* If this packet come from unknown interface, ignore it. */</span>
<a name="l01863"></a>01863   <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01864"></a>01864     {
<a name="l01865"></a>01865       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;rip_read: cannot find interface for packet from %s port %d&quot;</span>,
<a name="l01866"></a>01866          inet_ntoa(from.sin_addr), ntohs (from.sin_port));
<a name="l01867"></a>01867       <span class="keywordflow">return</span> -1;
<a name="l01868"></a>01868     }
<a name="l01869"></a>01869   
<a name="l01870"></a>01870   ifc = <a class="code" href="if_8c.html#a7cea5b88a9e4c0abf48f9951090e5fad">connected_lookup_address</a> (ifp, from.sin_addr);
<a name="l01871"></a>01871   
<a name="l01872"></a>01872   <span class="keywordflow">if</span> (ifc == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01873"></a>01873     {
<a name="l01874"></a>01874       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;rip_read: cannot find connected address for packet from %s &quot;</span>
<a name="l01875"></a>01875          <span class="stringliteral">&quot;port %d on interface %s&quot;</span>,
<a name="l01876"></a>01876          inet_ntoa(from.sin_addr), ntohs (from.sin_port), ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l01877"></a>01877       <span class="keywordflow">return</span> -1;
<a name="l01878"></a>01878     }
<a name="l01879"></a>01879 
<a name="l01880"></a>01880   <span class="comment">/* Packet length check. */</span>
<a name="l01881"></a>01881   <span class="keywordflow">if</span> (len &lt; <a class="code" href="ripd_8h.html#a4bce9a98acde5e1336e168acee777611">RIP_PACKET_MINSIZ</a>)
<a name="l01882"></a>01882     {
<a name="l01883"></a>01883       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;packet size %d is smaller than minimum size %d&quot;</span>,
<a name="l01884"></a>01884          len, <a class="code" href="ripd_8h.html#a4bce9a98acde5e1336e168acee777611">RIP_PACKET_MINSIZ</a>);
<a name="l01885"></a>01885       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l01886"></a>01886       <span class="keywordflow">return</span> len;
<a name="l01887"></a>01887     }
<a name="l01888"></a>01888   <span class="keywordflow">if</span> (len &gt; <a class="code" href="ripd_8h.html#aa54db4e9d7f1bc562bf9054f5502283f">RIP_PACKET_MAXSIZ</a>)
<a name="l01889"></a>01889     {
<a name="l01890"></a>01890       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;packet size %d is larger than max size %d&quot;</span>,
<a name="l01891"></a>01891          len, <a class="code" href="ripd_8h.html#aa54db4e9d7f1bc562bf9054f5502283f">RIP_PACKET_MAXSIZ</a>);
<a name="l01892"></a>01892       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l01893"></a>01893       <span class="keywordflow">return</span> len;
<a name="l01894"></a>01894     }
<a name="l01895"></a>01895 
<a name="l01896"></a>01896   <span class="comment">/* Packet alignment check. */</span>
<a name="l01897"></a>01897   <span class="keywordflow">if</span> ((len - <a class="code" href="ripd_8h.html#a4bce9a98acde5e1336e168acee777611">RIP_PACKET_MINSIZ</a>) % 20)
<a name="l01898"></a>01898     {
<a name="l01899"></a>01899       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;packet size %d is wrong for RIP packet alignment&quot;</span>, len);
<a name="l01900"></a>01900       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l01901"></a>01901       <span class="keywordflow">return</span> len;
<a name="l01902"></a>01902     }
<a name="l01903"></a>01903 
<a name="l01904"></a>01904   <span class="comment">/* Set RTE number. */</span>
<a name="l01905"></a>01905   rtenum = ((len - <a class="code" href="ripd_8h.html#a4bce9a98acde5e1336e168acee777611">RIP_PACKET_MINSIZ</a>) / 20);
<a name="l01906"></a>01906 
<a name="l01907"></a>01907   <span class="comment">/* For easy to handle. */</span>
<a name="l01908"></a>01908   packet = &amp;rip_buf.<a class="code" href="unionrip__buf.html#aaed1e67902409b16f0e828be9253fa40">rip_packet</a>;
<a name="l01909"></a>01909 
<a name="l01910"></a>01910   <span class="comment">/* RIP version check. */</span>
<a name="l01911"></a>01911   <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == 0)
<a name="l01912"></a>01912     {
<a name="l01913"></a>01913       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;version 0 with command %d received.&quot;</span>, packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>);
<a name="l01914"></a>01914       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l01915"></a>01915       <span class="keywordflow">return</span> -1;
<a name="l01916"></a>01916     }
<a name="l01917"></a>01917 
<a name="l01918"></a>01918   <span class="comment">/* Dump RIP packet. */</span>
<a name="l01919"></a>01919   <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#a7d78e8576999bfd218cd4e507cb28b13">IS_RIP_DEBUG_RECV</a>)
<a name="l01920"></a>01920     <a class="code" href="ripd_8c.html#a04c8759c650299a52379cfe00f257283">rip_packet_dump</a> (packet, len, <span class="stringliteral">&quot;RECV&quot;</span>);
<a name="l01921"></a>01921 
<a name="l01922"></a>01922   <span class="comment">/* RIP version adjust.  This code should rethink now.  RFC1058 says</span>
<a name="l01923"></a>01923 <span class="comment">     that &quot;Version 1 implementations are to ignore this extra data and</span>
<a name="l01924"></a>01924 <span class="comment">     process only the fields specified in this document.&quot;. So RIPv3</span>
<a name="l01925"></a>01925 <span class="comment">     packet should be treated as RIPv1 ignoring must be zero field. */</span>
<a name="l01926"></a>01926   <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> &gt; <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>)
<a name="l01927"></a>01927     packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> = <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>;
<a name="l01928"></a>01928 
<a name="l01929"></a>01929   <span class="comment">/* Is RIP running or is this RIP neighbor ?*/</span>
<a name="l01930"></a>01930   ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01931"></a>01931   <span class="keywordflow">if</span> (! ri-&gt;<a class="code" href="structrip__interface.html#a29f1e7ea828dc3950b72ea63bc7068a4">running</a> &amp;&amp; ! <a class="code" href="rip__interface_8c.html#aecc9390988d294a78325bd067e4315b1">rip_neighbor_lookup</a> (&amp;from))
<a name="l01932"></a>01932     {
<a name="l01933"></a>01933       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01934"></a>01934     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIP is not enabled on interface %s.&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l01935"></a>01935       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l01936"></a>01936       <span class="keywordflow">return</span> -1;
<a name="l01937"></a>01937     }
<a name="l01938"></a>01938 
<a name="l01939"></a>01939   <span class="comment">/* RIP Version check. RFC2453, 4.6 and 5.1 */</span>
<a name="l01940"></a>01940   vrecv = ((ri-&gt;<a class="code" href="structrip__interface.html#a0e1c83b8a992c8dd3d861dc9a90fc105">ri_receive</a> == <a class="code" href="ripd_8h.html#acaf07e083e328ebe0df4c436655a4d66">RI_RIP_UNSPEC</a>) ?
<a name="l01941"></a>01941            rip-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> : ri-&gt;<a class="code" href="structrip__interface.html#a0e1c83b8a992c8dd3d861dc9a90fc105">ri_receive</a>);
<a name="l01942"></a>01942   <span class="keywordflow">if</span> ((packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>) &amp;&amp; !(vrecv &amp; <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>))
<a name="l01943"></a>01943     {
<a name="l01944"></a>01944       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l01945"></a>01945         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  packet&#39;s v%d doesn&#39;t fit to if version spec&quot;</span>, 
<a name="l01946"></a>01946                    packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);
<a name="l01947"></a>01947       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l01948"></a>01948       <span class="keywordflow">return</span> -1;
<a name="l01949"></a>01949     }
<a name="l01950"></a>01950   <span class="keywordflow">if</span> ((packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>) &amp;&amp; !(vrecv &amp; <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>))
<a name="l01951"></a>01951     {
<a name="l01952"></a>01952       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l01953"></a>01953         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  packet&#39;s v%d doesn&#39;t fit to if version spec&quot;</span>, 
<a name="l01954"></a>01954                    packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);
<a name="l01955"></a>01955       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l01956"></a>01956       <span class="keywordflow">return</span> -1;
<a name="l01957"></a>01957     }
<a name="l01958"></a>01958   
<a name="l01959"></a>01959   <span class="comment">/* RFC2453 5.2 If the router is not configured to authenticate RIP-2</span>
<a name="l01960"></a>01960 <span class="comment">     messages, then RIP-1 and unauthenticated RIP-2 messages will be</span>
<a name="l01961"></a>01961 <span class="comment">     accepted; authenticated RIP-2 messages shall be discarded.  */</span>
<a name="l01962"></a>01962   <span class="keywordflow">if</span> ((ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a>) 
<a name="l01963"></a>01963       &amp;&amp; rtenum 
<a name="l01964"></a>01964       &amp;&amp; (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == RIPv2) 
<a name="l01965"></a>01965       &amp;&amp; (packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a> == htons(<a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>)))
<a name="l01966"></a>01966     {
<a name="l01967"></a>01967       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l01968"></a>01968     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;packet RIPv%d is dropped because authentication disabled&quot;</span>, 
<a name="l01969"></a>01969            packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);
<a name="l01970"></a>01970       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l01971"></a>01971       <span class="keywordflow">return</span> -1;
<a name="l01972"></a>01972     }
<a name="l01973"></a>01973   
<a name="l01974"></a>01974   <span class="comment">/* RFC:</span>
<a name="l01975"></a>01975 <span class="comment">     If the router is configured to authenticate RIP-2 messages, then</span>
<a name="l01976"></a>01976 <span class="comment">     RIP-1 messages and RIP-2 messages which pass authentication</span>
<a name="l01977"></a>01977 <span class="comment">     testing shall be accepted; unauthenticated and failed</span>
<a name="l01978"></a>01978 <span class="comment">     authentication RIP-2 messages shall be discarded.  For maximum</span>
<a name="l01979"></a>01979 <span class="comment">     security, RIP-1 messages should be ignored when authentication is</span>
<a name="l01980"></a>01980 <span class="comment">     in use (see section 4.1); otherwise, the routing information from</span>
<a name="l01981"></a>01981 <span class="comment">     authenticated messages will be propagated by RIP-1 routers in an</span>
<a name="l01982"></a>01982 <span class="comment">     unauthenticated manner. </span>
<a name="l01983"></a>01983 <span class="comment">  */</span>
<a name="l01984"></a>01984   <span class="comment">/* We make an exception for RIPv1 REQUEST packets, to which we&#39;ll</span>
<a name="l01985"></a>01985 <span class="comment">   * always reply regardless of authentication settings, because:</span>
<a name="l01986"></a>01986 <span class="comment">   *</span>
<a name="l01987"></a>01987 <span class="comment">   * - if there other authorised routers on-link, the REQUESTor can</span>
<a name="l01988"></a>01988 <span class="comment">   *   passively obtain the routing updates anyway</span>
<a name="l01989"></a>01989 <span class="comment">   * - if there are no other authorised routers on-link, RIP can</span>
<a name="l01990"></a>01990 <span class="comment">   *   easily be disabled for the link to prevent giving out information</span>
<a name="l01991"></a>01991 <span class="comment">   *   on state of this routers RIP routing table..</span>
<a name="l01992"></a>01992 <span class="comment">   *</span>
<a name="l01993"></a>01993 <span class="comment">   * I.e. if RIPv1 has any place anymore these days, it&#39;s as a very</span>
<a name="l01994"></a>01994 <span class="comment">   * simple way to distribute routing information (e.g. to embedded</span>
<a name="l01995"></a>01995 <span class="comment">   * hosts / appliances) and the ability to give out RIPv1</span>
<a name="l01996"></a>01996 <span class="comment">   * routing-information freely, while still requiring RIPv2</span>
<a name="l01997"></a>01997 <span class="comment">   * authentication for any RESPONSEs might be vaguely useful.</span>
<a name="l01998"></a>01998 <span class="comment">   */</span>
<a name="l01999"></a>01999   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a> 
<a name="l02000"></a>02000       &amp;&amp; packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>)
<a name="l02001"></a>02001     {
<a name="l02002"></a>02002       <span class="comment">/* Discard RIPv1 messages other than REQUESTs */</span>
<a name="l02003"></a>02003       <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a> != <a class="code" href="ripd_8h.html#ac4d0419fac5cd68dfee1bb1920e9689e">RIP_REQUEST</a>)
<a name="l02004"></a>02004         {
<a name="l02005"></a>02005           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l02006"></a>02006             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv1&quot;</span> <span class="stringliteral">&quot; dropped because authentication enabled&quot;</span>);
<a name="l02007"></a>02007           <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l02008"></a>02008           <span class="keywordflow">return</span> -1;
<a name="l02009"></a>02009         }
<a name="l02010"></a>02010     }
<a name="l02011"></a>02011   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a>)
<a name="l02012"></a>02012     {
<a name="l02013"></a>02013       <span class="keyword">const</span> <span class="keywordtype">char</span> *auth_desc;
<a name="l02014"></a>02014       
<a name="l02015"></a>02015       <span class="keywordflow">if</span> (rtenum == 0)
<a name="l02016"></a>02016         {
<a name="l02017"></a>02017           <span class="comment">/* There definitely is no authentication in the packet. */</span>
<a name="l02018"></a>02018           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l02019"></a>02019             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 authentication failed: no auth RTE in packet&quot;</span>);
<a name="l02020"></a>02020           <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l02021"></a>02021           <span class="keywordflow">return</span> -1;
<a name="l02022"></a>02022         }
<a name="l02023"></a>02023       
<a name="l02024"></a>02024       <span class="comment">/* First RTE must be an Authentication Family RTE */</span>
<a name="l02025"></a>02025       <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a> != htons(<a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>))
<a name="l02026"></a>02026         {
<a name="l02027"></a>02027           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l02028"></a>02028             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2&quot;</span> <span class="stringliteral">&quot; dropped because authentication enabled&quot;</span>);
<a name="l02029"></a>02029       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l02030"></a>02030       <span class="keywordflow">return</span> -1;
<a name="l02031"></a>02031         }
<a name="l02032"></a>02032       
<a name="l02033"></a>02033       <span class="comment">/* Check RIPv2 authentication. */</span>
<a name="l02034"></a>02034       <span class="keywordflow">switch</span> (ntohs(packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>))
<a name="l02035"></a>02035         {
<a name="l02036"></a>02036           <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>:
<a name="l02037"></a>02037             auth_desc = <span class="stringliteral">&quot;simple&quot;</span>;
<a name="l02038"></a>02038             ret = <a class="code" href="ripd_8c.html#a2c3068b4df03ffa8845f74323ddfabcd">rip_auth_simple_password</a> (packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>, &amp;from, ifp);
<a name="l02039"></a>02039             <span class="keywordflow">break</span>;
<a name="l02040"></a>02040           
<a name="l02041"></a>02041           <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>:
<a name="l02042"></a>02042             auth_desc = <span class="stringliteral">&quot;MD5&quot;</span>;
<a name="l02043"></a>02043             ret = <a class="code" href="ripd_8c.html#a6f2010a631def9499b1db67a697568a2">rip_auth_md5</a> (packet, &amp;from, len, ifp);
<a name="l02044"></a>02044             <span class="comment">/* Reset RIP packet length to trim MD5 data. */</span>
<a name="l02045"></a>02045             len = ret;
<a name="l02046"></a>02046             <span class="keywordflow">break</span>;
<a name="l02047"></a>02047           
<a name="l02048"></a>02048           <span class="keywordflow">default</span>:
<a name="l02049"></a>02049             ret = 0;
<a name="l02050"></a>02050             auth_desc = <span class="stringliteral">&quot;unknown type&quot;</span>;
<a name="l02051"></a>02051             <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l02052"></a>02052               <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 Unknown authentication type %d&quot;</span>,
<a name="l02053"></a>02053                           ntohs (packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>));
<a name="l02054"></a>02054         }
<a name="l02055"></a>02055       
<a name="l02056"></a>02056       <span class="keywordflow">if</span> (ret)
<a name="l02057"></a>02057         {
<a name="l02058"></a>02058           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l02059"></a>02059             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 %s authentication success&quot;</span>, auth_desc);
<a name="l02060"></a>02060         }
<a name="l02061"></a>02061       <span class="keywordflow">else</span>
<a name="l02062"></a>02062         {
<a name="l02063"></a>02063           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l02064"></a>02064             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 %s authentication failure&quot;</span>, auth_desc);
<a name="l02065"></a>02065           <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l02066"></a>02066           <span class="keywordflow">return</span> -1;
<a name="l02067"></a>02067         }
<a name="l02068"></a>02068     }
<a name="l02069"></a>02069   
<a name="l02070"></a>02070   <span class="comment">/* Process each command. */</span>
<a name="l02071"></a>02071   <span class="keywordflow">switch</span> (packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>)
<a name="l02072"></a>02072     {
<a name="l02073"></a>02073     <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#abbe6ab2f9449480e4c580b8b5e6d73a4">RIP_RESPONSE</a>:
<a name="l02074"></a>02074       <a class="code" href="ripd_8c.html#a736ea390d3ed633046eb5c320ac21f30">rip_response_process</a> (packet, len, &amp;from, ifc);
<a name="l02075"></a>02075       <span class="keywordflow">break</span>;
<a name="l02076"></a>02076     <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#ac4d0419fac5cd68dfee1bb1920e9689e">RIP_REQUEST</a>:
<a name="l02077"></a>02077     <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a8f9db168b5c1d9e7b229df2919976f1b">RIP_POLL</a>:
<a name="l02078"></a>02078       <a class="code" href="ripd_8c.html#a41f9224825b265801d88ca8dad67b8d2">rip_request_process</a> (packet, len, &amp;from, ifc);
<a name="l02079"></a>02079       <span class="keywordflow">break</span>;
<a name="l02080"></a>02080     <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a6a7ceb19e2a34e38de55d31b0bcf4e60">RIP_TRACEON</a>:
<a name="l02081"></a>02081     <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a3b1ad5694c2b14ab3dd843178e03c878">RIP_TRACEOFF</a>:
<a name="l02082"></a>02082       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Obsolete command %s received, please sent it to routed&quot;</span>, 
<a name="l02083"></a>02083          <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rip_msg, packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>));
<a name="l02084"></a>02084       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l02085"></a>02085       <span class="keywordflow">break</span>;
<a name="l02086"></a>02086     <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a2a1e079e9594db598a6ed6e25e1564d9">RIP_POLL_ENTRY</a>:
<a name="l02087"></a>02087       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Obsolete command %s received&quot;</span>, 
<a name="l02088"></a>02088          <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rip_msg, packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>));
<a name="l02089"></a>02089       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l02090"></a>02090       <span class="keywordflow">break</span>;
<a name="l02091"></a>02091     <span class="keywordflow">default</span>:
<a name="l02092"></a>02092       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Unknown RIP command %d received&quot;</span>, packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>);
<a name="l02093"></a>02093       <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
<a name="l02094"></a>02094       <span class="keywordflow">break</span>;
<a name="l02095"></a>02095     }
<a name="l02096"></a>02096 
<a name="l02097"></a>02097   <span class="keywordflow">return</span> len;
<a name="l02098"></a>02098 }
<a name="l02099"></a>02099 
<a name="l02100"></a>02100 <span class="comment">/* Write routing table entry to the stream and return next index of</span>
<a name="l02101"></a>02101 <span class="comment">   the routing table entry in the stream. */</span>
<a name="l02102"></a>02102 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02103"></a><a class="code" href="ripd_8c.html#ab360fa2e0affcbafc75309301e75b184">02103</a> <a class="code" href="ripd_8c.html#ab360fa2e0affcbafc75309301e75b184">rip_write_rte</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>,
<a name="l02104"></a>02104                u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>, <span class="keyword">struct</span> <a class="code" href="structrip__info.html">rip_info</a> *rinfo)
<a name="l02105"></a>02105 {
<a name="l02106"></a>02106   <span class="keyword">struct </span>in_addr mask;
<a name="l02107"></a>02107 
<a name="l02108"></a>02108   <span class="comment">/* Write routing table entry. */</span>
<a name="l02109"></a>02109   <span class="keywordflow">if</span> (version == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>)
<a name="l02110"></a>02110     {
<a name="l02111"></a>02111       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, AF_INET);
<a name="l02112"></a>02112       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l02113"></a>02113       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, p-&gt;prefix.s_addr);
<a name="l02114"></a>02114       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, 0);
<a name="l02115"></a>02115       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, 0);
<a name="l02116"></a>02116       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a>);
<a name="l02117"></a>02117     }
<a name="l02118"></a>02118   <span class="keywordflow">else</span>
<a name="l02119"></a>02119     {
<a name="l02120"></a>02120       <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;mask);
<a name="l02121"></a>02121 
<a name="l02122"></a>02122       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, AF_INET);
<a name="l02123"></a>02123       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, rinfo-&gt;<a class="code" href="structrip__info.html#aa73d70cc27289940aeab90f33c16cf77">tag_out</a>);
<a name="l02124"></a>02124       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, p-&gt;prefix.s_addr);
<a name="l02125"></a>02125       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, mask.s_addr);
<a name="l02126"></a>02126       <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, rinfo-&gt;<a class="code" href="structrip__info.html#aa36603c28bc184f689e674ec0bcc84bc">nexthop_out</a>.s_addr);
<a name="l02127"></a>02127       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a>);
<a name="l02128"></a>02128     }
<a name="l02129"></a>02129 
<a name="l02130"></a>02130   <span class="keywordflow">return</span> ++<a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>;
<a name="l02131"></a>02131 }
<a name="l02132"></a>02132 
<a name="l02133"></a>02133 <span class="comment">/* Send update to the ifp or spcified neighbor. */</span>
<a name="l02134"></a>02134 <span class="keywordtype">void</span>
<a name="l02135"></a><a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">02135</a> <a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (<span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc, <span class="keyword">struct</span> sockaddr_in *to, 
<a name="l02136"></a>02136                     <span class="keywordtype">int</span> route_type, u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>)
<a name="l02137"></a>02137 {
<a name="l02138"></a>02138   <span class="keywordtype">int</span> ret;
<a name="l02139"></a>02139   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l02140"></a>02140   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
<a name="l02141"></a>02141   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l02142"></a>02142   <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
<a name="l02143"></a>02143   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l02144"></a>02144   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> classfull;
<a name="l02145"></a>02145   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> ifaddrclass;
<a name="l02146"></a>02146   <span class="keyword">struct </span><a class="code" href="structkey.html">key</a> *<a class="code" href="structkey.html">key</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02147"></a>02147   <span class="comment">/* this might need to made dynamic if RIP ever supported auth methods</span>
<a name="l02148"></a>02148 <span class="comment">     with larger key string sizes */</span>
<a name="l02149"></a>02149   <span class="keywordtype">char</span> auth_str[<a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>];
<a name="l02150"></a>02150   <span class="keywordtype">size_t</span> doff = 0; <span class="comment">/* offset of digest offset field */</span>
<a name="l02151"></a>02151   <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a> = 0;
<a name="l02152"></a>02152   <span class="keywordtype">int</span> rtemax;
<a name="l02153"></a>02153   <span class="keywordtype">int</span> subnetted = 0;
<a name="l02154"></a>02154 
<a name="l02155"></a>02155   <span class="comment">/* Logging output event. */</span>
<a name="l02156"></a>02156   <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l02157"></a>02157     {
<a name="l02158"></a>02158       <span class="keywordflow">if</span> (to)
<a name="l02159"></a>02159     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;update routes to neighbor %s&quot;</span>, inet_ntoa (to-&gt;sin_addr));
<a name="l02160"></a>02160       <span class="keywordflow">else</span>
<a name="l02161"></a>02161     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;update routes on interface %s ifindex %d&quot;</span>,
<a name="l02162"></a>02162            ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
<a name="l02163"></a>02163     }
<a name="l02164"></a>02164 
<a name="l02165"></a>02165   <span class="comment">/* Set output stream. */</span>
<a name="l02166"></a>02166   s = rip-&gt;<a class="code" href="structrip.html#a0816f2eee75543e57cad83a492541a14">obuf</a>;
<a name="l02167"></a>02167 
<a name="l02168"></a>02168   <span class="comment">/* Reset stream and RTE counter. */</span>
<a name="l02169"></a>02169   <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l02170"></a>02170   rtemax = (<a class="code" href="ripd_8h.html#aa54db4e9d7f1bc562bf9054f5502283f">RIP_PACKET_MAXSIZ</a> - 4) / 20;
<a name="l02171"></a>02171 
<a name="l02172"></a>02172   <span class="comment">/* Get RIP interface. */</span>
<a name="l02173"></a>02173   ri = ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l02174"></a>02174     
<a name="l02175"></a>02175   <span class="comment">/* If output interface is in simple password authentication mode, we</span>
<a name="l02176"></a>02176 <span class="comment">     need space for authentication data.  */</span>
<a name="l02177"></a>02177   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>)
<a name="l02178"></a>02178     rtemax -= 1;
<a name="l02179"></a>02179 
<a name="l02180"></a>02180   <span class="comment">/* If output interface is in MD5 authentication mode, we need space</span>
<a name="l02181"></a>02181 <span class="comment">     for authentication header and data. */</span>
<a name="l02182"></a>02182   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>)
<a name="l02183"></a>02183     rtemax -= 2;
<a name="l02184"></a>02184 
<a name="l02185"></a>02185   <span class="comment">/* If output interface is in simple password authentication mode</span>
<a name="l02186"></a>02186 <span class="comment">     and string or keychain is specified we need space for auth. data */</span>
<a name="l02187"></a>02187   <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a>)
<a name="l02188"></a>02188     {
<a name="l02189"></a>02189       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>)
<a name="l02190"></a>02190        {
<a name="l02191"></a>02191          <span class="keyword">struct </span><a class="code" href="structkeychain.html">keychain</a> *<a class="code" href="structkeychain.html">keychain</a>;
<a name="l02192"></a>02192 
<a name="l02193"></a>02193          keychain = <a class="code" href="keychain_8c.html#a0d83c9f26473a5d9ab10051f72471278">keychain_lookup</a> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>);
<a name="l02194"></a>02194          <span class="keywordflow">if</span> (keychain)
<a name="l02195"></a>02195            key = <a class="code" href="keychain_8c.html#a5a3794a38267952b3be26725ee2bf41e">key_lookup_for_send</a> (keychain);
<a name="l02196"></a>02196        }
<a name="l02197"></a>02197       <span class="comment">/* to be passed to auth functions later */</span>
<a name="l02198"></a>02198       <a class="code" href="ripd_8c.html#a2747a4f7653e3afdccb61a7412fe4555">rip_auth_prepare_str_send</a> (ri, key, auth_str, <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);
<a name="l02199"></a>02199     }
<a name="l02200"></a>02200 
<a name="l02201"></a>02201   <span class="keywordflow">if</span> (version == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>)
<a name="l02202"></a>02202     {
<a name="l02203"></a>02203       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifaddrclass, ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>, sizeof (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
<a name="l02204"></a>02204       <a class="code" href="prefix_8c.html#a00e9cb624cf0d2526fbc5a48b340d046">apply_classful_mask_ipv4</a> (&amp;ifaddrclass);
<a name="l02205"></a>02205       subnetted = 0;
<a name="l02206"></a>02206       <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &gt; ifaddrclass.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>)
<a name="l02207"></a>02207         subnetted = 1;
<a name="l02208"></a>02208     }
<a name="l02209"></a>02209 
<a name="l02210"></a>02210   <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
<a name="l02211"></a>02211     <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02212"></a>02212       {
<a name="l02213"></a>02213     <span class="comment">/* For RIPv1, if we are subnetted, output subnets in our network    */</span>
<a name="l02214"></a>02214     <span class="comment">/* that have the same mask as the output &quot;interface&quot;. For other     */</span>
<a name="l02215"></a>02215     <span class="comment">/* networks, only the classfull version is output.                  */</span>
<a name="l02216"></a>02216     
<a name="l02217"></a>02217     <span class="keywordflow">if</span> (version == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>)
<a name="l02218"></a>02218       {
<a name="l02219"></a>02219         p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;
<a name="l02220"></a>02220 
<a name="l02221"></a>02221         if (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l02222"></a>02222           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;RIPv1 mask check, %s/%d considered for output&quot;</span>,
<a name="l02223"></a>02223             inet_ntoa (rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02224"></a>02224 
<a name="l02225"></a>02225         <span class="keywordflow">if</span> (subnetted &amp;&amp;
<a name="l02226"></a>02226         <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;ifaddrclass, &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>))
<a name="l02227"></a>02227           {
<a name="l02228"></a>02228         <span class="keywordflow">if</span> ((ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> != rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>) &amp;&amp;
<a name="l02229"></a>02229             (rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> != 32))
<a name="l02230"></a>02230           <span class="keywordflow">continue</span>;
<a name="l02231"></a>02231           }
<a name="l02232"></a>02232         <span class="keywordflow">else</span>
<a name="l02233"></a>02233           {
<a name="l02234"></a>02234         <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;classfull, &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
<a name="l02235"></a>02235         <a class="code" href="prefix_8c.html#a00e9cb624cf0d2526fbc5a48b340d046">apply_classful_mask_ipv4</a>(&amp;classfull);
<a name="l02236"></a>02236         <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr != 0 &amp;&amp;
<a name="l02237"></a>02237             classfull.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> != rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l02238"></a>02238           <span class="keywordflow">continue</span>;
<a name="l02239"></a>02239           }
<a name="l02240"></a>02240         <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l02241"></a>02241           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;RIPv1 mask check, %s/%d made it through&quot;</span>,
<a name="l02242"></a>02242             inet_ntoa (rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02243"></a>02243       }
<a name="l02244"></a>02244     <span class="keywordflow">else</span> 
<a name="l02245"></a>02245       p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;
<a name="l02246"></a>02246 
<a name="l02247"></a>02247     <span class="comment">/* Apply output filters. */</span>
<a name="l02248"></a>02248     ret = <a class="code" href="ripd_8c.html#aefc4f415c4c80ce04efebb7798274245">rip_outgoing_filter</a> (p, ri);
<a name="l02249"></a>02249     <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l02250"></a>02250       <span class="keywordflow">continue</span>;
<a name="l02251"></a>02251 
<a name="l02252"></a>02252     <span class="comment">/* Changed route only output. */</span>
<a name="l02253"></a>02253     <span class="keywordflow">if</span> (route_type == <a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a875a9ec24e36cc0e1b6b6628dcfe5cdb">rip_changed_route</a> &amp;&amp;
<a name="l02254"></a>02254         (! (rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> &amp; <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>)))
<a name="l02255"></a>02255       <span class="keywordflow">continue</span>;
<a name="l02256"></a>02256 
<a name="l02257"></a>02257     <span class="comment">/* Split horizon. */</span>
<a name="l02258"></a>02258     <span class="comment">/* if (split_horizon == rip_split_horizon) */</span>
<a name="l02259"></a>02259     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a916987553fb253517dbba8a1cf4f46e4">split_horizon</a> == <a class="code" href="ripd_8h.html#afbda8c496aa1c117b3d787e59a537311a8d03c9787477893076a75b9af032eeb2">RIP_SPLIT_HORIZON</a>)
<a name="l02260"></a>02260       {
<a name="l02261"></a>02261         <span class="comment">/* </span>
<a name="l02262"></a>02262 <span class="comment">         * We perform split horizon for RIP and connected route. </span>
<a name="l02263"></a>02263 <span class="comment">         * For rip routes, we want to suppress the route if we would</span>
<a name="l02264"></a>02264 <span class="comment">             * end up sending the route back on the interface that we</span>
<a name="l02265"></a>02265 <span class="comment">             * learned it from, with a higher metric. For connected routes,</span>
<a name="l02266"></a>02266 <span class="comment">             * we suppress the route if the prefix is a subset of the</span>
<a name="l02267"></a>02267 <span class="comment">             * source address that we are going to use for the packet </span>
<a name="l02268"></a>02268 <span class="comment">             * (in order to handle the case when multiple subnets are</span>
<a name="l02269"></a>02269 <span class="comment">             * configured on the same interface).</span>
<a name="l02270"></a>02270 <span class="comment">             */</span>
<a name="l02271"></a>02271         <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>  &amp;&amp;
<a name="l02272"></a>02272                  rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> == ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>) 
<a name="l02273"></a>02273           <span class="keywordflow">continue</span>;
<a name="l02274"></a>02274         <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a> &amp;&amp;
<a name="l02275"></a>02275                  <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a>((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)p, ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>))
<a name="l02276"></a>02276           <span class="keywordflow">continue</span>;
<a name="l02277"></a>02277       }
<a name="l02278"></a>02278 
<a name="l02279"></a>02279     <span class="comment">/* Preparation for route-map. */</span>
<a name="l02280"></a>02280     rinfo-&gt;<a class="code" href="structrip__info.html#a820b94411a405e5f5b7bd69e2afbeafb">metric_set</a> = 0;
<a name="l02281"></a>02281     rinfo-&gt;<a class="code" href="structrip__info.html#aa36603c28bc184f689e674ec0bcc84bc">nexthop_out</a>.s_addr = 0;
<a name="l02282"></a>02282     rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>;
<a name="l02283"></a>02283     rinfo-&gt;<a class="code" href="structrip__info.html#aa73d70cc27289940aeab90f33c16cf77">tag_out</a> = rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a>;
<a name="l02284"></a>02284     rinfo-&gt;<a class="code" href="structrip__info.html#ad352959ffc9d687fc8b5b0c8ca6fee93">ifindex_out</a> = ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l02285"></a>02285 
<a name="l02286"></a>02286     <span class="comment">/* In order to avoid some local loops,</span>
<a name="l02287"></a>02287 <span class="comment">     * if the RIP route has a nexthop via this interface, keep the nexthop,</span>
<a name="l02288"></a>02288 <span class="comment">     * otherwise set it to 0. The nexthop should not be propagated</span>
<a name="l02289"></a>02289 <span class="comment">     * beyond the local broadcast/multicast area in order</span>
<a name="l02290"></a>02290 <span class="comment">     * to avoid an IGP multi-level recursive look-up.</span>
<a name="l02291"></a>02291 <span class="comment">     * see (4.4)</span>
<a name="l02292"></a>02292 <span class="comment">     */</span>
<a name="l02293"></a>02293     <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> == ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>)
<a name="l02294"></a>02294       rinfo-&gt;<a class="code" href="structrip__info.html#aa36603c28bc184f689e674ec0bcc84bc">nexthop_out</a> = rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>;
<a name="l02295"></a>02295 
<a name="l02296"></a>02296     <span class="comment">/* Interface route-map */</span>
<a name="l02297"></a>02297     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>])
<a name="l02298"></a>02298       {
<a name="l02299"></a>02299         ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>], 
<a name="l02300"></a>02300                      (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370acea1c1ac711770ac85bef02d97449004">RMAP_RIP</a>, 
<a name="l02301"></a>02301                      rinfo);
<a name="l02302"></a>02302 
<a name="l02303"></a>02303         <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
<a name="l02304"></a>02304           {
<a name="l02305"></a>02305             <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l02306"></a>02306               <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIP %s/%d is filtered by route-map out&quot;</span>,
<a name="l02307"></a>02307                  inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02308"></a>02308           <span class="keywordflow">continue</span>;
<a name="l02309"></a>02309           }
<a name="l02310"></a>02310       }
<a name="l02311"></a>02311            
<a name="l02312"></a>02312     <span class="comment">/* Apply redistribute route map - continue, if deny */</span>
<a name="l02313"></a>02313     <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>].<a class="code" href="structrip.html#a77a65f4af78afdc1861f3f59ce91fb66">name</a>
<a name="l02314"></a>02314         &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> != <a class="code" href="ripd_8h.html#a9dca6cb74820d2f885ed8c71bfd403b9">RIP_ROUTE_INTERFACE</a>)
<a name="l02315"></a>02315       {
<a name="l02316"></a>02316         ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (rip-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>].<a class="code" href="structrip.html#af7561ddaf524e0a589d1d67322736460">map</a>,
<a name="l02317"></a>02317                    (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370acea1c1ac711770ac85bef02d97449004">RMAP_RIP</a>, rinfo);
<a name="l02318"></a>02318 
<a name="l02319"></a>02319         <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>) 
<a name="l02320"></a>02320           {
<a name="l02321"></a>02321         <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
<a name="l02322"></a>02322           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d is filtered by route-map&quot;</span>,
<a name="l02323"></a>02323                  inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02324"></a>02324         <span class="keywordflow">continue</span>;
<a name="l02325"></a>02325           }
<a name="l02326"></a>02326       }
<a name="l02327"></a>02327 
<a name="l02328"></a>02328     <span class="comment">/* When route-map does not set metric. */</span>
<a name="l02329"></a>02329     <span class="keywordflow">if</span> (! rinfo-&gt;<a class="code" href="structrip__info.html#a820b94411a405e5f5b7bd69e2afbeafb">metric_set</a>)
<a name="l02330"></a>02330       {
<a name="l02331"></a>02331         <span class="comment">/* If redistribute metric is set. */</span>
<a name="l02332"></a>02332         <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>].<a class="code" href="structrip.html#a8ef10c6659dafa9d8912fb31e3c32f12">metric_config</a>
<a name="l02333"></a>02333         &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l02334"></a>02334           {
<a name="l02335"></a>02335         rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = rip-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>].<a class="code" href="structrip.html#ac0b1115c5dc500cd379f80f17df49f09">metric</a>;
<a name="l02336"></a>02336           }
<a name="l02337"></a>02337         <span class="keywordflow">else</span>
<a name="l02338"></a>02338           {
<a name="l02339"></a>02339         <span class="comment">/* If the route is not connected or localy generated</span>
<a name="l02340"></a>02340 <span class="comment">           one, use default-metric value*/</span>
<a name="l02341"></a>02341         <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> != <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> 
<a name="l02342"></a>02342             &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>
<a name="l02343"></a>02343             &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l02344"></a>02344           rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = rip-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a>;
<a name="l02345"></a>02345           }
<a name="l02346"></a>02346       }
<a name="l02347"></a>02347 
<a name="l02348"></a>02348     <span class="comment">/* Apply offset-list */</span>
<a name="l02349"></a>02349     <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l02350"></a>02350       <a class="code" href="rip__offset_8c.html#a3dae79279069c2f5ff8cbd0b6fa11e98">rip_offset_list_apply_out</a> (p, ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a>);
<a name="l02351"></a>02351 
<a name="l02352"></a>02352     <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> &gt; <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l02353"></a>02353       rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
<a name="l02354"></a>02354 
<a name="l02355"></a>02355     <span class="comment">/* Perform split-horizon with poisoned reverse </span>
<a name="l02356"></a>02356 <span class="comment">     * for RIP and connected routes.</span>
<a name="l02357"></a>02357 <span class="comment">     **/</span>
<a name="l02358"></a>02358     <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a916987553fb253517dbba8a1cf4f46e4">split_horizon</a> == <a class="code" href="ripd_8h.html#afbda8c496aa1c117b3d787e59a537311a3173dbae8e62bbbc008f70fac252023b">RIP_SPLIT_HORIZON_POISONED_REVERSE</a>) {
<a name="l02359"></a>02359         <span class="comment">/* </span>
<a name="l02360"></a>02360 <span class="comment">         * We perform split horizon for RIP and connected route. </span>
<a name="l02361"></a>02361 <span class="comment">         * For rip routes, we want to suppress the route if we would</span>
<a name="l02362"></a>02362 <span class="comment">             * end up sending the route back on the interface that we</span>
<a name="l02363"></a>02363 <span class="comment">             * learned it from, with a higher metric. For connected routes,</span>
<a name="l02364"></a>02364 <span class="comment">             * we suppress the route if the prefix is a subset of the</span>
<a name="l02365"></a>02365 <span class="comment">             * source address that we are going to use for the packet </span>
<a name="l02366"></a>02366 <span class="comment">             * (in order to handle the case when multiple subnets are</span>
<a name="l02367"></a>02367 <span class="comment">             * configured on the same interface).</span>
<a name="l02368"></a>02368 <span class="comment">             */</span>
<a name="l02369"></a>02369       <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>  &amp;&amp;
<a name="l02370"></a>02370            rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> == ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>)
<a name="l02371"></a>02371            rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
<a name="l02372"></a>02372       <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a> &amp;&amp;
<a name="l02373"></a>02373               <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a>((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)p, ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>))
<a name="l02374"></a>02374            rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
<a name="l02375"></a>02375     }
<a name="l02376"></a>02376     
<a name="l02377"></a>02377     <span class="comment">/* Prepare preamble, auth headers, if needs be */</span>
<a name="l02378"></a>02378     <span class="keywordflow">if</span> (num == 0)
<a name="l02379"></a>02379       {
<a name="l02380"></a>02380         <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="ripd_8h.html#abbe6ab2f9449480e4c580b8b5e6d73a4">RIP_RESPONSE</a>);
<a name="l02381"></a>02381         <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, version);
<a name="l02382"></a>02382         <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l02383"></a>02383         
<a name="l02384"></a>02384         <span class="comment">/* auth header for !v1 &amp;&amp; !no_auth */</span>
<a name="l02385"></a>02385             <span class="keywordflow">if</span> ( (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a>) &amp;&amp; (version != <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>) )
<a name="l02386"></a>02386               doff = <a class="code" href="ripd_8c.html#a72538cf9bcdaa839156ff1390c6cc2a0">rip_auth_header_write</a> (s, ri, key, auth_str, 
<a name="l02387"></a>02387                                               <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);
<a name="l02388"></a>02388           }
<a name="l02389"></a>02389         
<a name="l02390"></a>02390     <span class="comment">/* Write RTE to the stream. */</span>
<a name="l02391"></a>02391     num = <a class="code" href="ripd_8c.html#ab360fa2e0affcbafc75309301e75b184">rip_write_rte</a> (num, s, p, version, rinfo);
<a name="l02392"></a>02392     <span class="keywordflow">if</span> (num == rtemax)
<a name="l02393"></a>02393       {
<a name="l02394"></a>02394         <span class="keywordflow">if</span> (version == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> &amp;&amp; ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>)
<a name="l02395"></a>02395               <a class="code" href="ripd_8c.html#a4a48a7de91fb41ecbdfe8be6861c214d">rip_auth_md5_set</a> (s, ri, doff, auth_str, <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);
<a name="l02396"></a>02396 
<a name="l02397"></a>02397         ret = <a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> (<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s),
<a name="l02398"></a>02398                    to, ifc);
<a name="l02399"></a>02399 
<a name="l02400"></a>02400         <span class="keywordflow">if</span> (ret &gt;= 0 &amp;&amp; <a class="code" href="rip__debug_8h.html#a09db8cb831d1c4cc37113a5845391502">IS_RIP_DEBUG_SEND</a>)
<a name="l02401"></a>02401           <a class="code" href="ripd_8c.html#a04c8759c650299a52379cfe00f257283">rip_packet_dump</a> ((<span class="keyword">struct</span> <a class="code" href="structrip__packet.html">rip_packet</a> *)<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s),
<a name="l02402"></a>02402                    <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(s), <span class="stringliteral">&quot;SEND&quot;</span>);
<a name="l02403"></a>02403         num = 0;
<a name="l02404"></a>02404         <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l02405"></a>02405       }
<a name="l02406"></a>02406       }
<a name="l02407"></a>02407 
<a name="l02408"></a>02408   <span class="comment">/* Flush unwritten RTE. */</span>
<a name="l02409"></a>02409   <span class="keywordflow">if</span> (num != 0)
<a name="l02410"></a>02410     {
<a name="l02411"></a>02411       <span class="keywordflow">if</span> (version == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> &amp;&amp; ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>)
<a name="l02412"></a>02412         <a class="code" href="ripd_8c.html#a4a48a7de91fb41ecbdfe8be6861c214d">rip_auth_md5_set</a> (s, ri, doff, auth_str, <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);
<a name="l02413"></a>02413 
<a name="l02414"></a>02414       ret = <a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> (<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s), to, ifc);
<a name="l02415"></a>02415 
<a name="l02416"></a>02416       <span class="keywordflow">if</span> (ret &gt;= 0 &amp;&amp; <a class="code" href="rip__debug_8h.html#a09db8cb831d1c4cc37113a5845391502">IS_RIP_DEBUG_SEND</a>)
<a name="l02417"></a>02417     <a class="code" href="ripd_8c.html#a04c8759c650299a52379cfe00f257283">rip_packet_dump</a> ((<span class="keyword">struct</span> <a class="code" href="structrip__packet.html">rip_packet</a> *)<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s),
<a name="l02418"></a>02418              <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s), <span class="stringliteral">&quot;SEND&quot;</span>);
<a name="l02419"></a>02419       num = 0;
<a name="l02420"></a>02420       <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l02421"></a>02421     }
<a name="l02422"></a>02422 
<a name="l02423"></a>02423   <span class="comment">/* Statistics updates. */</span>
<a name="l02424"></a>02424   ri-&gt;<a class="code" href="structrip__interface.html#a8ae4cd2483c6bd6b83d0b43d42dfcc89">sent_updates</a>++;
<a name="l02425"></a>02425 }
<a name="l02426"></a>02426 
<a name="l02427"></a>02427 <span class="comment">/* Send RIP packet to the interface. */</span>
<a name="l02428"></a>02428 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02429"></a><a class="code" href="ripd_8c.html#a185280c44514e664f553ed0b784c8497">02429</a> <a class="code" href="ripd_8c.html#a185280c44514e664f553ed0b784c8497">rip_update_interface</a> (<span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc, u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>, <span class="keywordtype">int</span> route_type)
<a name="l02430"></a>02430 {
<a name="l02431"></a>02431   <span class="keyword">struct </span>sockaddr_in to;
<a name="l02432"></a>02432 
<a name="l02433"></a>02433   <span class="comment">/* When RIP version is 2 and multicast enable interface. */</span>
<a name="l02434"></a>02434   <span class="keywordflow">if</span> (version == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> &amp;&amp; <a class="code" href="if_8c.html#a0bdd794de28c265aec55d740ed3c5ddc">if_is_multicast</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>)) 
<a name="l02435"></a>02435     {
<a name="l02436"></a>02436       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l02437"></a>02437     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;multicast announce on %s &quot;</span>, ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l02438"></a>02438 
<a name="l02439"></a>02439       <a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (ifc, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, route_type, version);
<a name="l02440"></a>02440       <span class="keywordflow">return</span>;
<a name="l02441"></a>02441     }
<a name="l02442"></a>02442   
<a name="l02443"></a>02443   <span class="comment">/* If we can&#39;t send multicast packet, send it with unicast. */</span>
<a name="l02444"></a>02444   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a88f3bd141d217db7e4118a78b1db1b60">if_is_broadcast</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>) || <a class="code" href="if_8c.html#a61aed2ccc7ec47d6822546664ea77f0c">if_is_pointopoint</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>))
<a name="l02445"></a>02445     {
<a name="l02446"></a>02446       <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l02447"></a>02447         {
<a name="l02448"></a>02448           <span class="comment">/* Destination address and port setting. */</span>
<a name="l02449"></a>02449           memset (&amp;to, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l02450"></a>02450           <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>)
<a name="l02451"></a>02451             <span class="comment">/* use specified broadcast or peer destination addr */</span>
<a name="l02452"></a>02452             to.sin_addr = ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l02453"></a>02453           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt; <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>)
<a name="l02454"></a>02454             <span class="comment">/* calculate the appropriate broadcast address */</span>
<a name="l02455"></a>02455             to.sin_addr.s_addr =
<a name="l02456"></a>02456               <a class="code" href="prefix_8c.html#a0416c71ab42c828a9ee8ee82ddda6a77">ipv4_broadcast_addr</a>(ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr,
<a name="l02457"></a>02457                                   ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02458"></a>02458       <span class="keywordflow">else</span>
<a name="l02459"></a>02459         <span class="comment">/* do not know where to send the packet */</span>
<a name="l02460"></a>02460         <span class="keywordflow">return</span>;
<a name="l02461"></a>02461           to.sin_port = htons (<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>);
<a name="l02462"></a>02462 
<a name="l02463"></a>02463           <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l02464"></a>02464             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;%s announce to %s on %s&quot;</span>,
<a name="l02465"></a>02465                <a class="code" href="if_8h.html#a2443297a4d8f44cc5d2ce38fcbf345f2">CONNECTED_PEER</a>(ifc) ? <span class="stringliteral">&quot;unicast&quot;</span> : <span class="stringliteral">&quot;broadcast&quot;</span>,
<a name="l02466"></a>02466                inet_ntoa (to.sin_addr), ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l02467"></a>02467 
<a name="l02468"></a>02468           <a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (ifc, &amp;to, route_type, version);
<a name="l02469"></a>02469         }
<a name="l02470"></a>02470     }
<a name="l02471"></a>02471 }
<a name="l02472"></a>02472 
<a name="l02473"></a>02473 <span class="comment">/* Update send to all interface and neighbor. */</span>
<a name="l02474"></a>02474 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02475"></a><a class="code" href="ripd_8c.html#ad2f37edffd39b917a4dfa17213c9c457">02475</a> <a class="code" href="ripd_8c.html#ad2f37edffd39b917a4dfa17213c9c457">rip_update_process</a> (<span class="keywordtype">int</span> route_type)
<a name="l02476"></a>02476 {
<a name="l02477"></a>02477   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l02478"></a>02478   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ifnode, *ifnnode;
<a name="l02479"></a>02479   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *<a class="code" href="structconnected.html">connected</a>;
<a name="l02480"></a>02480   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l02481"></a>02481   <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
<a name="l02482"></a>02482   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
<a name="l02483"></a>02483   <span class="keyword">struct </span>sockaddr_in to;
<a name="l02484"></a>02484   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l02485"></a>02485 
<a name="l02486"></a>02486   <span class="comment">/* Send RIP update to each interface. */</span>
<a name="l02487"></a>02487   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
<a name="l02488"></a>02488     {
<a name="l02489"></a>02489       <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
<a name="l02490"></a>02490     <span class="keywordflow">continue</span>;
<a name="l02491"></a>02491 
<a name="l02492"></a>02492       <span class="keywordflow">if</span> (! <a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
<a name="l02493"></a>02493     <span class="keywordflow">continue</span>;
<a name="l02494"></a>02494 
<a name="l02495"></a>02495       <span class="comment">/* Fetch RIP interface information. */</span>
<a name="l02496"></a>02496       ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l02497"></a>02497 
<a name="l02498"></a>02498       <span class="comment">/* When passive interface is specified, suppress announce to the</span>
<a name="l02499"></a>02499 <span class="comment">         interface. */</span>
<a name="l02500"></a>02500       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#aa624d6a89ab2dcd614cc0fb89e08febf">passive</a>)
<a name="l02501"></a>02501     <span class="keywordflow">continue</span>;
<a name="l02502"></a>02502 
<a name="l02503"></a>02503       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a29f1e7ea828dc3950b72ea63bc7068a4">running</a>)
<a name="l02504"></a>02504     {
<a name="l02505"></a>02505       <span class="comment">/* </span>
<a name="l02506"></a>02506 <span class="comment">       * If there is no version configuration in the interface,</span>
<a name="l02507"></a>02507 <span class="comment">       * use rip&#39;s version setting. </span>
<a name="l02508"></a>02508 <span class="comment">       */</span>
<a name="l02509"></a>02509       <span class="keywordtype">int</span> vsend = ((ri-&gt;<a class="code" href="structrip__interface.html#a2b4602c504a60bac12c372581abd1159">ri_send</a> == <a class="code" href="ripd_8h.html#acaf07e083e328ebe0df4c436655a4d66">RI_RIP_UNSPEC</a>) ?
<a name="l02510"></a>02510                rip-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a> : ri-&gt;<a class="code" href="structrip__interface.html#a2b4602c504a60bac12c372581abd1159">ri_send</a>);
<a name="l02511"></a>02511 
<a name="l02512"></a>02512       <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>) 
<a name="l02513"></a>02513         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;SEND UPDATE to %s ifindex %d&quot;</span>,
<a name="l02514"></a>02514                (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a> ? ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a> : <span class="stringliteral">&quot;_unknown_&quot;</span>), ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
<a name="l02515"></a>02515 
<a name="l02516"></a>02516           <span class="comment">/* send update on each connected network */</span>
<a name="l02517"></a>02517       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, ifnode, ifnnode, connected))
<a name="l02518"></a>02518         {
<a name="l02519"></a>02519           <span class="keywordflow">if</span> (connected-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l02520"></a>02520             {
<a name="l02521"></a>02521           <span class="keywordflow">if</span> (vsend &amp; <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>)
<a name="l02522"></a>02522             <a class="code" href="ripd_8c.html#a185280c44514e664f553ed0b784c8497">rip_update_interface</a> (connected, RIPv1, route_type);
<a name="l02523"></a>02523           <span class="keywordflow">if</span> ((vsend &amp; <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>) &amp;&amp; <a class="code" href="if_8c.html#a0bdd794de28c265aec55d740ed3c5ddc">if_is_multicast</a>(ifp))
<a name="l02524"></a>02524             <a class="code" href="ripd_8c.html#a185280c44514e664f553ed0b784c8497">rip_update_interface</a> (connected, RIPv2, route_type);
<a name="l02525"></a>02525         }
<a name="l02526"></a>02526         }
<a name="l02527"></a>02527     }
<a name="l02528"></a>02528     }
<a name="l02529"></a>02529 
<a name="l02530"></a>02530   <span class="comment">/* RIP send updates to each neighbor. */</span>
<a name="l02531"></a>02531   <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip-&gt;<a class="code" href="structrip.html#a5361d5a9259aa9a07ba942b32376eda7">neighbor</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
<a name="l02532"></a>02532     <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02533"></a>02533       {
<a name="l02534"></a>02534     p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;
<a name="l02535"></a>02535 
<a name="l02536"></a>02536     ifp = <a class="code" href="if_8c.html#a84f550f6181fac06214b71b6408fc8db">if_lookup_address</a> (p-&gt;prefix);
<a name="l02537"></a>02537     <span class="keywordflow">if</span> (! ifp)
<a name="l02538"></a>02538       {
<a name="l02539"></a>02539         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Neighbor %s doesnt have connected interface!&quot;</span>,
<a name="l02540"></a>02540                inet_ntoa (p-&gt;prefix));
<a name="l02541"></a>02541         <span class="keywordflow">continue</span>;
<a name="l02542"></a>02542       }
<a name="l02543"></a>02543         
<a name="l02544"></a>02544         <span class="keywordflow">if</span> ( (connected = <a class="code" href="if_8c.html#a7cea5b88a9e4c0abf48f9951090e5fad">connected_lookup_address</a> (ifp, p-&gt;prefix)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02545"></a>02545           {
<a name="l02546"></a>02546             <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Neighbor %s doesnt have connected network&quot;</span>,
<a name="l02547"></a>02547                        inet_ntoa (p-&gt;prefix));
<a name="l02548"></a>02548             <span class="keywordflow">continue</span>;
<a name="l02549"></a>02549           }
<a name="l02550"></a>02550         
<a name="l02551"></a>02551     <span class="comment">/* Set destination address and port */</span>
<a name="l02552"></a>02552     memset (&amp;to, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l02553"></a>02553     to.sin_addr = p-&gt;prefix;
<a name="l02554"></a>02554     to.sin_port = htons (<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>);
<a name="l02555"></a>02555 
<a name="l02556"></a>02556     <span class="comment">/* RIP version is rip&#39;s configuration. */</span>
<a name="l02557"></a>02557     <a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (connected, &amp;to, route_type, rip-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a>);
<a name="l02558"></a>02558       }
<a name="l02559"></a>02559 }
<a name="l02560"></a>02560 
<a name="l02561"></a>02561 <span class="comment">/* RIP&#39;s periodical timer. */</span>
<a name="l02562"></a>02562 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02563"></a><a class="code" href="ripd_8c.html#a5d503898e18cfcf45b7d0cecdae2d016">02563</a> <a class="code" href="ripd_8c.html#a5d503898e18cfcf45b7d0cecdae2d016">rip_update</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l02564"></a>02564 {
<a name="l02565"></a>02565   <span class="comment">/* Clear timer pointer. */</span>
<a name="l02566"></a>02566   rip-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02567"></a>02567 
<a name="l02568"></a>02568   <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l02569"></a>02569     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;update timer fire!&quot;</span>);
<a name="l02570"></a>02570 
<a name="l02571"></a>02571   <span class="comment">/* Process update output. */</span>
<a name="l02572"></a>02572   <a class="code" href="ripd_8c.html#ad2f37edffd39b917a4dfa17213c9c457">rip_update_process</a> (<a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a500d4c9125340f27abf4fa013f88dab6">rip_all_route</a>);
<a name="l02573"></a>02573 
<a name="l02574"></a>02574   <span class="comment">/* Triggered updates may be suppressed if a regular update is due by</span>
<a name="l02575"></a>02575 <span class="comment">     the time the triggered update would be sent. */</span>
<a name="l02576"></a>02576   <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>)
<a name="l02577"></a>02577     {
<a name="l02578"></a>02578       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (rip-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>);
<a name="l02579"></a>02579       rip-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02580"></a>02580     }
<a name="l02581"></a>02581   rip-&gt;<a class="code" href="structrip.html#af9cf461470f2054bbb4bf43607a95660">trigger</a> = 0;
<a name="l02582"></a>02582 
<a name="l02583"></a>02583   <span class="comment">/* Register myself. */</span>
<a name="l02584"></a>02584   <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a5ae803ea0ff858bd14d792ac5b99dd95">RIP_UPDATE_EVENT</a>, 0);
<a name="l02585"></a>02585 
<a name="l02586"></a>02586   <span class="keywordflow">return</span> 0;
<a name="l02587"></a>02587 }
<a name="l02588"></a>02588 
<a name="l02589"></a>02589 <span class="comment">/* Walk down the RIP routing table then clear changed flag. */</span>
<a name="l02590"></a>02590 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02591"></a><a class="code" href="ripd_8c.html#aeadbc9dd74594957aecb8b7a479ab1b0">02591</a> <a class="code" href="ripd_8c.html#aeadbc9dd74594957aecb8b7a479ab1b0">rip_clear_changed_flag</a> (<span class="keywordtype">void</span>)
<a name="l02592"></a>02592 {
<a name="l02593"></a>02593   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
<a name="l02594"></a>02594   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l02595"></a>02595 
<a name="l02596"></a>02596   <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
<a name="l02597"></a>02597     <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02598"></a>02598       <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> &amp; <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>)
<a name="l02599"></a>02599     rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> &amp;= ~<a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;
<a name="l02600"></a>02600 }
<a name="l02601"></a>02601 
<a name="l02602"></a>02602 <span class="comment">/* Triggered update interval timer. */</span>
<a name="l02603"></a>02603 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02604"></a><a class="code" href="ripd_8c.html#a41d92c61a77de7fa2b7bcd9e9602c7a5">02604</a> <a class="code" href="ripd_8c.html#a41d92c61a77de7fa2b7bcd9e9602c7a5">rip_triggered_interval</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l02605"></a>02605 {
<a name="l02606"></a>02606   <span class="keywordtype">int</span> <a class="code" href="ripd_8c.html#a44a6353160beda1a7b670c61a67dd818">rip_triggered_update</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *);
<a name="l02607"></a>02607 
<a name="l02608"></a>02608   rip-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02609"></a>02609 
<a name="l02610"></a>02610   <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#af9cf461470f2054bbb4bf43607a95660">trigger</a>)
<a name="l02611"></a>02611     {
<a name="l02612"></a>02612       rip-&gt;<a class="code" href="structrip.html#af9cf461470f2054bbb4bf43607a95660">trigger</a> = 0;
<a name="l02613"></a>02613       <a class="code" href="ripd_8c.html#a44a6353160beda1a7b670c61a67dd818">rip_triggered_update</a> (t);
<a name="l02614"></a>02614     }
<a name="l02615"></a>02615   <span class="keywordflow">return</span> 0;
<a name="l02616"></a>02616 }     
<a name="l02617"></a>02617 
<a name="l02618"></a>02618 <span class="comment">/* Execute triggered update. */</span>
<a name="l02619"></a>02619 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02620"></a><a class="code" href="ripd_8c.html#a44a6353160beda1a7b670c61a67dd818">02620</a> <a class="code" href="ripd_8c.html#a44a6353160beda1a7b670c61a67dd818">rip_triggered_update</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l02621"></a>02621 {
<a name="l02622"></a>02622   <span class="keywordtype">int</span> <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;
<a name="l02623"></a>02623 
<a name="l02624"></a>02624   <span class="comment">/* Clear thred pointer. */</span>
<a name="l02625"></a>02625   rip-&gt;<a class="code" href="structrip.html#a2bf3b2f0ae9c888e4941a929315f86c2">t_triggered_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02626"></a>02626 
<a name="l02627"></a>02627   <span class="comment">/* Cancel interval timer. */</span>
<a name="l02628"></a>02628   <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>)
<a name="l02629"></a>02629     {
<a name="l02630"></a>02630       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (rip-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>);
<a name="l02631"></a>02631       rip-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02632"></a>02632     }
<a name="l02633"></a>02633   rip-&gt;<a class="code" href="structrip.html#af9cf461470f2054bbb4bf43607a95660">trigger</a> = 0;
<a name="l02634"></a>02634 
<a name="l02635"></a>02635   <span class="comment">/* Logging triggered update. */</span>
<a name="l02636"></a>02636   <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
<a name="l02637"></a>02637     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;triggered update!&quot;</span>);
<a name="l02638"></a>02638 
<a name="l02639"></a>02639   <span class="comment">/* Split Horizon processing is done when generating triggered</span>
<a name="l02640"></a>02640 <span class="comment">     updates as well as normal updates (see section 2.6). */</span>
<a name="l02641"></a>02641   <a class="code" href="ripd_8c.html#ad2f37edffd39b917a4dfa17213c9c457">rip_update_process</a> (<a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a875a9ec24e36cc0e1b6b6628dcfe5cdb">rip_changed_route</a>);
<a name="l02642"></a>02642 
<a name="l02643"></a>02643   <span class="comment">/* Once all of the triggered updates have been generated, the route</span>
<a name="l02644"></a>02644 <span class="comment">     change flags should be cleared. */</span>
<a name="l02645"></a>02645   <a class="code" href="ripd_8c.html#aeadbc9dd74594957aecb8b7a479ab1b0">rip_clear_changed_flag</a> ();
<a name="l02646"></a>02646 
<a name="l02647"></a>02647   <span class="comment">/* After a triggered update is sent, a timer should be set for a</span>
<a name="l02648"></a>02648 <span class="comment">   random interval between 1 and 5 seconds.  If other changes that</span>
<a name="l02649"></a>02649 <span class="comment">   would trigger updates occur before the timer expires, a single</span>
<a name="l02650"></a>02650 <span class="comment">   update is triggered when the timer expires. */</span>
<a name="l02651"></a>02651   interval = (random () % 5) + 1;
<a name="l02652"></a>02652 
<a name="l02653"></a>02653   rip-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a> = 
<a name="l02654"></a>02654     <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripd_8c.html#a41d92c61a77de7fa2b7bcd9e9602c7a5">rip_triggered_interval</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, interval);
<a name="l02655"></a>02655 
<a name="l02656"></a>02656   <span class="keywordflow">return</span> 0;
<a name="l02657"></a>02657 }
<a name="l02658"></a>02658 
<a name="l02659"></a>02659 <span class="comment">/* Withdraw redistributed route. */</span>
<a name="l02660"></a>02660 <span class="keywordtype">void</span>
<a name="l02661"></a><a class="code" href="ripd_8h.html#a5a96e8f7b3424149c99199f9be4c1d42">02661</a> <a class="code" href="ripd_8c.html#a31999532d8eff8b34771b8c0d40379f1">rip_redistribute_withdraw</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l02662"></a>02662 {
<a name="l02663"></a>02663   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
<a name="l02664"></a>02664   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l02665"></a>02665 
<a name="l02666"></a>02666   <span class="keywordflow">if</span> (!rip)
<a name="l02667"></a>02667     <span class="keywordflow">return</span>;
<a name="l02668"></a>02668 
<a name="l02669"></a>02669   <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
<a name="l02670"></a>02670     <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02671"></a>02671       {
<a name="l02672"></a>02672     <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == type
<a name="l02673"></a>02673         &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> != <a class="code" href="ripd_8h.html#a9dca6cb74820d2f885ed8c71bfd403b9">RIP_ROUTE_INTERFACE</a>)
<a name="l02674"></a>02674       {
<a name="l02675"></a>02675         <span class="comment">/* Perform poisoned reverse. */</span>
<a name="l02676"></a>02676         rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
<a name="l02677"></a>02677         <a class="code" href="ripd_8h.html#ac82fe6284825b1b8ac9e1323196e96c4">RIP_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>, 
<a name="l02678"></a>02678               <a class="code" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">rip_garbage_collect</a>, rip-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>);
<a name="l02679"></a>02679         <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
<a name="l02680"></a>02680         rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;
<a name="l02681"></a>02681 
<a name="l02682"></a>02682         <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>) {
<a name="l02683"></a>02683               <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;
<a name="l02684"></a>02684 
<a name="l02685"></a>02685               <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Poisone %s/%d on the interface %s with an infinity metric [withdraw]&quot;</span>,
<a name="l02686"></a>02686                          inet_ntoa(p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
<a name="l02687"></a>02687                          <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a>));
<a name="l02688"></a>02688         }
<a name="l02689"></a>02689 
<a name="l02690"></a>02690         <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);
<a name="l02691"></a>02691       }
<a name="l02692"></a>02692       }
<a name="l02693"></a>02693 }
<a name="l02694"></a>02694 
<a name="l02695"></a>02695 <span class="comment">/* Create new RIP instance and set it to global variable. */</span>
<a name="l02696"></a>02696 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02697"></a><a class="code" href="ripd_8c.html#a52d6b3652aacbdb7241535cb647d92b1">02697</a> <a class="code" href="ripd_8c.html#a52d6b3652aacbdb7241535cb647d92b1">rip_create</a> (<span class="keywordtype">void</span>)
<a name="l02698"></a>02698 {
<a name="l02699"></a>02699   rip = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c7cad00ee9cdeede92c0c380ebbd8ef">MTYPE_RIP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> rip));
<a name="l02700"></a>02700 
<a name="l02701"></a>02701   <span class="comment">/* Set initial value. */</span>
<a name="l02702"></a>02702   rip-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a> = <a class="code" href="ripd_8h.html#aa01e7530767b1b4f617405047b74cf49">RI_RIP_VERSION_2</a>;
<a name="l02703"></a>02703   rip-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> = <a class="code" href="ripd_8h.html#abdca8506f74f9756b337c4c0c4cd2c43">RI_RIP_VERSION_1_AND_2</a>;
<a name="l02704"></a>02704   rip-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a> = <a class="code" href="ripd_8h.html#a4415e31f329179a7a1970783b0ae4816">RIP_UPDATE_TIMER_DEFAULT</a>;
<a name="l02705"></a>02705   rip-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a> = <a class="code" href="ripd_8h.html#a14745370fa257b7afb671b0594538dad">RIP_TIMEOUT_TIMER_DEFAULT</a>;
<a name="l02706"></a>02706   rip-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a> = <a class="code" href="ripd_8h.html#acdff5e9dbc2860fe30cf6ecbc779eb63">RIP_GARBAGE_TIMER_DEFAULT</a>;
<a name="l02707"></a>02707   rip-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a> = <a class="code" href="ripd_8h.html#ae60bba91e95dea222d0722cb7ee4820f">RIP_DEFAULT_METRIC_DEFAULT</a>;
<a name="l02708"></a>02708 
<a name="l02709"></a>02709   <span class="comment">/* Initialize RIP routig table. */</span>
<a name="l02710"></a>02710   rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l02711"></a>02711   rip-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l02712"></a>02712   rip-&gt;<a class="code" href="structrip.html#a5361d5a9259aa9a07ba942b32376eda7">neighbor</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l02713"></a>02713 
<a name="l02714"></a>02714   <span class="comment">/* Make output stream. */</span>
<a name="l02715"></a>02715   rip-&gt;<a class="code" href="structrip.html#a0816f2eee75543e57cad83a492541a14">obuf</a> = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (1500);
<a name="l02716"></a>02716 
<a name="l02717"></a>02717   <span class="comment">/* Make socket. */</span>
<a name="l02718"></a>02718   rip-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a> = <a class="code" href="ripd_8c.html#a7d120833f5e80143c6dee4123ad86a4a">rip_create_socket</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02719"></a>02719   <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a> &lt; 0)
<a name="l02720"></a>02720     <span class="keywordflow">return</span> rip-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a>;
<a name="l02721"></a>02721 
<a name="l02722"></a>02722   <span class="comment">/* Create read and timer thread. */</span>
<a name="l02723"></a>02723   <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67af36c3620e53d2176ba96ad1c7632b0ea">RIP_READ</a>, rip-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a>);
<a name="l02724"></a>02724   <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a5ae803ea0ff858bd14d792ac5b99dd95">RIP_UPDATE_EVENT</a>, 1);
<a name="l02725"></a>02725 
<a name="l02726"></a>02726   <span class="keywordflow">return</span> 0;
<a name="l02727"></a>02727 }
<a name="l02728"></a>02728 
<a name="l02729"></a>02729 <span class="comment">/* Sned RIP request to the destination. */</span>
<a name="l02730"></a>02730 <span class="keywordtype">int</span>
<a name="l02731"></a><a class="code" href="ripd_8h.html#afec2977a7a1bf27aa5549f10527bcdde">02731</a> <a class="code" href="ripd_8c.html#a5f5073229c1fb623b39ad4ce7cb97a6b">rip_request_send</a> (<span class="keyword">struct</span> sockaddr_in *to, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp,
<a name="l02732"></a>02732           u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *<a class="code" href="structconnected.html">connected</a>)
<a name="l02733"></a>02733 {
<a name="l02734"></a>02734   <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
<a name="l02735"></a>02735   <span class="keyword">struct </span><a class="code" href="structrip__packet.html">rip_packet</a> rip_packet;
<a name="l02736"></a>02736   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02737"></a>02737 
<a name="l02738"></a>02738   memset (&amp;rip_packet, 0, <span class="keyword">sizeof</span> (rip_packet));
<a name="l02739"></a>02739 
<a name="l02740"></a>02740   rip_packet.<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a> = <a class="code" href="ripd_8h.html#ac4d0419fac5cd68dfee1bb1920e9689e">RIP_REQUEST</a>;
<a name="l02741"></a>02741   rip_packet.<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> = <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
<a name="l02742"></a>02742   rte = rip_packet.<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;
<a name="l02743"></a>02743   rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = htonl (<a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>);
<a name="l02744"></a>02744 
<a name="l02745"></a>02745   <span class="keywordflow">if</span> (connected) 
<a name="l02746"></a>02746     {
<a name="l02747"></a>02747       <span class="comment">/* </span>
<a name="l02748"></a>02748 <span class="comment">       * connected is only sent for ripv1 case, or when</span>
<a name="l02749"></a>02749 <span class="comment">       * interface does not support multicast.  Caller loops</span>
<a name="l02750"></a>02750 <span class="comment">       * over each connected address for this case.</span>
<a name="l02751"></a>02751 <span class="comment">       */</span>
<a name="l02752"></a>02752       <span class="keywordflow">if</span> (<a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> ((u_char *) &amp;rip_packet, <span class="keyword">sizeof</span> (rip_packet), 
<a name="l02753"></a>02753                             to, connected) != <span class="keyword">sizeof</span> (rip_packet))
<a name="l02754"></a>02754         <span class="keywordflow">return</span> -1;
<a name="l02755"></a>02755       <span class="keywordflow">else</span>
<a name="l02756"></a>02756         <span class="keywordflow">return</span> <span class="keyword">sizeof</span> (rip_packet);
<a name="l02757"></a>02757     }
<a name="l02758"></a>02758     
<a name="l02759"></a>02759   <span class="comment">/* send request on each connected network */</span>
<a name="l02760"></a>02760   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node, nnode, connected))
<a name="l02761"></a>02761     {
<a name="l02762"></a>02762       <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l02763"></a>02763 
<a name="l02764"></a>02764       p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) connected-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l02765"></a>02765 
<a name="l02766"></a>02766       if (p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> != AF_INET)
<a name="l02767"></a>02767         <span class="keywordflow">continue</span>;
<a name="l02768"></a>02768 
<a name="l02769"></a>02769       <span class="keywordflow">if</span> (<a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> ((u_char *) &amp;rip_packet, <span class="keyword">sizeof</span> (rip_packet), 
<a name="l02770"></a>02770                             to, connected) != <span class="keyword">sizeof</span> (rip_packet))
<a name="l02771"></a>02771         <span class="keywordflow">return</span> -1;
<a name="l02772"></a>02772     }
<a name="l02773"></a>02773   <span class="keywordflow">return</span> <span class="keyword">sizeof</span> (rip_packet);
<a name="l02774"></a>02774 }
<a name="l02775"></a>02775 
<a name="l02776"></a>02776 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02777"></a><a class="code" href="ripd_8c.html#adf7591fcda9ffc86ca850c74c268495d">02777</a> <a class="code" href="ripd_8c.html#adf7591fcda9ffc86ca850c74c268495d">rip_update_jitter</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> time)
<a name="l02778"></a>02778 {
<a name="l02779"></a>02779 <span class="preprocessor">#define JITTER_BOUND 4</span>
<a name="l02780"></a>02780 <span class="preprocessor"></span>  <span class="comment">/* We want to get the jitter to +/- 1/JITTER_BOUND the interval.</span>
<a name="l02781"></a>02781 <span class="comment">     Given that, we cannot let time be less than JITTER_BOUND seconds.</span>
<a name="l02782"></a>02782 <span class="comment">     The RIPv2 RFC says jitter should be small compared to</span>
<a name="l02783"></a>02783 <span class="comment">     update_time.  We consider 1/JITTER_BOUND to be small.</span>
<a name="l02784"></a>02784 <span class="comment">  */</span>
<a name="l02785"></a>02785   
<a name="l02786"></a>02786   <span class="keywordtype">int</span> jitter_input = time;
<a name="l02787"></a>02787   <span class="keywordtype">int</span> jitter;
<a name="l02788"></a>02788   
<a name="l02789"></a>02789   <span class="keywordflow">if</span> (jitter_input &lt; <a class="code" href="ripd_8c.html#a12ff2e664dd62569e8d230755d29f23b">JITTER_BOUND</a>)
<a name="l02790"></a>02790     jitter_input = <a class="code" href="ripd_8c.html#a12ff2e664dd62569e8d230755d29f23b">JITTER_BOUND</a>;
<a name="l02791"></a>02791   
<a name="l02792"></a>02792   jitter = (((rand () % ((jitter_input * 2) + 1)) - jitter_input));  
<a name="l02793"></a>02793 
<a name="l02794"></a>02794   <span class="keywordflow">return</span> jitter/<a class="code" href="ripd_8c.html#a12ff2e664dd62569e8d230755d29f23b">JITTER_BOUND</a>;
<a name="l02795"></a>02795 }
<a name="l02796"></a>02796 
<a name="l02797"></a>02797 <span class="keywordtype">void</span>
<a name="l02798"></a><a class="code" href="ripd_8c.html#a5b7ed8aa1514ebd1a72cfcd159566e12">02798</a> <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<span class="keyword">enum</span> <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> <a class="code" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a>, <span class="keywordtype">int</span> sock)
<a name="l02799"></a>02799 {
<a name="l02800"></a>02800   <span class="keywordtype">int</span> jitter = 0;
<a name="l02801"></a>02801 
<a name="l02802"></a>02802   <span class="keywordflow">switch</span> (event)
<a name="l02803"></a>02803     {
<a name="l02804"></a>02804     <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67af36c3620e53d2176ba96ad1c7632b0ea">RIP_READ</a>:
<a name="l02805"></a>02805       rip-&gt;<a class="code" href="structrip.html#a73ff0450da2dfc1332af7a4b64c1e678">t_read</a> = <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripd_8c.html#ad6a63ee8163b47ae9167b2220497cd19">rip_read</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, sock);
<a name="l02806"></a>02806       <span class="keywordflow">break</span>;
<a name="l02807"></a>02807     <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a5ae803ea0ff858bd14d792ac5b99dd95">RIP_UPDATE_EVENT</a>:
<a name="l02808"></a>02808       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a>)
<a name="l02809"></a>02809     {
<a name="l02810"></a>02810       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (rip-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a>);
<a name="l02811"></a>02811       rip-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02812"></a>02812     }
<a name="l02813"></a>02813       jitter = <a class="code" href="ripd_8c.html#adf7591fcda9ffc86ca850c74c268495d">rip_update_jitter</a> (rip-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a>);
<a name="l02814"></a>02814       rip-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a> = 
<a name="l02815"></a>02815     <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripd_8c.html#a5d503898e18cfcf45b7d0cecdae2d016">rip_update</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 
<a name="l02816"></a>02816               sock ? 2 : rip-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a> + jitter);
<a name="l02817"></a>02817       <span class="keywordflow">break</span>;
<a name="l02818"></a>02818     <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>:
<a name="l02819"></a>02819       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>)
<a name="l02820"></a>02820     rip-&gt;<a class="code" href="structrip.html#af9cf461470f2054bbb4bf43607a95660">trigger</a> = 1;
<a name="l02821"></a>02821       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (! rip-&gt;<a class="code" href="structrip.html#a2bf3b2f0ae9c888e4941a929315f86c2">t_triggered_update</a>)
<a name="l02822"></a>02822     rip-&gt;<a class="code" href="structrip.html#a2bf3b2f0ae9c888e4941a929315f86c2">t_triggered_update</a> = 
<a name="l02823"></a>02823       <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripd_8c.html#a44a6353160beda1a7b670c61a67dd818">rip_triggered_update</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l02824"></a>02824       <span class="keywordflow">break</span>;
<a name="l02825"></a>02825     <span class="keywordflow">default</span>:
<a name="l02826"></a>02826       <span class="keywordflow">break</span>;
<a name="l02827"></a>02827     }
<a name="l02828"></a>02828 }
<a name="l02829"></a>02829 
<a name="l02830"></a><a class="code" href="ripd_8c.html#a3d9ad6abdd30a84aae70daba7e9ca130">02830</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (router_rip,
<a name="l02831"></a>02831        router_rip_cmd,
<a name="l02832"></a>02832        <span class="stringliteral">&quot;router rip&quot;</span>,
<a name="l02833"></a>02833        <span class="stringliteral">&quot;Enable a routing process\n&quot;</span>
<a name="l02834"></a>02834        <span class="stringliteral">&quot;Routing Information Protocol (RIP)\n&quot;</span>)
<a name="l02835"></a>02835 {
<a name="l02836"></a>02836   <span class="keywordtype">int</span> ret;
<a name="l02837"></a>02837 
<a name="l02838"></a>02838   <span class="comment">/* If rip is not enabled before. */</span>
<a name="l02839"></a>02839   <span class="keywordflow">if</span> (! rip)
<a name="l02840"></a>02840     {
<a name="l02841"></a>02841       ret = <a class="code" href="ripd_8c.html#a52d6b3652aacbdb7241535cb647d92b1">rip_create</a> ();
<a name="l02842"></a>02842       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l02843"></a>02843     {
<a name="l02844"></a>02844       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Can&#39;t create RIP&quot;</span>);
<a name="l02845"></a>02845       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02846"></a>02846     }
<a name="l02847"></a>02847     }
<a name="l02848"></a>02848   <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9ac72abb8e0411b52a9d91d1a11aeaff">node</a> = <a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>;
<a name="l02849"></a>02849   <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a> = <a class="code" href="ripd_8c.html#a678c9045be94160362e65c0e26e9e38b">rip</a>;
<a name="l02850"></a>02850 
<a name="l02851"></a>02851   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l02852"></a>02852 }
<a name="l02853"></a>02853 
<a name="l02854"></a><a class="code" href="ripd_8c.html#ad07bfcb42dde95e3098a5e219cf2f4a5">02854</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_router_rip,
<a name="l02855"></a>02855        no_router_rip_cmd,
<a name="l02856"></a>02856        <span class="stringliteral">&quot;no router rip&quot;</span>,
<a name="l02857"></a>02857        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02858"></a>02858        <span class="stringliteral">&quot;Enable a routing process\n&quot;</span>
<a name="l02859"></a>02859        <span class="stringliteral">&quot;Routing Information Protocol (RIP)\n&quot;</span>)
<a name="l02860"></a>02860 {
<a name="l02861"></a>02861   <span class="keywordflow">if</span> (rip)
<a name="l02862"></a>02862     <a class="code" href="ripd_8c.html#a3f9f2dc004fbc0fbcf1d61d4f360b692">rip_clean</a> ();
<a name="l02863"></a>02863   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l02864"></a>02864 }
<a name="l02865"></a>02865 
<a name="l02866"></a><a class="code" href="ripd_8c.html#a3601e71493ccbeee5f9e299c17e59ed3">02866</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (rip_version,
<a name="l02867"></a>02867        rip_version_cmd,
<a name="l02868"></a>02868        <span class="stringliteral">&quot;version &lt;1-2&gt;&quot;</span>,
<a name="l02869"></a>02869        <span class="stringliteral">&quot;Set routing protocol version\n&quot;</span>
<a name="l02870"></a>02870        <span class="stringliteral">&quot;version\n&quot;</span>)
<a name="l02871"></a>02871 {
<a name="l02872"></a>02872   <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
<a name="l02873"></a>02873 
<a name="l02874"></a>02874   version = atoi (argv[0]);
<a name="l02875"></a>02875   <span class="keywordflow">if</span> (version != <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a> &amp;&amp; version != <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>)
<a name="l02876"></a>02876     {
<a name="l02877"></a>02877       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;invalid rip version %d%s&quot;</span>, version,
<a name="l02878"></a>02878            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02879"></a>02879       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02880"></a>02880     }
<a name="l02881"></a>02881   rip-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a> = <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
<a name="l02882"></a>02882   rip-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> = <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
<a name="l02883"></a>02883 
<a name="l02884"></a>02884   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l02885"></a>02885 } 
<a name="l02886"></a>02886 
<a name="l02887"></a><a class="code" href="ripd_8c.html#a107a4d5f2821d129666cf6a39685842c">02887</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_rip_version,
<a name="l02888"></a>02888        no_rip_version_cmd,
<a name="l02889"></a>02889        <span class="stringliteral">&quot;no version&quot;</span>,
<a name="l02890"></a>02890        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02891"></a>02891        <span class="stringliteral">&quot;Set routing protocol version\n&quot;</span>)
<a name="l02892"></a>02892 {
<a name="l02893"></a>02893   <span class="comment">/* Set RIP version to the default. */</span>
<a name="l02894"></a>02894   rip-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a> = <a class="code" href="ripd_8h.html#aa01e7530767b1b4f617405047b74cf49">RI_RIP_VERSION_2</a>;
<a name="l02895"></a>02895   rip-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> = <a class="code" href="ripd_8h.html#abdca8506f74f9756b337c4c0c4cd2c43">RI_RIP_VERSION_1_AND_2</a>;
<a name="l02896"></a>02896 
<a name="l02897"></a>02897   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l02898"></a>02898 } 
<a name="l02899"></a>02899 
<a name="l02900"></a><a class="code" href="ripd_8c.html#aae8323fddb4015d3852f98f14103cb8e">02900</a> <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_rip_version,
<a name="l02901"></a>02901        no_rip_version_val_cmd,
<a name="l02902"></a>02902        <span class="stringliteral">&quot;no version &lt;1-2&gt;&quot;</span>,
<a name="l02903"></a>02903        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02904"></a>02904        <span class="stringliteral">&quot;Set routing protocol version\n&quot;</span>
<a name="l02905"></a>02905        <span class="stringliteral">&quot;version\n&quot;</span>)
<a name="l02906"></a>02906 
<a name="l02907"></a>02907 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (rip_route,
<a name="l02908"></a>02908        rip_route_cmd,
<a name="l02909"></a>02909        &quot;route <a class="code" href="random_8c.html#a955f504eccf76b4eb2489c0adab03121">A</a>.<a class="code" href="random_8c.html#a111da81ae5883147168bbb8366377b10">B</a>.C.D/M&quot;,
<a name="l02910"></a>02910        &quot;RIP static route configuration\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l02911"></a>02911        &quot;IP <a class="code" href="structprefix.html">prefix</a> &lt;<a class="code" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>&gt;\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l02912"></a>02912 {
<a name="l02913"></a>02913   <span class="keywordtype">int</span> ret;
<a name="l02914"></a>02914   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l02915"></a>02915   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;
<a name="l02916"></a>02916 
<a name="l02917"></a>02917   ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (argv[0], &amp;p);
<a name="l02918"></a>02918   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l02919"></a>02919     {
<a name="l02920"></a>02920       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Malformed address%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02921"></a>02921       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02922"></a>02922     }
<a name="l02923"></a>02923   <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;p);
<a name="l02924"></a>02924 
<a name="l02925"></a>02925   <span class="comment">/* For router rip configuration. */</span>
<a name="l02926"></a>02926   node = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rip-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l02927"></a>02927 
<a name="l02928"></a>02928   <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l02929"></a>02929     {
<a name="l02930"></a>02930       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;There is already same static route.%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02931"></a>02931       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (node);
<a name="l02932"></a>02932       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02933"></a>02933     }
<a name="l02934"></a>02934 
<a name="l02935"></a>02935   node-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;static&quot;</span>;
<a name="l02936"></a>02936 
<a name="l02937"></a>02937   <a class="code" href="ripd_8c.html#ae2c5c932284eca5a2ee4ca2dfdf248ac">rip_redistribute_add</a> (<a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>, <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>, &amp;p, 0, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0);
<a name="l02938"></a>02938 
<a name="l02939"></a>02939   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l02940"></a>02940 }
<a name="l02941"></a>02941 
<a name="l02942"></a><a class="code" href="ripd_8c.html#ae6d9cb04482c3fbb221680de3098c560">02942</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_rip_route,
<a name="l02943"></a>02943        no_rip_route_cmd,
<a name="l02944"></a>02944        <span class="stringliteral">&quot;no route A.B.C.D/M&quot;</span>,
<a name="l02945"></a>02945        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02946"></a>02946        <span class="stringliteral">&quot;RIP static route configuration\n&quot;</span>
<a name="l02947"></a>02947        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;\n&quot;</span>)
<a name="l02948"></a>02948 {
<a name="l02949"></a>02949   <span class="keywordtype">int</span> ret;
<a name="l02950"></a>02950   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l02951"></a>02951   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;
<a name="l02952"></a>02952 
<a name="l02953"></a>02953   ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (argv[0], &amp;p);
<a name="l02954"></a>02954   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l02955"></a>02955     {
<a name="l02956"></a>02956       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Malformed address%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02957"></a>02957       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02958"></a>02958     }
<a name="l02959"></a>02959   <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;p);
<a name="l02960"></a>02960 
<a name="l02961"></a>02961   <span class="comment">/* For router rip configuration. */</span>
<a name="l02962"></a>02962   node = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (rip-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l02963"></a>02963   <span class="keywordflow">if</span> (! node)
<a name="l02964"></a>02964     {
<a name="l02965"></a>02965       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Can&#39;t find route %s.%s&quot;</span>, argv[0],
<a name="l02966"></a>02966            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02967"></a>02967       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02968"></a>02968     }
<a name="l02969"></a>02969 
<a name="l02970"></a>02970   <a class="code" href="ripd_8c.html#a33825a788df0587a784f9eb7d1d667d7">rip_redistribute_delete</a> (<a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>, <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>, &amp;p, 0);
<a name="l02971"></a>02971   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (node);
<a name="l02972"></a>02972 
<a name="l02973"></a>02973   node-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02974"></a>02974   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (node);
<a name="l02975"></a>02975 
<a name="l02976"></a>02976   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l02977"></a>02977 }
<a name="l02978"></a>02978 
<a name="l02979"></a>02979 <span class="preprocessor">#if 0</span>
<a name="l02980"></a>02980 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02981"></a>02981 rip_update_default_metric (<span class="keywordtype">void</span>)
<a name="l02982"></a>02982 {
<a name="l02983"></a>02983   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>;
<a name="l02984"></a>02984   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l02985"></a>02985 
<a name="l02986"></a>02986   <span class="keywordflow">for</span> (np = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); np; np = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (np))
<a name="l02987"></a>02987     <span class="keywordflow">if</span> ((rinfo = np-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02988"></a>02988       <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> != <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
<a name="l02989"></a>02989         rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = rip-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a>;
<a name="l02990"></a>02990 }
<a name="l02991"></a>02991 <span class="preprocessor">#endif</span>
<a name="l02992"></a>02992 <span class="preprocessor"></span>
<a name="l02993"></a><a class="code" href="ripd_8c.html#ac5c9549737f3886f2b6e7ad9a6996545">02993</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (rip_default_metric,
<a name="l02994"></a>02994        rip_default_metric_cmd,
<a name="l02995"></a>02995        <span class="stringliteral">&quot;default-metric &lt;1-16&gt;&quot;</span>,
<a name="l02996"></a>02996        <span class="stringliteral">&quot;Set a metric of redistribute routes\n&quot;</span>
<a name="l02997"></a>02997        <span class="stringliteral">&quot;Default metric\n&quot;</span>)
<a name="l02998"></a>02998 {
<a name="l02999"></a>02999   <span class="keywordflow">if</span> (rip)
<a name="l03000"></a>03000     {
<a name="l03001"></a>03001       rip-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a> = atoi (argv[0]);
<a name="l03002"></a>03002       <span class="comment">/* rip_update_default_metric (); */</span>
<a name="l03003"></a>03003     }
<a name="l03004"></a>03004   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03005"></a>03005 }
<a name="l03006"></a>03006 
<a name="l03007"></a><a class="code" href="ripd_8c.html#a51e19222dd065b26b6fccd0f2ce838bb">03007</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_rip_default_metric,
<a name="l03008"></a>03008        no_rip_default_metric_cmd,
<a name="l03009"></a>03009        <span class="stringliteral">&quot;no default-metric&quot;</span>,
<a name="l03010"></a>03010        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l03011"></a>03011        <span class="stringliteral">&quot;Set a metric of redistribute routes\n&quot;</span>
<a name="l03012"></a>03012        <span class="stringliteral">&quot;Default metric\n&quot;</span>)
<a name="l03013"></a>03013 {
<a name="l03014"></a>03014   <span class="keywordflow">if</span> (rip)
<a name="l03015"></a>03015     {
<a name="l03016"></a>03016       rip-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a> = <a class="code" href="ripd_8h.html#ae60bba91e95dea222d0722cb7ee4820f">RIP_DEFAULT_METRIC_DEFAULT</a>;
<a name="l03017"></a>03017       <span class="comment">/* rip_update_default_metric (); */</span>
<a name="l03018"></a>03018     }
<a name="l03019"></a>03019   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03020"></a>03020 }
<a name="l03021"></a>03021 
<a name="l03022"></a><a class="code" href="ripd_8c.html#ab29d6918b253b0329d26fd371ba802d8">03022</a> <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_rip_default_metric,
<a name="l03023"></a>03023        no_rip_default_metric_val_cmd,
<a name="l03024"></a>03024        <span class="stringliteral">&quot;no default-metric &lt;1-16&gt;&quot;</span>,
<a name="l03025"></a>03025        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l03026"></a>03026        <span class="stringliteral">&quot;Set a metric of redistribute routes\n&quot;</span>
<a name="l03027"></a>03027        <span class="stringliteral">&quot;Default metric\n&quot;</span>)
<a name="l03028"></a>03028 
<a name="l03029"></a>03029 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (rip_timers,
<a name="l03030"></a>03030        rip_timers_cmd,
<a name="l03031"></a>03031        &quot;timers basic &lt;5-2147483647&gt; &lt;5-2147483647&gt; &lt;5-2147483647&gt;&quot;,
<a name="l03032"></a>03032        &quot;Adjust routing timers\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l03033"></a>03033        &quot;Basic routing protocol update timers\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l03034"></a>03034        &quot;Routing table update <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a> value <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> <a class="code" href="isis__circuit_8c.html#a9330cf63cb76c1de52610f3a5eab39b5">second</a>. Default <a class="code" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 30.\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l03035"></a>03035        &quot;Routing information timeout <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>. Default <a class="code" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 180.\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l03036"></a>03036        &quot;Garbage collection <a class="code" href="random_8c.html#ac71a666826c99a00c3d91f6c1c28dd26">timer</a>. Default <a class="code" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 120.\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l03037"></a>03037 {
<a name="l03038"></a>03038   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> update;
<a name="l03039"></a>03039   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> timeout;
<a name="l03040"></a>03040   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> garbage;
<a name="l03041"></a>03041   <span class="keywordtype">char</span> *endptr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03042"></a>03042   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> RIP_TIMER_MAX = 2147483647;
<a name="l03043"></a>03043   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> RIP_TIMER_MIN = 5;
<a name="l03044"></a>03044 
<a name="l03045"></a>03045   update = strtoul (argv[0], &amp;endptr, 10);
<a name="l03046"></a>03046   <span class="keywordflow">if</span> (update &gt; RIP_TIMER_MAX || update &lt; RIP_TIMER_MIN || *endptr != <span class="charliteral">&#39;\0&#39;</span>)  
<a name="l03047"></a>03047     {
<a name="l03048"></a>03048       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;update timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03049"></a>03049       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03050"></a>03050     }
<a name="l03051"></a>03051   
<a name="l03052"></a>03052   timeout = strtoul (argv[1], &amp;endptr, 10);
<a name="l03053"></a>03053   <span class="keywordflow">if</span> (timeout &gt; RIP_TIMER_MAX || timeout &lt; RIP_TIMER_MIN || *endptr != <span class="charliteral">&#39;\0&#39;</span>) 
<a name="l03054"></a>03054     {
<a name="l03055"></a>03055       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;timeout timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03056"></a>03056       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03057"></a>03057     }
<a name="l03058"></a>03058   
<a name="l03059"></a>03059   garbage = strtoul (argv[2], &amp;endptr, 10);
<a name="l03060"></a>03060   <span class="keywordflow">if</span> (garbage &gt; RIP_TIMER_MAX || garbage &lt; RIP_TIMER_MIN || *endptr != <span class="charliteral">&#39;\0&#39;</span>) 
<a name="l03061"></a>03061     {
<a name="l03062"></a>03062       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;garbage timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03063"></a>03063       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03064"></a>03064     }
<a name="l03065"></a>03065 
<a name="l03066"></a>03066   <span class="comment">/* Set each timer value. */</span>
<a name="l03067"></a>03067   rip-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a> = update;
<a name="l03068"></a>03068   rip-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a> = timeout;
<a name="l03069"></a>03069   rip-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a> = garbage;
<a name="l03070"></a>03070 
<a name="l03071"></a>03071   <span class="comment">/* Reset update timer thread. */</span>
<a name="l03072"></a>03072   <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a5ae803ea0ff858bd14d792ac5b99dd95">RIP_UPDATE_EVENT</a>, 0);
<a name="l03073"></a>03073 
<a name="l03074"></a>03074   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03075"></a>03075 }
<a name="l03076"></a>03076 
<a name="l03077"></a><a class="code" href="ripd_8c.html#a80303a6724c67cfdba124a41a531c4d5">03077</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_rip_timers,
<a name="l03078"></a>03078        no_rip_timers_cmd,
<a name="l03079"></a>03079        <span class="stringliteral">&quot;no timers basic&quot;</span>,
<a name="l03080"></a>03080        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l03081"></a>03081        <span class="stringliteral">&quot;Adjust routing timers\n&quot;</span>
<a name="l03082"></a>03082        <span class="stringliteral">&quot;Basic routing protocol update timers\n&quot;</span>)
<a name="l03083"></a>03083 {
<a name="l03084"></a>03084   <span class="comment">/* Set each timer value to the default. */</span>
<a name="l03085"></a>03085   rip-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a> = <a class="code" href="ripd_8h.html#a4415e31f329179a7a1970783b0ae4816">RIP_UPDATE_TIMER_DEFAULT</a>;
<a name="l03086"></a>03086   rip-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a> = <a class="code" href="ripd_8h.html#a14745370fa257b7afb671b0594538dad">RIP_TIMEOUT_TIMER_DEFAULT</a>;
<a name="l03087"></a>03087   rip-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a> = <a class="code" href="ripd_8h.html#acdff5e9dbc2860fe30cf6ecbc779eb63">RIP_GARBAGE_TIMER_DEFAULT</a>;
<a name="l03088"></a>03088 
<a name="l03089"></a>03089   <span class="comment">/* Reset update timer thread. */</span>
<a name="l03090"></a>03090   <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a5ae803ea0ff858bd14d792ac5b99dd95">RIP_UPDATE_EVENT</a>, 0);
<a name="l03091"></a>03091 
<a name="l03092"></a>03092   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03093"></a>03093 }
<a name="l03094"></a>03094 
<a name="l03095"></a><a class="code" href="ripd_8c.html#a6ecfb46537864e21489f5cfc49b10eaa">03095</a> <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_rip_timers,
<a name="l03096"></a>03096        no_rip_timers_val_cmd,
<a name="l03097"></a>03097        <span class="stringliteral">&quot;no timers basic &lt;0-65535&gt; &lt;0-65535&gt; &lt;0-65535&gt;&quot;</span>,
<a name="l03098"></a>03098        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l03099"></a>03099        <span class="stringliteral">&quot;Adjust routing timers\n&quot;</span>
<a name="l03100"></a>03100        <span class="stringliteral">&quot;Basic routing protocol update timers\n&quot;</span>
<a name="l03101"></a>03101        <span class="stringliteral">&quot;Routing table update timer value in second. Default is 30.\n&quot;</span>
<a name="l03102"></a>03102        <span class="stringliteral">&quot;Routing information timeout timer. Default is 180.\n&quot;</span>
<a name="l03103"></a>03103        <span class="stringliteral">&quot;Garbage collection timer. Default is 120.\n&quot;</span>)
<a name="l03104"></a>03104 
<a name="l03105"></a>03105 
<a name="l03106"></a>03106 <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *rip_distance_table;
<a name="l03107"></a>03107 
<a name="l03108"></a>03108 <span class="keyword">struct </span>rip_distance
<a name="l03109"></a>03109 {
<a name="l03110"></a>03110   <span class="comment">/* Distance value for the IP source prefix. */</span>
<a name="l03111"></a>03111   u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l03112"></a>03112 
<a name="l03113"></a>03113   <span class="comment">/* Name of the access-list to be matched. */</span>
<a name="l03114"></a>03114   <span class="keywordtype">char</span> *<a class="code" href="structaccess__list.html">access_list</a>;
<a name="l03115"></a>03115 };
<a name="l03116"></a>03116 
<a name="l03117"></a>03117 <span class="keyword">static</span> <span class="keyword">struct </span>rip_distance *
<a name="l03118"></a><a class="code" href="ripd_8c.html#ae05c338bbc5bfbb22f15ae977364a5d0">03118</a> <a class="code" href="ripd_8c.html#ae05c338bbc5bfbb22f15ae977364a5d0">rip_distance_new</a> (<span class="keywordtype">void</span>)
<a name="l03119"></a>03119 {
<a name="l03120"></a>03120   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bac531d01a8db74aeca63b3b67343d6167">MTYPE_RIP_DISTANCE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> rip_distance));
<a name="l03121"></a>03121 }
<a name="l03122"></a>03122 
<a name="l03123"></a>03123 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03124"></a><a class="code" href="ripd_8c.html#a9878e9ea0f0f8e734ba56881a78428c4">03124</a> <a class="code" href="ripd_8c.html#a9878e9ea0f0f8e734ba56881a78428c4">rip_distance_free</a> (<span class="keyword">struct</span> rip_distance *rdistance)
<a name="l03125"></a>03125 {
<a name="l03126"></a>03126   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bac531d01a8db74aeca63b3b67343d6167">MTYPE_RIP_DISTANCE</a>, rdistance);
<a name="l03127"></a>03127 }
<a name="l03128"></a>03128 
<a name="l03129"></a>03129 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l03130"></a><a class="code" href="ripd_8c.html#adbe5ab87c0bf797432fdaaaa3e21971a">03130</a> <a class="code" href="ripd_8c.html#adbe5ab87c0bf797432fdaaaa3e21971a">rip_distance_set</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *distance_str, <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str,
<a name="l03131"></a>03131           <span class="keyword">const</span> <span class="keywordtype">char</span> *access_list_str)
<a name="l03132"></a>03132 {
<a name="l03133"></a>03133   <span class="keywordtype">int</span> ret;
<a name="l03134"></a>03134   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l03135"></a>03135   u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l03136"></a>03136   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l03137"></a>03137   <span class="keyword">struct </span>rip_distance *rdistance;
<a name="l03138"></a>03138 
<a name="l03139"></a>03139   ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (ip_str, &amp;p);
<a name="l03140"></a>03140   <span class="keywordflow">if</span> (ret == 0)
<a name="l03141"></a>03141     {
<a name="l03142"></a>03142       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03143"></a>03143       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03144"></a>03144     }
<a name="l03145"></a>03145 
<a name="l03146"></a>03146   distance = atoi (distance_str);
<a name="l03147"></a>03147 
<a name="l03148"></a>03148   <span class="comment">/* Get RIP distance node. */</span>
<a name="l03149"></a>03149   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rip_distance_table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l03150"></a>03150   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l03151"></a>03151     {
<a name="l03152"></a>03152       rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l03153"></a>03153       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l03154"></a>03154     }
<a name="l03155"></a>03155   <span class="keywordflow">else</span>
<a name="l03156"></a>03156     {
<a name="l03157"></a>03157       rdistance = <a class="code" href="ripd_8c.html#ae05c338bbc5bfbb22f15ae977364a5d0">rip_distance_new</a> ();
<a name="l03158"></a>03158       rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rdistance;
<a name="l03159"></a>03159     }
<a name="l03160"></a>03160 
<a name="l03161"></a>03161   <span class="comment">/* Set distance value. */</span>
<a name="l03162"></a>03162   rdistance-&gt;distance = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l03163"></a>03163 
<a name="l03164"></a>03164   <span class="comment">/* Reset access-list configuration. */</span>
<a name="l03165"></a>03165   <span class="keywordflow">if</span> (rdistance-&gt;access_list)
<a name="l03166"></a>03166     {
<a name="l03167"></a>03167       free (rdistance-&gt;access_list);
<a name="l03168"></a>03168       rdistance-&gt;access_list = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03169"></a>03169     }
<a name="l03170"></a>03170   <span class="keywordflow">if</span> (access_list_str)
<a name="l03171"></a>03171     rdistance-&gt;access_list = strdup (access_list_str);
<a name="l03172"></a>03172 
<a name="l03173"></a>03173   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03174"></a>03174 }
<a name="l03175"></a>03175 
<a name="l03176"></a>03176 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l03177"></a><a class="code" href="ripd_8c.html#a49705d140b8c1c239daae1696f024f5a">03177</a> <a class="code" href="ripd_8c.html#a49705d140b8c1c239daae1696f024f5a">rip_distance_unset</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *distance_str,
<a name="l03178"></a>03178             <span class="keyword">const</span> <span class="keywordtype">char</span> *ip_str, <span class="keyword">const</span> <span class="keywordtype">char</span> *access_list_str)
<a name="l03179"></a>03179 {
<a name="l03180"></a>03180   <span class="keywordtype">int</span> ret;
<a name="l03181"></a>03181   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l03182"></a>03182   u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
<a name="l03183"></a>03183   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l03184"></a>03184   <span class="keyword">struct </span>rip_distance *rdistance;
<a name="l03185"></a>03185 
<a name="l03186"></a>03186   ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (ip_str, &amp;p);
<a name="l03187"></a>03187   <span class="keywordflow">if</span> (ret == 0)
<a name="l03188"></a>03188     {
<a name="l03189"></a>03189       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03190"></a>03190       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03191"></a>03191     }
<a name="l03192"></a>03192 
<a name="l03193"></a>03193   distance = atoi (distance_str);
<a name="l03194"></a>03194 
<a name="l03195"></a>03195   rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (rip_distance_table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;p);
<a name="l03196"></a>03196   <span class="keywordflow">if</span> (! rn)
<a name="l03197"></a>03197     {
<a name="l03198"></a>03198       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find specified prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03199"></a>03199       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l03200"></a>03200     }
<a name="l03201"></a>03201 
<a name="l03202"></a>03202   rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l03203"></a>03203 
<a name="l03204"></a>03204   <span class="keywordflow">if</span> (rdistance-&gt;access_list)
<a name="l03205"></a>03205     free (rdistance-&gt;access_list);
<a name="l03206"></a>03206   <a class="code" href="ripd_8c.html#a9878e9ea0f0f8e734ba56881a78428c4">rip_distance_free</a> (rdistance);
<a name="l03207"></a>03207 
<a name="l03208"></a>03208   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03209"></a>03209   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l03210"></a>03210   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l03211"></a>03211 
<a name="l03212"></a>03212   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03213"></a>03213 }
<a name="l03214"></a>03214 
<a name="l03215"></a>03215 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03216"></a><a class="code" href="ripd_8c.html#a3d2210c2851480c4f92c76242b6bdc7f">03216</a> <a class="code" href="ripd_8c.html#a3d2210c2851480c4f92c76242b6bdc7f">rip_distance_reset</a> (<span class="keywordtype">void</span>)
<a name="l03217"></a>03217 {
<a name="l03218"></a>03218   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l03219"></a>03219   <span class="keyword">struct </span>rip_distance *rdistance;
<a name="l03220"></a>03220 
<a name="l03221"></a>03221   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip_distance_table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l03222"></a>03222     <span class="keywordflow">if</span> ((rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03223"></a>03223       {
<a name="l03224"></a>03224     <span class="keywordflow">if</span> (rdistance-&gt;access_list)
<a name="l03225"></a>03225       free (rdistance-&gt;access_list);
<a name="l03226"></a>03226     <a class="code" href="ripd_8c.html#a9878e9ea0f0f8e734ba56881a78428c4">rip_distance_free</a> (rdistance);
<a name="l03227"></a>03227     rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03228"></a>03228     <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l03229"></a>03229       }
<a name="l03230"></a>03230 }
<a name="l03231"></a>03231 
<a name="l03232"></a>03232 <span class="comment">/* Apply RIP information to distance method. */</span>
<a name="l03233"></a>03233 u_char
<a name="l03234"></a><a class="code" href="ripd_8h.html#a28d6e65ff75045a633e457f6ae156c5c">03234</a> <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (<span class="keyword">struct</span> <a class="code" href="structrip__info.html">rip_info</a> *rinfo)
<a name="l03235"></a>03235 {
<a name="l03236"></a>03236   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l03237"></a>03237   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l03238"></a>03238   <span class="keyword">struct </span>rip_distance *rdistance;
<a name="l03239"></a>03239   <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
<a name="l03240"></a>03240 
<a name="l03241"></a>03241   <span class="keywordflow">if</span> (! rip)
<a name="l03242"></a>03242     <span class="keywordflow">return</span> 0;
<a name="l03243"></a>03243 
<a name="l03244"></a>03244   memset (&amp;p, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
<a name="l03245"></a>03245   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l03246"></a>03246   p.prefix = rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>;
<a name="l03247"></a>03247   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l03248"></a>03248 
<a name="l03249"></a>03249   <span class="comment">/* Check source address. */</span>
<a name="l03250"></a>03250   rn = <a class="code" href="table_8c.html#a948f4335026cd8417c7424e85156ae55">route_node_match</a> (rip_distance_table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l03251"></a>03251   <span class="keywordflow">if</span> (rn)
<a name="l03252"></a>03252     {
<a name="l03253"></a>03253       rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l03254"></a>03254       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l03255"></a>03255 
<a name="l03256"></a>03256       <span class="keywordflow">if</span> (rdistance-&gt;access_list)
<a name="l03257"></a>03257     {
<a name="l03258"></a>03258       alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, rdistance-&gt;access_list);
<a name="l03259"></a>03259       <span class="keywordflow">if</span> (alist == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03260"></a>03260         <span class="keywordflow">return</span> 0;
<a name="l03261"></a>03261       <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (alist, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
<a name="l03262"></a>03262         <span class="keywordflow">return</span> 0;
<a name="l03263"></a>03263 
<a name="l03264"></a>03264       <span class="keywordflow">return</span> rdistance-&gt;distance;
<a name="l03265"></a>03265     }
<a name="l03266"></a>03266       <span class="keywordflow">else</span>
<a name="l03267"></a>03267     <span class="keywordflow">return</span> rdistance-&gt;distance;
<a name="l03268"></a>03268     }
<a name="l03269"></a>03269 
<a name="l03270"></a>03270   <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a>)
<a name="l03271"></a>03271     <span class="keywordflow">return</span> rip-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a>;
<a name="l03272"></a>03272 
<a name="l03273"></a>03273   <span class="keywordflow">return</span> 0;
<a name="l03274"></a>03274 }
<a name="l03275"></a>03275 
<a name="l03276"></a>03276 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03277"></a><a class="code" href="ripd_8c.html#ad2f5853e20eaeccbca634c08d365a2e4">03277</a> <a class="code" href="ripd_8c.html#ad2f5853e20eaeccbca634c08d365a2e4">rip_distance_show</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l03278"></a>03278 {
<a name="l03279"></a>03279   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l03280"></a>03280   <span class="keyword">struct </span>rip_distance *rdistance;
<a name="l03281"></a>03281   <span class="keywordtype">int</span> header = 1;
<a name="l03282"></a>03282   <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l03283"></a>03283   
<a name="l03284"></a>03284   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Distance: (default is %d)%s&quot;</span>,
<a name="l03285"></a>03285        rip-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a> ? rip-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a> :<a class="code" href="zebra_8h.html#a59b508b9cafa2524d610279687c68ed3">ZEBRA_RIP_DISTANCE_DEFAULT</a>,
<a name="l03286"></a>03286        <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03287"></a>03287 
<a name="l03288"></a>03288   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip_distance_table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l03289"></a>03289     <span class="keywordflow">if</span> ((rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03290"></a>03290       {
<a name="l03291"></a>03291     <span class="keywordflow">if</span> (header)
<a name="l03292"></a>03292       {
<a name="l03293"></a>03293         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;    Address           Distance  List%s&quot;</span>,
<a name="l03294"></a>03294              <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03295"></a>03295         header = 0;
<a name="l03296"></a>03296       }
<a name="l03297"></a>03297     sprintf (buf, <span class="stringliteral">&quot;%s/%d&quot;</span>, inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l03298"></a>03298     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;    %-20s  %4d  %s%s&quot;</span>,
<a name="l03299"></a>03299          buf, rdistance-&gt;distance,
<a name="l03300"></a>03300          rdistance-&gt;access_list ? rdistance-&gt;access_list : <span class="stringliteral">&quot;&quot;</span>,
<a name="l03301"></a>03301          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03302"></a>03302       }
<a name="l03303"></a>03303 }
<a name="l03304"></a>03304 
<a name="l03305"></a><a class="code" href="ripd_8c.html#ab8fc60a5fe8df1664e6fc77898293876">03305</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (rip_distance,
<a name="l03306"></a>03306        rip_distance_cmd,
<a name="l03307"></a>03307        <span class="stringliteral">&quot;distance &lt;1-255&gt;&quot;</span>,
<a name="l03308"></a>03308        <span class="stringliteral">&quot;Administrative distance\n&quot;</span>
<a name="l03309"></a>03309        <span class="stringliteral">&quot;Distance value\n&quot;</span>)
<a name="l03310"></a>03310 {
<a name="l03311"></a>03311   rip-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a> = atoi (argv[0]);
<a name="l03312"></a>03312   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03313"></a>03313 }
<a name="l03314"></a>03314 
<a name="l03315"></a><a class="code" href="ripd_8c.html#a3d62d8d2f283401d2889a64d597b7157">03315</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_rip_distance,
<a name="l03316"></a>03316        no_rip_distance_cmd,
<a name="l03317"></a>03317        <span class="stringliteral">&quot;no distance &lt;1-255&gt;&quot;</span>,
<a name="l03318"></a>03318        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l03319"></a>03319        <span class="stringliteral">&quot;Administrative distance\n&quot;</span>
<a name="l03320"></a>03320        <span class="stringliteral">&quot;Distance value\n&quot;</span>)
<a name="l03321"></a>03321 {
<a name="l03322"></a>03322   rip-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a> = 0;
<a name="l03323"></a>03323   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03324"></a>03324 }
<a name="l03325"></a>03325 
<a name="l03326"></a><a class="code" href="ripd_8c.html#a1e07b5c2ee7ccb28e2884241fc6be128">03326</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (rip_distance_source,
<a name="l03327"></a>03327        rip_distance_source_cmd,
<a name="l03328"></a>03328        <span class="stringliteral">&quot;distance &lt;1-255&gt; A.B.C.D/M&quot;</span>,
<a name="l03329"></a>03329        <span class="stringliteral">&quot;Administrative distance\n&quot;</span>
<a name="l03330"></a>03330        <span class="stringliteral">&quot;Distance value\n&quot;</span>
<a name="l03331"></a>03331        <span class="stringliteral">&quot;IP source prefix\n&quot;</span>)
<a name="l03332"></a>03332 {
<a name="l03333"></a>03333   <a class="code" href="ripd_8c.html#adbe5ab87c0bf797432fdaaaa3e21971a">rip_distance_set</a> (<a class="code" href="structvty.html">vty</a>, argv[0], argv[1], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l03334"></a>03334   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03335"></a>03335 }
<a name="l03336"></a>03336 
<a name="l03337"></a><a class="code" href="ripd_8c.html#a23849c29875a7294969fc718fc3f9fbf">03337</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_rip_distance_source,
<a name="l03338"></a>03338        no_rip_distance_source_cmd,
<a name="l03339"></a>03339        <span class="stringliteral">&quot;no distance &lt;1-255&gt; A.B.C.D/M&quot;</span>,
<a name="l03340"></a>03340        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l03341"></a>03341        <span class="stringliteral">&quot;Administrative distance\n&quot;</span>
<a name="l03342"></a>03342        <span class="stringliteral">&quot;Distance value\n&quot;</span>
<a name="l03343"></a>03343        <span class="stringliteral">&quot;IP source prefix\n&quot;</span>)
<a name="l03344"></a>03344 {
<a name="l03345"></a>03345   <a class="code" href="ripd_8c.html#a49705d140b8c1c239daae1696f024f5a">rip_distance_unset</a> (<a class="code" href="structvty.html">vty</a>, argv[0], argv[1], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l03346"></a>03346   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03347"></a>03347 }
<a name="l03348"></a>03348 
<a name="l03349"></a><a class="code" href="ripd_8c.html#af102677a0e5e62ccd8256acdda5554a7">03349</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (rip_distance_source_access_list,
<a name="l03350"></a>03350        rip_distance_source_access_list_cmd,
<a name="l03351"></a>03351        <span class="stringliteral">&quot;distance &lt;1-255&gt; A.B.C.D/M WORD&quot;</span>,
<a name="l03352"></a>03352        <span class="stringliteral">&quot;Administrative distance\n&quot;</span>
<a name="l03353"></a>03353        <span class="stringliteral">&quot;Distance value\n&quot;</span>
<a name="l03354"></a>03354        <span class="stringliteral">&quot;IP source prefix\n&quot;</span>
<a name="l03355"></a>03355        <span class="stringliteral">&quot;Access list name\n&quot;</span>)
<a name="l03356"></a>03356 {
<a name="l03357"></a>03357   <a class="code" href="ripd_8c.html#adbe5ab87c0bf797432fdaaaa3e21971a">rip_distance_set</a> (<a class="code" href="structvty.html">vty</a>, argv[0], argv[1], argv[2]);
<a name="l03358"></a>03358   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03359"></a>03359 }
<a name="l03360"></a>03360 
<a name="l03361"></a><a class="code" href="ripd_8c.html#a07b00b6664dac5ec13492d8299483962">03361</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_rip_distance_source_access_list,
<a name="l03362"></a>03362        no_rip_distance_source_access_list_cmd,
<a name="l03363"></a>03363        <span class="stringliteral">&quot;no distance &lt;1-255&gt; A.B.C.D/M WORD&quot;</span>,
<a name="l03364"></a>03364        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l03365"></a>03365        <span class="stringliteral">&quot;Administrative distance\n&quot;</span>
<a name="l03366"></a>03366        <span class="stringliteral">&quot;Distance value\n&quot;</span>
<a name="l03367"></a>03367        <span class="stringliteral">&quot;IP source prefix\n&quot;</span>
<a name="l03368"></a>03368        <span class="stringliteral">&quot;Access list name\n&quot;</span>)
<a name="l03369"></a>03369 {
<a name="l03370"></a>03370   <a class="code" href="ripd_8c.html#a49705d140b8c1c239daae1696f024f5a">rip_distance_unset</a> (<a class="code" href="structvty.html">vty</a>, argv[0], argv[1], argv[2]);
<a name="l03371"></a>03371   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03372"></a>03372 }
<a name="l03373"></a>03373 
<a name="l03374"></a>03374 <span class="comment">/* Print out routes update time. */</span>
<a name="l03375"></a>03375 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03376"></a><a class="code" href="ripd_8c.html#a2d9126dfba66148cf4b72413a9c3c212">03376</a> <a class="code" href="ripd_8c.html#a2d9126dfba66148cf4b72413a9c3c212">rip_vty_out_uptime</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structrip__info.html">rip_info</a> *rinfo)
<a name="l03377"></a>03377 {
<a name="l03378"></a>03378   time_t clock;
<a name="l03379"></a>03379   <span class="keyword">struct </span>tm *tm;
<a name="l03380"></a>03380 <span class="preprocessor">#define TIME_BUF 25</span>
<a name="l03381"></a>03381 <span class="preprocessor"></span>  <span class="keywordtype">char</span> timebuf [<a class="code" href="ripd_8c.html#a4a41ebcbcfbdc4cf71ac89967ae81aa8">TIME_BUF</a>];
<a name="l03382"></a>03382   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;
<a name="l03383"></a>03383 
<a name="l03384"></a>03384   <span class="keywordflow">if</span> ((thread = rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03385"></a>03385     {
<a name="l03386"></a>03386       clock = <a class="code" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a> (thread);
<a name="l03387"></a>03387       tm = gmtime (&amp;clock);
<a name="l03388"></a>03388       strftime (timebuf, <a class="code" href="ripd_8c.html#a4a41ebcbcfbdc4cf71ac89967ae81aa8">TIME_BUF</a>, <span class="stringliteral">&quot;%M:%S&quot;</span>, tm);
<a name="l03389"></a>03389       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%5s&quot;</span>, timebuf);
<a name="l03390"></a>03390     }
<a name="l03391"></a>03391   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((thread = rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03392"></a>03392     {
<a name="l03393"></a>03393       clock = <a class="code" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a> (thread);
<a name="l03394"></a>03394       tm = gmtime (&amp;clock);
<a name="l03395"></a>03395       strftime (timebuf, <a class="code" href="ripd_8c.html#a4a41ebcbcfbdc4cf71ac89967ae81aa8">TIME_BUF</a>, <span class="stringliteral">&quot;%M:%S&quot;</span>, tm);
<a name="l03396"></a>03396       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%5s&quot;</span>, timebuf);
<a name="l03397"></a>03397     }
<a name="l03398"></a>03398 }
<a name="l03399"></a>03399 
<a name="l03400"></a>03400 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l03401"></a><a class="code" href="ripd_8c.html#ae664ed09eb4aebee1134eb4debeabc5e">03401</a> <a class="code" href="ripd_8c.html#ae664ed09eb4aebee1134eb4debeabc5e">rip_route_type_print</a> (<span class="keywordtype">int</span> sub_type)
<a name="l03402"></a>03402 {
<a name="l03403"></a>03403   <span class="keywordflow">switch</span> (sub_type)
<a name="l03404"></a>03404     {
<a name="l03405"></a>03405       <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>:
<a name="l03406"></a>03406     <span class="keywordflow">return</span> <span class="stringliteral">&quot;n&quot;</span>;
<a name="l03407"></a>03407       <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>:
<a name="l03408"></a>03408     <span class="keywordflow">return</span> <span class="stringliteral">&quot;s&quot;</span>;
<a name="l03409"></a>03409       <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#aebaf1d3e550cd8b70cf9ed9f435e72af">RIP_ROUTE_DEFAULT</a>:
<a name="l03410"></a>03410     <span class="keywordflow">return</span> <span class="stringliteral">&quot;d&quot;</span>;
<a name="l03411"></a>03411       <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a43118d7389e3d91f271c7390469f1d91">RIP_ROUTE_REDISTRIBUTE</a>:
<a name="l03412"></a>03412     <span class="keywordflow">return</span> <span class="stringliteral">&quot;r&quot;</span>;
<a name="l03413"></a>03413       <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a9dca6cb74820d2f885ed8c71bfd403b9">RIP_ROUTE_INTERFACE</a>:
<a name="l03414"></a>03414     <span class="keywordflow">return</span> <span class="stringliteral">&quot;i&quot;</span>;
<a name="l03415"></a>03415       <span class="keywordflow">default</span>:
<a name="l03416"></a>03416     <span class="keywordflow">return</span> <span class="stringliteral">&quot;?&quot;</span>;
<a name="l03417"></a>03417     }
<a name="l03418"></a>03418 }
<a name="l03419"></a>03419 
<a name="l03420"></a><a class="code" href="ripd_8c.html#ae52d54aa19950fe4e7e6288a2de0b776">03420</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_rip,
<a name="l03421"></a>03421        show_ip_rip_cmd,
<a name="l03422"></a>03422        <span class="stringliteral">&quot;show ip rip&quot;</span>,
<a name="l03423"></a>03423        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l03424"></a>03424        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l03425"></a>03425        <span class="stringliteral">&quot;Show RIP routes\n&quot;</span>)
<a name="l03426"></a>03426 {
<a name="l03427"></a>03427   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>;
<a name="l03428"></a>03428   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l03429"></a>03429 
<a name="l03430"></a>03430   <span class="keywordflow">if</span> (! rip)
<a name="l03431"></a>03431     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03432"></a>03432 
<a name="l03433"></a>03433   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Codes: R - RIP, C - connected, S - Static, O - OSPF, B - BGP%s&quot;</span>
<a name="l03434"></a>03434        <span class="stringliteral">&quot;Sub-codes:%s&quot;</span>
<a name="l03435"></a>03435            <span class="stringliteral">&quot;      (n) - normal, (s) - static, (d) - default, (r) - redistribute,%s&quot;</span>
<a name="l03436"></a>03436        <span class="stringliteral">&quot;      (i) - interface%s%s&quot;</span>
<a name="l03437"></a>03437        <span class="stringliteral">&quot;     Network            Next Hop         Metric From            Tag Time%s&quot;</span>,
<a name="l03438"></a>03438        <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>,  <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03439"></a>03439   
<a name="l03440"></a>03440   <span class="keywordflow">for</span> (np = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); np; np = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (np))
<a name="l03441"></a>03441     <span class="keywordflow">if</span> ((rinfo = np-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03442"></a>03442       {
<a name="l03443"></a>03443     <span class="keywordtype">int</span> len;
<a name="l03444"></a>03444 
<a name="l03445"></a>03445     len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%c(%s) %s/%d&quot;</span>,
<a name="l03446"></a>03446                <span class="comment">/* np-&gt;lock, For debugging. */</span>
<a name="l03447"></a>03447                <a class="code" href="log_8c.html#a615f2a96489398a58c693eb46d3aa184">zebra_route_char</a>(rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>),
<a name="l03448"></a>03448                <a class="code" href="ripd_8c.html#ae664ed09eb4aebee1134eb4debeabc5e">rip_route_type_print</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a>),
<a name="l03449"></a>03449                inet_ntoa (np-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), np-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l03450"></a>03450     
<a name="l03451"></a>03451     len = 24 - len;
<a name="l03452"></a>03452 
<a name="l03453"></a>03453     <span class="keywordflow">if</span> (len &gt; 0)
<a name="l03454"></a>03454       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);
<a name="l03455"></a>03455 
<a name="l03456"></a>03456         <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>.s_addr) 
<a name="l03457"></a>03457       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%-20s %2d &quot;</span>, inet_ntoa (rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>),
<a name="l03458"></a>03458            rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
<a name="l03459"></a>03459         <span class="keywordflow">else</span>
<a name="l03460"></a>03460       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;0.0.0.0              %2d &quot;</span>, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
<a name="l03461"></a>03461 
<a name="l03462"></a>03462     <span class="comment">/* Route which exist in kernel routing table. */</span>
<a name="l03463"></a>03463     <span class="keywordflow">if</span> ((rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>) &amp;&amp; 
<a name="l03464"></a>03464         (rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>))
<a name="l03465"></a>03465       {
<a name="l03466"></a>03466         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%-15s &quot;</span>, inet_ntoa (rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>));
<a name="l03467"></a>03467         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%3d &quot;</span>, rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a>);
<a name="l03468"></a>03468         <a class="code" href="ripd_8c.html#a2d9126dfba66148cf4b72413a9c3c212">rip_vty_out_uptime</a> (<a class="code" href="structvty.html">vty</a>, rinfo);
<a name="l03469"></a>03469       }
<a name="l03470"></a>03470     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> == <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
<a name="l03471"></a>03471       {
<a name="l03472"></a>03472         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;self            &quot;</span>);
<a name="l03473"></a>03473         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%3d &quot;</span>, rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a>);
<a name="l03474"></a>03474         <a class="code" href="ripd_8c.html#a2d9126dfba66148cf4b72413a9c3c212">rip_vty_out_uptime</a> (<a class="code" href="structvty.html">vty</a>, rinfo);
<a name="l03475"></a>03475       }
<a name="l03476"></a>03476     <span class="keywordflow">else</span>
<a name="l03477"></a>03477       {
<a name="l03478"></a>03478         <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#a6c396a30341482a9f1d3e242293ec516">external_metric</a>)
<a name="l03479"></a>03479           {
<a name="l03480"></a>03480             len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;self (%s:%d)&quot;</span>, 
<a name="l03481"></a>03481                    <a class="code" href="log_8c.html#ae87aa85b5b05b120d376956ce5d13444">zebra_route_string</a>(rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>),
<a name="l03482"></a>03482                            rinfo-&gt;<a class="code" href="structrip__info.html#a6c396a30341482a9f1d3e242293ec516">external_metric</a>);
<a name="l03483"></a>03483             len = 16 - len;
<a name="l03484"></a>03484             <span class="keywordflow">if</span> (len &gt; 0)
<a name="l03485"></a>03485               <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);
<a name="l03486"></a>03486           }
<a name="l03487"></a>03487         <span class="keywordflow">else</span>
<a name="l03488"></a>03488           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;self            &quot;</span>);
<a name="l03489"></a>03489         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%3d&quot;</span>, rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a>);
<a name="l03490"></a>03490       }
<a name="l03491"></a>03491 
<a name="l03492"></a>03492     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03493"></a>03493       }
<a name="l03494"></a>03494   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03495"></a>03495 }
<a name="l03496"></a>03496 
<a name="l03497"></a>03497 <span class="comment">/* Vincent: formerly, it was show_ip_protocols_rip: &quot;show ip protocols&quot; */</span>
<a name="l03498"></a><a class="code" href="ripd_8c.html#a737868c3af96812582cb95f15afc9b4b">03498</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_rip_status,
<a name="l03499"></a>03499        show_ip_rip_status_cmd,
<a name="l03500"></a>03500        <span class="stringliteral">&quot;show ip rip status&quot;</span>,
<a name="l03501"></a>03501        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l03502"></a>03502        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l03503"></a>03503        <span class="stringliteral">&quot;Show RIP routes\n&quot;</span>
<a name="l03504"></a>03504        <span class="stringliteral">&quot;IP routing protocol process parameters and statistics\n&quot;</span>)
<a name="l03505"></a>03505 {
<a name="l03506"></a>03506   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l03507"></a>03507   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l03508"></a>03508   <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
<a name="l03509"></a>03509   <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> ri_version_msg[];
<a name="l03510"></a>03510   <span class="keyword">const</span> <span class="keywordtype">char</span> *send_version;
<a name="l03511"></a>03511   <span class="keyword">const</span> <span class="keywordtype">char</span> *receive_version;
<a name="l03512"></a>03512 
<a name="l03513"></a>03513   <span class="keywordflow">if</span> (! rip)
<a name="l03514"></a>03514     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03515"></a>03515 
<a name="l03516"></a>03516   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Routing Protocol is \&quot;rip\&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03517"></a>03517   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Sending updates every %ld seconds with +/-50%%,&quot;</span>,
<a name="l03518"></a>03518        rip-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a>);
<a name="l03519"></a>03519   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; next due in %lu seconds%s&quot;</span>, 
<a name="l03520"></a>03520        <a class="code" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a>(rip-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a>),
<a name="l03521"></a>03521        <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03522"></a>03522   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Timeout after %ld seconds,&quot;</span>, rip-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a>);
<a name="l03523"></a>03523   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; garbage collect after %ld seconds%s&quot;</span>, rip-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>,
<a name="l03524"></a>03524        <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03525"></a>03525 
<a name="l03526"></a>03526   <span class="comment">/* Filtering status show. */</span>
<a name="l03527"></a>03527   <a class="code" href="distribute_8h.html#a42498c1a381dd986ae3cc5bb7a6a03f0">config_show_distribute</a> (<a class="code" href="structvty.html">vty</a>);
<a name="l03528"></a>03528          
<a name="l03529"></a>03529   <span class="comment">/* Default metric information. */</span>
<a name="l03530"></a>03530   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Default redistribution metric is %d%s&quot;</span>,
<a name="l03531"></a>03531        rip-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03532"></a>03532 
<a name="l03533"></a>03533   <span class="comment">/* Redistribute information. */</span>
<a name="l03534"></a>03534   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Redistributing:&quot;</span>);
<a name="l03535"></a>03535   <a class="code" href="rip__zebra_8c.html#a070e5ae1fa0ffe98107bc343cc34479b">config_write_rip_redistribute</a> (<a class="code" href="structvty.html">vty</a>, 0);
<a name="l03536"></a>03536   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03537"></a>03537 
<a name="l03538"></a>03538   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Default version control: send version %s,&quot;</span>,
<a name="l03539"></a>03539        <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a>(ri_version_msg,rip-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a>));
<a name="l03540"></a>03540   <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> == <a class="code" href="ripd_8h.html#abdca8506f74f9756b337c4c0c4cd2c43">RI_RIP_VERSION_1_AND_2</a>)
<a name="l03541"></a>03541     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; receive any version %s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03542"></a>03542   <span class="keywordflow">else</span>
<a name="l03543"></a>03543     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; receive version %s %s&quot;</span>,
<a name="l03544"></a>03544          <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a>(ri_version_msg,rip-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a>), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03545"></a>03545 
<a name="l03546"></a>03546   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    Interface        Send  Recv   Key-chain%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03547"></a>03547 
<a name="l03548"></a>03548   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
<a name="l03549"></a>03549     {
<a name="l03550"></a>03550       ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l03551"></a>03551 
<a name="l03552"></a>03552       <span class="keywordflow">if</span> (!ri-&gt;<a class="code" href="structrip__interface.html#a29f1e7ea828dc3950b72ea63bc7068a4">running</a>)
<a name="l03553"></a>03553     <span class="keywordflow">continue</span>;
<a name="l03554"></a>03554 
<a name="l03555"></a>03555       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#ae026532d0f89cd29ad5185fb0421ad1e">enable_network</a> || ri-&gt;<a class="code" href="structrip__interface.html#a20e65aa5132738f8d31704e03e01289c">enable_interface</a>)
<a name="l03556"></a>03556     {
<a name="l03557"></a>03557       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a2b4602c504a60bac12c372581abd1159">ri_send</a> == <a class="code" href="ripd_8h.html#acaf07e083e328ebe0df4c436655a4d66">RI_RIP_UNSPEC</a>)
<a name="l03558"></a>03558         send_version = <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (ri_version_msg, rip-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a>);
<a name="l03559"></a>03559       <span class="keywordflow">else</span>
<a name="l03560"></a>03560         send_version = <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (ri_version_msg, ri-&gt;<a class="code" href="structrip__interface.html#a2b4602c504a60bac12c372581abd1159">ri_send</a>);
<a name="l03561"></a>03561 
<a name="l03562"></a>03562       <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0e1c83b8a992c8dd3d861dc9a90fc105">ri_receive</a> == <a class="code" href="ripd_8h.html#acaf07e083e328ebe0df4c436655a4d66">RI_RIP_UNSPEC</a>)
<a name="l03563"></a>03563         receive_version = <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (ri_version_msg, rip-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a>);
<a name="l03564"></a>03564       <span class="keywordflow">else</span>
<a name="l03565"></a>03565         receive_version = <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (ri_version_msg, ri-&gt;<a class="code" href="structrip__interface.html#a0e1c83b8a992c8dd3d861dc9a90fc105">ri_receive</a>);
<a name="l03566"></a>03566     
<a name="l03567"></a>03567       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    %-17s%-3s   %-3s    %s%s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
<a name="l03568"></a>03568            send_version,
<a name="l03569"></a>03569            receive_version,
<a name="l03570"></a>03570            ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a> ? ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a> : <span class="stringliteral">&quot;&quot;</span>,
<a name="l03571"></a>03571            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03572"></a>03572     }
<a name="l03573"></a>03573     }
<a name="l03574"></a>03574 
<a name="l03575"></a>03575   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Routing for Networks:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03576"></a>03576   <a class="code" href="rip__interface_8c.html#abf5300e9e13f397e283a6321ae015ab9">config_write_rip_network</a> (<a class="code" href="structvty.html">vty</a>, 0);  
<a name="l03577"></a>03577 
<a name="l03578"></a>03578   {
<a name="l03579"></a>03579     <span class="keywordtype">int</span> found_passive = 0;
<a name="l03580"></a>03580     <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
<a name="l03581"></a>03581       {
<a name="l03582"></a>03582     ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l03583"></a>03583 
<a name="l03584"></a>03584     <span class="keywordflow">if</span> ((ri-&gt;<a class="code" href="structrip__interface.html#ae026532d0f89cd29ad5185fb0421ad1e">enable_network</a> || ri-&gt;<a class="code" href="structrip__interface.html#a20e65aa5132738f8d31704e03e01289c">enable_interface</a>) &amp;&amp; ri-&gt;<a class="code" href="structrip__interface.html#aa624d6a89ab2dcd614cc0fb89e08febf">passive</a>)
<a name="l03585"></a>03585       {
<a name="l03586"></a>03586         <span class="keywordflow">if</span> (!found_passive)
<a name="l03587"></a>03587           {
<a name="l03588"></a>03588         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Passive Interface(s):%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03589"></a>03589         found_passive = 1;
<a name="l03590"></a>03590           }
<a name="l03591"></a>03591         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    %s%s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03592"></a>03592       }
<a name="l03593"></a>03593       }
<a name="l03594"></a>03594   }
<a name="l03595"></a>03595 
<a name="l03596"></a>03596   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Routing Information Sources:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03597"></a>03597   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    Gateway          BadPackets BadRoutes  Distance Last Update%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03598"></a>03598   <a class="code" href="rip__peer_8c.html#a02aaa1aaecb272b7e12d9bf99b7e690e">rip_peer_display</a> (<a class="code" href="structvty.html">vty</a>);
<a name="l03599"></a>03599 
<a name="l03600"></a>03600   <a class="code" href="ripd_8c.html#ad2f5853e20eaeccbca634c08d365a2e4">rip_distance_show</a> (<a class="code" href="structvty.html">vty</a>);
<a name="l03601"></a>03601 
<a name="l03602"></a>03602   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l03603"></a>03603 }
<a name="l03604"></a>03604 
<a name="l03605"></a>03605 <span class="comment">/* RIP configuration write function. */</span>
<a name="l03606"></a>03606 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l03607"></a><a class="code" href="ripd_8c.html#a507082a56f1939c701904e4709688ada">03607</a> <a class="code" href="ripd_8c.html#a507082a56f1939c701904e4709688ada">config_write_rip</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l03608"></a>03608 {
<a name="l03609"></a>03609   <span class="keywordtype">int</span> write = 0;
<a name="l03610"></a>03610   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l03611"></a>03611   <span class="keyword">struct </span>rip_distance *rdistance;
<a name="l03612"></a>03612 
<a name="l03613"></a>03613   <span class="keywordflow">if</span> (rip)
<a name="l03614"></a>03614     {
<a name="l03615"></a>03615       <span class="comment">/* Router RIP statement. */</span>
<a name="l03616"></a>03616       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;router rip%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03617"></a>03617       write++;
<a name="l03618"></a>03618   
<a name="l03619"></a>03619       <span class="comment">/* RIP version statement.  Default is RIP version 2. */</span>
<a name="l03620"></a>03620       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a> != <a class="code" href="ripd_8h.html#aa01e7530767b1b4f617405047b74cf49">RI_RIP_VERSION_2</a>
<a name="l03621"></a>03621       || rip-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> != <a class="code" href="ripd_8h.html#abdca8506f74f9756b337c4c0c4cd2c43">RI_RIP_VERSION_1_AND_2</a>)
<a name="l03622"></a>03622     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; version %d%s&quot;</span>, rip-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a>,
<a name="l03623"></a>03623          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03624"></a>03624  
<a name="l03625"></a>03625       <span class="comment">/* RIP timer configuration. */</span>
<a name="l03626"></a>03626       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a> != <a class="code" href="ripd_8h.html#a4415e31f329179a7a1970783b0ae4816">RIP_UPDATE_TIMER_DEFAULT</a> 
<a name="l03627"></a>03627       || rip-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a> != <a class="code" href="ripd_8h.html#a14745370fa257b7afb671b0594538dad">RIP_TIMEOUT_TIMER_DEFAULT</a> 
<a name="l03628"></a>03628       || rip-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a> != <a class="code" href="ripd_8h.html#acdff5e9dbc2860fe30cf6ecbc779eb63">RIP_GARBAGE_TIMER_DEFAULT</a>)
<a name="l03629"></a>03629     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; timers basic %lu %lu %lu%s&quot;</span>,
<a name="l03630"></a>03630          rip-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a>,
<a name="l03631"></a>03631          rip-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a>,
<a name="l03632"></a>03632          rip-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>,
<a name="l03633"></a>03633          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03634"></a>03634 
<a name="l03635"></a>03635       <span class="comment">/* Default information configuration. */</span>
<a name="l03636"></a>03636       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a487c10d0c3da11f8881dc3002817f3c6">default_information</a>)
<a name="l03637"></a>03637     {
<a name="l03638"></a>03638       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a77d5572a3adb44ab2bbec4c5d4c308b5">default_information_route_map</a>)
<a name="l03639"></a>03639         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; default-information originate route-map %s%s&quot;</span>,
<a name="l03640"></a>03640              rip-&gt;<a class="code" href="structrip.html#a77d5572a3adb44ab2bbec4c5d4c308b5">default_information_route_map</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03641"></a>03641       <span class="keywordflow">else</span>
<a name="l03642"></a>03642         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; default-information originate%s&quot;</span>,
<a name="l03643"></a>03643              <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03644"></a>03644     }
<a name="l03645"></a>03645 
<a name="l03646"></a>03646       <span class="comment">/* Redistribute configuration. */</span>
<a name="l03647"></a>03647       <a class="code" href="rip__zebra_8c.html#a070e5ae1fa0ffe98107bc343cc34479b">config_write_rip_redistribute</a> (vty, 1);
<a name="l03648"></a>03648 
<a name="l03649"></a>03649       <span class="comment">/* RIP offset-list configuration. */</span>
<a name="l03650"></a>03650       <a class="code" href="rip__offset_8c.html#ae78df962e796af0d4edb0583e31b4cab">config_write_rip_offset_list</a> (vty);
<a name="l03651"></a>03651 
<a name="l03652"></a>03652       <span class="comment">/* RIP enabled network and interface configuration. */</span>
<a name="l03653"></a>03653       <a class="code" href="rip__interface_8c.html#abf5300e9e13f397e283a6321ae015ab9">config_write_rip_network</a> (vty, 1);
<a name="l03654"></a>03654             
<a name="l03655"></a>03655       <span class="comment">/* RIP default metric configuration */</span>
<a name="l03656"></a>03656       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a> != <a class="code" href="ripd_8h.html#ae60bba91e95dea222d0722cb7ee4820f">RIP_DEFAULT_METRIC_DEFAULT</a>)
<a name="l03657"></a>03657         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; default-metric %d%s&quot;</span>,
<a name="l03658"></a>03658          rip-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03659"></a>03659 
<a name="l03660"></a>03660       <span class="comment">/* Distribute configuration. */</span>
<a name="l03661"></a>03661       write += <a class="code" href="distribute_8c.html#ae7ad634081da77c96e38824bff4a566a">config_write_distribute</a> (vty);
<a name="l03662"></a>03662 
<a name="l03663"></a>03663       <span class="comment">/* Interface routemap configuration */</span>
<a name="l03664"></a>03664       write += <a class="code" href="if__rmap_8h.html#a3499179f8d183d49527984f876e8b6fc">config_write_if_rmap</a> (vty);
<a name="l03665"></a>03665 
<a name="l03666"></a>03666       <span class="comment">/* Distance configuration. */</span>
<a name="l03667"></a>03667       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a>)
<a name="l03668"></a>03668     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; distance %d%s&quot;</span>, rip-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03669"></a>03669 
<a name="l03670"></a>03670       <span class="comment">/* RIP source IP prefix distance configuration. */</span>
<a name="l03671"></a>03671       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip_distance_table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l03672"></a>03672     <span class="keywordflow">if</span> ((rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03673"></a>03673       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; distance %d %s/%d %s%s&quot;</span>, rdistance-&gt;distance,
<a name="l03674"></a>03674            inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l03675"></a>03675            rdistance-&gt;access_list ? rdistance-&gt;access_list : <span class="stringliteral">&quot;&quot;</span>,
<a name="l03676"></a>03676            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03677"></a>03677 
<a name="l03678"></a>03678       <span class="comment">/* RIP static route configuration. */</span>
<a name="l03679"></a>03679       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l03680"></a>03680     <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l03681"></a>03681       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; route %s/%d%s&quot;</span>, 
<a name="l03682"></a>03682            inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
<a name="l03683"></a>03683            rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
<a name="l03684"></a>03684            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l03685"></a>03685 
<a name="l03686"></a>03686     }
<a name="l03687"></a>03687   <span class="keywordflow">return</span> write;
<a name="l03688"></a>03688 }
<a name="l03689"></a>03689 
<a name="l03690"></a>03690 <span class="comment">/* RIP node structure. */</span>
<a name="l03691"></a><a class="code" href="ripd_8c.html#a85bd7b4a319ea721a2f61bd50e4d6a86">03691</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structcmd__node.html">cmd_node</a> <a class="code" href="ripd_8c.html#a85bd7b4a319ea721a2f61bd50e4d6a86">rip_node</a> =
<a name="l03692"></a>03692 {
<a name="l03693"></a>03693   <a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>,
<a name="l03694"></a>03694   <span class="stringliteral">&quot;%s(config-router)# &quot;</span>,
<a name="l03695"></a>03695   1
<a name="l03696"></a>03696 };
<a name="l03697"></a>03697 
<a name="l03698"></a>03698 <span class="comment">/* Distribute-list update functions. */</span>
<a name="l03699"></a>03699 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03700"></a><a class="code" href="ripd_8c.html#acb6750f53b179839ea4b25a942cd31a8">03700</a> <a class="code" href="ripd_8c.html#acb6750f53b179839ea4b25a942cd31a8">rip_distribute_update</a> (<span class="keyword">struct</span> <a class="code" href="structdistribute.html">distribute</a> *dist)
<a name="l03701"></a>03701 {
<a name="l03702"></a>03702   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l03703"></a>03703   <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
<a name="l03704"></a>03704   <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
<a name="l03705"></a>03705   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l03706"></a>03706 
<a name="l03707"></a>03707   <span class="keywordflow">if</span> (! dist-&gt;<a class="code" href="structdistribute.html#a1b3c9fd2ba22e347deab90590b76f06d">ifname</a>)
<a name="l03708"></a>03708     <span class="keywordflow">return</span>;
<a name="l03709"></a>03709 
<a name="l03710"></a>03710   ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (dist-&gt;<a class="code" href="structdistribute.html#a1b3c9fd2ba22e347deab90590b76f06d">ifname</a>);
<a name="l03711"></a>03711   <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03712"></a>03712     <span class="keywordflow">return</span>;
<a name="l03713"></a>03713 
<a name="l03714"></a>03714   ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l03715"></a>03715 
<a name="l03716"></a>03716   <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
<a name="l03717"></a>03717     {
<a name="l03718"></a>03718       alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
<a name="l03719"></a>03719       <span class="keywordflow">if</span> (alist)
<a name="l03720"></a>03720     ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = alist;
<a name="l03721"></a>03721       <span class="keywordflow">else</span>
<a name="l03722"></a>03722     ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03723"></a>03723     }
<a name="l03724"></a>03724   <span class="keywordflow">else</span>
<a name="l03725"></a>03725     ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03726"></a>03726 
<a name="l03727"></a>03727   <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
<a name="l03728"></a>03728     {
<a name="l03729"></a>03729       alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
<a name="l03730"></a>03730       <span class="keywordflow">if</span> (alist)
<a name="l03731"></a>03731     ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = alist;
<a name="l03732"></a>03732       <span class="keywordflow">else</span>
<a name="l03733"></a>03733     ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03734"></a>03734     }
<a name="l03735"></a>03735   <span class="keywordflow">else</span>
<a name="l03736"></a>03736     ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03737"></a>03737 
<a name="l03738"></a>03738   <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
<a name="l03739"></a>03739     {
<a name="l03740"></a>03740       plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
<a name="l03741"></a>03741       <span class="keywordflow">if</span> (plist)
<a name="l03742"></a>03742     ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = plist;
<a name="l03743"></a>03743       <span class="keywordflow">else</span>
<a name="l03744"></a>03744     ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03745"></a>03745     }
<a name="l03746"></a>03746   <span class="keywordflow">else</span>
<a name="l03747"></a>03747     ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03748"></a>03748 
<a name="l03749"></a>03749   <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
<a name="l03750"></a>03750     {
<a name="l03751"></a>03751       plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
<a name="l03752"></a>03752       <span class="keywordflow">if</span> (plist)
<a name="l03753"></a>03753     ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = plist;
<a name="l03754"></a>03754       <span class="keywordflow">else</span>
<a name="l03755"></a>03755     ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03756"></a>03756     }
<a name="l03757"></a>03757   <span class="keywordflow">else</span>
<a name="l03758"></a>03758     ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03759"></a>03759 }
<a name="l03760"></a>03760 
<a name="l03761"></a>03761 <span class="keywordtype">void</span>
<a name="l03762"></a><a class="code" href="ripd_8h.html#ace0f386975eb91540736b55517aa52dd">03762</a> <a class="code" href="ripd_8c.html#a30f91d4920313b8bb6d62c95181ac81c">rip_distribute_update_interface</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l03763"></a>03763 {
<a name="l03764"></a>03764   <span class="keyword">struct </span><a class="code" href="structdistribute.html">distribute</a> *dist;
<a name="l03765"></a>03765 
<a name="l03766"></a>03766   dist = <a class="code" href="distribute_8c.html#ad9181c39aaaf02fa3d608dc7b03aecca">distribute_lookup</a> (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l03767"></a>03767   <span class="keywordflow">if</span> (dist)
<a name="l03768"></a>03768     <a class="code" href="ripd_8c.html#acb6750f53b179839ea4b25a942cd31a8">rip_distribute_update</a> (dist);
<a name="l03769"></a>03769 }
<a name="l03770"></a>03770 
<a name="l03771"></a>03771 <span class="comment">/* Update all interface&#39;s distribute list. */</span>
<a name="l03772"></a>03772 <span class="comment">/* ARGSUSED */</span>
<a name="l03773"></a>03773 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03774"></a><a class="code" href="ripd_8c.html#a05dbfcc9f968f38818a374368e662270">03774</a> <a class="code" href="ripd_8c.html#a05dbfcc9f968f38818a374368e662270">rip_distribute_update_all</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *notused)
<a name="l03775"></a>03775 {
<a name="l03776"></a>03776   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l03777"></a>03777   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03778"></a>03778 
<a name="l03779"></a>03779   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, nnode, ifp))
<a name="l03780"></a>03780     <a class="code" href="ripd_8c.html#a30f91d4920313b8bb6d62c95181ac81c">rip_distribute_update_interface</a> (ifp);
<a name="l03781"></a>03781 }
<a name="l03782"></a>03782 <span class="comment">/* ARGSUSED */</span>
<a name="l03783"></a>03783 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03784"></a><a class="code" href="ripd_8c.html#a445d1c0ccf9a7fd28f755afd8384277c">03784</a> <a class="code" href="ripd_8c.html#a445d1c0ccf9a7fd28f755afd8384277c">rip_distribute_update_all_wrapper</a>(<span class="keyword">struct</span> <a class="code" href="structaccess__list.html">access_list</a> *notused)
<a name="l03785"></a>03785 {
<a name="l03786"></a>03786         <a class="code" href="ripd_8c.html#a05dbfcc9f968f38818a374368e662270">rip_distribute_update_all</a>(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l03787"></a>03787 }
<a name="l03788"></a>03788 
<a name="l03789"></a>03789 <span class="comment">/* Delete all added rip route. */</span>
<a name="l03790"></a>03790 <span class="keywordtype">void</span>
<a name="l03791"></a><a class="code" href="ripd_8h.html#a3f9f2dc004fbc0fbcf1d61d4f360b692">03791</a> <a class="code" href="ripd_8c.html#a3f9f2dc004fbc0fbcf1d61d4f360b692">rip_clean</a> (<span class="keywordtype">void</span>)
<a name="l03792"></a>03792 {
<a name="l03793"></a>03793   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l03794"></a>03794   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
<a name="l03795"></a>03795   <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
<a name="l03796"></a>03796 
<a name="l03797"></a>03797   <span class="keywordflow">if</span> (rip)
<a name="l03798"></a>03798     {
<a name="l03799"></a>03799       <span class="comment">/* Clear RIP routes */</span>
<a name="l03800"></a>03800       <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
<a name="l03801"></a>03801     <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03802"></a>03802       {
<a name="l03803"></a>03803         <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> &amp;&amp;
<a name="l03804"></a>03804         rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>)
<a name="l03805"></a>03805           <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>,
<a name="l03806"></a>03806                      &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
<a name="l03807"></a>03807     
<a name="l03808"></a>03808         <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
<a name="l03809"></a>03809         <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>);
<a name="l03810"></a>03810 
<a name="l03811"></a>03811         rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03812"></a>03812         <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l03813"></a>03813 
<a name="l03814"></a>03814         <a class="code" href="ripd_8c.html#adc7ff2705d42a1ee587b92bbfc256f86">rip_info_free</a> (rinfo);
<a name="l03815"></a>03815       }
<a name="l03816"></a>03816 
<a name="l03817"></a>03817       <span class="comment">/* Cancel RIP related timers. */</span>
<a name="l03818"></a>03818       <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rip-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a>);
<a name="l03819"></a>03819       <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rip-&gt;<a class="code" href="structrip.html#a2bf3b2f0ae9c888e4941a929315f86c2">t_triggered_update</a>);
<a name="l03820"></a>03820       <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rip-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>);
<a name="l03821"></a>03821 
<a name="l03822"></a>03822       <span class="comment">/* Cancel read thread. */</span>
<a name="l03823"></a>03823       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a73ff0450da2dfc1332af7a4b64c1e678">t_read</a>)
<a name="l03824"></a>03824     {
<a name="l03825"></a>03825       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (rip-&gt;<a class="code" href="structrip.html#a73ff0450da2dfc1332af7a4b64c1e678">t_read</a>);
<a name="l03826"></a>03826       rip-&gt;<a class="code" href="structrip.html#a73ff0450da2dfc1332af7a4b64c1e678">t_read</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03827"></a>03827     }
<a name="l03828"></a>03828 
<a name="l03829"></a>03829       <span class="comment">/* Close RIP socket. */</span>
<a name="l03830"></a>03830       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a> &gt;= 0)
<a name="l03831"></a>03831     {
<a name="l03832"></a>03832       close (rip-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a>);
<a name="l03833"></a>03833       rip-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a> = -1;
<a name="l03834"></a>03834     }
<a name="l03835"></a>03835 
<a name="l03836"></a>03836       <span class="comment">/* Static RIP route configuration. */</span>
<a name="l03837"></a>03837       <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
<a name="l03838"></a>03838     <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l03839"></a>03839       {
<a name="l03840"></a>03840         rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03841"></a>03841         <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l03842"></a>03842       }
<a name="l03843"></a>03843 
<a name="l03844"></a>03844       <span class="comment">/* RIP neighbor configuration. */</span>
<a name="l03845"></a>03845       <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip-&gt;<a class="code" href="structrip.html#a5361d5a9259aa9a07ba942b32376eda7">neighbor</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
<a name="l03846"></a>03846     <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l03847"></a>03847       {
<a name="l03848"></a>03848         rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03849"></a>03849         <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
<a name="l03850"></a>03850       }
<a name="l03851"></a>03851 
<a name="l03852"></a>03852       <span class="comment">/* Redistribute related clear. */</span>
<a name="l03853"></a>03853       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a77d5572a3adb44ab2bbec4c5d4c308b5">default_information_route_map</a>)
<a name="l03854"></a>03854     free (rip-&gt;<a class="code" href="structrip.html#a77d5572a3adb44ab2bbec4c5d4c308b5">default_information_route_map</a>);
<a name="l03855"></a>03855 
<a name="l03856"></a>03856       <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; i++)
<a name="l03857"></a>03857     <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[i].<a class="code" href="structrip.html#a77a65f4af78afdc1861f3f59ce91fb66">name</a>)
<a name="l03858"></a>03858       free (rip-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[i].<a class="code" href="structrip.html#a77a65f4af78afdc1861f3f59ce91fb66">name</a>);
<a name="l03859"></a>03859 
<a name="l03860"></a>03860       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, rip-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>);
<a name="l03861"></a>03861       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, rip-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a>);
<a name="l03862"></a>03862       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, rip-&gt;<a class="code" href="structrip.html#a5361d5a9259aa9a07ba942b32376eda7">neighbor</a>);
<a name="l03863"></a>03863       
<a name="l03864"></a>03864       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c7cad00ee9cdeede92c0c380ebbd8ef">MTYPE_RIP</a>, rip);
<a name="l03865"></a>03865       rip = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03866"></a>03866     }
<a name="l03867"></a>03867 
<a name="l03868"></a>03868   <a class="code" href="rip__interface_8c.html#a625e2bc2de85b1bc92e4747708b1f92b">rip_clean_network</a> ();
<a name="l03869"></a>03869   <a class="code" href="rip__interface_8c.html#a154576be5e4bebec5849daafba38d362">rip_passive_nondefault_clean</a> ();
<a name="l03870"></a>03870   <a class="code" href="rip__offset_8c.html#a011c4e6148f408ac629f14dbfb8b44ff">rip_offset_clean</a> ();
<a name="l03871"></a>03871   <a class="code" href="rip__interface_8c.html#a6ae6979fff0457b13c74bec21eb8e9e1">rip_interface_clean</a> ();
<a name="l03872"></a>03872   <a class="code" href="ripd_8c.html#a3d2210c2851480c4f92c76242b6bdc7f">rip_distance_reset</a> ();
<a name="l03873"></a>03873   <a class="code" href="rip__zebra_8c.html#a1a65323d964e8319e2547170a478eb40">rip_redistribute_clean</a> ();
<a name="l03874"></a>03874 }
<a name="l03875"></a>03875 
<a name="l03876"></a>03876 <span class="comment">/* Reset all values to the default settings. */</span>
<a name="l03877"></a>03877 <span class="keywordtype">void</span>
<a name="l03878"></a><a class="code" href="ripd_8h.html#ad0719c9e4912274a9a600527cb16925b">03878</a> <a class="code" href="ripd_8c.html#ad0719c9e4912274a9a600527cb16925b">rip_reset</a> (<span class="keywordtype">void</span>)
<a name="l03879"></a>03879 {
<a name="l03880"></a>03880   <span class="comment">/* Reset global counters. */</span>
<a name="l03881"></a>03881   <a class="code" href="ripd_8c.html#aee2f7ac8649bf74e5d65e6bb98e495cc">rip_global_route_changes</a> = 0;
<a name="l03882"></a>03882   <a class="code" href="ripd_8c.html#acee583ab67011897c4887052fdb3645d">rip_global_queries</a> = 0;
<a name="l03883"></a>03883 
<a name="l03884"></a>03884   <span class="comment">/* Call ripd related reset functions. */</span>
<a name="l03885"></a>03885   <a class="code" href="rip__debug_8c.html#aff9125716ba999485b737a20e13318cf">rip_debug_reset</a> ();
<a name="l03886"></a>03886   <a class="code" href="ripd_8h.html#a9de464d4463f1399091a4c99cdd26c33">rip_route_map_reset</a> ();
<a name="l03887"></a>03887 
<a name="l03888"></a>03888   <span class="comment">/* Call library reset functions. */</span>
<a name="l03889"></a>03889   <a class="code" href="vty_8c.html#a637ad9b0152e5e5559bc0c05db07318e">vty_reset</a> ();
<a name="l03890"></a>03890   <a class="code" href="filter_8c.html#a6d46b3b0526d8e0e8dbed60d7f6a695d">access_list_reset</a> ();
<a name="l03891"></a>03891   <a class="code" href="plist_8c.html#a6d3ae1194d033d0d7cf9c3b54a7542ac">prefix_list_reset</a> ();
<a name="l03892"></a>03892 
<a name="l03893"></a>03893   <a class="code" href="distribute_8c.html#a58b49387fef55775ead5abc2e2c8d22a">distribute_list_reset</a> ();
<a name="l03894"></a>03894 
<a name="l03895"></a>03895   <a class="code" href="rip__interface_8c.html#a0931e33846558aa5bb25576a64e5236a">rip_interface_reset</a> ();
<a name="l03896"></a>03896   <a class="code" href="ripd_8c.html#a3d2210c2851480c4f92c76242b6bdc7f">rip_distance_reset</a> ();
<a name="l03897"></a>03897 
<a name="l03898"></a>03898   <a class="code" href="rip__zebra_8c.html#a5791dae6dd88616ca369075b1154481b">rip_zclient_reset</a> ();
<a name="l03899"></a>03899 }
<a name="l03900"></a>03900 
<a name="l03901"></a>03901 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03902"></a><a class="code" href="ripd_8c.html#a777afc491270764251b432a9de68796e">03902</a> <a class="code" href="ripd_8c.html#a777afc491270764251b432a9de68796e">rip_if_rmap_update</a> (<span class="keyword">struct</span> <a class="code" href="structif__rmap.html">if_rmap</a> *<a class="code" href="structif__rmap.html">if_rmap</a>)
<a name="l03903"></a>03903 {
<a name="l03904"></a>03904   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l03905"></a>03905   <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
<a name="l03906"></a>03906   <span class="keyword">struct </span><a class="code" href="structroute__map.html">route_map</a> *<a class="code" href="structrmap.html">rmap</a>;
<a name="l03907"></a>03907 
<a name="l03908"></a>03908   ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a50262f0070b0fdf5635807d44d74d888">ifname</a>);
<a name="l03909"></a>03909   <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l03910"></a>03910     <span class="keywordflow">return</span>;
<a name="l03911"></a>03911 
<a name="l03912"></a>03912   ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l03913"></a>03913 
<a name="l03914"></a>03914   <span class="keywordflow">if</span> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>])
<a name="l03915"></a>03915     {
<a name="l03916"></a>03916       rmap = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>]);
<a name="l03917"></a>03917       <span class="keywordflow">if</span> (rmap)
<a name="l03918"></a>03918     ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>] = rmap;
<a name="l03919"></a>03919       <span class="keywordflow">else</span>
<a name="l03920"></a>03920     ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03921"></a>03921     }
<a name="l03922"></a>03922   <span class="keywordflow">else</span>
<a name="l03923"></a>03923     ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03924"></a>03924 
<a name="l03925"></a>03925   <span class="keywordflow">if</span> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>])
<a name="l03926"></a>03926     {
<a name="l03927"></a>03927       rmap = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>]);
<a name="l03928"></a>03928       <span class="keywordflow">if</span> (rmap)
<a name="l03929"></a>03929     ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>] = rmap;
<a name="l03930"></a>03930       <span class="keywordflow">else</span>
<a name="l03931"></a>03931     ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03932"></a>03932     }
<a name="l03933"></a>03933   <span class="keywordflow">else</span>
<a name="l03934"></a>03934     ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l03935"></a>03935 }
<a name="l03936"></a>03936 
<a name="l03937"></a>03937 <span class="keywordtype">void</span>
<a name="l03938"></a><a class="code" href="ripd_8h.html#a78367aa092a3b8ee66c19814458fe97e">03938</a> <a class="code" href="ripd_8c.html#a91450861eb65ddb6afafd368b0735d55">rip_if_rmap_update_interface</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l03939"></a>03939 {
<a name="l03940"></a>03940   <span class="keyword">struct </span><a class="code" href="structif__rmap.html">if_rmap</a> *<a class="code" href="structif__rmap.html">if_rmap</a>;
<a name="l03941"></a>03941 
<a name="l03942"></a>03942   if_rmap = <a class="code" href="if__rmap_8c.html#ac6203bfe7b017bdcf8c4cb23c9eb7e6d">if_rmap_lookup</a> (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l03943"></a>03943   <span class="keywordflow">if</span> (if_rmap)
<a name="l03944"></a>03944     <a class="code" href="ripd_8c.html#a777afc491270764251b432a9de68796e">rip_if_rmap_update</a> (if_rmap);
<a name="l03945"></a>03945 }
<a name="l03946"></a>03946 
<a name="l03947"></a>03947 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03948"></a><a class="code" href="ripd_8c.html#af24c30463f9298770f0459db6f413f92">03948</a> <a class="code" href="ripd_8c.html#af24c30463f9298770f0459db6f413f92">rip_routemap_update_redistribute</a> (<span class="keywordtype">void</span>)
<a name="l03949"></a>03949 {
<a name="l03950"></a>03950   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l03951"></a>03951 
<a name="l03952"></a>03952   <span class="keywordflow">if</span> (rip)
<a name="l03953"></a>03953     {
<a name="l03954"></a>03954       <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; i++) 
<a name="l03955"></a>03955     {
<a name="l03956"></a>03956       <span class="keywordflow">if</span> (rip-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[i].<a class="code" href="structrip.html#a77a65f4af78afdc1861f3f59ce91fb66">name</a>)
<a name="l03957"></a>03957         rip-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structrip.html#af7561ddaf524e0a589d1d67322736460">map</a> = 
<a name="l03958"></a>03958           <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (rip-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[i].<a class="code" href="structrip.html#a77a65f4af78afdc1861f3f59ce91fb66">name</a>);
<a name="l03959"></a>03959     }
<a name="l03960"></a>03960     }
<a name="l03961"></a>03961 }
<a name="l03962"></a>03962 
<a name="l03963"></a>03963 <span class="comment">/* ARGSUSED */</span>
<a name="l03964"></a>03964 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l03965"></a><a class="code" href="ripd_8c.html#a7fe8e4382651057a9e2f123e8255e053">03965</a> <a class="code" href="ripd_8c.html#a7fe8e4382651057a9e2f123e8255e053">rip_routemap_update</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *notused)
<a name="l03966"></a>03966 {
<a name="l03967"></a>03967   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l03968"></a>03968   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l03969"></a>03969 
<a name="l03970"></a>03970   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, nnode, ifp))
<a name="l03971"></a>03971     <a class="code" href="ripd_8c.html#a91450861eb65ddb6afafd368b0735d55">rip_if_rmap_update_interface</a> (ifp);
<a name="l03972"></a>03972 
<a name="l03973"></a>03973   <a class="code" href="ripd_8c.html#af24c30463f9298770f0459db6f413f92">rip_routemap_update_redistribute</a> ();
<a name="l03974"></a>03974 }
<a name="l03975"></a>03975 
<a name="l03976"></a>03976 <span class="comment">/* Allocate new rip structure and set default value. */</span>
<a name="l03977"></a>03977 <span class="keywordtype">void</span>
<a name="l03978"></a><a class="code" href="ripd_8h.html#a84babac9b2f652908bd391f8702540cc">03978</a> <a class="code" href="ripd_8c.html#a84babac9b2f652908bd391f8702540cc">rip_init</a> (<span class="keywordtype">void</span>)
<a name="l03979"></a>03979 {
<a name="l03980"></a>03980   <span class="comment">/* Randomize for triggered update random(). */</span>
<a name="l03981"></a>03981   srand (time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>));
<a name="l03982"></a>03982 
<a name="l03983"></a>03983   <span class="comment">/* Install top nodes. */</span>
<a name="l03984"></a>03984   <a class="code" href="command_8c.html#a7ee8a7c258e1e5a6e3ff6173dd1658e3">install_node</a> (&amp;rip_node, <a class="code" href="ripd_8c.html#a507082a56f1939c701904e4709688ada">config_write_rip</a>);
<a name="l03985"></a>03985 
<a name="l03986"></a>03986   <span class="comment">/* Install rip commands. */</span>
<a name="l03987"></a>03987   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_rip_cmd);
<a name="l03988"></a>03988   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_rip_status_cmd);
<a name="l03989"></a>03989   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_rip_cmd);
<a name="l03990"></a>03990   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_rip_status_cmd);
<a name="l03991"></a>03991   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;router_rip_cmd);
<a name="l03992"></a>03992   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_router_rip_cmd);
<a name="l03993"></a>03993 
<a name="l03994"></a>03994   <a class="code" href="command_8h.html#affb2f399c88b8a225b2719bbe928e4de">install_default</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>);
<a name="l03995"></a>03995   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_version_cmd);
<a name="l03996"></a>03996   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_version_cmd);
<a name="l03997"></a>03997   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_version_val_cmd);
<a name="l03998"></a>03998   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_default_metric_cmd);
<a name="l03999"></a>03999   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_default_metric_cmd);
<a name="l04000"></a>04000   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_default_metric_val_cmd);
<a name="l04001"></a>04001   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_timers_cmd);
<a name="l04002"></a>04002   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_timers_cmd);
<a name="l04003"></a>04003   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_timers_val_cmd);
<a name="l04004"></a>04004   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_route_cmd);
<a name="l04005"></a>04005   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_route_cmd);
<a name="l04006"></a>04006   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_distance_cmd);
<a name="l04007"></a>04007   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_distance_cmd);
<a name="l04008"></a>04008   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_distance_source_cmd);
<a name="l04009"></a>04009   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_distance_source_cmd);
<a name="l04010"></a>04010   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_distance_source_access_list_cmd);
<a name="l04011"></a>04011   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_distance_source_access_list_cmd);
<a name="l04012"></a>04012 
<a name="l04013"></a>04013   <span class="comment">/* Debug related init. */</span>
<a name="l04014"></a>04014   <a class="code" href="rip__debug_8c.html#a32ecbeac264ca27597a3360fd65398be">rip_debug_init</a> ();
<a name="l04015"></a>04015 
<a name="l04016"></a>04016   <span class="comment">/* SNMP init. */</span>
<a name="l04017"></a>04017 <span class="preprocessor">#ifdef HAVE_SNMP</span>
<a name="l04018"></a>04018 <span class="preprocessor"></span>  <a class="code" href="ripd_8h.html#afb57a7520721579affb3f01ddf67e560">rip_snmp_init</a> ();
<a name="l04019"></a>04019 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
<a name="l04020"></a>04020 
<a name="l04021"></a>04021   <span class="comment">/* Access list install. */</span>
<a name="l04022"></a>04022   <a class="code" href="filter_8c.html#a7794dbb70ed7bbd7a248853d572fa38c">access_list_init</a> ();
<a name="l04023"></a>04023   <a class="code" href="filter_8c.html#afc932e79e55881b9a1c1e700ec1e0cb4">access_list_add_hook</a> (<a class="code" href="ripd_8c.html#a445d1c0ccf9a7fd28f755afd8384277c">rip_distribute_update_all_wrapper</a>);
<a name="l04024"></a>04024   <a class="code" href="filter_8c.html#a7696ba96f8b2cf3a96dbfb2e161d6752">access_list_delete_hook</a> (<a class="code" href="ripd_8c.html#a445d1c0ccf9a7fd28f755afd8384277c">rip_distribute_update_all_wrapper</a>);
<a name="l04025"></a>04025 
<a name="l04026"></a>04026   <span class="comment">/* Prefix list initialize.*/</span>
<a name="l04027"></a>04027   <a class="code" href="plist_8c.html#a198373358b94c257a9a0cb6d02cf8eac">prefix_list_init</a> ();
<a name="l04028"></a>04028   <a class="code" href="plist_8c.html#add7d0c6cd7985233eb409608b9bf248b">prefix_list_add_hook</a> (<a class="code" href="ripd_8c.html#a05dbfcc9f968f38818a374368e662270">rip_distribute_update_all</a>);
<a name="l04029"></a>04029   <a class="code" href="plist_8c.html#a28384c5c606bb185263f9d8f7ad4fa98">prefix_list_delete_hook</a> (<a class="code" href="ripd_8c.html#a05dbfcc9f968f38818a374368e662270">rip_distribute_update_all</a>);
<a name="l04030"></a>04030 
<a name="l04031"></a>04031   <span class="comment">/* Distribute list install. */</span>
<a name="l04032"></a>04032   <a class="code" href="distribute_8c.html#a6abacd35439f8cdfeec69c5da166d95c">distribute_list_init</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>);
<a name="l04033"></a>04033   <a class="code" href="distribute_8c.html#a22701b77da78b46771dc146fca555dae">distribute_list_add_hook</a> (<a class="code" href="ripd_8c.html#acb6750f53b179839ea4b25a942cd31a8">rip_distribute_update</a>);
<a name="l04034"></a>04034   <a class="code" href="distribute_8c.html#a392e0d894cc65ce8667b8133ced5a0bb">distribute_list_delete_hook</a> (<a class="code" href="ripd_8c.html#acb6750f53b179839ea4b25a942cd31a8">rip_distribute_update</a>);
<a name="l04035"></a>04035 
<a name="l04036"></a>04036   <span class="comment">/* Route-map */</span>
<a name="l04037"></a>04037   <a class="code" href="rip__routemap_8c.html#a41f8a4911f2bc592607a2b83408b9040">rip_route_map_init</a> ();
<a name="l04038"></a>04038   <a class="code" href="rip__offset_8c.html#a9fea3b1fd33fd831fab8284811db6cab">rip_offset_init</a> ();
<a name="l04039"></a>04039 
<a name="l04040"></a>04040   <a class="code" href="routemap_8c.html#afd64a010c9f8f9cf35788b065f540eea">route_map_add_hook</a> (<a class="code" href="ripd_8c.html#a7fe8e4382651057a9e2f123e8255e053">rip_routemap_update</a>);
<a name="l04041"></a>04041   <a class="code" href="routemap_8c.html#a60b69b789fa511ded8504c5b20fb63d4">route_map_delete_hook</a> (<a class="code" href="ripd_8c.html#a7fe8e4382651057a9e2f123e8255e053">rip_routemap_update</a>);
<a name="l04042"></a>04042 
<a name="l04043"></a>04043   <a class="code" href="if__rmap_8c.html#acb2b07615aac7f6416f0fa6f4717a4ec">if_rmap_init</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>);
<a name="l04044"></a>04044   <a class="code" href="if__rmap_8c.html#a58763bcdfc9073a6e505c1597acc5304">if_rmap_hook_add</a> (<a class="code" href="ripd_8c.html#a777afc491270764251b432a9de68796e">rip_if_rmap_update</a>);
<a name="l04045"></a>04045   <a class="code" href="if__rmap_8c.html#acc9bf1191edf4196d213b658034938e6">if_rmap_hook_delete</a> (<a class="code" href="ripd_8c.html#a777afc491270764251b432a9de68796e">rip_if_rmap_update</a>);
<a name="l04046"></a>04046 
<a name="l04047"></a>04047   <span class="comment">/* Distance control. */</span>
<a name="l04048"></a>04048   rip_distance_table = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l04049"></a>04049 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ripd_8c.html">ripd.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:08 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
