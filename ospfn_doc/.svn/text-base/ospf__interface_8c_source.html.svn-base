<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_interface.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__interface_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ospfd/ospf_interface.c</div>  </div>
</div>
<div class="contents">
<a href="ospf__interface_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * OSPF Interface functions.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1999, 2000 Toshiaki Takada</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> * </span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published</span>
<a name="l00009"></a>00009 <span class="comment"> * by the Free Software Foundation; either version 2, or (at your</span>
<a name="l00010"></a>00010 <span class="comment"> * option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the</span>
<a name="l00019"></a>00019 <span class="comment"> * Free Software Foundation, Inc., 59 Temple Place - Suite 330,</span>
<a name="l00020"></a>00020 <span class="comment"> * Boston, MA 02111-1307, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="ospfd_8h.html">ospfd/ospfd.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="ospf__spf_8h.html">ospfd/ospf_spf.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="ospf__interface_8h.html">ospfd/ospf_interface.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ism_8h.html">ospfd/ospf_ism.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="ospf__asbr_8h.html">ospfd/ospf_asbr.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsa_8h.html">ospfd/ospf_lsa.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsdb_8h.html">ospfd/ospf_lsdb.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="ospf__neighbor_8h.html">ospfd/ospf_neighbor.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="ospf__nsm_8h.html">ospfd/ospf_nsm.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="ospf__packet_8h.html">ospfd/ospf_packet.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="ospf__abr_8h.html">ospfd/ospf_abr.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="ospf__network_8h.html">ospfd/ospf_network.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="ospf__dump_8h.html">ospfd/ospf_dump.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#ifdef HAVE_SNMP</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="ospf__snmp_8h.html">ospfd/ospf_snmp.h</a>&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keywordtype">int</span>
<a name="l00054"></a><a class="code" href="ospf__interface_8h.html#a9cd50320072d19997fba6493fc90e3ca">00054</a> <a class="code" href="ospf__interface_8c.html#a0f57568dea03dc11f50fdb7bc9bf02f4">ospf_if_get_output_cost</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00055"></a>00055 {
<a name="l00056"></a>00056   <span class="comment">/* If all else fails, use default OSPF cost */</span>
<a name="l00057"></a>00057   u_int32_t cost;
<a name="l00058"></a>00058   u_int32_t bw, refbw;
<a name="l00059"></a>00059 
<a name="l00060"></a>00060   bw = oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a324b6a80459775b1e5e254369649e075">bandwidth</a> ? oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a324b6a80459775b1e5e254369649e075">bandwidth</a> : <a class="code" href="ospfd_8h.html#a5e84e655faf82da7a2acd6d67c7cecb4">OSPF_DEFAULT_BANDWIDTH</a>;
<a name="l00061"></a>00061   refbw = oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#ae0c9ec1374c543f0db486cb3faf271c8">ref_bandwidth</a>;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063   <span class="comment">/* A specifed ip ospf cost overrides a calculated one. */</span>
<a name="l00064"></a>00064   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>), output_cost_cmd) ||
<a name="l00065"></a>00065       <a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oi-&gt;<a class="code" href="structospf__interface.html#abe19d62cc037130ba97d644980a90e58">params</a>, output_cost_cmd))
<a name="l00066"></a>00066     cost = <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, output_cost_cmd);
<a name="l00067"></a>00067   <span class="comment">/* See if a cost can be calculated from the zebra processes</span>
<a name="l00068"></a>00068 <span class="comment">     interface bandwidth field. */</span>
<a name="l00069"></a>00069   <span class="keywordflow">else</span>
<a name="l00070"></a>00070     {
<a name="l00071"></a>00071       cost = (u_int32_t) ((<span class="keywordtype">double</span>)refbw / (double)bw + (<span class="keywordtype">double</span>)0.5);
<a name="l00072"></a>00072       <span class="keywordflow">if</span> (cost &lt; 1)
<a name="l00073"></a>00073     cost = 1;
<a name="l00074"></a>00074       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (cost &gt; 65535)
<a name="l00075"></a>00075     cost = 65535;
<a name="l00076"></a>00076     }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078   <span class="keywordflow">return</span> cost;
<a name="l00079"></a>00079 }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 <span class="keywordtype">void</span>
<a name="l00082"></a><a class="code" href="ospf__interface_8h.html#a5bc57e01012f36d01973bd8e95482f07">00082</a> <a class="code" href="ospf__interface_8c.html#a7b1ed4ce1af4c1513f7bd6c6fcc817a3">ospf_if_recalculate_output_cost</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00083"></a>00083 {
<a name="l00084"></a>00084   u_int32_t newcost;
<a name="l00085"></a>00085   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00086"></a>00086   
<a name="l00087"></a>00087   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00088"></a>00088     {
<a name="l00089"></a>00089       <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00090"></a>00090       
<a name="l00091"></a>00091       <span class="keywordflow">if</span> ( (oi = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00092"></a>00092     <span class="keywordflow">continue</span>;
<a name="l00093"></a>00093 
<a name="l00094"></a>00094       newcost = <a class="code" href="ospf__interface_8c.html#a0f57568dea03dc11f50fdb7bc9bf02f4">ospf_if_get_output_cost</a> (oi);
<a name="l00095"></a>00095 
<a name="l00096"></a>00096       <span class="comment">/* Is actual output cost changed? */</span>
<a name="l00097"></a>00097       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a> != newcost)
<a name="l00098"></a>00098     {
<a name="l00099"></a>00099       oi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a> = newcost;
<a name="l00100"></a>00100       <a class="code" href="ospf__lsa_8c.html#a66ad8a1fd151b43b11d7ec9650a644bf">ospf_router_lsa_timer_add</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>);
<a name="l00101"></a>00101     }
<a name="l00102"></a>00102     }
<a name="l00103"></a>00103 }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="comment">/* Simulate down/up on the interface.  This is needed, for example, when </span>
<a name="l00106"></a>00106 <span class="comment">   the MTU changes. */</span>
<a name="l00107"></a>00107 <span class="keywordtype">void</span>
<a name="l00108"></a><a class="code" href="ospf__interface_8h.html#a6be5642b2dca915859aaeccc741ba790">00108</a> <a class="code" href="ospf__interface_8c.html#ac5faa00cb6266621add9342300b4fdd8">ospf_if_reset</a>(<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>)
<a name="l00109"></a>00109 {
<a name="l00110"></a>00110   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00111"></a>00111   
<a name="l00112"></a>00112   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00113"></a>00113     {
<a name="l00114"></a>00114       <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00115"></a>00115       
<a name="l00116"></a>00116       <span class="keywordflow">if</span> ( (oi = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00117"></a>00117     <span class="keywordflow">continue</span>;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119       <a class="code" href="ospf__interface_8c.html#ac40adc9d92baa831a8ea1cde67defbb2">ospf_if_down</a>(oi);
<a name="l00120"></a>00120       <a class="code" href="ospf__interface_8c.html#a5a63d5d3af1629d69c380eb09f3e8b7b">ospf_if_up</a>(oi);
<a name="l00121"></a>00121     }
<a name="l00122"></a>00122 }
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 <span class="keywordtype">void</span>
<a name="l00125"></a><a class="code" href="ospf__interface_8h.html#a24d22295eb5fff9b5423b848f10c7af6">00125</a> <a class="code" href="ospf__interface_8c.html#a3636bdf093aec32997e31cab06a9f08b">ospf_if_reset_variables</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00126"></a>00126 {
<a name="l00127"></a>00127   <span class="comment">/* Set default values. */</span>
<a name="l00128"></a>00128   <span class="comment">/* don&#39;t clear this flag.  oi-&gt;flag = OSPF_IF_DISABLE; */</span>
<a name="l00129"></a>00129 
<a name="l00130"></a>00130   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a>)
<a name="l00131"></a>00131     oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> = <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>;
<a name="l00132"></a>00132   <span class="keywordflow">else</span> 
<a name="l00133"></a>00133   <span class="comment">/* preserve network-type */</span>
<a name="l00134"></a>00134   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#abf2c650e64355936c071432d92dd5ecb">OSPF_IFTYPE_NBMA</a>)
<a name="l00135"></a>00135     oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> = <a class="code" href="ospf__interface_8h.html#a6c044d3118d79d243c1547176a4c5281">OSPF_IFTYPE_BROADCAST</a>;
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> = <a class="code" href="ospf__ism_8h.html#ad66e19ab772d9038c5f31fad74cfa113">ISM_Down</a>;
<a name="l00138"></a>00138 
<a name="l00139"></a>00139   oi-&gt;<a class="code" href="structospf__interface.html#ab9e20f6c614ae47d978eab508967e0fd">crypt_seqnum</a> = 0;
<a name="l00140"></a>00140 
<a name="l00141"></a>00141   <span class="comment">/* This must be short, (less than RxmtInterval) </span>
<a name="l00142"></a>00142 <span class="comment">     - RFC 2328 Section 13.5 para 3.  Set to 1 second to avoid Acks being</span>
<a name="l00143"></a>00143 <span class="comment">       held back for too long - MAG */</span>
<a name="l00144"></a>00144   oi-&gt;<a class="code" href="structospf__interface.html#ab715712eda2750aa107ca2457f234a9c">v_ls_ack</a> = 1;  
<a name="l00145"></a>00145 }
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 <span class="comment">/* lookup oi for specified prefix/ifp */</span>
<a name="l00148"></a>00148 <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l00149"></a><a class="code" href="ospf__interface_8h.html#a70eea25e7c91f954c384563e97c1be00">00149</a> <a class="code" href="ospf__interface_8c.html#ae53618182688ad96bfa2fa6813617d57">ospf_if_table_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="structprefix.html">prefix</a>)
<a name="l00150"></a>00150 {
<a name="l00151"></a>00151   <span class="keyword">struct </span>prefix p;
<a name="l00152"></a>00152   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00153"></a>00153   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *rninfo = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00154"></a>00154   
<a name="l00155"></a>00155   p = *<a class="code" href="prefix_8h.html#a6b458105367a186babd858fd008a66be">prefix</a>;
<a name="l00156"></a>00156   p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
<a name="l00157"></a>00157   
<a name="l00158"></a>00158   <span class="comment">/* route_node_get implicitely locks */</span>
<a name="l00159"></a>00159   <span class="keywordflow">if</span> ((rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp), &amp;p)))
<a name="l00160"></a>00160     {
<a name="l00161"></a>00161       rninfo = (<span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *) rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00162"></a>00162       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00163"></a>00163     }
<a name="l00164"></a>00164   
<a name="l00165"></a>00165   <span class="keywordflow">return</span> rninfo;
<a name="l00166"></a>00166 }
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00169"></a><a class="code" href="ospf__interface_8c.html#ae9af41b7a30c1ae8dc3493dd4e79f115">00169</a> <a class="code" href="ospf__interface_8c.html#ae9af41b7a30c1ae8dc3493dd4e79f115">ospf_add_to_if</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00170"></a>00170 {
<a name="l00171"></a>00171   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00172"></a>00172   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l00173"></a>00173 
<a name="l00174"></a>00174   p = *oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>;
<a name="l00175"></a>00175   p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp), &amp;p);
<a name="l00178"></a>00178   <span class="comment">/* rn-&gt;info should either be NULL or equal to this oi</span>
<a name="l00179"></a>00179 <span class="comment">   * as route_node_get may return an existing node</span>
<a name="l00180"></a>00180 <span class="comment">   */</span>
<a name="l00181"></a>00181   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (!rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> || rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == oi);
<a name="l00182"></a>00182   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = oi;
<a name="l00183"></a>00183 }
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00186"></a><a class="code" href="ospf__interface_8c.html#af97d48615a56dcc2c801d1af73c70987">00186</a> <a class="code" href="ospf__interface_8c.html#af97d48615a56dcc2c801d1af73c70987">ospf_delete_from_if</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00187"></a>00187 {
<a name="l00188"></a>00188   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00189"></a>00189   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191   p = *oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>;
<a name="l00192"></a>00192   p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
<a name="l00193"></a>00193 
<a name="l00194"></a>00194   rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>), &amp;p);
<a name="l00195"></a>00195   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn);
<a name="l00196"></a>00196   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l00197"></a>00197   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00198"></a>00198   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00199"></a>00199   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00200"></a>00200 }
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l00203"></a><a class="code" href="ospf__interface_8h.html#a9e69619161066c87716addfb368a0a02">00203</a> <a class="code" href="ospf__interface_8c.html#af4a1a23e75bb79a0feaa1c26b0b989e5">ospf_if_new</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00204"></a>00204 {
<a name="l00205"></a>00205   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00206"></a>00206 
<a name="l00207"></a>00207   <span class="keywordflow">if</span> ((oi = <a class="code" href="ospf__interface_8c.html#ae53618182688ad96bfa2fa6813617d57">ospf_if_table_lookup</a> (ifp, p)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00208"></a>00208     {
<a name="l00209"></a>00209       oi = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8d516e6360bb388d51329c3ef2759141">MTYPE_OSPF_IF</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a>));
<a name="l00210"></a>00210       memset (oi, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a>));
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212   <span class="keywordflow">else</span>
<a name="l00213"></a>00213     <span class="keywordflow">return</span> oi;
<a name="l00214"></a>00214     
<a name="l00215"></a>00215   <span class="comment">/* Set zebra interface pointer. */</span>
<a name="l00216"></a>00216   oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a> = <a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>;
<a name="l00217"></a>00217   oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a> = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00218"></a>00218   
<a name="l00219"></a>00219   <a class="code" href="ospf__interface_8c.html#ae9af41b7a30c1ae8dc3493dd4e79f115">ospf_add_to_if</a> (ifp, oi);
<a name="l00220"></a>00220   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, oi);
<a name="l00221"></a>00221   
<a name="l00222"></a>00222   <span class="comment">/* Clear self-originated network-LSA. */</span>
<a name="l00223"></a>00223   oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   <span class="comment">/* Initialize neighbor list. */</span>
<a name="l00226"></a>00226   oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l00227"></a>00227 
<a name="l00228"></a>00228   <span class="comment">/* Initialize static neighbor list. */</span>
<a name="l00229"></a>00229   oi-&gt;<a class="code" href="structospf__interface.html#a5711c57336783fe2d490c7760a4a18ed">nbr_nbma</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00230"></a>00230 
<a name="l00231"></a>00231   <span class="comment">/* Initialize Link State Acknowledgment list. */</span>
<a name="l00232"></a>00232   oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00233"></a>00233   oi-&gt;<a class="code" href="structospf__interface.html#ad6998c388e24ac857e8059786f9d79e7">ls_ack_direct</a>.<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a> = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00234"></a>00234 
<a name="l00235"></a>00235   <span class="comment">/* Set default values. */</span>
<a name="l00236"></a>00236   <a class="code" href="ospf__interface_8c.html#a3636bdf093aec32997e31cab06a9f08b">ospf_if_reset_variables</a> (oi);
<a name="l00237"></a>00237 
<a name="l00238"></a>00238   <span class="comment">/* Add pseudo neighbor. */</span>
<a name="l00239"></a>00239   oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a> = <a class="code" href="ospf__neighbor_8c.html#a77d8efb26eb88abdd8a3c0de59b1d12a">ospf_nbr_new</a> (oi);
<a name="l00240"></a>00240 
<a name="l00241"></a>00241   oi-&gt;<a class="code" href="structospf__interface.html#a7f9d43bd1c8bf02254ac9b17be826615">ls_upd_queue</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l00242"></a>00242   oi-&gt;<a class="code" href="structospf__interface.html#a29691bed1e0be212206bff3f4d0fc8dd">t_ls_upd_event</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00243"></a>00243   oi-&gt;<a class="code" href="structospf__interface.html#a1fef0480466c761ca2921c55748b9d53">t_ls_ack_direct</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245   oi-&gt;<a class="code" href="structospf__interface.html#ab9e20f6c614ae47d978eab508967e0fd">crypt_seqnum</a> = time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00248"></a>00248 <span class="preprocessor"></span>  <a class="code" href="ospf__opaque_8h.html#ac17f05a1ebf3fccea3febad454f66a13">ospf_opaque_type9_lsa_init</a> (oi);
<a name="l00249"></a>00249 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00250"></a>00250 
<a name="l00251"></a>00251   oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a> = <a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>;
<a name="l00252"></a>00252   
<a name="l00253"></a>00253   <span class="keywordflow">return</span> oi;
<a name="l00254"></a>00254 }
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 <span class="comment">/* Restore an interface to its pre UP state</span>
<a name="l00257"></a>00257 <span class="comment">   Used from ism_interface_down only */</span>
<a name="l00258"></a>00258 <span class="keywordtype">void</span>
<a name="l00259"></a><a class="code" href="ospf__interface_8h.html#a2f3017a7dff9126573df94ba12fc1bb5">00259</a> <a class="code" href="ospf__interface_8c.html#ac85cde0449107c57705e459658486dd5">ospf_if_cleanup</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00260"></a>00260 {
<a name="l00261"></a>00261   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00262"></a>00262   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00263"></a>00263   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l00264"></a>00264   <span class="keyword">struct </span><a class="code" href="structospf__nbr__nbma.html">ospf_nbr_nbma</a> *nbr_nbma;
<a name="l00265"></a>00265   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l00266"></a>00266 
<a name="l00267"></a>00267   <span class="comment">/* oi-&gt;nbrs and oi-&gt;nbr_nbma should be deleted on InterfaceDown event */</span>
<a name="l00268"></a>00268   <span class="comment">/* delete all static neighbors attached to this interface */</span>
<a name="l00269"></a>00269   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (oi-&gt;<a class="code" href="structospf__interface.html#a5711c57336783fe2d490c7760a4a18ed">nbr_nbma</a>, node, nnode, nbr_nbma))
<a name="l00270"></a>00270     {
<a name="l00271"></a>00271       <a class="code" href="ospfd_8h.html#a00739e4ae75021e7e134dc6b292a9f2b">OSPF_POLL_TIMER_OFF</a> (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a9aa6dd806f5903f6a4ded3ee4ca26e29">t_poll</a>);
<a name="l00272"></a>00272 
<a name="l00273"></a>00273       <span class="keywordflow">if</span> (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a83ef55950b998c17f62cf49e6d48494d">nbr</a>)
<a name="l00274"></a>00274     {
<a name="l00275"></a>00275       nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a83ef55950b998c17f62cf49e6d48494d">nbr</a>-&gt;<a class="code" href="structospf__neighbor.html#a68b82493dd68fd0a271db2e168c36617">nbr_nbma</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00276"></a>00276       nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a83ef55950b998c17f62cf49e6d48494d">nbr</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00277"></a>00277     }
<a name="l00278"></a>00278 
<a name="l00279"></a>00279       nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a501752990df8f83d0efae32fbb9dead9">oi</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00280"></a>00280       
<a name="l00281"></a>00281       <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (oi-&gt;<a class="code" href="structospf__interface.html#a5711c57336783fe2d490c7760a4a18ed">nbr_nbma</a>, nbr_nbma);
<a name="l00282"></a>00282     }
<a name="l00283"></a>00283 
<a name="l00284"></a>00284   <span class="comment">/* send Neighbor event KillNbr to all associated neighbors. */</span>
<a name="l00285"></a>00285   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00286"></a>00286     <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00287"></a>00287       <span class="keywordflow">if</span> (nbr != oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>)
<a name="l00288"></a>00288     <a class="code" href="ospf__nsm_8h.html#a9f4ca1bd42134b3f3c90fc8b7b4327b5">OSPF_NSM_EVENT_EXECUTE</a> (nbr, <a class="code" href="ospf__nsm_8h.html#a4b7fc48119800998da7fa068062edb40">NSM_KillNbr</a>);
<a name="l00289"></a>00289 
<a name="l00290"></a>00290   <span class="comment">/* Cleanup Link State Acknowlegdment list. */</span>
<a name="l00291"></a>00291   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>, node, nnode, lsa))
<a name="l00292"></a>00292     <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;lsa); <span class="comment">/* oi-&gt;ls_ack */</span>
<a name="l00293"></a>00293   <a class="code" href="linklist_8c.html#acd6daa4be8ab3f175376e63c9d9c9500">list_delete_all_node</a> (oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>);
<a name="l00294"></a>00294 
<a name="l00295"></a>00295   oi-&gt;<a class="code" href="structospf__interface.html#ab9e20f6c614ae47d978eab508967e0fd">crypt_seqnum</a> = 0;
<a name="l00296"></a>00296   
<a name="l00297"></a>00297   <span class="comment">/* Empty link state update queue */</span>
<a name="l00298"></a>00298   <a class="code" href="ospfd_8c.html#a057b2c243b1406f27f8de8ddc5a48ade">ospf_ls_upd_queue_empty</a> (oi);
<a name="l00299"></a>00299   
<a name="l00300"></a>00300   <span class="comment">/* Reset pseudo neighbor. */</span>
<a name="l00301"></a>00301   <a class="code" href="ospf__neighbor_8c.html#ace111af37bf8e7a8c058a55866b4cc08">ospf_nbr_delete</a> (oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>);
<a name="l00302"></a>00302   oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a> = <a class="code" href="ospf__neighbor_8c.html#a77d8efb26eb88abdd8a3c0de59b1d12a">ospf_nbr_new</a> (oi);
<a name="l00303"></a>00303   <a class="code" href="ospf__neighbor_8c.html#a4260a90c3eb41e2af0d60b4d2ecb3d85">ospf_nbr_add_self</a> (oi);
<a name="l00304"></a>00304   
<a name="l00305"></a>00305   <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a>);
<a name="l00306"></a>00306   oi-&gt;<a class="code" href="structospf__interface.html#a175c090a388cfc7d255012d0d569df6d">network_lsa_self</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00307"></a>00307   <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (oi-&gt;<a class="code" href="structospf__interface.html#a278866980d98aa3ae2c393acb08c0337">t_network_lsa_self</a>);
<a name="l00308"></a>00308 }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 <span class="keywordtype">void</span>
<a name="l00311"></a><a class="code" href="ospf__interface_8h.html#a5ee0ba7d67dcf44e58490cfb54774072">00311</a> <a class="code" href="ospf__interface_8c.html#aa06699fd3d9034f239d51f2ea6098b3b">ospf_if_free</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00312"></a>00312 {
<a name="l00313"></a>00313   <a class="code" href="ospf__interface_8c.html#ac40adc9d92baa831a8ea1cde67defbb2">ospf_if_down</a> (oi);
<a name="l00314"></a>00314 
<a name="l00315"></a>00315   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#ad66e19ab772d9038c5f31fad74cfa113">ISM_Down</a>);
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00318"></a>00318 <span class="preprocessor"></span>  <a class="code" href="ospf__opaque_8h.html#a5ea00e524339f12f53f7427f3608c4a6">ospf_opaque_type9_lsa_term</a> (oi);
<a name="l00319"></a>00319 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00320"></a>00320 
<a name="l00321"></a>00321   <span class="comment">/* Free Pseudo Neighbour */</span>
<a name="l00322"></a>00322   <a class="code" href="ospf__neighbor_8c.html#ace111af37bf8e7a8c058a55866b4cc08">ospf_nbr_delete</a> (oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>);
<a name="l00323"></a>00323   
<a name="l00324"></a>00324   <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>);
<a name="l00325"></a>00325   <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7f9d43bd1c8bf02254ac9b17be826615">ls_upd_queue</a>);
<a name="l00326"></a>00326   
<a name="l00327"></a>00327   <span class="comment">/* Free any lists that should be freed */</span>
<a name="l00328"></a>00328   <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (oi-&gt;<a class="code" href="structospf__interface.html#a5711c57336783fe2d490c7760a4a18ed">nbr_nbma</a>);
<a name="l00329"></a>00329   
<a name="l00330"></a>00330   <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (oi-&gt;<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>);
<a name="l00331"></a>00331   <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (oi-&gt;<a class="code" href="structospf__interface.html#ad6998c388e24ac857e8059786f9d79e7">ls_ack_direct</a>.<a class="code" href="structospf__interface.html#acbc88d1aa86ff7a082fe2c77ae984d1f">ls_ack</a>);
<a name="l00332"></a>00332   
<a name="l00333"></a>00333   <a class="code" href="ospf__interface_8c.html#af97d48615a56dcc2c801d1af73c70987">ospf_delete_from_if</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>, oi);
<a name="l00334"></a>00334 
<a name="l00335"></a>00335   <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, oi);
<a name="l00336"></a>00336   <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, oi);
<a name="l00337"></a>00337 
<a name="l00338"></a>00338   memset (oi, 0, <span class="keyword">sizeof</span> (*oi));
<a name="l00339"></a>00339   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8d516e6360bb388d51329c3ef2759141">MTYPE_OSPF_IF</a>, oi);
<a name="l00340"></a>00340 }
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 <span class="comment">/*</span>
<a name="l00344"></a>00344 <span class="comment">*  check if interface with given address is configured and</span>
<a name="l00345"></a>00345 <span class="comment">*  return it if yes.  special treatment for PtP networks.</span>
<a name="l00346"></a>00346 <span class="comment">*/</span>
<a name="l00347"></a>00347 <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l00348"></a><a class="code" href="ospf__interface_8h.html#ab9b4ccb999cb7dce09d5c7e3b0af877c">00348</a> <a class="code" href="ospf__interface_8c.html#af2d46b8d8d5e620e564a68257d080643">ospf_if_is_configured</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> in_addr *<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>)
<a name="l00349"></a>00349 {
<a name="l00350"></a>00350   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00351"></a>00351   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00352"></a>00352   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> addr;
<a name="l00353"></a>00353 
<a name="l00354"></a>00354   addr.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00355"></a>00355   addr.prefix = *address;
<a name="l00356"></a>00356   addr.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
<a name="l00357"></a>00357 
<a name="l00358"></a>00358   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
<a name="l00359"></a>00359     <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l00360"></a>00360       {
<a name="l00361"></a>00361         <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>)
<a name="l00362"></a>00362       {
<a name="l00363"></a>00363         <span class="comment">/* special leniency: match if addr is anywhere on peer subnet */</span>
<a name="l00364"></a>00364         <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a>(<a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(oi-&gt;<a class="code" href="structospf__interface.html#a3032c9001447ca661e19323b6c59aca6">connected</a>),
<a name="l00365"></a>00365                  (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;addr))
<a name="l00366"></a>00366           <span class="keywordflow">return</span> oi;
<a name="l00367"></a>00367       }
<a name="l00368"></a>00368         <span class="keywordflow">else</span>
<a name="l00369"></a>00369       {
<a name="l00370"></a>00370         <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (address, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
<a name="l00371"></a>00371           <span class="keywordflow">return</span> oi;
<a name="l00372"></a>00372       }
<a name="l00373"></a>00373       }
<a name="l00374"></a>00374   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00375"></a>00375 }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377 <span class="keywordtype">int</span>
<a name="l00378"></a><a class="code" href="ospf__interface_8h.html#a985a4e0e98ae14e35ca05aa2ed75b619">00378</a> <a class="code" href="ospf__interface_8c.html#ad3b316be3796bf94c8d30efea994e7ad">ospf_if_is_up</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00379"></a>00379 {
<a name="l00380"></a>00380   <span class="keywordflow">return</span> <a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>);
<a name="l00381"></a>00381 }
<a name="l00382"></a>00382 
<a name="l00383"></a>00383 <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l00384"></a><a class="code" href="ospf__interface_8h.html#a08113e8427e0450d20452442c98d21d8">00384</a> <a class="code" href="ospf__interface_8c.html#a80e9dc6cfe3bb82ac90490a33cf2c092">ospf_if_exists</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oic)
<a name="l00385"></a>00385 { 
<a name="l00386"></a>00386   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00387"></a>00387   <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;
<a name="l00388"></a>00388   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00389"></a>00389 
<a name="l00390"></a>00390   <span class="keywordflow">if</span> ((ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ()) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00391"></a>00391     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00392"></a>00392 
<a name="l00393"></a>00393   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
<a name="l00394"></a>00394     <span class="keywordflow">if</span> (oi == oic)
<a name="l00395"></a>00395       <span class="keywordflow">return</span> oi;
<a name="l00396"></a>00396 
<a name="l00397"></a>00397   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00398"></a>00398 }
<a name="l00399"></a>00399 
<a name="l00400"></a>00400 <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l00401"></a><a class="code" href="ospf__interface_8h.html#a6003adc9a1a2e32903d32d08f22e81bf">00401</a> <a class="code" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>,
<a name="l00402"></a>00402                   <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>, <span class="keyword">struct</span> in_addr <a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>)
<a name="l00403"></a>00403 {
<a name="l00404"></a>00404   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00405"></a>00405   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00406"></a>00406   
<a name="l00407"></a>00407   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
<a name="l00408"></a>00408     <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l00409"></a>00409       {
<a name="l00410"></a>00410     <span class="keywordflow">if</span> (ifp &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a> != ifp)
<a name="l00411"></a>00411       <span class="keywordflow">continue</span>;
<a name="l00412"></a>00412     
<a name="l00413"></a>00413     <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;address, &amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
<a name="l00414"></a>00414       <span class="keywordflow">return</span> oi;
<a name="l00415"></a>00415       }
<a name="l00416"></a>00416 
<a name="l00417"></a>00417   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00418"></a>00418 }
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l00421"></a><a class="code" href="ospf__interface_8h.html#aba3a6ca5e1fd29fad1fa0ebee1937513">00421</a> <a class="code" href="ospf__interface_8c.html#a9255c148dc6fdf178c585cf1be34782c">ospf_if_lookup_by_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00422"></a>00422 {
<a name="l00423"></a>00423   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00424"></a>00424   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00425"></a>00425   
<a name="l00426"></a>00426   <span class="comment">/* Check each Interface. */</span>
<a name="l00427"></a>00427   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
<a name="l00428"></a>00428     {
<a name="l00429"></a>00429       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l00430"></a>00430     {
<a name="l00431"></a>00431       <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> ptmp;
<a name="l00432"></a>00432 
<a name="l00433"></a>00433       <a class="code" href="prefix_8c.html#abaad44d47b408d45484fdd729ab501b2">prefix_copy</a> (&amp;ptmp, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(oi-&gt;<a class="code" href="structospf__interface.html#a3032c9001447ca661e19323b6c59aca6">connected</a>));
<a name="l00434"></a>00434       <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (&amp;ptmp);
<a name="l00435"></a>00435       <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (&amp;ptmp, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p))
<a name="l00436"></a>00436         <span class="keywordflow">return</span> oi;
<a name="l00437"></a>00437     }
<a name="l00438"></a>00438     }
<a name="l00439"></a>00439   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00440"></a>00440 }
<a name="l00441"></a>00441 
<a name="l00442"></a>00442 <span class="comment">/* determine receiving interface by ifp and source address */</span>
<a name="l00443"></a>00443 <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l00444"></a><a class="code" href="ospf__interface_8h.html#a76b936d68b52c50c3bc293b312049b74">00444</a> <a class="code" href="ospf__interface_8c.html#a4e3a74bf97746313364b81e1a272e028">ospf_if_lookup_recv_if</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> in_addr src,
<a name="l00445"></a>00445             <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>)
<a name="l00446"></a>00446 {
<a name="l00447"></a>00447   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00448"></a>00448   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> addr;
<a name="l00449"></a>00449   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi, *match;
<a name="l00450"></a>00450 
<a name="l00451"></a>00451   addr.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00452"></a>00452   addr.prefix = src;
<a name="l00453"></a>00453   addr.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l00454"></a>00454 
<a name="l00455"></a>00455   match = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00456"></a>00456 
<a name="l00457"></a>00457   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00458"></a>00458     {
<a name="l00459"></a>00459       oi = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00460"></a>00460 
<a name="l00461"></a>00461       <span class="keywordflow">if</span> (!oi) <span class="comment">/* oi can be NULL for PtP aliases */</span>
<a name="l00462"></a>00462     <span class="keywordflow">continue</span>;
<a name="l00463"></a>00463 
<a name="l00464"></a>00464       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
<a name="l00465"></a>00465     <span class="keywordflow">continue</span>;
<a name="l00466"></a>00466 
<a name="l00467"></a>00467       <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>))
<a name="l00468"></a>00468         <span class="keywordflow">continue</span>;
<a name="l00469"></a>00469 
<a name="l00470"></a>00470       <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (<a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(oi-&gt;<a class="code" href="structospf__interface.html#a3032c9001447ca661e19323b6c59aca6">connected</a>),
<a name="l00471"></a>00471                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;addr))
<a name="l00472"></a>00472     {
<a name="l00473"></a>00473       <span class="keywordflow">if</span> ( (match == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) || 
<a name="l00474"></a>00474            (match-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt; oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l00475"></a>00475          )
<a name="l00476"></a>00476         match = oi;
<a name="l00477"></a>00477     }
<a name="l00478"></a>00478     }
<a name="l00479"></a>00479 
<a name="l00480"></a>00480   <span class="keywordflow">return</span> match;
<a name="l00481"></a>00481 }
<a name="l00482"></a>00482 
<a name="l00483"></a>00483 <span class="keywordtype">void</span>
<a name="l00484"></a><a class="code" href="ospf__interface_8h.html#a1f02b0aabef03159360022464beff696">00484</a> <a class="code" href="ospf__interface_8c.html#af7c3f5f89521d13aa8df5bbd19f708dc">ospf_if_stream_set</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00485"></a>00485 {
<a name="l00486"></a>00486   <span class="comment">/* set output fifo queue. */</span>
<a name="l00487"></a>00487   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
<a name="l00488"></a>00488     oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a> = <a class="code" href="ospf__packet_8c.html#aa36c04f312ec3caaafd634a17bec0d27">ospf_fifo_new</a> ();
<a name="l00489"></a>00489 }
<a name="l00490"></a>00490 
<a name="l00491"></a>00491 <span class="keywordtype">void</span>
<a name="l00492"></a><a class="code" href="ospf__interface_8h.html#a6af760835230e02c6ebdf2ceb155f664">00492</a> <a class="code" href="ospf__interface_8c.html#aa284a85ae987e8d59126a36ed88a9839">ospf_if_stream_unset</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00493"></a>00493 {
<a name="l00494"></a>00494   <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>;
<a name="l00495"></a>00495 
<a name="l00496"></a>00496   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a>)
<a name="l00497"></a>00497     {
<a name="l00498"></a>00498      <a class="code" href="ospf__packet_8c.html#aa6e5e26fc14155201203e96b8303de75">ospf_fifo_free</a> (oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a>);
<a name="l00499"></a>00499      oi-&gt;<a class="code" href="structospf__interface.html#af3301bd16fb8e61be5f6ad427d801c31">obuf</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00500"></a>00500 
<a name="l00501"></a>00501      <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a2384f784dd444460f419edcf4e5bfee2">on_write_q</a>)
<a name="l00502"></a>00502        {
<a name="l00503"></a>00503      <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (ospf-&gt;<a class="code" href="structospf.html#ad6a8e34c2e46020e580f22ca21af789b">oi_write_q</a>, oi);
<a name="l00504"></a>00504          <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a>(ospf-&gt;<a class="code" href="structospf.html#ad6a8e34c2e46020e580f22ca21af789b">oi_write_q</a>))
<a name="l00505"></a>00505            <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (ospf-&gt;<a class="code" href="structospf.html#a58c6957a24a39205e5a9f7aeab10e42b">t_write</a>);
<a name="l00506"></a>00506      oi-&gt;<a class="code" href="structospf__interface.html#a2384f784dd444460f419edcf4e5bfee2">on_write_q</a> = 0;
<a name="l00507"></a>00507        }
<a name="l00508"></a>00508     }
<a name="l00509"></a>00509 }
<a name="l00510"></a>00510 
<a name="l00511"></a>00511 
<a name="l00512"></a>00512 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__if__params.html">ospf_if_params</a> *
<a name="l00513"></a><a class="code" href="ospf__interface_8c.html#a93dcbc1b1c40f1eb9fda0a5e48e16e4a">00513</a> <a class="code" href="ospf__interface_8c.html#a93dcbc1b1c40f1eb9fda0a5e48e16e4a">ospf_new_if_params</a> (<span class="keywordtype">void</span>)
<a name="l00514"></a>00514 {
<a name="l00515"></a>00515   <span class="keyword">struct </span><a class="code" href="structospf__if__params.html">ospf_if_params</a> *oip;
<a name="l00516"></a>00516 
<a name="l00517"></a>00517   oip = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1b7d5f092604ac746f743bcd405d0f09">MTYPE_OSPF_IF_PARAMS</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__if__params.html">ospf_if_params</a>));
<a name="l00518"></a>00518 
<a name="l00519"></a>00519   <span class="keywordflow">if</span> (!oip)
<a name="l00520"></a>00520     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00521"></a>00521 
<a name="l00522"></a>00522   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, output_cost_cmd);
<a name="l00523"></a>00523   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, transmit_delay);
<a name="l00524"></a>00524   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, retransmit_interval);
<a name="l00525"></a>00525   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, passive_interface);
<a name="l00526"></a>00526   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, v_hello);
<a name="l00527"></a>00527   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, fast_hello);
<a name="l00528"></a>00528   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, v_wait);
<a name="l00529"></a>00529   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, priority);
<a name="l00530"></a>00530   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);
<a name="l00531"></a>00531   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, <a class="code" href="structospf__if__params.html#ab7c2d84a2f2415f9bb07403d88cd55ec">auth_simple</a>);
<a name="l00532"></a>00532   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, auth_crypt);
<a name="l00533"></a>00533   <a class="code" href="ospf__interface_8h.html#a88a040c444b86d201dc0c151152c328b">UNSET_IF_PARAM</a> (oip, auth_type);
<a name="l00534"></a>00534 
<a name="l00535"></a>00535   oip-&gt;auth_crypt = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00536"></a>00536   
<a name="l00537"></a>00537   <span class="keywordflow">return</span> oip;
<a name="l00538"></a>00538 }
<a name="l00539"></a>00539 
<a name="l00540"></a>00540 <span class="keywordtype">void</span>
<a name="l00541"></a><a class="code" href="ospf__interface_8h.html#a6f9b42afb49e1c199598d3ff847e5a78">00541</a> <a class="code" href="ospf__interface_8c.html#a80ac3b85c25c26fda311449418aa30a5">ospf_del_if_params</a> (<span class="keyword">struct</span> <a class="code" href="structospf__if__params.html">ospf_if_params</a> *oip)
<a name="l00542"></a>00542 {
<a name="l00543"></a>00543   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (oip-&gt;auth_crypt);
<a name="l00544"></a>00544   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba1b7d5f092604ac746f743bcd405d0f09">MTYPE_OSPF_IF_PARAMS</a>, oip);
<a name="l00545"></a>00545 }
<a name="l00546"></a>00546 
<a name="l00547"></a>00547 <span class="keywordtype">void</span>
<a name="l00548"></a><a class="code" href="ospf__interface_8h.html#a45a2d1fff01f367d3bfdffe55b3e800b">00548</a> <a class="code" href="ospf__interface_8c.html#a5df9e932e668dd8f93bcde7ae60e19f9">ospf_free_if_params</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> in_addr addr)
<a name="l00549"></a>00549 {
<a name="l00550"></a>00550   <span class="keyword">struct </span><a class="code" href="structospf__if__params.html">ospf_if_params</a> *oip;
<a name="l00551"></a>00551   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00552"></a>00552   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00553"></a>00553 
<a name="l00554"></a>00554   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00555"></a>00555   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
<a name="l00556"></a>00556   p.prefix = addr;
<a name="l00557"></a>00557   rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp), (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>*)&amp;p);
<a name="l00558"></a>00558   <span class="keywordflow">if</span> (!rn || !rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l00559"></a>00559     <span class="keywordflow">return</span>;
<a name="l00560"></a>00560 
<a name="l00561"></a>00561   oip = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00562"></a>00562   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00563"></a>00563   
<a name="l00564"></a>00564   <span class="keywordflow">if</span> (!<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, output_cost_cmd) &amp;&amp;
<a name="l00565"></a>00565       !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, transmit_delay) &amp;&amp;
<a name="l00566"></a>00566       !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, retransmit_interval) &amp;&amp;
<a name="l00567"></a>00567       !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, passive_interface) &amp;&amp;
<a name="l00568"></a>00568       !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, v_hello) &amp;&amp;
<a name="l00569"></a>00569       !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, fast_hello) &amp;&amp;
<a name="l00570"></a>00570       !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, v_wait) &amp;&amp;
<a name="l00571"></a>00571       !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, priority) &amp;&amp;
<a name="l00572"></a>00572       !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>) &amp;&amp;
<a name="l00573"></a>00573       !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, auth_simple) &amp;&amp;
<a name="l00574"></a>00574       !<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (oip, auth_type) &amp;&amp;
<a name="l00575"></a>00575       <a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (oip-&gt;auth_crypt) == 0)
<a name="l00576"></a>00576     {
<a name="l00577"></a>00577       <a class="code" href="ospf__interface_8c.html#a80ac3b85c25c26fda311449418aa30a5">ospf_del_if_params</a> (oip);
<a name="l00578"></a>00578       rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00579"></a>00579       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00580"></a>00580     }
<a name="l00581"></a>00581 }
<a name="l00582"></a>00582 
<a name="l00583"></a>00583 <span class="keyword">struct </span><a class="code" href="structospf__if__params.html">ospf_if_params</a> *
<a name="l00584"></a><a class="code" href="ospf__interface_8h.html#a652c73bd6ca95dea880e2270318f1635">00584</a> <a class="code" href="ospf__interface_8c.html#aa68e0e7a3491e05febe18ed5a1e3d8c6">ospf_lookup_if_params</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> in_addr addr)
<a name="l00585"></a>00585 {
<a name="l00586"></a>00586   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00587"></a>00587   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00588"></a>00588 
<a name="l00589"></a>00589   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00590"></a>00590   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
<a name="l00591"></a>00591   p.prefix = addr;
<a name="l00592"></a>00592 
<a name="l00593"></a>00593   rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp), (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>*)&amp;p);
<a name="l00594"></a>00594   
<a name="l00595"></a>00595   <span class="keywordflow">if</span> (rn)
<a name="l00596"></a>00596     {
<a name="l00597"></a>00597       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00598"></a>00598       <span class="keywordflow">return</span> rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00599"></a>00599     }
<a name="l00600"></a>00600 
<a name="l00601"></a>00601   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00602"></a>00602 }
<a name="l00603"></a>00603 
<a name="l00604"></a>00604 <span class="keyword">struct </span><a class="code" href="structospf__if__params.html">ospf_if_params</a> *
<a name="l00605"></a><a class="code" href="ospf__interface_8h.html#a371ce23c7417db311ea9074ee36f2de7">00605</a> <a class="code" href="ospf__interface_8c.html#a161621ef4965c5d3b490b3d309fe96f0">ospf_get_if_params</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> in_addr addr)
<a name="l00606"></a>00606 {
<a name="l00607"></a>00607   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00608"></a>00608   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00609"></a>00609 
<a name="l00610"></a>00610   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00611"></a>00611   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
<a name="l00612"></a>00612   p.prefix = addr;
<a name="l00613"></a>00613 
<a name="l00614"></a>00614   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (<a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp), (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>*)&amp;p);
<a name="l00615"></a>00615   
<a name="l00616"></a>00616   <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00617"></a>00617     rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="ospf__interface_8c.html#a93dcbc1b1c40f1eb9fda0a5e48e16e4a">ospf_new_if_params</a> ();
<a name="l00618"></a>00618   <span class="keywordflow">else</span>
<a name="l00619"></a>00619     <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l00620"></a>00620   
<a name="l00621"></a>00621   <span class="keywordflow">return</span> rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l00622"></a>00622 }
<a name="l00623"></a>00623 
<a name="l00624"></a>00624 <span class="keywordtype">void</span>
<a name="l00625"></a><a class="code" href="ospf__interface_8h.html#a76ccfb778fc6544fa880e99078dc2308">00625</a> <a class="code" href="ospf__interface_8c.html#aecbf8217609db5051d31b4b68f3576d5">ospf_if_update_params</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> in_addr addr)
<a name="l00626"></a>00626 {
<a name="l00627"></a>00627   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00628"></a>00628   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00629"></a>00629   
<a name="l00630"></a>00630   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00631"></a>00631     {
<a name="l00632"></a>00632       <span class="keywordflow">if</span> ((oi = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00633"></a>00633     <span class="keywordflow">continue</span>;
<a name="l00634"></a>00634 
<a name="l00635"></a>00635       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;addr))
<a name="l00636"></a>00636     oi-&gt;<a class="code" href="structospf__interface.html#abe19d62cc037130ba97d644980a90e58">params</a> = <a class="code" href="ospf__interface_8c.html#aa68e0e7a3491e05febe18ed5a1e3d8c6">ospf_lookup_if_params</a> (ifp, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>);
<a name="l00637"></a>00637     }
<a name="l00638"></a>00638 }
<a name="l00639"></a>00639 
<a name="l00640"></a>00640 <span class="keywordtype">int</span>
<a name="l00641"></a><a class="code" href="ospf__interface_8h.html#aa15a786a2f75fa3e48d56d03e0dfcd1a">00641</a> <a class="code" href="ospf__interface_8c.html#ad9d89626b50dcfa18d1e920ccdf8b9d7">ospf_if_new_hook</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>)
<a name="l00642"></a>00642 {
<a name="l00643"></a>00643   <span class="keywordtype">int</span> rc = 0;
<a name="l00644"></a>00644 
<a name="l00645"></a>00645   ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4737fd8a64667c56cf4033b1d60579c6">MTYPE_OSPF_IF_INFO</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__if__info.html">ospf_if_info</a>));
<a name="l00646"></a>00646   
<a name="l00647"></a>00647   <a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp) = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l00648"></a>00648   <a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp) = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l00649"></a>00649   
<a name="l00650"></a>00650   <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp) = <a class="code" href="ospf__interface_8c.html#a93dcbc1b1c40f1eb9fda0a5e48e16e4a">ospf_new_if_params</a> ();
<a name="l00651"></a>00651   
<a name="l00652"></a>00652   <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), transmit_delay);
<a name="l00653"></a>00653   <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;transmit_delay = <a class="code" href="ospfd_8h.html#a001a3e3ba627504b9ea467e28e128c98">OSPF_TRANSMIT_DELAY_DEFAULT</a>;
<a name="l00654"></a>00654   
<a name="l00655"></a>00655   <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), retransmit_interval);
<a name="l00656"></a>00656   <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;retransmit_interval = <a class="code" href="ospfd_8h.html#a4f4163a470d237f35753299adc418ba9">OSPF_RETRANSMIT_INTERVAL_DEFAULT</a>;
<a name="l00657"></a>00657 
<a name="l00658"></a>00658   <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), priority);
<a name="l00659"></a>00659   <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;priority = <a class="code" href="ospfd_8h.html#a8357052c03fdd0b83bc58a5ab3dc567a">OSPF_ROUTER_PRIORITY_DEFAULT</a>;
<a name="l00660"></a>00660 
<a name="l00661"></a>00661   <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;mtu_ignore = <a class="code" href="ospfd_8h.html#a5a487fab47cc5cf1abb55d3c6aa1be3a">OSPF_MTU_IGNORE_DEFAULT</a>;
<a name="l00662"></a>00662 
<a name="l00663"></a>00663   <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), v_hello);
<a name="l00664"></a>00664   <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;v_hello = <a class="code" href="ospfd_8h.html#a5837d8ac5cfe0c0e32c2f8687f1ba294">OSPF_HELLO_INTERVAL_DEFAULT</a>;
<a name="l00665"></a>00665 
<a name="l00666"></a>00666   <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), fast_hello);
<a name="l00667"></a>00667   <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;fast_hello = <a class="code" href="ospfd_8h.html#abfbe9c7bb57a203ed24130216fe5e5a5">OSPF_FAST_HELLO_DEFAULT</a>;
<a name="l00668"></a>00668 
<a name="l00669"></a>00669   <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), v_wait);
<a name="l00670"></a>00670   <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;v_wait = <a class="code" href="ospfd_8h.html#af631a311bfefa954c886f7fa3e82dda0">OSPF_ROUTER_DEAD_INTERVAL_DEFAULT</a>;
<a name="l00671"></a>00671 
<a name="l00672"></a>00672   <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), auth_simple);
<a name="l00673"></a>00673   memset (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;auth_simple, 0, <a class="code" href="ospf__packet_8h.html#aa86d20cb35e939c8f584f31b0907531a">OSPF_AUTH_SIMPLE_SIZE</a>);
<a name="l00674"></a>00674   
<a name="l00675"></a>00675   <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), auth_type);
<a name="l00676"></a>00676   <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;auth_type = <a class="code" href="ospfd_8h.html#a24fc895f9bfaee75505b77666b656931">OSPF_AUTH_NOTSET</a>;
<a name="l00677"></a>00677   
<a name="l00678"></a>00678 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00679"></a>00679 <span class="preprocessor"></span>  rc = <a class="code" href="ospf__opaque_8h.html#a815a52d8eba68484eac70aa5c63e41fa">ospf_opaque_new_if</a> (ifp);
<a name="l00680"></a>00680 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00681"></a>00681   <span class="keywordflow">return</span> rc;
<a name="l00682"></a>00682 }
<a name="l00683"></a>00683 
<a name="l00684"></a>00684 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00685"></a><a class="code" href="ospf__interface_8c.html#aad0efbd0f519ad2fb403b065fe29ae4b">00685</a> <a class="code" href="ospf__interface_8c.html#aad0efbd0f519ad2fb403b065fe29ae4b">ospf_if_delete_hook</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>)
<a name="l00686"></a>00686 {
<a name="l00687"></a>00687   <span class="keywordtype">int</span> rc = 0;
<a name="l00688"></a>00688   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l00689"></a>00689 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00690"></a>00690 <span class="preprocessor"></span>  rc = <a class="code" href="ospf__opaque_8h.html#af51358fa8ab4c4ec7ad70a124a7d403c">ospf_opaque_del_if</a> (ifp);
<a name="l00691"></a>00691 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
<a name="l00692"></a>00692 
<a name="l00693"></a>00693   <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp));
<a name="l00694"></a>00694 
<a name="l00695"></a>00695   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l00696"></a>00696     <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l00697"></a>00697       <a class="code" href="ospf__interface_8c.html#a80ac3b85c25c26fda311449418aa30a5">ospf_del_if_params</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
<a name="l00698"></a>00698   <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (<a class="code" href="ospf__interface_8h.html#ae535b760ee0160d3d681c5ab23457815">IF_OIFS_PARAMS</a> (ifp));
<a name="l00699"></a>00699 
<a name="l00700"></a>00700   <a class="code" href="ospf__interface_8c.html#a80ac3b85c25c26fda311449418aa30a5">ospf_del_if_params</a> ((<span class="keyword">struct</span> <a class="code" href="structospf__if__params.html">ospf_if_params</a> *) <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp));
<a name="l00701"></a>00701   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba4737fd8a64667c56cf4033b1d60579c6">MTYPE_OSPF_IF_INFO</a>, ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>);
<a name="l00702"></a>00702   ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00703"></a>00703 
<a name="l00704"></a>00704   <span class="keywordflow">return</span> rc;
<a name="l00705"></a>00705 }
<a name="l00706"></a>00706 
<a name="l00707"></a>00707 <span class="keywordtype">int</span>
<a name="l00708"></a><a class="code" href="ospf__interface_8h.html#a3f76a9d9d7192a6236dad7975b478c52">00708</a> <a class="code" href="ospf__interface_8c.html#a25678bf88909391ee05583a4e73a838d">ospf_if_is_enable</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00709"></a>00709 {
<a name="l00710"></a>00710   <span class="keywordflow">if</span> (!<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>))
<a name="l00711"></a>00711     <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>))
<a name="l00712"></a>00712     <span class="keywordflow">return</span> 1;
<a name="l00713"></a>00713 
<a name="l00714"></a>00714   <span class="keywordflow">return</span> 0;
<a name="l00715"></a>00715 }
<a name="l00716"></a>00716 
<a name="l00717"></a>00717 <span class="keywordtype">void</span>
<a name="l00718"></a><a class="code" href="ospf__interface_8h.html#af1ec82b8d21a8a9ac241fe6ff5e7e234">00718</a> <a class="code" href="ospf__interface_8c.html#a4d1ed1c93fa9a91e2461470344b8a977">ospf_if_set_multicast</a>(<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00719"></a>00719 {
<a name="l00720"></a>00720   <span class="keywordflow">if</span> ((oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> &gt; <a class="code" href="ospf__ism_8h.html#ad5bbcdc6e422bf33064865a4aac0a172">ISM_Loopback</a>) &amp;&amp;
<a name="l00721"></a>00721       (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#ad1bc5e92d8d0f8c50fc99ec0ae3f1772">OSPF_IFTYPE_LOOPBACK</a>) &amp;&amp;
<a name="l00722"></a>00722       (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>) &amp;&amp;
<a name="l00723"></a>00723       (<a class="code" href="ospf__interface_8h.html#abe2e84be7bf9a73954a72fa5fbb728db">OSPF_IF_PASSIVE_STATUS</a>(oi) == <a class="code" href="ospf__interface_8h.html#aa8ac4964fabc3508563c253b72158fad">OSPF_IF_ACTIVE</a>))
<a name="l00724"></a>00724     {
<a name="l00725"></a>00725       <span class="comment">/* The interface should belong to the OSPF-all-routers group. */</span>
<a name="l00726"></a>00726       <span class="keywordflow">if</span> (!<a class="code" href="ospf__interface_8h.html#a3ae9d6ac68815c909cb5bd4f61498072">OI_MEMBER_CHECK</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>) &amp;&amp;
<a name="l00727"></a>00727       (<a class="code" href="ospf__network_8c.html#a474df6c741c2635fd9a6acd599516475">ospf_if_add_allspfrouters</a>(oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>,
<a name="l00728"></a>00728                      oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>) &gt;= 0))
<a name="l00729"></a>00729       <span class="comment">/* Set the flag only if the system call to join succeeded. */</span>
<a name="l00730"></a>00730       <a class="code" href="ospf__interface_8h.html#a1ca2c1bc3588bb126c3856c2b70b86bb">OI_MEMBER_JOINED</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>);
<a name="l00731"></a>00731     }
<a name="l00732"></a>00732   <span class="keywordflow">else</span>
<a name="l00733"></a>00733     {
<a name="l00734"></a>00734       <span class="comment">/* The interface should NOT belong to the OSPF-all-routers group. */</span>
<a name="l00735"></a>00735       <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a3ae9d6ac68815c909cb5bd4f61498072">OI_MEMBER_CHECK</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>))
<a name="l00736"></a>00736         {
<a name="l00737"></a>00737           <span class="comment">/* Only actually drop if this is the last reference */</span>
<a name="l00738"></a>00738           <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a036d7ff75d00837601d3092b6eeb58ea">OI_MEMBER_COUNT</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>) == 1)
<a name="l00739"></a>00739         <a class="code" href="ospf__network_8c.html#a621131b5917c5e3de50cd232c1da04ee">ospf_if_drop_allspfrouters</a> (oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>,
<a name="l00740"></a>00740                                     oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
<a name="l00741"></a>00741       <span class="comment">/* Unset the flag regardless of whether the system call to leave</span>
<a name="l00742"></a>00742 <span class="comment">         the group succeeded, since it&#39;s much safer to assume that</span>
<a name="l00743"></a>00743 <span class="comment">         we are not a member. */</span>
<a name="l00744"></a>00744           <a class="code" href="ospf__interface_8h.html#adfe6ede0f8fd3d4a4e42e4b8b4c4a582">OI_MEMBER_LEFT</a>(oi,<a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da1a4c3684ddae56a371d771435185fbc9">MEMBER_ALLROUTERS</a>);
<a name="l00745"></a>00745         }
<a name="l00746"></a>00746     }
<a name="l00747"></a>00747 
<a name="l00748"></a>00748   <span class="keywordflow">if</span> (((oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a6c044d3118d79d243c1547176a4c5281">OSPF_IFTYPE_BROADCAST</a>) ||
<a name="l00749"></a>00749        (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>)) &amp;&amp;
<a name="l00750"></a>00750       ((oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a7f179a571f4f8e112c0b887f39c87f23">ISM_DR</a>) || (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#a3676782add5a8ecdb86981965ef9f37e">ISM_Backup</a>)) &amp;&amp;
<a name="l00751"></a>00751       (<a class="code" href="ospf__interface_8h.html#abe2e84be7bf9a73954a72fa5fbb728db">OSPF_IF_PASSIVE_STATUS</a>(oi) == <a class="code" href="ospf__interface_8h.html#aa8ac4964fabc3508563c253b72158fad">OSPF_IF_ACTIVE</a>))
<a name="l00752"></a>00752     {
<a name="l00753"></a>00753       <span class="comment">/* The interface should belong to the OSPF-designated-routers group. */</span>
<a name="l00754"></a>00754       <span class="keywordflow">if</span> (!<a class="code" href="ospf__interface_8h.html#a3ae9d6ac68815c909cb5bd4f61498072">OI_MEMBER_CHECK</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>) &amp;&amp;
<a name="l00755"></a>00755       (<a class="code" href="ospf__network_8c.html#aaa4e4123232fc0eefbd6a8425697048a">ospf_if_add_alldrouters</a>(oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>,
<a name="l00756"></a>00756                    oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>) &gt;= 0))
<a name="l00757"></a>00757     <span class="comment">/* Set the flag only if the system call to join succeeded. */</span>
<a name="l00758"></a>00758     <a class="code" href="ospf__interface_8h.html#a1ca2c1bc3588bb126c3856c2b70b86bb">OI_MEMBER_JOINED</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>);
<a name="l00759"></a>00759     }
<a name="l00760"></a>00760   <span class="keywordflow">else</span>
<a name="l00761"></a>00761     {
<a name="l00762"></a>00762       <span class="comment">/* The interface should NOT belong to the OSPF-designated-routers group */</span>
<a name="l00763"></a>00763       <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a3ae9d6ac68815c909cb5bd4f61498072">OI_MEMBER_CHECK</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>))
<a name="l00764"></a>00764         {
<a name="l00765"></a>00765           <span class="comment">/* drop only if last reference */</span>
<a name="l00766"></a>00766           <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8h.html#a036d7ff75d00837601d3092b6eeb58ea">OI_MEMBER_COUNT</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>) == 1)
<a name="l00767"></a>00767         <a class="code" href="ospf__network_8c.html#ab2ab03d8d8550be5794b6cd5d98703af">ospf_if_drop_alldrouters</a>(oi-&gt;<a class="code" href="structospf__interface.html#a159ae1c542016fc78f68c3e39a1b132e">ospf</a>, oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>, oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
<a name="l00768"></a>00768           
<a name="l00769"></a>00769       <span class="comment">/* Unset the flag regardless of whether the system call to leave</span>
<a name="l00770"></a>00770 <span class="comment">         the group succeeded, since it&#39;s much safer to assume that</span>
<a name="l00771"></a>00771 <span class="comment">         we are not a member. */</span>
<a name="l00772"></a>00772           <a class="code" href="ospf__interface_8h.html#adfe6ede0f8fd3d4a4e42e4b8b4c4a582">OI_MEMBER_LEFT</a>(oi, <a class="code" href="ospf__interface_8h.html#a157d5577a5b2f5986037d0d09c7dc77da9147ef980218375b970ea2ffe3ca013b">MEMBER_DROUTERS</a>);
<a name="l00773"></a>00773         }
<a name="l00774"></a>00774     }
<a name="l00775"></a>00775 }
<a name="l00776"></a>00776 
<a name="l00777"></a>00777 <span class="keywordtype">int</span>
<a name="l00778"></a><a class="code" href="ospf__interface_8h.html#a5877d19945034e35e52ef208e7fb5196">00778</a> <a class="code" href="ospf__interface_8c.html#a5a63d5d3af1629d69c380eb09f3e8b7b">ospf_if_up</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00779"></a>00779 {
<a name="l00780"></a>00780   <span class="keywordflow">if</span> (oi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00781"></a>00781     <span class="keywordflow">return</span> 0;
<a name="l00782"></a>00782 
<a name="l00783"></a>00783   <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#ad1bc5e92d8d0f8c50fc99ec0ae3f1772">OSPF_IFTYPE_LOOPBACK</a>)
<a name="l00784"></a>00784     <a class="code" href="ospf__ism_8h.html#a92d8b8f5e3c324698ef17d8ab3ee9781">OSPF_ISM_EVENT_SCHEDULE</a> (oi, <a class="code" href="ospf__ism_8h.html#acf10d53400c12658dc3b67f301724881">ISM_LoopInd</a>);
<a name="l00785"></a>00785   <span class="keywordflow">else</span>
<a name="l00786"></a>00786     {
<a name="l00787"></a>00787       <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l00788"></a>00788       <span class="keywordflow">if</span> (ospf != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00789"></a>00789         <a class="code" href="ospf__network_8c.html#a646b5cb4e4e7e52753082f4fd6ccf553">ospf_adjust_sndbuflen</a> (ospf, oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
<a name="l00790"></a>00790       <span class="keywordflow">else</span>
<a name="l00791"></a>00791         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: ospf_lookup() returned NULL&quot;</span>, __func__);
<a name="l00792"></a>00792       <a class="code" href="ospf__interface_8c.html#af7c3f5f89521d13aa8df5bbd19f708dc">ospf_if_stream_set</a> (oi);
<a name="l00793"></a>00793       <a class="code" href="ospf__ism_8h.html#a92d8b8f5e3c324698ef17d8ab3ee9781">OSPF_ISM_EVENT_SCHEDULE</a> (oi, <a class="code" href="ospf__ism_8h.html#a62e1abe21aa53de288bc8b8566c481df">ISM_InterfaceUp</a>);
<a name="l00794"></a>00794     }
<a name="l00795"></a>00795 
<a name="l00796"></a>00796   <span class="keywordflow">return</span> 1;
<a name="l00797"></a>00797 }
<a name="l00798"></a>00798 
<a name="l00799"></a>00799 <span class="keywordtype">int</span>
<a name="l00800"></a><a class="code" href="ospf__interface_8h.html#a8c2b6ac010817517e078740e68faa5f5">00800</a> <a class="code" href="ospf__interface_8c.html#ac40adc9d92baa831a8ea1cde67defbb2">ospf_if_down</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00801"></a>00801 {
<a name="l00802"></a>00802   <span class="keywordflow">if</span> (oi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00803"></a>00803     <span class="keywordflow">return</span> 0;
<a name="l00804"></a>00804 
<a name="l00805"></a>00805   <a class="code" href="ospf__ism_8h.html#a49b78d0f7b9cbc604466a345265bd846">OSPF_ISM_EVENT_EXECUTE</a> (oi, <a class="code" href="ospf__ism_8h.html#a97b345bfc32a7b6ad1fd6ff1257a7b90">ISM_InterfaceDown</a>);
<a name="l00806"></a>00806   <span class="comment">/* Shutdown packet reception and sending */</span>
<a name="l00807"></a>00807   <a class="code" href="ospf__interface_8c.html#aa284a85ae987e8d59126a36ed88a9839">ospf_if_stream_unset</a> (oi);
<a name="l00808"></a>00808 
<a name="l00809"></a>00809   <span class="keywordflow">return</span> 1;
<a name="l00810"></a>00810 }
<a name="l00811"></a>00811 
<a name="l00812"></a>00812 
<a name="l00813"></a>00813 <span class="comment">/* Virtual Link related functions. */</span>
<a name="l00814"></a>00814 
<a name="l00815"></a>00815 <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *
<a name="l00816"></a><a class="code" href="ospf__interface_8h.html#ab6849b32e8c56b34e713259bb8c51f14">00816</a> <a class="code" href="ospf__interface_8c.html#a82bbc770f1fe3cb13b52f7df3f13468f">ospf_vl_data_new</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>, <span class="keyword">struct</span> in_addr <a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>)
<a name="l00817"></a>00817 {
<a name="l00818"></a>00818   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l00819"></a>00819 
<a name="l00820"></a>00820   vl_data = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9dbfb66bd07b3619ef05e424e040aa98">MTYPE_OSPF_VL_DATA</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a>));
<a name="l00821"></a>00821 
<a name="l00822"></a>00822   vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>.s_addr = vl_peer.s_addr;
<a name="l00823"></a>00823   vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a> = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l00824"></a>00824   vl_data-&gt;<a class="code" href="structospf__vl__data.html#a19311dc3fcc14ddc73298a44b16f23da">format</a> = area-&gt;<a class="code" href="structospf__area.html#a83fcfc9add37df9fa90e4cb142ff5b5a">format</a>;
<a name="l00825"></a>00825 
<a name="l00826"></a>00826   <span class="keywordflow">return</span> vl_data;
<a name="l00827"></a>00827 }
<a name="l00828"></a>00828 
<a name="l00829"></a>00829 <span class="keywordtype">void</span>
<a name="l00830"></a><a class="code" href="ospf__interface_8h.html#a13023c2eb3405638c378f8a6747aa077">00830</a> <a class="code" href="ospf__interface_8c.html#aaf492b692845df0821f43b0ea0c1508f">ospf_vl_data_free</a> (<span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)
<a name="l00831"></a>00831 {
<a name="l00832"></a>00832   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9dbfb66bd07b3619ef05e424e040aa98">MTYPE_OSPF_VL_DATA</a>, vl_data);
<a name="l00833"></a>00833 }
<a name="l00834"></a>00834 
<a name="l00835"></a><a class="code" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">00835</a> u_int <a class="code" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a> = 0;
<a name="l00836"></a>00836 
<a name="l00837"></a>00837 <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> * 
<a name="l00838"></a><a class="code" href="ospf__interface_8h.html#a1f44bf4b5bf1fde1805c0a89eb96954c">00838</a> <a class="code" href="ospf__interface_8c.html#afe5e7c099f462aecba1c82c27385e47d">ospf_vl_new</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a>)
<a name="l00839"></a>00839 {
<a name="l00840"></a>00840   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> * voi;
<a name="l00841"></a>00841   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> * vi;
<a name="l00842"></a>00842   <span class="keywordtype">char</span>   ifname[<a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a> + 1];
<a name="l00843"></a>00843   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00844"></a>00844   <span class="keyword">struct </span>in_addr area_id;
<a name="l00845"></a>00845   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *co;
<a name="l00846"></a>00846   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00847"></a>00847   
<a name="l00848"></a>00848   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00849"></a>00849     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): Start&quot;</span>);
<a name="l00850"></a>00850   <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a> == <a class="code" href="ospf__interface_8h.html#a6163032f8217dd26f96e3619907c36a0">OSPF_VL_MAX_COUNT</a>)
<a name="l00851"></a>00851     {
<a name="l00852"></a>00852       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00853"></a>00853     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): Alarm: &quot;</span>
<a name="l00854"></a>00854            <span class="stringliteral">&quot;cannot create more than OSPF_MAX_VL_COUNT virtual links&quot;</span>);
<a name="l00855"></a>00855       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00856"></a>00856     }
<a name="l00857"></a>00857 
<a name="l00858"></a>00858   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00859"></a>00859     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): creating pseudo zebra interface&quot;</span>);
<a name="l00860"></a>00860 
<a name="l00861"></a>00861   <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (ifname, <span class="keyword">sizeof</span>(ifname), <span class="stringliteral">&quot;VLINK%d&quot;</span>, <a class="code" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a>);
<a name="l00862"></a>00862   vi = <a class="code" href="if_8c.html#a5a7398837ed51febeaea57200f118fd5">if_create</a> (ifname, <a class="code" href="str_8c.html#afc92d2231e45d19988c7894aa2a07f0c">strnlen</a>(ifname, <span class="keyword">sizeof</span>(ifname)));
<a name="l00863"></a>00863   co = <a class="code" href="if_8c.html#a3f0f3d92c824863a40af915d7f540cc5">connected_new</a> ();
<a name="l00864"></a>00864   co-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a> = vi;
<a name="l00865"></a>00865   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (vi-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, co);
<a name="l00866"></a>00866 
<a name="l00867"></a>00867   p = <a class="code" href="prefix_8c.html#af674876d8d874e88225f559322d797ac">prefix_ipv4_new</a> ();
<a name="l00868"></a>00868   p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00869"></a>00869   p-&gt;prefix.s_addr = 0;
<a name="l00870"></a>00870   p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = 0;
<a name="l00871"></a>00871  
<a name="l00872"></a>00872   co-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a> = (<span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *)p;
<a name="l00873"></a>00873   
<a name="l00874"></a>00874   voi = <a class="code" href="ospf__interface_8c.html#af4a1a23e75bb79a0feaa1c26b0b989e5">ospf_if_new</a> (ospf, vi, co-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>);
<a name="l00875"></a>00875   <span class="keywordflow">if</span> (voi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00876"></a>00876     {
<a name="l00877"></a>00877       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00878"></a>00878     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): Alarm: OSPF int structure is not created&quot;</span>);
<a name="l00879"></a>00879       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00880"></a>00880     }
<a name="l00881"></a>00881   voi-&gt;<a class="code" href="structospf__interface.html#a3032c9001447ca661e19323b6c59aca6">connected</a> = co;
<a name="l00882"></a>00882   voi-&gt;<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a> = vl_data;
<a name="l00883"></a>00883   voi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = <a class="code" href="ospf__interface_8h.html#adaa609854f279874b7bfaa53ed6a1a1c">OSPF_VL_MTU</a>;
<a name="l00884"></a>00884   voi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> = <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>;
<a name="l00885"></a>00885 
<a name="l00886"></a>00886   <a class="code" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a>++;
<a name="l00887"></a>00887   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00888"></a>00888     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): Created name: %s&quot;</span>, ifname);
<a name="l00889"></a>00889   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00890"></a>00890     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): set if-&gt;name to %s&quot;</span>, vi-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00891"></a>00891 
<a name="l00892"></a>00892   area_id.s_addr = 0;
<a name="l00893"></a>00893   area = <a class="code" href="ospfd_8c.html#aa215da7694f647944fed0fad86df18c8">ospf_area_get</a> (ospf, area_id, <a class="code" href="ospfd_8h.html#a4693ac54d402184ececda946d167d1ef">OSPF_AREA_ID_FORMAT_ADDRESS</a>);
<a name="l00894"></a>00894   voi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00895"></a>00895 
<a name="l00896"></a>00896   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00897"></a>00897     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): set associated area to the backbone&quot;</span>);
<a name="l00898"></a>00898 
<a name="l00899"></a>00899   <a class="code" href="ospf__neighbor_8c.html#a4260a90c3eb41e2af0d60b4d2ecb3d85">ospf_nbr_add_self</a> (voi);
<a name="l00900"></a>00900   <a class="code" href="ospfd_8c.html#ab5f82e15e585aa9de10f7f426e445872">ospf_area_add_if</a> (voi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, voi);
<a name="l00901"></a>00901 
<a name="l00902"></a>00902   <a class="code" href="ospf__interface_8c.html#af7c3f5f89521d13aa8df5bbd19f708dc">ospf_if_stream_set</a> (voi);
<a name="l00903"></a>00903 
<a name="l00904"></a>00904   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00905"></a>00905     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_new(): Stop&quot;</span>);
<a name="l00906"></a>00906   <span class="keywordflow">return</span> voi;
<a name="l00907"></a>00907 }
<a name="l00908"></a>00908 
<a name="l00909"></a>00909 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00910"></a><a class="code" href="ospf__interface_8c.html#a55878ad33471c4c2965cc97cd313c988">00910</a> <a class="code" href="ospf__interface_8c.html#a55878ad33471c4c2965cc97cd313c988">ospf_vl_if_delete</a> (<span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)
<a name="l00911"></a>00911 {
<a name="l00912"></a>00912   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>;
<a name="l00913"></a>00913   vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr = 0;
<a name="l00914"></a>00914   vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = 0;
<a name="l00915"></a>00915   <a class="code" href="ospf__interface_8c.html#aa06699fd3d9034f239d51f2ea6098b3b">ospf_if_free</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>);
<a name="l00916"></a>00916   <a class="code" href="if_8c.html#a705a02a3d76b6a98b47957dadcef66e1">if_delete</a> (ifp);
<a name="l00917"></a>00917   <a class="code" href="ospf__interface_8c.html#af047c884d1feaae67a6f3a701a42d512">vlink_count</a>--;
<a name="l00918"></a>00918 }
<a name="l00919"></a>00919 
<a name="l00920"></a>00920 <span class="comment">/* Look up vl_data for given peer, optionally qualified to be in the</span>
<a name="l00921"></a>00921 <span class="comment"> * specified area. NULL area returns first found..</span>
<a name="l00922"></a>00922 <span class="comment"> */</span>
<a name="l00923"></a>00923 <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *
<a name="l00924"></a><a class="code" href="ospf__interface_8h.html#a525a41296ae08a4003ac839dec516875">00924</a> <a class="code" href="ospf__interface_8c.html#a2c499a47d45e763d71f9b8ff41456156">ospf_vl_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>,
<a name="l00925"></a>00925                 <span class="keyword">struct</span> in_addr <a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>)
<a name="l00926"></a>00926 {
<a name="l00927"></a>00927   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l00928"></a>00928   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00929"></a>00929   
<a name="l00930"></a>00930   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00931"></a>00931     {
<a name="l00932"></a>00932       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: Looking for %s&quot;</span>, __func__, inet_ntoa (vl_peer));
<a name="l00933"></a>00933       <span class="keywordflow">if</span> (area)
<a name="l00934"></a>00934         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: in area %s&quot;</span>, __func__, inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l00935"></a>00935     }
<a name="l00936"></a>00936   
<a name="l00937"></a>00937   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, vl_data))
<a name="l00938"></a>00938     {
<a name="l00939"></a>00939       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00940"></a>00940         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: VL %s, peer %s&quot;</span>, __func__,
<a name="l00941"></a>00941                     vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
<a name="l00942"></a>00942                     inet_ntoa (vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>));
<a name="l00943"></a>00943       
<a name="l00944"></a>00944       <span class="keywordflow">if</span> (area &amp;&amp; !<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>, &amp;area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>))
<a name="l00945"></a>00945         <span class="keywordflow">continue</span>;
<a name="l00946"></a>00946       
<a name="l00947"></a>00947       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>, &amp;vl_peer))
<a name="l00948"></a>00948         <span class="keywordflow">return</span> vl_data;
<a name="l00949"></a>00949     }
<a name="l00950"></a>00950 
<a name="l00951"></a>00951   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00952"></a>00952 }
<a name="l00953"></a>00953 
<a name="l00954"></a>00954 <span class="keyword">static</span> <span class="keywordtype">void</span> 
<a name="l00955"></a><a class="code" href="ospf__interface_8c.html#a0b591bec8466506aecc3089b36f9744c">00955</a> <a class="code" href="ospf__interface_8c.html#a0b591bec8466506aecc3089b36f9744c">ospf_vl_shutdown</a> (<span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)
<a name="l00956"></a>00956 {
<a name="l00957"></a>00957   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00958"></a>00958 
<a name="l00959"></a>00959   <span class="keywordflow">if</span> ((oi = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00960"></a>00960     <span class="keywordflow">return</span>;
<a name="l00961"></a>00961 
<a name="l00962"></a>00962   oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr = 0;
<a name="l00963"></a>00963   oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = 0;
<a name="l00964"></a>00964 
<a name="l00965"></a>00965   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>, IFF_UP);
<a name="l00966"></a>00966   <span class="comment">/* OSPF_ISM_EVENT_SCHEDULE (oi, ISM_InterfaceDown); */</span>
<a name="l00967"></a>00967   <a class="code" href="ospf__ism_8h.html#a49b78d0f7b9cbc604466a345265bd846">OSPF_ISM_EVENT_EXECUTE</a> (oi, <a class="code" href="ospf__ism_8h.html#a97b345bfc32a7b6ad1fd6ff1257a7b90">ISM_InterfaceDown</a>);
<a name="l00968"></a>00968 }
<a name="l00969"></a>00969 
<a name="l00970"></a>00970 <span class="keywordtype">void</span>
<a name="l00971"></a><a class="code" href="ospf__interface_8h.html#ac418ccc162771fa2339f027ff2086b71">00971</a> <a class="code" href="ospf__interface_8c.html#a17311e1f9bbc8227373e311db39c76be">ospf_vl_add</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a>)
<a name="l00972"></a>00972 {
<a name="l00973"></a>00973   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, vl_data);
<a name="l00974"></a>00974 <span class="preprocessor">#ifdef HAVE_SNMP</span>
<a name="l00975"></a>00975 <span class="preprocessor"></span>  <a class="code" href="ospf__snmp_8h.html#aa8d32930417e294b53dccf3fa7fbfaa8">ospf_snmp_vl_add</a> (vl_data);
<a name="l00976"></a>00976 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
<a name="l00977"></a>00977 }
<a name="l00978"></a>00978 
<a name="l00979"></a>00979 <span class="keywordtype">void</span>
<a name="l00980"></a><a class="code" href="ospf__interface_8h.html#a0b97c900d06d684da965b3320b078619">00980</a> <a class="code" href="ospf__interface_8c.html#a9feb69dbfbf6c28344a5920b2e21e5ff">ospf_vl_delete</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>, <span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a>)
<a name="l00981"></a>00981 {
<a name="l00982"></a>00982   <a class="code" href="ospf__interface_8c.html#a0b591bec8466506aecc3089b36f9744c">ospf_vl_shutdown</a> (vl_data);
<a name="l00983"></a>00983   <a class="code" href="ospf__interface_8c.html#a55878ad33471c4c2965cc97cd313c988">ospf_vl_if_delete</a> (vl_data);
<a name="l00984"></a>00984 
<a name="l00985"></a>00985 <span class="preprocessor">#ifdef HAVE_SNMP</span>
<a name="l00986"></a>00986 <span class="preprocessor"></span>  <a class="code" href="ospf__snmp_8h.html#ab3ed2f8865147118d24a3b4596121a10">ospf_snmp_vl_delete</a> (vl_data);
<a name="l00987"></a>00987 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
<a name="l00988"></a>00988   <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, vl_data);
<a name="l00989"></a>00989 
<a name="l00990"></a>00990   <a class="code" href="ospf__interface_8c.html#aaf492b692845df0821f43b0ea0c1508f">ospf_vl_data_free</a> (vl_data);
<a name="l00991"></a>00991 }
<a name="l00992"></a>00992 
<a name="l00993"></a>00993 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00994"></a><a class="code" href="ospf__interface_8c.html#a995bc245cdccadc6a217fb7d3dafef6f">00994</a> <a class="code" href="ospf__interface_8c.html#a995bc245cdccadc6a217fb7d3dafef6f">ospf_vl_set_params</a> (<span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *<a class="code" href="structospf__interface.html#a78d2dfea28a4b72d89b194cf6a94cae1">vl_data</a>, <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v)
<a name="l00995"></a>00995 {
<a name="l00996"></a>00996   <span class="keywordtype">int</span> changed = 0;
<a name="l00997"></a>00997   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *voi;
<a name="l00998"></a>00998   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00999"></a>00999   <span class="keyword">struct </span><a class="code" href="structvertex__parent.html">vertex_parent</a> *vp = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01000"></a>01000   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l01001"></a>01001   <span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *rl;
<a name="l01002"></a>01002 
<a name="l01003"></a>01003   voi = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>;
<a name="l01004"></a>01004 
<a name="l01005"></a>01005   <span class="keywordflow">if</span> (voi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a> != v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>)
<a name="l01006"></a>01006     {
<a name="l01007"></a>01007      
<a name="l01008"></a>01008       voi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a> = v-&gt;<a class="code" href="structvertex.html#a36c1d8908f2aaa409bb0c6311932596e">distance</a>;
<a name="l01009"></a>01009       changed = 1;
<a name="l01010"></a>01010     }
<a name="l01011"></a>01011 
<a name="l01012"></a>01012   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (v-&gt;<a class="code" href="structvertex.html#a192a1155f44ca7d999a89472292c5dca">parents</a>, node, vp))
<a name="l01013"></a>01013     {
<a name="l01014"></a>01014       vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a> = vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>;
<a name="l01015"></a>01015       vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a> = vp-&gt;<a class="code" href="structvertex__parent.html#ae43a240c573fa1b6a8ba71f5e310b119">nexthop</a>-&gt;<a class="code" href="structvertex__nexthop.html#aba454dedd9b29e5e38e03b3ae6a7b7bf">router</a>;
<a name="l01016"></a>01016       
<a name="l01017"></a>01017       <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(&amp;voi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>,
<a name="l01018"></a>01018                           &amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>))
<a name="l01019"></a>01019         changed = 1;
<a name="l01020"></a>01020         
<a name="l01021"></a>01021       voi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a> = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l01022"></a>01022       voi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ae96988bc8d9612628293c9f4e5b56baa">nexthop</a>.<a class="code" href="structvertex__nexthop.html#aea75e79613953ba21f27f23dc34c6608">oi</a>-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l01023"></a>01023 
<a name="l01024"></a>01024       <span class="keywordflow">break</span>; <span class="comment">/* We take the first interface. */</span>
<a name="l01025"></a>01025     }
<a name="l01026"></a>01026 
<a name="l01027"></a>01027   rl = (<span class="keyword">struct </span><a class="code" href="structrouter__lsa.html">router_lsa</a> *)v-&gt;<a class="code" href="structvertex.html#a1f774526303a80eddf6115484bb0e04a">lsa</a>;
<a name="l01028"></a>01028 
<a name="l01029"></a>01029   <span class="comment">/* use SPF determined backlink index in struct vertex</span>
<a name="l01030"></a>01030 <span class="comment">   * for virtual link destination address</span>
<a name="l01031"></a>01031 <span class="comment">   */</span>
<a name="l01032"></a>01032   if (vp &amp;&amp; vp-&gt;<a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a> &gt;= 0)
<a name="l01033"></a>01033     {
<a name="l01034"></a>01034       <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a>,
<a name="l01035"></a>01035                            &amp;rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[vp-&gt;<a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a>].<a class="code" href="structrouter__lsa.html#add0a1ef10642cde61578a4037bb2ea96">link_data</a>))
<a name="l01036"></a>01036         changed = 1;
<a name="l01037"></a>01037       vl_data-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a> = rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[vp-&gt;<a class="code" href="structvertex__parent.html#a04af92322673f9cf5f91ff0aff895c69">backlink</a>].<a class="code" href="structrouter__lsa.html#add0a1ef10642cde61578a4037bb2ea96">link_data</a>;
<a name="l01038"></a>01038     }
<a name="l01039"></a>01039   <span class="keywordflow">else</span>
<a name="l01040"></a>01040     {
<a name="l01041"></a>01041       <span class="comment">/* This is highly odd, there is no backlink index</span>
<a name="l01042"></a>01042 <span class="comment">       * there should be due to the ospf_spf_has_link() check</span>
<a name="l01043"></a>01043 <span class="comment">       * in SPF. Lets warn and try pick a link anyway.</span>
<a name="l01044"></a>01044 <span class="comment">       */</span>
<a name="l01045"></a>01045       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_vl_set_params: No backlink for %s!&quot;</span>,
<a name="l01046"></a>01046                  vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l01047"></a>01047       <span class="keywordflow">for</span> (i = 0; i &lt; ntohs (rl-&gt;<a class="code" href="structrouter__lsa.html#a444c36e0618d742b4db9c579ce64cbbc">links</a>); i++)
<a name="l01048"></a>01048         {
<a name="l01049"></a>01049           <span class="keywordflow">switch</span> (rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[i].<a class="code" href="structrouter__lsa.html#aa730ac0aec994e853bcd4d52ff285a9e">type</a>)
<a name="l01050"></a>01050             {
<a name="l01051"></a>01051               <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#af8bf6fe51034655bd253facfaaacc0d9">LSA_LINK_TYPE_VIRTUALLINK</a>:
<a name="l01052"></a>01052                 <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01053"></a>01053                   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;found back link through VL&quot;</span>);
<a name="l01054"></a>01054               <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a1731562bead68083ecb572078dcce532">LSA_LINK_TYPE_TRANSIT</a>:
<a name="l01055"></a>01055               <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a2483fa27223921c560eb674fb2ef9005">LSA_LINK_TYPE_POINTOPOINT</a>:
<a name="l01056"></a>01056                 <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a>,
<a name="l01057"></a>01057                                      &amp;rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[i].<a class="code" href="structrouter__lsa.html#add0a1ef10642cde61578a4037bb2ea96">link_data</a>))
<a name="l01058"></a>01058                   changed = 1;
<a name="l01059"></a>01059                 vl_data-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a> = rl-&gt;<a class="code" href="structrouter__lsa.html#ae9faa8b693560dd8c9f3081a689a0c79">link</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structrouter__lsa.html#add0a1ef10642cde61578a4037bb2ea96">link_data</a>;
<a name="l01060"></a>01060             }
<a name="l01061"></a>01061         }
<a name="l01062"></a>01062     }
<a name="l01063"></a>01063     
<a name="l01064"></a>01064   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01065"></a>01065     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s peer address: %s, cost: %d,%schanged&quot;</span>, __func__,
<a name="l01066"></a>01066                vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
<a name="l01067"></a>01067                inet_ntoa(vl_data-&gt;<a class="code" href="structospf__vl__data.html#a768953a21c852dde111066d860883afb">peer_addr</a>),
<a name="l01068"></a>01068                voi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a>,
<a name="l01069"></a>01069                (changed ? <span class="stringliteral">&quot; &quot;</span> : <span class="stringliteral">&quot; un&quot;</span>));
<a name="l01070"></a>01070                
<a name="l01071"></a>01071   <span class="keywordflow">return</span> changed;
<a name="l01072"></a>01072 }
<a name="l01073"></a>01073 
<a name="l01074"></a>01074 
<a name="l01075"></a>01075 <span class="keywordtype">void</span>
<a name="l01076"></a><a class="code" href="ospf__interface_8h.html#aedae860c8d89434636286de17bcfb387">01076</a> <a class="code" href="ospf__interface_8c.html#a5a24594a44bf465fefe438b02f077a20">ospf_vl_up_check</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>, <span class="keyword">struct</span> in_addr rid,
<a name="l01077"></a>01077                   <span class="keyword">struct</span> <a class="code" href="structvertex.html">vertex</a> *v)
<a name="l01078"></a>01078 {
<a name="l01079"></a>01079   <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>;
<a name="l01080"></a>01080   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l01081"></a>01081   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l01082"></a>01082   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01083"></a>01083 
<a name="l01084"></a>01084   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01085"></a>01085     {
<a name="l01086"></a>01086       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check(): Start&quot;</span>);
<a name="l01087"></a>01087       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check(): Router ID is %s&quot;</span>, inet_ntoa (rid));
<a name="l01088"></a>01088       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check(): Area is %s&quot;</span>, inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l01089"></a>01089     }
<a name="l01090"></a>01090 
<a name="l01091"></a>01091   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, vl_data))
<a name="l01092"></a>01092     {
<a name="l01093"></a>01093       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01094"></a>01094     {
<a name="l01095"></a>01095       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: considering VL, %s in area %s&quot;</span>, __func__,
<a name="l01096"></a>01096              vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
<a name="l01097"></a>01097              inet_ntoa (vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>));
<a name="l01098"></a>01098       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: peer ID: %s&quot;</span>, __func__,
<a name="l01099"></a>01099              inet_ntoa (vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>));
<a name="l01100"></a>01100     }
<a name="l01101"></a>01101 
<a name="l01102"></a>01102       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>, &amp;rid) &amp;&amp;
<a name="l01103"></a>01103           <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>, &amp;area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>))
<a name="l01104"></a>01104         {
<a name="l01105"></a>01105           oi = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>;
<a name="l01106"></a>01106           <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ade67771cc67731675f2859e449ffaf12">flags</a>, <a class="code" href="ospf__interface_8h.html#aa89efc5812cb48020241fb638d90bc48">OSPF_VL_FLAG_APPROVED</a>);
<a name="l01107"></a>01107 
<a name="l01108"></a>01108       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01109"></a>01109         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check(): this VL matched&quot;</span>);
<a name="l01110"></a>01110 
<a name="l01111"></a>01111           <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a> == <a class="code" href="ospf__ism_8h.html#ad66e19ab772d9038c5f31fad74cfa113">ISM_Down</a>)
<a name="l01112"></a>01112             {
<a name="l01113"></a>01113           <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01114"></a>01114         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check(): VL is down, waking it up&quot;</span>);
<a name="l01115"></a>01115               <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>, IFF_UP);
<a name="l01116"></a>01116               <a class="code" href="ospf__ism_8h.html#a49b78d0f7b9cbc604466a345265bd846">OSPF_ISM_EVENT_EXECUTE</a>(oi,<a class="code" href="ospf__ism_8h.html#a62e1abe21aa53de288bc8b8566c481df">ISM_InterfaceUp</a>);
<a name="l01117"></a>01117             }
<a name="l01118"></a>01118 
<a name="l01119"></a>01119          <span class="keywordflow">if</span> (<a class="code" href="ospf__interface_8c.html#a995bc245cdccadc6a217fb7d3dafef6f">ospf_vl_set_params</a> (vl_data, v))
<a name="l01120"></a>01120            {
<a name="l01121"></a>01121              <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (ism, ISM_EVENTS))
<a name="l01122"></a>01122                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check: VL cost change,&quot;</span>
<a name="l01123"></a>01123                           <span class="stringliteral">&quot; scheduling router lsa refresh&quot;</span>);
<a name="l01124"></a>01124              <span class="keywordflow">if</span>(ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a>)
<a name="l01125"></a>01125                <a class="code" href="ospf__lsa_8c.html#a66ad8a1fd151b43b11d7ec9650a644bf">ospf_router_lsa_timer_add</a> (ospf-&gt;<a class="code" href="structospf.html#af16c64964298aad9859d5b04503228bd">backbone</a>);
<a name="l01126"></a>01126              <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (ism, ISM_EVENTS))
<a name="l01127"></a>01127                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_vl_up_check: VL cost change, no backbone!&quot;</span>);
<a name="l01128"></a>01128            }
<a name="l01129"></a>01129         }
<a name="l01130"></a>01130     }
<a name="l01131"></a>01131 }
<a name="l01132"></a>01132 
<a name="l01133"></a>01133 <span class="keywordtype">void</span>
<a name="l01134"></a><a class="code" href="ospf__interface_8h.html#abdb8e7e0e60c5b737a5fbe55a7a063d1">01134</a> <a class="code" href="ospf__interface_8c.html#af796502c793492cfea95fc844a1fc9ec">ospf_vl_unapprove</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>)
<a name="l01135"></a>01135 {
<a name="l01136"></a>01136   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l01137"></a>01137   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l01138"></a>01138 
<a name="l01139"></a>01139   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, vl_data))
<a name="l01140"></a>01140     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ade67771cc67731675f2859e449ffaf12">flags</a>, <a class="code" href="ospf__interface_8h.html#aa89efc5812cb48020241fb638d90bc48">OSPF_VL_FLAG_APPROVED</a>);
<a name="l01141"></a>01141 }
<a name="l01142"></a>01142 
<a name="l01143"></a>01143 <span class="keywordtype">void</span>
<a name="l01144"></a><a class="code" href="ospf__interface_8h.html#ac91ba56900382bf7a65b3db570b6cca4">01144</a> <a class="code" href="ospf__interface_8c.html#ab511d3358207a7a075edbdf2492000ce">ospf_vl_shut_unapproved</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>)
<a name="l01145"></a>01145 {
<a name="l01146"></a>01146   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01147"></a>01147   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l01148"></a>01148 
<a name="l01149"></a>01149   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, nnode, vl_data))
<a name="l01150"></a>01150     <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (vl_data-&gt;<a class="code" href="structospf__vl__data.html#ade67771cc67731675f2859e449ffaf12">flags</a>, <a class="code" href="ospf__interface_8h.html#aa89efc5812cb48020241fb638d90bc48">OSPF_VL_FLAG_APPROVED</a>))
<a name="l01151"></a>01151       <a class="code" href="ospf__interface_8c.html#a0b591bec8466506aecc3089b36f9744c">ospf_vl_shutdown</a> (vl_data);
<a name="l01152"></a>01152 }
<a name="l01153"></a>01153 
<a name="l01154"></a>01154 <span class="keywordtype">int</span>
<a name="l01155"></a><a class="code" href="ospf__interface_8h.html#a7a2a72fb51539f6d1d7d9391cef1086b">01155</a> <a class="code" href="ospf__interface_8c.html#a93d2e8b88095d3bf655211da23f5069f">ospf_full_virtual_nbrs</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>)
<a name="l01156"></a>01156 {
<a name="l01157"></a>01157   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01158"></a>01158     {
<a name="l01159"></a>01159       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;counting fully adjacent virtual neighbors in area %s&quot;</span>,
<a name="l01160"></a>01160          inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l01161"></a>01161       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;there are %d of them&quot;</span>, area-&gt;<a class="code" href="structospf__area.html#ab13a3eb52aec5fe41243fa7bef238fbc">full_vls</a>);
<a name="l01162"></a>01162     }
<a name="l01163"></a>01163 
<a name="l01164"></a>01164   <span class="keywordflow">return</span> area-&gt;<a class="code" href="structospf__area.html#ab13a3eb52aec5fe41243fa7bef238fbc">full_vls</a>;
<a name="l01165"></a>01165 }
<a name="l01166"></a>01166 
<a name="l01167"></a>01167 <span class="keywordtype">int</span>
<a name="l01168"></a><a class="code" href="ospf__interface_8h.html#a19760bf749d66692c61a10356398ca90">01168</a> <a class="code" href="ospf__interface_8c.html#a71915e6d4228b82e78728176c3414089">ospf_vls_in_area</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>)
<a name="l01169"></a>01169 {
<a name="l01170"></a>01170   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l01171"></a>01171   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l01172"></a>01172   <span class="keywordtype">int</span> c = 0;
<a name="l01173"></a>01173 
<a name="l01174"></a>01174   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;<a class="code" href="structospf.html#acdf23576e62fa9370cc57b2384acf143">vlinks</a>, node, vl_data))
<a name="l01175"></a>01175     <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>, &amp;area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>))
<a name="l01176"></a>01176       c++;
<a name="l01177"></a>01177 
<a name="l01178"></a>01178   <span class="keywordflow">return</span> c;
<a name="l01179"></a>01179 }
<a name="l01180"></a>01180 
<a name="l01181"></a>01181 
<a name="l01182"></a>01182 <span class="keyword">struct </span><a class="code" href="structcrypt__key.html">crypt_key</a> *
<a name="l01183"></a><a class="code" href="ospf__interface_8h.html#af1baae1459c4e0e11d08c674f7b07fb3">01183</a> <a class="code" href="ospf__interface_8c.html#ab0505d7e03282ccab5b510c2eaa7bccf">ospf_crypt_key_new</a> ()
<a name="l01184"></a>01184 {
<a name="l01185"></a>01185   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba918b6239f3955fd79b57d779548e321f">MTYPE_OSPF_CRYPT_KEY</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcrypt__key.html">crypt_key</a>));
<a name="l01186"></a>01186 }
<a name="l01187"></a>01187 
<a name="l01188"></a>01188 <span class="keywordtype">void</span>
<a name="l01189"></a><a class="code" href="ospf__interface_8h.html#ad187f28dda36b6d47b83c8bee03901a0">01189</a> <a class="code" href="ospf__interface_8c.html#aef64395be396457bcb2d0cb27aca42b1">ospf_crypt_key_add</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *crypt, <span class="keyword">struct</span> <a class="code" href="structcrypt__key.html">crypt_key</a> *ck)
<a name="l01190"></a>01190 {
<a name="l01191"></a>01191   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (crypt, ck);
<a name="l01192"></a>01192 }
<a name="l01193"></a>01193 
<a name="l01194"></a>01194 <span class="keyword">struct </span><a class="code" href="structcrypt__key.html">crypt_key</a> *
<a name="l01195"></a><a class="code" href="ospf__interface_8h.html#aabea14b42350a1a9f7f84f9cc3524b3e">01195</a> <a class="code" href="ospf__interface_8c.html#a5abbe51d3d37c21a4ff6ede7a4253beb">ospf_crypt_key_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *auth_crypt, u_char <a class="code" href="structcrypt__key.html#a4be3a06d74571b9522997b138b135af2">key_id</a>)
<a name="l01196"></a>01196 {
<a name="l01197"></a>01197   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l01198"></a>01198   <span class="keyword">struct </span><a class="code" href="structcrypt__key.html">crypt_key</a> *ck;
<a name="l01199"></a>01199 
<a name="l01200"></a>01200   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (auth_crypt, node, ck))
<a name="l01201"></a>01201     <span class="keywordflow">if</span> (ck-&gt;<a class="code" href="structcrypt__key.html#a4be3a06d74571b9522997b138b135af2">key_id</a> == key_id)
<a name="l01202"></a>01202       <span class="keywordflow">return</span> ck;
<a name="l01203"></a>01203 
<a name="l01204"></a>01204   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01205"></a>01205 }
<a name="l01206"></a>01206 
<a name="l01207"></a>01207 <span class="keywordtype">int</span>
<a name="l01208"></a><a class="code" href="ospf__interface_8h.html#ad0bc72f1d0e06ea35f43600e9050e743">01208</a> <a class="code" href="ospf__interface_8c.html#af5d27209a1f6bc949897a8de7c00c424">ospf_crypt_key_delete</a> (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *auth_crypt, u_char <a class="code" href="structcrypt__key.html#a4be3a06d74571b9522997b138b135af2">key_id</a>)
<a name="l01209"></a>01209 {
<a name="l01210"></a>01210   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01211"></a>01211   <span class="keyword">struct </span><a class="code" href="structcrypt__key.html">crypt_key</a> *ck;
<a name="l01212"></a>01212 
<a name="l01213"></a>01213   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (auth_crypt, node, nnode, ck))
<a name="l01214"></a>01214     {
<a name="l01215"></a>01215       <span class="keywordflow">if</span> (ck-&gt;<a class="code" href="structcrypt__key.html#a4be3a06d74571b9522997b138b135af2">key_id</a> == key_id)
<a name="l01216"></a>01216         {
<a name="l01217"></a>01217           <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (auth_crypt, ck);
<a name="l01218"></a>01218           <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba918b6239f3955fd79b57d779548e321f">MTYPE_OSPF_CRYPT_KEY</a>, ck);
<a name="l01219"></a>01219           <span class="keywordflow">return</span> 1;
<a name="l01220"></a>01220         }
<a name="l01221"></a>01221     }
<a name="l01222"></a>01222 
<a name="l01223"></a>01223   <span class="keywordflow">return</span> 0;
<a name="l01224"></a>01224 }
<a name="l01225"></a>01225 
<a name="l01226"></a>01226 u_char
<a name="l01227"></a><a class="code" href="ospf__interface_8h.html#a492149baf1a156aaeb909b62384fc7ef">01227</a> <a class="code" href="ospf__interface_8c.html#a492149baf1a156aaeb909b62384fc7ef">ospf_default_iftype</a>(<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l01228"></a>01228 {
<a name="l01229"></a>01229   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a61aed2ccc7ec47d6822546664ea77f0c">if_is_pointopoint</a> (ifp))
<a name="l01230"></a>01230     <span class="keywordflow">return</span> <a class="code" href="ospf__interface_8h.html#a7722c258e67d21a5c6f367811664cccb">OSPF_IFTYPE_POINTOPOINT</a>;
<a name="l01231"></a>01231   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
<a name="l01232"></a>01232     <span class="keywordflow">return</span> <a class="code" href="ospf__interface_8h.html#ad1bc5e92d8d0f8c50fc99ec0ae3f1772">OSPF_IFTYPE_LOOPBACK</a>;
<a name="l01233"></a>01233   <span class="keywordflow">else</span>
<a name="l01234"></a>01234     <span class="keywordflow">return</span> <a class="code" href="ospf__interface_8h.html#a6c044d3118d79d243c1547176a4c5281">OSPF_IFTYPE_BROADCAST</a>;
<a name="l01235"></a>01235 }
<a name="l01236"></a>01236 
<a name="l01237"></a>01237 <span class="keywordtype">void</span>
<a name="l01238"></a><a class="code" href="ospf__interface_8h.html#a42c528838efca4371251ba87bec8ef66">01238</a> <a class="code" href="ospf__interface_8c.html#a75e87dac29a042efb9a7a699ad209fd6">ospf_if_init</a> ()
<a name="l01239"></a>01239 {
<a name="l01240"></a>01240   <span class="comment">/* Initialize Zebra interface data structure. */</span>
<a name="l01241"></a>01241   <a class="code" href="if_8c.html#ac78cad8082fa880e50b2c945f8a3c33d">if_init</a> ();
<a name="l01242"></a>01242   <a class="code" href="ospfd_8c.html#a00fd6054739908ab616f0bacdc6d0f64">om</a>-&gt;<a class="code" href="structospf__master.html#a03ff051ede9d089f9ca6cfc6262a5634">iflist</a> = <a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>;
<a name="l01243"></a>01243   <a class="code" href="if_8c.html#af0a4090e849fe0dff798e976d8fa2482">if_add_hook</a> (<a class="code" href="if_8h.html#a4185c142d0c9619a6cab25061dfd50f3">IF_NEW_HOOK</a>, <a class="code" href="ospf__interface_8c.html#ad9d89626b50dcfa18d1e920ccdf8b9d7">ospf_if_new_hook</a>);
<a name="l01244"></a>01244   <a class="code" href="if_8c.html#af0a4090e849fe0dff798e976d8fa2482">if_add_hook</a> (<a class="code" href="if_8h.html#afa0a12fa62fd3fd8b5fb9a1b917f3afa">IF_DELETE_HOOK</a>, <a class="code" href="ospf__interface_8c.html#aad0efbd0f519ad2fb403b065fe29ae4b">ospf_if_delete_hook</a>);
<a name="l01245"></a>01245 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__interface_8c.html">ospf_interface.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:07 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
