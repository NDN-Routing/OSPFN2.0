<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/if_sysctl.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('if__sysctl_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">zebra/if_sysctl.c</div>  </div>
</div>
<div class="contents">
<a href="if__sysctl_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Get interface&#39;s address and mask information by sysctl() function.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1997, 98 Kunihiro Ishiguro</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="connected_8h.html">connected.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="ioctl_8h.html">ioctl.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="rt_8h.html">zebra/rt.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="kernel__socket_8h.html">zebra/kernel_socket.h</a>&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keywordtype">void</span>
<a name="l00037"></a><a class="code" href="if__sysctl_8c.html#a8d1660e9fb7739de19fe130ca8903fdc">00037</a> <a class="code" href="if__sysctl_8c.html#a8d1660e9fb7739de19fe130ca8903fdc">ifstat_update_sysctl</a> (<span class="keywordtype">void</span>)
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039   caddr_t ref, buf, end;
<a name="l00040"></a>00040   <span class="keywordtype">size_t</span> bufsiz;
<a name="l00041"></a>00041   <span class="keyword">struct </span>if_msghdr *ifm;
<a name="l00042"></a>00042   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#define MIBSIZ 6</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>  <span class="keywordtype">int</span> <a class="code" href="ipforward__sysctl_8c.html#a86a49565c28c30b8212709033abdfea4">mib</a>[<a class="code" href="if__sysctl_8c.html#a7cf7251f957d6aad433acc9e013accc6">MIBSIZ</a>] =
<a name="l00046"></a>00046   { 
<a name="l00047"></a>00047     CTL_NET,
<a name="l00048"></a>00048     PF_ROUTE,
<a name="l00049"></a>00049     0,
<a name="l00050"></a>00050     0, <span class="comment">/*  AF_INET &amp; AF_INET6 */</span>
<a name="l00051"></a>00051     NET_RT_IFLIST,
<a name="l00052"></a>00052     0 
<a name="l00053"></a>00053   };
<a name="l00054"></a>00054 
<a name="l00055"></a>00055   <span class="comment">/* Query buffer size. */</span>
<a name="l00056"></a>00056   <span class="keywordflow">if</span> (sysctl (mib, <a class="code" href="if__sysctl_8c.html#a7cf7251f957d6aad433acc9e013accc6">MIBSIZ</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;bufsiz, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0) &lt; 0) 
<a name="l00057"></a>00057     {
<a name="l00058"></a>00058       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;sysctl() error by %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00059"></a>00059       <span class="keywordflow">return</span>;
<a name="l00060"></a>00060     }
<a name="l00061"></a>00061 
<a name="l00062"></a>00062   <span class="comment">/* We free this memory at the end of this function. */</span>
<a name="l00063"></a>00063   ref = buf = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, bufsiz);
<a name="l00064"></a>00064 
<a name="l00065"></a>00065   <span class="comment">/* Fetch interface informations into allocated buffer. */</span>
<a name="l00066"></a>00066   <span class="keywordflow">if</span> (sysctl (mib, <a class="code" href="if__sysctl_8c.html#a7cf7251f957d6aad433acc9e013accc6">MIBSIZ</a>, buf, &amp;bufsiz, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0) &lt; 0) 
<a name="l00067"></a>00067     {
<a name="l00068"></a>00068       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;sysctl error by %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00069"></a>00069       <span class="keywordflow">return</span>;
<a name="l00070"></a>00070     }
<a name="l00071"></a>00071 
<a name="l00072"></a>00072   <span class="comment">/* Parse both interfaces and addresses. */</span>
<a name="l00073"></a>00073   <span class="keywordflow">for</span> (end = buf + bufsiz; buf &lt; end; buf += ifm-&gt;ifm_msglen) 
<a name="l00074"></a>00074     {
<a name="l00075"></a>00075       ifm = (<span class="keyword">struct </span>if_msghdr *) buf;
<a name="l00076"></a>00076       <span class="keywordflow">if</span> (ifm-&gt;ifm_type == RTM_IFINFO)
<a name="l00077"></a>00077     {
<a name="l00078"></a>00078       ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (ifm-&gt;ifm_index);
<a name="l00079"></a>00079       <span class="keywordflow">if</span> (ifp)
<a name="l00080"></a>00080         ifp-&gt;stats = ifm-&gt;ifm_data;
<a name="l00081"></a>00081     }
<a name="l00082"></a>00082     }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084   <span class="comment">/* Free sysctl buffer. */</span>
<a name="l00085"></a>00085   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, ref);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   <span class="keywordflow">return</span>;
<a name="l00088"></a>00088 }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="comment">/* Interface listing up function using sysctl(). */</span>
<a name="l00091"></a>00091 <span class="keywordtype">void</span>
<a name="l00092"></a><a class="code" href="if__sysctl_8c.html#a566ef48adbf48e92f6e0044e317b0d99">00092</a> <a class="code" href="if__ioctl_8c.html#a566ef48adbf48e92f6e0044e317b0d99">interface_list</a> ()
<a name="l00093"></a>00093 {
<a name="l00094"></a>00094   caddr_t ref, buf, end;
<a name="l00095"></a>00095   <span class="keywordtype">size_t</span> bufsiz;
<a name="l00096"></a>00096   <span class="keyword">struct </span>if_msghdr *ifm;
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 <span class="preprocessor">#define MIBSIZ 6</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>  <span class="keywordtype">int</span> <a class="code" href="ipforward__sysctl_8c.html#a86a49565c28c30b8212709033abdfea4">mib</a>[<a class="code" href="if__sysctl_8c.html#a7cf7251f957d6aad433acc9e013accc6">MIBSIZ</a>] =
<a name="l00100"></a>00100   { 
<a name="l00101"></a>00101     CTL_NET,
<a name="l00102"></a>00102     PF_ROUTE,
<a name="l00103"></a>00103     0,
<a name="l00104"></a>00104     0, <span class="comment">/*  AF_INET &amp; AF_INET6 */</span>
<a name="l00105"></a>00105     NET_RT_IFLIST,
<a name="l00106"></a>00106     0 
<a name="l00107"></a>00107   };
<a name="l00108"></a>00108 
<a name="l00109"></a>00109   <span class="comment">/* Query buffer size. */</span>
<a name="l00110"></a>00110   <span class="keywordflow">if</span> (sysctl (mib, <a class="code" href="if__sysctl_8c.html#a7cf7251f957d6aad433acc9e013accc6">MIBSIZ</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;bufsiz, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0) &lt; 0) 
<a name="l00111"></a>00111     {
<a name="l00112"></a>00112       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;sysctl() error by %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00113"></a>00113       <span class="keywordflow">return</span>;
<a name="l00114"></a>00114     }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116   <span class="comment">/* We free this memory at the end of this function. */</span>
<a name="l00117"></a>00117   ref = buf = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, bufsiz);
<a name="l00118"></a>00118 
<a name="l00119"></a>00119   <span class="comment">/* Fetch interface informations into allocated buffer. */</span>
<a name="l00120"></a>00120   <span class="keywordflow">if</span> (sysctl (mib, <a class="code" href="if__sysctl_8c.html#a7cf7251f957d6aad433acc9e013accc6">MIBSIZ</a>, buf, &amp;bufsiz, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0) &lt; 0) 
<a name="l00121"></a>00121     {
<a name="l00122"></a>00122       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;sysctl error by %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00123"></a>00123       <span class="keywordflow">return</span>;
<a name="l00124"></a>00124     }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">/* Parse both interfaces and addresses. */</span>
<a name="l00127"></a>00127   <span class="keywordflow">for</span> (end = buf + bufsiz; buf &lt; end; buf += ifm-&gt;ifm_msglen) 
<a name="l00128"></a>00128     {
<a name="l00129"></a>00129       ifm = (<span class="keyword">struct </span>if_msghdr *) buf;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131       <span class="keywordflow">switch</span> (ifm-&gt;ifm_type) 
<a name="l00132"></a>00132     {
<a name="l00133"></a>00133     <span class="keywordflow">case</span> RTM_IFINFO:
<a name="l00134"></a>00134       <a class="code" href="kernel__socket_8c.html#aa77e17c2a468e19c7bf0935bb78b6b48">ifm_read</a> (ifm);
<a name="l00135"></a>00135       <span class="keywordflow">break</span>;
<a name="l00136"></a>00136     <span class="keywordflow">case</span> RTM_NEWADDR:
<a name="l00137"></a>00137       <a class="code" href="kernel__socket_8c.html#a13d417744f4455ef28100a3907b3a7dd">ifam_read</a> ((<span class="keyword">struct</span> ifa_msghdr *) ifm);
<a name="l00138"></a>00138       <span class="keywordflow">break</span>;
<a name="l00139"></a>00139     <span class="keywordflow">default</span>:
<a name="l00140"></a>00140       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;interfaces_list(): unexpected message type&quot;</span>);
<a name="l00141"></a>00141       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, ref);
<a name="l00142"></a>00142       <span class="keywordflow">return</span>;
<a name="l00143"></a>00143       <span class="keywordflow">break</span>;
<a name="l00144"></a>00144     }
<a name="l00145"></a>00145     }
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   <span class="comment">/* Free sysctl buffer. */</span>
<a name="l00148"></a>00148   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, ref);
<a name="l00149"></a>00149 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="if__sysctl_8c.html">if_sysctl.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
