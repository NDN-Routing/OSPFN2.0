<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfclient/ospfclient.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospfclient_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ospfclient/ospfclient.c</div>  </div>
</div>
<div class="contents">
<a href="ospfclient_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Simple program to demonstrate how OSPF API can be used. This</span>
<a name="l00003"></a>00003 <span class="comment"> * application retrieves the LSDB from the OSPF daemon and then</span>
<a name="l00004"></a>00004 <span class="comment"> * originates, updates and finally deletes an application-specific</span>
<a name="l00005"></a>00005 <span class="comment"> * opaque LSA. You can use this application as a template when writing</span>
<a name="l00006"></a>00006 <span class="comment"> * your own application.</span>
<a name="l00007"></a>00007 <span class="comment"> */</span>
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="comment">/* The following includes are needed in all OSPF API client</span>
<a name="l00010"></a>00010 <span class="comment">   applications. */</span>
<a name="l00011"></a>00011 
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span> <span class="comment">/* needed by ospf_asbr.h */</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &quot;<a class="code" href="privs_8h.html">privs.h</a>&quot;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &quot;<a class="code" href="ospfd_8h.html">ospfd/ospfd.h</a>&quot;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;<a class="code" href="ospf__asbr_8h.html">ospfd/ospf_asbr.h</a>&quot;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsa_8h.html">ospfd/ospf_lsa.h</a>&quot;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &quot;<a class="code" href="ospf__opaque_8h.html">ospfd/ospf_opaque.h</a>&quot;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;<a class="code" href="ospf__api_8h.html">ospfd/ospf_api.h</a>&quot;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="ospf__apiclient_8h.html">ospf_apiclient.h</a>&quot;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="comment">/* privileges struct. </span>
<a name="l00026"></a>00026 <span class="comment"> * set cap_num_* and uid/gid to nothing to use NULL privs</span>
<a name="l00027"></a>00027 <span class="comment"> * as ospfapiclient links in libospf.a which uses privs.</span>
<a name="l00028"></a>00028 <span class="comment"> */</span>
<a name="l00029"></a><a class="code" href="ospf__network_8c.html#a98d4a63d037cb8c579f44baa2f9801a2">00029</a> <span class="keyword">struct </span><a class="code" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="code" href="ospfclient_8c.html#a98d4a63d037cb8c579f44baa2f9801a2">ospfd_privs</a> =
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031   .<a class="code" href="structzebra__privs__t.html#a62e6101b1d966f24692ae650a331fb95">user</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00032"></a>00032   .group = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00033"></a>00033   .cap_num_p = 0,
<a name="l00034"></a>00034   .cap_num_i = 0
<a name="l00035"></a>00035 };
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">/* The following includes are specific to this application. For</span>
<a name="l00038"></a>00038 <span class="comment">   example it uses threads from libzebra, however your application is</span>
<a name="l00039"></a>00039 <span class="comment">   free to use any thread library (like pthreads). */</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="ospf__dump_8h.html">ospfd/ospf_dump.h</a>&quot;</span> <span class="comment">/* for ospf_lsa_header_dump */</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="comment">/* Local portnumber for async channel. Note that OSPF API library will also</span>
<a name="l00046"></a>00046 <span class="comment">   allocate a sync channel at ASYNCPORT+1. */</span>
<a name="l00047"></a><a class="code" href="ospfclient_8c.html#a75d633bf6407c737d016e0690bcb2d3a">00047</a> <span class="preprocessor">#define ASYNCPORT 4000</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="comment">/* Master thread */</span>
<a name="l00050"></a><a class="code" href="ospfclient_8c.html#af7f9077bc08df049beb65a1c09cde5fa">00050</a> <span class="keyword">struct </span><a class="code" href="structthread__master.html">thread_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">/* Global variables */</span>
<a name="l00053"></a><a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">00053</a> <span class="keyword">struct </span><a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>;
<a name="l00054"></a><a class="code" href="ospfclient_8c.html#aa24f72e6a4d6a997528142211b375496">00054</a> <span class="keywordtype">char</span> **<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">/* Our opaque LSAs have the following format. */</span>
<a name="l00057"></a><a class="code" href="structmy__opaque__lsa.html">00057</a> <span class="keyword">struct </span><a class="code" href="structmy__opaque__lsa.html">my_opaque_lsa</a>
<a name="l00058"></a>00058 {
<a name="l00059"></a><a class="code" href="structmy__opaque__lsa.html#ab092ff3b55492d53687a24cea16d5d5a">00059</a>   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> <a class="code" href="structmy__opaque__lsa.html#ab092ff3b55492d53687a24cea16d5d5a">hdr</a>; <span class="comment">/* include common LSA header */</span>
<a name="l00060"></a><a class="code" href="structmy__opaque__lsa.html#a1556811f3300d638e60eceacb42935cc">00060</a>   u_char <a class="code" href="structmy__opaque__lsa.html#a1556811f3300d638e60eceacb42935cc">data</a>[4]; <span class="comment">/* our own data format then follows here */</span>
<a name="l00061"></a>00061 };
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="comment">/* ---------------------------------------------------------</span>
<a name="l00065"></a>00065 <span class="comment"> * Threads for asynchronous messages and LSA update/delete </span>
<a name="l00066"></a>00066 <span class="comment"> * ---------------------------------------------------------</span>
<a name="l00067"></a>00067 <span class="comment"> */</span>
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00070"></a><a class="code" href="ospfclient_8c.html#a6e06258bf5023de7705b0c15f93153d5">00070</a> <a class="code" href="ospfclient_8c.html#a6e06258bf5023de7705b0c15f93153d5">lsa_delete</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l00071"></a>00071 {
<a name="l00072"></a>00072   <span class="keyword">struct </span><a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>;
<a name="l00073"></a>00073   <span class="keyword">struct </span>in_addr area_id;
<a name="l00074"></a>00074   <span class="keywordtype">int</span> rc;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076   oclient = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l00077"></a>00077 
<a name="l00078"></a>00078   <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[6], &amp;area_id);
<a name="l00079"></a>00079 
<a name="l00080"></a>00080   printf (<span class="stringliteral">&quot;Deleting LSA... &quot;</span>);
<a name="l00081"></a>00081   rc = <a class="code" href="ospf__apiclient_8c.html#af068227010b19eadaf3517e85bda0bc1">ospf_apiclient_lsa_delete</a> (oclient, 
<a name="l00082"></a>00082                   area_id, 
<a name="l00083"></a>00083                   atoi (<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[2]),       <span class="comment">/* lsa type */</span>
<a name="l00084"></a>00084                   atoi (<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[3]),   <span class="comment">/* opaque type */</span>
<a name="l00085"></a>00085                   atoi (<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[4]));  <span class="comment">/* opaque ID */</span>
<a name="l00086"></a>00086   printf (<span class="stringliteral">&quot;done, return code is = %d\n&quot;</span>, rc);
<a name="l00087"></a>00087   <span class="keywordflow">return</span> rc;
<a name="l00088"></a>00088 }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00091"></a><a class="code" href="ospfclient_8c.html#a70ec769b647812cb6d023728761e922f">00091</a> <a class="code" href="ospfclient_8c.html#a70ec769b647812cb6d023728761e922f">lsa_inject</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l00092"></a>00092 {
<a name="l00093"></a>00093   <span class="keyword">struct </span><a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="spgrid_8c.html#a6dd5c44547ae6870b695e43bc05c9a24">cl</a>;
<a name="l00094"></a>00094   <span class="keyword">struct </span>in_addr ifaddr;
<a name="l00095"></a>00095   <span class="keyword">struct </span>in_addr area_id;
<a name="l00096"></a>00096   u_char lsa_type;
<a name="l00097"></a>00097   u_char opaque_type;
<a name="l00098"></a>00098   u_int32_t opaque_id;
<a name="l00099"></a>00099   <span class="keywordtype">void</span> *opaquedata;
<a name="l00100"></a>00100   <span class="keywordtype">int</span> opaquelen;
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   <span class="keyword">static</span> u_int32_t counter = 1; <span class="comment">/* Incremented each time invoked */</span>
<a name="l00103"></a>00103   <span class="keywordtype">int</span> rc;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105   cl = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l00106"></a>00106 
<a name="l00107"></a>00107   <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[5], &amp;ifaddr);
<a name="l00108"></a>00108   <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a> (<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[6], &amp;area_id);
<a name="l00109"></a>00109   lsa_type = atoi (<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[2]);
<a name="l00110"></a>00110   opaque_type = atoi (<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[3]);
<a name="l00111"></a>00111   opaque_id = atoi (<a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>[4]);
<a name="l00112"></a>00112   opaquedata = &amp;counter;
<a name="l00113"></a>00113   opaquelen = <span class="keyword">sizeof</span> (u_int32_t);
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   printf (<span class="stringliteral">&quot;Originating/updating LSA with counter=%d... &quot;</span>, counter);
<a name="l00116"></a>00116   rc = <a class="code" href="ospf__apiclient_8c.html#a0bddf5cada0954167e7361d59fcf8a97">ospf_apiclient_lsa_originate</a>(cl, ifaddr, area_id,
<a name="l00117"></a>00117                     lsa_type,
<a name="l00118"></a>00118                     opaque_type, opaque_id,
<a name="l00119"></a>00119                     opaquedata, opaquelen);
<a name="l00120"></a>00120 
<a name="l00121"></a>00121   printf (<span class="stringliteral">&quot;done, return code is %d\n&quot;</span>, rc);
<a name="l00122"></a>00122 
<a name="l00123"></a>00123   counter++;
<a name="l00124"></a>00124 
<a name="l00125"></a>00125   <span class="keywordflow">return</span> 0;
<a name="l00126"></a>00126 }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="comment">/* 08/25/2011 yic+: for test purposes */</span>
<a name="l00129"></a><a class="code" href="ospfclient_8c.html#afb258c6eecdc7da27d43de591dd388ba">00129</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="ospfclient_8c.html#afb258c6eecdc7da27d43de591dd388ba">get_router_nexthops</a>(<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l00130"></a>00130 {
<a name="l00131"></a>00131   <span class="keyword">struct </span><a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>;
<a name="l00132"></a>00132   <span class="keyword">struct </span>in_addr router_id;
<a name="l00133"></a>00133   <span class="keywordtype">int</span> rc;
<a name="l00134"></a>00134 
<a name="l00135"></a>00135   oclient = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a>(t);
<a name="l00136"></a>00136   <a class="code" href="sockunion_8c.html#a4203367afaacee3fa5cc1626b2ef63c0">inet_aton</a>(<span class="stringliteral">&quot;150.135.82.104&quot;</span>, &amp;router_id);
<a name="l00137"></a>00137 
<a name="l00138"></a>00138   printf (<span class="stringliteral">&quot;getting router nexthops... &quot;</span>);
<a name="l00139"></a>00139   rc = <a class="code" href="ospf__apiclient_8c.html#aa1030e129533ccab57fad62fcdece78f">ospf_apiclient_get_router_nexthops</a>(oclient, router_id);
<a name="l00140"></a>00140   printf (<span class="stringliteral">&quot;done, return code is %d\n&quot;</span>, rc);
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   <span class="keywordflow">return</span> rc;
<a name="l00143"></a>00143 }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 <span class="comment">/* This thread handles asynchronous messages coming in from the OSPF</span>
<a name="l00146"></a>00146 <span class="comment">   API server */</span>
<a name="l00147"></a>00147 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00148"></a><a class="code" href="ospfclient_8c.html#a6f2b7c919644798e75c8a2540a9c43c5">00148</a> <a class="code" href="ospfclient_8c.html#a6f2b7c919644798e75c8a2540a9c43c5">lsa_read</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00149"></a>00149 {
<a name="l00150"></a>00150   <span class="keyword">struct </span><a class="code" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="code" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>;
<a name="l00151"></a>00151   <span class="keywordtype">int</span> fd;
<a name="l00152"></a>00152   <span class="keywordtype">int</span> ret;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154   printf (<span class="stringliteral">&quot;lsa_read called\n&quot;</span>);
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   oclient = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l00157"></a>00157   fd = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);
<a name="l00158"></a>00158 
<a name="l00159"></a>00159   <span class="comment">/* Handle asynchronous message */</span>
<a name="l00160"></a>00160   ret = <a class="code" href="ospf__apiclient_8c.html#ac20dd71e28279edb1dcaa72837f44ee8">ospf_apiclient_handle_async</a> (oclient);
<a name="l00161"></a>00161   <span class="keywordflow">if</span> (ret &lt; 0) {
<a name="l00162"></a>00162     printf (<span class="stringliteral">&quot;Connection closed, exiting...&quot;</span>);
<a name="l00163"></a>00163     <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(0);
<a name="l00164"></a>00164   }
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   <span class="comment">/* Reschedule read thread */</span>
<a name="l00167"></a>00167   <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (master, <a class="code" href="ospfclient_8c.html#a6f2b7c919644798e75c8a2540a9c43c5">lsa_read</a>, oclient, fd);
<a name="l00168"></a>00168 
<a name="l00169"></a>00169   <span class="keywordflow">return</span> 0;
<a name="l00170"></a>00170 }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment">/* ---------------------------------------------------------</span>
<a name="l00173"></a>00173 <span class="comment"> * Callback functions for asynchronous events </span>
<a name="l00174"></a>00174 <span class="comment"> * ---------------------------------------------------------</span>
<a name="l00175"></a>00175 <span class="comment"> */</span>
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00178"></a><a class="code" href="ospfclient_8c.html#aad428d9875745fcef716aca47fb333a9">00178</a> <a class="code" href="ospfclient_8c.html#aad428d9875745fcef716aca47fb333a9">lsa_update_callback</a> (<span class="keyword">struct</span> in_addr ifaddr, <span class="keyword">struct</span> in_addr area_id,
<a name="l00179"></a>00179              u_char is_self_originated,
<a name="l00180"></a>00180              <span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a> *lsa)
<a name="l00181"></a>00181 {
<a name="l00182"></a>00182   printf (<span class="stringliteral">&quot;lsa_update_callback: &quot;</span>);
<a name="l00183"></a>00183   printf (<span class="stringliteral">&quot;ifaddr: %s &quot;</span>, inet_ntoa (ifaddr));
<a name="l00184"></a>00184   printf (<span class="stringliteral">&quot;area: %s\n&quot;</span>, inet_ntoa (area_id));
<a name="l00185"></a>00185   printf (<span class="stringliteral">&quot;is_self_origin: %u\n&quot;</span>, is_self_originated);
<a name="l00186"></a>00186 
<a name="l00187"></a>00187   <span class="comment">/* It is important to note that lsa_header does indeed include the</span>
<a name="l00188"></a>00188 <span class="comment">     header and the LSA payload. To access the payload, first check</span>
<a name="l00189"></a>00189 <span class="comment">     the LSA type and then typecast lsa into the corresponding type,</span>
<a name="l00190"></a>00190 <span class="comment">     e.g.:</span>
<a name="l00191"></a>00191 <span class="comment">     </span>
<a name="l00192"></a>00192 <span class="comment">     if (lsa-&gt;type == OSPF_ROUTER_LSA) {</span>
<a name="l00193"></a>00193 <span class="comment">       struct router_lsa *rl = (struct router_lsa) lsa;</span>
<a name="l00194"></a>00194 <span class="comment">       ...</span>
<a name="l00195"></a>00195 <span class="comment">       u_int16_t links = rl-&gt;links;</span>
<a name="l00196"></a>00196 <span class="comment">       ...</span>
<a name="l00197"></a>00197 <span class="comment">    }</span>
<a name="l00198"></a>00198 <span class="comment">  */</span>
<a name="l00199"></a>00199        
<a name="l00200"></a>00200   <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (lsa);
<a name="l00201"></a>00201 }
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00204"></a><a class="code" href="ospfclient_8c.html#a38a3a5ae77b409561e53c4e835457abf">00204</a> <a class="code" href="ospfclient_8c.html#a38a3a5ae77b409561e53c4e835457abf">lsa_delete_callback</a> (<span class="keyword">struct</span> in_addr ifaddr, <span class="keyword">struct</span> in_addr area_id,
<a name="l00205"></a>00205              u_char is_self_originated,
<a name="l00206"></a>00206              <span class="keyword">struct</span> <a class="code" href="structlsa__header.html">lsa_header</a> *lsa)
<a name="l00207"></a>00207 {
<a name="l00208"></a>00208   printf (<span class="stringliteral">&quot;lsa_delete_callback: &quot;</span>);
<a name="l00209"></a>00209   printf (<span class="stringliteral">&quot;ifaddr: %s &quot;</span>, inet_ntoa (ifaddr));
<a name="l00210"></a>00210   printf (<span class="stringliteral">&quot;area: %s\n&quot;</span>, inet_ntoa (area_id));
<a name="l00211"></a>00211   printf (<span class="stringliteral">&quot;is_self_origin: %u\n&quot;</span>, is_self_originated);
<a name="l00212"></a>00212 
<a name="l00213"></a>00213   <a class="code" href="ospf__dump_8c.html#a9f6f89130826976cb32a15187c88a397">ospf_lsa_header_dump</a> (lsa);
<a name="l00214"></a>00214 }
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00217"></a><a class="code" href="ospfclient_8c.html#ab8e40e3d32e8c43ded4e8c49d72361eb">00217</a> <a class="code" href="ospfclient_8c.html#ab8e40e3d32e8c43ded4e8c49d72361eb">ready_callback</a> (u_char lsa_type, u_char opaque_type, <span class="keyword">struct</span> in_addr addr)
<a name="l00218"></a>00218 {
<a name="l00219"></a>00219   printf (<span class="stringliteral">&quot;ready_callback: lsa_type: %d opaque_type: %d addr=%s\n&quot;</span>,
<a name="l00220"></a>00220       lsa_type, opaque_type, inet_ntoa (addr));
<a name="l00221"></a>00221 
<a name="l00222"></a>00222   <span class="comment">/* Schedule opaque LSA originate in 5 secs */</span>
<a name="l00223"></a>00223   <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (master, <a class="code" href="ospfclient_8c.html#a70ec769b647812cb6d023728761e922f">lsa_inject</a>, oclient, 5);
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   <span class="comment">/* Schedule opaque LSA update with new value */</span>
<a name="l00226"></a>00226   <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (master, <a class="code" href="ospfclient_8c.html#a70ec769b647812cb6d023728761e922f">lsa_inject</a>, oclient, 10);
<a name="l00227"></a>00227 
<a name="l00228"></a>00228   <span class="comment">/* Schedule delete */</span>
<a name="l00229"></a>00229   <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (master, <a class="code" href="ospfclient_8c.html#a6e06258bf5023de7705b0c15f93153d5">lsa_delete</a>, oclient, 30);
<a name="l00230"></a>00230 
<a name="l00231"></a>00231   <span class="comment">/* 08/25/2011 yic+: test */</span>
<a name="l00232"></a>00232   <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a>(master, <a class="code" href="ospfclient_8c.html#afb258c6eecdc7da27d43de591dd388ba">get_router_nexthops</a>, oclient, 60);
<a name="l00233"></a>00233 }
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00236"></a><a class="code" href="ospfclient_8c.html#a6fb050176efa11bed6399362d3b60bb2">00236</a> <a class="code" href="ospfclient_8c.html#a6fb050176efa11bed6399362d3b60bb2">new_if_callback</a> (<span class="keyword">struct</span> in_addr ifaddr, <span class="keyword">struct</span> in_addr area_id)
<a name="l00237"></a>00237 {
<a name="l00238"></a>00238   printf (<span class="stringliteral">&quot;new_if_callback: ifaddr: %s &quot;</span>, inet_ntoa (ifaddr));
<a name="l00239"></a>00239   printf (<span class="stringliteral">&quot;area_id: %s\n&quot;</span>, inet_ntoa (area_id));
<a name="l00240"></a>00240 }
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00243"></a><a class="code" href="ospfclient_8c.html#a7688afd440d4917dcebc81844b40b024">00243</a> <a class="code" href="ospfclient_8c.html#a7688afd440d4917dcebc81844b40b024">del_if_callback</a> (<span class="keyword">struct</span> in_addr ifaddr)
<a name="l00244"></a>00244 {
<a name="l00245"></a>00245   printf (<span class="stringliteral">&quot;new_if_callback: ifaddr: %s\n &quot;</span>, inet_ntoa (ifaddr));
<a name="l00246"></a>00246 }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00249"></a><a class="code" href="ospfclient_8c.html#a16e580b288ae51e09148d44d1d075cbf">00249</a> <a class="code" href="ospfclient_8c.html#a16e580b288ae51e09148d44d1d075cbf">ism_change_callback</a> (<span class="keyword">struct</span> in_addr ifaddr, <span class="keyword">struct</span> in_addr area_id,
<a name="l00250"></a>00250              u_char state)
<a name="l00251"></a>00251 {
<a name="l00252"></a>00252   printf (<span class="stringliteral">&quot;ism_change: ifaddr: %s &quot;</span>, inet_ntoa (ifaddr));
<a name="l00253"></a>00253   printf (<span class="stringliteral">&quot;area_id: %s\n&quot;</span>, inet_ntoa (area_id));
<a name="l00254"></a>00254   printf (<span class="stringliteral">&quot;state: %d [%s]\n&quot;</span>, state, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#ae4c65baac757ab6ffaaf05421dd53b3a">ospf_ism_state_msg</a>, state));
<a name="l00255"></a>00255 }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00258"></a><a class="code" href="ospfclient_8c.html#aaa137818c721bed4e592a1cd947884c2">00258</a> <a class="code" href="ospfclient_8c.html#aaa137818c721bed4e592a1cd947884c2">nsm_change_callback</a> (<span class="keyword">struct</span> in_addr ifaddr, <span class="keyword">struct</span> in_addr nbraddr,
<a name="l00259"></a>00259              <span class="keyword">struct</span> in_addr router_id, u_char state)
<a name="l00260"></a>00260 {
<a name="l00261"></a>00261   printf (<span class="stringliteral">&quot;nsm_change: ifaddr: %s &quot;</span>, inet_ntoa (ifaddr));
<a name="l00262"></a>00262   printf (<span class="stringliteral">&quot;nbraddr: %s\n&quot;</span>, inet_ntoa (nbraddr));
<a name="l00263"></a>00263   printf (<span class="stringliteral">&quot;router_id: %s\n&quot;</span>, inet_ntoa (router_id));
<a name="l00264"></a>00264   printf (<span class="stringliteral">&quot;state: %d [%s]\n&quot;</span>, state, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="ospf__dump_8c.html#a7addd69d09415cd935c591a40b74ac46">ospf_nsm_state_msg</a>, state));
<a name="l00265"></a>00265 }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 <span class="comment">/* 08/25/2011 yic+ */</span>
<a name="l00268"></a><a class="code" href="ospfclient_8c.html#a947ae479f43fdc7a1707abf97eba9a59">00268</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="ospfclient_8c.html#a947ae479f43fdc7a1707abf97eba9a59">router_routing_table_change_callback</a>(<span class="keyword">struct</span> in_addr router_id,
<a name="l00269"></a>00269         <span class="keywordtype">int</span> nexthop_count, <span class="keyword">struct</span> in_addr *nexthops)
<a name="l00270"></a>00270 {
<a name="l00271"></a>00271     <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00272"></a>00272 
<a name="l00273"></a>00273     printf(<span class="stringliteral">&quot;router_routing_table_change\n&quot;</span>);
<a name="l00274"></a>00274     printf(<span class="stringliteral">&quot;--router id: %s\n&quot;</span>, inet_ntoa(router_id));
<a name="l00275"></a>00275 
<a name="l00276"></a>00276     <span class="keywordflow">for</span> (i = 0; i &lt; nexthop_count; i ++)
<a name="l00277"></a>00277         printf(<span class="stringliteral">&quot;--nexthop: %s\n&quot;</span>, inet_ntoa(nexthops[i]));
<a name="l00278"></a>00278 }
<a name="l00279"></a>00279 
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 <span class="comment">/* ---------------------------------------------------------</span>
<a name="l00282"></a>00282 <span class="comment"> * Main program </span>
<a name="l00283"></a>00283 <span class="comment"> * ---------------------------------------------------------</span>
<a name="l00284"></a>00284 <span class="comment"> */</span>
<a name="l00285"></a>00285 
<a name="l00286"></a><a class="code" href="ospfclient_8c.html#addea2018e480eece49bb50115d8f6ab9">00286</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="bgp__main_8c.html#ab24f62159230cf265fc4d7ddc4c91872">usage</a>()
<a name="l00287"></a>00287 {
<a name="l00288"></a>00288   printf(<span class="stringliteral">&quot;Usage: ospfclient &lt;ospfd&gt; &lt;lsatype&gt; &lt;opaquetype&gt; &lt;opaqueid&gt; &lt;ifaddr&gt; &lt;areaid&gt;\n&quot;</span>);
<a name="l00289"></a>00289   printf(<span class="stringliteral">&quot;where ospfd     : router where API-enabled OSPF daemon is running\n&quot;</span>);
<a name="l00290"></a>00290   printf(<span class="stringliteral">&quot;      lsatype   : either 9, 10, or 11 depending on flooding scope\n&quot;</span>);
<a name="l00291"></a>00291   printf(<span class="stringliteral">&quot;      opaquetype: 0-255 (e.g., experimental applications use &gt; 128)\n&quot;</span>);
<a name="l00292"></a>00292   printf(<span class="stringliteral">&quot;      opaqueid  : arbitrary application instance (24 bits)\n&quot;</span>);
<a name="l00293"></a>00293   printf(<span class="stringliteral">&quot;      ifaddr    : interface IP address (for type 9) otherwise ignored\n&quot;</span>);
<a name="l00294"></a>00294   printf(<span class="stringliteral">&quot;      areaid    : area in IP address format (for type 10) otherwise ignored\n&quot;</span>);
<a name="l00295"></a>00295   
<a name="l00296"></a>00296   <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a>(1);
<a name="l00297"></a>00297 }
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="keywordtype">int</span>
<a name="l00300"></a><a class="code" href="ospfclient_8c.html#a0ddf1224851353fc92bfbff6f499fa97">00300</a> <a class="code" href="bgp__main_8c.html#a3c04138a5bfe5d72780bb7e82a18e627">main</a> (<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
<a name="l00301"></a>00301 {
<a name="l00302"></a>00302   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> thread;
<a name="l00303"></a>00303 
<a name="l00304"></a>00304   <a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a> = argv;
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   <span class="comment">/* ospfclient should be started with the following arguments:</span>
<a name="l00307"></a>00307 <span class="comment">   * </span>
<a name="l00308"></a>00308 <span class="comment">   * (1) host (2) lsa_type (3) opaque_type (4) opaque_id (5) if_addr </span>
<a name="l00309"></a>00309 <span class="comment">   * (6) area_id</span>
<a name="l00310"></a>00310 <span class="comment">   * </span>
<a name="l00311"></a>00311 <span class="comment">   * host: name or IP of host where ospfd is running</span>
<a name="l00312"></a>00312 <span class="comment">   * lsa_type: 9, 10, or 11</span>
<a name="l00313"></a>00313 <span class="comment">   * opaque_type: 0-255 (e.g., experimental applications use &gt; 128) </span>
<a name="l00314"></a>00314 <span class="comment">   * opaque_id: arbitrary application instance (24 bits)</span>
<a name="l00315"></a>00315 <span class="comment">   * if_addr: interface IP address (for type 9) otherwise ignored</span>
<a name="l00316"></a>00316 <span class="comment">   * area_id: area in IP address format (for type 10) otherwise ignored</span>
<a name="l00317"></a>00317 <span class="comment">   */</span>
<a name="l00318"></a>00318 
<a name="l00319"></a>00319   <span class="keywordflow">if</span> (argc != 7)
<a name="l00320"></a>00320     {
<a name="l00321"></a>00321       <a class="code" href="bgp__main_8c.html#ab24f62159230cf265fc4d7ddc4c91872">usage</a>();
<a name="l00322"></a>00322     }
<a name="l00323"></a>00323 
<a name="l00324"></a>00324   <span class="comment">/* Initialization */</span>
<a name="l00325"></a>00325   <a class="code" href="privs_8c.html#ac6082c5377fb94942a842809eb508682">zprivs_init</a> (&amp;ospfd_privs);
<a name="l00326"></a>00326   master = <a class="code" href="thread_8c.html#a6d9de673f4874d0c6b7f6a84b2e0e9cf">thread_master_create</a> ();
<a name="l00327"></a>00327 
<a name="l00328"></a>00328   <span class="comment">/* Open connection to OSPF daemon */</span>
<a name="l00329"></a>00329   oclient = <a class="code" href="ospf__apiclient_8c.html#aca9f7a18d0d50ced1ce00f268fbfd1e3">ospf_apiclient_connect</a> (args[1], <a class="code" href="ospfclient_8c.html#a75d633bf6407c737d016e0690bcb2d3a">ASYNCPORT</a>);
<a name="l00330"></a>00330   <span class="keywordflow">if</span> (!oclient)
<a name="l00331"></a>00331     {
<a name="l00332"></a>00332       printf (<span class="stringliteral">&quot;Connecting to OSPF daemon on %s failed!\n&quot;</span>,
<a name="l00333"></a>00333           args[1]);
<a name="l00334"></a>00334       <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l00335"></a>00335     }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337   <span class="comment">/* Register callback functions. */</span>
<a name="l00338"></a>00338   <a class="code" href="ospf__apiclient_8c.html#a919781dff26dbaf91b9da60dc8b47f49">ospf_apiclient_register_callback</a> (oclient,
<a name="l00339"></a>00339                     <a class="code" href="ospfclient_8c.html#ab8e40e3d32e8c43ded4e8c49d72361eb">ready_callback</a>,
<a name="l00340"></a>00340                     <a class="code" href="ospfclient_8c.html#a6fb050176efa11bed6399362d3b60bb2">new_if_callback</a>,
<a name="l00341"></a>00341                     <a class="code" href="ospfclient_8c.html#a7688afd440d4917dcebc81844b40b024">del_if_callback</a>,
<a name="l00342"></a>00342                     <a class="code" href="ospfclient_8c.html#a16e580b288ae51e09148d44d1d075cbf">ism_change_callback</a>,
<a name="l00343"></a>00343                     <a class="code" href="ospfclient_8c.html#aaa137818c721bed4e592a1cd947884c2">nsm_change_callback</a>,
<a name="l00344"></a>00344                     <a class="code" href="ospfclient_8c.html#aad428d9875745fcef716aca47fb333a9">lsa_update_callback</a>, 
<a name="l00345"></a>00345                     <a class="code" href="ospfclient_8c.html#a38a3a5ae77b409561e53c4e835457abf">lsa_delete_callback</a>,
<a name="l00346"></a>00346                     <span class="comment">/* 08/25/2011 yic+ */</span>
<a name="l00347"></a>00347                     <a class="code" href="ospfclient_8c.html#a947ae479f43fdc7a1707abf97eba9a59">router_routing_table_change_callback</a>);
<a name="l00348"></a>00348 
<a name="l00349"></a>00349   <span class="comment">/* Register LSA type and opaque type. */</span>
<a name="l00350"></a>00350   <a class="code" href="ospf__apiclient_8c.html#aa095649109dd104d2c652c18ceae8cc9">ospf_apiclient_register_opaque_type</a> (oclient, atoi (args[2]),
<a name="l00351"></a>00351                        atoi (args[3]));
<a name="l00352"></a>00352 
<a name="l00353"></a>00353   <span class="comment">/* Synchronize database with OSPF daemon. */</span>
<a name="l00354"></a>00354   <a class="code" href="ospf__apiclient_8c.html#a30571f833f72d7e4c05021d0821477ea">ospf_apiclient_sync_lsdb</a> (oclient);
<a name="l00355"></a>00355 
<a name="l00356"></a>00356   <span class="comment">/* Schedule thread that handles asynchronous messages */</span>
<a name="l00357"></a>00357   <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (master, <a class="code" href="ospfclient_8c.html#a6f2b7c919644798e75c8a2540a9c43c5">lsa_read</a>, oclient, oclient-&gt;<a class="code" href="structospf__apiclient.html#ae3a5f4d039db64a899c30196b35ecfaa">fd_async</a>);
<a name="l00358"></a>00358 
<a name="l00359"></a>00359   <span class="comment">/* Now connection is established, run loop */</span>
<a name="l00360"></a>00360   <span class="keywordflow">while</span> (1)
<a name="l00361"></a>00361     {
<a name="l00362"></a>00362       <a class="code" href="thread_8c.html#a1674b380ab1baf464b4f541c0a938656">thread_fetch</a> (master, &amp;thread);
<a name="l00363"></a>00363       <a class="code" href="thread_8c.html#aebb1b7a2cf2a872d69ab8c1e6f788744">thread_call</a> (&amp;thread);
<a name="l00364"></a>00364     }
<a name="l00365"></a>00365 
<a name="l00366"></a>00366   <span class="comment">/* Never reached */</span>
<a name="l00367"></a>00367   <span class="keywordflow">return</span> 0;
<a name="l00368"></a>00368 }
<a name="l00369"></a>00369 
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospfclient_8c.html">ospfclient.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:06 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
