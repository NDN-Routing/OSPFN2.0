<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: isisd/isis_bpf.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('isis__bpf_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">isisd/isis_bpf.c</div>  </div>
</div>
<div class="contents">
<a href="isis__bpf_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * IS-IS Rout(e)ing protocol - isis_bpf.c</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2001,2002    Sampo Saaristo</span>
<a name="l00005"></a>00005 <span class="comment"> *                            Tampere University of Technology      </span>
<a name="l00006"></a>00006 <span class="comment"> *                            Institute of Communications Engineering</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> * This program is free software; you can redistribute it and/or modify it </span>
<a name="l00009"></a>00009 <span class="comment"> * under the terms of the GNU General Public Licenseas published by the Free </span>
<a name="l00010"></a>00010 <span class="comment"> * Software Foundation; either version 2 of the License, or (at your option) </span>
<a name="l00011"></a>00011 <span class="comment"> * any later version.</span>
<a name="l00012"></a>00012 <span class="comment"> *</span>
<a name="l00013"></a>00013 <span class="comment"> * This program is distributed in the hope that it will be useful,but WITHOUT </span>
<a name="l00014"></a>00014 <span class="comment"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or </span>
<a name="l00015"></a>00015 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for </span>
<a name="l00016"></a>00016 <span class="comment"> * more details.</span>
<a name="l00017"></a>00017 <span class="comment"></span>
<a name="l00018"></a>00018 <span class="comment"> * You should have received a copy of the GNU General Public License along </span>
<a name="l00019"></a>00019 <span class="comment"> * with this program; if not, write to the Free Software Foundation, Inc., </span>
<a name="l00020"></a>00020 <span class="comment"> * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#if ISIS_METHOD == ISIS_METHOD_BPF</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#include &lt;net/if.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;netinet/if_ether.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;sys/time.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;sys/ioctl.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;net/bpf.h&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="dict_8h.html">isisd/dict.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="iso_8h.html">isisd/include-netbsd/iso.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="isis__constants_8h.html">isisd/isis_constants.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="isis__common_8h.html">isisd/isis_common.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="isis__circuit_8h.html">isisd/isis_circuit.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="isis__flags_8h.html">isisd/isis_flags.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="isisd_8h.html">isisd/isisd.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="isis__constants_8h.html">isisd/isis_constants.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="isis__circuit_8h.html">isisd/isis_circuit.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="isis__network_8h.html">isisd/isis_network.h</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="privs_8h.html">privs.h</a>&quot;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="code" href="isis__bpf_8c.html#a4af776b1b8693eb5cb5d20b25abb4680">isisd_privs</a>;
<a name="l00049"></a>00049 
<a name="l00050"></a><a class="code" href="isis__bpf_8c.html#a9ff5df46d8edb138e3609ea032811e5c">00050</a> <span class="keyword">struct </span>bpf_insn <a class="code" href="isis__bpf_8c.html#a9ff5df46d8edb138e3609ea032811e5c">llcfilter</a>[] = {
<a name="l00051"></a>00051   BPF_STMT (BPF_LD + BPF_B + BPF_ABS, ETHER_HDR_LEN),   <span class="comment">/* check first byte */</span>
<a name="l00052"></a>00052   BPF_JUMP (BPF_JMP + BPF_JEQ + BPF_K, <a class="code" href="isis__constants_8h.html#a7dc7c0809fa809eb5774a4356c1368db">ISO_SAP</a>, 0, 5),
<a name="l00053"></a>00053   BPF_STMT (BPF_LD + BPF_B + BPF_ABS, ETHER_HDR_LEN + 1),
<a name="l00054"></a>00054   BPF_JUMP (BPF_JMP + BPF_JEQ + BPF_K, <a class="code" href="isis__constants_8h.html#a7dc7c0809fa809eb5774a4356c1368db">ISO_SAP</a>, 0, 3),  <span class="comment">/* check second byte */</span>
<a name="l00055"></a>00055   BPF_STMT (BPF_LD + BPF_B + BPF_ABS, ETHER_HDR_LEN + 2),
<a name="l00056"></a>00056   BPF_JUMP (BPF_JMP + BPF_JEQ + BPF_K, 0x03, 0, 1), <span class="comment">/* check third byte */</span>
<a name="l00057"></a>00057   BPF_STMT (BPF_RET + BPF_K, (u_int) - 1),
<a name="l00058"></a>00058   BPF_STMT (BPF_RET + BPF_K, 0)
<a name="l00059"></a>00059 };
<a name="l00060"></a><a class="code" href="isis__bpf_8c.html#aec79a5028d118a148ad5e9d5115b60c9">00060</a> u_int <a class="code" href="isis__bpf_8c.html#aec79a5028d118a148ad5e9d5115b60c9">readblen</a> = 0;
<a name="l00061"></a><a class="code" href="isis__bpf_8c.html#a5fb1d169b7cac95f17f17b40cc136d99">00061</a> u_char *<a class="code" href="isis__bpf_8c.html#a5fb1d169b7cac95f17f17b40cc136d99">readbuff</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="comment">/*</span>
<a name="l00064"></a>00064 <span class="comment"> * Table 9 - Architectural constants for use with ISO 8802 subnetworks</span>
<a name="l00065"></a>00065 <span class="comment"> * ISO 10589 - 8.4.8</span>
<a name="l00066"></a>00066 <span class="comment"> */</span>
<a name="l00067"></a>00067 
<a name="l00068"></a><a class="code" href="isis__bpf_8c.html#a564f249d5a142831ee4e6f6cd2ecc396">00068</a> u_char <a class="code" href="isis__bpf_8c.html#a564f249d5a142831ee4e6f6cd2ecc396">ALL_L1_ISS</a>[6] = { 0x01, 0x80, 0xC2, 0x00, 0x00, 0x14 };
<a name="l00069"></a><a class="code" href="isis__bpf_8c.html#a7b5f2cee21b83e1734bd7203f23262aa">00069</a> u_char <a class="code" href="isis__bpf_8c.html#a7b5f2cee21b83e1734bd7203f23262aa">ALL_L2_ISS</a>[6] = { 0x01, 0x80, 0xC2, 0x00, 0x00, 0x15 };
<a name="l00070"></a><a class="code" href="isis__bpf_8c.html#a0a18f0f862f0a8eed7bf2b6e59483166">00070</a> u_char <a class="code" href="isis__bpf_8c.html#a0a18f0f862f0a8eed7bf2b6e59483166">ALL_ISS</a>[6] = { 0x09, 0x00, 0x2B, 0x00, 0x00, 0x05 };
<a name="l00071"></a><a class="code" href="isis__bpf_8c.html#a5e7d2a4d58b2c7dfb7242f15ca442246">00071</a> u_char <a class="code" href="isis__bpf_8c.html#a5e7d2a4d58b2c7dfb7242f15ca442246">ALL_ESS</a>[6] = { 0x09, 0x00, 0x2B, 0x00, 0x00, 0x04 };
<a name="l00072"></a>00072 
<a name="l00073"></a><a class="code" href="isis__bpf_8c.html#a23dc4e080e0af80df140a0a1b993598e">00073</a> <span class="keyword">static</span> <span class="keywordtype">char</span> <a class="code" href="isis__bpf_8c.html#a23dc4e080e0af80df140a0a1b993598e">sock_buff</a>[8192];
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00076"></a><a class="code" href="isis__bpf_8c.html#a6a5143f15dfd3dd76dd331b0ceb7195d">00076</a> <a class="code" href="isis__bpf_8c.html#a6a5143f15dfd3dd76dd331b0ceb7195d">open_bpf_dev</a> (<span class="keyword">struct</span> <a class="code" href="structisis__circuit.html">isis_circuit</a> *circuit)
<a name="l00077"></a>00077 {
<a name="l00078"></a>00078   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a> = 0, fd;
<a name="l00079"></a>00079   <span class="keywordtype">char</span> bpfdev[128];
<a name="l00080"></a>00080   <span class="keyword">struct </span>ifreq ifr;
<a name="l00081"></a>00081   u_int blen, immediate, seesent;
<a name="l00082"></a>00082   <span class="keyword">struct </span>timeval timeout;
<a name="l00083"></a>00083   <span class="keyword">struct </span>bpf_program bpf_prog;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085   <span class="keywordflow">do</span>
<a name="l00086"></a>00086     {
<a name="l00087"></a>00087       (void) <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (bpfdev, <span class="keyword">sizeof</span> (bpfdev), <span class="stringliteral">&quot;/dev/bpf%d&quot;</span>, i++);
<a name="l00088"></a>00088       fd = open (bpfdev, O_RDWR);
<a name="l00089"></a>00089     }
<a name="l00090"></a>00090   <span class="keywordflow">while</span> (fd &lt; 0 &amp;&amp; errno == EBUSY);
<a name="l00091"></a>00091 
<a name="l00092"></a>00092   <span class="keywordflow">if</span> (fd &lt; 0)
<a name="l00093"></a>00093     {
<a name="l00094"></a>00094       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;open_bpf_dev(): failed to create bpf socket: %s&quot;</span>,
<a name="l00095"></a>00095          <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00096"></a>00096       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00097"></a>00097     }
<a name="l00098"></a>00098 
<a name="l00099"></a>00099   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Opened BPF device %s&quot;</span>, bpfdev);
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (ifr.ifr_name, circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, sizeof (ifr.ifr_name));
<a name="l00102"></a>00102   <span class="keywordflow">if</span> (ioctl (fd, BIOCSETIF, (caddr_t) &amp; ifr) &lt; 0)
<a name="l00103"></a>00103     {
<a name="l00104"></a>00104       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;open_bpf_dev(): failed to bind to interface: %s&quot;</span>,
<a name="l00105"></a>00105          <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00106"></a>00106       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00107"></a>00107     }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109   <span class="keywordflow">if</span> (ioctl (fd, BIOCGBLEN, (caddr_t) &amp; blen) &lt; 0)
<a name="l00110"></a>00110     {
<a name="l00111"></a>00111       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;failed to get BPF buffer len&quot;</span>);
<a name="l00112"></a>00112       blen = circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>;
<a name="l00113"></a>00113     }
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   <a class="code" href="isis__bpf_8c.html#aec79a5028d118a148ad5e9d5115b60c9">readblen</a> = blen;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="keywordflow">if</span> (<a class="code" href="isis__bpf_8c.html#a5fb1d169b7cac95f17f17b40cc136d99">readbuff</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00118"></a>00118     <a class="code" href="isis__bpf_8c.html#a5fb1d169b7cac95f17f17b40cc136d99">readbuff</a> = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a> (blen);
<a name="l00119"></a>00119 
<a name="l00120"></a>00120   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;BPF buffer len = %u&quot;</span>, blen);
<a name="l00121"></a>00121 
<a name="l00122"></a>00122   <span class="comment">/*  BPF(4): reads return immediately upon packet reception.</span>
<a name="l00123"></a>00123 <span class="comment">   *  Otherwise, a read will block until either the kernel</span>
<a name="l00124"></a>00124 <span class="comment">   *  buffer becomes full or a timeout occurs. </span>
<a name="l00125"></a>00125 <span class="comment">   */</span>
<a name="l00126"></a>00126   immediate = 1;
<a name="l00127"></a>00127   <span class="keywordflow">if</span> (ioctl (fd, BIOCIMMEDIATE, (caddr_t) &amp; immediate) &lt; 0)
<a name="l00128"></a>00128     {
<a name="l00129"></a>00129       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;failed to set BPF dev to immediate mode&quot;</span>);
<a name="l00130"></a>00130     }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="preprocessor">#ifdef BIOCSSEESENT</span>
<a name="l00133"></a>00133 <span class="preprocessor"></span>  <span class="comment">/*</span>
<a name="l00134"></a>00134 <span class="comment">   * We want to see only incoming packets</span>
<a name="l00135"></a>00135 <span class="comment">   */</span>
<a name="l00136"></a>00136   seesent = 0;
<a name="l00137"></a>00137   <span class="keywordflow">if</span> (ioctl (fd, BIOCSSEESENT, (caddr_t) &amp; seesent) &lt; 0)
<a name="l00138"></a>00138     {
<a name="l00139"></a>00139       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;failed to set BPF dev to incoming only mode&quot;</span>);
<a name="l00140"></a>00140     }
<a name="l00141"></a>00141 <span class="preprocessor">#endif</span>
<a name="l00142"></a>00142 <span class="preprocessor"></span>
<a name="l00143"></a>00143   <span class="comment">/*</span>
<a name="l00144"></a>00144 <span class="comment">   * ...but all of them</span>
<a name="l00145"></a>00145 <span class="comment">   */</span>
<a name="l00146"></a>00146   <span class="keywordflow">if</span> (ioctl (fd, BIOCPROMISC) &lt; 0)
<a name="l00147"></a>00147     {
<a name="l00148"></a>00148       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;failed to set BPF dev to promiscuous mode&quot;</span>);
<a name="l00149"></a>00149     }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151   <span class="comment">/*</span>
<a name="l00152"></a>00152 <span class="comment">   * If the buffer length is smaller than our mtu, lets try to increase it</span>
<a name="l00153"></a>00153 <span class="comment">   */</span>
<a name="l00154"></a>00154   <span class="keywordflow">if</span> (blen &lt; circuit-&gt;<a class="code" href="structinterface.html">interface</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>)
<a name="l00155"></a>00155     {
<a name="l00156"></a>00156       <span class="keywordflow">if</span> (ioctl (fd, BIOCSBLEN, &amp;circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>) &lt; 0)
<a name="l00157"></a>00157     {
<a name="l00158"></a>00158       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;failed to set BPF buffer len (%u to %u)&quot;</span>, blen,
<a name="l00159"></a>00159              circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
<a name="l00160"></a>00160     }
<a name="l00161"></a>00161     }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163   <span class="comment">/*</span>
<a name="l00164"></a>00164 <span class="comment">   * Set a timeout parameter - hope this helps select()</span>
<a name="l00165"></a>00165 <span class="comment">   */</span>
<a name="l00166"></a>00166   timeout.tv_sec = 600;
<a name="l00167"></a>00167   timeout.tv_usec = 0;
<a name="l00168"></a>00168   <span class="keywordflow">if</span> (ioctl (fd, BIOCSRTIMEOUT, (caddr_t) &amp; timeout) &lt; 0)
<a name="l00169"></a>00169     {
<a name="l00170"></a>00170       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;failed to set BPF device timeout&quot;</span>);
<a name="l00171"></a>00171     }
<a name="l00172"></a>00172 
<a name="l00173"></a>00173   <span class="comment">/*</span>
<a name="l00174"></a>00174 <span class="comment">   * And set the filter</span>
<a name="l00175"></a>00175 <span class="comment">   */</span>
<a name="l00176"></a>00176   memset (&amp;bpf_prog, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> bpf_program));
<a name="l00177"></a>00177   bpf_prog.bf_len = 8;
<a name="l00178"></a>00178   bpf_prog.bf_insns = &amp;(<a class="code" href="isis__bpf_8c.html#a9ff5df46d8edb138e3609ea032811e5c">llcfilter</a>[0]);
<a name="l00179"></a>00179   <span class="keywordflow">if</span> (ioctl (fd, BIOCSETF, (caddr_t) &amp; bpf_prog) &lt; 0)
<a name="l00180"></a>00180     {
<a name="l00181"></a>00181       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;open_bpf_dev(): failed to install filter: %s&quot;</span>,
<a name="l00182"></a>00182          <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00183"></a>00183       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00184"></a>00184     }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (fd &gt; 0);
<a name="l00187"></a>00187 
<a name="l00188"></a>00188   circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a> = fd;
<a name="l00189"></a>00189 
<a name="l00190"></a>00190   <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>;
<a name="l00191"></a>00191 }
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 <span class="comment">/*</span>
<a name="l00194"></a>00194 <span class="comment"> * Create the socket and set the tx/rx funcs</span>
<a name="l00195"></a>00195 <span class="comment"> */</span>
<a name="l00196"></a>00196 <span class="keywordtype">int</span>
<a name="l00197"></a><a class="code" href="isis__network_8h.html#a4fb54543ed3a433aa2b883518d7be81f">00197</a> <a class="code" href="isis__bpf_8c.html#a4fb54543ed3a433aa2b883518d7be81f">isis_sock_init</a> (<span class="keyword">struct</span> <a class="code" href="structisis__circuit.html">isis_circuit</a> *circuit)
<a name="l00198"></a>00198 {
<a name="l00199"></a>00199   <span class="keywordtype">int</span> retval = <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>;
<a name="l00200"></a>00200 
<a name="l00201"></a>00201   <span class="keywordflow">if</span> (<a class="code" href="isis__bpf_8c.html#a4af776b1b8693eb5cb5d20b25abb4680">isisd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
<a name="l00202"></a>00202     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: could not raise privs, %s&quot;</span>, __func__, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00203"></a>00203 
<a name="l00204"></a>00204   retval = <a class="code" href="isis__bpf_8c.html#a6a5143f15dfd3dd76dd331b0ceb7195d">open_bpf_dev</a> (circuit);
<a name="l00205"></a>00205 
<a name="l00206"></a>00206   <span class="keywordflow">if</span> (retval != <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>)
<a name="l00207"></a>00207     {
<a name="l00208"></a>00208       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: could not initialize the socket&quot;</span>, __func__);
<a name="l00209"></a>00209       <span class="keywordflow">goto</span> end;
<a name="l00210"></a>00210     }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212   <span class="keywordflow">if</span> (circuit-&gt;<a class="code" href="structisis__circuit.html#a569e39bbf7fafd533eae2eeafa671b8c">circ_type</a> == <a class="code" href="isis__circuit_8h.html#a01a94c5f24c88efb64f791a749ae8f95">CIRCUIT_T_BROADCAST</a>)
<a name="l00213"></a>00213     {
<a name="l00214"></a>00214       circuit-&gt;<a class="code" href="structisis__circuit.html#af17faf994f21d75da89129ed100cb71d">tx</a> = <a class="code" href="isis__bpf_8c.html#aa14af084fa2a0eecae13e4ec0f2ccb37">isis_send_pdu_bcast</a>;
<a name="l00215"></a>00215       circuit-&gt;<a class="code" href="structisis__circuit.html#ae53bfd73cd6f9a69f392c645c4ccce7c">rx</a> = <a class="code" href="isis__bpf_8c.html#a5f85f514b1239ab33e4fdeed003de800">isis_recv_pdu_bcast</a>;
<a name="l00216"></a>00216     }
<a name="l00217"></a>00217   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (circuit-&gt;<a class="code" href="structisis__circuit.html#a569e39bbf7fafd533eae2eeafa671b8c">circ_type</a> == <a class="code" href="isis__circuit_8h.html#aa2113a49e7c75a5d4997d59df0530726">CIRCUIT_T_P2P</a>)
<a name="l00218"></a>00218     {
<a name="l00219"></a>00219       circuit-&gt;<a class="code" href="structisis__circuit.html#af17faf994f21d75da89129ed100cb71d">tx</a> = <a class="code" href="isis__bpf_8c.html#ab857bf21093bbcc5e575dd858d71bfc5">isis_send_pdu_p2p</a>;
<a name="l00220"></a>00220       circuit-&gt;<a class="code" href="structisis__circuit.html#ae53bfd73cd6f9a69f392c645c4ccce7c">rx</a> = <a class="code" href="isis__bpf_8c.html#a2efdf2f9514f6f6651bdd86f788c92a5">isis_recv_pdu_p2p</a>;
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222   <span class="keywordflow">else</span>
<a name="l00223"></a>00223     {
<a name="l00224"></a>00224       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;isis_sock_init(): unknown circuit type&quot;</span>);
<a name="l00225"></a>00225       retval = <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00226"></a>00226       <span class="keywordflow">goto</span> end;
<a name="l00227"></a>00227     }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 end:
<a name="l00230"></a>00230   <span class="keywordflow">if</span> (<a class="code" href="isis__bpf_8c.html#a4af776b1b8693eb5cb5d20b25abb4680">isisd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00231"></a>00231     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: could not lower privs, %s&quot;</span>, __func__, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00232"></a>00232 
<a name="l00233"></a>00233   <span class="keywordflow">return</span> retval;
<a name="l00234"></a>00234 }
<a name="l00235"></a>00235 
<a name="l00236"></a>00236 <span class="keywordtype">int</span>
<a name="l00237"></a><a class="code" href="isis__network_8h.html#a5f85f514b1239ab33e4fdeed003de800">00237</a> <a class="code" href="isis__bpf_8c.html#a5f85f514b1239ab33e4fdeed003de800">isis_recv_pdu_bcast</a> (<span class="keyword">struct</span> <a class="code" href="structisis__circuit.html">isis_circuit</a> *circuit, u_char * ssnpa)
<a name="l00238"></a>00238 {
<a name="l00239"></a>00239   <span class="keywordtype">int</span> bytesread = 0, bytestoread, offset, one = 1;
<a name="l00240"></a>00240   <span class="keyword">struct </span>bpf_hdr *bpf_hdr;
<a name="l00241"></a>00241 
<a name="l00242"></a>00242   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a> &gt; 0);
<a name="l00243"></a>00243 
<a name="l00244"></a>00244   <span class="keywordflow">if</span> (ioctl (circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a>, FIONREAD, (caddr_t) &amp; bytestoread) &lt; 0)
<a name="l00245"></a>00245     {
<a name="l00246"></a>00246       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ioctl() FIONREAD failed: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00247"></a>00247     }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249   <span class="keywordflow">if</span> (bytestoread)
<a name="l00250"></a>00250     {
<a name="l00251"></a>00251       bytesread = read (circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a>, <a class="code" href="isis__bpf_8c.html#a5fb1d169b7cac95f17f17b40cc136d99">readbuff</a>, <a class="code" href="isis__bpf_8c.html#aec79a5028d118a148ad5e9d5115b60c9">readblen</a>);
<a name="l00252"></a>00252     }
<a name="l00253"></a>00253   <span class="keywordflow">if</span> (bytesread &lt; 0)
<a name="l00254"></a>00254     {
<a name="l00255"></a>00255       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;isis_recv_pdu_bcast(): read() failed: %s&quot;</span>,
<a name="l00256"></a>00256          <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00257"></a>00257       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00258"></a>00258     }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260   <span class="keywordflow">if</span> (bytesread == 0)
<a name="l00261"></a>00261     <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00262"></a>00262 
<a name="l00263"></a>00263   bpf_hdr = (<span class="keyword">struct </span>bpf_hdr *) <a class="code" href="isis__bpf_8c.html#a5fb1d169b7cac95f17f17b40cc136d99">readbuff</a>;
<a name="l00264"></a>00264 
<a name="l00265"></a>00265   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (bpf_hdr-&gt;bh_caplen == bpf_hdr-&gt;bh_datalen);
<a name="l00266"></a>00266 
<a name="l00267"></a>00267   offset = bpf_hdr-&gt;bh_hdrlen + <a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a> + ETHER_HDR_LEN;
<a name="l00268"></a>00268 
<a name="l00269"></a>00269   <span class="comment">/* then we lose the BPF, LLC and ethernet headers */</span>
<a name="l00270"></a>00270   <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#abc0c4c6484b34715228b6811f442f9aa">rcv_stream</a>, <a class="code" href="isis__bpf_8c.html#a5fb1d169b7cac95f17f17b40cc136d99">readbuff</a> + offset, 
<a name="l00271"></a>00271                 bpf_hdr-&gt;bh_caplen - <a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a> - ETHER_HDR_LEN);
<a name="l00272"></a>00272   <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#abc0c4c6484b34715228b6811f442f9aa">rcv_stream</a>, 0);
<a name="l00273"></a>00273 
<a name="l00274"></a>00274   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (ssnpa, <a class="code" href="isis__bpf_8c.html#a5fb1d169b7cac95f17f17b40cc136d99">readbuff</a> + bpf_hdr-&gt;bh_hdrlen + <a class="code" href="isis__circuit_8c.html#abf4fcaacb1ad2010711b7c880ec2ed20">ETHER_ADDR_LEN</a>,
<a name="l00275"></a>00275       <a class="code" href="isis__circuit_8c.html#abf4fcaacb1ad2010711b7c880ec2ed20">ETHER_ADDR_LEN</a>);
<a name="l00276"></a>00276 
<a name="l00277"></a>00277   <span class="keywordflow">if</span> (ioctl (circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a>, BIOCFLUSH, &amp;one) &lt; 0)
<a name="l00278"></a>00278     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Flushing failed: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00279"></a>00279 
<a name="l00280"></a>00280   <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>;
<a name="l00281"></a>00281 }
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 <span class="keywordtype">int</span>
<a name="l00284"></a><a class="code" href="isis__network_8h.html#a2efdf2f9514f6f6651bdd86f788c92a5">00284</a> <a class="code" href="isis__bpf_8c.html#a2efdf2f9514f6f6651bdd86f788c92a5">isis_recv_pdu_p2p</a> (<span class="keyword">struct</span> <a class="code" href="structisis__circuit.html">isis_circuit</a> *circuit, u_char * ssnpa)
<a name="l00285"></a>00285 {
<a name="l00286"></a>00286   <span class="keywordtype">int</span> bytesread;
<a name="l00287"></a>00287 
<a name="l00288"></a>00288   bytesread = <a class="code" href="stream_8c.html#a4a8155ed801a445b81feaf22b1442dc3">stream_read</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#abc0c4c6484b34715228b6811f442f9aa">rcv_stream</a>, circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a>, 
<a name="l00289"></a>00289                            circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);
<a name="l00290"></a>00290 
<a name="l00291"></a>00291   <span class="keywordflow">if</span> (bytesread &lt; 0)
<a name="l00292"></a>00292     {
<a name="l00293"></a>00293       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;isis_recv_pdu_p2p(): read () failed: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00294"></a>00294       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00295"></a>00295     }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297   <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>;
<a name="l00298"></a>00298 }
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 <span class="keywordtype">int</span>
<a name="l00301"></a><a class="code" href="isis__network_8h.html#aa14af084fa2a0eecae13e4ec0f2ccb37">00301</a> <a class="code" href="isis__bpf_8c.html#aa14af084fa2a0eecae13e4ec0f2ccb37">isis_send_pdu_bcast</a> (<span class="keyword">struct</span> <a class="code" href="structisis__circuit.html">isis_circuit</a> *circuit, <span class="keywordtype">int</span> level)
<a name="l00302"></a>00302 {
<a name="l00303"></a>00303   <span class="keyword">struct </span>ether_header *eth;
<a name="l00304"></a>00304   <span class="keywordtype">int</span> written;
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#a282678da28cc5e426019913c913ea490">snd_stream</a>, 0);
<a name="l00307"></a>00307 
<a name="l00308"></a>00308   <span class="comment">/*</span>
<a name="l00309"></a>00309 <span class="comment">   * First the eth header</span>
<a name="l00310"></a>00310 <span class="comment">   */</span>
<a name="l00311"></a>00311   eth = (<span class="keyword">struct </span>ether_header *) <a class="code" href="isis__bpf_8c.html#a23dc4e080e0af80df140a0a1b993598e">sock_buff</a>;
<a name="l00312"></a>00312   <span class="keywordflow">if</span> (level == 1)
<a name="l00313"></a>00313     <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (eth-&gt;ether_dhost, <a class="code" href="isis__bpf_8c.html#a564f249d5a142831ee4e6f6cd2ecc396">ALL_L1_ISS</a>, <a class="code" href="isis__circuit_8c.html#abf4fcaacb1ad2010711b7c880ec2ed20">ETHER_ADDR_LEN</a>);
<a name="l00314"></a>00314   <span class="keywordflow">else</span>
<a name="l00315"></a>00315     <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (eth-&gt;ether_dhost, <a class="code" href="isis__bpf_8c.html#a7b5f2cee21b83e1734bd7203f23262aa">ALL_L2_ISS</a>, <a class="code" href="isis__circuit_8c.html#abf4fcaacb1ad2010711b7c880ec2ed20">ETHER_ADDR_LEN</a>);
<a name="l00316"></a>00316   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (eth-&gt;ether_shost, circuit-&gt;<a class="code" href="structisis__circuit.html#a054734bc8d5a177c375cd28ab313dfc4">u</a>.<a class="code" href="structisis__circuit.html#a921ef29acc454e98615e0269f3bc926e">bc</a>.<a class="code" href="structisis__bcast__info.html#ac7adabf9b24b03c93e73bb9b03c2192b">snpa</a>, <a class="code" href="isis__circuit_8c.html#abf4fcaacb1ad2010711b7c880ec2ed20">ETHER_ADDR_LEN</a>);
<a name="l00317"></a>00317   eth-&gt;ether_type = htons (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#a282678da28cc5e426019913c913ea490">snd_stream</a>) + <a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a>);
<a name="l00318"></a>00318 
<a name="l00319"></a>00319   <span class="comment">/*</span>
<a name="l00320"></a>00320 <span class="comment">   * Then the LLC</span>
<a name="l00321"></a>00321 <span class="comment">   */</span>
<a name="l00322"></a>00322   <a class="code" href="isis__bpf_8c.html#a23dc4e080e0af80df140a0a1b993598e">sock_buff</a>[ETHER_HDR_LEN] = <a class="code" href="isis__constants_8h.html#a7dc7c0809fa809eb5774a4356c1368db">ISO_SAP</a>;
<a name="l00323"></a>00323   <a class="code" href="isis__bpf_8c.html#a23dc4e080e0af80df140a0a1b993598e">sock_buff</a>[ETHER_HDR_LEN + 1] = <a class="code" href="isis__constants_8h.html#a7dc7c0809fa809eb5774a4356c1368db">ISO_SAP</a>;
<a name="l00324"></a>00324   <a class="code" href="isis__bpf_8c.html#a23dc4e080e0af80df140a0a1b993598e">sock_buff</a>[ETHER_HDR_LEN + 2] = 0x03;
<a name="l00325"></a>00325 
<a name="l00326"></a>00326   <span class="comment">/* then we copy the data */</span>
<a name="l00327"></a>00327   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<a class="code" href="isis__bpf_8c.html#a23dc4e080e0af80df140a0a1b993598e">sock_buff</a> + (<a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a> + ETHER_HDR_LEN), circuit-&gt;<a class="code" href="structisis__circuit.html#a282678da28cc5e426019913c913ea490">snd_stream</a>-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>,
<a name="l00328"></a>00328       <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#a282678da28cc5e426019913c913ea490">snd_stream</a>));
<a name="l00329"></a>00329 
<a name="l00330"></a>00330   <span class="comment">/* now we can send this */</span>
<a name="l00331"></a>00331   written = write (circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a>, <a class="code" href="isis__bpf_8c.html#a23dc4e080e0af80df140a0a1b993598e">sock_buff</a>,
<a name="l00332"></a>00332            <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#a282678da28cc5e426019913c913ea490">snd_stream</a>) 
<a name="l00333"></a>00333             + <a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a> + ETHER_HDR_LEN);
<a name="l00334"></a>00334 
<a name="l00335"></a>00335   <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>;
<a name="l00336"></a>00336 }
<a name="l00337"></a>00337 
<a name="l00338"></a>00338 <span class="keywordtype">int</span>
<a name="l00339"></a><a class="code" href="isis__network_8h.html#ab857bf21093bbcc5e575dd858d71bfc5">00339</a> <a class="code" href="isis__bpf_8c.html#ab857bf21093bbcc5e575dd858d71bfc5">isis_send_pdu_p2p</a> (<span class="keyword">struct</span> <a class="code" href="structisis__circuit.html">isis_circuit</a> *circuit, <span class="keywordtype">int</span> level)
<a name="l00340"></a>00340 {
<a name="l00341"></a>00341   <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>;
<a name="l00342"></a>00342 }
<a name="l00343"></a>00343 
<a name="l00344"></a>00344 <span class="preprocessor">#endif </span><span class="comment">/* ISIS_METHOD == ISIS_METHOD_BPF */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="isis__bpf_8c.html">isis_bpf.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:04 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
