<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_attr.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__attr_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_attr.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__attr_8h__dep__incl.png" border="0" usemap="#bgpd_2bgp__attr_8hdep" alt=""/></div>
<map name="bgpd_2bgp__attr_8hdep" id="bgpd_2bgp__attr_8hdep">
<area shape="rect" id="node3" href="bgp__advertise_8c.html" title="bgpd/bgp_advertise.c" alt="" coords="610,80,765,107"/><area shape="rect" id="node5" href="bgp__aspath_8c.html" title="bgpd/bgp_aspath.c" alt="" coords="5,155,144,181"/><area shape="rect" id="node7" href="bgp__attr_8c.html" title="bgpd/bgp_attr.c" alt="" coords="169,155,289,181"/><area shape="rect" id="node9" href="bgp__damp_8c.html" title="bgpd/bgp_damp.c" alt="" coords="1663,80,1796,107"/><area shape="rect" id="node11" href="bgp__debug_8c.html" title="bgpd/bgp_debug.c" alt="" coords="313,155,452,181"/><area shape="rect" id="node13" href="bgp__debug_8h.html" title="bgpd/bgp_debug.h" alt="" coords="1145,80,1284,107"/><area shape="rect" id="node18" href="bgp__fsm_8c.html" title="bgpd/bgp_fsm.c" alt="" coords="477,155,597,181"/><area shape="rect" id="node20" href="bgp__main_8c.html" title="bgpd/bgp_main.c" alt="" coords="622,155,748,181"/><area shape="rect" id="node22" href="bgp__network_8c.html" title="bgpd/bgp_network.c" alt="" coords="773,155,920,181"/><area shape="rect" id="node24" href="bgp__nexthop_8c.html" title="bgpd/bgp_nexthop.c" alt="" coords="945,155,1095,181"/><area shape="rect" id="node26" href="bgp__open_8c.html" title="bgpd/bgp_open.c" alt="" coords="1333,155,1464,181"/><area shape="rect" id="node28" href="bgp__packet_8c.html" title="bgpd/bgp_packet.c" alt="" coords="1489,155,1628,181"/><area shape="rect" id="node30" href="bgp__route_8c.html" title="bgpd/bgp_route.c" alt="" coords="1653,155,1784,181"/><area shape="rect" id="node32" href="bgp__vty_8c.html" title="bgpd/bgp_vty.c" alt="" coords="1809,155,1927,181"/><area shape="rect" id="node34" href="bgp__zebra_8c.html" title="bgpd/bgp_zebra.c" alt="" coords="1951,155,2083,181"/><area shape="rect" id="node36" href="bgpd_8c.html" title="bgpd/bgpd.c" alt="" coords="2107,155,2207,181"/><area shape="rect" id="node40" href="bgp__mp__attr__test_8c.html" title="tests/bgp_mp_attr_test.c" alt="" coords="2232,155,2411,181"/><area shape="rect" id="node42" href="bgp__dump_8c.html" title="bgpd/bgp_dump.c" alt="" coords="1820,80,1953,107"/><area shape="rect" id="node46" href="bgp__mplsvpn_8c.html" title="bgpd/bgp_mplsvpn.c" alt="" coords="1978,80,2128,107"/><area shape="rect" id="node53" href="bgp__routemap_8c.html" title="bgpd/bgp_routemap.c" alt="" coords="2153,80,2311,107"/><area shape="rect" id="node38" href="bgp__capability__test_8c.html" title="tests/bgp_capability_test.c" alt="" coords="1120,155,1309,181"/></map>
</div>
</div>
<p><a href="bgp__attr_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structattr__extra.html">attr_extra</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structattr.html">attr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcluster__list.html">cluster_list</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structtransit.html">transit</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a2bbc2f441e9a93a786bab4fab34b339d">BITMAP_NBBY</a>&#160;&#160;&#160;8</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a06b1e413f17e880aa755637031050a20">SET_BITMAP</a>(MAP, NUM)&#160;&#160;&#160;SET_FLAG (MAP[(NUM) / BITMAP_NBBY], 1 &lt;&lt; ((NUM) % BITMAP_NBBY))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#aaef34cec810ea0c6b60279c16ffd8a20">CHECK_BITMAP</a>(MAP, NUM)&#160;&#160;&#160;CHECK_FLAG (MAP[(NUM) / BITMAP_NBBY], 1 &lt;&lt; ((NUM) % BITMAP_NBBY))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#afd4e8f98deac933c51048df75bf14c22">BGP_MED_MAX</a>&#160;&#160;&#160;UINT32_MAX</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a542c7b5de136c1be727343794d0c1bad">BGP_ATTR_TYPE_RANGE</a>&#160;&#160;&#160;256</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#af6de64ce601b88319ffb9af2a4e0a18d">BGP_ATTR_BITMAP_SIZE</a>&#160;&#160;&#160;(BGP_ATTR_TYPE_RANGE / BITMAP_NBBY)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>&#160;&#160;&#160;0x80</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>&#160;&#160;&#160;0x40</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a53601906c8a028376cb7e4c2c691dc12">BGP_ATTR_FLAG_PARTIAL</a>&#160;&#160;&#160;0x20</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>&#160;&#160;&#160;0x10</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a6acf4565f0b20f4f343a048ff598d3c3">BGP_ATTR_MIN_LEN</a>&#160;&#160;&#160;3</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#ad946951928329877a27ea97365b6c1d1">BGP_ATTR_DEFAULT_WEIGHT</a>&#160;&#160;&#160;32768</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="el" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>)&#160;&#160;&#160;(1 &lt;&lt; ((<a class="el" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>) - 1))</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a9c65ea9c30a455a48fcc49820025780d">bgp_attr_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#af16afab87ca745e1e019518a3f012cab">bgp_attr_finish</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#aa3c3365e35f5c6373342410af931e4e5">bgp_attr_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *, struct <a class="el" href="structattr.html">attr</a> *, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>, struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *, struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a53cba2a60c5d3f7fac9d5d190fd1dadb">bgp_attr_check</a> (struct <a class="el" href="structpeer.html">peer</a> *, struct <a class="el" href="structattr.html">attr</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structattr__extra.html">attr_extra</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#ae3de37d8f77124be30e5cede4bc12fe7">bgp_attr_extra_get</a> (struct <a class="el" href="structattr.html">attr</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a6c2954236690cd890aa3b2bec5d2d28f">bgp_attr_extra_free</a> (struct <a class="el" href="structattr.html">attr</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#aacb4d7f2da9bcb3664e1b9bac63704c7">bgp_attr_dup</a> (struct <a class="el" href="structattr.html">attr</a> *, struct <a class="el" href="structattr.html">attr</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structattr.html">attr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a926e3fd006b9ff905738af811f683207">bgp_attr_unintern</a> (struct <a class="el" href="structattr.html">attr</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a2af32d5c1ce0c936047b00db0b8c9a0d">bgp_attr_flush</a> (struct <a class="el" href="structattr.html">attr</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structattr.html">attr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#ac536a0e705f5a7904d87a6eee2ee58d3">bgp_attr_default_set</a> (struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, u_char)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structattr.html">attr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a7967bc97d4ef6d342e6ad5b88396aa57">bgp_attr_default_intern</a> (u_char)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structattr.html">attr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a33e250750dda84a91bd844fde16ec3cf">bgp_attr_aggregate_intern</a> (struct <a class="el" href="structbgp.html">bgp</a> *, u_char, struct <a class="el" href="structaspath.html">aspath</a> *, struct <a class="el" href="structcommunity.html">community</a> *, int as_set)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a9c8856cdecaca73aff9e0773fe1499a3">bgp_packet_attribute</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, struct <a class="el" href="structpeer.html">peer</a> *, struct <a class="el" href="structstream.html">stream</a> *, struct <a class="el" href="structattr.html">attr</a> *, struct <a class="el" href="structprefix.html">prefix</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>, struct <a class="el" href="structpeer.html">peer</a> *, struct <a class="el" href="structprefix__rd.html">prefix_rd</a> *, u_char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#acd92813362ab8e29a6095e64f1996fc0">bgp_packet_withdraw</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>, struct <a class="el" href="structprefix__rd.html">prefix_rd</a> *, u_char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#ac0399b3aaff6a3b07b2ecda1b08aebd8">bgp_dump_routes_attr</a> (struct <a class="el" href="structstream.html">stream</a> *, struct <a class="el" href="structattr.html">attr</a> *, struct <a class="el" href="structprefix.html">prefix</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a284795cc2efe70f13274d1b1a791f049">attrhash_cmp</a> (const void *, const void *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#ae179c9d7478d3b6fabbb2e03dd00fb4f">attrhash_key_make</a> (void *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#aba29399774780ecd129ed9aca74f62e3">attr_show_all</a> (struct <a class="el" href="structvty.html">vty</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#abf6f340c9796631aa1b7bf14bcadd0f8">attr_count</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a7802e598375cc4a09f11e175b70f32ae">attr_unknown_count</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#aa0d0f10149eb71be2d1f6a0547a7f5e6">cluster_loop_check</a> (struct <a class="el" href="structcluster__list.html">cluster_list</a> *, struct in_addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a4693ff2be9beaf21bfe55fcde9880964">cluster_unintern</a> (struct <a class="el" href="structcluster__list.html">cluster_list</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#ab76373f263e6cfc84478d7e29a350360">transit_unintern</a> (struct <a class="el" href="structtransit.html">transit</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a4e538adcc3691e47618a243ea1190471">bgp_mp_reach_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>, struct <a class="el" href="structattr.html">attr</a> *, struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__attr_8h.html#a1038aeffc20235a56ab777777f4bd2ef">bgp_mp_unreach_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *, <a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>, struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a708b3fe5f6403a639f57da84ea7b638a"></a><!-- doxytag: member="bgp_attr.h::ATTR_FLAG_BIT" ref="a708b3fe5f6403a639f57da84ea7b638a" args="(X)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ATTR_FLAG_BIT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a></td><td>)</td>
          <td>&#160;&#160;&#160;(1 &lt;&lt; ((<a class="el" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>) - 1))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00139">139</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="af6de64ce601b88319ffb9af2a4e0a18d"></a><!-- doxytag: member="bgp_attr.h::BGP_ATTR_BITMAP_SIZE" ref="af6de64ce601b88319ffb9af2a4e0a18d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ATTR_BITMAP_SIZE&#160;&#160;&#160;(BGP_ATTR_TYPE_RANGE / BITMAP_NBBY)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00038">38</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad946951928329877a27ea97365b6c1d1"></a><!-- doxytag: member="bgp_attr.h::BGP_ATTR_DEFAULT_WEIGHT" ref="ad946951928329877a27ea97365b6c1d1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ATTR_DEFAULT_WEIGHT&#160;&#160;&#160;32768</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00048">48</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a23a24c94815b6e2058b2d97af3ef83a5"></a><!-- doxytag: member="bgp_attr.h::BGP_ATTR_FLAG_EXTLEN" ref="a23a24c94815b6e2058b2d97af3ef83a5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ATTR_FLAG_EXTLEN&#160;&#160;&#160;0x10</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00044">44</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a31dfe8b17b4f54f98b933967532765d7"></a><!-- doxytag: member="bgp_attr.h::BGP_ATTR_FLAG_OPTIONAL" ref="a31dfe8b17b4f54f98b933967532765d7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ATTR_FLAG_OPTIONAL&#160;&#160;&#160;0x80</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00041">41</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a53601906c8a028376cb7e4c2c691dc12"></a><!-- doxytag: member="bgp_attr.h::BGP_ATTR_FLAG_PARTIAL" ref="a53601906c8a028376cb7e4c2c691dc12" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ATTR_FLAG_PARTIAL&#160;&#160;&#160;0x20</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00043">43</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad535d34e852c0db6f9e08a083147dc2a"></a><!-- doxytag: member="bgp_attr.h::BGP_ATTR_FLAG_TRANS" ref="ad535d34e852c0db6f9e08a083147dc2a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ATTR_FLAG_TRANS&#160;&#160;&#160;0x40</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00042">42</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6acf4565f0b20f4f343a048ff598d3c3"></a><!-- doxytag: member="bgp_attr.h::BGP_ATTR_MIN_LEN" ref="a6acf4565f0b20f4f343a048ff598d3c3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ATTR_MIN_LEN&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00047">47</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a542c7b5de136c1be727343794d0c1bad"></a><!-- doxytag: member="bgp_attr.h::BGP_ATTR_TYPE_RANGE" ref="a542c7b5de136c1be727343794d0c1bad" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_ATTR_TYPE_RANGE&#160;&#160;&#160;256</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00037">37</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="afd4e8f98deac933c51048df75bf14c22"></a><!-- doxytag: member="bgp_attr.h::BGP_MED_MAX" ref="afd4e8f98deac933c51048df75bf14c22" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_MED_MAX&#160;&#160;&#160;UINT32_MAX</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00033">33</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2bbc2f441e9a93a786bab4fab34b339d"></a><!-- doxytag: member="bgp_attr.h::BITMAP_NBBY" ref="a2bbc2f441e9a93a786bab4fab34b339d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BITMAP_NBBY&#160;&#160;&#160;8</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00025">25</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="aaef34cec810ea0c6b60279c16ffd8a20"></a><!-- doxytag: member="bgp_attr.h::CHECK_BITMAP" ref="aaef34cec810ea0c6b60279c16ffd8a20" args="(MAP, NUM)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CHECK_BITMAP</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">MAP, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">NUM&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;CHECK_FLAG (MAP[(NUM) / BITMAP_NBBY], 1 &lt;&lt; ((NUM) % BITMAP_NBBY))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00030">30</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a06b1e413f17e880aa755637031050a20"></a><!-- doxytag: member="bgp_attr.h::SET_BITMAP" ref="a06b1e413f17e880aa755637031050a20" args="(MAP, NUM)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SET_BITMAP</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">MAP, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">NUM&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;SET_FLAG (MAP[(NUM) / BITMAP_NBBY], 1 &lt;&lt; ((NUM) % BITMAP_NBBY))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8h_source.html#l00027">27</a> of file <a class="el" href="bgp__attr_8h_source.html">bgp_attr.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="abf6f340c9796631aa1b7bf14bcadd0f8"></a><!-- doxytag: member="bgp_attr.h::attr_count" ref="abf6f340c9796631aa1b7bf14bcadd0f8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long int attr_count </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00341">341</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a>-&gt;<a class="code" href="structhash.html#a4d82055a4a52d99ee887d24004fd91d3">count</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aba29399774780ecd129ed9aca74f62e3"></a><!-- doxytag: member="bgp_attr.h::attr_show_all" ref="aba29399774780ecd129ed9aca74f62e3" args="(struct vty *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void attr_show_all </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00471">471</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="hash_8c.html#a69eb0b2447b78899dac4da27895b41e7">hash_iterate</a> (<a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a>, 
        (<span class="keywordtype">void</span> (*)(<span class="keyword">struct</span> <a class="code" href="structhash__backet.html">hash_backet</a> *, <span class="keywordtype">void</span> *))
        <a class="code" href="bgp__attr_8c.html#a14730c63513b5bf81ff42d4588f62920">attr_show_all_iterator</a>,
        <a class="code" href="structvty.html">vty</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7802e598375cc4a09f11e175b70f32ae"></a><!-- doxytag: member="bgp_attr.h::attr_unknown_count" ref="a7802e598375cc4a09f11e175b70f32ae" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long int attr_unknown_count </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00347">347</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a>-&gt;<a class="code" href="structhash.html#a4d82055a4a52d99ee887d24004fd91d3">count</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a284795cc2efe70f13274d1b1a791f049"></a><!-- doxytag: member="bgp_attr.h::attrhash_cmp" ref="a284795cc2efe70f13274d1b1a791f049" args="(const void *, const void *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int attrhash_cmp </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00407">407</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * attr1 = p1;
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * attr2 = p2;

  <span class="keywordflow">if</span> (attr1-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> == attr2-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> == attr2-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == attr2-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> == attr2-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> == attr2-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a> == attr2-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a> == attr2-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a> == attr2-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>
      &amp;&amp; attr1-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a> == attr2-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>)
    {
      <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *ae1 = attr1-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *ae2 = attr2-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      
      <span class="keywordflow">if</span> (ae1 &amp;&amp; ae2
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> == ae2-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr == ae2-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> == ae2-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a>
#ifdef HAVE_IPV6
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == ae2-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>
          &amp;&amp; <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;ae1-&gt;mp_nexthop_global, &amp;ae2-&gt;mp_nexthop_global)
          &amp;&amp; <a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">IPV6_ADDR_SAME</a> (&amp;ae1-&gt;mp_nexthop_local, &amp;ae2-&gt;mp_nexthop_local)
#endif <span class="comment">/* HAVE_IPV6 */</span>
          &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;ae1-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, &amp;ae2-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>)
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> == ae2-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a> == ae2-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>
          &amp;&amp; ae1-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> == ae2-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
        <span class="keywordflow">return</span> 1;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ae1 || ae2)
        <span class="keywordflow">return</span> 0;
      <span class="comment">/* neither attribute has extra attributes, so they&#39;re same */</span>
      <span class="keywordflow">return</span> 1;
    }
  <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae179c9d7478d3b6fabbb2e03dd00fb4f"></a><!-- doxytag: member="bgp_attr.h::attrhash_key_make" ref="ae179c9d7478d3b6fabbb2e03dd00fb4f" args="(void *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int attrhash_key_make </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00353">353</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> * <a class="code" href="structattr.html">attr</a> = (<span class="keyword">struct </span>attr *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structkey.html">key</a> = 0;

  key += attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>;
  key += attr-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr;
  key += attr-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>;
  key += attr-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>;
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>)
    {
      key += attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>;
      key += attr-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>;
    }
  
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>;
      key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr;
      key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a>;
      key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>.s_addr;
    }
  
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
    key += <a class="code" href="bgp__aspath_8c.html#a0ff2c762b3aea1084db8500839a8d314">aspath_key_make</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
    key += <a class="code" href="bgp__community_8c.html#ad929d0c5734e5a2df900d29ab3c59921">community_hash_make</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
  
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>)
        key += <a class="code" href="bgp__ecommunity_8c.html#adb13cb51e62ac1f0e4a3cf6137748409">ecommunity_hash_make</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
        key += <a class="code" href="bgp__attr_8c.html#a88170c36e4bef12d6b3d421901075a24">cluster_hash_key_make</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
      <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
        key += <a class="code" href="bgp__attr_8c.html#a42b9d753ec4e078aca5ef97359c3241b">transit_hash_key_make</a> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      {
        <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
        
        key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>;
        <span class="keywordflow">for</span> (i = 0; i &lt; 16; i++)
          key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global.s6_addr[i];
        for (i = 0; i &lt; 16; i++)
          key += attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_local.s6_addr[i];
      }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    }

  <span class="keywordflow">return</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a33e250750dda84a91bd844fde16ec3cf"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_aggregate_intern" ref="a33e250750dda84a91bd844fde16ec3cf" args="(struct bgp *, u_char, struct aspath *, struct community *, int as_set)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structattr.html">attr</a>* bgp_attr_aggregate_intern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structaspath.html">aspath</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structcommunity.html">community</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>as_set</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00593">593</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> <a class="code" href="structattr.html">attr</a>;
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre;

  memset (&amp;<a class="code" href="structattr.html">attr</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a>));
  attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  
  <span class="comment">/* Origin attribute. */</span>
  <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> = origin;
  <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);

  <span class="comment">/* AS path attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structaspath.html">aspath</a>)
    <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#a344d7cb1b52c926464681624421bc9c1">aspath_intern</a> (<a class="code" href="structaspath.html">aspath</a>);
  <span class="keywordflow">else</span>
    <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#aadc92a26e3c657307be1c2057b187cda">aspath_empty</a> ();
  <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);

  <span class="comment">/* Next hop attribute.  */</span>
  <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);

  <span class="keywordflow">if</span> (<a class="code" href="structcommunity.html">community</a>)
    {
      <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> = <a class="code" href="structcommunity.html">community</a>;
      <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
    }

  attre-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> = <a class="code" href="bgp__attr_8h.html#ad946951928329877a27ea97365b6c1d1">BGP_ATTR_DEFAULT_WEIGHT</a>;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (! as_set)
    <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
  <a class="code" href="structattr.html">attr</a>.<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
    attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>;
  <span class="keywordflow">else</span>
    attre-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> = <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a47faf46bdc2227fb56df263f60c099fb">as</a>;
  attre-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a> = <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>;

  <span class="keyword">new</span> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  
  <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (new-&gt;aspath);
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a53cba2a60c5d3f7fac9d5d190fd1dadb"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_check" ref="a53cba2a60c5d3f7fac9d5d190fd1dadb" args="(struct peer *, struct attr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_attr_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01812">1812</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
  
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>)))
    type = <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>)))
    type = <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>;

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>)))
    type = <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (<a class="code" href="structpeer.html">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>
      &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>, <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>)))
    type = <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>;

  <span class="keywordflow">if</span> (type)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s Missing well-known attribute %d.&quot;</span>,
        <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type);
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (<a class="code" href="structpeer.html">peer</a>, 
                 <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#af452ed83988422b98f2ec9c8ee97c23a">BGP_NOTIFY_UPDATE_MISS_ATTR</a>,
                 &amp;type, 1);
      <span class="keywordflow">return</span> -1;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7967bc97d4ef6d342e6ad5b88396aa57"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_default_intern" ref="a7967bc97d4ef6d342e6ad5b88396aa57" args="(u_char)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structattr.html">attr</a>* bgp_attr_default_intern </td>
          <td>(</td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00574">574</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> <a class="code" href="structattr.html">attr</a>;
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre;
  
  memset (&amp;<a class="code" href="structattr.html">attr</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a>));
  attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  
  <a class="code" href="bgp__attr_8c.html#afe11e9b57f736617eca855aceae26f28">bgp_attr_default_set</a>(&amp;<a class="code" href="structattr.html">attr</a>, origin);

  <span class="keyword">new</span> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;<a class="code" href="structattr.html">attr</a>);
  
  <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (new-&gt;aspath);
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac536a0e705f5a7904d87a6eee2ee58d3"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_default_set" ref="ac536a0e705f5a7904d87a6eee2ee58d3" args="(struct attr *attr, u_char)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structattr.html">attr</a>* bgp_attr_default_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00553">553</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  memset (attr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> attr));
  <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a> (attr);
  
  attr-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a> = origin;
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
  attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#aadc92a26e3c657307be1c2057b187cda">aspath_empty</a> ();
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);
  attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a83e07fadc622d7c68bf1aff668371f18">weight</a> = <a class="code" href="bgp__attr_8h.html#ad946951928329877a27ea97365b6c1d1">BGP_ATTR_DEFAULT_WEIGHT</a>;
  attr-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> |= <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
  <span class="keywordflow">return</span> attr;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aacb4d7f2da9bcb3664e1b9bac63704c7"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_dup" ref="aacb4d7f2da9bcb3664e1b9bac63704c7" args="(struct attr *, struct attr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_dup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00330">330</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  *<span class="keyword">new</span> = *orig;
  <span class="keywordflow">if</span> (orig-&gt;extra)
    {
      <span class="keyword">new</span>-&gt;extra = <a class="code" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">bgp_attr_extra_new</a>();
      *<span class="keyword">new</span>-&gt;extra = *orig-&gt;extra;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6c2954236690cd890aa3b2bec5d2d28f"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_extra_free" ref="a6c2954236690cd890aa3b2bec5d2d28f" args="(struct attr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_extra_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00308">308</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba71f75806fa247a292b0bb76e802dd55b">MTYPE_ATTR_EXTRA</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
      <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae3de37d8f77124be30e5cede4bc12fe7"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_extra_get" ref="ae3de37d8f77124be30e5cede4bc12fe7" args="(struct attr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structattr__extra.html">attr_extra</a>* bgp_attr_extra_get </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00318">318</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> = <a class="code" href="bgp__attr_8c.html#a72ac23a2be479814bcfd0d5d8ec00b53">bgp_attr_extra_new</a>();
  <span class="keywordflow">return</span> <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af16afab87ca745e1e019518a3f012cab"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_finish" ref="af16afab87ca745e1e019518a3f012cab" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_finish </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l02354">2354</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__aspath_8c.html#ad12467085616732b130bd1edac9277fb">aspath_finish</a> ();
  <a class="code" href="bgp__attr_8c.html#a2dd32c1c32bc66e0991f4317908b1e7f">attrhash_finish</a> ();
  <a class="code" href="bgp__community_8c.html#a29420c210e4ff289843eb117aed4350a">community_finish</a> ();
  <a class="code" href="bgp__ecommunity_8c.html#a3909ede3d29a88faad854a2833ec9322">ecommunity_finish</a> ();
  <a class="code" href="bgp__attr_8c.html#a697b54368062dcd4c02cdcfe72de7a0e">cluster_finish</a> ();
  <a class="code" href="bgp__attr_8c.html#a439f9087cba24cd9ab148b6f2910596c">transit_finish</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2af32d5c1ce0c936047b00db0b8c9a0d"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_flush" ref="a2af32d5c1ce0c936047b00db0b8c9a0d" args="(struct attr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_flush </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00689">689</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> &amp;&amp; ! <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#ad4ebb184cbb394e06b78340af8cbb336">refcnt</a>)
    <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> &amp;&amp; ! <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#a52dd7a5a975af9d21ad9f93a91deb739">refcnt</a>)
    <a class="code" href="bgp__community_8c.html#a890bdfd2f7517c0fe7f30687d1d4d825">community_free</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> &amp;&amp; ! attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>)
        <a class="code" href="bgp__ecommunity_8c.html#a56f7dda58051cbec7fd56238196dcfc2">ecommunity_free</a> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a> &amp;&amp; ! attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>)
        <a class="code" href="bgp__attr_8c.html#aec913b18daf1b78f2b8e08f4e26b2ae9">cluster_free</a> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> &amp;&amp; ! attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>)
        <a class="code" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">transit_free</a> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9c65ea9c30a455a48fcc49820025780d"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_init" ref="a9c65ea9c30a455a48fcc49820025780d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l02343">2343</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__aspath_8c.html#a34b9f56e53531a0e4ceedcb31d59e027">aspath_init</a> ();
  <a class="code" href="bgp__attr_8c.html#a3cab087c33c2777f3b95a66efcd2c723">attrhash_init</a> ();
  <a class="code" href="bgp__community_8c.html#a24d2ec91020660700696ad24408b4768">community_init</a> ();
  <a class="code" href="bgp__ecommunity_8c.html#a51951f652cd586d53176801edb217319">ecommunity_init</a> ();
  <a class="code" href="bgp__attr_8c.html#a32b687ae280c00df56b2a62c0600376d">cluster_init</a> ();
  <a class="code" href="bgp__attr_8c.html#a17e35fe6b13cafa2f3f54efe216e0f21">transit_init</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a791a2194bc7791b769c6ce55ac37b387"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_intern" ref="a791a2194bc7791b769c6ce55ac37b387" args="(struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structattr.html">attr</a>* bgp_attr_intern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00498">498</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>attr *find;

  <span class="comment">/* Intern referenced strucutre. */</span>
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
    {
      <span class="keywordflow">if</span> (! attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#ad4ebb184cbb394e06b78340af8cbb336">refcnt</a>)
    attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__aspath_8c.html#a344d7cb1b52c926464681624421bc9c1">aspath_intern</a> (attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
      <span class="keywordflow">else</span>
    attr-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#ad4ebb184cbb394e06b78340af8cbb336">refcnt</a>++;
    }
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
    {
      <span class="keywordflow">if</span> (! attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#a52dd7a5a975af9d21ad9f93a91deb739">refcnt</a>)
    attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a> = <a class="code" href="bgp__community_8c.html#a13f3f19052ddd0201e67b155a5d55657">community_intern</a> (attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
      <span class="keywordflow">else</span>
    attr-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#a52dd7a5a975af9d21ad9f93a91deb739">refcnt</a>++;
    }
  <span class="keywordflow">if</span> (attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = attr-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>)
        {
          <span class="keywordflow">if</span> (! attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>)
            attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a> = <a class="code" href="bgp__ecommunity_8c.html#aef15f1927a9085dd8f1df7fa612794db">ecommunity_intern</a> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
          <span class="keywordflow">else</span>
            attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a839024928ebd51dabf70c2ea80874aec">refcnt</a>++;
        }
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
        {
          <span class="keywordflow">if</span> (! attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>)
            attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a> = <a class="code" href="bgp__attr_8c.html#a3d834a28996e8a1003fc97a8c1b185d3">cluster_intern</a> (attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
          <span class="keywordflow">else</span>
            attre-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>++;
        }
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
        {
          <span class="keywordflow">if</span> (! attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>)
            attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> = <a class="code" href="bgp__attr_8c.html#a7493a41550711ef529ebd324e6ba2f28">transit_intern</a> (attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);
          <span class="keywordflow">else</span>
            attre-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>++;
        }
    }

  find = (<span class="keyword">struct </span>attr *) <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (<a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a>, attr, <a class="code" href="bgp__attr_8c.html#a734ed33a51d052caf6f1e013cba29d2c">bgp_attr_hash_alloc</a>);
  find-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a>++;

  <span class="keywordflow">return</span> find;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa3c3365e35f5c6373342410af931e4e5"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_parse" ref="aa3c3365e35f5c6373342410af931e4e5" args="(struct peer *, struct attr *, bgp_size_t, struct bgp_nlri *, struct bgp_nlri *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_attr_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01562">1562</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  u_char <a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a>;
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  u_char *startp, *endp;
  u_char *attr_endp;
  u_char seen[<a class="code" href="bgp__attr_8h.html#af6de64ce601b88319ffb9af2a4e0a18d">BGP_ATTR_BITMAP_SIZE</a>];
  <span class="comment">/* we need the as4_path only until we have synthesized the as_path with it */</span>
  <span class="comment">/* same goes for as4_aggregator */</span>
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *as4_path = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4_aggregator = 0;
  <span class="keyword">struct </span>in_addr as4_aggregator_addr = { 0 };

  <span class="comment">/* Initialize bitmap. */</span>
  memset (seen, 0, <a class="code" href="bgp__attr_8h.html#af6de64ce601b88319ffb9af2a4e0a18d">BGP_ATTR_BITMAP_SIZE</a>);

  <span class="comment">/* End pointer of BGP attribute. */</span>
  endp = <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (<a class="code" href="structpeer.html">peer</a>) + size;

  <span class="comment">/* Get attributes to the end of attribute length. */</span>
  <span class="keywordflow">while</span> (<a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (<a class="code" href="structpeer.html">peer</a>) &lt; endp)
    {
      <span class="comment">/* Check remaining length check.*/</span>
      <span class="keywordflow">if</span> (endp - <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (<a class="code" href="structpeer.html">peer</a>) &lt; <a class="code" href="bgp__attr_8h.html#a6acf4565f0b20f4f343a048ff598d3c3">BGP_ATTR_MIN_LEN</a>)
    {
      <span class="comment">/* XXX warning: long int format, int arg (arg 5) */</span>
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s error BGP attribute length %lu is smaller than min len&quot;</span>,
        <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
        (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) (endp - <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (<a class="code" href="structpeer.html">peer</a>))));

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* Fetch attribute flag and type. */</span>
      startp = <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (<a class="code" href="structpeer.html">peer</a>);
      flag = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (<a class="code" href="structpeer.html">peer</a>));
      type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (<a class="code" href="structpeer.html">peer</a>));

      <span class="comment">/* Check whether Extended-Length applies and is in bounds */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>)
          &amp;&amp; ((endp - startp) &lt; (<a class="code" href="bgp__attr_8h.html#a6acf4565f0b20f4f343a048ff598d3c3">BGP_ATTR_MIN_LEN</a> + 1)))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s Extended length set, but just %lu bytes of attr header&quot;</span>,
        <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
        (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) (endp - <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (<a class="code" href="structpeer.html">peer</a>))));

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* Check extended attribue length bit. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>))
    length = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (<a class="code" href="structpeer.html">peer</a>));
      <span class="keywordflow">else</span>
    length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (<a class="code" href="structpeer.html">peer</a>));
      
      <span class="comment">/* If any attribute appears more than once in the UPDATE</span>
<span class="comment">     message, then the Error Subcode is set to Malformed Attribute</span>
<span class="comment">     List. */</span>

      <span class="keywordflow">if</span> (<a class="code" href="bgp__attr_8h.html#aaef34cec810ea0c6b60279c16ffd8a20">CHECK_BITMAP</a> (seen, type))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING,
        <span class="stringliteral">&quot;%s error BGP attribute type %d appears twice in a message&quot;</span>,
        <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type);

      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* Set type to bitmap to check duplicate attribute.  `type&#39; is</span>
<span class="comment">     unsigned char so it never overflow bitmap range. */</span>

      <a class="code" href="bgp__attr_8h.html#a06b1e413f17e880aa755637031050a20">SET_BITMAP</a> (seen, type);

      <span class="comment">/* Overflow check. */</span>
      attr_endp =  <a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (<a class="code" href="structpeer.html">peer</a>) + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

      <span class="keywordflow">if</span> (attr_endp &gt; endp)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s BGP type %d length %d is too large, attribute total length is %d.  attr_endp is %p.  endp is %p&quot;</span>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type, length, size, attr_endp, endp);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* OK check attribute and store it&#39;s value. */</span>
      <span class="keywordflow">switch</span> (type)
    {
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>:
      ret = <a class="code" href="bgp__attr_8c.html#aaf7a2fdc3b1a0a7a224ffb267ed4c4a5">bgp_attr_origin</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag, startp);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>:
          <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> = <a class="code" href="bgp__attr_8c.html#a9d565c4d45753ff5b98ca6cafae517cf">bgp_attr_aspath</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag, startp, 0);
          ret = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a> ? 0 : -1 ;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>:
          as4_path = <a class="code" href="bgp__attr_8c.html#a9d565c4d45753ff5b98ca6cafae517cf">bgp_attr_aspath</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag, startp, 1);
          ret = as4_path  ? 0 : -1 ;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>: 
      ret = <a class="code" href="bgp__attr_8c.html#ae1d06b9e08112fe7e22c31e2c9d7e7c2">bgp_attr_nexthop</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag, startp);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>:
      ret = <a class="code" href="bgp__attr_8c.html#ad327c6ba90bb846259c8104944c1e5cc">bgp_attr_med</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag, startp);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a0e96dcc0def137493651c69fc9fa6d9b">bgp_attr_local_pref</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a5c49f0535902aeda2399ccb7bb016a1f">bgp_attr_atomic</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>:
      ret = <a class="code" href="bgp__attr_8c.html#aec3a552b65cbb441a514cf718c70ab0b">bgp_attr_aggregator</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>:
      ret = <a class="code" href="bgp__attr_8c.html#afea6c898d8c3fc0033930e5f7673c68d">bgp_attr_as4_aggregator</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, &amp;as4_aggregator, &amp;as4_aggregator_addr);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a7288e6a11e328af4566a2461e695b463">bgp_attr_community</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a4a6e3969ed3b0c6c65d5d9543fe7396a">bgp_attr_originator_id</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a21736af0634e478b2082cc415066128d">bgp_attr_cluster_list</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a3d8c4bfcee360cc1aeb5b4c1b7033360">bgp_mp_reach_parse</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, mp_update);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a75e156b1375161f4b5587249f7703cdc">BGP_ATTR_MP_UNREACH_NLRI</a>:
      ret = <a class="code" href="bgp__attr_8c.html#af99785d5e3ee803d5d4b7021e0b8448a">bgp_mp_unreach_parse</a> (<a class="code" href="structpeer.html">peer</a>, length, mp_withdraw);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>:
      ret = <a class="code" href="bgp__attr_8c.html#a525e1542dfd0fc2d8073734ecc465e64">bgp_attr_ext_communities</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag);
      <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>:
          ret = <a class="code" href="bgp__attr_8c.html#acd627446e5d7faa1c37f2cf45da1decf">bgp_attr_aspathlimit</a> (<a class="code" href="structpeer.html">peer</a>, length, <a class="code" href="structattr.html">attr</a>, flag, startp);
          <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      ret = <a class="code" href="bgp__attr_8c.html#a9c2459415859f92304cc452f583f3fce">bgp_attr_unknown</a> (<a class="code" href="structpeer.html">peer</a>, <a class="code" href="structattr.html">attr</a>, flag, type, length, startp);
      <span class="keywordflow">break</span>;
    }

      <span class="comment">/* If error occured immediately return to the caller. */</span>
      <span class="keywordflow">if</span> (ret &lt; 0)
        {
          <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING,
                <span class="stringliteral">&quot;%s: Attribute %s, parse error&quot;</span>, 
                <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, 
                <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>, type));
           <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, 
                            <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>,
                            <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
           <span class="keywordflow">return</span> ret;
        }

      <span class="comment">/* Check the fetched length. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (<a class="code" href="structpeer.html">peer</a>) != attr_endp)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s: BGP attribute %s, fetch error&quot;</span>, 
                <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>, type));
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* Check final read pointer is same as end pointer. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8h.html#a8f2b1b4fcaa0a636f70375648420327e">BGP_INPUT_PNT</a> (<a class="code" href="structpeer.html">peer</a>) != endp)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_WARNING, 
        <span class="stringliteral">&quot;%s BGP attribute %s, length mismatch&quot;</span>,
        <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__attr_8c.html#a9271676268b8a059b024fcced41fd9a4">attr_str</a>, type));
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<a class="code" href="structpeer.html">peer</a>, 
               <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a83200fa3a4ddf129ef709b9a16feac9e">BGP_NOTIFY_UPDATE_ATTR_LENG_ERR</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* </span>
<span class="comment">   * At this place we can see whether we got AS4_PATH and/or</span>
<span class="comment">   * AS4_AGGREGATOR from a 16Bit peer and act accordingly.</span>
<span class="comment">   * We can not do this before we&#39;ve read all attributes because</span>
<span class="comment">   * the as4 handling does not say whether AS4_PATH has to be sent</span>
<span class="comment">   * after AS_PATH or not - and when AS4_AGGREGATOR will be send</span>
<span class="comment">   * in relationship to AGGREGATOR.</span>
<span class="comment">   * So, to be defensive, we are not relying on any order and read</span>
<span class="comment">   * all attributes first, including these 32bit ones, and now,</span>
<span class="comment">   * afterwards, we look what and if something is to be done for as4.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__attr_8c.html#acfacad7a018c40edab53239c8e45e34a">bgp_attr_munge_as4_attrs</a> (<a class="code" href="structpeer.html">peer</a>, <a class="code" href="structattr.html">attr</a>, as4_path,
                                as4_aggregator, &amp;as4_aggregator_addr))
    <span class="keywordflow">return</span> -1;

  <span class="comment">/* At this stage, we have done all fiddling with as4, and the</span>
<span class="comment">   * resulting info is in attr-&gt;aggregator resp. attr-&gt;aspath</span>
<span class="comment">   * so we can chuck as4_aggregator and as4_path alltogether in</span>
<span class="comment">   * order to save memory</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> ( as4_path )
    {
      <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a>( as4_path ); <span class="comment">/* unintern - it is in the hash */</span>
      as4_path = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <span class="comment">/* The flag that we got this is still there, but that does not</span>
<span class="comment">       * do any trouble</span>
<span class="comment">       */</span>
    }
  <span class="comment">/*</span>
<span class="comment">   * The &quot;rest&quot; of the code does nothing with as4_aggregator.</span>
<span class="comment">   * there is no memory attached specifically which is not part</span>
<span class="comment">   * of the attr.</span>
<span class="comment">   * so ignoring just means do nothing.</span>
<span class="comment">   */</span>
  <span class="comment">/*</span>
<span class="comment">   * Finally do the checks on the aspath we did not do yet</span>
<span class="comment">   * because we waited for a potentially synthesized aspath.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> ( <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; ( <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>( <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>)))
    {
      ret = <a class="code" href="bgp__attr_8c.html#ac5fe31069dae03e5a79cb15b05870d5c">bgp_attr_aspath_check</a>( <a class="code" href="structpeer.html">peer</a>, <a class="code" href="structattr.html">attr</a> );
      <span class="keywordflow">if</span> ( ret &lt; 0 )
    <span class="keywordflow">return</span> ret;
    }

  <span class="comment">/* Finally intern unknown attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
    <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a> = <a class="code" href="bgp__attr_8c.html#a7493a41550711ef529ebd324e6ba2f28">transit_intern</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a926e3fd006b9ff905738af811f683207"></a><!-- doxytag: member="bgp_attr.h::bgp_attr_unintern" ref="a926e3fd006b9ff905738af811f683207" args="(struct attr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_attr_unintern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00646">646</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> *ret;
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;
  <span class="keyword">struct </span><a class="code" href="structcommunity.html">community</a> *<a class="code" href="structcommunity.html">community</a>;
  <span class="keyword">struct </span><a class="code" href="structecommunity.html">ecommunity</a> *<a class="code" href="structecommunity.html">ecommunity</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *cluster = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> *<a class="code" href="structtransit.html">transit</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Decrement attribute reference. */</span>
  <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a>--;
  aspath = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>;
  community = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>;
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
    {
      ecommunity = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>;
      cluster = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>;
      transit = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>;
    }

  <span class="comment">/* If reference becomes zero then free attribute object. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ab2af6ef0664e1faf15e2f5a71e4b4933">refcnt</a> == 0)
    {    
      ret = <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (<a class="code" href="bgp__attr_8c.html#a604725bd45d7893885d8887bc2701d69">attrhash</a>, <a class="code" href="structattr.html">attr</a>);
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ret != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
      <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (<a class="code" href="structattr.html">attr</a>);
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad7fb859bb30af87be51498b5f1417fc5">MTYPE_ATTR</a>, <a class="code" href="structattr.html">attr</a>);
    }

  <span class="comment">/* aspath refcount shoud be decrement. */</span>
  <span class="keywordflow">if</span> (aspath)
    <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (aspath);
  <span class="keywordflow">if</span> (community)
    <a class="code" href="bgp__community_8c.html#add62474cd8c7fed6877c64537b6c78a2">community_unintern</a> (community);
  <span class="keywordflow">if</span> (ecommunity)
    <a class="code" href="bgp__ecommunity_8c.html#af18451af10079ec0c849b84cef248e7b">ecommunity_unintern</a> (ecommunity);
  <span class="keywordflow">if</span> (cluster)
    <a class="code" href="bgp__attr_8c.html#a3ebf5b6e2c65cef7624b6b1e88e61bc6">cluster_unintern</a> (cluster);
  <span class="keywordflow">if</span> (transit)
    <a class="code" href="bgp__attr_8c.html#a9b8a411861d16f67929a3359ef7c51a4">transit_unintern</a> (transit);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac0399b3aaff6a3b07b2ecda1b08aebd8"></a><!-- doxytag: member="bgp_attr.h::bgp_dump_routes_attr" ref="ac0399b3aaff6a3b07b2ecda1b08aebd8" args="(struct stream *, struct attr *, struct prefix *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_dump_routes_attr </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l02366">2366</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> len;
  <span class="keywordtype">size_t</span> aspath_lenp;
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;

  <span class="comment">/* Remember current pointer. */</span>
  cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <span class="comment">/* Place holder of length. */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);

  <span class="comment">/* Origin attribute. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 1);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>);

  aspath = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>;
  
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);
  aspath_lenp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
  
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, aspath_lenp, <a class="code" href="bgp__aspath_8c.html#a716059e44a39a56b3e05020bec13872e">aspath_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, aspath, 1));

  <span class="comment">/* Nexthop attribute. */</span>
  <span class="comment">/* If it&#39;s an IPv6 prefix, don&#39;t dump the IPv4 nexthop to save space */</span>
  <span class="keywordflow">if</span>(<a class="code" href="structprefix.html">prefix</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
#ifdef HAVE_IPV6
     &amp;&amp; <a class="code" href="structprefix.html">prefix</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> != AF_INET6
#endif <span class="comment">/* HAVE_IPV6 */</span>
     )
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 4);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);
    }

  <span class="comment">/* MED attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 4);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>);
    }

  <span class="comment">/* Local preference. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 4);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>);
    }

  <span class="comment">/* Atomic aggregate. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
    }

  <span class="comment">/* Aggregator. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>))
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 8);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr);
    }

  <span class="comment">/* Community attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4 &gt; 255)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ae5a21d3a57a63600e7450c21b17dff42">val</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* Add a MP_NLRI attribute to dump the IPv6 next hop */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structprefix.html">prefix</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; <a class="code" href="structprefix.html">prefix</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6 &amp;&amp; <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp;
     (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16 || <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32) )
    {
      <span class="keywordtype">int</span> sizep;
      <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
      sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

      <span class="comment">/* MP header */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);       <span class="comment">/* Marker: Attribute length. */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);      <span class="comment">/* AFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>); <span class="comment">/* SAFI */</span>

      <span class="comment">/* Next hop */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;attre-&gt;mp_nexthop_global, 16);
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
        <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;attre-&gt;mp_nexthop_local, 16);

      <span class="comment">/* SNPA */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);

      <span class="comment">/* Prefix */</span>
      <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a>(<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structprefix.html">prefix</a>);

      <span class="comment">/* Set MP attribute length. */</span>
      <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) - sizep) - 1);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="comment">/* AS-Pathlimit */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 5);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>);
    }

  <span class="comment">/* Return total size of attribute. */</span>
  len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) - cp - 2;
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, cp, len);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4e538adcc3691e47618a243ea1190471"></a><!-- doxytag: member="bgp_attr.h::bgp_mp_reach_parse" ref="a4e538adcc3691e47618a243ea1190471" args="(struct peer *, bgp_size_t, struct attr *, struct bgp_nlri *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_mp_reach_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01301">1301</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int16_t afi;
  u_char safi;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> nlri_len;
  <span class="keywordtype">size_t</span> start;
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = <a class="code" href="bgp__attr_8c.html#a31ef3828cd7a1375f7b7dfe02aab705f">bgp_attr_extra_get</a>(<a class="code" href="structattr.html">attr</a>);
  
  <span class="comment">/* Set end of packet. */</span>
  s = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(<a class="code" href="structpeer.html">peer</a>);
  start = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s);
  
  <span class="comment">/* safe to read statically sized header? */</span>
<span class="preprocessor">#define BGP_MP_REACH_MIN_SIZE 5</span>
<span class="preprocessor"></span><span class="preprocessor">#define LEN_LEFT    (length - (stream_get_getp(s) - start))</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> ((<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> &gt; <a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s)) || (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> &lt; BGP_MP_REACH_MIN_SIZE))
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: %s sent invalid length, %lu&quot;</span>, 
         __func__, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
      <span class="keywordflow">return</span> -1;
    }
  
  <span class="comment">/* Load AFI, SAFI. */</span>
  afi = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
  safi = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);

  <span class="comment">/* Get nexthop length. */</span>
  attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  
  <span class="keywordflow">if</span> (LEN_LEFT &lt; attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: %s, MP nexthop length, %u, goes past end of attribute&quot;</span>, 
         __func__, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);
      <span class="keywordflow">return</span> -1;
    }
  
  <span class="comment">/* Nexthop length check. */</span>
  <span class="keywordflow">switch</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>)
    {
    <span class="keywordflow">case</span> 4:
      <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, s, 4);
      <span class="comment">/* Probably needed for RFC 2283 */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == 0)
        <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(&amp;<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr, &amp;attre-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, 4);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> 12:
      {
    u_int32_t rd_high;
    u_int32_t rd_low;

    rd_high = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
    rd_low = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
    <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, s, 4);
      }
      <span class="keywordflow">break</span>;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>    <span class="keywordflow">case</span> 16:
      <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;mp_nexthop_global, s, 16);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> 32:
      <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;mp_nexthop_global, s, 16);
      <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;attre-&gt;mp_nexthop_local, s, 16);
      <span class="keywordflow">if</span> (! IN6_IS_ADDR_LINKLOCAL (&amp;attre-&gt;mp_nexthop_local))
    {
      <span class="keywordtype">char</span> buf1[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
      <span class="keywordtype">char</span> buf2[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s got two nexthop %s %s but second one is not a link-local nexthop&quot;</span>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attre-&gt;mp_nexthop_global,
                  buf1, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>),
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;attre-&gt;mp_nexthop_local,
                  buf2, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>));

      attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> = 16;
    }
      <span class="keywordflow">break</span>;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    <span class="keywordflow">default</span>:
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) Wrong multiprotocol next hop length: %d&quot;</span>, 
         __func__, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="keywordflow">if</span> (!LEN_LEFT)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) Failed to read SNPA and NLRI(s)&quot;</span>,
                 __func__, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <span class="keywordflow">return</span> -1;
    }
  
  {
    u_char <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>; 
    <span class="keywordflow">if</span> ((val = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s)))
    <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s sent non-zero value, %u, for defunct SNPA-length field&quot;</span>,
                <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, val);
  }
  
  <span class="comment">/* must have nrli_len, what is left of the attribute */</span>
  nlri_len = <a class="code" href="bgp__attr_8c.html#aa25f3fd9c4b8bcdc7fa1e4d3e98cc2cc">LEN_LEFT</a>;
  <span class="keywordflow">if</span> ((!nlri_len) || (nlri_len &gt; <a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s)))
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) Failed to read NLRI&quot;</span>,
                 __func__, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <span class="keywordflow">return</span> -1;
    }
 
  <span class="keywordflow">if</span> (safi != <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
    {
      ret = <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (<a class="code" href="structpeer.html">peer</a>, afi, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s), nlri_len);
      <span class="keywordflow">if</span> (ret &lt; 0) 
        {
          <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s: (%s) NLRI doesn&#39;t pass sanity check&quot;</span>,
                     __func__, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  mp_update-&gt;afi = afi;
  mp_update-&gt;safi = safi;
  mp_update-&gt;nlri = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
  mp_update-&gt;length = nlri_len;

  <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, nlri_len);

  <span class="keywordflow">return</span> 0;
<span class="preprocessor">#undef LEN_LEFT</span>
<span class="preprocessor"></span>}
</pre></div>
</div>
</div>
<a class="anchor" id="a1038aeffc20235a56ab777777f4bd2ef"></a><!-- doxytag: member="bgp_attr.h::bgp_mp_unreach_parse" ref="a1038aeffc20235a56ab777777f4bd2ef" args="(struct peer *, bgp_size_t, struct bgp_nlri *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_mp_unreach_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__nlri.html">bgp_nlri</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01435">1435</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  u_int16_t afi;
  u_char safi;
  u_int16_t withdraw_len;
  <span class="keywordtype">int</span> ret;

  s = <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>;
  
<span class="preprocessor">#define BGP_MP_UNREACH_MIN_SIZE 3</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> ((<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> &gt; <a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s)) || (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> &lt;  BGP_MP_UNREACH_MIN_SIZE))
    <span class="keywordflow">return</span> -1;
  
  afi = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
  safi = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  
  withdraw_len = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> - <a class="code" href="bgp__attr_8c.html#aa53b9e0198c876e6ba4251c44b707045">BGP_MP_UNREACH_MIN_SIZE</a>;

  <span class="keywordflow">if</span> (safi != <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
    {
      ret = <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (<a class="code" href="structpeer.html">peer</a>, afi, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s), withdraw_len);
      <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> -1;
    }

  mp_withdraw-&gt;afi = afi;
  mp_withdraw-&gt;safi = safi;
  mp_withdraw-&gt;nlri = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
  mp_withdraw-&gt;length = withdraw_len;

  <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, withdraw_len);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9c8856cdecaca73aff9e0773fe1499a3"></a><!-- doxytag: member="bgp_attr.h::bgp_packet_attribute" ref="a9c8856cdecaca73aff9e0773fe1499a3" args="(struct bgp *bgp, struct peer *, struct stream *, struct attr *, struct prefix *, afi_t, safi_t, struct peer *, struct prefix_rd *, u_char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> bgp_packet_attribute </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__rd.html">prefix_rd</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l01847">1847</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">size_t</span> cp;
  <span class="keywordtype">size_t</span> aspath_sizep;
  <span class="keyword">struct </span><a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>;
  <span class="keywordtype">int</span> send_as4_path = 0;
  <span class="keywordtype">int</span> send_as4_aggregator = 0;
  <span class="keywordtype">int</span> use32bit = (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>)) ? 1 : 0;

  <span class="keywordflow">if</span> (! bgp)
    bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();

  <span class="comment">/* Remember current pointer. */</span>
  cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);

  <span class="comment">/* Origin attribute. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a24a9e965d947f019719c35eb611f17dc">BGP_ATTR_ORIGIN</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 1);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a17e152c15e3bd7a54475086d762e76ec">origin</a>);

  <span class="comment">/* AS path attribute. */</span>

  <span class="comment">/* If remote-peer is EBGP */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (<a class="code" href="structpeer.html">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a>
      &amp;&amp; (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a374743af276435214da4e8292c03b46e">PEER_FLAG_AS_PATH_UNCHANGED</a>)
      || <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>-&gt;<a class="code" href="structaspath.html#a142f9a26d6c89fa4f01050cec21aa4d4">segments</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      &amp;&amp; (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#abf59e9a9022e80ecdc266d86f35b378e">PEER_FLAG_RSERVER_CLIENT</a>)))
    {    
      aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a>, <a class="code" href="bgpd_8h.html#a4170cb60239697ba9e788ac74e756ae3">BGP_CONFIG_CONFEDERATION</a>))
    {
      <span class="comment">/* Strip the confed info, and then stuff our path CONFED_ID</span>
<span class="comment">         on the front */</span>
      aspath = <a class="code" href="bgp__aspath_8c.html#a3a932cff645a730d2e5d9aeec874e127">aspath_delete_confed_seq</a> (aspath);
      aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, bgp-&gt;<a class="code" href="structbgp.html#a57a1abec0cfd4f42ccdd002df8afb740">confed_id</a>);
    }
      <span class="keywordflow">else</span>
    {
      aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>);
      <span class="keywordflow">if</span> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
        aspath = <a class="code" href="bgp__aspath_8c.html#a8e5a3fc38d9717bcdcc75ba861459dd6">aspath_add_seq</a> (aspath, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>);
    }
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (<a class="code" href="structpeer.html">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
    {
      <span class="comment">/* A confed member, so we need to do the AS_CONFED_SEQUENCE thing */</span>
      aspath = <a class="code" href="bgp__aspath_8c.html#a2de7834df2eead0bfa5a117ce265e6ca">aspath_dup</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
      aspath = <a class="code" href="bgp__aspath_8c.html#a601c9ef2ba7a75d8757e04d3f8585886">aspath_add_confed_seq</a> (aspath, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>);
    }
  <span class="keywordflow">else</span>
    aspath = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>;

  <span class="comment">/* If peer is not AS4 capable, then:</span>
<span class="comment">   * - send the created AS_PATH out as AS4_PATH (optional, transitive),</span>
<span class="comment">   *   but ensure that no AS_CONFED_SEQUENCE and AS_CONFED_SET path segment</span>
<span class="comment">   *   types are in it (i.e. exclude them if they are there)</span>
<span class="comment">   *   AND do this only if there is at least one asnum &gt; 65535 in the path!</span>
<span class="comment">   * - send an AS_PATH out, but put 16Bit ASnums in it, not 32bit, and change</span>
<span class="comment">   *   all ASnums &gt; 65535 to BGP_AS_TRANS</span>
<span class="comment">   */</span>

  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#aa68a316d94242e23c6b5e0c7eb0b6805">BGP_ATTR_AS_PATH</a>);
  aspath_sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, aspath_sizep, <a class="code" href="bgp__aspath_8c.html#a716059e44a39a56b3e05020bec13872e">aspath_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, aspath, use32bit));
  
  <span class="comment">/* OLD session may need NEW_AS_PATH sent, if there are 4-byte ASNs </span>
<span class="comment">   * in the path</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (!use32bit &amp;&amp; <a class="code" href="bgp__aspath_8c.html#a594fc069e213e63fc1a15af40d93b3d4">aspath_has_as4</a> (aspath))
      send_as4_path = 1; <span class="comment">/* we&#39;ll do this later, at the correct place */</span>
  
  <span class="comment">/* Nexthop attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>) &amp;&amp; afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a65c2bdaaa2a62a73db7f100ece5ea66f">BGP_ATTR_NEXT_HOP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 4);
      <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr == 0)
        <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a8fed6fdf9282fb5e87f3f52b94313646">v4</a>.s_addr);
      <span class="keywordflow">else</span>
        <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);
    }
      <span class="keywordflow">else</span>
    <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);
    }

  <span class="comment">/* MED attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a2f0c3d68f255eba5612c46147522334e">BGP_ATTR_MULTI_EXIT_DISC</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 4);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>);
    }

  <span class="comment">/* Local preference. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (<a class="code" href="structpeer.html">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> ||
      <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (<a class="code" href="structpeer.html">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#afb9037d30bc0d4b42c7960ffefcbd299">BGP_ATTR_LOCAL_PREF</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 4);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aa7caa960ced4e67e8aec2b0ab3d9b0b0">local_pref</a>);
    }

  <span class="comment">/* Atomic aggregate. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#ac9dd85ed3793e51210453da60a8734b9">BGP_ATTR_ATOMIC_AGGREGATE</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
    }

  <span class="comment">/* Aggregator. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>))
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
      
      <span class="comment">/* Common to BGP_ATTR_AGGREGATOR, regardless of ASN size */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#ae1607a30c55c82c55f3b12fdcdf1dc8c">BGP_ATTR_AGGREGATOR</a>);
      
      <span class="keywordflow">if</span> (use32bit)
        {
          <span class="comment">/* AS4 capable peer */</span>
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 8);
          <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
        }
      <span class="keywordflow">else</span>
        {
          <span class="comment">/* 2-byte AS peer */</span>
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 6);
          
          <span class="comment">/* Is ASN representable in 2-bytes? Or must AS_TRANS be used? */</span>
          <span class="keywordflow">if</span> ( <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a> &gt; 65535 )
            {
              <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a>);
              
              <span class="comment">/* we have to send AS4_AGGREGATOR, too.</span>
<span class="comment">               * we&#39;ll do that later in order to send attributes in ascending</span>
<span class="comment">               * order.</span>
<span class="comment">               */</span>
              send_as4_aggregator = 1;
            }
          <span class="keywordflow">else</span>
            <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, (u_int16_t) <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
        }
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr);
    }

  <span class="comment">/* Community attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#aea4607ca6a35c2616c3daa35f9e8ac03">PEER_FLAG_SEND_COMMUNITY</a>) 
      &amp;&amp; (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>)))
    {
      <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4 &gt; 255)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#aae424d4be52b9b65e6d1cb41c1145a4d">BGP_ATTR_COMMUNITIES</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ae5a21d3a57a63600e7450c21b17dff42">val</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>-&gt;<a class="code" href="structcommunity.html#ad54bd9c20e0cf4fa4674f5b76703d192">size</a> * 4);
    }

  <span class="comment">/* Route Reflector. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (<a class="code" href="structpeer.html">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>
      &amp;&amp; from
      &amp;&amp; <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (from) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    {
      <span class="comment">/* Originator ID. */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 4);

      <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a>(<a class="code" href="bgpd_8h.html#a4c57fcfdf8e83e8d6dce5369a9697244">BGP_ATTR_ORIGINATOR_ID</a>))
    <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a2a675121474a39bf5d9f95393b00e156">originator_id</a>);
      <span class="keywordflow">else</span> 
        <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;from-&gt;remote_id);

      <span class="comment">/* Cluster list. */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a5dfaaa2abcc46f34a50dd1f192b1e28c">BGP_ATTR_CLUSTER_LIST</a>);
      
      <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> + 4);
      <span class="comment">/* If this peer configuration&#39;s parent BGP has cluster_id. */</span>
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a> &amp; <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>)
        <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>, 
                  <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a>);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 4);
      <span class="comment">/* If this peer configuration&#39;s parent BGP has cluster_id. */</span>
      <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a3444d46283ecd1ecc8710fd44c331151">config</a> &amp; <a class="code" href="bgpd_8h.html#ab993fdc22aec211767601ff9cea0f534">BGP_CONFIG_CLUSTER_ID</a>)
        <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;bgp-&gt;<a class="code" href="structbgp.html#aea853ee0e367191324fdf8278904b02d">cluster_id</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;bgp-&gt;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>);
    }
    }

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* If p is IPv6 address put it into attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;family == AF_INET6)
    {
      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> sizep;
      <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
      
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
      sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);   <span class="comment">/* Marker: Attribute length. */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>); <span class="comment">/* AFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, safi);    <span class="comment">/* SAFI */</span>

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a>);

      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16)
    <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;attre-&gt;mp_nexthop_global, 16);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
    {
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;attre-&gt;mp_nexthop_global, 16);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;attre-&gt;mp_nexthop_local, 16);
    }
      
      <span class="comment">/* SNPA */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);

      <span class="comment">/* Prefix write. */</span>
      <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

      <span class="comment">/* Set MP attribute length. */</span>
      <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) - sizep) - 1);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;family == AF_INET &amp;&amp; safi == <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
    {
      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> sizep;

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
      sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);   <span class="comment">/* Marker: Attribute Length. */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);  <span class="comment">/* AFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>);  <span class="comment">/* SAFI */</span>

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 4);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>.s_addr);

      <span class="comment">/* SNPA */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);

      <span class="comment">/* Prefix write. */</span>
      <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

      <span class="comment">/* Set MP attribute length. */</span>
      <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) - sizep) - 1);
    }

  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;family == AF_INET &amp;&amp; safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
    {
      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> sizep;

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a9dca1b9d69ed9e198eb520663dacd3cc">BGP_ATTR_MP_REACH_NLRI</a>);
      sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);   <span class="comment">/* Length of this attribute. */</span>
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);  <span class="comment">/* AFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>);  <span class="comment">/* SAFI */</span>

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 12);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#ad484cadabc20c8009a458845216623f8">mp_nexthop_global_in</a>, 4);

      <span class="comment">/* SNPA */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);

      <span class="comment">/* Tag, RD, Prefix write. */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen + 88);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, tag, 3);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, prd-&gt;val, 8);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix, <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen));

      <span class="comment">/* Set MP attribute length. */</span>
      <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, sizep, (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) - sizep) - 1);
    }

  <span class="comment">/* Extended Communities attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9cec4d9cff36cfff886281ed34c856b2">PEER_FLAG_SEND_EXT_COMMUNITY</a>) 
      &amp;&amp; (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#aebb9bdb23b6f00d44b865ce30fac0713">flag</a> &amp; <a class="code" href="bgp__attr_8h.html#a708b3fe5f6403a639f57da84ea7b638a">ATTR_FLAG_BIT</a> (<a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>)))
    {
      <span class="keyword">struct </span><a class="code" href="structattr__extra.html">attr_extra</a> *attre = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>;
      
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (attre);
      
      <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (<a class="code" href="structpeer.html">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> 
          || <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (<a class="code" href="structpeer.html">peer</a>) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
    {
      <span class="keywordflow">if</span> (attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8 &gt; 255)
        {
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
          <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8);
        }
      <span class="keywordflow">else</span>
        {
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8);
        }
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a>, attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a> * 8);
    }
      <span class="keywordflow">else</span>
    {
      u_int8_t *pnt;
      <span class="keywordtype">int</span> tbit;
      <span class="keywordtype">int</span> ecom_tr_size = 0;
      <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

      <span class="keywordflow">for</span> (i = 0; i &lt; attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>; i++)
        {
          pnt = attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + (i * 8);
          tbit = *pnt;

          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (tbit, <a class="code" href="bgp__ecommunity_8h.html#a7268ba06edb4fd02a8c2ba4b9a5d5519">ECOMMUNITY_FLAG_NON_TRANSITIVE</a>))
        <span class="keywordflow">continue</span>;

          ecom_tr_size++;
        }

      <span class="keywordflow">if</span> (ecom_tr_size)
        {
          <span class="keywordflow">if</span> (ecom_tr_size * 8 &gt; 255)
        {
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
          <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, ecom_tr_size * 8);
        }
          <span class="keywordflow">else</span>
        {
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a95748968a0a411dcc05643ffc4f61c6f">BGP_ATTR_EXT_COMMUNITIES</a>);
          <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, ecom_tr_size * 8);
        }

          <span class="keywordflow">for</span> (i = 0; i &lt; attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a4477c6c01052cb83ed9b4682302ebf5f">size</a>; i++)
        {
          pnt = attre-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>-&gt;<a class="code" href="structecommunity.html#a91b08f858e9b2cff0270393307a03a54">val</a> + (i * 8);
          tbit = *pnt;

          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (tbit, <a class="code" href="bgp__ecommunity_8h.html#a7268ba06edb4fd02a8c2ba4b9a5d5519">ECOMMUNITY_FLAG_NON_TRANSITIVE</a>))
            <span class="keywordflow">continue</span>;

          <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, pnt, 8);
        }
        }
    }
    }

  <span class="keywordflow">if</span> ( send_as4_path )
    {
      <span class="comment">/* If the peer is NOT As4 capable, AND */</span>
      <span class="comment">/* there are ASnums &gt; 65535 in path  THEN</span>
<span class="comment">       * give out AS4_PATH */</span>

      <span class="comment">/* Get rid of all AS_CONFED_SEQUENCE and AS_CONFED_SET</span>
<span class="comment">       * path segments!</span>
<span class="comment">       * Hm, I wonder...  confederation things *should* only be at</span>
<span class="comment">       * the beginning of an aspath, right?  Then we should use</span>
<span class="comment">       * aspath_delete_confed_seq for this, because it is already</span>
<span class="comment">       * there! (JK) </span>
<span class="comment">       * Folks, talk to me: what is reasonable here!?</span>
<span class="comment">       */</span>
      aspath = <a class="code" href="bgp__aspath_8c.html#a3a932cff645a730d2e5d9aeec874e127">aspath_delete_confed_seq</a> (aspath);

      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>|<a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#a23a24c94815b6e2058b2d97af3ef83a5">BGP_ATTR_FLAG_EXTLEN</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a4b4b4fe70bb8dedf04327b5bafe6fffa">BGP_ATTR_AS4_PATH</a>);
      aspath_sizep = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 0);
      <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, aspath_sizep, <a class="code" href="bgp__aspath_8c.html#a716059e44a39a56b3e05020bec13872e">aspath_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, aspath, 1));
    }

  <span class="keywordflow">if</span> (aspath != <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
    <a class="code" href="bgp__aspath_8c.html#af8db79f3e25ae5a01dfec9070557c21a">aspath_free</a> (aspath);

  <span class="keywordflow">if</span> ( send_as4_aggregator ) 
    {
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);

      <span class="comment">/* send AS4_AGGREGATOR, at this place */</span>
      <span class="comment">/* this section of code moved here in order to ensure the correct</span>
<span class="comment">       * *ascending* order of attributes</span>
<span class="comment">       */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#acf815e02997af9363165fa1d9613eb0e">BGP_ATTR_AS4_AGGREGATOR</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 8);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af91c71fee1beb30ae9f0d878f508bfbc">aggregator_as</a>);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a14c33c8295683eff20b2964e4b321622">aggregator_addr</a>.s_addr);
    }
  
  <span class="comment">/* AS-Pathlimit */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>)
    {
      u_int32_t as = <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a8a6b5eec215a881c600ce5556b6a91db">as</a>;
      
      <span class="comment">/* should already have been done in announce_check(), </span>
<span class="comment">       * but just in case..</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (!as)
        as = <a class="code" href="structpeer.html">peer</a>-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
      
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>|<a class="code" href="bgp__attr_8h.html#ad535d34e852c0db6f9e08a083147dc2a">BGP_ATTR_FLAG_TRANS</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="bgpd_8h.html#a50c0b7675e41454193cd4e22cb448a99">BGP_ATTR_AS_PATHLIMIT</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, 5);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a3f18193ca657879db94778fdcbe1762a">pathlimit</a>.<a class="code" href="structattr.html#a0f7b3d80060491aa2bc639577e660089">ttl</a>);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, as);
    }
  
  <span class="comment">/* Unknown transit attribute. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a> &amp;&amp; <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
    <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#aadf09ece2889ea7d8342a15691beabd5">val</a>, <a class="code" href="structattr.html">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>-&gt;<a class="code" href="structtransit.html#a307b9e488e4a3ca65d22737ffd001aac">length</a>);

  <span class="comment">/* Return total size of attribute. */</span>
  <span class="keywordflow">return</span> <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>) - cp;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acd92813362ab8e29a6095e64f1996fc0"></a><!-- doxytag: member="bgp_attr.h::bgp_packet_withdraw" ref="acd92813362ab8e29a6095e64f1996fc0" args="(struct peer *peer, struct stream *s, struct prefix *p, afi_t, safi_t, struct prefix_rd *, u_char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> bgp_packet_withdraw </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__rd.html">prefix_rd</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l02296">2296</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> attrlen_pnt;
  <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size;

  cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);

  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a75e156b1375161f4b5587249f7703cdc">BGP_ATTR_MP_UNREACH_NLRI</a>);

  attrlen_pnt = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);       <span class="comment">/* Length of this attribute. */</span>

  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="prefix_8c.html#a5d1761cfd89b5e35540ece8fe2573299">family2afi</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>));

  <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
    {
      <span class="comment">/* SAFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>);

      <span class="comment">/* prefix. */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> + 88);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, tag, 3);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, prd-&gt;val, 8);
      <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>));
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* SAFI */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);

      <span class="comment">/* prefix */</span>
      <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, p);
    }

  <span class="comment">/* Set MP attribute length. */</span>
  size = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - attrlen_pnt - 1;
  <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, attrlen_pnt, size);

  <span class="keywordflow">return</span> <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa0d0f10149eb71be2d1f6a0547a7f5e6"></a><!-- doxytag: member="bgp_attr.h::cluster_loop_check" ref="aa0d0f10149eb71be2d1f6a0547a7f5e6" args="(struct cluster_list *, struct in_addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int cluster_loop_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structcluster__list.html">cluster_list</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00106">106</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
    
  <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#af8a1b7c942261289059011265e51db9e">length</a> / 4; i++)
    <span class="keywordflow">if</span> (<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>-&gt;<a class="code" href="structcluster__list.html#aea3d9cdf705c7c59919b77468710f359">list</a>[i].s_addr == originator.s_addr)
      <span class="keywordflow">return</span> 1;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4693ff2be9beaf21bfe55fcde9880964"></a><!-- doxytag: member="bgp_attr.h::cluster_unintern" ref="a4693ff2be9beaf21bfe55fcde9880964" args="(struct cluster_list *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cluster_unintern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structcluster__list.html">cluster_list</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00184">184</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcluster__list.html">cluster_list</a> *ret;

  <span class="keywordflow">if</span> (cluster-&gt;refcnt)
    cluster-&gt;<a class="code" href="structcluster__list.html#ac3f99d1e59a08ea03a65a67dd01f45c7">refcnt</a>--;

  <span class="keywordflow">if</span> (cluster-&gt;refcnt == 0)
    {
      ret = <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (<a class="code" href="bgp__attr_8c.html#a1eb546b3c422618f3749dc048a9b24c7">cluster_hash</a>, cluster);
      <a class="code" href="bgp__attr_8c.html#aec913b18daf1b78f2b8e08f4e26b2ae9">cluster_free</a> (cluster);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab76373f263e6cfc84478d7e29a350360"></a><!-- doxytag: member="bgp_attr.h::transit_unintern" ref="ab76373f263e6cfc84478d7e29a350360" args="(struct transit *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void transit_unintern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structtransit.html">transit</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__attr_8c_source.html#l00244">244</a> of file <a class="el" href="bgp__attr_8c_source.html">bgp_attr.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structtransit.html">transit</a> *ret;

  <span class="keywordflow">if</span> (<a class="code" href="structtransit.html">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>)
    <a class="code" href="structtransit.html">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a>--;

  <span class="keywordflow">if</span> (<a class="code" href="structtransit.html">transit</a>-&gt;<a class="code" href="structtransit.html#a041c72913fb28ff51aface495b595d83">refcnt</a> == 0)
    {
      ret = <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (<a class="code" href="bgp__attr_8c.html#ad9c0fbca22b0f438ad4448dc3d15d26b">transit_hash</a>, <a class="code" href="structtransit.html">transit</a>);
      <a class="code" href="bgp__attr_8c.html#a999728aeac2632f5bd90893dd380b59e">transit_free</a> (<a class="code" href="structtransit.html">transit</a>);
    }
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__attr_8h.html">bgp_attr.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:10 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
