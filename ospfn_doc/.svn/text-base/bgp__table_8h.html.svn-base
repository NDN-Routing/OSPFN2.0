<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_table.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__table_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_table.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__table_8h__dep__incl.png" border="0" usemap="#bgpd_2bgp__table_8hdep" alt=""/></div>
<map name="bgpd_2bgp__table_8hdep" id="bgpd_2bgp__table_8hdep">
<area shape="rect" id="node3" href="bgp__advertise_8c.html" title="bgpd/bgp_advertise.c" alt="" coords="5,155,160,181"/><area shape="rect" id="node5" href="bgp__damp_8c.html" title="bgpd/bgp_damp.c" alt="" coords="185,155,319,181"/><area shape="rect" id="node7" href="bgp__dump_8c.html" title="bgpd/bgp_dump.c" alt="" coords="343,155,476,181"/><area shape="rect" id="node9" href="bgp__mplsvpn_8c.html" title="bgpd/bgp_mplsvpn.c" alt="" coords="501,155,651,181"/><area shape="rect" id="node11" href="bgp__nexthop_8c.html" title="bgpd/bgp_nexthop.c" alt="" coords="675,155,825,181"/><area shape="rect" id="node13" href="bgp__packet_8c.html" title="bgpd/bgp_packet.c" alt="" coords="850,155,989,181"/><area shape="rect" id="node15" href="bgp__route_8c.html" title="bgpd/bgp_route.c" alt="" coords="1015,155,1145,181"/><area shape="rect" id="node17" href="bgp__route_8h.html" title="bgpd/bgp_route.h" alt="" coords="1015,80,1145,107"/><area shape="rect" id="node34" href="bgp__routemap_8c.html" title="bgpd/bgp_routemap.c" alt="" coords="1929,155,2087,181"/><area shape="rect" id="node36" href="bgp__vty_8c.html" title="bgpd/bgp_vty.c" alt="" coords="2111,155,2229,181"/><area shape="rect" id="node40" href="bgpd_8c.html" title="bgpd/bgpd.c" alt="" coords="2254,155,2353,181"/><area shape="rect" id="node43" href="bgp__table_8c.html" title="bgpd/bgp_table.c" alt="" coords="1321,80,1452,107"/><area shape="rect" id="node20" href="bgp__attr_8c.html" title="bgpd/bgp_attr.c" alt="" coords="1169,155,1289,181"/><area shape="rect" id="node23" href="bgp__debug_8c.html" title="bgpd/bgp_debug.c" alt="" coords="1313,155,1452,181"/><area shape="rect" id="node26" href="bgp__fsm_8c.html" title="bgpd/bgp_fsm.c" alt="" coords="1477,155,1597,181"/><area shape="rect" id="node28" href="bgp__main_8c.html" title="bgpd/bgp_main.c" alt="" coords="1622,155,1748,181"/><area shape="rect" id="node38" href="bgp__zebra_8c.html" title="bgpd/bgp_zebra.c" alt="" coords="1773,155,1904,181"/></map>
</div>
</div>
<p><a href="bgp__table_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbgp__table.html">bgp_table</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structbgp__node.html">bgp_node</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#a66f67e96a9e12a1add00061a69a7b1d6">l_left</a>&#160;&#160;&#160;link[0]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#afdba4d6f1a0ffb8cf6da705e5bb407e5">l_right</a>&#160;&#160;&#160;link[1]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#a89387d13426993997af6b2cc02600f12">BGP_NODE_PROCESS_SCHEDULED</a>&#160;&#160;&#160;(1 &lt;&lt; 0)</td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafb">bgp_table_t</a> { <a class="el" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafbaefb8ffd61daca8861e9af4bb3c274b3e">BGP_TABLE_MAIN</a>, 
<a class="el" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafba5af83960b1c7e199dbe0cc6392a5e2b0">BGP_TABLE_RSCLIENT</a>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#ac9f0142c2f1ff48116c76d6e1363246f">bgp_table_init</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#ac7bf3663c681a730021718ec0e6bb495">bgp_table_lock</a> (struct <a class="el" href="structbgp__table.html">bgp_table</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#ad12a7b4ce3fdcf3f7829b701b1c8f4bf">bgp_table_unlock</a> (struct <a class="el" href="structbgp__table.html">bgp_table</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#a0dcf04e3cb904d77cf782a5f98b17e15">bgp_table_finish</a> (struct <a class="el" href="structbgp__table.html">bgp_table</a> **)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#a3fc6ea7698abb31288d7b777f6eaf690">bgp_table_top</a> (const struct <a class="el" href="structbgp__table.html">bgp_table</a> *const)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#af1a447452cf3b69725a7b659e384a24c">bgp_route_next</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#af06f8c1629ba1a46761a863813235637">bgp_route_next_until</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *, struct <a class="el" href="structbgp__node.html">bgp_node</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#a6a425d55694b89619908ac0f7d38aee4">bgp_node_get</a> (struct <a class="el" href="structbgp__table.html">bgp_table</a> *const, struct <a class="el" href="structprefix.html">prefix</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#a34cbadc1584871060a2ad2b774063965">bgp_node_lookup</a> (const struct <a class="el" href="structbgp__table.html">bgp_table</a> *const, struct <a class="el" href="structprefix.html">prefix</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#abc3ae6a0bb9ebf3ae0248f81ab646504">bgp_node_match</a> (const struct <a class="el" href="structbgp__table.html">bgp_table</a> *, struct <a class="el" href="structprefix.html">prefix</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#ab1860428fa0e850e6c82ccf9a33a6630">bgp_node_match_ipv4</a> (const struct <a class="el" href="structbgp__table.html">bgp_table</a> *, struct in_addr *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__table_8h.html#a473749b369b1a3cde634cbf7a332baaa">bgp_table_count</a> (const struct <a class="el" href="structbgp__table.html">bgp_table</a> *const)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a89387d13426993997af6b2cc02600f12"></a><!-- doxytag: member="bgp_table.h::BGP_NODE_PROCESS_SCHEDULED" ref="a89387d13426993997af6b2cc02600f12" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BGP_NODE_PROCESS_SCHEDULED&#160;&#160;&#160;(1 &lt;&lt; 0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8h_source.html#l00069">69</a> of file <a class="el" href="bgp__table_8h_source.html">bgp_table.h</a>.</p>

</div>
</div>
<a class="anchor" id="a66f67e96a9e12a1add00061a69a7b1d6"></a><!-- doxytag: member="bgp_table.h::l_left" ref="a66f67e96a9e12a1add00061a69a7b1d6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define l_left&#160;&#160;&#160;link[0]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8h_source.html#l00055">55</a> of file <a class="el" href="bgp__table_8h_source.html">bgp_table.h</a>.</p>

</div>
</div>
<a class="anchor" id="afdba4d6f1a0ffb8cf6da705e5bb407e5"></a><!-- doxytag: member="bgp_table.h::l_right" ref="afdba4d6f1a0ffb8cf6da705e5bb407e5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define l_right&#160;&#160;&#160;link[1]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8h_source.html#l00056">56</a> of file <a class="el" href="bgp__table_8h_source.html">bgp_table.h</a>.</p>

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="a90f263bf84e91fb0b40f10d94c2baafb"></a><!-- doxytag: member="bgp_table.h::bgp_table_t" ref="a90f263bf84e91fb0b40f10d94c2baafb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafb">bgp_table_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a90f263bf84e91fb0b40f10d94c2baafbaefb8ffd61daca8861e9af4bb3c274b3e"></a><!-- doxytag: member="BGP_TABLE_MAIN" ref="a90f263bf84e91fb0b40f10d94c2baafbaefb8ffd61daca8861e9af4bb3c274b3e" args="" -->BGP_TABLE_MAIN</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a90f263bf84e91fb0b40f10d94c2baafba5af83960b1c7e199dbe0cc6392a5e2b0"></a><!-- doxytag: member="BGP_TABLE_RSCLIENT" ref="a90f263bf84e91fb0b40f10d94c2baafba5af83960b1c7e199dbe0cc6392a5e2b0" args="" -->BGP_TABLE_RSCLIENT</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="bgp__table_8h_source.html#l00024">24</a> of file <a class="el" href="bgp__table_8h_source.html">bgp_table.h</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafbaefb8ffd61daca8861e9af4bb3c274b3e">BGP_TABLE_MAIN</a>,
  <a class="code" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafba5af83960b1c7e199dbe0cc6392a5e2b0">BGP_TABLE_RSCLIENT</a>,
} <a class="code" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafb">bgp_table_t</a>;
</pre></div>
</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a8c629ca0214d269ce20f39268b9196d7"></a><!-- doxytag: member="bgp_table.h::bgp_lock_node" ref="a8c629ca0214d269ce20f39268b9196d7" args="(struct bgp_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__node.html">bgp_node</a>* bgp_lock_node </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00215">215</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  node-&gt;<a class="code" href="structbgp__node.html#a18f1bb331b095de15dcc8928f1b64c33">lock</a>++;
  <span class="keywordflow">return</span> node;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6a425d55694b89619908ac0f7d38aee4"></a><!-- doxytag: member="bgp_table.h::bgp_node_get" ref="a6a425d55694b89619908ac0f7d38aee4" args="(struct bgp_table *const, struct prefix *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__node.html">bgp_node</a>* bgp_node_get </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00309">309</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *node;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *match;

  match = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  node = <a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#aa0935947b2c9ac2cea0b7dc5af3d3d3b">top</a>;
  <span class="keywordflow">while</span> (node &amp;&amp; node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt;= <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen &amp;&amp; 
     <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (&amp;node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>))
    {
      <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen)
    {
      <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (node);
      <span class="keywordflow">return</span> node;
    }
      match = node;
      node = node-&gt;<a class="code" href="structbgp__node.html#ae87aa7f88854d8766a4faf9ec337fb83">link</a>[<a class="code" href="prefix_8h.html#a448f1ebdeae472533f8faafd675e8f0b">prefix_bit</a>(&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix, node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)];
    }

  <span class="keywordflow">if</span> (node == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keyword">new</span> = <a class="code" href="bgp__table_8c.html#aa5d18bfd71427676b6a92cd63cc9889b">bgp_node_set</a> (<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
      <span class="keywordflow">if</span> (match)
    <a class="code" href="bgp__table_8c.html#a86fd77c3f08d927c64672f27725f388f">set_link</a> (match, <span class="keyword">new</span>);
      <span class="keywordflow">else</span>
    <a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#aa0935947b2c9ac2cea0b7dc5af3d3d3b">top</a> = <span class="keyword">new</span>;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keyword">new</span> = <a class="code" href="bgp__table_8c.html#a166d867b60d48e8e5a3703026d03b9ec">bgp_node_create</a> ();
      <a class="code" href="bgp__table_8c.html#aef5fb0e60492d045995adc87a88d45b1">route_common</a> (&amp;node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;new-&gt;p);
      <span class="keyword">new</span>-&gt;p.family = <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;family;
      <span class="keyword">new</span>-&gt;table = <a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>;
      <a class="code" href="bgp__table_8c.html#a86fd77c3f08d927c64672f27725f388f">set_link</a> (<span class="keyword">new</span>, node);

      <span class="keywordflow">if</span> (match)
    <a class="code" href="bgp__table_8c.html#a86fd77c3f08d927c64672f27725f388f">set_link</a> (match, <span class="keyword">new</span>);
      <span class="keywordflow">else</span>
    <a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#aa0935947b2c9ac2cea0b7dc5af3d3d3b">top</a> = <span class="keyword">new</span>;

      <span class="keywordflow">if</span> (new-&gt;p.prefixlen != <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen)
    {
      match = <span class="keyword">new</span>;
      <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (match);
      <span class="keyword">new</span> = <a class="code" href="bgp__table_8c.html#aa5d18bfd71427676b6a92cd63cc9889b">bgp_node_set</a> (<a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
      <a class="code" href="bgp__table_8c.html#a86fd77c3f08d927c64672f27725f388f">set_link</a> (match, <span class="keyword">new</span>);
      <a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a5f2a245b62e8cd36b0c0ed0f85a62b99">count</a>++;
    }
    }
  <a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a5f2a245b62e8cd36b0c0ed0f85a62b99">count</a>++;
  <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (<span class="keyword">new</span>);
  
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a34cbadc1584871060a2ad2b774063965"></a><!-- doxytag: member="bgp_table.h::bgp_node_lookup" ref="a34cbadc1584871060a2ad2b774063965" args="(const struct bgp_table *const, struct prefix *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__node.html">bgp_node</a>* bgp_node_lookup </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00289">289</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *node;

  node = <a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#aa0935947b2c9ac2cea0b7dc5af3d3d3b">top</a>;

  <span class="keywordflow">while</span> (node &amp;&amp; node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt;= <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen &amp;&amp; 
     <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (&amp;node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>))
    {
      <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen &amp;&amp; node-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
    <span class="keywordflow">return</span> <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (node);

      node = node-&gt;<a class="code" href="structbgp__node.html#ae87aa7f88854d8766a4faf9ec337fb83">link</a>[<a class="code" href="prefix_8h.html#a448f1ebdeae472533f8faafd675e8f0b">prefix_bit</a>(&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix, node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)];
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abc3ae6a0bb9ebf3ae0248f81ab646504"></a><!-- doxytag: member="bgp_table.h::bgp_node_match" ref="abc3ae6a0bb9ebf3ae0248f81ab646504" args="(const struct bgp_table *, struct prefix *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__node.html">bgp_node</a>* bgp_node_match </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00234">234</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *node;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *matched;

  matched = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  node = <a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#aa0935947b2c9ac2cea0b7dc5af3d3d3b">top</a>;

  <span class="comment">/* Walk down tree.  If there is matched route then store it to</span>
<span class="comment">     matched. */</span>
  <span class="keywordflow">while</span> (node &amp;&amp; node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt;= <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen &amp;&amp; 
     <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (&amp;node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>))
    {
      <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structbgp__node.html#aa7efb6473eab6666b1aba83e4da90429">info</a>)
    matched = node;
      node = node-&gt;<a class="code" href="structbgp__node.html#ae87aa7f88854d8766a4faf9ec337fb83">link</a>[<a class="code" href="prefix_8h.html#a448f1ebdeae472533f8faafd675e8f0b">prefix_bit</a>(&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix, node-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)];
    }

  <span class="comment">/* If matched route found, return it. */</span>
  <span class="keywordflow">if</span> (matched)
    <span class="keywordflow">return</span> <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (matched);

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab1860428fa0e850e6c82ccf9a33a6630"></a><!-- doxytag: member="bgp_table.h::bgp_node_match_ipv4" ref="ab1860428fa0e850e6c82ccf9a33a6630" args="(const struct bgp_table *, struct in_addr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__node.html">bgp_node</a>* bgp_node_match_ipv4 </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00260">260</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = *addr;

  <span class="keywordflow">return</span> <a class="code" href="bgp__table_8c.html#ac385b91f1a956f017974765b91c10c2c">bgp_node_match</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af1a447452cf3b69725a7b659e384a24c"></a><!-- doxytag: member="bgp_table.h::bgp_route_next" ref="af1a447452cf3b69725a7b659e384a24c" args="(struct bgp_node *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__node.html">bgp_node</a>* bgp_route_next </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00423">423</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *next;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *start;

  <span class="comment">/* Node may be deleted from bgp_unlock_node so we have to preserve</span>
<span class="comment">     next node&#39;s pointer. */</span>

  <span class="keywordflow">if</span> (node-&gt;l_left)
    {
      next = node-&gt;l_left;
      <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (next);
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (node);
      <span class="keywordflow">return</span> next;
    }
  <span class="keywordflow">if</span> (node-&gt;l_right)
    {
      next = node-&gt;l_right;
      <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (next);
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (node);
      <span class="keywordflow">return</span> next;
    }

  start = node;
  <span class="keywordflow">while</span> (node-&gt;parent)
    {
      <span class="keywordflow">if</span> (node-&gt;parent-&gt;l_left == node &amp;&amp; node-&gt;parent-&gt;l_right)
    {
      next = node-&gt;<a class="code" href="structbgp__node.html#aeb3ba76fb854c9f44319abd9babf6ccf">parent</a>-&gt;l_right;
      <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (next);
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (start);
      <span class="keywordflow">return</span> next;
    }
      node = node-&gt;<a class="code" href="structbgp__node.html#aeb3ba76fb854c9f44319abd9babf6ccf">parent</a>;
    }
  <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (start);
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af06f8c1629ba1a46761a863813235637"></a><!-- doxytag: member="bgp_table.h::bgp_route_next_until" ref="af06f8c1629ba1a46761a863813235637" args="(struct bgp_node *, struct bgp_node *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__node.html">bgp_node</a>* bgp_route_next_until </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00464">464</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *next;
  <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *start;

  <span class="comment">/* Node may be deleted from bgp_unlock_node so we have to preserve</span>
<span class="comment">     next node&#39;s pointer. */</span>

  <span class="keywordflow">if</span> (node-&gt;l_left)
    {
      next = node-&gt;l_left;
      <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (next);
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (node);
      <span class="keywordflow">return</span> next;
    }
  <span class="keywordflow">if</span> (node-&gt;l_right)
    {
      next = node-&gt;l_right;
      <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (next);
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (node);
      <span class="keywordflow">return</span> next;
    }

  start = node;
  <span class="keywordflow">while</span> (node-&gt;parent &amp;&amp; node != limit)
    {
      <span class="keywordflow">if</span> (node-&gt;parent-&gt;l_left == node &amp;&amp; node-&gt;parent-&gt;l_right)
    {
      next = node-&gt;<a class="code" href="structbgp__node.html#aeb3ba76fb854c9f44319abd9babf6ccf">parent</a>-&gt;l_right;
      <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (next);
      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (start);
      <span class="keywordflow">return</span> next;
    }
      node = node-&gt;<a class="code" href="structbgp__node.html#aeb3ba76fb854c9f44319abd9babf6ccf">parent</a>;
    }
  <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (start);
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a473749b369b1a3cde634cbf7a332baaa"></a><!-- doxytag: member="bgp_table.h::bgp_table_count" ref="a473749b369b1a3cde634cbf7a332baaa" args="(const struct bgp_table *const)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long bgp_table_count </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td>
          <td class="paramname"><em>const</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00504">504</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="structbgp__node.html#a8853446ab7008523bce2eba58b26ad12">table</a>-&gt;<a class="code" href="structbgp__table.html#a5f2a245b62e8cd36b0c0ed0f85a62b99">count</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0dcf04e3cb904d77cf782a5f98b17e15"></a><!-- doxytag: member="bgp_table.h::bgp_table_finish" ref="a0dcf04e3cb904d77cf782a5f98b17e15" args="(struct bgp_table **)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_table_finish </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__table.html">bgp_table</a> **&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00066">66</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (*rt != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="bgp__table_8c.html#af94a76428bf2695ec0ed1f87b3a4143a">bgp_table_unlock</a>(*rt);
      *rt = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac9f0142c2f1ff48116c76d6e1363246f"></a><!-- doxytag: member="bgp_table.h::bgp_table_init" ref="ac9f0142c2f1ff48116c76d6e1363246f" args="(afi_t, safi_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__table.html">bgp_table</a>* bgp_table_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00035">35</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__table.html">bgp_table</a> *rt;

  rt = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5ff4c066f693ec0ff4b6f2598609b323">MTYPE_BGP_TABLE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__table.html">bgp_table</a>));

  <a class="code" href="bgp__table_8c.html#a31e5a9590da2ec7f671d9014a714a885">bgp_table_lock</a>(rt);
  rt-&gt;<a class="code" href="structbgp__table.html#a5099bb3c9ff5831a90846db78724e652">type</a> = <a class="code" href="bgp__table_8h.html#a90f263bf84e91fb0b40f10d94c2baafbaefb8ffd61daca8861e9af4bb3c274b3e">BGP_TABLE_MAIN</a>;
  rt-&gt;<a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a> = <a class="code" href="structbgp__table.html#a65e5c5b62b7afc22106369584ecefd5d">afi</a>;
  rt-&gt;<a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a> = <a class="code" href="structbgp__table.html#a1c64abd56c9540ab9e4a144068ed1caa">safi</a>;
  
  <span class="keywordflow">return</span> rt;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac7bf3663c681a730021718ec0e6bb495"></a><!-- doxytag: member="bgp_table.h::bgp_table_lock" ref="ac7bf3663c681a730021718ec0e6bb495" args="(struct bgp_table *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_table_lock </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00050">50</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  rt-&gt;lock++;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3fc6ea7698abb31288d7b777f6eaf690"></a><!-- doxytag: member="bgp_table.h::bgp_table_top" ref="a3fc6ea7698abb31288d7b777f6eaf690" args="(const struct bgp_table *const)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__node.html">bgp_node</a>* bgp_table_top </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td>
          <td class="paramname"><em>const</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00410">410</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* If there is no node in the routing table return NULL. */</span>
  <span class="keywordflow">if</span> (table-&gt;top == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Lock the top node and return it. */</span>
  <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (table-&gt;top);
  <span class="keywordflow">return</span> table-&gt;top;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad12a7b4ce3fdcf3f7829b701b1c8f4bf"></a><!-- doxytag: member="bgp_table.h::bgp_table_unlock" ref="ad12a7b4ce3fdcf3f7829b701b1c8f4bf" args="(struct bgp_table *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_table_unlock </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__table.html">bgp_table</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00056">56</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rt-&gt;lock &gt; 0);
  rt-&gt;lock--;

  <span class="keywordflow">if</span> (rt-&gt;lock == 0)
    <a class="code" href="bgp__table_8c.html#afd12068ffac8b306294edb5a24a96a2e">bgp_table_free</a> (rt);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5f6b53d4f2cd155109c2eec1fcf80687"></a><!-- doxytag: member="bgp_table.h::bgp_unlock_node" ref="a5f6b53d4f2cd155109c2eec1fcf80687" args="(struct bgp_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_unlock_node </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__table_8c_source.html#l00223">223</a> of file <a class="el" href="bgp__table_8c_source.html">bgp_table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (node-&gt;<a class="code" href="structbgp__node.html#a18f1bb331b095de15dcc8928f1b64c33">lock</a> &gt; 0);
  node-&gt;<a class="code" href="structbgp__node.html#a18f1bb331b095de15dcc8928f1b64c33">lock</a>--;

  <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structbgp__node.html#a18f1bb331b095de15dcc8928f1b64c33">lock</a> == 0)
    <a class="code" href="bgp__table_8c.html#ae400338a90c194c102a87f9d08ebf95a">bgp_node_delete</a> (node);
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__table_8h.html">bgp_table.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:14 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
