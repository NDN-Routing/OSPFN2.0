<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_zebra.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__zebra_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_zebra.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__zebra_8h__dep__incl.png" border="0" usemap="#bgpd_2bgp__zebra_8hdep" alt=""/></div>
<map name="bgpd_2bgp__zebra_8hdep" id="bgpd_2bgp__zebra_8hdep">
<area shape="rect" id="node3" href="bgp__route_8c.html" title="bgpd/bgp_route.c" alt="" coords="5,80,136,107"/><area shape="rect" id="node5" href="bgp__vty_8c.html" title="bgpd/bgp_vty.c" alt="" coords="161,80,279,107"/><area shape="rect" id="node7" href="bgp__zebra_8c.html" title="bgpd/bgp_zebra.c" alt="" coords="303,80,435,107"/><area shape="rect" id="node9" href="bgpd_8c.html" title="bgpd/bgpd.c" alt="" coords="459,80,559,107"/></map>
</div>
</div>
<p><a href="bgp__zebra_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#a9462cb6e82b6f043681e5c9048b97596">bgp_zebra_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#a0067649631e8b6643705954f3bf756e3">bgp_if_update_all</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#a96ac2f697ca6b677ded8f8ff40d7a047">bgp_config_write_redistribute</a> (struct <a class="el" href="structvty.html">vty</a> *, struct <a class="el" href="structbgp.html">bgp</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>, int *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#ad08ed5fa2d9b54f4c8f8ddf9e4c32491">bgp_zebra_announce</a> (struct <a class="el" href="structprefix.html">prefix</a> *, struct <a class="el" href="structbgp__info.html">bgp_info</a> *, struct <a class="el" href="structbgp.html">bgp</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#afe1f77e35170ff6842cebe528bb5147e">bgp_zebra_withdraw</a> (struct <a class="el" href="structprefix.html">prefix</a> *, struct <a class="el" href="structbgp__info.html">bgp_info</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#a2ea643b2187ecdc8dc60569128276957">bgp_redistribute_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#ab3cea693cb781cafd4416e26da519b11">bgp_redistribute_rmap_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, int, const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#a1ab0dd71722fae3dd5c91ee956389497">bgp_redistribute_metric_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, int, u_int32_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#aaac5755a9eb1f2ba21aa4c278030e546">bgp_redistribute_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#ac458ae75529c1187682ef496670c76f4">bgp_redistribute_routemap_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#aa8ecb3a19bf1488411b68e8c7533a960">bgp_redistribute_metric_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#a8e7fd48b88d21c9046d02951e7185a83">if_lookup_by_ipv4</a> (struct in_addr *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8h.html#a249776dd327beb552c6634dbefbe9e19">if_lookup_by_ipv4_exact</a> (struct in_addr *)</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a96ac2f697ca6b677ded8f8ff40d7a047"></a><!-- doxytag: member="bgp_zebra.h::bgp_config_write_redistribute" ref="a96ac2f697ca6b677ded8f8ff40d7a047" args="(struct vty *, struct bgp *, afi_t, safi_t, int *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_config_write_redistribute </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a0067649631e8b6643705954f3bf756e3"></a><!-- doxytag: member="bgp_zebra.h::bgp_if_update_all" ref="a0067649631e8b6643705954f3bf756e3" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_if_update_all </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a1ab0dd71722fae3dd5c91ee956389497"></a><!-- doxytag: member="bgp_zebra.h::bgp_redistribute_metric_set" ref="a1ab0dd71722fae3dd5c91ee956389497" args="(struct bgp *, afi_t, int, u_int32_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_metric_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00937">937</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>]
      &amp;&amp; <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a3c35a477ebcabe4c3887b3b4a373c47c">redist_metric</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] == <a class="code" href="structmetric.html">metric</a>)
    <span class="keywordflow">return</span> 0;

  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 1;
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a3c35a477ebcabe4c3887b3b4a373c47c">redist_metric</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = <a class="code" href="structmetric.html">metric</a>;

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa8ecb3a19bf1488411b68e8c7533a960"></a><!-- doxytag: member="bgp_zebra.h::bgp_redistribute_metric_unset" ref="aa8ecb3a19bf1488411b68e8c7533a960" args="(struct bgp *, afi_t, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_metric_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l01006">1006</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (! <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>])
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Unset metric. */</span>
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a3c35a477ebcabe4c3887b3b4a373c47c">redist_metric</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab3cea693cb781cafd4416e26da519b11"></a><!-- doxytag: member="bgp_zebra.h::bgp_redistribute_rmap_set" ref="ab3cea693cb781cafd4416e26da519b11" args="(struct bgp *, afi_t, int, const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_rmap_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00920">920</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>
      &amp;&amp; (strcmp (<a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>) == 0))
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][type].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
    free (<a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][type].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>);
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#a8b49a178b9734b1b1a04847a9c5bf3fe">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac458ae75529c1187682ef496670c76f4"></a><!-- doxytag: member="bgp_zebra.h::bgp_redistribute_routemap_unset" ref="ac458ae75529c1187682ef496670c76f4" args="(struct bgp *, afi_t, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_routemap_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00991">991</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (! <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Unset route-map. */</span>
  free (<a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][type].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>);
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#a8b49a178b9734b1b1a04847a9c5bf3fe">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2ea643b2187ecdc8dc60569128276957"></a><!-- doxytag: member="bgp_zebra.h::bgp_redistribute_set" ref="a2ea643b2187ecdc8dc60569128276957" args="(struct bgp *, afi_t, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00894">894</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Set flag to BGP instance. */</span>
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#adf85d87af017be850e1dc3339c655848">redist</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 1;

  <span class="comment">/* Return if already redistribute flag is set. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>])
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;

  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 1;

  <span class="comment">/* Return if zebra connection is not established. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: redistribute add %s&quot;</span>, <a class="code" href="log_8c.html#ae87aa85b5b05b120d376956ce5d13444">zebra_route_string</a>(<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>));
    
  <span class="comment">/* Send distribute add message to zebra. */</span>
  <a class="code" href="zclient_8c.html#a0ed1704cde688d0575a1394a34f6fc82">zebra_redistribute_send</a> (<a class="code" href="zebra_8h.html#aaf00306d6060095dd258463ee7cb0cc1">ZEBRA_REDISTRIBUTE_ADD</a>, <a class="code" href="structzclient.html">zclient</a>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aaac5755a9eb1f2ba21aa4c278030e546"></a><!-- doxytag: member="bgp_zebra.h::bgp_redistribute_unset" ref="aaac5755a9eb1f2ba21aa4c278030e546" args="(struct bgp *, afi_t, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00952">952</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Unset flag from BGP instance. */</span>
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#adf85d87af017be850e1dc3339c655848">redist</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;

  <span class="comment">/* Unset route-map. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
    free (<a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][type].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>);
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#a8b49a178b9734b1b1a04847a9c5bf3fe">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Unset metric. */</span>
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;
  <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#a3c35a477ebcabe4c3887b3b4a373c47c">redist_metric</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;

  <span class="comment">/* Return if zebra connection is disabled. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[type])
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;

  <span class="keywordflow">if</span> (<a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#adf85d87af017be850e1dc3339c655848">redist</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][type] == 0 
      &amp;&amp; <a class="code" href="structbgp.html">bgp</a>-&gt;<a class="code" href="structbgp.html#adf85d87af017be850e1dc3339c655848">redist</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][type] == 0 
      &amp;&amp; <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &gt;= 0)
    {
      <span class="comment">/* Send distribute delete message to zebra. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: redistribute delete %s&quot;</span>,
           <a class="code" href="log_8c.html#ae87aa85b5b05b120d376956ce5d13444">zebra_route_string</a>(type));
      <a class="code" href="zclient_8c.html#a0ed1704cde688d0575a1394a34f6fc82">zebra_redistribute_send</a> (<a class="code" href="zebra_8h.html#a1dce1941aae01a8a16dace7591398a0d">ZEBRA_REDISTRIBUTE_DELETE</a>, <a class="code" href="structzclient.html">zclient</a>, type);
    }
  
  <span class="comment">/* Withdraw redistributed routes from current BGP&#39;s routing table. */</span>
  <a class="code" href="bgp__route_8h.html#ab7121f0cd3100fffb819723728d50c2e">bgp_redistribute_withdraw</a> (<a class="code" href="structbgp.html">bgp</a>, afi, type);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad08ed5fa2d9b54f4c8f8ddf9e4c32491"></a><!-- doxytag: member="bgp_zebra.h::bgp_zebra_announce" ref="ad08ed5fa2d9b54f4c8f8ddf9e4c32491" args="(struct prefix *, struct bgp_info *, struct bgp *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_zebra_announce </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__info.html">bgp_info</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00643">643</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>;
  u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (! <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>])
    <span class="keywordflow">return</span>;

  flags = 0;
  peer = info-&gt;peer;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> || <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a49dfa659951c25dc0784165a6083546b">ZEBRA_FLAG_IBGP</a>);
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a5edc0a08174731d635cf05f3908bd6ae">ZEBRA_FLAG_INTERNAL</a>);
    }

  <span class="keywordflow">if</span> ((<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != 1)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a5edc0a08174731d635cf05f3908bd6ae">ZEBRA_FLAG_INTERNAL</a>);

  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;family == AF_INET)
    {
      <span class="keyword">struct </span><a class="code" href="structzapi__ipv4.html">zapi_ipv4</a> api;
      <span class="keyword">struct </span>in_addr *<a class="code" href="structnexthop.html">nexthop</a>;

      api.<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a> = flags;
      nexthop = &amp;info-&gt;attr-&gt;nexthop;

      api.type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
      api.message = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      api.nexthop_num = 1;
      api.nexthop = &amp;nexthop;
      api.ifindex_num = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>);
      api.metric = info-&gt;attr-&gt;med;

      distance = <a class="code" href="bgp__route_8h.html#a45aae1ba2d5eedac029237c73f16881e">bgp_distance_apply</a> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, info, <a class="code" href="structbgp.html">bgp</a>);

      <span class="keywordflow">if</span> (distance)
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#abe498bb81bfbda17757173ef23e25179">ZAPI_MESSAGE_DISTANCE</a>);
      api.distance = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
    }

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: IPv4 route add %s/%d nexthop %s metric %u&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix4, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, nexthop, buf[1], <span class="keyword">sizeof</span>(buf[1])),
             api.metric);
    }

      <a class="code" href="zclient_8c.html#ad9a398f43faa79a0bab620c985fb476a">zapi_ipv4_route</a> (<a class="code" href="zebra_8h.html#aa2913a6b1e5fbc598479aa282343a5e1">ZEBRA_IPV4_ROUTE_ADD</a>, <a class="code" href="structzclient.html">zclient</a>, 
                       (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;api);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* We have to think about a IPv6 link-local address curse. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;family == AF_INET6)
    {
      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
      <span class="keyword">struct </span>in6_addr *nexthop;
      <span class="keyword">struct </span>zapi_ipv6 api;

      ifindex = 0;
      nexthop = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (info-&gt;attr-&gt;extra);
      
      <span class="comment">/* Only global address nexthop exists. */</span>
      <span class="keywordflow">if</span> (info-&gt;attr-&gt;extra-&gt;mp_nexthop_len == 16)
    nexthop = &amp;info-&gt;attr-&gt;extra-&gt;mp_nexthop_global;
      
      <span class="comment">/* If both global and link-local address present. */</span>
      <span class="keywordflow">if</span> (info-&gt;attr-&gt;extra-&gt;mp_nexthop_len == 32)
    {
      <span class="comment">/* Workaround for Cisco&#39;s nexthop bug.  */</span>
      <span class="keywordflow">if</span> (IN6_IS_ADDR_UNSPECIFIED (&amp;info-&gt;attr-&gt;extra-&gt;mp_nexthop_global)
          &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a>-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
        nexthop = &amp;peer-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a>-&gt;sin6.sin6_addr;
      <span class="keywordflow">else</span>
        nexthop = &amp;info-&gt;attr-&gt;extra-&gt;mp_nexthop_local;

      <span class="keywordflow">if</span> (info-&gt;peer-&gt;nexthop.ifp)
        ifindex = info-&gt;peer-&gt;nexthop.ifp-&gt;ifindex;
    }

      <span class="keywordflow">if</span> (nexthop == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (nexthop) &amp;&amp; ! ifindex)
    {
      <span class="keywordflow">if</span> (info-&gt;peer-&gt;ifname)
        ifindex = <a class="code" href="if_8c.html#a957921d44ba446eb52b305bb270ca2df">if_nametoindex</a> (info-&gt;peer-&gt;ifname);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (info-&gt;peer-&gt;nexthop.ifp)
        ifindex = info-&gt;peer-&gt;nexthop.ifp-&gt;ifindex;
    }

      <span class="comment">/* Make Zebra API structure. */</span>
      api.flags = flags;
      api.type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
      api.message = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      api.nexthop_num = 1;
      api.nexthop = &amp;nexthop;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#ae8d1e48f6c2858ecda1c3aee4219a0e6">ZAPI_MESSAGE_IFINDEX</a>);
      api.ifindex_num = 1;
      api.ifindex = &amp;ifindex;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>);
      api.metric = info-&gt;attr-&gt;med;

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: IPv6 route add %s/%d nexthop %s metric %u&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix6, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6, nexthop, buf[1], <span class="keyword">sizeof</span>(buf[1])),
             api.metric);
    }

      zapi_ipv6_route (<a class="code" href="zebra_8h.html#a2d0f19502bde040501c7ad64bc955739">ZEBRA_IPV6_ROUTE_ADD</a>, <a class="code" href="structzclient.html">zclient</a>, 
                       (<span class="keyword">struct</span> prefix_ipv6 *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;api);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9462cb6e82b6f043681e5c9048b97596"></a><!-- doxytag: member="bgp_zebra.h::bgp_zebra_init" ref="a9462cb6e82b6f043681e5c9048b97596" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_zebra_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l01025">1025</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Set default values. */</span>
  <a class="code" href="structzclient.html">zclient</a> = <a class="code" href="zclient_8c.html#aa521f2a71596b1dc50f76fcb57dff30b">zclient_new</a> ();
  <a class="code" href="zclient_8c.html#ac649a246f405850a3ade72de002745e3">zclient_init</a> (<a class="code" href="structzclient.html">zclient</a>, <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>);
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a91ae88d0aa9ff087af5b7567334197f6">router_id_update</a> = <a class="code" href="bgp__zebra_8c.html#a88e2711780e86b9d978926a2c494a4b3">bgp_router_id_update</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a42e63c358fc87552ca16a1eea8b69c4f">interface_add</a> = <a class="code" href="bgp__zebra_8c.html#a4cc83372d062b473e38e37f45cc8db00">bgp_interface_add</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a59d608db28363c236285c6323d5697ab">interface_delete</a> = <a class="code" href="bgp__zebra_8c.html#a9cb30d7f1f2ccb8d308c4e15346aa14c">bgp_interface_delete</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a75ee908bb229653f271356b982fa76e7">interface_address_add</a> = <a class="code" href="bgp__zebra_8c.html#a7b54ec13635aebffd8121be36cea0ca4">bgp_interface_address_add</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a3494b722f85fe14ff8c99ddae54bad94">interface_address_delete</a> = <a class="code" href="bgp__zebra_8c.html#a42e3aed3931c5aeb6394fbb3d382ad63">bgp_interface_address_delete</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#ac2fe2ea5a7f820e1ac572f7629be997f">ipv4_route_add</a> = <a class="code" href="bgp__zebra_8c.html#a21266614aeaa7bbcbe7784fd3450fdb4">zebra_read_ipv4</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a2fa1fdde8885665490f46edc8c102d4a">ipv4_route_delete</a> = <a class="code" href="bgp__zebra_8c.html#a21266614aeaa7bbcbe7784fd3450fdb4">zebra_read_ipv4</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a45465702e655472187e9efc3c1734daa">interface_up</a> = <a class="code" href="bgp__zebra_8c.html#ada1a56699359a3f1a564935aab4c6e55">bgp_interface_up</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a426b5e0ec3b5ad8843eb42deaa4fe335">interface_down</a> = <a class="code" href="bgp__zebra_8c.html#a09b0cfe6fa27a28ebdf7473f5e916c22">bgp_interface_down</a>;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a9d185464cca684ac3d024ec4be7b9881">ipv6_route_add</a> = zebra_read_ipv6;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a86d1ece8718111eee4bdd79ca320e8ea">ipv6_route_delete</a> = zebra_read_ipv6;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="comment">/* Interface related init. */</span>
  <a class="code" href="if_8c.html#ac78cad8082fa880e50b2c945f8a3c33d">if_init</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="afe1f77e35170ff6842cebe528bb5147e"></a><!-- doxytag: member="bgp_zebra.h::bgp_zebra_withdraw" ref="afe1f77e35170ff6842cebe528bb5147e" args="(struct prefix *, struct bgp_info *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_zebra_withdraw </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__info.html">bgp_info</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00778">778</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (! <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>])
    <span class="keywordflow">return</span>;

  peer = info-&gt;peer;
  flags = 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a5edc0a08174731d635cf05f3908bd6ae">ZEBRA_FLAG_INTERNAL</a>);
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a49dfa659951c25dc0784165a6083546b">ZEBRA_FLAG_IBGP</a>);
    }

  <span class="keywordflow">if</span> ((<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != 1)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a5edc0a08174731d635cf05f3908bd6ae">ZEBRA_FLAG_INTERNAL</a>);

  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;family == AF_INET)
    {
      <span class="keyword">struct </span><a class="code" href="structzapi__ipv4.html">zapi_ipv4</a> api;
      <span class="keyword">struct </span>in_addr *<a class="code" href="structnexthop.html">nexthop</a>;

      api.<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a> = flags;
      nexthop = &amp;info-&gt;attr-&gt;nexthop;

      api.type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
      api.message = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      api.nexthop_num = 1;
      api.nexthop = &amp;nexthop;
      api.ifindex_num = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>);
      api.metric = info-&gt;attr-&gt;med;

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: IPv4 route delete %s/%d nexthop %s metric %u&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix4, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, nexthop, buf[1], <span class="keyword">sizeof</span>(buf[1])),
             api.metric);
    }

      <a class="code" href="zclient_8c.html#ad9a398f43faa79a0bab620c985fb476a">zapi_ipv4_route</a> (<a class="code" href="zebra_8h.html#a0c9efcc3f61219a6697f5da18d8de992">ZEBRA_IPV4_ROUTE_DELETE</a>, <a class="code" href="structzclient.html">zclient</a>, 
                       (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;api);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* We have to think about a IPv6 link-local address curse. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;family == AF_INET6)
    {
      <span class="keyword">struct </span>zapi_ipv6 api;
      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
      <span class="keyword">struct </span>in6_addr *nexthop;
      
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (info-&gt;attr-&gt;extra);
      
      ifindex = 0;
      nexthop = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <span class="comment">/* Only global address nexthop exists. */</span>
      <span class="keywordflow">if</span> (info-&gt;attr-&gt;extra-&gt;mp_nexthop_len == 16)
    nexthop = &amp;info-&gt;attr-&gt;extra-&gt;mp_nexthop_global;

      <span class="comment">/* If both global and link-local address present. */</span>
      <span class="keywordflow">if</span> (info-&gt;attr-&gt;extra-&gt;mp_nexthop_len == 32)
    {
      nexthop = &amp;info-&gt;attr-&gt;extra-&gt;mp_nexthop_local;
      <span class="keywordflow">if</span> (info-&gt;peer-&gt;nexthop.ifp)
        ifindex = info-&gt;peer-&gt;nexthop.ifp-&gt;ifindex;
    }

      <span class="keywordflow">if</span> (nexthop == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (nexthop) &amp;&amp; ! ifindex)
    <span class="keywordflow">if</span> (info-&gt;peer-&gt;ifname)
      ifindex = <a class="code" href="if_8c.html#a957921d44ba446eb52b305bb270ca2df">if_nametoindex</a> (info-&gt;peer-&gt;ifname);

      api.flags = flags;
      api.type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
      api.message = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      api.nexthop_num = 1;
      api.nexthop = &amp;nexthop;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#ae8d1e48f6c2858ecda1c3aee4219a0e6">ZAPI_MESSAGE_IFINDEX</a>);
      api.ifindex_num = 1;
      api.ifindex = &amp;ifindex;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>);
      api.metric = info-&gt;attr-&gt;med;

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: IPv6 route delete %s/%d nexthop %s metric %u&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;u.prefix6, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6, nexthop, buf[1], <span class="keyword">sizeof</span>(buf[1])),
             api.metric);
    }

      zapi_ipv6_route (<a class="code" href="zebra_8h.html#ad98414d027f7107e91cb040a329ad48a">ZEBRA_IPV6_ROUTE_DELETE</a>, <a class="code" href="structzclient.html">zclient</a>, 
                       (<span class="keyword">struct</span> prefix_ipv6 *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;api);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8e7fd48b88d21c9046d02951e7185a83"></a><!-- doxytag: member="bgp_zebra.h::if_lookup_by_ipv4" ref="a8e7fd48b88d21c9046d02951e7185a83" args="(struct in_addr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structinterface.html">interface</a>* if_lookup_by_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00385">385</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ifnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *<a class="code" href="structconnected.html">connected</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *cp; 
  
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = *addr;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, ifnode, ifp))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, cnode, connected))
    {
      cp = connected-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
        
      <span class="keywordflow">if</span> (cp-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (cp, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>))
          <span class="keywordflow">return</span> ifp;
    }
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a249776dd327beb552c6634dbefbe9e19"></a><!-- doxytag: member="bgp_zebra.h::if_lookup_by_ipv4_exact" ref="a249776dd327beb552c6634dbefbe9e19" args="(struct in_addr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structinterface.html">interface</a>* if_lookup_by_ipv4_exact </td>
          <td>(</td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00413">413</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ifnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *<a class="code" href="structconnected.html">connected</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *cp; 
  
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, ifnode, ifp))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, cnode, connected))
    {
      cp = connected-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
        
      <span class="keywordflow">if</span> (cp-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;cp-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, addr))
          <span class="keywordflow">return</span> ifp;
    }
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__zebra_8h.html">bgp_zebra.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:18 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
