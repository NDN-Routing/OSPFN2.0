<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_ase.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__ase_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ospfd/ospf_ase.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="hash_8h_source.html">hash.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="vty_8h_source.html">vty.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospfd_8h_source.html">ospfd/ospfd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__interface_8h_source.html">ospfd/ospf_interface.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__ism_8h_source.html">ospfd/ospf_ism.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__asbr_8h_source.html">ospfd/ospf_asbr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__lsa_8h_source.html">ospfd/ospf_lsa.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__lsdb_8h_source.html">ospfd/ospf_lsdb.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__neighbor_8h_source.html">ospfd/ospf_neighbor.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__nsm_8h_source.html">ospfd/ospf_nsm.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__spf_8h_source.html">ospfd/ospf_spf.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__route_8h_source.html">ospfd/ospf_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__ase_8h_source.html">ospfd/ospf_ase.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__zebra_8h_source.html">ospfd/ospf_zebra.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__dump_8h_source.html">ospfd/ospf_dump.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for ospf_ase.c:</div>
<div class="dyncontent">
<div class="center"><img src="ospf__ase_8c__incl.png" border="0" usemap="#ospfd_2ospf__ase_8c" alt=""/></div>
<map name="ospfd_2ospf__ase_8c" id="ospfd_2ospf__ase_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1288,155,1355,181"/><area shape="rect" id="node57" href="thread_8h.html" title="thread.h" alt="" coords="2711,229,2783,256"/><area shape="rect" id="node59" href="memory_8h.html" title="memory.h" alt="" coords="2793,80,2876,107"/><area shape="rect" id="node61" href="hash_8h.html" title="hash.h" alt="" coords="2900,80,2961,107"/><area shape="rect" id="node63" href="linklist_8h.html" title="linklist.h" alt="" coords="2991,155,3061,181"/><area shape="rect" id="node65" href="prefix_8h.html" title="prefix.h" alt="" coords="3101,80,3168,107"/><area shape="rect" id="node67" href="if_8h.html" title="if.h" alt="" coords="3036,80,3076,107"/><area shape="rect" id="node70" href="table_8h.html" title="table.h" alt="" coords="3193,80,3257,107"/><area shape="rect" id="node72" href="vty_8h.html" title="vty.h" alt="" coords="2623,155,2675,181"/><area shape="rect" id="node75" href="log_8h.html" title="log.h" alt="" coords="2623,229,2675,256"/><area shape="rect" id="node79" href="ospfd_8h.html" title="ospfd/ospfd.h" alt="" coords="2348,80,2455,107"/><area shape="rect" id="node83" href="ospf__interface_8h.html" title="ospfd/ospf_interface.h" alt="" coords="3333,80,3491,107"/><area shape="rect" id="node85" href="ospf__spf_8h.html" title="ospfd/ospf_spf.h" alt="" coords="3291,155,3415,181"/><area shape="rect" id="node87" href="ospf__ism_8h.html" title="ospfd/ospf_ism.h" alt="" coords="3515,80,3641,107"/><area shape="rect" id="node89" href="ospf__asbr_8h.html" title="ospfd/ospf_asbr.h" alt="" coords="3667,80,3797,107"/><area shape="rect" id="node91" href="ospf__lsa_8h.html" title="ospfd/ospf_lsa.h" alt="" coords="3821,80,3944,107"/><area shape="rect" id="node93" href="ospf__lsdb_8h.html" title="ospfd/ospf_lsdb.h" alt="" coords="3968,80,4099,107"/><area shape="rect" id="node95" href="ospf__neighbor_8h.html" title="ospfd/ospf_neighbor.h" alt="" coords="4123,80,4281,107"/><area shape="rect" id="node97" href="ospf__nsm_8h.html" title="ospfd/ospf_nsm.h" alt="" coords="4307,80,4437,107"/><area shape="rect" id="node100" href="ospf__route_8h.html" title="ospfd/ospf_route.h" alt="" coords="4462,80,4599,107"/><area shape="rect" id="node102" href="ospf__ase_8h.html" title="ospfd/ospf_ase.h" alt="" coords="4623,80,4749,107"/><area shape="rect" id="node104" href="ospf__zebra_8h.html" title="ospfd/ospf_zebra.h" alt="" coords="2580,80,2719,107"/><area shape="rect" id="node107" href="ospf__dump_8h.html" title="ospfd/ospf_dump.h" alt="" coords="4775,80,4913,107"/></map>
</div>
</div>
<p><a href="ospf__ase_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#adabf761265a505e8e16c1f021f32c10c">OSPF_ASE_CALC_INTERVAL</a>&#160;&#160;&#160;1</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a5e8bc396fd6aac3eba792e511f2ae56b">ospf_find_asbr_route</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structroute__table.html">route_table</a> *rtrs, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *asbr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#ab2cf385d9e91bd4283b6ae5db56e639e">ospf_find_asbr_route_through_area</a> (struct <a class="el" href="structroute__table.html">route_table</a> *rtrs, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *asbr, struct <a class="el" href="structospf__area.html">ospf_area</a> *area)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a043e3e1035e8574fb053fb967e97870f">ospf_ase_complete_direct_routes</a> (struct <a class="el" href="structospf__route.html">ospf_route</a> *ro, struct in_addr <a class="el" href="structnexthop.html">nexthop</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#ae90a71096e4e9e4933ca2fcfcfc2fa9a">ospf_ase_forward_address_check</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct in_addr fwd_addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a75ddb7279bd188d92cac5f28d6381d21">ospf_ase_calculate_new_route</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa, struct <a class="el" href="structospf__route.html">ospf_route</a> *asbr_route, u_int32_t <a class="el" href="structmetric.html">metric</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#aabe2473abaca8a62db05574a61c7a233">ospf_ase_calculate_route</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#aeb1061c857b7588c19bb788970a39834">ospf_ase_route_match_same</a> (struct <a class="el" href="structroute__table.html">route_table</a> *rt, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="structprefix.html">prefix</a>, struct <a class="el" href="structospf__route.html">ospf_route</a> *newor)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a79cc08a1acde4013be4c6e6a29151bab">ospf_ase_compare_tables</a> (struct <a class="el" href="structroute__table.html">route_table</a> *new_external_route, struct <a class="el" href="structroute__table.html">route_table</a> *old_external_route)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a4f3500c986bc2bbf4d483721a1b6775a">ospf_ase_calculate_timer</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a8e097f55230eec4539a22f5eda781d90">ospf_ase_calculate_schedule</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a1a8e03352bf6bfefef4dbc963822a8e6">ospf_ase_calculate_timer_add</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a8e89d2d1ed7ad307108222fad996d322">ospf_ase_register_external_lsa</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa, struct <a class="el" href="structospf.html">ospf</a> *top)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a163acf395d21ed38123a06213d1050eb">ospf_ase_unregister_external_lsa</a> (struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa, struct <a class="el" href="structospf.html">ospf</a> *top)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a42bf210bf76365af43a100923da36329">ospf_ase_external_lsas_finish</a> (struct <a class="el" href="structroute__table.html">route_table</a> *rt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__ase_8c.html#a0c7dee8c77caeb98ddcec77a973cf4c5">ospf_ase_incremental_update</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *lsa)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="adabf761265a505e8e16c1f021f32c10c"></a><!-- doxytag: member="ospf_ase.c::OSPF_ASE_CALC_INTERVAL" ref="adabf761265a505e8e16c1f021f32c10c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_ASE_CALC_INTERVAL&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00285">285</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a75ddb7279bd188d92cac5f28d6381d21"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_calculate_new_route" ref="a75ddb7279bd188d92cac5f28d6381d21" args="(struct ospf_lsa *lsa, struct ospf_route *asbr_route, u_int32_t metric)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__route.html">ospf_route</a>* ospf_ase_calculate_new_route </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname"><em>asbr_route</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>metric</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00244">244</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *<a class="code" href="spgrid_8c.html#a7c4593313d1839d57c28594a69357bab">al</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *<span class="keyword">new</span>;

  al = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;

  <span class="keyword">new</span> = <a class="code" href="ospf__route_8c.html#a953988fffb9c0a44d09450c4201944d0">ospf_route_new</a> ();

  <span class="comment">/* Set redistributed type -- does make sense? */</span>
  <span class="comment">/* new-&gt;type = type; */</span>
  <span class="keyword">new</span>-&gt;<a class="code" href="structospf__route.html#aa8332d802bc4429aed889042d5c6be6e">id</a> = al-&gt;<a class="code" href="structas__external__lsa.html#afcdf76cb8210eac6c3708d4e100e45db">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>;
  <span class="keyword">new</span>-&gt;mask = al-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>;

  <span class="keywordflow">if</span> (!<a class="code" href="ospf__lsa_8h.html#a57c9f704846d60fce6698705135004ca">IS_EXTERNAL_METRIC</a> (al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#ae0866e78e3123cc6a8d5c870b89dc0bd">tos</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: type-1 created.&quot;</span>);
      <span class="keyword">new</span>-&gt;path_type = <a class="code" href="ospf__route_8h.html#a15dab014460164847059902ea4535834">OSPF_PATH_TYPE1_EXTERNAL</a>;
      <span class="keyword">new</span>-&gt;cost = asbr_route-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> + <a class="code" href="structas__external__lsa.html#a583a3356d3e3d921a39af23d884de7b8">metric</a>;        <span class="comment">/* X + Y */</span>
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: type-2 created.&quot;</span>);
      <span class="keyword">new</span>-&gt;path_type = <a class="code" href="ospf__route_8h.html#aa9752c4570157da8a3258dc4cdf23ce5">OSPF_PATH_TYPE2_EXTERNAL</a>;
      <span class="keyword">new</span>-&gt;cost = asbr_route-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>;         <span class="comment">/* X */</span>
      <span class="keyword">new</span>-&gt;u.ext.type2_cost = <a class="code" href="structas__external__lsa.html#a583a3356d3e3d921a39af23d884de7b8">metric</a>;           <span class="comment">/* Y */</span>
    }

  <span class="keyword">new</span>-&gt;type = <a class="code" href="ospf__route_8h.html#a7f5d4a2b626b300ae96a502438de0615">OSPF_DESTINATION_NETWORK</a>;
  <span class="keyword">new</span>-&gt;u.ext.origin = lsa;
  <span class="keyword">new</span>-&gt;u.ext.tag = ntohl (al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a6d3446651375dc471db4366afe6ae3ea">route_tag</a>);
  <span class="keyword">new</span>-&gt;u.ext.asbr = asbr_route;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<span class="keyword">new</span> != asbr_route);

  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aabe2473abaca8a62db05574a61c7a233"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_calculate_route" ref="aabe2473abaca8a62db05574a61c7a233" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_ase_calculate_route </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00288">288</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t <a class="code" href="structas__external__lsa.html#a583a3356d3e3d921a39af23d884de7b8">metric</a>;
  <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *<a class="code" href="spgrid_8c.html#a7c4593313d1839d57c28594a69357bab">al</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *asbr_route;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> asbr, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *<span class="keyword">new</span>, *or;
  <span class="keywordtype">int</span> ret;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (lsa);
  al = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;

  if (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> == <a class="code" href="ospf__lsa_8h.html#adc97c8397af1195230a4a98bf67e5a9d">OSPF_AS_NSSA_LSA</a>)
    <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_ase_calc(): Processing Type-7&quot;</span>);

  <span class="comment">/* Stay away from any Local Translated Type-7 LSAs */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aa8c833176affd799afeb8db16cdb2602">flags</a>, <a class="code" href="ospf__lsa_8h.html#a20f98f1fb4931335ddf4dd15d8fe9040">OSPF_LSA_LOCAL_XLT</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_ase_calc(): Rejecting Local Xlt&#39;d&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: Calculate AS-external-LSA to %s/%d&quot;</span>,
        inet_ntoa (al-&gt;<a class="code" href="structas__external__lsa.html#afcdf76cb8210eac6c3708d4e100e45db">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>), <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (al-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>));
  <span class="comment">/* (1) If the cost specified by the LSA is LSInfinity, or if the</span>
<span class="comment">         LSA&#39;s LS age is equal to MaxAge, then examine the next LSA. */</span>
  <span class="keywordflow">if</span> ((metric = <a class="code" href="ospf__lsa_8h.html#af484b7995c962cc7558d5fc385b835fc">GET_METRIC</a> (al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a583a3356d3e3d921a39af23d884de7b8">metric</a>)) &gt;= <a class="code" href="ospfd_8h.html#ac490c9aeaac791b5e779097813b5298e">OSPF_LS_INFINITY</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: Metric is OSPF_LS_INFINITY&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (lsa))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: AS-external-LSA is MAXAGE&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <span class="comment">/* (2) If the LSA was originated by the calculating router itself,</span>
<span class="comment">     examine the next LSA. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (lsa))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: AS-external-LSA is self originated&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* (3) Call the destination described by the LSA N.  N&#39;s address is</span>
<span class="comment">         obtained by masking the LSA&#39;s Link State ID with the</span>
<span class="comment">     network/subnet mask contained in the body of the LSA.  Look</span>
<span class="comment">     up the routing table entries (potentially one per attached</span>
<span class="comment">     area) for the AS boundary router (ASBR) that originated the</span>
<span class="comment">     LSA. If no entries exist for router ASBR (i.e., ASBR is</span>
<span class="comment">     unreachable), do nothing with this LSA and consider the next</span>
<span class="comment">     in the list. */</span>
  
  asbr.family = AF_INET;
  asbr.prefix = al-&gt;<a class="code" href="structas__external__lsa.html#afcdf76cb8210eac6c3708d4e100e45db">header</a>.<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>;
  asbr.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;asbr);
  
  asbr_route = <a class="code" href="ospf__ase_8c.html#a5e8bc396fd6aac3eba792e511f2ae56b">ospf_find_asbr_route</a> (ospf, ospf-&gt;<a class="code" href="structospf.html#a0c2e7f55defc0862ed00e1230cd53bd4">new_rtrs</a>, &amp;asbr);
  <span class="keywordflow">if</span> (asbr_route == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: Can&#39;t find originating ASBR route&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  <span class="keywordflow">if</span> (!(asbr_route-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#abd1fb7a470e51e2dc894282f5c1a637b">flags</a> &amp; <a class="code" href="ospf__lsa_8h.html#a050470d5439fd96299124e0debe3444f">ROUTER_LSA_EXTERNAL</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: Originating router is not an ASBR&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
  
  <span class="comment">/*     Else, this LSA describes an AS external path to destination</span>
<span class="comment">     N.  Examine the forwarding address specified in the AS-</span>
<span class="comment">     external-LSA.  This indicates the IP address to which</span>
<span class="comment">     packets for the destination should be forwarded. */</span>
  
  <span class="keywordflow">if</span> (al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>.s_addr == 0)
    {
      <span class="comment">/* If the forwarding address is set to 0.0.0.0, packets should</span>
<span class="comment">     be sent to the ASBR itself. Among the multiple routing table</span>
<span class="comment">     entries for the ASBR, select the preferred entry as follows.</span>
<span class="comment">     If RFC1583Compatibility is set to &quot;disabled&quot;, prune the set</span>
<span class="comment">     of routing table entries for the ASBR as described in</span>
<span class="comment">     Section 16.4.1. In any case, among the remaining routing</span>
<span class="comment">     table entries, select the routing table entry with the least</span>
<span class="comment">     cost; when there are multiple least cost routing table</span>
<span class="comment">     entries the entry whose associated area has the largest OSPF</span>
<span class="comment">     Area ID (when considered as an unsigned 32-bit integer) is</span>
<span class="comment">     chosen. */</span>

      <span class="comment">/* asbr_route already contains the requested route */</span>
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* If the forwarding address is non-zero, look up the</span>
<span class="comment">     forwarding address in the routing table.[24] The matching</span>
<span class="comment">     routing table entry must specify an intra-area or inter-area</span>
<span class="comment">     path; if no such path exists, do nothing with the LSA and</span>
<span class="comment">     consider the next in the list. */</span>
      <span class="keywordflow">if</span> (! <a class="code" href="ospf__ase_8c.html#ae90a71096e4e9e4933ca2fcfcfc2fa9a">ospf_ase_forward_address_check</a> (ospf, al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: Forwarding address is our router &quot;</span>
            <span class="stringliteral">&quot;address&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }
      
      asbr.family = AF_INET;
      asbr.prefix = al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>;
      asbr.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;

      rn = <a class="code" href="table_8c.html#a948f4335026cd8417c7424e85156ae55">route_node_match</a> (ospf-&gt;<a class="code" href="structospf.html#a1fd3dcac2e3c565e23fce6884ffb097f">new_table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;asbr);
      
      <span class="keywordflow">if</span> (rn == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || (asbr_route = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: Can&#39;t find route to forwarding &quot;</span>
            <span class="stringliteral">&quot;address&quot;</span>);
      <span class="keywordflow">if</span> (rn)
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">return</span> 0;
    }

      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
    }

  <span class="comment">/* (4) Let X be the cost specified by the preferred routing table</span>
<span class="comment">         entry for the ASBR/forwarding address, and Y the cost</span>
<span class="comment">     specified in the LSA.  X is in terms of the link state</span>
<span class="comment">     metric, and Y is a type 1 or 2 external metric. */</span>
             

  <span class="comment">/* (5) Look up the routing table entry for the destination N.  If</span>
<span class="comment">         no entry exists for N, install the AS external path to N,</span>
<span class="comment">     with next hop equal to the list of next hops to the</span>
<span class="comment">     forwarding address, and advertising router equal to ASBR.</span>
<span class="comment">     If the external metric type is 1, then the path-type is set</span>
<span class="comment">     to type 1 external and the cost is equal to X+Y.  If the</span>
<span class="comment">     external metric type is 2, the path-type is set to type 2</span>
<span class="comment">     external, the link state component of the route&#39;s cost is X,</span>
<span class="comment">     and the type 2 cost is Y. */</span>
  <span class="keyword">new</span> = <a class="code" href="ospf__ase_8c.html#a75ddb7279bd188d92cac5f28d6381d21">ospf_ase_calculate_new_route</a> (lsa, asbr_route, metric);

  <span class="comment">/* (6) Compare the AS external path described by the LSA with the</span>
<span class="comment">         existing paths in N&#39;s routing table entry, as follows. If</span>
<span class="comment">     the new path is preferred, it replaces the present paths in</span>
<span class="comment">     N&#39;s routing table entry.  If the new path is of equal</span>
<span class="comment">     preference, it is added to N&#39;s routing table entry&#39;s list of</span>
<span class="comment">     paths. */</span>

  <span class="comment">/* Set prefix. */</span>
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = al-&gt;<a class="code" href="structas__external__lsa.html#afcdf76cb8210eac6c3708d4e100e45db">header</a>.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (al-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>);

  <span class="comment">/* if there is a Intra/Inter area route to the N</span>
<span class="comment">     do not install external route */</span>
  <span class="keywordflow">if</span> (rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (ospf-&gt;<a class="code" href="structospf.html#a1fd3dcac2e3c565e23fce6884ffb097f">new_table</a>,
                  (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>))
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a>(rn);
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Route[External]: rn-&gt;info NULL&quot;</span>);
      <span class="keywordflow">if</span> (<span class="keyword">new</span>)
    <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (<span class="keyword">new</span>);
      <span class="keywordflow">return</span> 0;
    }
  <span class="comment">/* Find a route to the same dest */</span>
  <span class="comment">/* If there is no route, create new one. */</span>
  <span class="keywordflow">if</span> (rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (ospf-&gt;<a class="code" href="structospf.html#a0b8f6a35ae74cd601d0a775df4d96f13">new_external_route</a>,
                   (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p))
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a>(rn);

  <span class="keywordflow">if</span> (!rn || (or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: Adding a new route %s/%d&quot;</span>,
            inet_ntoa (p.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);

      <a class="code" href="ospf__route_8c.html#a902c992a455d2f5e414d5f28446c0f22">ospf_route_add</a> (ospf-&gt;<a class="code" href="structospf.html#a0b8f6a35ae74cd601d0a775df4d96f13">new_external_route</a>, &amp;p, <span class="keyword">new</span>, asbr_route);

      <span class="keywordflow">if</span> (al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>.s_addr)
    <a class="code" href="ospf__ase_8c.html#a043e3e1035e8574fb053fb967e97870f">ospf_ase_complete_direct_routes</a> (<span class="keyword">new</span>, al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>);
      <span class="keywordflow">return</span> 0;
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* (a) Intra-area and inter-area paths are always preferred</span>
<span class="comment">             over AS external paths.</span>
<span class="comment"></span>
<span class="comment">         (b) Type 1 external paths are always preferred over type 2</span>
<span class="comment">             external paths. When all paths are type 2 external</span>
<span class="comment">         paths, the paths with the smallest advertised type 2</span>
<span class="comment">         metric are always preferred. */</span>
      ret = <a class="code" href="ospf__route_8c.html#a578fe7fdb12e2d1c8d258a1019e49c48">ospf_route_cmp</a> (ospf, <span class="keyword">new</span>, or);
  
  <span class="comment">/*     (c) If the new AS external path is still indistinguishable</span>
<span class="comment">             from the current paths in the N&#39;s routing table entry,</span>
<span class="comment">         and RFC1583Compatibility is set to &quot;disabled&quot;, select</span>
<span class="comment">         the preferred paths based on the intra-AS paths to the</span>
<span class="comment">         ASBR/forwarding addresses, as specified in Section</span>
<span class="comment">         16.4.1.</span>
<span class="comment"></span>
<span class="comment">         (d) If the new AS external path is still indistinguishable</span>
<span class="comment">             from the current paths in the N&#39;s routing table entry,</span>
<span class="comment">         select the preferred path based on a least cost</span>
<span class="comment">         comparison.  Type 1 external paths are compared by</span>
<span class="comment">         looking at the sum of the distance to the forwarding</span>
<span class="comment">         address and the advertised type 1 metric (X+Y).  Type 2</span>
<span class="comment">         external paths advertising equal type 2 metrics are</span>
<span class="comment">         compared by looking at the distance to the forwarding</span>
<span class="comment">         addresses.</span>
<span class="comment">  */</span>
      <span class="comment">/* New route is better */</span>
      <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: New route is better&quot;</span>);
      <a class="code" href="ospf__route_8c.html#a57e1e00a8853861a883983f4827489b2">ospf_route_subst</a> (rn, <span class="keyword">new</span>, asbr_route);
      <span class="keywordflow">if</span> (al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>.s_addr)
        <a class="code" href="ospf__ase_8c.html#a043e3e1035e8574fb053fb967e97870f">ospf_ase_complete_direct_routes</a> (<span class="keyword">new</span>, al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>);
      or = <span class="keyword">new</span>;
      <span class="keyword">new</span> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
      <span class="comment">/* Old route is better */</span>
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ret &gt; 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: Old route is better&quot;</span>);
      <span class="comment">/* do nothing */</span>
    }
      <span class="comment">/* Routes are equal */</span>
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Route[External]: Routes are equal&quot;</span>);
      <a class="code" href="ospf__route_8c.html#a18acfffe212a39ef1493640aa022501a">ospf_route_copy_nexthops</a> (or, asbr_route-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
      <span class="keywordflow">if</span> (al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>.s_addr)
        <a class="code" href="ospf__ase_8c.html#a043e3e1035e8574fb053fb967e97870f">ospf_ase_complete_direct_routes</a> (or, al-&gt;<a class="code" href="structas__external__lsa.html#a51c29f7223123224ae18468efee20ee0">e</a>[0].<a class="code" href="structas__external__lsa.html#a5817fa032c9f6c8f23d975ec1c5dfa20">fwd_addr</a>);
    }
    }
  <span class="comment">/* Make sure setting newly calculated ASBR route.*/</span>
  or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a930fd3803aade7e2a7468eda3ee2cd9a">asbr</a> = asbr_route;
  <span class="keywordflow">if</span> (<span class="keyword">new</span>)
    <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> (<span class="keyword">new</span>);

  lsa-&gt;<a class="code" href="structospf__lsa.html#a3571c90c1cc324c48c893ab7210f145e">route</a> = or;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8e097f55230eec4539a22f5eda781d90"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_calculate_schedule" ref="a8e097f55230eec4539a22f5eda781d90" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ase_calculate_schedule </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00682">682</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  ospf-&gt;<a class="code" href="structospf.html#a2f06ef705d6aff76dc54f1a1ab5802b6">ase_calc</a> = 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4f3500c986bc2bbf4d483721a1b6775a"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_calculate_timer" ref="a4f3500c986bc2bbf4d483721a1b6775a" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_ase_calculate_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00633">633</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;

  ospf = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  ospf-&gt;<a class="code" href="structospf.html#ac589f939b5118b77086d3af51633ed3c">t_ase_calc</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a2f06ef705d6aff76dc54f1a1ab5802b6">ase_calc</a>)
    {
      ospf-&gt;<a class="code" href="structospf.html#a2f06ef705d6aff76dc54f1a1ab5802b6">ase_calc</a> = 0;

      <span class="comment">/* Calculate external route for each AS-external-LSA */</span>
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#ae56a8a7b638bd22caf86ea3d810fdbd9">EXTERNAL_LSDB</a> (ospf), rn, lsa)
    <a class="code" href="ospf__ase_8c.html#aabe2473abaca8a62db05574a61c7a233">ospf_ase_calculate_route</a> (ospf, lsa);

      <span class="comment">/*  This version simple adds to the table all NSSA areas  */</span>
      if (ospf-&gt;anyNSSA)
    for (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;areas, node, area))
      {
        <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a181c69f5e384d952ea4908799967534a">IS_DEBUG_OSPF_NSSA</a>)
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_ase_calculate_timer(): looking at area %s&quot;</span>,
             inet_ntoa (area-&gt;area_id));

        <span class="keywordflow">if</span> (area-&gt;external_routing == <a class="code" href="ospfd_8h.html#a871478d6ecced0907ee1f67c5dbacf99">OSPF_AREA_NSSA</a>)
          <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#aa704d331d2ac4e4034faca5c0f177364">NSSA_LSDB</a> (area), rn, lsa)
        <a class="code" href="ospf__ase_8c.html#aabe2473abaca8a62db05574a61c7a233">ospf_ase_calculate_route</a> (ospf, lsa);
      }
      <span class="comment">/* kevinm: And add the NSSA routes in ospf_top */</span>
      <a class="code" href="ospf__lsdb_8h.html#a3112a41cf80dfabbf2962e8df1b8504b">LSDB_LOOP</a> (<a class="code" href="ospf__lsdb_8h.html#aa704d331d2ac4e4034faca5c0f177364">NSSA_LSDB</a> (ospf),rn,lsa)
            <a class="code" href="ospf__ase_8c.html#aabe2473abaca8a62db05574a61c7a233">ospf_ase_calculate_route</a>(ospf,lsa);

      <span class="comment">/* Compare old and new external routing table and install the</span>
<span class="comment">     difference info zebra/kernel */</span>
      <a class="code" href="ospf__ase_8c.html#a79cc08a1acde4013be4c6e6a29151bab">ospf_ase_compare_tables</a> (ospf-&gt;new_external_route,
                   ospf-&gt;old_external_route);

      <span class="comment">/* Delete old external routing table */</span>
      <a class="code" href="ospf__route_8c.html#a1af9a7462973d18c31f1f610ff70e338">ospf_route_table_free</a> (ospf-&gt;old_external_route);
      ospf-&gt;old_external_route = ospf-&gt;new_external_route;
      ospf-&gt;new_external_route = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
    }
  return 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1a8e03352bf6bfefef4dbc963822a8e6"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_calculate_timer_add" ref="a1a8e03352bf6bfefef4dbc963822a8e6" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ase_calculate_timer_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00691">691</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (! ospf-&gt;<a class="code" href="structospf.html#ac589f939b5118b77086d3af51633ed3c">t_ase_calc</a>)
    ospf-&gt;<a class="code" href="structospf.html#ac589f939b5118b77086d3af51633ed3c">t_ase_calc</a> = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__ase_8c.html#a4f3500c986bc2bbf4d483721a1b6775a">ospf_ase_calculate_timer</a>,
                     ospf, <a class="code" href="ospf__ase_8c.html#adabf761265a505e8e16c1f021f32c10c">OSPF_ASE_CALC_INTERVAL</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a79cc08a1acde4013be4c6e6a29151bab"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_compare_tables" ref="a79cc08a1acde4013be4c6e6a29151bab" args="(struct route_table *new_external_route, struct route_table *old_external_route)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_ase_compare_tables </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>new_external_route</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>old_external_route</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00606">606</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn, *new_rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
  
  <span class="comment">/* Remove deleted routes */</span>
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (old_external_route); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>))
      {
    <span class="keywordflow">if</span> (! (new_rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (new_external_route, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>)))
      <a class="code" href="ospf__zebra_8c.html#a083ae682548f0d7eb0761a2469c8d3f3">ospf_zebra_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or);
    <span class="keywordflow">else</span>
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (new_rn);
      }
  
    
  <span class="comment">/* Install new routes */</span>
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (new_external_route); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <span class="keywordflow">if</span> (! <a class="code" href="ospf__ase_8c.html#aeb1061c857b7588c19bb788970a39834">ospf_ase_route_match_same</a> (old_external_route, &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or))
    <a class="code" href="ospf__zebra_8c.html#a8045c2db458b9ad1e679863cf369e5be">ospf_zebra_add</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, or);
                       
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a043e3e1035e8574fb053fb967e97870f"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_complete_direct_routes" ref="a043e3e1035e8574fb053fb967e97870f" args="(struct ospf_route *ro, struct in_addr nexthop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_ase_complete_direct_routes </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname"><em>ro</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>nexthop</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00134">134</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *op;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ro-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, node, op))
    <span class="keywordflow">if</span> (op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>.s_addr == 0)
      op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>.s_addr = <a class="code" href="structnexthop.html">nexthop</a>.s_addr;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a42bf210bf76365af43a100923da36329"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_external_lsas_finish" ref="a42bf210bf76365af43a100923da36329" args="(struct route_table *rt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ase_external_lsas_finish </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>rt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00750">750</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *lst;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  
  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((lst = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (lst, node, nnode, lsa))
          <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;lsa); <span class="comment">/* external_lsas lst */</span>
    <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (lst);
      }
    
  <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (rt);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae90a71096e4e9e4933ca2fcfcfc2fa9a"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_forward_address_check" ref="ae90a71096e4e9e4933ca2fcfcfc2fa9a" args="(struct ospf *ospf, struct in_addr fwd_addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_ase_forward_address_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>fwd_addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00146">146</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ifn;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, ifn, oi))
    <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>))
      <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> != <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>)
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, &amp;fwd_addr))
          <span class="keywordflow">return</span> 0;
  
  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0c7dee8c77caeb98ddcec77a973cf4c5"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_incremental_update" ref="a0c7dee8c77caeb98ddcec77a973cf4c5" args="(struct ospf *ospf, struct ospf_lsa *lsa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ase_incremental_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00769">769</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *lsas;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn, *rn2;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *tmp_old;
  <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *<a class="code" href="spgrid_8c.html#a7c4593313d1839d57c28594a69357bab">al</a>;

  al = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (al-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>);
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* if new_table is NULL, there was no spf calculation, thus</span>
<span class="comment">     incremental update is unneeded */</span>
  <span class="keywordflow">if</span> (!ospf-&gt;<a class="code" href="structospf.html#a1fd3dcac2e3c565e23fce6884ffb097f">new_table</a>)
    <span class="keywordflow">return</span>;
  
  <span class="comment">/* If there is already an intra-area or inter-area route</span>
<span class="comment">     to the destination, no recalculation is necessary</span>
<span class="comment">     (internal routes take precedence). */</span>
  
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (ospf-&gt;<a class="code" href="structospf.html#a1fd3dcac2e3c565e23fce6884ffb097f">new_table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (rn)
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    <span class="keywordflow">return</span>;
    }

  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (ospf-&gt;<a class="code" href="structospf.html#abd15a2439cc8b1e17544f8eec597c070">external_lsas</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
  lsas = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (lsas, node, lsa))
    <a class="code" href="ospf__ase_8c.html#aabe2473abaca8a62db05574a61c7a233">ospf_ase_calculate_route</a> (ospf, lsa);

  <span class="comment">/* prepare temporary old routing table for compare */</span>
  tmp_old = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (ospf-&gt;<a class="code" href="structospf.html#aa4376d3468d1d9fd5a6ed373e149338c">old_external_route</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (rn &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    {
      rn2 = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (tmp_old, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
      rn2-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
    }

  <span class="comment">/* install changes to zebra */</span>
  <a class="code" href="ospf__ase_8c.html#a79cc08a1acde4013be4c6e6a29151bab">ospf_ase_compare_tables</a> (ospf-&gt;<a class="code" href="structospf.html#a0b8f6a35ae74cd601d0a775df4d96f13">new_external_route</a>, tmp_old);

  <span class="comment">/* update ospf-&gt;old_external_route table */</span>
  <span class="keywordflow">if</span> (rn &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    <a class="code" href="ospf__route_8c.html#a2343f1c889ff5837642b6eb2a3d213f7">ospf_route_free</a> ((<span class="keyword">struct</span> <a class="code" href="structospf__route.html">ospf_route</a> *) rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);

  rn2 = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (ospf-&gt;<a class="code" href="structospf.html#a0b8f6a35ae74cd601d0a775df4d96f13">new_external_route</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="comment">/* if new route exists, install it to ospf-&gt;old_external_route */</span>
  <span class="keywordflow">if</span> (rn2 &amp;&amp; rn2-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    {
      <span class="keywordflow">if</span> (!rn)
    rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (ospf-&gt;<a class="code" href="structospf.html#aa4376d3468d1d9fd5a6ed373e149338c">old_external_route</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
      rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rn2-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* remove route node from ospf-&gt;old_external_route */</span>
      <span class="keywordflow">if</span> (rn)
    {
      rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
    }
    }

  <span class="keywordflow">if</span> (rn2)
    {
      <span class="comment">/* rn2-&gt;info is stored in route node of ospf-&gt;old_external_route */</span>
      rn2-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn2);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn2);
    }

  <a class="code" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (tmp_old);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8e89d2d1ed7ad307108222fad996d322"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_register_external_lsa" ref="a8e89d2d1ed7ad307108222fad996d322" args="(struct ospf_lsa *lsa, struct ospf *top)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ase_register_external_lsa </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>top</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00702">702</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *lst;
  <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *<a class="code" href="spgrid_8c.html#a7c4593313d1839d57c28594a69357bab">al</a>;

  al = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (al-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>);
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (top-&gt;<a class="code" href="structospf.html#abd15a2439cc8b1e17544f8eec597c070">external_lsas</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> ((lst = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = lst = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a>();

  <span class="comment">/* We assume that if LSA is deleted from DB</span>
<span class="comment">     is is also deleted from this RT */</span>

  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (lst, <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa)); <span class="comment">/* external_lsas lst */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="aeb1061c857b7588c19bb788970a39834"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_route_match_same" ref="aeb1061c857b7588c19bb788970a39834" args="(struct route_table *rt, struct prefix *prefix, struct ospf_route *newor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_ase_route_match_same </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>rt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>prefix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname"><em>newor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00548">548</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *op;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *newop;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n1;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *n2;

  <span class="keywordflow">if</span> (! rt || ! prefix)
    <span class="keywordflow">return</span> 0;

   rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (rt, prefix);
   <span class="keywordflow">if</span> (! rn)
     <span class="keywordflow">return</span> 0;
 
   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

   or = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
   <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> != newor-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>)
     <span class="keywordflow">return</span> 0;

   <span class="keywordflow">switch</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a>)
     {
     <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#a15dab014460164847059902ea4535834">OSPF_PATH_TYPE1_EXTERNAL</a>:
       <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> != newor-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>)
     <span class="keywordflow">return</span> 0;
       <span class="keywordflow">break</span>;
     <span class="keywordflow">case</span> <a class="code" href="ospf__route_8h.html#aa9752c4570157da8a3258dc4cdf23ce5">OSPF_PATH_TYPE2_EXTERNAL</a>:
       <span class="keywordflow">if</span> ((or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> != newor-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>) ||
       (or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a93319cd5451e479e19c4e1b3e7d33b54">type2_cost</a> != newor-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a93319cd5451e479e19c4e1b3e7d33b54">type2_cost</a>))
     <span class="keywordflow">return</span> 0;
       <span class="keywordflow">break</span>;
     <span class="keywordflow">default</span>:
       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (0);
       <span class="keywordflow">return</span> 0;
     }
   
   <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a> != newor-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>)
     <span class="keywordflow">return</span> 0;
       
   <span class="comment">/* Check each path. */</span>
   <span class="keywordflow">for</span> (n1 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>), n2 = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (newor-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>);
    n1 &amp;&amp; n2; n1 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a> (n1), n2 = <a class="code" href="linklist_8h.html#ad3f7fe9d8d096c4afc1bdd5b1f46c5bb">listnextnode</a> (n2))
     { 
       op = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (n1);
       newop = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (n2);
       
       <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;op-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>, &amp;newop-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>))
     <span class="keywordflow">return</span> 0;
       <span class="keywordflow">if</span> (op-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a> != newop-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>)
     <span class="keywordflow">return</span> 0;
     }
   <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a163acf395d21ed38123a06213d1050eb"></a><!-- doxytag: member="ospf_ase.c::ospf_ase_unregister_external_lsa" ref="a163acf395d21ed38123a06213d1050eb" args="(struct ospf_lsa *lsa, struct ospf *top)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_ase_unregister_external_lsa </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__lsa.html">ospf_lsa</a> *&#160;</td>
          <td class="paramname"><em>lsa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>top</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00726">726</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *lst;
  <span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *<a class="code" href="spgrid_8c.html#a7c4593313d1839d57c28594a69357bab">al</a>;

  al = (<span class="keyword">struct </span><a class="code" href="structas__external__lsa.html">as_external_lsa</a> *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (al-&gt;<a class="code" href="structas__external__lsa.html#aa860fac77968c497496d16df6d325651">mask</a>);
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (top-&gt;<a class="code" href="structospf.html#abd15a2439cc8b1e17544f8eec597c070">external_lsas</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  lst = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

  <span class="comment">/* XXX lst can be NULL */</span>
  <span class="keywordflow">if</span> (lst) {
    <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (lst, lsa);
    <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;lsa); <span class="comment">/* external_lsas list */</span>
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5e8bc396fd6aac3eba792e511f2ae56b"></a><!-- doxytag: member="ospf_ase.c::ospf_find_asbr_route" ref="a5e8bc396fd6aac3eba792e511f2ae56b" args="(struct ospf *ospf, struct route_table *rtrs, struct prefix_ipv4 *asbr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__route.html">ospf_route</a>* ospf_find_asbr_route </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>rtrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>asbr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00050">50</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or, *best = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *chosen;

  <span class="comment">/* Sanity check. */</span>
  <span class="keywordflow">if</span> (rtrs == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (rtrs, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) asbr);
  <span class="keywordflow">if</span> (! rn)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  chosen = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();

  <span class="comment">/* First try to find intra-area non-bb paths. */</span>
  <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a7a46ad36d9ae6d67014a0ae4f1e8c95a">OSPF_RFC1583_COMPATIBLE</a>))
    <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> ((<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *) rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>, node, or))
      <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> &lt; <a class="code" href="ospfd_8h.html#ac490c9aeaac791b5e779097813b5298e">OSPF_LS_INFINITY</a>)
        <span class="keywordflow">if</span> (!<a class="code" href="ospfd_8h.html#a3c9df8914219b5ad5aa165ecc3428ae0">OSPF_IS_AREA_ID_BACKBONE</a> (or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>) &amp;&amp;
            or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>)
          <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (chosen, or);

  <span class="comment">/* If none is found -- look through all. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (chosen) == 0)
    {
      <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (chosen);
      chosen = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
    }

  <span class="comment">/* Now find the route with least cost. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (chosen, node, or))
    <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> &lt; <a class="code" href="ospfd_8h.html#ac490c9aeaac791b5e779097813b5298e">OSPF_LS_INFINITY</a>)
      {
        <span class="keywordflow">if</span> (best == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
          best = or;
        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (best-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> &gt; or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>)
          best = or;
        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (best-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> == or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> &amp;&amp;
                 <a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">IPV4_ADDR_CMP</a> (&amp;best-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>,
                                &amp;or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>) &lt; 0)
          best = or;
      }

  <span class="keywordflow">if</span> (chosen != rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (chosen);

  <span class="keywordflow">return</span> best;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab2cf385d9e91bd4283b6ae5db56e639e"></a><!-- doxytag: member="ospf_ase.c::ospf_find_asbr_route_through_area" ref="ab2cf385d9e91bd4283b6ae5db56e639e" args="(struct route_table *rtrs, struct prefix_ipv4 *asbr, struct ospf_area *area)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structospf__route.html">ospf_route</a>* ospf_find_asbr_route_through_area </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>rtrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>asbr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__area.html">ospf_area</a> *&#160;</td>
          <td class="paramname"><em>area</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__ase_8c_source.html#l00106">106</a> of file <a class="el" href="ospf__ase_8c_source.html">ospf_ase.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;

  <span class="comment">/* Sanity check. */</span>
  <span class="keywordflow">if</span> (rtrs == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (rtrs, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) asbr);
 
  <span class="keywordflow">if</span> (rn)
    {
      <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
      <span class="keyword">struct </span><a class="code" href="structospf__route.html">ospf_route</a> *or;

      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> ((<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *) rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>, node, or))
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a8b1951ef3f626e1c61e30309c36084a3">std</a>.<a class="code" href="structroute__standard.html#adb68650a53fa9189d6af5d484c01f690">area_id</a>, &amp;area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>))
          <span class="keywordflow">return</span> or;
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__ase_8c.html">ospf_ase.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:28 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
