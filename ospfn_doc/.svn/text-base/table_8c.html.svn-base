<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/table.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('table_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">lib/table.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for table.c:</div>
<div class="dyncontent">
<div class="center"><img src="table_8c__incl.png" border="0" usemap="#lib_2table_8c" alt=""/></div>
<map name="lib_2table_8c" id="lib_2table_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1345,80,1412,107"/><area shape="rect" id="node61" href="prefix_8h.html" title="prefix.h" alt="" coords="2786,80,2853,107"/><area shape="rect" id="node63" href="sockunion_8h.html" title="sockunion.h" alt="" coords="2845,155,2939,181"/><area shape="rect" id="node65" href="table_8h.html" title="table.h" alt="" coords="2929,80,2993,107"/><area shape="rect" id="node67" href="memory_8h.html" title="memory.h" alt="" coords="3017,80,3100,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="2669,155,2747,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="2771,155,2820,181"/><area shape="rect" id="node69" href="memtypes_8h.html" title="lib/memtypes.h" alt="" coords="3001,155,3116,181"/></map>
</div>
</div>
<p><a href="table_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a0933ae9552aa67882a631fb2a1b05e47">route_node_delete</a> (struct <a class="el" href="structroute__node.html">route_node</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a310f7ef3d4cf29849e77c1d5f7c8923f">route_table_free</a> (struct <a class="el" href="structroute__table.html">route_table</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#adc5ff276f1698f5bef7bb74289e3b26e">route_table_finish</a> (struct <a class="el" href="structroute__table.html">route_table</a> *rt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a5bb704e4b7e30da20bfbf6b145de825f">route_node_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a0e602434b44e97850cc140798589367e">route_node_set</a> (struct <a class="el" href="structroute__table.html">route_table</a> *table, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="structprefix.html">prefix</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#afdf2e14f7d6d18fa5f40c27d5cbcbea0">route_node_free</a> (struct <a class="el" href="structroute__node.html">route_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#aef5fb0e60492d045995adc87a88d45b1">route_common</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structprefix.html">prefix</a> *new)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a0bc2912a0ad74345eba15f46f7a94329">set_link</a> (struct <a class="el" href="structroute__node.html">route_node</a> *node, struct <a class="el" href="structroute__node.html">route_node</a> *new)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (struct <a class="el" href="structroute__node.html">route_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (struct <a class="el" href="structroute__node.html">route_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a948f4335026cd8417c7424e85156ae55">route_node_match</a> (const struct <a class="el" href="structroute__table.html">route_table</a> *table, const struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a9c0fd90aeeed01fb5b5301c98f642a95">route_node_match_ipv4</a> (const struct <a class="el" href="structroute__table.html">route_table</a> *table, const struct in_addr *addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (struct <a class="el" href="structroute__table.html">route_table</a> *table, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (struct <a class="el" href="structroute__table.html">route_table</a> *table, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (struct <a class="el" href="structroute__table.html">route_table</a> *table)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (struct <a class="el" href="structroute__node.html">route_node</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a6e721d0f3408d58f0276b58d16412979">route_next_until</a> (struct <a class="el" href="structroute__node.html">route_node</a> *node, struct <a class="el" href="structroute__node.html">route_node</a> *limit)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const u_char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="table_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">maskbit</a> []</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="aef5fb0e60492d045995adc87a88d45b1"></a><!-- doxytag: member="table.c::route_common" ref="aef5fb0e60492d045995adc87a88d45b1" args="(struct prefix *n, struct prefix *p, struct prefix *new)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void route_common </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>new</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00135">135</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  u_char diff;
  u_char mask;

  u_char *<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a> = (u_char *)&amp;n-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>;
  u_char *pp = (u_char *)&amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>;
  u_char *newp = (u_char *)&amp;new-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>;

  for (i = 0; i &lt; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> / 8; i++)
    {
      <span class="keywordflow">if</span> (np[i] == pp[i])
    newp[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] = np[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>];
      <span class="keywordflow">else</span>
    <span class="keywordflow">break</span>;
    }

  <span class="keyword">new</span>-&gt;prefixlen = i * 8;

  <span class="keywordflow">if</span> (new-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> != p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
    {
      diff = np[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] ^ pp[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>];
      mask = 0x80;
      <span class="keywordflow">while</span> (new-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt; p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &amp;&amp; !(mask &amp; diff))
    {
      mask &gt;&gt;= 1;
      <span class="keyword">new</span>-&gt;prefixlen++;
    }
      newp[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] = np[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] &amp; <a class="code" href="table_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">maskbit</a>[<span class="keyword">new</span>-&gt;prefixlen % 8];
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5f018f727fe43d17553baabbf7fa6498"></a><!-- doxytag: member="table.c::route_lock_node" ref="a5f018f727fe43d17553baabbf7fa6498" args="(struct route_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__node.html">route_node</a>* route_lock_node </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00179">179</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  node-&gt;<a class="code" href="structroute__node.html#afaa6884fa913679b7079c24831648a9f">lock</a>++;
  <span class="keywordflow">return</span> node;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad2addc694ecf6cd0cce57cb3a7d96902"></a><!-- doxytag: member="table.c::route_next" ref="ad2addc694ecf6cd0cce57cb3a7d96902" args="(struct route_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__node.html">route_node</a>* route_next </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00383">383</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *next;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *start;

  <span class="comment">/* Node may be deleted from route_unlock_node so we have to preserve</span>
<span class="comment">     next node&#39;s pointer. */</span>

  <span class="keywordflow">if</span> (node-&gt;l_left)
    {
      next = node-&gt;l_left;
      <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (next);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (node);
      <span class="keywordflow">return</span> next;
    }
  <span class="keywordflow">if</span> (node-&gt;l_right)
    {
      next = node-&gt;l_right;
      <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (next);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (node);
      <span class="keywordflow">return</span> next;
    }

  start = node;
  <span class="keywordflow">while</span> (node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>)
    {
      <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>-&gt;l_left == node &amp;&amp; node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>-&gt;l_right)
    {
      next = node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>-&gt;l_right;
      <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (next);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (start);
      <span class="keywordflow">return</span> next;
    }
      node = node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>;
    }
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (start);
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6e721d0f3408d58f0276b58d16412979"></a><!-- doxytag: member="table.c::route_next_until" ref="a6e721d0f3408d58f0276b58d16412979" args="(struct route_node *node, struct route_node *limit)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__node.html">route_node</a>* route_next_until </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>limit</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00424">424</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *next;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *start;

  <span class="comment">/* Node may be deleted from route_unlock_node so we have to preserve</span>
<span class="comment">     next node&#39;s pointer. */</span>

  <span class="keywordflow">if</span> (node-&gt;l_left)
    {
      next = node-&gt;l_left;
      <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (next);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (node);
      <span class="keywordflow">return</span> next;
    }
  <span class="keywordflow">if</span> (node-&gt;l_right)
    {
      next = node-&gt;l_right;
      <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (next);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (node);
      <span class="keywordflow">return</span> next;
    }

  start = node;
  <span class="keywordflow">while</span> (node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a> &amp;&amp; node != limit)
    {
      <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>-&gt;l_left == node &amp;&amp; node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>-&gt;l_right)
    {
      next = node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>-&gt;l_right;
      <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (next);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (start);
      <span class="keywordflow">return</span> next;
    }
      node = node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>;
    }
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (start);
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0933ae9552aa67882a631fb2a1b05e47"></a><!-- doxytag: member="table.c::route_node_delete" ref="a0933ae9552aa67882a631fb2a1b05e47" args="(struct route_node *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void route_node_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00329">329</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *child;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *<a class="code" href="dict_8c.html#a9d4418feaea5490d8afb9c25c34fba4d">parent</a>;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (node-&gt;<a class="code" href="structroute__node.html#afaa6884fa913679b7079c24831648a9f">lock</a> == 0);
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (node-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="keywordflow">if</span> (node-&gt;l_left &amp;&amp; node-&gt;l_right)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (node-&gt;l_left)
    child = node-&gt;l_left;
  <span class="keywordflow">else</span>
    child = node-&gt;l_right;

  parent = node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>;

  <span class="keywordflow">if</span> (child)
    child-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a> = <a class="code" href="dict_8c.html#a9d4418feaea5490d8afb9c25c34fba4d">parent</a>;

  <span class="keywordflow">if</span> (parent)
    {
      <span class="keywordflow">if</span> (parent-&gt;l_left == node)
    parent-&gt;l_left = child;
      <span class="keywordflow">else</span>
    parent-&gt;l_right = child;
    }
  <span class="keywordflow">else</span>
    node-&gt;<a class="code" href="structroute__node.html#a60e9a40bdc38a0641581a0b400373f57">table</a>-&gt;<a class="code" href="structroute__table.html#a4d58458d9c18192cecaea1b98775f529">top</a> = child;

  <a class="code" href="table_8c.html#afdf2e14f7d6d18fa5f40c27d5cbcbea0">route_node_free</a> (node);

  <span class="comment">/* If parent node is stub then delete it also. */</span>
  <span class="keywordflow">if</span> (parent &amp;&amp; parent-&gt;<a class="code" href="structroute__node.html#afaa6884fa913679b7079c24831648a9f">lock</a> == 0)
    <a class="code" href="table_8c.html#a0933ae9552aa67882a631fb2a1b05e47">route_node_delete</a> (parent);
}
</pre></div>
</div>
</div>
<a class="anchor" id="afdf2e14f7d6d18fa5f40c27d5cbcbea0"></a><!-- doxytag: member="table.c::route_node_free" ref="afdf2e14f7d6d18fa5f40c27d5cbcbea0" args="(struct route_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void route_node_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00073">73</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba47bc1a6a73eab253cc6266eb240ec87d">MTYPE_ROUTE_NODE</a>, node);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac91fdff1a0b8dc3d60ebaf152caa0f80"></a><!-- doxytag: member="table.c::route_node_get" ref="ac91fdff1a0b8dc3d60ebaf152caa0f80" args="(struct route_table *table, struct prefix *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__node.html">route_node</a>* route_node_get </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00274">274</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *<span class="keyword">new</span>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *match;

  match = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  node = table-&gt;<a class="code" href="structroute__table.html#a4d58458d9c18192cecaea1b98775f529">top</a>;
  <span class="keywordflow">while</span> (node &amp;&amp; node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt;= p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &amp;&amp; 
     <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (&amp;node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, p))
    {
      <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
    {
      <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (node);
      <span class="keywordflow">return</span> node;
    }
      match = node;
      node = node-&gt;<a class="code" href="structroute__node.html#a6416caa9a71f122b759c0a8d79dfb72e">link</a>[<a class="code" href="prefix_8h.html#a448f1ebdeae472533f8faafd675e8f0b">prefix_bit</a>(&amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)];
    }

  <span class="keywordflow">if</span> (node == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keyword">new</span> = <a class="code" href="table_8c.html#a0e602434b44e97850cc140798589367e">route_node_set</a> (table, p);
      <span class="keywordflow">if</span> (match)
    <a class="code" href="table_8c.html#a0bc2912a0ad74345eba15f46f7a94329">set_link</a> (match, <span class="keyword">new</span>);
      <span class="keywordflow">else</span>
    table-&gt;<a class="code" href="structroute__table.html#a4d58458d9c18192cecaea1b98775f529">top</a> = <span class="keyword">new</span>;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keyword">new</span> = <a class="code" href="table_8c.html#a5bb704e4b7e30da20bfbf6b145de825f">route_node_new</a> ();
      <a class="code" href="table_8c.html#aef5fb0e60492d045995adc87a88d45b1">route_common</a> (&amp;node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, p, &amp;new-&gt;p);
      <span class="keyword">new</span>-&gt;p.family = p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>;
      <span class="keyword">new</span>-&gt;table = <a class="code" href="structroute__node.html#a60e9a40bdc38a0641581a0b400373f57">table</a>;
      <a class="code" href="table_8c.html#a0bc2912a0ad74345eba15f46f7a94329">set_link</a> (<span class="keyword">new</span>, node);

      <span class="keywordflow">if</span> (match)
    <a class="code" href="table_8c.html#a0bc2912a0ad74345eba15f46f7a94329">set_link</a> (match, <span class="keyword">new</span>);
      <span class="keywordflow">else</span>
    table-&gt;<a class="code" href="structroute__table.html#a4d58458d9c18192cecaea1b98775f529">top</a> = <span class="keyword">new</span>;

      <span class="keywordflow">if</span> (new-&gt;p.prefixlen != p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
    {
      match = <span class="keyword">new</span>;
      <span class="keyword">new</span> = <a class="code" href="table_8c.html#a0e602434b44e97850cc140798589367e">route_node_set</a> (table, p);
      <a class="code" href="table_8c.html#a0bc2912a0ad74345eba15f46f7a94329">set_link</a> (match, <span class="keyword">new</span>);
    }
    }
  <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (<span class="keyword">new</span>);
  
  <span class="keywordflow">return</span> <span class="keyword">new</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab99d86b40440c8f18d4f2b31b5b8f1c7"></a><!-- doxytag: member="table.c::route_node_lookup" ref="ab99d86b40440c8f18d4f2b31b5b8f1c7" args="(struct route_table *table, struct prefix *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__node.html">route_node</a>* route_node_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00254">254</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;

  node = table-&gt;<a class="code" href="structroute__table.html#a4d58458d9c18192cecaea1b98775f529">top</a>;

  <span class="keywordflow">while</span> (node &amp;&amp; node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt;= p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &amp;&amp; 
     <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (&amp;node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, p))
    {
      <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> == p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &amp;&amp; node-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    <span class="keywordflow">return</span> <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (node);

      node = node-&gt;<a class="code" href="structroute__node.html#a6416caa9a71f122b759c0a8d79dfb72e">link</a>[<a class="code" href="prefix_8h.html#a448f1ebdeae472533f8faafd675e8f0b">prefix_bit</a>(&amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)];
    }

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a948f4335026cd8417c7424e85156ae55"></a><!-- doxytag: member="table.c::route_node_match" ref="a948f4335026cd8417c7424e85156ae55" args="(const struct route_table *table, const struct prefix *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__node.html">route_node</a>* route_node_match </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00197">197</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *matched;

  matched = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  node = table-&gt;<a class="code" href="structroute__table.html#a4d58458d9c18192cecaea1b98775f529">top</a>;

  <span class="comment">/* Walk down tree.  If there is matched route then store it to</span>
<span class="comment">     matched. */</span>
  <span class="keywordflow">while</span> (node &amp;&amp; node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt;= p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &amp;&amp; 
     <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (&amp;node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, p))
    {
      <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    matched = node;
      node = node-&gt;<a class="code" href="structroute__node.html#a6416caa9a71f122b759c0a8d79dfb72e">link</a>[<a class="code" href="prefix_8h.html#a448f1ebdeae472533f8faafd675e8f0b">prefix_bit</a>(&amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)];
    }

  <span class="comment">/* If matched route found, return it. */</span>
  <span class="keywordflow">if</span> (matched)
    <span class="keywordflow">return</span> <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (matched);

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9c0fd90aeeed01fb5b5301c98f642a95"></a><!-- doxytag: member="table.c::route_node_match_ipv4" ref="a9c0fd90aeeed01fb5b5301c98f642a95" args="(const struct route_table *table, const struct in_addr *addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__node.html">route_node</a>* route_node_match_ipv4 </td>
          <td>(</td>
          <td class="paramtype">const struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct in_addr *&#160;</td>
          <td class="paramname"><em>addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00223">223</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = *addr;

  <span class="keywordflow">return</span> <a class="code" href="table_8c.html#a948f4335026cd8417c7424e85156ae55">route_node_match</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5bb704e4b7e30da20bfbf6b145de825f"></a><!-- doxytag: member="table.c::route_node_new" ref="a5bb704e4b7e30da20bfbf6b145de825f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structroute__node.html">route_node</a>* route_node_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00050">50</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;
  node = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba47bc1a6a73eab253cc6266eb240ec87d">MTYPE_ROUTE_NODE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structroute__node.html">route_node</a>));
  <span class="keywordflow">return</span> node;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0e602434b44e97850cc140798589367e"></a><!-- doxytag: member="table.c::route_node_set" ref="a0e602434b44e97850cc140798589367e" args="(struct route_table *table, struct prefix *prefix)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structroute__node.html">route_node</a>* route_node_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>prefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00059">59</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;
  
  node = <a class="code" href="table_8c.html#a5bb704e4b7e30da20bfbf6b145de825f">route_node_new</a> ();

  <a class="code" href="prefix_8c.html#abaad44d47b408d45484fdd729ab501b2">prefix_copy</a> (&amp;node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, prefix);
  node-&gt;<a class="code" href="structroute__node.html#a60e9a40bdc38a0641581a0b400373f57">table</a> = <a class="code" href="structroute__node.html#a60e9a40bdc38a0641581a0b400373f57">table</a>;

  <span class="keywordflow">return</span> node;
}
</pre></div>
</div>
</div>
<a class="anchor" id="adc5ff276f1698f5bef7bb74289e3b26e"></a><!-- doxytag: member="table.c::route_table_finish" ref="adc5ff276f1698f5bef7bb74289e3b26e" args="(struct route_table *rt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void route_table_finish </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>rt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00043">43</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="table_8c.html#a310f7ef3d4cf29849e77c1d5f7c8923f">route_table_free</a> (rt);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a310f7ef3d4cf29849e77c1d5f7c8923f"></a><!-- doxytag: member="table.c::route_table_free" ref="a310f7ef3d4cf29849e77c1d5f7c8923f" args="(struct route_table *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void route_table_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>rt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00080">80</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *tmp_node;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;
 
  <span class="keywordflow">if</span> (rt == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  node = rt-&gt;<a class="code" href="structroute__table.html#a4d58458d9c18192cecaea1b98775f529">top</a>;

  <span class="keywordflow">while</span> (node)
    {
      <span class="keywordflow">if</span> (node-&gt;l_left)
    {
      node = node-&gt;l_left;
      <span class="keywordflow">continue</span>;
    }

      <span class="keywordflow">if</span> (node-&gt;l_right)
    {
      node = node-&gt;l_right;
      <span class="keywordflow">continue</span>;
    }

      tmp_node = node;
      node = node-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>;

      <span class="keywordflow">if</span> (node != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <span class="keywordflow">if</span> (node-&gt;l_left == tmp_node)
        node-&gt;l_left = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <span class="keywordflow">else</span>
        node-&gt;l_right = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <a class="code" href="table_8c.html#afdf2e14f7d6d18fa5f40c27d5cbcbea0">route_node_free</a> (tmp_node);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="table_8c.html#afdf2e14f7d6d18fa5f40c27d5cbcbea0">route_node_free</a> (tmp_node);
      <span class="keywordflow">break</span>;
    }
    }
 
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, rt);
  <span class="keywordflow">return</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9b1d6d715d752d224b322da32d425046"></a><!-- doxytag: member="table.c::route_table_init" ref="a9b1d6d715d752d224b322da32d425046" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__table.html">route_table</a>* route_table_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00034">34</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *rt;

  rt = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a>));
  <span class="keywordflow">return</span> rt;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aee1d06c531794df326d946bdac647fb2"></a><!-- doxytag: member="table.c::route_top" ref="aee1d06c531794df326d946bdac647fb2" args="(struct route_table *table)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__node.html">route_node</a>* route_top </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00370">370</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* If there is no node in the routing table return NULL. */</span>
  <span class="keywordflow">if</span> (table-&gt;<a class="code" href="structroute__table.html#a4d58458d9c18192cecaea1b98775f529">top</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Lock the top node and return it. */</span>
  <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (table-&gt;<a class="code" href="structroute__table.html#a4d58458d9c18192cecaea1b98775f529">top</a>);
  <span class="keywordflow">return</span> table-&gt;<a class="code" href="structroute__table.html#a4d58458d9c18192cecaea1b98775f529">top</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a849965644708e01ef49c203a2e00afd4"></a><!-- doxytag: member="table.c::route_unlock_node" ref="a849965644708e01ef49c203a2e00afd4" args="(struct route_node *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void route_unlock_node </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00187">187</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  node-&gt;<a class="code" href="structroute__node.html#afaa6884fa913679b7079c24831648a9f">lock</a>--;

  <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structroute__node.html#afaa6884fa913679b7079c24831648a9f">lock</a> == 0)
    <a class="code" href="table_8c.html#a0933ae9552aa67882a631fb2a1b05e47">route_node_delete</a> (node);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0bc2912a0ad74345eba15f46f7a94329"></a><!-- doxytag: member="table.c::set_link" ref="a0bc2912a0ad74345eba15f46f7a94329" args="(struct route_node *node, struct route_node *new)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void set_link </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structroute__node.html">route_node</a> *&#160;</td>
          <td class="paramname"><em>new</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="table_8c_source.html#l00169">169</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bit = <a class="code" href="prefix_8h.html#a448f1ebdeae472533f8faafd675e8f0b">prefix_bit</a> (&amp;new-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, node-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);

  node-&gt;<a class="code" href="structroute__node.html#a6416caa9a71f122b759c0a8d79dfb72e">link</a>[bit] = <span class="keyword">new</span>;
  <span class="keyword">new</span>-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a> = node;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a675cc05c7391c1cd5e88ed25175ad5e1"></a><!-- doxytag: member="table.c::maskbit" ref="a675cc05c7391c1cd5e88ed25175ad5e1" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const u_char <a class="el" href="table_8c.html#a675cc05c7391c1cd5e88ed25175ad5e1">maskbit</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff
}
</pre></div>
<p>Definition at line <a class="el" href="table_8c_source.html#l00128">128</a> of file <a class="el" href="table_8c_source.html">table.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="table_8c.html">table.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:24 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
