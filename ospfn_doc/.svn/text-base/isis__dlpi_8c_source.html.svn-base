<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: isisd/isis_dlpi.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('isis__dlpi_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">isisd/isis_dlpi.c</div>  </div>
</div>
<div class="contents">
<a href="isis__dlpi_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * IS-IS Rout(e)ing protocol - isis_dlpi.c</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2001,2002    Sampo Saaristo</span>
<a name="l00005"></a>00005 <span class="comment"> *                            Tampere University of Technology      </span>
<a name="l00006"></a>00006 <span class="comment"> *                            Institute of Communications Engineering</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> * This program is free software; you can redistribute it and/or modify it </span>
<a name="l00009"></a>00009 <span class="comment"> * under the terms of the GNU General Public Licenseas published by the Free </span>
<a name="l00010"></a>00010 <span class="comment"> * Software Foundation; either version 2 of the License, or (at your option) </span>
<a name="l00011"></a>00011 <span class="comment"> * any later version.</span>
<a name="l00012"></a>00012 <span class="comment"> *</span>
<a name="l00013"></a>00013 <span class="comment"> * This program is distributed in the hope that it will be useful,but WITHOUT </span>
<a name="l00014"></a>00014 <span class="comment"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or </span>
<a name="l00015"></a>00015 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for </span>
<a name="l00016"></a>00016 <span class="comment"> * more details.</span>
<a name="l00017"></a>00017 <span class="comment"></span>
<a name="l00018"></a>00018 <span class="comment"> * You should have received a copy of the GNU General Public License along </span>
<a name="l00019"></a>00019 <span class="comment"> * with this program; if not, write to the Free Software Foundation, Inc., </span>
<a name="l00020"></a>00020 <span class="comment"> * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#if ISIS_METHOD == ISIS_METHOD_DLPI</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#include &lt;net/if.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;netinet/if_ether.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;sys/types.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;unistd.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;fcntl.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;stropts.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;poll.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;sys/dlpi.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;sys/pfmod.h&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="dict_8h.html">isisd/dict.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="iso_8h.html">isisd/include-netbsd/iso.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="isis__constants_8h.html">isisd/isis_constants.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="isis__common_8h.html">isisd/isis_common.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="isis__circuit_8h.html">isisd/isis_circuit.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="isis__flags_8h.html">isisd/isis_flags.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="isisd_8h.html">isisd/isisd.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="isis__network_8h.html">isisd/isis_network.h</a>&quot;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="privs_8h.html">privs.h</a>&quot;</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="code" href="isis__bpf_8c.html#a4af776b1b8693eb5cb5d20b25abb4680">isisd_privs</a>;
<a name="l00051"></a>00051 
<a name="l00052"></a><a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">00052</a> <span class="keyword">static</span> t_uscalar_t <a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>[1024];  <span class="comment">/* DLPI control messages */</span>
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="comment">/*</span>
<a name="l00055"></a>00055 <span class="comment"> * Table 9 - Architectural constants for use with ISO 8802 subnetworks</span>
<a name="l00056"></a>00056 <span class="comment"> * ISO 10589 - 8.4.8</span>
<a name="l00057"></a>00057 <span class="comment"> */</span>
<a name="l00058"></a>00058 
<a name="l00059"></a><a class="code" href="isis__dlpi_8c.html#a564f249d5a142831ee4e6f6cd2ecc396">00059</a> u_char <a class="code" href="isis__bpf_8c.html#a564f249d5a142831ee4e6f6cd2ecc396">ALL_L1_ISS</a>[6] = { 0x01, 0x80, 0xC2, 0x00, 0x00, 0x14 };
<a name="l00060"></a><a class="code" href="isis__dlpi_8c.html#a7b5f2cee21b83e1734bd7203f23262aa">00060</a> u_char <a class="code" href="isis__bpf_8c.html#a7b5f2cee21b83e1734bd7203f23262aa">ALL_L2_ISS</a>[6] = { 0x01, 0x80, 0xC2, 0x00, 0x00, 0x15 };
<a name="l00061"></a><a class="code" href="isis__dlpi_8c.html#a0a18f0f862f0a8eed7bf2b6e59483166">00061</a> u_char <a class="code" href="isis__bpf_8c.html#a0a18f0f862f0a8eed7bf2b6e59483166">ALL_ISS</a>[6] = { 0x09, 0x00, 0x2B, 0x00, 0x00, 0x05 };
<a name="l00062"></a><a class="code" href="isis__dlpi_8c.html#a5e7d2a4d58b2c7dfb7242f15ca442246">00062</a> u_char <a class="code" href="isis__bpf_8c.html#a5e7d2a4d58b2c7dfb7242f15ca442246">ALL_ESS</a>[6] = { 0x09, 0x00, 0x2B, 0x00, 0x00, 0x04 };
<a name="l00063"></a>00063 
<a name="l00064"></a><a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">00064</a> <span class="keyword">static</span> u_char <a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>[8192];
<a name="l00065"></a>00065 
<a name="l00066"></a><a class="code" href="isis__dlpi_8c.html#aa0aac14020dff7c0c13453d62b55d6b4">00066</a> <span class="keyword">static</span> u_short <a class="code" href="isis__dlpi_8c.html#aa0aac14020dff7c0c13453d62b55d6b4">pf_filter</a>[] =
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068   ENF_PUSHWORD + 0,     <span class="comment">/* Get the SSAP/DSAP values */</span>
<a name="l00069"></a>00069   ENF_PUSHLIT | ENF_CAND,   <span class="comment">/* Check them */</span>
<a name="l00070"></a>00070   <a class="code" href="isis__constants_8h.html#a7dc7c0809fa809eb5774a4356c1368db">ISO_SAP</a> | (<a class="code" href="isis__constants_8h.html#a7dc7c0809fa809eb5774a4356c1368db">ISO_SAP</a> &lt;&lt; 8),
<a name="l00071"></a>00071   ENF_PUSHWORD + 1,     <span class="comment">/* Get the control value */</span>
<a name="l00072"></a>00072   ENF_PUSHLIT | ENF_AND,    <span class="comment">/* Isolate it */</span>
<a name="l00073"></a>00073 #ifdef _BIG_ENDIAN
<a name="l00074"></a>00074   0xFF00,
<a name="l00075"></a>00075 #<span class="keywordflow">else</span>
<a name="l00076"></a>00076   0x00FF,
<a name="l00077"></a>00077 #endif
<a name="l00078"></a>00078   ENF_PUSHLIT | ENF_CAND,   <span class="comment">/* Test for expected value */</span>
<a name="l00079"></a>00079 #ifdef _BIG_ENDIAN
<a name="l00080"></a>00080   0x0300
<a name="l00081"></a>00081 #<span class="keywordflow">else</span>
<a name="l00082"></a>00082   0x0003
<a name="l00083"></a>00083 #endif
<a name="l00084"></a>00084 };
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="comment">/*</span>
<a name="l00087"></a>00087 <span class="comment"> * We would like to use something like libdlpi here, but that&#39;s not present on</span>
<a name="l00088"></a>00088 <span class="comment"> * all versions of Solaris or on any non-Solaris system, so it&#39;s nowhere near</span>
<a name="l00089"></a>00089 <span class="comment"> * as portable as we&#39;d like.  Thus, we use the standards-conformant DLPI</span>
<a name="l00090"></a>00090 <span class="comment"> * interfaces plus the (optional; not needed) Solaris packet filter module.</span>
<a name="l00091"></a>00091 <span class="comment"> */</span>
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00094"></a><a class="code" href="isis__dlpi_8c.html#a728fa09913ed5257d97cd062fd3d3cfa">00094</a> <a class="code" href="isis__dlpi_8c.html#a728fa09913ed5257d97cd062fd3d3cfa">dlpisend</a> (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keywordtype">void</span> *cbuf, <span class="keywordtype">size_t</span> cbuflen,
<a name="l00095"></a>00095   <span class="keyword">const</span> <span class="keywordtype">void</span> *dbuf, <span class="keywordtype">size_t</span> dbuflen, <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>)
<a name="l00096"></a>00096 {
<a name="l00097"></a>00097   <span class="keyword">const</span> <span class="keyword">struct </span>strbuf *ctlptr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00098"></a>00098   <span class="keyword">const</span> <span class="keyword">struct </span>strbuf *dataptr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00099"></a>00099   <span class="keyword">struct </span>strbuf ctlbuf, databuf;
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   <span class="keywordflow">if</span> (cbuf != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00102"></a>00102     {
<a name="l00103"></a>00103       memset (&amp;ctlbuf, 0, <span class="keyword">sizeof</span> (ctlbuf));
<a name="l00104"></a>00104       ctlbuf.len = cbuflen;
<a name="l00105"></a>00105       ctlbuf.buf = (<span class="keywordtype">void</span> *)cbuf;
<a name="l00106"></a>00106       ctlptr = &amp;ctlbuf;
<a name="l00107"></a>00107     }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109   <span class="keywordflow">if</span> (dbuf != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00110"></a>00110     {
<a name="l00111"></a>00111       memset (&amp;databuf, 0, <span class="keyword">sizeof</span> (databuf));
<a name="l00112"></a>00112       databuf.len = dbuflen;
<a name="l00113"></a>00113       databuf.buf = (<span class="keywordtype">void</span> *)dbuf;
<a name="l00114"></a>00114       dataptr = &amp;databuf;
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="comment">/* We assume this doesn&#39;t happen often and isn&#39;t operationally significant */</span>
<a name="l00118"></a>00118   <span class="keywordflow">if</span> (putmsg (fd, ctlptr, dataptr, flags) == -1)
<a name="l00119"></a>00119     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: putmsg: %s&quot;</span>, __func__, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00120"></a>00120 }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 <span class="keyword">static</span> ssize_t
<a name="l00123"></a><a class="code" href="isis__dlpi_8c.html#adbe26bb4173e18a53be9c23f2e0c7eac">00123</a> <a class="code" href="isis__dlpi_8c.html#adbe26bb4173e18a53be9c23f2e0c7eac">dlpirctl</a> (<span class="keywordtype">int</span> fd)
<a name="l00124"></a>00124 {
<a name="l00125"></a>00125   <span class="keyword">struct </span>pollfd fds[1];
<a name="l00126"></a>00126   <span class="keyword">struct </span>strbuf ctlbuf, databuf;
<a name="l00127"></a>00127   <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>, retv;
<a name="l00128"></a>00128 
<a name="l00129"></a>00129   <span class="keywordflow">do</span>
<a name="l00130"></a>00130     {
<a name="l00131"></a>00131       <span class="comment">/* Poll is used here in case the device doesn&#39;t speak DLPI correctly */</span>
<a name="l00132"></a>00132       memset (fds, 0, <span class="keyword">sizeof</span> (fds));
<a name="l00133"></a>00133       fds[0].fd = fd;
<a name="l00134"></a>00134       fds[0].events = POLLIN | POLLPRI;
<a name="l00135"></a>00135       <span class="keywordflow">if</span> (poll (fds, 1, 1000) &lt;= 0)
<a name="l00136"></a>00136     <span class="keywordflow">return</span> -1;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138       memset (&amp;ctlbuf, 0, <span class="keyword">sizeof</span> (ctlbuf));
<a name="l00139"></a>00139       memset (&amp;databuf, 0, <span class="keyword">sizeof</span> (databuf));
<a name="l00140"></a>00140       ctlbuf.maxlen = <span class="keyword">sizeof</span> (<a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>);
<a name="l00141"></a>00141       ctlbuf.buf = (<span class="keywordtype">void</span> *)<a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>;
<a name="l00142"></a>00142       databuf.maxlen = <span class="keyword">sizeof</span> (<a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>);
<a name="l00143"></a>00143       databuf.buf = (<span class="keywordtype">void</span> *)<a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>;
<a name="l00144"></a>00144       flags = 0;
<a name="l00145"></a>00145       retv = getmsg (fd, &amp;ctlbuf, &amp;databuf, &amp;flags);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147       <span class="keywordflow">if</span> (retv &lt; 0)
<a name="l00148"></a>00148     <span class="keywordflow">return</span> -1;
<a name="l00149"></a>00149     }
<a name="l00150"></a>00150   <span class="keywordflow">while</span> (ctlbuf.len == 0);
<a name="l00151"></a>00151 
<a name="l00152"></a>00152   <span class="keywordflow">if</span> (!(retv &amp; MORECTL))
<a name="l00153"></a>00153     {
<a name="l00154"></a>00154       <span class="keywordflow">while</span> (retv &amp; MOREDATA)
<a name="l00155"></a>00155     {
<a name="l00156"></a>00156       flags = 0;
<a name="l00157"></a>00157       retv = getmsg (fd, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;databuf, &amp;flags);
<a name="l00158"></a>00158     }
<a name="l00159"></a>00159       <span class="keywordflow">return</span> ctlbuf.len;
<a name="l00160"></a>00160     }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162   <span class="keywordflow">while</span> (retv &amp; MORECTL)
<a name="l00163"></a>00163     {
<a name="l00164"></a>00164       flags = 0;
<a name="l00165"></a>00165       retv = getmsg (fd, &amp;ctlbuf, &amp;databuf, &amp;flags);
<a name="l00166"></a>00166     }
<a name="l00167"></a>00167   <span class="keywordflow">return</span> -1;
<a name="l00168"></a>00168 }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00171"></a><a class="code" href="isis__dlpi_8c.html#a273f39d13c2e6f9b656eed0a6dfba65e">00171</a> <a class="code" href="isis__dlpi_8c.html#a273f39d13c2e6f9b656eed0a6dfba65e">dlpiok</a> (<span class="keywordtype">int</span> fd, t_uscalar_t oprim)
<a name="l00172"></a>00172 {
<a name="l00173"></a>00173   <span class="keywordtype">int</span> retv;
<a name="l00174"></a>00174   dl_ok_ack_t *doa = (dl_ok_ack_t *)<a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176   retv = <a class="code" href="isis__dlpi_8c.html#adbe26bb4173e18a53be9c23f2e0c7eac">dlpirctl</a> (fd);
<a name="l00177"></a>00177   <span class="keywordflow">if</span> (retv &lt; DL_OK_ACK_SIZE || doa-&gt;dl_primitive != DL_OK_ACK ||
<a name="l00178"></a>00178     doa-&gt;dl_correct_primitive != oprim)
<a name="l00179"></a>00179     {
<a name="l00180"></a>00180       <span class="keywordflow">return</span> -1;
<a name="l00181"></a>00181     }
<a name="l00182"></a>00182   <span class="keywordflow">else</span>
<a name="l00183"></a>00183     {
<a name="l00184"></a>00184       <span class="keywordflow">return</span> 0;
<a name="l00185"></a>00185     }
<a name="l00186"></a>00186 }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00189"></a><a class="code" href="isis__dlpi_8c.html#a41ce606f13167bcb5e76124b70f6f7fc">00189</a> <a class="code" href="isis__dlpi_8c.html#a41ce606f13167bcb5e76124b70f6f7fc">dlpiinfo</a> (<span class="keywordtype">int</span> fd)
<a name="l00190"></a>00190 {
<a name="l00191"></a>00191   dl_info_req_t dir;
<a name="l00192"></a>00192   ssize_t retv;
<a name="l00193"></a>00193 
<a name="l00194"></a>00194   memset (&amp;dir, 0, <span class="keyword">sizeof</span> (dir));
<a name="l00195"></a>00195   dir.dl_primitive = DL_INFO_REQ;
<a name="l00196"></a>00196   <span class="comment">/* Info_req uses M_PCPROTO. */</span>
<a name="l00197"></a>00197   <a class="code" href="isis__dlpi_8c.html#a728fa09913ed5257d97cd062fd3d3cfa">dlpisend</a> (fd, &amp;dir, <span class="keyword">sizeof</span> (dir), <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, RS_HIPRI);
<a name="l00198"></a>00198   retv = <a class="code" href="isis__dlpi_8c.html#adbe26bb4173e18a53be9c23f2e0c7eac">dlpirctl</a> (fd);
<a name="l00199"></a>00199   <span class="keywordflow">if</span> (retv &lt; DL_INFO_ACK_SIZE || <a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>[0] != DL_INFO_ACK)
<a name="l00200"></a>00200     <span class="keywordflow">return</span> -1;
<a name="l00201"></a>00201   <span class="keywordflow">else</span>
<a name="l00202"></a>00202     <span class="keywordflow">return</span> retv;
<a name="l00203"></a>00203 }
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00206"></a><a class="code" href="isis__dlpi_8c.html#a270ce846ed003f419a712643f200ff0a">00206</a> <a class="code" href="isis__dlpi_8c.html#a270ce846ed003f419a712643f200ff0a">dlpiopen</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *devpath, ssize_t *acklen)
<a name="l00207"></a>00207 {
<a name="l00208"></a>00208   <span class="keywordtype">int</span> fd, <a class="code" href="structflags.html">flags</a>;
<a name="l00209"></a>00209 
<a name="l00210"></a>00210   fd = open (devpath, O_RDWR | O_NONBLOCK | O_NOCTTY);
<a name="l00211"></a>00211   <span class="keywordflow">if</span> (fd == -1)
<a name="l00212"></a>00212     <span class="keywordflow">return</span> -1;
<a name="l00213"></a>00213 
<a name="l00214"></a>00214   <span class="comment">/* All that we want is for the open itself to be non-blocking, not I/O. */</span>
<a name="l00215"></a>00215   flags = fcntl (fd, F_GETFL, 0);
<a name="l00216"></a>00216   <span class="keywordflow">if</span> (flags != -1)
<a name="l00217"></a>00217     fcntl (fd, F_SETFL, flags &amp; ~O_NONBLOCK);
<a name="l00218"></a>00218 
<a name="l00219"></a>00219   <span class="comment">/* After opening, ask for information */</span>
<a name="l00220"></a>00220   <span class="keywordflow">if</span> ((*acklen = <a class="code" href="isis__dlpi_8c.html#a41ce606f13167bcb5e76124b70f6f7fc">dlpiinfo</a> (fd)) == -1)
<a name="l00221"></a>00221     {
<a name="l00222"></a>00222       close (fd);
<a name="l00223"></a>00223       <span class="keywordflow">return</span> -1;
<a name="l00224"></a>00224     }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226   <span class="keywordflow">return</span> fd;
<a name="l00227"></a>00227 }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00230"></a><a class="code" href="isis__dlpi_8c.html#a3de314a03340559f710d2a07b14e9c11">00230</a> <a class="code" href="isis__dlpi_8c.html#a3de314a03340559f710d2a07b14e9c11">dlpiattach</a> (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> unit)
<a name="l00231"></a>00231 {
<a name="l00232"></a>00232   dl_attach_req_t dar;
<a name="l00233"></a>00233 
<a name="l00234"></a>00234   memset (&amp;dar, 0, <span class="keyword">sizeof</span> (dar));
<a name="l00235"></a>00235   dar.dl_primitive = DL_ATTACH_REQ;
<a name="l00236"></a>00236   dar.dl_ppa = unit;
<a name="l00237"></a>00237   <a class="code" href="isis__dlpi_8c.html#a728fa09913ed5257d97cd062fd3d3cfa">dlpisend</a> (fd, &amp;dar, <span class="keyword">sizeof</span> (dar), <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0);
<a name="l00238"></a>00238   <span class="keywordflow">return</span> <a class="code" href="isis__dlpi_8c.html#a273f39d13c2e6f9b656eed0a6dfba65e">dlpiok</a> (fd, dar.dl_primitive);
<a name="l00239"></a>00239 }
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00242"></a><a class="code" href="isis__dlpi_8c.html#acb6ea6addb4a634c7bcc4c8fa8a7a7c2">00242</a> <a class="code" href="isis__dlpi_8c.html#acb6ea6addb4a634c7bcc4c8fa8a7a7c2">dlpibind</a> (<span class="keywordtype">int</span> fd)
<a name="l00243"></a>00243 {
<a name="l00244"></a>00244   dl_bind_req_t dbr;
<a name="l00245"></a>00245   <span class="keywordtype">int</span> retv;
<a name="l00246"></a>00246   dl_bind_ack_t *dba = (dl_bind_ack_t *)<a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>;
<a name="l00247"></a>00247 
<a name="l00248"></a>00248   memset (&amp;dbr, 0, <span class="keyword">sizeof</span> (dbr));
<a name="l00249"></a>00249   dbr.dl_primitive = DL_BIND_REQ;
<a name="l00250"></a>00250   dbr.dl_service_mode = DL_CLDLS;
<a name="l00251"></a>00251   <a class="code" href="isis__dlpi_8c.html#a728fa09913ed5257d97cd062fd3d3cfa">dlpisend</a> (fd, &amp;dbr, <span class="keyword">sizeof</span> (dbr), <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0);
<a name="l00252"></a>00252 
<a name="l00253"></a>00253   retv = <a class="code" href="isis__dlpi_8c.html#adbe26bb4173e18a53be9c23f2e0c7eac">dlpirctl</a> (fd);
<a name="l00254"></a>00254   <span class="keywordflow">if</span> (retv &lt; DL_BIND_ACK_SIZE || dba-&gt;dl_primitive != DL_BIND_ACK)
<a name="l00255"></a>00255     <span class="keywordflow">return</span> -1;
<a name="l00256"></a>00256   <span class="keywordflow">else</span>
<a name="l00257"></a>00257     <span class="keywordflow">return</span> 0;
<a name="l00258"></a>00258 }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00261"></a><a class="code" href="isis__dlpi_8c.html#a6a8a477b6d7f04d954bfc5c8e0a80715">00261</a> <a class="code" href="isis__dlpi_8c.html#a6a8a477b6d7f04d954bfc5c8e0a80715">dlpimcast</a> (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> u_char *mcaddr)
<a name="l00262"></a>00262 {
<a name="l00263"></a>00263   <span class="keyword">struct </span>{
<a name="l00264"></a>00264     dl_enabmulti_req_t der;
<a name="l00265"></a>00265     u_char addr[ETHERADDRL];
<a name="l00266"></a>00266   } dler;
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   memset (&amp;dler, 0, <span class="keyword">sizeof</span> (dler));
<a name="l00269"></a>00269   dler.der.dl_primitive = DL_ENABMULTI_REQ;
<a name="l00270"></a>00270   dler.der.dl_addr_length = <span class="keyword">sizeof</span> (dler.addr);
<a name="l00271"></a>00271   dler.der.dl_addr_offset = dler.addr - (u_char *)&amp;dler;
<a name="l00272"></a>00272   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (dler.addr, mcaddr, sizeof (dler.addr));
<a name="l00273"></a>00273   <a class="code" href="isis__dlpi_8c.html#a728fa09913ed5257d97cd062fd3d3cfa">dlpisend</a> (fd, &amp;dler, <span class="keyword">sizeof</span> (dler), <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0);
<a name="l00274"></a>00274   <span class="keywordflow">return</span> <a class="code" href="isis__dlpi_8c.html#a273f39d13c2e6f9b656eed0a6dfba65e">dlpiok</a> (fd, dler.der.dl_primitive);
<a name="l00275"></a>00275 }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00278"></a><a class="code" href="isis__dlpi_8c.html#afd8267e7cc94901c5f0a8eda64df79dc">00278</a> <a class="code" href="isis__dlpi_8c.html#afd8267e7cc94901c5f0a8eda64df79dc">dlpiaddr</a> (<span class="keywordtype">int</span> fd, u_char *addr)
<a name="l00279"></a>00279 {
<a name="l00280"></a>00280   dl_phys_addr_req_t dpar;
<a name="l00281"></a>00281   dl_phys_addr_ack_t *dpaa = (dl_phys_addr_ack_t *)<a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>;
<a name="l00282"></a>00282   <span class="keywordtype">int</span> retv;
<a name="l00283"></a>00283 
<a name="l00284"></a>00284   memset (&amp;dpar, 0, <span class="keyword">sizeof</span> (dpar));
<a name="l00285"></a>00285   dpar.dl_primitive = DL_PHYS_ADDR_REQ;
<a name="l00286"></a>00286   dpar.dl_addr_type = DL_CURR_PHYS_ADDR;
<a name="l00287"></a>00287   <a class="code" href="isis__dlpi_8c.html#a728fa09913ed5257d97cd062fd3d3cfa">dlpisend</a> (fd, &amp;dpar, <span class="keyword">sizeof</span> (dpar), <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0);
<a name="l00288"></a>00288 
<a name="l00289"></a>00289   retv = <a class="code" href="isis__dlpi_8c.html#adbe26bb4173e18a53be9c23f2e0c7eac">dlpirctl</a> (fd);
<a name="l00290"></a>00290   <span class="keywordflow">if</span> (retv &lt; DL_PHYS_ADDR_ACK_SIZE || dpaa-&gt;dl_primitive != DL_PHYS_ADDR_ACK)
<a name="l00291"></a>00291     <span class="keywordflow">return</span> -1;
<a name="l00292"></a>00292 
<a name="l00293"></a>00293   <span class="keywordflow">if</span> (dpaa-&gt;dl_addr_offset &lt; DL_PHYS_ADDR_ACK_SIZE ||
<a name="l00294"></a>00294     dpaa-&gt;dl_addr_length != ETHERADDRL ||
<a name="l00295"></a>00295     dpaa-&gt;dl_addr_offset + dpaa-&gt;dl_addr_length &gt; retv)
<a name="l00296"></a>00296     <span class="keywordflow">return</span> -1;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298   bcopy((<span class="keywordtype">char</span> *)dpaa + dpaa-&gt;dl_addr_offset, addr, ETHERADDRL);
<a name="l00299"></a>00299   <span class="keywordflow">return</span> 0;
<a name="l00300"></a>00300 }
<a name="l00301"></a>00301 
<a name="l00302"></a>00302 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00303"></a><a class="code" href="isis__dlpi_8c.html#a44a3208cfbc4e64e694fe5c6b4dd66d0">00303</a> <a class="code" href="isis__dlpi_8c.html#a44a3208cfbc4e64e694fe5c6b4dd66d0">open_dlpi_dev</a> (<span class="keyword">struct</span> <a class="code" href="structisis__circuit.html">isis_circuit</a> *circuit)
<a name="l00304"></a>00304 {
<a name="l00305"></a>00305   <span class="keywordtype">int</span> fd, unit, retval;
<a name="l00306"></a>00306   <span class="keywordtype">char</span> devpath[MAXPATHLEN];
<a name="l00307"></a>00307   dl_info_ack_t *dia = (dl_info_ack_t *)<a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>;
<a name="l00308"></a>00308   ssize_t acklen;
<a name="l00309"></a>00309 
<a name="l00310"></a>00310   <span class="comment">/* Only broadcast-type are supported at the moment */</span>
<a name="l00311"></a>00311   <span class="keywordflow">if</span> (circuit-&gt;<a class="code" href="structisis__circuit.html#a569e39bbf7fafd533eae2eeafa671b8c">circ_type</a> != <a class="code" href="isis__circuit_8h.html#a01a94c5f24c88efb64f791a749ae8f95">CIRCUIT_T_BROADCAST</a>)
<a name="l00312"></a>00312     {
<a name="l00313"></a>00313       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: non-broadcast interface %s&quot;</span>, __func__,
<a name="l00314"></a>00314     circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00315"></a>00315       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00316"></a>00316     }
<a name="l00317"></a>00317   
<a name="l00318"></a>00318   <span class="comment">/* Try the vanity node first, if permitted */</span>
<a name="l00319"></a>00319   <span class="keywordflow">if</span> (<a class="code" href="getopt_8c.html#aee28fd8a0e40b6d958f7d20348e45368">getenv</a>(<span class="stringliteral">&quot;DLPI_DEVONLY&quot;</span>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00320"></a>00320     {
<a name="l00321"></a>00321       (void) <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (devpath, <span class="keyword">sizeof</span>(devpath), <span class="stringliteral">&quot;/dev/net/%s&quot;</span>,
<a name="l00322"></a>00322                       circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00323"></a>00323       fd = <a class="code" href="isis__dlpi_8c.html#a270ce846ed003f419a712643f200ff0a">dlpiopen</a> (devpath, &amp;acklen);
<a name="l00324"></a>00324     }
<a name="l00325"></a>00325   
<a name="l00326"></a>00326   <span class="comment">/* Now try as an ordinary Style 1 node */</span>
<a name="l00327"></a>00327   <span class="keywordflow">if</span> (fd == -1)
<a name="l00328"></a>00328     {
<a name="l00329"></a>00329       (void) <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (devpath, <span class="keyword">sizeof</span> (devpath), <span class="stringliteral">&quot;/dev/%s&quot;</span>,
<a name="l00330"></a>00330                       circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00331"></a>00331       unit = -1;
<a name="l00332"></a>00332       fd = <a class="code" href="isis__dlpi_8c.html#a270ce846ed003f419a712643f200ff0a">dlpiopen</a> (devpath, &amp;acklen);
<a name="l00333"></a>00333     }
<a name="l00334"></a>00334 
<a name="l00335"></a>00335   <span class="comment">/* If that fails, try again as Style 2 */</span>
<a name="l00336"></a>00336   <span class="keywordflow">if</span> (fd == -1)
<a name="l00337"></a>00337     {
<a name="l00338"></a>00338       <span class="keywordtype">char</span> *cp;
<a name="l00339"></a>00339 
<a name="l00340"></a>00340       cp = devpath + strlen (devpath);
<a name="l00341"></a>00341       <span class="keywordflow">while</span> (--cp &gt;= devpath &amp;&amp; isdigit(*cp))
<a name="l00342"></a>00342     ;
<a name="l00343"></a>00343       unit = strtol(cp, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l00344"></a>00344       *cp = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00345"></a>00345       fd = <a class="code" href="isis__dlpi_8c.html#a270ce846ed003f419a712643f200ff0a">dlpiopen</a> (devpath, &amp;acklen);
<a name="l00346"></a>00346 
<a name="l00347"></a>00347       <span class="comment">/* If that too fails, then the device really doesn&#39;t exist */</span>
<a name="l00348"></a>00348       <span class="keywordflow">if</span> (fd == -1)
<a name="l00349"></a>00349     {
<a name="l00350"></a>00350       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: unknown interface %s&quot;</span>, __func__,
<a name="l00351"></a>00351         circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00352"></a>00352       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00353"></a>00353     }
<a name="l00354"></a>00354 
<a name="l00355"></a>00355       <span class="comment">/* Double check the DLPI style */</span>
<a name="l00356"></a>00356       <span class="keywordflow">if</span> (dia-&gt;dl_provider_style != DL_STYLE2)
<a name="l00357"></a>00357     {
<a name="l00358"></a>00358       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;open_dlpi_dev(): interface %s: %s is not style 2&quot;</span>,
<a name="l00359"></a>00359         circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, devpath);
<a name="l00360"></a>00360       close (fd);
<a name="l00361"></a>00361       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00362"></a>00362     }
<a name="l00363"></a>00363 
<a name="l00364"></a>00364       <span class="comment">/* If it succeeds, then we need to attach to the unit specified */</span>
<a name="l00365"></a>00365       <a class="code" href="isis__dlpi_8c.html#a3de314a03340559f710d2a07b14e9c11">dlpiattach</a> (fd, unit);
<a name="l00366"></a>00366 
<a name="l00367"></a>00367       <span class="comment">/* Reget the information, as it may be different per node */</span>
<a name="l00368"></a>00368       <span class="keywordflow">if</span> ((acklen = <a class="code" href="isis__dlpi_8c.html#a41ce606f13167bcb5e76124b70f6f7fc">dlpiinfo</a> (fd)) == -1)
<a name="l00369"></a>00369     {
<a name="l00370"></a>00370       close (fd);
<a name="l00371"></a>00371       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00372"></a>00372     }
<a name="l00373"></a>00373     }
<a name="l00374"></a>00374   <span class="keywordflow">else</span>
<a name="l00375"></a>00375     {
<a name="l00376"></a>00376       <span class="comment">/* Double check the DLPI style */</span>
<a name="l00377"></a>00377       <span class="keywordflow">if</span> (dia-&gt;dl_provider_style != DL_STYLE1)
<a name="l00378"></a>00378     {
<a name="l00379"></a>00379       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;open_dlpi_dev(): interface %s: %s is not style 1&quot;</span>,
<a name="l00380"></a>00380         circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, devpath);
<a name="l00381"></a>00381       close (fd);
<a name="l00382"></a>00382       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00383"></a>00383     }
<a name="l00384"></a>00384     }
<a name="l00385"></a>00385 
<a name="l00386"></a>00386   <span class="comment">/* Check that the interface we&#39;ve got is the kind we expect */</span>
<a name="l00387"></a>00387   <span class="keywordflow">if</span> ((dia-&gt;dl_sap_length != 2 &amp;&amp; dia-&gt;dl_sap_length != -2) ||
<a name="l00388"></a>00388     dia-&gt;dl_service_mode != DL_CLDLS || dia-&gt;dl_addr_length != ETHERADDRL + 2 ||
<a name="l00389"></a>00389     dia-&gt;dl_brdcst_addr_length != ETHERADDRL)
<a name="l00390"></a>00390     {
<a name="l00391"></a>00391       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: unsupported interface type for %s&quot;</span>, __func__,
<a name="l00392"></a>00392     circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00393"></a>00393       close (fd);
<a name="l00394"></a>00394       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00395"></a>00395     }
<a name="l00396"></a>00396   <span class="keywordflow">switch</span> (dia-&gt;dl_mac_type)
<a name="l00397"></a>00397     {
<a name="l00398"></a>00398     <span class="keywordflow">case</span> DL_CSMACD:
<a name="l00399"></a>00399     <span class="keywordflow">case</span> DL_ETHER:
<a name="l00400"></a>00400     <span class="keywordflow">case</span> DL_100VG:
<a name="l00401"></a>00401     <span class="keywordflow">case</span> DL_100VGTPR:
<a name="l00402"></a>00402     <span class="keywordflow">case</span> DL_ETH_CSMA:
<a name="l00403"></a>00403     <span class="keywordflow">case</span> DL_100BT:
<a name="l00404"></a>00404       <span class="keywordflow">break</span>;
<a name="l00405"></a>00405     <span class="keywordflow">default</span>:
<a name="l00406"></a>00406       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: unexpected mac type on %s: %d&quot;</span>, __func__,
<a name="l00407"></a>00407     circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, dia-&gt;dl_mac_type);
<a name="l00408"></a>00408       close (fd);
<a name="l00409"></a>00409       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00410"></a>00410     }
<a name="l00411"></a>00411 
<a name="l00412"></a>00412   circuit-&gt;<a class="code" href="structisis__circuit.html#a19e0eff1c7b91727cd7bf76f204425c4">sap_length</a> = dia-&gt;dl_sap_length;
<a name="l00413"></a>00413 
<a name="l00414"></a>00414   <span class="comment">/*</span>
<a name="l00415"></a>00415 <span class="comment">   * The local hardware address is something that should be provided by way of</span>
<a name="l00416"></a>00416 <span class="comment">   * sockaddr_dl for the interface, but isn&#39;t on Solaris.  We set it here based</span>
<a name="l00417"></a>00417 <span class="comment">   * on DLPI&#39;s reported address to avoid roto-tilling the world.</span>
<a name="l00418"></a>00418 <span class="comment">   * (Note that isis_circuit_if_add on Solaris doesn&#39;t set the snpa.)</span>
<a name="l00419"></a>00419 <span class="comment">   *</span>
<a name="l00420"></a>00420 <span class="comment">   * Unfortunately, GLD is broken and doesn&#39;t provide the address after attach,</span>
<a name="l00421"></a>00421 <span class="comment">   * so we need to be careful and use DL_PHYS_ADDR_REQ instead.</span>
<a name="l00422"></a>00422 <span class="comment">   */</span>
<a name="l00423"></a>00423   <span class="keywordflow">if</span> (<a class="code" href="isis__dlpi_8c.html#afd8267e7cc94901c5f0a8eda64df79dc">dlpiaddr</a> (fd, circuit-&gt;<a class="code" href="structisis__circuit.html#a054734bc8d5a177c375cd28ab313dfc4">u</a>.<a class="code" href="structisis__circuit.html#a921ef29acc454e98615e0269f3bc926e">bc</a>.<a class="code" href="structisis__bcast__info.html#ac7adabf9b24b03c93e73bb9b03c2192b">snpa</a>) == -1)
<a name="l00424"></a>00424     {
<a name="l00425"></a>00425       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;open_dlpi_dev(): interface %s: unable to get MAC address&quot;</span>,
<a name="l00426"></a>00426     circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00427"></a>00427       close (fd);
<a name="l00428"></a>00428       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00429"></a>00429     }
<a name="l00430"></a>00430 
<a name="l00431"></a>00431   <span class="comment">/* Now bind to SAP 0.  This gives us 802-type traffic. */</span>
<a name="l00432"></a>00432   <span class="keywordflow">if</span> (<a class="code" href="isis__dlpi_8c.html#acb6ea6addb4a634c7bcc4c8fa8a7a7c2">dlpibind</a> (fd) == -1)
<a name="l00433"></a>00433     {
<a name="l00434"></a>00434       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: cannot bind SAP 0 on %s&quot;</span>, __func__,
<a name="l00435"></a>00435     circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00436"></a>00436       close (fd);
<a name="l00437"></a>00437       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00438"></a>00438     }
<a name="l00439"></a>00439 
<a name="l00440"></a>00440   <span class="comment">/*</span>
<a name="l00441"></a>00441 <span class="comment">   * Join to multicast groups according to</span>
<a name="l00442"></a>00442 <span class="comment">   * 8.4.2 - Broadcast subnetwork IIH PDUs</span>
<a name="l00443"></a>00443 <span class="comment">   */</span>
<a name="l00444"></a>00444   retval = 0;
<a name="l00445"></a>00445   <span class="keywordflow">if</span> (circuit-&gt;<a class="code" href="structisis__circuit.html#ab222d6d0b054faa159d72bcb9768b3fb">circuit_is_type</a> &amp; <a class="code" href="isis__constants_8h.html#a4806dbcd4c094ef55cecd6aca29520d7">IS_LEVEL_1</a>)
<a name="l00446"></a>00446     {
<a name="l00447"></a>00447       retval |= <a class="code" href="isis__dlpi_8c.html#a6a8a477b6d7f04d954bfc5c8e0a80715">dlpimcast</a> (fd, <a class="code" href="isis__bpf_8c.html#a564f249d5a142831ee4e6f6cd2ecc396">ALL_L1_ISS</a>);
<a name="l00448"></a>00448       retval |= <a class="code" href="isis__dlpi_8c.html#a6a8a477b6d7f04d954bfc5c8e0a80715">dlpimcast</a> (fd, <a class="code" href="isis__bpf_8c.html#a0a18f0f862f0a8eed7bf2b6e59483166">ALL_ISS</a>);
<a name="l00449"></a>00449     }
<a name="l00450"></a>00450   <span class="keywordflow">if</span> (circuit-&gt;<a class="code" href="structisis__circuit.html#ab222d6d0b054faa159d72bcb9768b3fb">circuit_is_type</a> &amp; <a class="code" href="isis__constants_8h.html#a9daa7fbf09b604c718f3bbe189aedd1a">IS_LEVEL_2</a>)
<a name="l00451"></a>00451     retval |= <a class="code" href="isis__dlpi_8c.html#a6a8a477b6d7f04d954bfc5c8e0a80715">dlpimcast</a> (fd, <a class="code" href="isis__bpf_8c.html#a7b5f2cee21b83e1734bd7203f23262aa">ALL_L2_ISS</a>);
<a name="l00452"></a>00452 
<a name="l00453"></a>00453   <span class="keywordflow">if</span> (retval != 0)
<a name="l00454"></a>00454     {
<a name="l00455"></a>00455       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: unable to join multicast on %s&quot;</span>, __func__,
<a name="l00456"></a>00456     circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00457"></a>00457       close (fd);
<a name="l00458"></a>00458       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00459"></a>00459     }
<a name="l00460"></a>00460 
<a name="l00461"></a>00461   <span class="comment">/* Push on the packet filter to avoid stray 802 packets */</span>
<a name="l00462"></a>00462   <span class="keywordflow">if</span> (ioctl (fd, I_PUSH, <span class="stringliteral">&quot;pfmod&quot;</span>) == 0)
<a name="l00463"></a>00463     {
<a name="l00464"></a>00464       <span class="keyword">struct </span>packetfilt pfil;
<a name="l00465"></a>00465       <span class="keyword">struct </span>strioctl sioc;
<a name="l00466"></a>00466 
<a name="l00467"></a>00467       pfil.Pf_Priority = 0;
<a name="l00468"></a>00468       pfil.Pf_FilterLen = <span class="keyword">sizeof</span> (<a class="code" href="isis__dlpi_8c.html#aa0aac14020dff7c0c13453d62b55d6b4">pf_filter</a>) / <span class="keyword">sizeof</span> (u_short);
<a name="l00469"></a>00469       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (pfil.Pf_Filter, <a class="code" href="isis__dlpi_8c.html#aa0aac14020dff7c0c13453d62b55d6b4">pf_filter</a>, sizeof (<a class="code" href="isis__dlpi_8c.html#aa0aac14020dff7c0c13453d62b55d6b4">pf_filter</a>));
<a name="l00470"></a>00470       <span class="comment">/* pfmod does not support transparent ioctls */</span>
<a name="l00471"></a>00471       sioc.ic_cmd = PFIOCSETF;
<a name="l00472"></a>00472       sioc.ic_timout = 5;
<a name="l00473"></a>00473       sioc.ic_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>packetfilt);
<a name="l00474"></a>00474       sioc.ic_dp = (<span class="keywordtype">char</span> *)&amp;pfil;
<a name="l00475"></a>00475       <span class="keywordflow">if</span> (ioctl (fd, I_STR, &amp;sioc) == -1)
<a name="l00476"></a>00476          <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;%s: could not perform PF_IOCSETF on %s&quot;</span>,
<a name="l00477"></a>00477            __func__, circuit-&gt;<a class="code" href="structisis__circuit.html#ab03cac6463284a4ce8c1eb19e49f3b6d">interface</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>); 
<a name="l00478"></a>00478     }
<a name="l00479"></a>00479 
<a name="l00480"></a>00480   circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a> = fd;
<a name="l00481"></a>00481 
<a name="l00482"></a>00482   <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>;
<a name="l00483"></a>00483 }
<a name="l00484"></a>00484 
<a name="l00485"></a>00485 <span class="comment">/*</span>
<a name="l00486"></a>00486 <span class="comment"> * Create the socket and set the tx/rx funcs</span>
<a name="l00487"></a>00487 <span class="comment"> */</span>
<a name="l00488"></a>00488 <span class="keywordtype">int</span>
<a name="l00489"></a><a class="code" href="isis__dlpi_8c.html#a4fb54543ed3a433aa2b883518d7be81f">00489</a> <a class="code" href="isis__bpf_8c.html#a4fb54543ed3a433aa2b883518d7be81f">isis_sock_init</a> (<span class="keyword">struct</span> <a class="code" href="structisis__circuit.html">isis_circuit</a> *circuit)
<a name="l00490"></a>00490 {
<a name="l00491"></a>00491   <span class="keywordtype">int</span> retval = <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>;
<a name="l00492"></a>00492 
<a name="l00493"></a>00493   <span class="keywordflow">if</span> (<a class="code" href="isis__bpf_8c.html#a4af776b1b8693eb5cb5d20b25abb4680">isisd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
<a name="l00494"></a>00494     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: could not raise privs, %s&quot;</span>, __func__, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00495"></a>00495 
<a name="l00496"></a>00496   retval = <a class="code" href="isis__dlpi_8c.html#a44a3208cfbc4e64e694fe5c6b4dd66d0">open_dlpi_dev</a> (circuit);
<a name="l00497"></a>00497 
<a name="l00498"></a>00498   <span class="keywordflow">if</span> (retval != <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>)
<a name="l00499"></a>00499     {
<a name="l00500"></a>00500       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s: could not initialize the socket&quot;</span>, __func__);
<a name="l00501"></a>00501       <span class="keywordflow">goto</span> end;
<a name="l00502"></a>00502     }
<a name="l00503"></a>00503 
<a name="l00504"></a>00504   <span class="keywordflow">if</span> (circuit-&gt;<a class="code" href="structisis__circuit.html#a569e39bbf7fafd533eae2eeafa671b8c">circ_type</a> == <a class="code" href="isis__circuit_8h.html#a01a94c5f24c88efb64f791a749ae8f95">CIRCUIT_T_BROADCAST</a>)
<a name="l00505"></a>00505     {
<a name="l00506"></a>00506       circuit-&gt;<a class="code" href="structisis__circuit.html#af17faf994f21d75da89129ed100cb71d">tx</a> = <a class="code" href="isis__bpf_8c.html#aa14af084fa2a0eecae13e4ec0f2ccb37">isis_send_pdu_bcast</a>;
<a name="l00507"></a>00507       circuit-&gt;<a class="code" href="structisis__circuit.html#ae53bfd73cd6f9a69f392c645c4ccce7c">rx</a> = <a class="code" href="isis__bpf_8c.html#a5f85f514b1239ab33e4fdeed003de800">isis_recv_pdu_bcast</a>;
<a name="l00508"></a>00508     }
<a name="l00509"></a>00509   <span class="keywordflow">else</span>
<a name="l00510"></a>00510     {
<a name="l00511"></a>00511       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;isis_sock_init(): unknown circuit type&quot;</span>);
<a name="l00512"></a>00512       retval = <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00513"></a>00513       <span class="keywordflow">goto</span> end;
<a name="l00514"></a>00514     }
<a name="l00515"></a>00515 
<a name="l00516"></a>00516 end:
<a name="l00517"></a>00517   <span class="keywordflow">if</span> (<a class="code" href="isis__bpf_8c.html#a4af776b1b8693eb5cb5d20b25abb4680">isisd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00518"></a>00518     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: could not lower privs, %s&quot;</span>, __func__, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00519"></a>00519 
<a name="l00520"></a>00520   <span class="keywordflow">return</span> retval;
<a name="l00521"></a>00521 }
<a name="l00522"></a>00522 
<a name="l00523"></a>00523 <span class="keywordtype">int</span>
<a name="l00524"></a><a class="code" href="isis__dlpi_8c.html#a5f85f514b1239ab33e4fdeed003de800">00524</a> <a class="code" href="isis__bpf_8c.html#a5f85f514b1239ab33e4fdeed003de800">isis_recv_pdu_bcast</a> (<span class="keyword">struct</span> <a class="code" href="structisis__circuit.html">isis_circuit</a> *circuit, u_char * ssnpa)
<a name="l00525"></a>00525 {
<a name="l00526"></a>00526   <span class="keyword">struct </span>pollfd fds[1];
<a name="l00527"></a>00527   <span class="keyword">struct </span>strbuf ctlbuf, databuf;
<a name="l00528"></a>00528   <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>, retv;
<a name="l00529"></a>00529   dl_unitdata_ind_t *dui = (dl_unitdata_ind_t *)<a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>;
<a name="l00530"></a>00530 
<a name="l00531"></a>00531   memset (fds, 0, <span class="keyword">sizeof</span> (fds));
<a name="l00532"></a>00532   fds[0].fd = circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a>;
<a name="l00533"></a>00533   fds[0].events = POLLIN | POLLPRI;
<a name="l00534"></a>00534   <span class="keywordflow">if</span> (poll (fds, 1, 0) &lt;= 0)
<a name="l00535"></a>00535     <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00536"></a>00536 
<a name="l00537"></a>00537   memset (&amp;ctlbuf, 0, <span class="keyword">sizeof</span> (ctlbuf));
<a name="l00538"></a>00538   memset (&amp;databuf, 0, <span class="keyword">sizeof</span> (databuf));
<a name="l00539"></a>00539   ctlbuf.maxlen = <span class="keyword">sizeof</span> (<a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>);
<a name="l00540"></a>00540   ctlbuf.buf = (<span class="keywordtype">void</span> *)<a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>;
<a name="l00541"></a>00541   databuf.maxlen = <span class="keyword">sizeof</span> (<a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>);
<a name="l00542"></a>00542   databuf.buf = (<span class="keywordtype">void</span> *)<a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>;
<a name="l00543"></a>00543   flags = 0;
<a name="l00544"></a>00544   retv = getmsg (circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a>, &amp;ctlbuf, &amp;databuf, &amp;flags);
<a name="l00545"></a>00545 
<a name="l00546"></a>00546   <span class="keywordflow">if</span> (retv &lt; 0)
<a name="l00547"></a>00547     {
<a name="l00548"></a>00548       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;isis_recv_pdu_bcast: getmsg failed: %s&quot;</span>,
<a name="l00549"></a>00549          <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00550"></a>00550       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00551"></a>00551     }
<a name="l00552"></a>00552 
<a name="l00553"></a>00553   <span class="keywordflow">if</span> (retv &amp; (MORECTL | MOREDATA))
<a name="l00554"></a>00554     {
<a name="l00555"></a>00555       <span class="keywordflow">while</span> (retv &amp; (MORECTL | MOREDATA))
<a name="l00556"></a>00556     {
<a name="l00557"></a>00557       flags = 0;
<a name="l00558"></a>00558       retv = getmsg (circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a>, &amp;ctlbuf, &amp;databuf, &amp;flags);
<a name="l00559"></a>00559     }
<a name="l00560"></a>00560       <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00561"></a>00561     }
<a name="l00562"></a>00562 
<a name="l00563"></a>00563   <span class="keywordflow">if</span> (ctlbuf.len &lt; DL_UNITDATA_IND_SIZE ||
<a name="l00564"></a>00564     dui-&gt;dl_primitive != DL_UNITDATA_IND)
<a name="l00565"></a>00565     <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00566"></a>00566 
<a name="l00567"></a>00567   <span class="keywordflow">if</span> (dui-&gt;dl_src_addr_length != ETHERADDRL + 2 ||
<a name="l00568"></a>00568     dui-&gt;dl_src_addr_offset &lt; DL_UNITDATA_IND_SIZE ||
<a name="l00569"></a>00569     dui-&gt;dl_src_addr_offset + dui-&gt;dl_src_addr_length &gt; ctlbuf.len)
<a name="l00570"></a>00570     <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00571"></a>00571 
<a name="l00572"></a>00572   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (ssnpa, (<span class="keywordtype">char</span> *)dui + dui-&gt;dl_src_addr_offset +
<a name="l00573"></a>00573     (circuit-&gt;<a class="code" href="structisis__circuit.html#a19e0eff1c7b91727cd7bf76f204425c4">sap_length</a> &gt; 0 ? circuit-&gt;<a class="code" href="structisis__circuit.html#a19e0eff1c7b91727cd7bf76f204425c4">sap_length</a> : 0), ETHERADDRL);
<a name="l00574"></a>00574 
<a name="l00575"></a>00575   <span class="keywordflow">if</span> (databuf.len &lt; <a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a> || <a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>[0] != <a class="code" href="isis__constants_8h.html#a7dc7c0809fa809eb5774a4356c1368db">ISO_SAP</a> ||
<a name="l00576"></a>00576     <a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>[1] != <a class="code" href="isis__constants_8h.html#a7dc7c0809fa809eb5774a4356c1368db">ISO_SAP</a> || <a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>[2] != 3)
<a name="l00577"></a>00577     <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#a58479855936d63f1609867e2732ccb09">ISIS_WARNING</a>;
<a name="l00578"></a>00578 
<a name="l00579"></a>00579   <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#abc0c4c6484b34715228b6811f442f9aa">rcv_stream</a>, <a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a> + <a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a>,
<a name="l00580"></a>00580                 databuf.len - <a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a>);
<a name="l00581"></a>00581   <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#abc0c4c6484b34715228b6811f442f9aa">rcv_stream</a>, 0);
<a name="l00582"></a>00582 
<a name="l00583"></a>00583   <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>;
<a name="l00584"></a>00584 }
<a name="l00585"></a>00585 
<a name="l00586"></a>00586 <span class="keywordtype">int</span>
<a name="l00587"></a><a class="code" href="isis__dlpi_8c.html#aa14af084fa2a0eecae13e4ec0f2ccb37">00587</a> <a class="code" href="isis__bpf_8c.html#aa14af084fa2a0eecae13e4ec0f2ccb37">isis_send_pdu_bcast</a> (<span class="keyword">struct</span> <a class="code" href="structisis__circuit.html">isis_circuit</a> *circuit, <span class="keywordtype">int</span> level)
<a name="l00588"></a>00588 {
<a name="l00589"></a>00589   dl_unitdata_req_t *dur = (dl_unitdata_req_t *)<a class="code" href="isis__dlpi_8c.html#a1aeff07baec4559bb626ac35baed866e">dlpi_ctl</a>;
<a name="l00590"></a>00590   <span class="keywordtype">char</span> *dstaddr;
<a name="l00591"></a>00591   u_short *dstsap;
<a name="l00592"></a>00592 
<a name="l00593"></a>00593   <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#a282678da28cc5e426019913c913ea490">snd_stream</a>, 0);
<a name="l00594"></a>00594 
<a name="l00595"></a>00595   memset (dur, 0, <span class="keyword">sizeof</span> (*dur));
<a name="l00596"></a>00596   dur-&gt;dl_primitive = DL_UNITDATA_REQ;
<a name="l00597"></a>00597   dur-&gt;dl_dest_addr_length = ETHERADDRL + 2;
<a name="l00598"></a>00598   dur-&gt;dl_dest_addr_offset = <span class="keyword">sizeof</span> (*dur);
<a name="l00599"></a>00599 
<a name="l00600"></a>00600   dstaddr = (<span class="keywordtype">char</span> *)(dur + 1);
<a name="l00601"></a>00601   <span class="keywordflow">if</span> (circuit-&gt;<a class="code" href="structisis__circuit.html#a19e0eff1c7b91727cd7bf76f204425c4">sap_length</a> &lt; 0)
<a name="l00602"></a>00602     {
<a name="l00603"></a>00603       dstsap = (u_short *)(dstaddr + ETHERADDRL);
<a name="l00604"></a>00604     }
<a name="l00605"></a>00605   <span class="keywordflow">else</span>
<a name="l00606"></a>00606     {
<a name="l00607"></a>00607       dstsap = (u_short *)dstaddr;
<a name="l00608"></a>00608       dstaddr += circuit-&gt;<a class="code" href="structisis__circuit.html#a19e0eff1c7b91727cd7bf76f204425c4">sap_length</a>;
<a name="l00609"></a>00609     }
<a name="l00610"></a>00610   <span class="keywordflow">if</span> (level == 1)
<a name="l00611"></a>00611     <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (dstaddr, <a class="code" href="isis__bpf_8c.html#a564f249d5a142831ee4e6f6cd2ecc396">ALL_L1_ISS</a>, ETHERADDRL);
<a name="l00612"></a>00612   <span class="keywordflow">else</span>
<a name="l00613"></a>00613     <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (dstaddr, <a class="code" href="isis__bpf_8c.html#a7b5f2cee21b83e1734bd7203f23262aa">ALL_L2_ISS</a>, ETHERADDRL);
<a name="l00614"></a>00614   <span class="comment">/* Note: DLPI SAP values are in host byte order */</span>
<a name="l00615"></a>00615   *dstsap = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#a282678da28cc5e426019913c913ea490">snd_stream</a>) + <a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a>;
<a name="l00616"></a>00616 
<a name="l00617"></a>00617   <a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>[0] = <a class="code" href="isis__constants_8h.html#a7dc7c0809fa809eb5774a4356c1368db">ISO_SAP</a>;
<a name="l00618"></a>00618   <a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>[1] = <a class="code" href="isis__constants_8h.html#a7dc7c0809fa809eb5774a4356c1368db">ISO_SAP</a>;
<a name="l00619"></a>00619   <a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>[2] = 0x03;
<a name="l00620"></a>00620   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (<a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a> + <a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a>, circuit-&gt;<a class="code" href="structisis__circuit.html#a282678da28cc5e426019913c913ea490">snd_stream</a>-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>,
<a name="l00621"></a>00621       <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#a282678da28cc5e426019913c913ea490">snd_stream</a>));
<a name="l00622"></a>00622   <a class="code" href="isis__dlpi_8c.html#a728fa09913ed5257d97cd062fd3d3cfa">dlpisend</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#a2fa1849a71a356f206776c2329f27dbc">fd</a>, dur, sizeof (*dur) + dur-&gt;dl_dest_addr_length,
<a name="l00623"></a>00623     <a class="code" href="isis__dlpi_8c.html#a94d3ca3033149dd40c1a9b1eeedf79c7">sock_buff</a>, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (circuit-&gt;<a class="code" href="structisis__circuit.html#a282678da28cc5e426019913c913ea490">snd_stream</a>) + <a class="code" href="isis__constants_8h.html#a048b572b44339fe08c86740ba28c603e">LLC_LEN</a>, 0);
<a name="l00624"></a>00624   <span class="keywordflow">return</span> <a class="code" href="isis__constants_8h.html#aeece0df48a5b652b227aeaeab5eef2f7">ISIS_OK</a>;
<a name="l00625"></a>00625 }
<a name="l00626"></a>00626 
<a name="l00627"></a>00627 <span class="preprocessor">#endif </span><span class="comment">/* ISIS_METHOD == ISIS_METHOD_DLPI */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="isis__dlpi_8c.html">isis_dlpi.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:04 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
