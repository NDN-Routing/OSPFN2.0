<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_open.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__open_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_open.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgpd_8h_source.html">bgpd/bgpd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__attr_8h_source.html">bgpd/bgp_attr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__debug_8h_source.html">bgpd/bgp_debug.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__fsm_8h_source.html">bgpd/bgp_fsm.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__packet_8h_source.html">bgpd/bgp_packet.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__open_8h_source.html">bgpd/bgp_open.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__aspath_8h_source.html">bgpd/bgp_aspath.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__vty_8h_source.html">bgpd/bgp_vty.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for bgp_open.c:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__open_8c__incl.png" border="0" usemap="#bgpd_2bgp__open_8c" alt=""/></div>
<map name="bgpd_2bgp__open_8c" id="bgpd_2bgp__open_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1512,80,1579,107"/><area shape="rect" id="node61" href="linklist_8h.html" title="linklist.h" alt="" coords="3223,80,3293,107"/><area shape="rect" id="node63" href="prefix_8h.html" title="prefix.h" alt="" coords="3422,155,3489,181"/><area shape="rect" id="node67" href="stream_8h.html" title="stream.h" alt="" coords="3493,80,3568,107"/><area shape="rect" id="node70" href="thread_8h.html" title="thread.h" alt="" coords="3007,229,3079,256"/><area shape="rect" id="node72" href="log_8h.html" title="log.h" alt="" coords="2786,229,2837,256"/><area shape="rect" id="node75" href="command_8h.html" title="command.h" alt="" coords="2978,80,3069,107"/><area shape="rect" id="node85" href="memory_8h.html" title="memory.h" alt="" coords="3592,80,3675,107"/><area shape="rect" id="node89" href="bgpd_8h.html" title="bgpd/bgpd.h" alt="" coords="3318,80,3417,107"/><area shape="rect" id="node92" href="bgp__attr_8h.html" title="bgpd/bgp_attr.h" alt="" coords="3736,155,3856,181"/><area shape="rect" id="node94" href="bgp__debug_8h.html" title="bgpd/bgp_debug.h" alt="" coords="3749,80,3888,107"/><area shape="rect" id="node97" href="bgp__fsm_8h.html" title="bgpd/bgp_fsm.h" alt="" coords="3913,80,4033,107"/><area shape="rect" id="node99" href="bgp__packet_8h.html" title="bgpd/bgp_packet.h" alt="" coords="4058,80,4197,107"/><area shape="rect" id="node101" href="bgp__open_8h.html" title="bgpd/bgp_open.h" alt="" coords="4223,80,4353,107"/><area shape="rect" id="node103" href="bgp__aspath_8h.html" title="bgpd/bgp_aspath.h" alt="" coords="4378,80,4517,107"/><area shape="rect" id="node105" href="bgp__vty_8h.html" title="bgpd/bgp_vty.h" alt="" coords="4542,80,4660,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="1816,155,1893,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="1918,155,1967,181"/><area shape="rect" id="node65" href="sockunion_8h.html" title="sockunion.h" alt="" coords="3369,229,3463,256"/><area shape="rect" id="node77" href="vector_8h.html" title="vector.h" alt="" coords="2927,155,2999,181"/><area shape="rect" id="node79" href="vty_8h.html" title="vty.h" alt="" coords="2850,155,2901,181"/><area shape="rect" id="node83" href="route__types_8h.html" title="lib/route_types.h" alt="" coords="3023,155,3147,181"/><area shape="rect" id="node87" href="memtypes_8h.html" title="lib/memtypes.h" alt="" coords="3576,155,3691,181"/></map>
</div>
</div>
<p><a href="bgp__open_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a5a43544def56619fc4d175b041e5ef9d">bgp_capability_vty_out</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#adc6a534213a3d92f183f361761faf2c3">bgp_capability_mp_data</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structcapability__mp__data.html">capability_mp_data</a> *<a class="el" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#aa9bd7a6fd45645368bfa07d3a9b4ea7b">bgp_afi_safi_valid_indices</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> *safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a6078eb04bd2ba0b8ce6a82faaed3a495">bgp_capability_mp</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structcapability__header.html">capability_header</a> *hdr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_char <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, u_char <a class="el" href="bgp__open_8h.html#af4324da5e10e48f7970f2bc5b611e367">mode</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a058d95e46b228277868cc5e80511a898">bgp_capability_orf_entry</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structcapability__header.html">capability_header</a> *hdr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a9cfdb53f8735b756f2b3a867959e93d4">bgp_capability_orf</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structcapability__header.html">capability_header</a> *hdr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a3017f16481dfb2fb9d724cdedfbebe4d">bgp_capability_restart</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structcapability__header.html">capability_header</a> *caphdr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a4524af929b53672ef491e287e0d33bc1">bgp_capability_as4</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structcapability__header.html">capability_header</a> *hdr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#afa33874facde2f93939454549e6122f6">bgp_capability_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, size_t <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, u_char **error)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#ab924c5c3c3526f626f3f687b2bc6935f">bgp_auth_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, size_t <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a625bb4f342b079245052ff4b143b0253">strict_capability_same</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#aa94f4ded4a8074c681b0e153744fed37">peek_for_as4_capability</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_char <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#aec7b4d53e9f585305641d2561f7596f0">bgp_open_option_parse</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, u_char <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, int *capability)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a3b54950e6def3c7d8f00732586711819">bgp_open_capability_orf</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_char code)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#aa7660eff88133071e216cf984179877e">bgp_open_capability</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structmessage.html">message</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a0a6d13f3a7d2d21ec548ef4812df2dcc">orf_type_str</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a9bd4bc1212ba9d4f365d4178abd688ec">orf_type_str_max</a> = sizeof(<a class="el" href="bgp__open_8c.html#a0a6d13f3a7d2d21ec548ef4812df2dcc">orf_type_str</a>)/sizeof(<a class="el" href="bgp__open_8c.html#a0a6d13f3a7d2d21ec548ef4812df2dcc">orf_type_str</a>[0])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structmessage.html">message</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a0b54ccc41572c2cc034233d8e35b6ed0">orf_mode_str</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a3a439aa2a262a971a61e8574e5f877de">orf_mode_str_max</a> = sizeof(<a class="el" href="bgp__open_8c.html#a0b54ccc41572c2cc034233d8e35b6ed0">orf_mode_str</a>)/sizeof(<a class="el" href="bgp__open_8c.html#a0b54ccc41572c2cc034233d8e35b6ed0">orf_mode_str</a>[0])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structmessage.html">message</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#aa119d7cf01582578882c891ffa24bf79">capcode_str_max</a> = sizeof(<a class="el" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a>)/sizeof(<a class="el" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a>[0])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__open_8c.html#a158e272b30276a69c7b63c0b6a6d5fa0">cap_minsizes</a> []</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="aa9bd7a6fd45645368bfa07d3a9b4ea7b"></a><!-- doxytag: member="bgp_open.c::bgp_afi_safi_valid_indices" ref="aa9bd7a6fd45645368bfa07d3a9b4ea7b" args="(afi_t afi, safi_t *safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_afi_safi_valid_indices </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> *&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00128">128</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* VPNvX are AFI specific */</span>
  <span class="keywordflow">if</span> ((afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; *safi == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
      || (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; *safi == <a class="code" href="bgpd_8h.html#a4ceec2ee967b760e73454490e530ae51">BGP_SAFI_VPNV6</a>))
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Invalid afi/safi combination (%u/%u)&quot;</span>, afi, *safi);
      <span class="keywordflow">return</span> 0;
    }
  
  <span class="keywordflow">switch</span> (afi)
    {
      <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>:
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>:
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>        <span class="keywordflow">switch</span> (*safi)
          {
            <span class="comment">/* BGP VPNvX SAFI isn&#39;t contigious with others, remap */</span>
            <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>:
            <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a4ceec2ee967b760e73454490e530ae51">BGP_SAFI_VPNV6</a>:
              *safi = <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>;
            <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>:
            <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>:
            <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>:
              <span class="keywordflow">return</span> 1;
          }
    }
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;unknown afi/safi (%u/%u)&quot;</span>, afi, *safi);
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab924c5c3c3526f626f3f687b2bc6935f"></a><!-- doxytag: member="bgp_open.c::bgp_auth_parse" ref="ab924c5c3c3526f626f3f687b2bc6935f" args="(struct peer *peer, size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_auth_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00623">623</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
           <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
           <a class="code" href="bgpd_8h.html#a84cdcaced0ddcd9c02d2bcb33be39a11">BGP_NOTIFY_OPEN_AUTH_FAILURE</a>); 
  <span class="keywordflow">return</span> -1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4524af929b53672ef491e287e0d33bc1"></a><!-- doxytag: member="bgp_open.c::bgp_capability_as4" ref="a4524af929b53672ef491e287e0d33bc1" args="(struct peer *peer, struct capability_header *hdr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> bgp_capability_as4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structcapability__header.html">capability_header</a> *&#160;</td>
          <td class="paramname"><em>hdr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00434">434</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4 = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (<a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(peer));
  
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [AS4] about to set cap PEER_CAP_AS4_RCV, got as4 %u&quot;</span>,
                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, as4);
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>);
  
  <span class="keywordflow">return</span> as4;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6078eb04bd2ba0b8ce6a82faaed3a495"></a><!-- doxytag: member="bgp_open.c::bgp_capability_mp" ref="a6078eb04bd2ba0b8ce6a82faaed3a495" args="(struct peer *peer, struct capability_header *hdr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_capability_mp </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structcapability__header.html">capability_header</a> *&#160;</td>
          <td class="paramname"><em>hdr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00163">163</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structcapability__mp__data.html">capability_mp_data</a> <a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
  
  <a class="code" href="bgp__open_8c.html#adc6a534213a3d92f183f361761faf2c3">bgp_capability_mp_data</a> (s, &amp;<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s OPEN has MP_EXT CAP for afi/safi: %u/%u&quot;</span>,
               peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>, <a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>);
  
  <span class="keywordflow">if</span> (!<a class="code" href="bgp__open_8c.html#aa9bd7a6fd45645368bfa07d3a9b4ea7b">bgp_afi_safi_valid_indices</a> (<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>, &amp;<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>))
    <span class="keywordflow">return</span> -1;
   
  <span class="comment">/* Now safi remapped, and afi/safi are valid array indices */</span>
  peer-&gt;<a class="code" href="structpeer.html#a69bf8dd8a30764344085b68b398dd619">afc_recv</a>[<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>][<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>] = 1;
  
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>][<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>])
    peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>][<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>] = 1;
  <span class="keywordflow">else</span> 
    <span class="keywordflow">return</span> -1;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="adc6a534213a3d92f183f361761faf2c3"></a><!-- doxytag: member="bgp_open.c::bgp_capability_mp_data" ref="adc6a534213a3d92f183f361761faf2c3" args="(struct stream *s, struct capability_mp_data *mpc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_capability_mp_data </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structcapability__mp__data.html">capability_mp_data</a> *&#160;</td>
          <td class="paramname"><em>mpc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00120">120</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  mpc-&gt;<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a> = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
  mpc-&gt;<a class="code" href="structcapability__mp__data.html#ac1968e8f607bea6f0d48e86bb703e28b">reserved</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  mpc-&gt;<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9cfdb53f8735b756f2b3a867959e93d4"></a><!-- doxytag: member="bgp_open.c::bgp_capability_orf" ref="a9cfdb53f8735b756f2b3a867959e93d4" args="(struct peer *peer, struct capability_header *hdr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_capability_orf </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structcapability__header.html">capability_header</a> *&#160;</td>
          <td class="paramname"><em>hdr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00351">351</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
  <span class="keywordtype">size_t</span> end = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) + <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a>) &lt;= end);
  
  <span class="comment">/* We must have at least one ORF entry, as the caller has already done</span>
<span class="comment">   * minimum length validation for the capability code - for ORF there must</span>
<span class="comment">   * at least one ORF entry (header and unknown number of pairs of bytes).</span>
<span class="comment">   */</span>
  <span class="keywordflow">do</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8c.html#a058d95e46b228277868cc5e80511a898">bgp_capability_orf_entry</a> (peer, hdr) == -1)
        <span class="keywordflow">return</span> -1;
    } 
  <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) + <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a>) &lt; end);
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a058d95e46b228277868cc5e80511a898"></a><!-- doxytag: member="bgp_open.c::bgp_capability_orf_entry" ref="a058d95e46b228277868cc5e80511a898" args="(struct peer *peer, struct capability_header *hdr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_capability_orf_entry </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structcapability__header.html">capability_header</a> *&#160;</td>
          <td class="paramname"><em>hdr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00215">215</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
  <span class="keyword">struct </span><a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a> entry;
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  u_char <a class="code" href="bgp__open_8h.html#af4324da5e10e48f7970f2bc5b611e367">mode</a>;
  u_int16_t sm_cap = 0; <span class="comment">/* capability send-mode receive */</span>
  u_int16_t rm_cap = 0; <span class="comment">/* capability receive-mode receive */</span> 
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  <span class="comment">/* ORF Entry header */</span>
  <a class="code" href="bgp__open_8c.html#adc6a534213a3d92f183f361761faf2c3">bgp_capability_mp_data</a> (s, &amp;entry.mpc);
  entry.num = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  afi = entry.mpc.afi;
  safi = entry.mpc.safi;
  
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s ORF Cap entry for afi/safi: %u/%u&quot;</span>,
            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, entry.mpc.afi, entry.mpc.safi);

  <span class="comment">/* Check AFI and SAFI. */</span>
  <span class="keywordflow">if</span> (!<a class="code" href="bgp__open_8c.html#aa9bd7a6fd45645368bfa07d3a9b4ea7b">bgp_afi_safi_valid_indices</a> (entry.mpc.afi, &amp;safi))
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Addr-family %d/%d not supported.&quot;</span>
                 <span class="stringliteral">&quot; Ignoring the ORF capability&quot;</span>,
                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, entry.mpc.afi, entry.mpc.safi);
      <span class="keywordflow">return</span> 0;
    }
  
  <span class="comment">/* validate number field */</span>
  <span class="keywordflow">if</span> (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a>) + (entry.num * 2) &gt; hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s ORF Capability entry length error,&quot;</span>
                 <span class="stringliteral">&quot; Cap length %u, num %u&quot;</span>,
                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>, entry.num);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
      <span class="keywordflow">return</span> -1;
    }

  <span class="keywordflow">for</span> (i = 0 ; i &lt; entry.num ; i++)
    {
      type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a>(s);
      mode = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a>(s);
      
      <span class="comment">/* ORF Mode error check */</span>
      <span class="keywordflow">switch</span> (mode)
        {
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#aa2f4a41f8868fc7f30256d3b1b9ef724">ORF_MODE_BOTH</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ac744fbeb93f5b3cbd74056a7eb69fcab">ORF_MODE_SEND</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ae71faab30e0c630f5cc40e197425bbe7">ORF_MODE_RECEIVE</a>:
            <span class="keywordflow">break</span>;
          <span class="keywordflow">default</span>:
        <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
        <span class="keywordflow">continue</span>;
    }
      <span class="comment">/* ORF Type and afi/safi error checks */</span>
      <span class="comment">/* capcode versus type */</span>
      <span class="keywordflow">switch</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>)
        {
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>:
            <span class="keywordflow">switch</span> (type)
              {
                <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>:
                  <span class="keywordflow">break</span>;
                <span class="keywordflow">default</span>:
                  <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
                  <span class="keywordflow">continue</span>;
              }
            <span class="keywordflow">break</span>;
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>:
            <span class="keywordflow">switch</span> (type)
              {
                <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>:
                  <span class="keywordflow">break</span>;
                <span class="keywordflow">default</span>:
                  <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
                  <span class="keywordflow">continue</span>;
              }
            <span class="keywordflow">break</span>;
          <span class="keywordflow">default</span>:
            <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
            <span class="keywordflow">continue</span>;
        }
                
      <span class="comment">/* AFI vs SAFI */</span>
      <span class="keywordflow">if</span> (!((afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
            || (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>)
            || (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)))
        {
          <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
          <span class="keywordflow">continue</span>;
        }
      
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s OPEN has %s ORF capability&quot;</span>
                    <span class="stringliteral">&quot; as %s for afi/safi: %d/%d&quot;</span>,
                    peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__open_8c.html#a0a6d13f3a7d2d21ec548ef4812df2dcc">orf_type_str</a>, type),
                    <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__open_8c.html#a0b54ccc41572c2cc034233d8e35b6ed0">orf_mode_str</a>, mode),
                    entry.mpc.afi, safi);

      <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>)
    {
          sm_cap = <a class="code" href="bgpd_8h.html#a4883c0951321050f52731ef009c2dd17">PEER_CAP_ORF_PREFIX_SM_RCV</a>;
          rm_cap = <a class="code" href="bgpd_8h.html#ae3b16174b0caeeb5d046eb673138187d">PEER_CAP_ORF_PREFIX_RM_RCV</a>;
    }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>)
    {
          sm_cap = <a class="code" href="bgpd_8h.html#ae0da0dd013880e12f7d1160d002735a6">PEER_CAP_ORF_PREFIX_SM_OLD_RCV</a>;
          rm_cap = <a class="code" href="bgpd_8h.html#ab3ce0a5a8efd2d2b846abdad6ec4a9d6">PEER_CAP_ORF_PREFIX_RM_OLD_RCV</a>;
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="bgp__open_8c.html#ab67636cf1096abdf3c802df3166f2a5f">bgp_capability_orf_not_support</a> (peer, afi, safi, type, mode);
      <span class="keywordflow">continue</span>;
    }

      <span class="keywordflow">switch</span> (mode)
    {
      <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#aa2f4a41f8868fc7f30256d3b1b9ef724">ORF_MODE_BOTH</a>:
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], sm_cap);
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], rm_cap);
        <span class="keywordflow">break</span>;
      <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ac744fbeb93f5b3cbd74056a7eb69fcab">ORF_MODE_SEND</a>:
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], sm_cap);
        <span class="keywordflow">break</span>;
      <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ae71faab30e0c630f5cc40e197425bbe7">ORF_MODE_RECEIVE</a>:
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], rm_cap);
        <span class="keywordflow">break</span>;
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab67636cf1096abdf3c802df3166f2a5f"></a><!-- doxytag: member="bgp_open.c::bgp_capability_orf_not_support" ref="ab67636cf1096abdf3c802df3166f2a5f" args="(struct peer *peer, afi_t afi, safi_t safi, u_char type, u_char mode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_capability_orf_not_support </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00189">189</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Addr-family %d/%d has ORF type/mode %d/%d not supported&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <a class="code" href="bgp__open_8h.html#af4324da5e10e48f7970f2bc5b611e367">mode</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="afa33874facde2f93939454549e6122f6"></a><!-- doxytag: member="bgp_open.c::bgp_capability_parse" ref="afa33874facde2f93939454549e6122f6" args="(struct peer *peer, size_t length, u_char **error)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_capability_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char **&#160;</td>
          <td class="paramname"><em>error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00476">476</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
  <span class="keywordtype">size_t</span> end = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a> (s) &gt;= <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
  
  <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) &lt; end)
    {
      <span class="keywordtype">size_t</span> start;
      u_char *sp = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
      <span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> caphdr;
      
      <span class="comment">/* We need at least capability code and capability length. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) + 2 &gt; end)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Capability length error (&lt; header)&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
      <span class="keywordflow">return</span> -1;
    }
      
      caphdr.code = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      caphdr.length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      start = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s);
      
      <span class="comment">/* Capability length check sanity check. */</span>
      <span class="keywordflow">if</span> (start + caphdr.length &gt; end)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Capability length error (&lt; length)&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
      <span class="keywordflow">return</span> -1;
    }
      
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s OPEN has %s capability (%u), length %u&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
           <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a>, caphdr.code),
           caphdr.code, caphdr.length);
      
      <span class="comment">/* Length sanity check, type-specific, for known capabilities */</span>
      <span class="keywordflow">switch</span> (caphdr.code)
        {
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#a07e09db944460c00ce17553a422bde50">CAPABILITY_CODE_REFRESH</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#abdfcbf8f390aa993966f4a08cc7f77ff">CAPABILITY_CODE_RESTART</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#af7e25dec48dabf1526467e366986ce09">CAPABILITY_CODE_AS4</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>:
              <span class="comment">/* Check length. */</span>
              <span class="keywordflow">if</span> (caphdr.length &lt; <a class="code" href="bgp__open_8c.html#a158e272b30276a69c7b63c0b6a6d5fa0">cap_minsizes</a>[caphdr.code])
                {
                  <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s %s Capability length error: got %u,&quot;</span>
                             <span class="stringliteral">&quot; expected at least %u&quot;</span>,
                             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, 
                             <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a>, caphdr.code),
                             caphdr.length, 
                 (<span class="keywordtype">unsigned</span>) <a class="code" href="bgp__open_8c.html#a158e272b30276a69c7b63c0b6a6d5fa0">cap_minsizes</a>[caphdr.code]);
                  <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
                  <span class="keywordflow">return</span> -1;
                }
          <span class="comment">/* we deliberately ignore unknown codes, see below */</span>
          <span class="keywordflow">default</span>:
            <span class="keywordflow">break</span>;
        }
      
      <span class="keywordflow">switch</span> (caphdr.code)
        {
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>:
            {
              <span class="comment">/* Ignore capability when override-capability is set. */</span>
              <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
                {
                  <span class="comment">/* Set negotiated value. */</span>
                  ret = <a class="code" href="bgp__open_8c.html#a6078eb04bd2ba0b8ce6a82faaed3a495">bgp_capability_mp</a> (peer, &amp;caphdr);

                  <span class="comment">/* Unsupported Capability. */</span>
                  <span class="keywordflow">if</span> (ret &lt; 0)
                    {
                      <span class="comment">/* Store return data. */</span>
                      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (*error, sp, caphdr.length + 2);
                      *error += caphdr.length + 2;
                    }
                }
            }
            <span class="keywordflow">break</span>;
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#a07e09db944460c00ce17553a422bde50">CAPABILITY_CODE_REFRESH</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>:
            {
              <span class="comment">/* BGP refresh capability */</span>
              <span class="keywordflow">if</span> (caphdr.code == <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>)
                <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a203dcdd424567bb28755f8e89dc95b41">PEER_CAP_REFRESH_OLD_RCV</a>);
              <span class="keywordflow">else</span>
                <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ac1d6ee4b70cb694a4f70664fe966a014">PEER_CAP_REFRESH_NEW_RCV</a>);
            }
            <span class="keywordflow">break</span>;
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>:
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>:
            <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8c.html#a9cfdb53f8735b756f2b3a867959e93d4">bgp_capability_orf</a> (peer, &amp;caphdr))
              <span class="keywordflow">return</span> -1;
            <span class="keywordflow">break</span>;
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#abdfcbf8f390aa993966f4a08cc7f77ff">CAPABILITY_CODE_RESTART</a>:
            <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8c.html#a3017f16481dfb2fb9d724cdedfbebe4d">bgp_capability_restart</a> (peer, &amp;caphdr))
              <span class="keywordflow">return</span> -1;
            <span class="keywordflow">break</span>;
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>:
            <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a447e0651b433c67ff15ea1fd6a5fb145">PEER_CAP_DYNAMIC_RCV</a>);
            <span class="keywordflow">break</span>;
          <span class="keywordflow">case</span> <a class="code" href="bgp__open_8h.html#af7e25dec48dabf1526467e366986ce09">CAPABILITY_CODE_AS4</a>:
              <span class="comment">/* Already handled as a special-case parsing of the capabilities</span>
<span class="comment">               * at the beginning of OPEN processing. So we care not a jot</span>
<span class="comment">               * for the value really, only error case.</span>
<span class="comment">               */</span>
              <span class="keywordflow">if</span> (!<a class="code" href="bgp__open_8c.html#a4524af929b53672ef491e287e0d33bc1">bgp_capability_as4</a> (peer, &amp;caphdr))
                <span class="keywordflow">return</span> -1;
              <span class="keywordflow">break</span>;            
          <span class="keywordflow">default</span>:
            <span class="keywordflow">if</span> (caphdr.code &gt; 128)
              {
                <span class="comment">/* We don&#39;t send Notification for unknown vendor specific</span>
<span class="comment">                   capabilities.  It seems reasonable for now...  */</span>
                <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s Vendor specific capability %d&quot;</span>,
                           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, caphdr.code);
              }
            <span class="keywordflow">else</span>
              {
                <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s unrecognized capability code: %d - ignored&quot;</span>,
                           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, caphdr.code);
                <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (*error, sp, caphdr.length + 2);
                *error += caphdr.length + 2;
              }
          }
      <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) != (start + caphdr.length))
        {
          <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) &gt; (start + caphdr.length))
            <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s Cap-parser for %s read past cap-length, %u!&quot;</span>,
                       peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a>, caphdr.code),
                       caphdr.length);
          <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (s, start + caphdr.length);
        }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3017f16481dfb2fb9d724cdedfbebe4d"></a><!-- doxytag: member="bgp_open.c::bgp_capability_restart" ref="a3017f16481dfb2fb9d724cdedfbebe4d" args="(struct peer *peer, struct capability_header *caphdr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_capability_restart </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structcapability__header.html">capability_header</a> *&#160;</td>
          <td class="paramname"><em>caphdr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00373">373</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
  u_int16_t restart_flag_time;
  <span class="keywordtype">int</span> restart_bit = 0;
  <span class="keywordtype">size_t</span> end = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + caphdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>;

  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#aab0e7899c7f4ffb2b280a37d9647a061">PEER_CAP_RESTART_RCV</a>);
  restart_flag_time = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a>(s);
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (restart_flag_time, <a class="code" href="bgp__open_8h.html#a35aa17cff1a62e3d629a2b853627c0a7">RESTART_R_BIT</a>))
    restart_bit = 1;
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (restart_flag_time, 0xF000);
  peer-&gt;<a class="code" href="structpeer.html#a52c79d6e660a26c070155a215188c9fb">v_gr_restart</a> = restart_flag_time;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s OPEN has Graceful Restart capability&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Peer has%srestarted. Restart Time : %d&quot;</span>,
                  peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, restart_bit ? <span class="stringliteral">&quot; &quot;</span> : <span class="stringliteral">&quot; not &quot;</span>,
                  peer-&gt;<a class="code" href="structpeer.html#a52c79d6e660a26c070155a215188c9fb">v_gr_restart</a>);
    }

  <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + 4 &lt; end)
    {
      <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
      <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      u_char flag = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      
      <span class="keywordflow">if</span> (!<a class="code" href="bgp__open_8c.html#aa9bd7a6fd45645368bfa07d3a9b4ea7b">bgp_afi_safi_valid_indices</a> (afi, &amp;safi))
        {
          <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Addr-family %d/%d(afi/safi) not supported.&quot;</span>
                        <span class="stringliteral">&quot; Ignore the Graceful Restart capability&quot;</span>,
                        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
        }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
        {
          <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Addr-family %d/%d(afi/safi) not enabled.&quot;</span>
                        <span class="stringliteral">&quot; Ignore the Graceful Restart capability&quot;</span>,
                        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
        }
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Address family %s is%spreserved&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
                        <a class="code" href="bgp__vty_8c.html#a12e00d9262b9e4efc00b5f1216541967">afi_safi_print</a> (afi, safi),
                        <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi],
                                    <a class="code" href="bgpd_8h.html#ab616defb577ded71e32c1b6b6627d66b">PEER_CAP_RESTART_AF_PRESERVE_RCV</a>)
                        ? <span class="stringliteral">&quot; &quot;</span> : <span class="stringliteral">&quot; not &quot;</span>);

          <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae585bd174f4b8a4346359d7240eb886b">PEER_CAP_RESTART_AF_RCV</a>);
          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (flag, <a class="code" href="bgp__open_8h.html#aefb31f75bd08979c2e698025f8ce0194">RESTART_F_BIT</a>))
            <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ab616defb577ded71e32c1b6b6627d66b">PEER_CAP_RESTART_AF_PRESERVE_RCV</a>);
          
        }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5a43544def56619fc4d175b041e5ef9d"></a><!-- doxytag: member="bgp_open.c::bgp_capability_vty_out" ref="a5a43544def56619fc4d175b041e5ef9d" args="(struct vty *vty, struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_capability_vty_out </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00051">51</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">char</span> *pnt;
  <span class="keywordtype">char</span> *end;
  <span class="keyword">struct </span><a class="code" href="structcapability__mp__data.html">capability_mp_data</a> <a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>;
  <span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> *hdr;

  pnt = peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>;
  end = pnt + peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>;
  
  <span class="keywordflow">while</span> (pnt &lt; end)
    {
      <span class="keywordflow">if</span> (pnt + <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcapability__mp__data.html">capability_mp_data</a>) + 2 &gt; end)
    <span class="keywordflow">return</span>;
      
      hdr = (<span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> *)pnt;
      <span class="keywordflow">if</span> (pnt + hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 2 &gt; end)
    <span class="keywordflow">return</span>;

      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>, pnt + 2, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structcapability__mp__data.html">capability_mp_data</a>));

      <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Capability error for: Multi protocol &quot;</span>);

      <span class="keywordflow">switch</span> (ntohs (<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>))
        {
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;AFI IPv4, &quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;AFI IPv6, &quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">default</span>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;AFI Unknown %d, &quot;</span>, ntohs (<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>));
          <span class="keywordflow">break</span>;
        }
      <span class="keywordflow">switch</span> (<a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>)
        {
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;SAFI Unicast&quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;SAFI Multicast&quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="zebra_8h.html#acd7929dcab1201ad7ca0de9cb5b8a06c">SAFI_UNICAST_MULTICAST</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;SAFI Unicast Multicast&quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;SAFI MPLS-VPN&quot;</span>);
          <span class="keywordflow">break</span>;
        <span class="keywordflow">default</span>:
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;SAFI Unknown %d &quot;</span>, <a class="code" href="bgp__open_8h.html#a849bb72e04e6eddb7fe7165025d02baa">mpc</a>.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>);
          <span class="keywordflow">break</span>;
        }
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> &gt;= 128)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Capability error: vendor specific capability code %d&quot;</span>,
         hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Capability error: unknown capability code %d&quot;</span>, 
         hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);

      pnt += hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 2;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa7660eff88133071e216cf984179877e"></a><!-- doxytag: member="bgp_open.c::bgp_open_capability" ref="aa7660eff88133071e216cf984179877e" args="(struct stream *s, struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_open_capability </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00917">917</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char len;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> local_as;

  <span class="comment">/* Remember current pointer for Opt Parm Len. */</span>
  cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);

  <span class="comment">/* Opt Parm Len. */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);

  <span class="comment">/* Do not send capability. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a9a660ebeb4fec952cc45f6945a6f1722">PEER_STATUS_CAPABILITY_OPEN</a>) 
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#ada85e4d818e23466ce970a5c7a079644">PEER_FLAG_DONT_CAPABILITY</a>))
    <span class="keywordflow">return</span>;

  <span class="comment">/* IPv4 unicast. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
    {
      peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = 1;
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, SAFI_UNICAST);
    }
  <span class="comment">/* IPv4 multicast. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
    {
      peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = 1;
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, SAFI_MULTICAST);
    }
  <span class="comment">/* IPv4 VPN */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>])
    {
      peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>] = 1;
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* IPv6 unicast. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST])
    {
      peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = 1;
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, SAFI_UNICAST);
    }
  <span class="comment">/* IPv6 multicast. */</span>
  <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_MULTICAST])
    {
      peer-&gt;<a class="code" href="structpeer.html#a62f0e72c2cc7eaa59235980f81d3bfa6">afc_adv</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = 1;
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, SAFI_MULTICAST);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="comment">/* Route refresh. */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a2794496f1536e05dd62d79c6cecb4cfe">PEER_CAP_REFRESH_ADV</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a> + 2);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a> + 2);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#a07e09db944460c00ce17553a422bde50">CAPABILITY_CODE_REFRESH</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>);

  <span class="comment">/* AS4 */</span>
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ae2c23b08864b92958daa94c84c207f14">PEER_CAP_AS4_ADV</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a> + 2);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af7e25dec48dabf1526467e366986ce09">CAPABILITY_CODE_AS4</a>);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a>);
  <span class="keywordflow">if</span> ( peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a> )
    local_as = peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>;
  <span class="keywordflow">else</span>
    local_as = peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>;
  <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, local_as );

  <span class="comment">/* ORF capability. */</span>
  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a> ; afi++)
    <span class="keywordflow">for</span> (safi = SAFI_UNICAST ; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a> ; safi++)
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
    {
      <a class="code" href="bgp__open_8c.html#a3b54950e6def3c7d8f00732586711819">bgp_open_capability_orf</a> (s, peer, afi, safi, <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>);
      <a class="code" href="bgp__open_8c.html#a3b54950e6def3c7d8f00732586711819">bgp_open_capability_orf</a> (s, peer, afi, safi, <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>);
    }

  <span class="comment">/* Dynamic capability. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#aec4ae3f0b9fa05a2fbcdb91d2528f2d9">PEER_FLAG_DYNAMIC_CAPABILITY</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a3836f3a28c34e009bf7c06d7ea751686">PEER_CAP_DYNAMIC_ADV</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#a1886b055227d09782c5df33e12990979">CAPABILITY_CODE_DYNAMIC_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#a1886b055227d09782c5df33e12990979">CAPABILITY_CODE_DYNAMIC_LEN</a>);
    }

  <span class="comment">/* Graceful restart capability */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a0b3388d8ac73af2d4f4f22e46746da1e">bgp_flag_check</a> (peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>, <a class="code" href="bgpd_8h.html#a339c9ce07a9d3611d2c5f1c4279b58f8">BGP_FLAG_GRACEFUL_RESTART</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a0676dbf05f735073d261e5a01b1c7dcb">PEER_CAP_RESTART_ADV</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac70790714a0c539860e8e8dba37a8990">CAPABILITY_CODE_RESTART_LEN</a> + 2);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#abdfcbf8f390aa993966f4a08cc7f77ff">CAPABILITY_CODE_RESTART</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac70790714a0c539860e8e8dba37a8990">CAPABILITY_CODE_RESTART_LEN</a>);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#aaa8a4745e644e823c03cdc6606645272">restart_time</a>);
     }

  <span class="comment">/* Total Opt Parm Len. */</span>
  len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp - 1;
  <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, cp, len);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3b54950e6def3c7d8f00732586711819"></a><!-- doxytag: member="bgp_open.c::bgp_open_capability_orf" ref="a3b54950e6def3c7d8f00732586711819" args="(struct stream *s, struct peer *peer, afi_t afi, safi_t safi, u_char code)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_open_capability_orf </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00851">851</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char cap_len;
  u_char orf_len;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> capp;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> orfp;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> numberp;
  <span class="keywordtype">int</span> number_of_orfs = 0;

  <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
    safi = <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>;

  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>);
  capp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);           <span class="comment">/* Set Capability Len Pointer */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);                   <span class="comment">/* Capability Length */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);                <span class="comment">/* Capability Code */</span>
  orfp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);           <span class="comment">/* Set ORF Len Pointer */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);                   <span class="comment">/* ORF Length */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, afi);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);
  numberp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);        <span class="comment">/* Set Number Pointer */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);                   <span class="comment">/* Number of ORFs */</span>

  <span class="comment">/* Address Prefix ORF */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
    {
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, (<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a> ?
           <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a> : <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>));

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>)
      &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a5063c677451f9b7f83a0ba3145b0fe65">PEER_FLAG_ORF_PREFIX_RM</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae99d45fd54765fe6d108e85214135de1">PEER_CAP_ORF_PREFIX_SM_ADV</a>);
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#aa073ee4ea1d90b2d2971682f4a373776">PEER_CAP_ORF_PREFIX_RM_ADV</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#aa2f4a41f8868fc7f30256d3b1b9ef724">ORF_MODE_BOTH</a>);
    }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ad491ddb5e6d94d1db07405243d445c54">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a9155d0acea216ef7efa2fc8c706793e3">PEER_FLAG_ORF_PREFIX_SM</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#ae99d45fd54765fe6d108e85214135de1">PEER_CAP_ORF_PREFIX_SM_ADV</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac744fbeb93f5b3cbd74056a7eb69fcab">ORF_MODE_SEND</a>);
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#aa025a735cf6b2d8b85ff9fc974031b8d">af_cap</a>[afi][safi], <a class="code" href="bgpd_8h.html#aa073ee4ea1d90b2d2971682f4a373776">PEER_CAP_ORF_PREFIX_RM_ADV</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ae71faab30e0c630f5cc40e197425bbe7">ORF_MODE_RECEIVE</a>);
    }
      number_of_orfs++;
    }

  <span class="comment">/* Total Number of ORFs. */</span>
  <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, numberp, number_of_orfs);

  <span class="comment">/* Total ORF Len. */</span>
  orf_len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - orfp - 1;
  <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, orfp, orf_len);

  <span class="comment">/* Total Capability Len. */</span>
  cap_len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - capp - 1;
  <a class="code" href="stream_8c.html#a69c37c3d7be1f834141625b2dc450891">stream_putc_at</a> (s, capp, cap_len);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aec7b4d53e9f585305641d2561f7596f0"></a><!-- doxytag: member="bgp_open.c::bgp_open_option_parse" ref="aec7b4d53e9f585305641d2561f7596f0" args="(struct peer *peer, u_char length, int *capability)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_open_option_parse </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>capability</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00725">725</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  u_char *error;
  u_char error_data[<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>];
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a>(peer);
  <span class="keywordtype">size_t</span> end = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;

  ret = 0;
  error = error_data;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcv OPEN w/ OPTION parameter len: %u&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
  
  <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) &lt; end)
    {
      u_char opt_type;
      u_char opt_length;
      
      <span class="comment">/* Must have at least an OPEN option header */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s) &lt; 2)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Option length error&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* Fetch option type and length. */</span>
      opt_type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      opt_length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      
      <span class="comment">/* Option length check. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a> (s) &lt; opt_length)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Option length error&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
      <span class="keywordflow">return</span> -1;
    }

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd OPEN w/ optional parameter type %u (%s) len %u&quot;</span>,
           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, opt_type,
           opt_type == <a class="code" href="bgpd_8h.html#a05e22df979acf7ed556cf85b3734cc2c">BGP_OPEN_OPT_AUTH</a> ? <span class="stringliteral">&quot;Authentication&quot;</span> :
           opt_type == <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a> ? <span class="stringliteral">&quot;Capability&quot;</span> : <span class="stringliteral">&quot;Unknown&quot;</span>,
           opt_length);
  
      <span class="keywordflow">switch</span> (opt_type)
    {
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a05e22df979acf7ed556cf85b3734cc2c">BGP_OPEN_OPT_AUTH</a>:
      ret = <a class="code" href="bgp__open_8c.html#ab924c5c3c3526f626f3f687b2bc6935f">bgp_auth_parse</a> (peer, opt_length);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>:
      ret = <a class="code" href="bgp__open_8c.html#afa33874facde2f93939454549e6122f6">bgp_capability_parse</a> (peer, opt_length, &amp;error);
      *capability = 1;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a2fddbc10056aaf1a667e79c2bdbeff15">BGP_NOTIFY_OPEN_UNSUP_PARAM</a>); 
      ret = -1;
      <span class="keywordflow">break</span>;
    }

      <span class="comment">/* Parse error.  To accumulate all unsupported capability codes,</span>
<span class="comment">         bgp_capability_parse does not return -1 when encounter</span>
<span class="comment">         unsupported capability code.  To detect that, please check</span>
<span class="comment">         error and erro_data pointer, like below.  */</span>
      <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* All OPEN option is parsed.  Check capability when strict compare</span>
<span class="comment">     flag is enabled.*/</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a62b82bf805afe7f03058f7718fb7ae47">PEER_FLAG_STRICT_CAP_MATCH</a>))
    {
      <span class="comment">/* If Unsupported Capability exists. */</span>
      <span class="keywordflow">if</span> (error != error_data)
    {
      <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                     <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
                     <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>, 
                     error_data, error - error_data);
      <span class="keywordflow">return</span> -1;
    }

      <span class="comment">/* Check local capability does not negotiated with remote</span>
<span class="comment">         peer. */</span>
      <span class="keywordflow">if</span> (! <a class="code" href="bgp__open_8c.html#a625bb4f342b079245052ff4b143b0253">strict_capability_same</a> (peer))
    {
      <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
               <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
               <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* Check there is no common capability send Unsupported Capability</span>
<span class="comment">     error. */</span>
  <span class="keywordflow">if</span> (*capability &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
    {
      <span class="keywordflow">if</span> (! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] 
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>]
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>]
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>]
      &amp;&amp; ! peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
    {
      <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Error] No common capability&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);

      <span class="keywordflow">if</span> (error != error_data)

        <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
                       <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
                       <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>, 
                       error_data, error - error_data);
      <span class="keywordflow">else</span>
        <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, 
                 <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
                 <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>);
      <span class="keywordflow">return</span> -1;
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa94f4ded4a8074c681b0e153744fed37"></a><!-- doxytag: member="bgp_open.c::peek_for_as4_capability" ref="aa94f4ded4a8074c681b0e153744fed37" args="(struct peer *peer, u_char length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> peek_for_as4_capability </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00647">647</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="bgpd_8h.html#abf846f0825d89aa4ec6f94985d68d971">BGP_INPUT</a> (peer);
  <span class="keywordtype">size_t</span> orig_getp = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s);
  <span class="keywordtype">size_t</span> end = orig_getp + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4 = 0;
  
  <span class="comment">/* The full capability parser will better flag the error.. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a2ee10df7505e651c986579a9a1fb3d91">STREAM_READABLE</a>(s) &lt; length)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
    <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s [AS4] rcv OPEN w/ OPTION parameter len: %u,&quot;</span>
                <span class="stringliteral">&quot; peeking for as4&quot;</span>,
            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, length);
  <span class="comment">/* the error cases we DONT handle, we ONLY try to read as4 out of</span>
<span class="comment">   * correctly formatted options.</span>
<span class="comment">   */</span>
  <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) &lt; end) 
    {
      u_char opt_type;
      u_char opt_length;
      
      <span class="comment">/* Check the length. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + 2 &gt; end)
        <span class="keywordflow">goto</span> end;
      
      <span class="comment">/* Fetch option type and length. */</span>
      opt_type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      opt_length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      
      <span class="comment">/* Option length check. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + opt_length &gt; end)
        <span class="keywordflow">goto</span> end;
      
      <span class="keywordflow">if</span> (opt_type == <a class="code" href="bgpd_8h.html#a65054a60fd0065be6383eee23b3e2b97">BGP_OPEN_OPT_CAP</a>)
        {
          <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> capd_start = <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s);
          <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> capd_end = capd_start + opt_length;
          
          <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (capd_end &lt;= end);
          
      <span class="keywordflow">while</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) &lt; capd_end)
        {
          <span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> hdr;
          
          <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s) + 2 &gt; capd_end)
                <span class="keywordflow">goto</span> end;
              
              hdr.<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
              hdr.length = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
              
          <span class="keywordflow">if</span> ((<a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a>(s) +  hdr.length) &gt; capd_end)
        <span class="keywordflow">goto</span> end;

          <span class="keywordflow">if</span> (hdr.code == <a class="code" href="bgp__open_8h.html#af7e25dec48dabf1526467e366986ce09">CAPABILITY_CODE_AS4</a>)
            {
              <span class="keywordflow">if</span> (hdr.length != <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a>)
                <span class="keywordflow">goto</span> end;
                  
              <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
                <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;[AS4] found AS4 capability, about to parse&quot;</span>);
              as4 = <a class="code" href="bgp__open_8c.html#a4524af929b53672ef491e287e0d33bc1">bgp_capability_as4</a> (peer, &amp;hdr);
              
              <span class="keywordflow">goto</span> end;
                }
              <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, hdr.length);
        }
    }
    }

end:
  <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (s, orig_getp);
  <span class="keywordflow">return</span> as4;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a625bb4f342b079245052ff4b143b0253"></a><!-- doxytag: member="bgp_open.c::strict_capability_same" ref="a625bb4f342b079245052ff4b143b0253" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int strict_capability_same </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00632">632</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;

  <span class="keywordflow">for</span> (i = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; i &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; i++)
    <span class="keywordflow">for</span> (j = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; j &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; j++)
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[i][j] != peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[i][j])
    <span class="keywordflow">return</span> 0;
  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a158e272b30276a69c7b63c0b6a6d5fa0"></a><!-- doxytag: member="bgp_open.c::cap_minsizes" ref="a158e272b30276a69c7b63c0b6a6d5fa0" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const size_t <a class="el" href="bgp__open_8c.html#a158e272b30276a69c7b63c0b6a6d5fa0">cap_minsizes</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> 
{
  [<a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>]      = <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structcapability__mp__data.html">capability_mp_data</a>),
  [<a class="code" href="bgp__open_8h.html#a07e09db944460c00ce17553a422bde50">CAPABILITY_CODE_REFRESH</a>] = <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>,
  [<a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>]     = <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a>),
  [<a class="code" href="bgp__open_8h.html#abdfcbf8f390aa993966f4a08cc7f77ff">CAPABILITY_CODE_RESTART</a>] = <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structcapability__gr.html">capability_gr</a>),
  [<a class="code" href="bgp__open_8h.html#af7e25dec48dabf1526467e366986ce09">CAPABILITY_CODE_AS4</a>]     = <a class="code" href="bgp__open_8h.html#a27d06bf4df5c59af5de5b2cbecafd0e6">CAPABILITY_CODE_AS4_LEN</a>,
  [<a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>] = <a class="code" href="bgp__open_8h.html#a1886b055227d09782c5df33e12990979">CAPABILITY_CODE_DYNAMIC_LEN</a>,
  [<a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>] = <a class="code" href="bgp__open_8h.html#afa15c5ba9cddb4c4b02e11da502efa96">CAPABILITY_CODE_REFRESH_LEN</a>,
  [<a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>] = <span class="keyword">sizeof</span> (<span class="keyword">struct </span><a class="code" href="structcapability__orf__entry.html">capability_orf_entry</a>),
}
</pre></div>
<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00460">460</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>

</div>
</div>
<a class="anchor" id="a284b5baccdbdf9dce39dfc6413c222ee"></a><!-- doxytag: member="bgp_open.c::capcode_str" ref="a284b5baccdbdf9dce39dfc6413c222ee" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structmessage.html">message</a> <a class="el" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
  { <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>,         <span class="stringliteral">&quot;MultiProtocol Extensions&quot;</span>  },
  { <a class="code" href="bgp__open_8h.html#a07e09db944460c00ce17553a422bde50">CAPABILITY_CODE_REFRESH</a>,        <span class="stringliteral">&quot;Route Refresh&quot;</span>         },
  { <a class="code" href="bgp__open_8h.html#a78d317d93115b2facd3716c3da07c41a">CAPABILITY_CODE_ORF</a>,        <span class="stringliteral">&quot;Cooperative Route Filtering&quot;</span>   },
  { <a class="code" href="bgp__open_8h.html#abdfcbf8f390aa993966f4a08cc7f77ff">CAPABILITY_CODE_RESTART</a>,        <span class="stringliteral">&quot;Graceful Restart&quot;</span>      },
  { <a class="code" href="bgp__open_8h.html#af7e25dec48dabf1526467e366986ce09">CAPABILITY_CODE_AS4</a>,        <span class="stringliteral">&quot;4-octet AS number&quot;</span>     },
  { <a class="code" href="bgp__open_8h.html#adee9e025a4ec121fcff64466c831dbce">CAPABILITY_CODE_DYNAMIC</a>,        <span class="stringliteral">&quot;Dynamic&quot;</span>           },
  { <a class="code" href="bgp__open_8h.html#ad0caa87c9bae6226b4104c55e466196f">CAPABILITY_CODE_REFRESH_OLD</a>,    <span class="stringliteral">&quot;Route Refresh (Old)&quot;</span>       },
  { <a class="code" href="bgp__open_8h.html#aa39dc1dd275949d2445a9d3a02facb9a">CAPABILITY_CODE_ORF_OLD</a>,        <span class="stringliteral">&quot;ORF (Old)&quot;</span>         },
}
</pre></div>
<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00446">446</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>

</div>
</div>
<a class="anchor" id="aa119d7cf01582578882c891ffa24bf79"></a><!-- doxytag: member="bgp_open.c::capcode_str_max" ref="aa119d7cf01582578882c891ffa24bf79" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="bgp__open_8c.html#aa119d7cf01582578882c891ffa24bf79">capcode_str_max</a> = sizeof(<a class="el" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a>)/sizeof(<a class="el" href="bgp__open_8c.html#a284b5baccdbdf9dce39dfc6413c222ee">capcode_str</a>[0])<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00457">457</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>

</div>
</div>
<a class="anchor" id="a0b54ccc41572c2cc034233d8e35b6ed0"></a><!-- doxytag: member="bgp_open.c::orf_mode_str" ref="a0b54ccc41572c2cc034233d8e35b6ed0" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structmessage.html">message</a> <a class="el" href="bgp__open_8c.html#a0b54ccc41572c2cc034233d8e35b6ed0">orf_mode_str</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
  { <a class="code" href="bgp__open_8h.html#ae71faab30e0c630f5cc40e197425bbe7">ORF_MODE_RECEIVE</a>,   <span class="stringliteral">&quot;Receive&quot;</span>   },
  { <a class="code" href="bgp__open_8h.html#ac744fbeb93f5b3cbd74056a7eb69fcab">ORF_MODE_SEND</a>,  <span class="stringliteral">&quot;Send&quot;</span>      },
  { <a class="code" href="bgp__open_8h.html#aa2f4a41f8868fc7f30256d3b1b9ef724">ORF_MODE_BOTH</a>,  <span class="stringliteral">&quot;Both&quot;</span>      },
}
</pre></div>
<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00205">205</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>

</div>
</div>
<a class="anchor" id="a3a439aa2a262a971a61e8574e5f877de"></a><!-- doxytag: member="bgp_open.c::orf_mode_str_max" ref="a3a439aa2a262a971a61e8574e5f877de" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="bgp__open_8c.html#a3a439aa2a262a971a61e8574e5f877de">orf_mode_str_max</a> = sizeof(<a class="el" href="bgp__open_8c.html#a0b54ccc41572c2cc034233d8e35b6ed0">orf_mode_str</a>)/sizeof(<a class="el" href="bgp__open_8c.html#a0b54ccc41572c2cc034233d8e35b6ed0">orf_mode_str</a>[0])<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00212">212</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>

</div>
</div>
<a class="anchor" id="a0a6d13f3a7d2d21ec548ef4812df2dcc"></a><!-- doxytag: member="bgp_open.c::orf_type_str" ref="a0a6d13f3a7d2d21ec548ef4812df2dcc" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structmessage.html">message</a> <a class="el" href="bgp__open_8c.html#a0a6d13f3a7d2d21ec548ef4812df2dcc">orf_type_str</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
  { <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>,        <span class="stringliteral">&quot;Prefixlist&quot;</span>        },
  { <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>,    <span class="stringliteral">&quot;Prefixlist (old)&quot;</span>  },
}
</pre></div>
<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00197">197</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>

</div>
</div>
<a class="anchor" id="a9bd4bc1212ba9d4f365d4178abd688ec"></a><!-- doxytag: member="bgp_open.c::orf_type_str_max" ref="a9bd4bc1212ba9d4f365d4178abd688ec" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="bgp__open_8c.html#a9bd4bc1212ba9d4f365d4178abd688ec">orf_type_str_max</a> = sizeof(<a class="el" href="bgp__open_8c.html#a0a6d13f3a7d2d21ec548ef4812df2dcc">orf_type_str</a>)/sizeof(<a class="el" href="bgp__open_8c.html#a0a6d13f3a7d2d21ec548ef4812df2dcc">orf_type_str</a>[0])<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__open_8c_source.html#l00203">203</a> of file <a class="el" href="bgp__open_8c_source.html">bgp_open.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__open_8c.html">bgp_open.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:12 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
