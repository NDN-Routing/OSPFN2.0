<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfn/tables.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('tables_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ospfn/tables.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="tables_8h_source.html">tables.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="jhash_8h_source.html">jhash.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ccn__fib_8h_source.html">ccn_fib.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospfn_8h_source.html">ospfn.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="utility_8h_source.html">utility.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for tables.c:</div>
<div class="dyncontent">
<div class="center"><img src="tables_8c__incl.png" border="0" usemap="#ospfn_2tables_8c" alt=""/></div>
<map name="ospfn_2tables_8c" id="ospfn_2tables_8c">
<area shape="rect" id="node3" href="tables_8h.html" title="tables.h" alt="" coords="2299,155,2369,181"/><area shape="rect" id="node99" href="jhash_8h.html" title="jhash.h" alt="" coords="2482,80,2547,107"/><area shape="rect" id="node101" href="ccn__fib_8h.html" title="ccn_fib.h" alt="" coords="2571,80,2647,107"/><area shape="rect" id="node103" href="ospfn_8h.html" title="ospfn.h" alt="" coords="2391,80,2457,107"/><area shape="rect" id="node109" href="utility_8h.html" title="utility.h" alt="" coords="2672,80,2739,107"/><area shape="rect" id="node5" href="zebra_8h.html" title="zebra.h" alt="" coords="1575,304,1641,331"/><area shape="rect" id="node67" href="hash_8h.html" title="hash.h" alt="" coords="2185,229,2247,256"/><area shape="rect" id="node69" href="memory_8h.html" title="memory.h" alt="" coords="2372,229,2455,256"/><area shape="rect" id="node71" href="memtypes_8h.html" title="lib/memtypes.h" alt="" coords="2331,304,2445,331"/><area shape="rect" id="node74" href="prefix_8h.html" title="lib/prefix.h" alt="" coords="2909,379,2995,405"/><area shape="rect" id="node78" href="ospfd_8h.html" title="ospfd/ospfd.h" alt="" coords="2055,229,2161,256"/><area shape="rect" id="node88" href="ospf__asbr_8h.html" title="ospfd/ospf_asbr.h" alt="" coords="2529,229,2660,256"/><area shape="rect" id="node90" href="ospf__lsa_8h.html" title="ospfd/ospf_lsa.h" alt="" coords="2788,229,2911,256"/><area shape="rect" id="node95" href="ospf__apiclient_8h.html" title="ospfclient/ospf_apiclient.h" alt="" coords="2935,229,3116,256"/><area shape="rect" id="node59" href="zassert_8h.html" title="zassert.h" alt="" coords="1963,379,2040,405"/><area shape="rect" id="node61" href="str_8h.html" title="str.h" alt="" coords="2065,379,2113,405"/><area shape="rect" id="node76" href="sockunion_8h.html" title="sockunion.h" alt="" coords="2905,453,2999,480"/><area shape="rect" id="node81" href="filter_8h.html" title="filter.h" alt="" coords="2179,304,2239,331"/><area shape="rect" id="node85" href="log_8h.html" title="log.h" alt="" coords="2090,304,2141,331"/><area shape="rect" id="node83" href="if_8h.html" title="if.h" alt="" coords="2757,379,2797,405"/><area shape="rect" id="node92" href="stream_8h.html" title="stream.h" alt="" coords="2880,304,2955,331"/><area shape="rect" id="node105" href="thread_8h.html" title="thread.h" alt="" coords="2395,155,2467,181"/></map>
</div>
</div>
<p><a href="tables_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#ae588e397cd2770893df9ce89de74a575">hash_iterate_delete_npt</a> (struct <a class="el" href="structhash.html">hash</a> *<a class="el" href="structhash.html">hash</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a60bcad16e2650d142745599b2a714c3b">origin_key_make</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a5c6cfa6ea16144b5c3189cbcd62a9b87">origin_cmp</a> (const void *p1, const void *p2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#af4c76e13bff01c7efed48c6108204a62">origin_hash_alloc</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structhash.html">hash</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#add6c0fe390d5f97c17cfc9e92748b131">origin_hash_create</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structorigintable__entry.html">origintable_entry</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a9280c0dda73eb6928b5d642613a8606e">origin_hash_get</a> (struct <a class="el" href="structhash.html">hash</a> *<a class="el" href="structhash.html">hash</a>, struct in_addr *router_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a925d9cc75b8eb786bb63ba9e3fe78446">insert_nexthop_to_list</a> (struct <a class="el" href="structnexthop__entry.html">nexthop_entry</a> **nexthop_list, struct in_addr <a class="el" href="structnexthop.html">nexthop</a>, unsigned int cost, unsigned int flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#acd54585ee45c2c196ac31ed2d700ec1e">insert_origin_to_list</a> (struct <a class="el" href="structorigin__entry.html">origin_entry</a> **origin_list, struct in_addr *origin)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a479de5c31bdd13a35eb0c0effc6ecca9">delete_origin_from_list</a> (struct <a class="el" href="structorigin__entry.html">origin_entry</a> **origin_list, struct in_addr *origin)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#ae5b8d871068781ca35b917da0016d3af">insert_name_prefix_to_list</a> (struct <a class="el" href="structnameprefix__entry.html">nameprefix_entry</a> **nameprefix_list, struct <a class="el" href="structname__prefix.html">name_prefix</a> *<a class="el" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a058986647d6cd079aff65c3ea3d3be52">delete_name_prefix_from_list</a> (struct <a class="el" href="structnameprefix__entry.html">nameprefix_entry</a> **nameprefix_list, struct <a class="el" href="structname__prefix.html">name_prefix</a> *<a class="el" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a54a573422a4af5227710ed6e52a3301c">update_origin_nexthop_list</a> (struct <a class="el" href="structorigintable__entry.html">origintable_entry</a> *oe, int nexthop_count, struct in_addr *nexthops)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#af1bdc2dba7f310d6cf6ff1ba6b25e2ec">prefix_key_make</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a287f8bafbabf543f6e88f3f48b8b8e61">prefix_compare</a> (const void *p1, const void *p2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#acf7adb54b4a2bdf16ebd559dfe238287">prefix_hash_alloc</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structhash.html">hash</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a3c9c026f80f12156cd635307ed718fd2">prefix_hash_create</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structprefixtable__entry.html">prefixtable_entry</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a0f103ceb397b188297a6e6ccc9bbe508">prefix_hash_get</a> (struct <a class="el" href="structhash.html">hash</a> *<a class="el" href="structhash.html">hash</a>, struct <a class="el" href="structname__prefix.html">name_prefix</a> *nameprefix)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a0fe3362bd7ab51d6746ff0b674445e46">update_name_prefix_nexthop_list</a> (struct <a class="el" href="structprefixtable__entry.html">prefixtable_entry</a> *fe, struct <a class="el" href="structhash.html">hash</a> *origin_table)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#a059197a29c1bd0ac5f23df6e4baf93c5">add_new_name_prefix</a> (struct <a class="el" href="structospf__apiclient.html">ospf_apiclient</a> *<a class="el" href="ospfclient_8c.html#ae5e9b6a994307efccbb6ab8b2eb0077a">oclient</a>, struct <a class="el" href="structhash.html">hash</a> *prefix_table, struct <a class="el" href="structname__prefix.html">name_prefix</a> *<a class="el" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>, struct <a class="el" href="structhash.html">hash</a> *origin_table, struct in_addr *origin)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tables_8c.html#ad68f0e3d2ad64f273fe979cecb83a0dc">delete_name_prefix</a> (struct <a class="el" href="structhash.html">hash</a> *prefix_table, struct <a class="el" href="structname__prefix.html">name_prefix</a> *<a class="el" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>, struct <a class="el" href="structhash.html">hash</a> *origin_table, struct in_addr *origin)</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a059197a29c1bd0ac5f23df6e4baf93c5"></a><!-- doxytag: member="tables.c::add_new_name_prefix" ref="a059197a29c1bd0ac5f23df6e4baf93c5" args="(struct ospf_apiclient *oclient, struct hash *prefix_table, struct name_prefix *np, struct hash *origin_table, struct in_addr *origin)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_new_name_prefix </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__apiclient.html">ospf_apiclient</a> *&#160;</td>
          <td class="paramname"><em>oclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structhash.html">hash</a> *&#160;</td>
          <td class="paramname"><em>prefix_table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structname__prefix.html">name_prefix</a> *&#160;</td>
          <td class="paramname"><em>np</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structhash.html">hash</a> *&#160;</td>
          <td class="paramname"><em>origin_table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>origin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00499">499</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structprefixtable__entry.html">prefixtable_entry</a> *fe;
    <span class="keyword">struct </span><a class="code" href="structorigintable__entry.html">origintable_entry</a> *oe;
    <span class="keywordtype">int</span> rc;

    fe = <a class="code" href="tables_8c.html#a0f103ceb397b188297a6e6ccc9bbe508">prefix_hash_get</a>(prefix_table, np);
    <a class="code" href="tables_8c.html#acd54585ee45c2c196ac31ed2d700ec1e" title="returns number of items inserted: 0 if item already exists, 1 otherwise">insert_origin_to_list</a>(&amp;fe-&gt;<a class="code" href="structprefixtable__entry.html#aa80be357ff711807995e204be77f67a1">origin_list</a>, <a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>);

    oe = <a class="code" href="tables_8c.html#a9280c0dda73eb6928b5d642613a8606e">origin_hash_get</a>(origin_table, <a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>);
    <a class="code" href="tables_8c.html#ae5b8d871068781ca35b917da0016d3af" title="returns number of items inserted: 0 if item already exists, 1 otherwise">insert_name_prefix_to_list</a>(&amp;oe-&gt;<a class="code" href="structorigintable__entry.html#a5e8d3d0ead4dc2aa2e4c11c110f163e2">nameprefix_list</a>, np);

    <span class="keywordflow">if</span> (oe-&gt;<a class="code" href="structorigintable__entry.html#a95e2feeb6551e67c00dae76208403ae0">nexthop_list</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {   
        rc=<a class="code" href="ospf__apiclient_8c.html#aa1030e129533ccab57fad62fcdece78f">ospf_apiclient_get_router_nexthops</a>(oclient, *<a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>);
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Return from nexthop query: %d\n&quot;</span>,rc);  
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Nexthop Null for origin: %s and prefix: %s\n&quot;</span>,inet_ntoa(*<a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>),np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>);    
    }   
    <span class="keywordflow">else</span>
        <a class="code" href="tables_8c.html#a0fe3362bd7ab51d6746ff0b674445e46">update_name_prefix_nexthop_list</a>(fe, origin_table);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad68f0e3d2ad64f273fe979cecb83a0dc"></a><!-- doxytag: member="tables.c::delete_name_prefix" ref="ad68f0e3d2ad64f273fe979cecb83a0dc" args="(struct hash *prefix_table, struct name_prefix *np, struct hash *origin_table, struct in_addr *origin)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void delete_name_prefix </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structhash.html">hash</a> *&#160;</td>
          <td class="paramname"><em>prefix_table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structname__prefix.html">name_prefix</a> *&#160;</td>
          <td class="paramname"><em>np</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structhash.html">hash</a> *&#160;</td>
          <td class="paramname"><em>origin_table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>origin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00523">523</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structprefixtable__entry.html">prefixtable_entry</a> *fe;
    <span class="keyword">struct </span><a class="code" href="structorigintable__entry.html">origintable_entry</a> *oe;
    <span class="keywordtype">int</span> res;
    fe = <a class="code" href="tables_8c.html#a0f103ceb397b188297a6e6ccc9bbe508">prefix_hash_get</a>(prefix_table, np);
    res = <a class="code" href="tables_8c.html#a479de5c31bdd13a35eb0c0effc6ecca9" title="returns number of items deleted: 0 if item does not exist, 1 otherwise">delete_origin_from_list</a>(&amp;fe-&gt;<a class="code" href="structprefixtable__entry.html#aa80be357ff711807995e204be77f67a1">origin_list</a>, <a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>);
    <span class="keywordflow">if</span> (res == 0)
    {
        printf(<span class="stringliteral">&quot;Error: origin %s does not exist\n&quot;</span>, inet_ntoa(*<a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>));
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Error: origin %s does not exist\n&quot;</span>,inet_ntoa(*<a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>)); 
    }
    oe = <a class="code" href="tables_8c.html#a9280c0dda73eb6928b5d642613a8606e">origin_hash_get</a>(origin_table, <a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>);
    res = <a class="code" href="tables_8c.html#a058986647d6cd079aff65c3ea3d3be52" title="returns number of items deleted: 0 if item does not exist, 1 otherwise">delete_name_prefix_from_list</a>(&amp;oe-&gt;<a class="code" href="structorigintable__entry.html#a5e8d3d0ead4dc2aa2e4c11c110f163e2">nameprefix_list</a>, np);
    <span class="keywordflow">if</span> (res == 0)
    {
        printf(<span class="stringliteral">&quot;Error: name prefix %s does not exist\n&quot;</span>,(<span class="keywordtype">char</span> *) np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>);
        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Error: name prefix %s does not exist\n&quot;</span>,(<span class="keywordtype">char</span> *) np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>); 
    }
    <a class="code" href="tables_8c.html#a0fe3362bd7ab51d6746ff0b674445e46">update_name_prefix_nexthop_list</a>(fe, origin_table);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a058986647d6cd079aff65c3ea3d3be52"></a><!-- doxytag: member="tables.c::delete_name_prefix_from_list" ref="a058986647d6cd079aff65c3ea3d3be52" args="(struct nameprefix_entry **nameprefix_list, struct name_prefix *np)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int delete_name_prefix_from_list </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structnameprefix__entry.html">nameprefix_entry</a> **&#160;</td>
          <td class="paramname"><em>nameprefix_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structname__prefix.html">name_prefix</a> *&#160;</td>
          <td class="paramname"><em>np</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>returns number of items deleted: 0 if item does not exist, 1 otherwise </p>

<p>Definition at line <a class="el" href="tables_8c_source.html#l00326">326</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structnameprefix__entry.html">nameprefix_entry</a> *prev, *cur;
    <span class="keywordtype">int</span> result = 1;

    prev = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    cur = *nameprefix_list;

    <span class="keywordflow">while</span> (cur &amp;&amp; strcmp((<span class="keywordtype">char</span> *)cur-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, (<span class="keywordtype">char</span> *)np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>) &lt; 0)
    {
        prev = cur;
        cur = cur-&gt;<a class="code" href="structnameprefix__entry.html#a558a571c4edb4b21cfcd461bfbe3c708">next</a>;
    }

    <span class="comment">//found</span>
    <span class="keywordflow">if</span> (cur &amp;&amp; strcmp((<span class="keywordtype">char</span> *)cur-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, (<span class="keywordtype">char</span> *)np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>) == 0)
    {
        <span class="keywordflow">if</span> (prev == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
            *nameprefix_list = cur-&gt;<a class="code" href="structnameprefix__entry.html#a558a571c4edb4b21cfcd461bfbe3c708">next</a>;
        <span class="keywordflow">else</span>
            prev-&gt;<a class="code" href="structnameprefix__entry.html#a558a571c4edb4b21cfcd461bfbe3c708">next</a> = cur-&gt;<a class="code" href="structnameprefix__entry.html#a558a571c4edb4b21cfcd461bfbe3c708">next</a>;

        free(cur-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>);
        free(cur-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>);
        free(cur);
    }
    <span class="keywordflow">else</span>
        result = 0;

    <span class="keywordflow">return</span> result;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a479de5c31bdd13a35eb0c0effc6ecca9"></a><!-- doxytag: member="tables.c::delete_origin_from_list" ref="a479de5c31bdd13a35eb0c0effc6ecca9" args="(struct origin_entry **origin_list, struct in_addr *origin)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int delete_origin_from_list </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structorigin__entry.html">origin_entry</a> **&#160;</td>
          <td class="paramname"><em>origin_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>origin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>returns number of items deleted: 0 if item does not exist, 1 otherwise </p>

<p>Definition at line <a class="el" href="tables_8c_source.html#l00232">232</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structorigin__entry.html">origin_entry</a> *prev, *cur;
    <span class="keywordtype">int</span> result = 1;

    prev = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    cur = *origin_list;

    <span class="keywordflow">while</span> (cur &amp;&amp; cur-&gt;<a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>.s_addr &lt; <a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>-&gt;s_addr)
    {
        prev = cur;
        cur = cur-&gt;<a class="code" href="structorigin__entry.html#adcb58a6eeca4c11df58f4c407333f9fc">next</a>;
    }

    <span class="comment">//found</span>
    <span class="keywordflow">if</span> (cur &amp;&amp; cur-&gt;<a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>.s_addr == <a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>-&gt;s_addr)
    {
        <span class="keywordflow">if</span> (prev == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
            *origin_list = cur-&gt;<a class="code" href="structorigin__entry.html#adcb58a6eeca4c11df58f4c407333f9fc">next</a>;
        <span class="keywordflow">else</span>
            prev-&gt;<a class="code" href="structorigin__entry.html#adcb58a6eeca4c11df58f4c407333f9fc">next</a> = cur-&gt;<a class="code" href="structorigin__entry.html#adcb58a6eeca4c11df58f4c407333f9fc">next</a>;

        free(cur);
    }
    <span class="keywordflow">else</span>
        result = 0;

    <span class="keywordflow">return</span> result;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae588e397cd2770893df9ce89de74a575"></a><!-- doxytag: member="tables.c::hash_iterate_delete_npt" ref="ae588e397cd2770893df9ce89de74a575" args="(struct hash *hash)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void hash_iterate_delete_npt </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structhash.html">hash</a> *&#160;</td>
          <td class="paramname"><em>hash</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>delete ccnd fib entry for every name prefix entry in name prefix table </p>

<p>Definition at line <a class="el" href="tables_8c_source.html#l00024">24</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">                                           {
    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>,<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>,no_element;
    <span class="keyword">struct </span><a class="code" href="structhash__backet.html">hash_backet</a> *hb;
    <span class="keyword">struct </span><a class="code" href="structhash__backet.html">hash_backet</a> *hbnext;
    no_element=<a class="code" href="ospfn_8c.html#a60602d3928887dde138c9ca08a00cb1d" title="Return number of multipath configured.">no_nexthop</a>();    
 
    <span class="keywordflow">for</span> (i = 0; i &lt; hash-&gt;<a class="code" href="structhash.html#ad58883cffca7225da64e2569ada98ffb">size</a>; i++)
    {
            <span class="keywordflow">for</span> (hb = hash-&gt;<a class="code" href="structhash.html#af24bbe9e489e72de831e1b2b6b791e13">index</a>[i]; hb; hb = hbnext)
        {
            <span class="keyword">struct </span><a class="code" href="structprefixtable__entry.html">prefixtable_entry</a> *pte = (<span class="keyword">struct </span><a class="code" href="structprefixtable__entry.html">prefixtable_entry</a> *)hb-&gt;<a class="code" href="structhash__backet.html#a5bc766458545b915943873cbac480749">data</a>;
            <span class="keyword">struct</span> <a class="code" href="structnexthop__entry.html">nexthop_entry</a> *n1 = pte-&gt;<a class="code" href="structprefixtable__entry.html#aa06013126ea99e3289804e09ed74dbf4">nexthop_list</a>; <span class="comment">// get the pointer of next hop list</span>
            
            <span class="keywordflow">while</span>(n1)
            {
                <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;Deleting FIB prefix: Name: %s, Next Hop: %s, cost: %d, flag: %d\n&quot;</span>,pte-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, inet_ntoa(n1-&gt;nexthop),n1-&gt;cost, n1-&gt;flag);
                <span class="keywordflow">if</span>(!<a class="code" href="ospfn_8c.html#a9ce07a695e675b6b320ac3d132cb5966" title="Check existence of address in multipath nexthop.">is_nexthop</a>(inet_ntoa(n1-&gt;nexthop))) 
                    <a class="code" href="ccn__fib_8c.html#a12135bbf63b584d60aa46bd61c0607fd" title="Delete a ccn face for a name prefix.">delete_ccn_face</a>(<a class="code" href="tables_8h.html#aa9a48f1b9a2007cd3c6be74ca4f5c9d4">ccn_handle</a>, (<span class="keywordtype">char</span> *)pte-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, inet_ntoa(n1-&gt;nexthop), 9695); 
                n1 = n1-&gt;next;
            }
            <span class="keywordflow">for</span>(j=1;j&lt;=no_element;j++)
                <a class="code" href="ccn__fib_8c.html#a12135bbf63b584d60aa46bd61c0607fd" title="Delete a ccn face for a name prefix.">delete_ccn_face</a>(<a class="code" href="tables_8h.html#aa9a48f1b9a2007cd3c6be74ca4f5c9d4">ccn_handle</a>, (<span class="keywordtype">char</span> *)pte-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, inet_ntoa(<a class="code" href="ospfn_8c.html#a8fc6479763cc8f9d5f1253e3aa1baf34" title="Return nexthop from multipath from a position.">pop_nexthop_from_position</a>(j)),9695);
    
            hbnext = hb-&gt;<a class="code" href="structhash__backet.html#aa074298b0abc2d712d04dba0070f34cf">next</a>;
        }
    }
 }
</pre></div>
</div>
</div>
<a class="anchor" id="ae5b8d871068781ca35b917da0016d3af"></a><!-- doxytag: member="tables.c::insert_name_prefix_to_list" ref="ae5b8d871068781ca35b917da0016d3af" args="(struct nameprefix_entry **nameprefix_list, struct name_prefix *np)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int insert_name_prefix_to_list </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structnameprefix__entry.html">nameprefix_entry</a> **&#160;</td>
          <td class="paramname"><em>nameprefix_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structname__prefix.html">name_prefix</a> *&#160;</td>
          <td class="paramname"><em>np</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>returns number of items inserted: 0 if item already exists, 1 otherwise </p>

<p>Definition at line <a class="el" href="tables_8c_source.html#l00268">268</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structnameprefix__entry.html">nameprefix_entry</a> *ne, *prev, *cur;
    <span class="keywordtype">int</span> result = 1;

    ne = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structnameprefix__entry.html">nameprefix_entry</a>));
    ne-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a> = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structname__prefix.html">name_prefix</a>));
    ne-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a045d9a308f8dc8263eceeb130f8123cc">limit</a> = np-&gt;<a class="code" href="structname__prefix.html#a045d9a308f8dc8263eceeb130f8123cc">limit</a>;
    ne-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a> = np-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a>;
    ne-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a> = (u_char *)strdup((<span class="keywordtype">char</span> *)np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>);

    <span class="keywordflow">if</span> (*nameprefix_list == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        ne-&gt;<a class="code" href="structnameprefix__entry.html#a558a571c4edb4b21cfcd461bfbe3c708">next</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        *nameprefix_list = ne;
    }
    <span class="keywordflow">else</span>
    {
        prev = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        cur = *nameprefix_list;

        <span class="keywordflow">while</span> (cur &amp;&amp; strcmp((<span class="keywordtype">char</span> *)cur-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, (<span class="keywordtype">char</span> *)np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>) &lt; 0)
        {
            prev = cur;
            cur = cur-&gt;<a class="code" href="structnameprefix__entry.html#a558a571c4edb4b21cfcd461bfbe3c708">next</a>;
        }

        <span class="comment">//nexthop already exists</span>
        <span class="keywordflow">if</span> (cur &amp;&amp; strcmp((<span class="keywordtype">char</span> *)cur-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, (<span class="keywordtype">char</span> *)np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>) == 0)
        {
            result = 0;
            free(ne-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>);
            free(ne-&gt;<a class="code" href="structnameprefix__entry.html#a0310758993ae57507bb1ea90e25e499f">nameprefix</a>);
            free(ne);
        }
        <span class="keywordflow">else</span>
        {
            <span class="keywordflow">if</span> (prev == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
            {
                *nameprefix_list = ne;
                ne-&gt;<a class="code" href="structnameprefix__entry.html#a558a571c4edb4b21cfcd461bfbe3c708">next</a> = cur;
            }
            <span class="keywordflow">else</span>
            {
                prev-&gt;<a class="code" href="structnameprefix__entry.html#a558a571c4edb4b21cfcd461bfbe3c708">next</a> = ne;
                ne-&gt;<a class="code" href="structnameprefix__entry.html#a558a571c4edb4b21cfcd461bfbe3c708">next</a> = cur;
            }
        }
    }

    <span class="keywordflow">return</span> result;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a925d9cc75b8eb786bb63ba9e3fe78446"></a><!-- doxytag: member="tables.c::insert_nexthop_to_list" ref="a925d9cc75b8eb786bb63ba9e3fe78446" args="(struct nexthop_entry **nexthop_list, struct in_addr nexthop, unsigned int cost, unsigned int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int insert_nexthop_to_list </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structnexthop__entry.html">nexthop_entry</a> **&#160;</td>
          <td class="paramname"><em>nexthop_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>nexthop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>cost</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>returns number of items inserted: 0 if item already exists, 1 otherwise </p>

<p>Definition at line <a class="el" href="tables_8c_source.html#l00124">124</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structnexthop__entry.html">nexthop_entry</a> *nhe, *prev, *cur;
    <span class="keywordtype">int</span> result = 1;

    nhe = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structnexthop__entry.html">nexthop_entry</a>));
    nhe-&gt;<a class="code" href="structnexthop__entry.html#a688bf3a22dbd8fa6791b1ef1e65700b1">nexthop</a>.s_addr = <a class="code" href="structnexthop.html">nexthop</a>.s_addr;
    nhe-&gt;<a class="code" href="structnexthop__entry.html#a559c53461d8120dab0642dd18ad73ffd">cost</a> = <a class="code" href="structnexthop__entry.html#a559c53461d8120dab0642dd18ad73ffd">cost</a>;
    nhe-&gt;<a class="code" href="structnexthop__entry.html#a94e31e4dbdee1b03cad66448a4361167">flag</a> = <a class="code" href="structnexthop__entry.html#a94e31e4dbdee1b03cad66448a4361167">flag</a>;

    <span class="keywordflow">if</span> (*nexthop_list == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        nhe-&gt;<a class="code" href="structnexthop__entry.html#ac16569e8074915cc3a48a8bd1b43a05f">next</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        *nexthop_list = nhe;
    }
    <span class="keywordflow">else</span>
    {
        prev = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        cur = *nexthop_list;

        <span class="keywordflow">while</span> (cur &amp;&amp; cur-&gt;<a class="code" href="structnexthop__entry.html#a688bf3a22dbd8fa6791b1ef1e65700b1">nexthop</a>.s_addr &lt; <a class="code" href="structnexthop.html">nexthop</a>.s_addr)
        {
            prev = cur;
            cur = cur-&gt;<a class="code" href="structnexthop__entry.html#ac16569e8074915cc3a48a8bd1b43a05f">next</a>;
        }
        <span class="comment">//nexthop already exists</span>
        <span class="keywordflow">if</span> (cur &amp;&amp; cur-&gt;<a class="code" href="structnexthop__entry.html#a688bf3a22dbd8fa6791b1ef1e65700b1">nexthop</a>.s_addr == <a class="code" href="structnexthop.html">nexthop</a>.s_addr)
        {
            result = 0;
            free(nhe);
        }
        <span class="keywordflow">else</span>
        {
            <span class="keywordflow">if</span> (prev == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
            {
                *nexthop_list = nhe;
                nhe-&gt;<a class="code" href="structnexthop__entry.html#ac16569e8074915cc3a48a8bd1b43a05f">next</a> = cur;
            }
            <span class="keywordflow">else</span>
            {
                prev-&gt;<a class="code" href="structnexthop__entry.html#ac16569e8074915cc3a48a8bd1b43a05f">next</a> = nhe;
                nhe-&gt;<a class="code" href="structnexthop__entry.html#ac16569e8074915cc3a48a8bd1b43a05f">next</a> = cur;
            }
        }
    }

    <span class="keywordflow">return</span> result;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acd54585ee45c2c196ac31ed2d700ec1e"></a><!-- doxytag: member="tables.c::insert_origin_to_list" ref="acd54585ee45c2c196ac31ed2d700ec1e" args="(struct origin_entry **origin_list, struct in_addr *origin)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int insert_origin_to_list </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structorigin__entry.html">origin_entry</a> **&#160;</td>
          <td class="paramname"><em>origin_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>origin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>returns number of items inserted: 0 if item already exists, 1 otherwise </p>

<p>Definition at line <a class="el" href="tables_8c_source.html#l00179">179</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structorigin__entry.html">origin_entry</a> *oe, *prev, *cur;
    <span class="keywordtype">int</span> result = 1;

    oe = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structorigin__entry.html">origin_entry</a>));
    oe-&gt;<a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>.s_addr = <a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>-&gt;s_addr;

    <span class="keywordflow">if</span> (*origin_list == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
        oe-&gt;<a class="code" href="structorigin__entry.html#adcb58a6eeca4c11df58f4c407333f9fc">next</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        *origin_list = oe;
    }
    <span class="keywordflow">else</span>
    {
        prev = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        cur = *origin_list;

        <span class="keywordflow">while</span> (cur &amp;&amp; cur-&gt;<a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>.s_addr &lt; <a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>-&gt;s_addr)
        {
            prev = cur;
            cur = cur-&gt;<a class="code" href="structorigin__entry.html#adcb58a6eeca4c11df58f4c407333f9fc">next</a>;
        }

        <span class="comment">//nexthop already exists</span>
        <span class="keywordflow">if</span> (cur &amp;&amp; cur-&gt;<a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>.s_addr == <a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>-&gt;s_addr)
        {
            result = 0;
            free(oe);
        }
        <span class="keywordflow">else</span>
        {
            <span class="keywordflow">if</span> (prev == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
            {
                *origin_list = oe;
                oe-&gt;<a class="code" href="structorigin__entry.html#adcb58a6eeca4c11df58f4c407333f9fc">next</a> = cur;
            }
            <span class="keywordflow">else</span>
            {
                prev-&gt;<a class="code" href="structorigin__entry.html#adcb58a6eeca4c11df58f4c407333f9fc">next</a> = oe;
                oe-&gt;<a class="code" href="structorigin__entry.html#adcb58a6eeca4c11df58f4c407333f9fc">next</a> = cur;
            }
        }
    }

    <span class="keywordflow">return</span> result;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5c6cfa6ea16144b5c3189cbcd62a9b87"></a><!-- doxytag: member="tables.c::origin_cmp" ref="a5c6cfa6ea16144b5c3189cbcd62a9b87" args="(const void *p1, const void *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int origin_cmp </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>p1: <a class="el" href="structorigintable__entry.html">origintable_entry</a> (data); p2: in_addr (key) </p>

<p>Definition at line <a class="el" href="tables_8c_source.html#l00073">73</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structorigintable__entry.html">origintable_entry</a> *oe = (<span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structorigintable__entry.html">origintable_entry</a> *)p1;
    <span class="keyword">const</span> <span class="keyword">struct </span>in_addr *<span class="keywordtype">id</span> = (<span class="keyword">const</span> <span class="keyword">struct </span>in_addr *)p2;

    <span class="keywordflow">return</span> (oe-&gt;<a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>.s_addr == id-&gt;s_addr);
}                                                         
</pre></div>
</div>
</div>
<a class="anchor" id="af4c76e13bff01c7efed48c6108204a62"></a><!-- doxytag: member="tables.c::origin_hash_alloc" ref="af4c76e13bff01c7efed48c6108204a62" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void* origin_hash_alloc </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>returns <a class="el" href="structorigintable__entry.html">origintable_entry</a> (data) </p>

<p>Definition at line <a class="el" href="tables_8c_source.html#l00090">90</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span>in_addr *router_id = (<span class="keyword">struct </span>in_addr *)<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
    <span class="keyword">struct </span><a class="code" href="structorigintable__entry.html">origintable_entry</a> *oe;

    oe = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structorigintable__entry.html">origintable_entry</a>));
    oe-&gt;<a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>.s_addr = router_id-&gt;s_addr;
    oe-&gt;<a class="code" href="structorigintable__entry.html#a5e8d3d0ead4dc2aa2e4c11c110f163e2">nameprefix_list</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    oe-&gt;<a class="code" href="structorigintable__entry.html#a95e2feeb6551e67c00dae76208403ae0">nexthop_list</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

    <span class="keywordflow">return</span> oe;
}
</pre></div>
</div>
</div>
<a class="anchor" id="add6c0fe390d5f97c17cfc9e92748b131"></a><!-- doxytag: member="tables.c::origin_hash_create" ref="add6c0fe390d5f97c17cfc9e92748b131" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structhash.html">hash</a>* origin_hash_create </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00104">104</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structhash.html">hash</a> *origin_hash = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a>(<a class="code" href="tables_8c.html#a60bcad16e2650d142745599b2a714c3b">origin_key_make</a>, <a class="code" href="tables_8c.html#a5c6cfa6ea16144b5c3189cbcd62a9b87" title="p1: origintable_entry (data); p2: in_addr (key)">origin_cmp</a>);
    <span class="keywordflow">return</span> origin_hash;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9280c0dda73eb6928b5d642613a8606e"></a><!-- doxytag: member="tables.c::origin_hash_get" ref="a9280c0dda73eb6928b5d642613a8606e" args="(struct hash *hash, struct in_addr *router_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structorigintable__entry.html">origintable_entry</a>* origin_hash_get </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structhash.html">hash</a> *&#160;</td>
          <td class="paramname"><em>hash</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>router_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00111">111</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structorigintable__entry.html">origintable_entry</a> *oe = <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a>(hash, router_id, <a class="code" href="tables_8c.html#af4c76e13bff01c7efed48c6108204a62" title="returns origintable_entry (data)">origin_hash_alloc</a>);
    <span class="keywordflow">return</span> oe;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a60bcad16e2650d142745599b2a714c3b"></a><!-- doxytag: member="tables.c::origin_key_make" ref="a60bcad16e2650d142745599b2a714c3b" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int origin_key_make </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00060">60</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span>in_addr *router_id = (<span class="keyword">struct </span>in_addr *)<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structkey.html">key</a> = <a class="code" href="jhash_8c.html#acbd0055c1aca2b1ec110501e32191835">jhash</a>(router_id, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> in_addr), 314159);
    <span class="keywordflow">return</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a287f8bafbabf543f6e88f3f48b8b8e61"></a><!-- doxytag: member="tables.c::prefix_compare" ref="a287f8bafbabf543f6e88f3f48b8b8e61" args="(const void *p1, const void *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int prefix_compare </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00392">392</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structprefixtable__entry.html">prefixtable_entry</a> *fe = (<span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structprefixtable__entry.html">prefixtable_entry</a> *)p1;
    <span class="keyword">struct </span><a class="code" href="structname__prefix.html">name_prefix</a> *np1 = fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>;
    <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structname__prefix.html">name_prefix</a> *np2 = (<span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structname__prefix.html">name_prefix</a> *)p2;
    <span class="keywordflow">return</span> (np1-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a> == np2-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a> &amp;&amp; <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a>(np1-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, np2-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, np1-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a>) == 0);
}                                                         
</pre></div>
</div>
</div>
<a class="anchor" id="acf7adb54b4a2bdf16ebd559dfe238287"></a><!-- doxytag: member="tables.c::prefix_hash_alloc" ref="acf7adb54b4a2bdf16ebd559dfe238287" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void* prefix_hash_alloc </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>returns <a class="el" href="structprefixtable__entry.html">prefixtable_entry</a> </p>

<p>Definition at line <a class="el" href="tables_8c_source.html#l00406">406</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structname__prefix.html">name_prefix</a> *<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a> = (<span class="keyword">struct </span><a class="code" href="structname__prefix.html">name_prefix</a> *)<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
    <span class="keyword">struct </span><a class="code" href="structprefixtable__entry.html">prefixtable_entry</a> *fe;

    fe = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structprefixtable__entry.html">prefixtable_entry</a>));
    fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a> = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structname__prefix.html">name_prefix</a>));
    fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a045d9a308f8dc8263eceeb130f8123cc">limit</a> = np-&gt;<a class="code" href="structname__prefix.html#a045d9a308f8dc8263eceeb130f8123cc">limit</a>;
    fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a> = np-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a>;
    fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a> = (u_char *)strdup((<span class="keywordtype">char</span> *)np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>);

    fe-&gt;<a class="code" href="structprefixtable__entry.html#aa80be357ff711807995e204be77f67a1">origin_list</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    fe-&gt;<a class="code" href="structprefixtable__entry.html#aa06013126ea99e3289804e09ed74dbf4">nexthop_list</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

    <span class="keywordflow">return</span> fe;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3c9c026f80f12156cd635307ed718fd2"></a><!-- doxytag: member="tables.c::prefix_hash_create" ref="a3c9c026f80f12156cd635307ed718fd2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structhash.html">hash</a>* prefix_hash_create </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00424">424</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structhash.html">hash</a> *prefix_hash = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a>(<a class="code" href="tables_8c.html#af1bdc2dba7f310d6cf6ff1ba6b25e2ec">prefix_key_make</a>, <a class="code" href="tables_8c.html#a287f8bafbabf543f6e88f3f48b8b8e61">prefix_compare</a>);
    <span class="keywordflow">return</span> prefix_hash;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0f103ceb397b188297a6e6ccc9bbe508"></a><!-- doxytag: member="tables.c::prefix_hash_get" ref="a0f103ceb397b188297a6e6ccc9bbe508" args="(struct hash *hash, struct name_prefix *nameprefix)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structprefixtable__entry.html">prefixtable_entry</a>* prefix_hash_get </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structhash.html">hash</a> *&#160;</td>
          <td class="paramname"><em>hash</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structname__prefix.html">name_prefix</a> *&#160;</td>
          <td class="paramname"><em>nameprefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00431">431</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structprefixtable__entry.html">prefixtable_entry</a> *fe = <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a>(hash, nameprefix, <a class="code" href="tables_8c.html#acf7adb54b4a2bdf16ebd559dfe238287" title="returns prefixtable_entry">prefix_hash_alloc</a>);
    <span class="keywordflow">return</span> fe;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af1bdc2dba7f310d6cf6ff1ba6b25e2ec"></a><!-- doxytag: member="tables.c::prefix_key_make" ref="af1bdc2dba7f310d6cf6ff1ba6b25e2ec" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int prefix_key_make </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00383">383</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structname__prefix.html">name_prefix</a> *<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a> = (<span class="keyword">struct </span><a class="code" href="structname__prefix.html">name_prefix</a> *)<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structkey.html">key</a> = <a class="code" href="jhash_8c.html#acbd0055c1aca2b1ec110501e32191835">jhash</a>(np-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, np-&gt;<a class="code" href="structname__prefix.html#a0ffdda48ee731fee29c97b69e35ec859">length</a>, 314159);
    <span class="keywordflow">return</span> <a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0fe3362bd7ab51d6746ff0b674445e46"></a><!-- doxytag: member="tables.c::update_name_prefix_nexthop_list" ref="a0fe3362bd7ab51d6746ff0b674445e46" args="(struct prefixtable_entry *fe, struct hash *origin_table)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void update_name_prefix_nexthop_list </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefixtable__entry.html">prefixtable_entry</a> *&#160;</td>
          <td class="paramname"><em>fe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structhash.html">hash</a> *&#160;</td>
          <td class="paramname"><em>origin_table</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00438">438</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structnexthop__entry.html">nexthop_entry</a> *nhe;
    <span class="keyword">struct </span><a class="code" href="structorigin__entry.html">origin_entry</a> *o = fe-&gt;<a class="code" href="structprefixtable__entry.html#aa80be357ff711807995e204be77f67a1">origin_list</a>;
    <span class="keyword">struct </span><a class="code" href="structorigintable__entry.html">origintable_entry</a> *oe;
    <span class="keywordtype">int</span> res,<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>, no_element;
    
    no_element=<a class="code" href="ospfn_8c.html#a60602d3928887dde138c9ca08a00cb1d" title="Return number of multipath configured.">no_nexthop</a>();    
    <span class="comment">//printf(&quot;-name prefix: %s\n&quot;, fe-&gt;nameprefix-&gt;name);</span>
    <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__, <span class="stringliteral">&quot;-name prefix: %s\n&quot;</span>, fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>);
    <span class="comment">//remove old nexthops</span>
    nhe = fe-&gt;<a class="code" href="structprefixtable__entry.html#aa06013126ea99e3289804e09ed74dbf4">nexthop_list</a>;

    
    <span class="keywordflow">while</span> (nhe)
    {
        <span class="keywordflow">if</span>(!<a class="code" href="ospfn_8c.html#a9ce07a695e675b6b320ac3d132cb5966" title="Check existence of address in multipath nexthop.">is_nexthop</a>(inet_ntoa(nhe-&gt;<a class="code" href="structnexthop__entry.html#a688bf3a22dbd8fa6791b1ef1e65700b1">nexthop</a>)))    
            <a class="code" href="ccn__fib_8c.html#a12135bbf63b584d60aa46bd61c0607fd" title="Delete a ccn face for a name prefix.">delete_ccn_face</a>(<a class="code" href="tables_8h.html#aa9a48f1b9a2007cd3c6be74ca4f5c9d4">ccn_handle</a>, (<span class="keywordtype">char</span> *)fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, inet_ntoa(nhe-&gt;<a class="code" href="structnexthop__entry.html#a688bf3a22dbd8fa6791b1ef1e65700b1">nexthop</a>), 9695);
        fe-&gt;<a class="code" href="structprefixtable__entry.html#aa06013126ea99e3289804e09ed74dbf4">nexthop_list</a> = nhe-&gt;<a class="code" href="structnexthop__entry.html#ac16569e8074915cc3a48a8bd1b43a05f">next</a>;
        free(nhe);
        nhe = fe-&gt;<a class="code" href="structprefixtable__entry.html#aa06013126ea99e3289804e09ed74dbf4">nexthop_list</a>;
    }

    <span class="keywordflow">for</span>(j=1;j&lt;=no_element;j++)
        <a class="code" href="ccn__fib_8c.html#a12135bbf63b584d60aa46bd61c0607fd" title="Delete a ccn face for a name prefix.">delete_ccn_face</a>(<a class="code" href="tables_8h.html#aa9a48f1b9a2007cd3c6be74ca4f5c9d4">ccn_handle</a>, (<span class="keywordtype">char</span> *)fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, inet_ntoa(<a class="code" href="ospfn_8c.html#a8fc6479763cc8f9d5f1253e3aa1baf34" title="Return nexthop from multipath from a position.">pop_nexthop_from_position</a>(j)),9695);    
    
    <span class="comment">//foreach origin in origin_list</span>
    <span class="keywordflow">while</span> (o)
    {
        <span class="comment">//get origintable_entry</span>
        oe = <a class="code" href="tables_8c.html#a9280c0dda73eb6928b5d642613a8606e">origin_hash_get</a>(origin_table, &amp;(o-&gt;<a class="code" href="structorigin__entry.html#ab69700e376a234ed4bcf1f7324a53f94">origin</a>));

        <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;--origin: %s\n&quot;</span>, inet_ntoa(oe-&gt;<a class="code" href="structorigintable__entry.html#a020ddcf3ce3e9bf09ee76b4d664d9c8d">origin</a>));
        nhe = oe-&gt;<a class="code" href="structorigintable__entry.html#a95e2feeb6551e67c00dae76208403ae0">nexthop_list</a>;

            
        <span class="comment">//foreach nexthop</span>
        <span class="keywordflow">while</span> (nhe)
        {
            <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot;---nexthop: %s\n&quot;</span>, inet_ntoa(nhe-&gt;<a class="code" href="structnexthop__entry.html#a688bf3a22dbd8fa6791b1ef1e65700b1">nexthop</a>));
            res = <a class="code" href="tables_8c.html#a925d9cc75b8eb786bb63ba9e3fe78446" title="returns number of items inserted: 0 if item already exists, 1 otherwise">insert_nexthop_to_list</a>(&amp;fe-&gt;<a class="code" href="structprefixtable__entry.html#aa06013126ea99e3289804e09ed74dbf4">nexthop_list</a>, nhe-&gt;<a class="code" href="structnexthop__entry.html#a688bf3a22dbd8fa6791b1ef1e65700b1">nexthop</a>, nhe-&gt;<a class="code" href="structnexthop__entry.html#a559c53461d8120dab0642dd18ad73ffd">cost</a>, nhe-&gt;<a class="code" href="structnexthop__entry.html#a94e31e4dbdee1b03cad66448a4361167">flag</a>);

            <span class="keywordflow">if</span> (res == 1)
            {   
                <span class="keywordflow">for</span>(j=1;j&lt;=no_element;j++)
                {       
                    <span class="keywordflow">if</span>(inet_addr(inet_ntoa(nhe-&gt;<a class="code" href="structnexthop__entry.html#a688bf3a22dbd8fa6791b1ef1e65700b1">nexthop</a>)) != inet_addr(inet_ntoa(<a class="code" href="ospfn_8c.html#a8fc6479763cc8f9d5f1253e3aa1baf34" title="Return nexthop from multipath from a position.">pop_nexthop_from_position</a>(j)))){       
                    <a class="code" href="ccn__fib_8c.html#a6bb94cc5ad82e2f1c17ffb413ba72838" title="Add a ccn face for a name prefix.">add_ccn_face</a>(<a class="code" href="tables_8h.html#aa9a48f1b9a2007cd3c6be74ca4f5c9d4">ccn_handle</a>, (<span class="keywordtype">char</span> *)fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, inet_ntoa(<a class="code" href="ospfn_8c.html#a8fc6479763cc8f9d5f1253e3aa1baf34" title="Return nexthop from multipath from a position.">pop_nexthop_from_position</a>(j)),9695);
                    <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Adding face to ccn for prefix : %s nexthop : %s\n&quot;</span>,(<span class="keywordtype">char</span> *)fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, inet_ntoa(<a class="code" href="ospfn_8c.html#a8fc6479763cc8f9d5f1253e3aa1baf34" title="Return nexthop from multipath from a position.">pop_nexthop_from_position</a>(j)));    
                    }
                }   
                <a class="code" href="ccn__fib_8c.html#a6bb94cc5ad82e2f1c17ffb413ba72838" title="Add a ccn face for a name prefix.">add_ccn_face</a>(<a class="code" href="tables_8h.html#aa9a48f1b9a2007cd3c6be74ca4f5c9d4">ccn_handle</a>, (<span class="keywordtype">char</span> *)fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, inet_ntoa(nhe-&gt;<a class="code" href="structnexthop__entry.html#a688bf3a22dbd8fa6791b1ef1e65700b1">nexthop</a>), 9695);
                <a class="code" href="utility_8c.html#a1202bbb0195db91de4825608a2f7575d" title="write log to logfile">writeLogg</a>(<a class="code" href="structospfn.html">ospfn</a>-&gt;<a class="code" href="structospfn.html#a0a98763e73d6de8626f54f98aaf060ab">logFile</a>,__FILE__,__FUNCTION__,__LINE__,<span class="stringliteral">&quot; Adding face to ccn for prefix : %s nexthop : %s\n&quot;</span>,(<span class="keywordtype">char</span> *)fe-&gt;<a class="code" href="structprefixtable__entry.html#a6538f0cd0c98fa95f331c94bd95beb3a">nameprefix</a>-&gt;<a class="code" href="structname__prefix.html#a2814019449f37c0f6e1f50e96240c47b">name</a>, inet_ntoa(nhe-&gt;<a class="code" href="structnexthop__entry.html#a688bf3a22dbd8fa6791b1ef1e65700b1">nexthop</a>));
            }   
            nhe = nhe-&gt;<a class="code" href="structnexthop__entry.html#ac16569e8074915cc3a48a8bd1b43a05f">next</a>;
        }
        o = o-&gt;<a class="code" href="structorigin__entry.html#adcb58a6eeca4c11df58f4c407333f9fc">next</a>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a54a573422a4af5227710ed6e52a3301c"></a><!-- doxytag: member="tables.c::update_origin_nexthop_list" ref="a54a573422a4af5227710ed6e52a3301c" args="(struct origintable_entry *oe, int nexthop_count, struct in_addr *nexthops)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void update_origin_nexthop_list </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structorigintable__entry.html">origintable_entry</a> *&#160;</td>
          <td class="paramname"><em>oe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nexthop_count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>nexthops</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="tables_8c_source.html#l00359">359</a> of file <a class="el" href="tables_8c_source.html">tables.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">struct </span><a class="code" href="structnexthop__entry.html">nexthop_entry</a> *head = oe-&gt;<a class="code" href="structorigintable__entry.html#a95e2feeb6551e67c00dae76208403ae0">nexthop_list</a>;
    <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

    <span class="comment">//remove old nexthops</span>
    <span class="keywordflow">while</span> (head)
    {
        oe-&gt;<a class="code" href="structorigintable__entry.html#a95e2feeb6551e67c00dae76208403ae0">nexthop_list</a> = head-&gt;<a class="code" href="structnexthop__entry.html#ac16569e8074915cc3a48a8bd1b43a05f">next</a>;
        free(head);
        head = oe-&gt;<a class="code" href="structorigintable__entry.html#a95e2feeb6551e67c00dae76208403ae0">nexthop_list</a>;
    }

    <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a>(oe-&gt;<a class="code" href="structorigintable__entry.html#a95e2feeb6551e67c00dae76208403ae0">nexthop_list</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

    <span class="comment">//add new nexthops</span>
    <span class="keywordflow">for</span> (i = 0; i &lt; nexthop_count; i ++)
        <a class="code" href="tables_8c.html#a925d9cc75b8eb786bb63ba9e3fe78446" title="returns number of items inserted: 0 if item already exists, 1 otherwise">insert_nexthop_to_list</a>(&amp;oe-&gt;<a class="code" href="structorigintable__entry.html#a95e2feeb6551e67c00dae76208403ae0">nexthop_list</a>, nexthops[i], 0, 0);
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="tables_8c.html">tables.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:34 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
