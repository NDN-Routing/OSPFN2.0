<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_damp.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__damp_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">bgpd/bgp_damp.c</div>  </div>
</div>
<div class="contents">
<a href="bgp__damp_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* BGP flap dampening</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 2001 IP Infusion Inc.</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="bgpd_8h.html">bgpd/bgpd.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="bgp__damp_8h.html">bgpd/bgp_damp.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="bgp__table_8h.html">bgpd/bgp_table.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="bgp__route_8h.html">bgpd/bgp_route.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="bgp__attr_8h.html">bgpd/bgp_attr.h</a>&quot;</span> 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="bgp__advertise_8h.html">bgpd/bgp_advertise.h</a>&quot;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">/* Global variable to access damping configuration */</span>
<a name="l00038"></a><a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">00038</a> <span class="keyword">struct </span><a class="code" href="structbgp__damp__config.html">bgp_damp_config</a> <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>;
<a name="l00039"></a><a class="code" href="bgp__damp_8c.html#a3a204141fb82f4db060f07b20f6d34fc">00039</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structbgp__damp__config.html">bgp_damp_config</a> *<a class="code" href="bgp__damp_8c.html#a3a204141fb82f4db060f07b20f6d34fc">damp</a> = &amp;<a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>;
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="comment">/* Utility macro to add and delete BGP dampening information to no</span>
<a name="l00042"></a>00042 <span class="comment">   used list.  */</span>
<a name="l00043"></a><a class="code" href="bgp__damp_8c.html#a9adb7c9da2bfb12c80b3c0602bdda527">00043</a> <span class="preprocessor">#define BGP_DAMP_LIST_ADD(N,A)  BGP_INFO_ADD(N,A,no_reuse_list)</span>
<a name="l00044"></a><a class="code" href="bgp__damp_8c.html#af9283a47419c1af6dab5a1f220f3fa69">00044</a> <span class="preprocessor"></span><span class="preprocessor">#define BGP_DAMP_LIST_DEL(N,A)  BGP_INFO_DEL(N,A,no_reuse_list)</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 <span class="comment">/* Calculate reuse list index by penalty value.  */</span>
<a name="l00047"></a>00047 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00048"></a><a class="code" href="bgp__damp_8c.html#a893f4a6a09973768072cdc67c71b5438">00048</a> <a class="code" href="bgp__damp_8c.html#a893f4a6a09973768072cdc67c71b5438">bgp_reuse_index</a> (<span class="keywordtype">int</span> penalty)
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00051"></a>00051   <span class="keywordtype">int</span> index;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053   i = (int)(((<span class="keywordtype">double</span>) penalty / damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a> - 1.0) * damp-&gt;<a class="code" href="structbgp__damp__config.html#ae3cb43b4b1bdb6330512218fe87bbce0">scale_factor</a>);
<a name="l00054"></a>00054   
<a name="l00055"></a>00055   <span class="keywordflow">if</span> ( i &gt;= damp-&gt;<a class="code" href="structbgp__damp__config.html#ad01f01c54dc229b545b912d7a14ded83">reuse_index_size</a> )
<a name="l00056"></a>00056     i = damp-&gt;<a class="code" href="structbgp__damp__config.html#ad01f01c54dc229b545b912d7a14ded83">reuse_index_size</a> - 1;
<a name="l00057"></a>00057 
<a name="l00058"></a>00058   index = damp-&gt;<a class="code" href="structbgp__damp__config.html#a4f84b3db83411ea2f69351e487f19b42">reuse_index</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] - damp-&gt;<a class="code" href="structbgp__damp__config.html#a4f84b3db83411ea2f69351e487f19b42">reuse_index</a>[0];
<a name="l00059"></a>00059 
<a name="l00060"></a>00060   <span class="keywordflow">return</span> (damp-&gt;<a class="code" href="structbgp__damp__config.html#a9043492faf6e46560ab22c0e408d2b86">reuse_offset</a> + index) % damp-&gt;<a class="code" href="structbgp__damp__config.html#ad82b645f7ca7c7debdb3c54943d86771">reuse_list_size</a>;  
<a name="l00061"></a>00061 }
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="comment">/* Add BGP dampening information to reuse list.  */</span>
<a name="l00064"></a>00064 <span class="keyword">static</span> <span class="keywordtype">void</span> 
<a name="l00065"></a><a class="code" href="bgp__damp_8c.html#a65aabd892cd32d8abc34163aa4c61582">00065</a> <a class="code" href="bgp__damp_8c.html#a65aabd892cd32d8abc34163aa4c61582">bgp_reuse_list_add</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi)
<a name="l00066"></a>00066 {
<a name="l00067"></a>00067   <span class="keywordtype">int</span> index;
<a name="l00068"></a>00068 
<a name="l00069"></a>00069   index = bdi-&gt;<a class="code" href="structbgp__damp__info.html#a212900332ed4c50d247893983896e937">index</a> = <a class="code" href="bgp__damp_8c.html#a893f4a6a09973768072cdc67c71b5438">bgp_reuse_index</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>);
<a name="l00070"></a>00070 
<a name="l00071"></a>00071   bdi-&gt;<a class="code" href="structbgp__damp__info.html#a30906878e7f0745ceee443bc46d30c4e">prev</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00072"></a>00072   bdi-&gt;<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a> = damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>[index];
<a name="l00073"></a>00073   <span class="keywordflow">if</span> (damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>[index])
<a name="l00074"></a>00074     damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>[index]-&gt;<a class="code" href="structbgp__damp__info.html#a30906878e7f0745ceee443bc46d30c4e">prev</a> = bdi;
<a name="l00075"></a>00075   damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>[index] = bdi;
<a name="l00076"></a>00076 }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">/* Delete BGP dampening information from reuse list.  */</span>
<a name="l00079"></a>00079 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00080"></a><a class="code" href="bgp__damp_8c.html#a38fa0292f82b418960810ceb8c2d2309">00080</a> <a class="code" href="bgp__damp_8c.html#a38fa0292f82b418960810ceb8c2d2309">bgp_reuse_list_delete</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi)
<a name="l00081"></a>00081 {
<a name="l00082"></a>00082   <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a>)
<a name="l00083"></a>00083     bdi-&gt;<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a>-&gt;<a class="code" href="structbgp__damp__info.html#a30906878e7f0745ceee443bc46d30c4e">prev</a> = bdi-&gt;<a class="code" href="structbgp__damp__info.html#a30906878e7f0745ceee443bc46d30c4e">prev</a>;
<a name="l00084"></a>00084   <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a30906878e7f0745ceee443bc46d30c4e">prev</a>)
<a name="l00085"></a>00085     bdi-&gt;<a class="code" href="structbgp__damp__info.html#a30906878e7f0745ceee443bc46d30c4e">prev</a>-&gt;<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a> = bdi-&gt;<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a>;
<a name="l00086"></a>00086   <span class="keywordflow">else</span>
<a name="l00087"></a>00087     damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>[bdi-&gt;<a class="code" href="structbgp__damp__info.html#a212900332ed4c50d247893983896e937">index</a>] = bdi-&gt;<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a>;
<a name="l00088"></a>00088 }   
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="comment">/* Return decayed penalty value.  */</span>
<a name="l00091"></a>00091 <span class="keywordtype">int</span> 
<a name="l00092"></a><a class="code" href="bgp__damp_8h.html#af2e18f03d9db700f1e80e89f2b354c52">00092</a> <a class="code" href="bgp__damp_8c.html#a04742fc672b86175444b4b94161c9a81">bgp_damp_decay</a> (time_t tdiff, <span class="keywordtype">int</span> penalty)
<a name="l00093"></a>00093 {
<a name="l00094"></a>00094   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096   i = (int) ((<span class="keywordtype">double</span>) tdiff / <a class="code" href="bgp__damp_8h.html#a5400b1f2028d38732e4377be4f32b255">DELTA_T</a>);
<a name="l00097"></a>00097 
<a name="l00098"></a>00098   <span class="keywordflow">if</span> (i == 0)
<a name="l00099"></a>00099     <span class="keywordflow">return</span> penalty; 
<a name="l00100"></a>00100   
<a name="l00101"></a>00101   <span class="keywordflow">if</span> (i &gt;= damp-&gt;<a class="code" href="structbgp__damp__config.html#a8a14f82a5f992a698f6be233a21afce9">decay_array_size</a>)
<a name="l00102"></a>00102     <span class="keywordflow">return</span> 0;
<a name="l00103"></a>00103 
<a name="l00104"></a>00104   <span class="keywordflow">return</span> (<span class="keywordtype">int</span>) (penalty * damp-&gt;<a class="code" href="structbgp__damp__config.html#ad35b88c80cde9e6c1b6dd5f73d79c599">decay_array</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>]);
<a name="l00105"></a>00105 }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 <span class="comment">/* Handler of reuse timer event.  Each route in the current reuse-list</span>
<a name="l00108"></a>00108 <span class="comment">   is evaluated.  RFC2439 Section 4.8.7.  */</span>
<a name="l00109"></a>00109 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00110"></a><a class="code" href="bgp__damp_8c.html#a1eb38f534f8bbb214584a2dbacb649a0">00110</a> <a class="code" href="bgp__damp_8c.html#a1eb38f534f8bbb214584a2dbacb649a0">bgp_reuse_timer</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l00111"></a>00111 {
<a name="l00112"></a>00112   <span class="keyword">struct </span><a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi;
<a name="l00113"></a>00113   <span class="keyword">struct </span><a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a>;
<a name="l00114"></a>00114   time_t t_now, t_diff;
<a name="l00115"></a>00115     
<a name="l00116"></a>00116   damp-&gt;<a class="code" href="structbgp__damp__config.html#a917075d1961998bb01d7cb2043a4aa80">t_reuse</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00117"></a>00117   damp-&gt;<a class="code" href="structbgp__damp__config.html#a917075d1961998bb01d7cb2043a4aa80">t_reuse</a> =
<a name="l00118"></a>00118     <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__damp_8c.html#a1eb38f534f8bbb214584a2dbacb649a0">bgp_reuse_timer</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__damp_8h.html#a0ab730b90f217aaee332a4c77360dfca">DELTA_REUSE</a>);
<a name="l00119"></a>00119 
<a name="l00120"></a>00120   t_now = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l00121"></a>00121 
<a name="l00122"></a>00122   <span class="comment">/* 1.  save a pointer to the current zeroth queue head and zero the</span>
<a name="l00123"></a>00123 <span class="comment">     list head entry.  */</span>
<a name="l00124"></a>00124   bdi = damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>[damp-&gt;<a class="code" href="structbgp__damp__config.html#a9043492faf6e46560ab22c0e408d2b86">reuse_offset</a>];
<a name="l00125"></a>00125   damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>[damp-&gt;<a class="code" href="structbgp__damp__config.html#a9043492faf6e46560ab22c0e408d2b86">reuse_offset</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00126"></a>00126 
<a name="l00127"></a>00127   <span class="comment">/* 2.  set offset = modulo reuse-list-size ( offset + 1 ), thereby</span>
<a name="l00128"></a>00128 <span class="comment">     rotating the circular queue of list-heads.  */</span>
<a name="l00129"></a>00129   damp-&gt;<a class="code" href="structbgp__damp__config.html#a9043492faf6e46560ab22c0e408d2b86">reuse_offset</a> = (damp-&gt;<a class="code" href="structbgp__damp__config.html#a9043492faf6e46560ab22c0e408d2b86">reuse_offset</a> + 1) % damp-&gt;<a class="code" href="structbgp__damp__config.html#ad82b645f7ca7c7debdb3c54943d86771">reuse_list_size</a>;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131   <span class="comment">/* 3. if ( the saved list head pointer is non-empty ) */</span>
<a name="l00132"></a>00132   for (; bdi; bdi = <a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a>)
<a name="l00133"></a>00133     {
<a name="l00134"></a>00134       <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a> = bdi-&gt;<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l00135"></a>00135       
<a name="l00136"></a>00136       next = bdi-&gt;<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a>;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138       <span class="comment">/* Set t-diff = t-now - t-updated.  */</span>
<a name="l00139"></a>00139       t_diff = t_now - bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a>;
<a name="l00140"></a>00140 
<a name="l00141"></a>00141       <span class="comment">/* Set figure-of-merit = figure-of-merit * decay-array-ok [t-diff] */</span>
<a name="l00142"></a>00142       bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> = <a class="code" href="bgp__damp_8c.html#a04742fc672b86175444b4b94161c9a81">bgp_damp_decay</a> (t_diff, bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>);   
<a name="l00143"></a>00143 
<a name="l00144"></a>00144       <span class="comment">/* Set t-updated = t-now.  */</span>
<a name="l00145"></a>00145       bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a> = t_now;
<a name="l00146"></a>00146 
<a name="l00147"></a>00147       <span class="comment">/* if (figure-of-merit &lt; reuse).  */</span>
<a name="l00148"></a>00148       <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> &lt; damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a>)
<a name="l00149"></a>00149     {
<a name="l00150"></a>00150       <span class="comment">/* Reuse the route.  */</span>
<a name="l00151"></a>00151       <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a>, bdi-&gt;<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>);
<a name="l00152"></a>00152       bdi-&gt;<a class="code" href="structbgp__damp__info.html#ad4151e652c9e1583cc8ff0ccde2dd72f">suppress_time</a> = 0;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154       <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#acdc7e308a11230cd73c90b0dcf7a3cdf">lastrecord</a> == <a class="code" href="bgp__damp_8h.html#a311f4eb102141807a3a95b5f0a55726a">BGP_RECORD_UPDATE</a>)
<a name="l00155"></a>00155         {
<a name="l00156"></a>00156           <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a>, bdi-&gt;<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>);
<a name="l00157"></a>00157           <a class="code" href="bgp__route_8h.html#ac218a5ef2e04869ebdac5ea9bfbf19e2">bgp_aggregate_increment</a> (bgp, &amp;bdi-&gt;<a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a>-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, bdi-&gt;<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>,
<a name="l00158"></a>00158                        bdi-&gt;<a class="code" href="structbgp__damp__info.html#a14549e505c1698c5d8473351caaa2d7f">afi</a>, bdi-&gt;<a class="code" href="structbgp__damp__info.html#a47ce9fc92a7ad8fd67a9c768d3f9fc00">safi</a>);   
<a name="l00159"></a>00159           <a class="code" href="bgp__route_8c.html#a3c1be470ddb0d83d2cda73f8e4fa1f88">bgp_process</a> (bgp, bdi-&gt;<a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a>, bdi-&gt;<a class="code" href="structbgp__damp__info.html#a14549e505c1698c5d8473351caaa2d7f">afi</a>, bdi-&gt;<a class="code" href="structbgp__damp__info.html#a47ce9fc92a7ad8fd67a9c768d3f9fc00">safi</a>);
<a name="l00160"></a>00160         }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162       <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> &lt;= damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a> / 2.0)
<a name="l00163"></a>00163         <a class="code" href="bgp__damp_8c.html#a0c4f46bfbd9a397b8ba5d830d48cc5ca">bgp_damp_info_free</a> (bdi, 1);
<a name="l00164"></a>00164       <span class="keywordflow">else</span>
<a name="l00165"></a>00165         <a class="code" href="bgp__damp_8c.html#a9adb7c9da2bfb12c80b3c0602bdda527">BGP_DAMP_LIST_ADD</a> (damp, bdi);
<a name="l00166"></a>00166     }
<a name="l00167"></a>00167       <span class="keywordflow">else</span>
<a name="l00168"></a>00168     <span class="comment">/* Re-insert into another list (See RFC2439 Section 4.8.6).  */</span>
<a name="l00169"></a>00169     <a class="code" href="bgp__damp_8c.html#a65aabd892cd32d8abc34163aa4c61582">bgp_reuse_list_add</a> (bdi);
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172   <span class="keywordflow">return</span> 0;
<a name="l00173"></a>00173 }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175 <span class="comment">/* A route becomes unreachable (RFC2439 Section 4.8.2).  */</span>
<a name="l00176"></a>00176 <span class="keywordtype">int</span>
<a name="l00177"></a><a class="code" href="bgp__damp_8h.html#af74c86ddf55e7219e875e319fd5b9754">00177</a> <a class="code" href="bgp__damp_8c.html#a6495e2d88335e918ccca6f80fa52cee9">bgp_damp_withdraw</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo, <span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *rn,
<a name="l00178"></a>00178            <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keywordtype">int</span> attr_change)
<a name="l00179"></a>00179 {
<a name="l00180"></a>00180   time_t t_now;
<a name="l00181"></a>00181   <span class="keyword">struct </span><a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00182"></a>00182   <span class="keywordtype">double</span> last_penalty = 0;
<a name="l00183"></a>00183   
<a name="l00184"></a>00184   t_now = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   <span class="comment">/* Processing Unreachable Messages.  */</span>
<a name="l00187"></a>00187   <span class="keywordflow">if</span> (binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l00188"></a>00188     bdi = binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>;
<a name="l00189"></a>00189   
<a name="l00190"></a>00190   <span class="keywordflow">if</span> (bdi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00191"></a>00191     {
<a name="l00192"></a>00192       <span class="comment">/* If there is no previous stability history. */</span>
<a name="l00193"></a>00193 
<a name="l00194"></a>00194       <span class="comment">/* RFC2439 said:</span>
<a name="l00195"></a>00195 <span class="comment">     1. allocate a damping structure.</span>
<a name="l00196"></a>00196 <span class="comment">         2. set figure-of-merit = 1.</span>
<a name="l00197"></a>00197 <span class="comment">         3. withdraw the route.  */</span>
<a name="l00198"></a>00198 
<a name="l00199"></a>00199       bdi =  <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0469230ad2a9a5121c508a98d7d279c2">MTYPE_BGP_DAMP_INFO</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__damp__info.html">bgp_damp_info</a>));
<a name="l00200"></a>00200       bdi-&gt;<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a> = <a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>;
<a name="l00201"></a>00201       bdi-&gt;<a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a> = <a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a>;
<a name="l00202"></a>00202       bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> = (attr_change ? <a class="code" href="bgp__damp_8h.html#acb4faa4de0633c71f02c70db3c1ab2a6">DEFAULT_PENALTY</a> / 2 : <a class="code" href="bgp__damp_8h.html#acb4faa4de0633c71f02c70db3c1ab2a6">DEFAULT_PENALTY</a>);
<a name="l00203"></a>00203       bdi-&gt;<a class="code" href="structbgp__damp__info.html#ab12ae05f133ded91a152d8b42c33336a">flap</a> = 1;
<a name="l00204"></a>00204       bdi-&gt;<a class="code" href="structbgp__damp__info.html#a79b767b81bcc0f2015c6da5651dfa149">start_time</a> = t_now;
<a name="l00205"></a>00205       bdi-&gt;<a class="code" href="structbgp__damp__info.html#ad4151e652c9e1583cc8ff0ccde2dd72f">suppress_time</a> = 0;
<a name="l00206"></a>00206       bdi-&gt;<a class="code" href="structbgp__damp__info.html#a212900332ed4c50d247893983896e937">index</a> = -1;
<a name="l00207"></a>00207       bdi-&gt;<a class="code" href="structbgp__damp__info.html#a14549e505c1698c5d8473351caaa2d7f">afi</a> = <a class="code" href="structbgp__damp__info.html#a14549e505c1698c5d8473351caaa2d7f">afi</a>;
<a name="l00208"></a>00208       bdi-&gt;<a class="code" href="structbgp__damp__info.html#a47ce9fc92a7ad8fd67a9c768d3f9fc00">safi</a> = <a class="code" href="structbgp__damp__info.html#a47ce9fc92a7ad8fd67a9c768d3f9fc00">safi</a>;
<a name="l00209"></a>00209       (<a class="code" href="bgp__route_8c.html#a3afeebe128032bb8a486915820234af9">bgp_info_extra_get</a> (binfo))-&gt;damp_info = bdi;
<a name="l00210"></a>00210       <a class="code" href="bgp__damp_8c.html#a9adb7c9da2bfb12c80b3c0602bdda527">BGP_DAMP_LIST_ADD</a> (damp, bdi);
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212   <span class="keywordflow">else</span>
<a name="l00213"></a>00213     {
<a name="l00214"></a>00214       last_penalty = bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>;
<a name="l00215"></a>00215 
<a name="l00216"></a>00216       <span class="comment">/* 1. Set t-diff = t-now - t-updated.  */</span>
<a name="l00217"></a>00217       bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> = 
<a name="l00218"></a>00218     (<a class="code" href="bgp__damp_8c.html#a04742fc672b86175444b4b94161c9a81">bgp_damp_decay</a> (t_now - bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a>, bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>) 
<a name="l00219"></a>00219      + (attr_change ? <a class="code" href="bgp__damp_8h.html#acb4faa4de0633c71f02c70db3c1ab2a6">DEFAULT_PENALTY</a> / 2 : <a class="code" href="bgp__damp_8h.html#acb4faa4de0633c71f02c70db3c1ab2a6">DEFAULT_PENALTY</a>));
<a name="l00220"></a>00220 
<a name="l00221"></a>00221       <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> &gt; damp-&gt;<a class="code" href="structbgp__damp__config.html#a46ab465397181f1fc58383f268e30885">ceiling</a>)
<a name="l00222"></a>00222     bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> = damp-&gt;<a class="code" href="structbgp__damp__config.html#a46ab465397181f1fc58383f268e30885">ceiling</a>;
<a name="l00223"></a>00223 
<a name="l00224"></a>00224       bdi-&gt;<a class="code" href="structbgp__damp__info.html#ab12ae05f133ded91a152d8b42c33336a">flap</a>++;
<a name="l00225"></a>00225     }
<a name="l00226"></a>00226   
<a name="l00227"></a>00227   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> ((rn == bdi-&gt;<a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a>) &amp;&amp; (binfo == bdi-&gt;<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>));
<a name="l00228"></a>00228   
<a name="l00229"></a>00229   bdi-&gt;<a class="code" href="structbgp__damp__info.html#acdc7e308a11230cd73c90b0dcf7a3cdf">lastrecord</a> = <a class="code" href="bgp__damp_8h.html#aeb2d15f73eff91038418b5c8596a8308">BGP_RECORD_WITHDRAW</a>;
<a name="l00230"></a>00230   bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a> = t_now;
<a name="l00231"></a>00231 
<a name="l00232"></a>00232   <span class="comment">/* Make this route as historical status.  */</span>
<a name="l00233"></a>00233   <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, binfo, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>);
<a name="l00234"></a>00234 
<a name="l00235"></a>00235   <span class="comment">/* Remove the route from a reuse list if it is on one.  */</span>
<a name="l00236"></a>00236   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>))
<a name="l00237"></a>00237     {
<a name="l00238"></a>00238       <span class="comment">/* If decay rate isn&#39;t equal to 0, reinsert brn. */</span>  
<a name="l00239"></a>00239       <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> != last_penalty)
<a name="l00240"></a>00240     {
<a name="l00241"></a>00241       <a class="code" href="bgp__damp_8c.html#a38fa0292f82b418960810ceb8c2d2309">bgp_reuse_list_delete</a> (bdi);
<a name="l00242"></a>00242       <a class="code" href="bgp__damp_8c.html#a65aabd892cd32d8abc34163aa4c61582">bgp_reuse_list_add</a> (bdi);  
<a name="l00243"></a>00243     }
<a name="l00244"></a>00244       <span class="keywordflow">return</span> <a class="code" href="bgp__damp_8h.html#a0f58b7873622a8c3d2e28d38e30719e4">BGP_DAMP_SUPPRESSED</a>; 
<a name="l00245"></a>00245     }
<a name="l00246"></a>00246 
<a name="l00247"></a>00247   <span class="comment">/* If not suppressed before, do annonunce this withdraw and</span>
<a name="l00248"></a>00248 <span class="comment">     insert into reuse_list.  */</span>
<a name="l00249"></a>00249   <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> &gt;= damp-&gt;<a class="code" href="structbgp__damp__config.html#a61e0e7bdc6964b808d6796fe1019edbd">suppress_value</a>)
<a name="l00250"></a>00250     {
<a name="l00251"></a>00251       <a class="code" href="bgp__route_8c.html#a44f265aae5a483d9cef00d766759584a">bgp_info_set_flag</a> (rn, binfo, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>);
<a name="l00252"></a>00252       bdi-&gt;<a class="code" href="structbgp__damp__info.html#ad4151e652c9e1583cc8ff0ccde2dd72f">suppress_time</a> = t_now;
<a name="l00253"></a>00253       <a class="code" href="bgp__damp_8c.html#af9283a47419c1af6dab5a1f220f3fa69">BGP_DAMP_LIST_DEL</a> (damp, bdi);
<a name="l00254"></a>00254       <a class="code" href="bgp__damp_8c.html#a65aabd892cd32d8abc34163aa4c61582">bgp_reuse_list_add</a> (bdi);
<a name="l00255"></a>00255     }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257   <span class="keywordflow">return</span> <a class="code" href="bgp__damp_8h.html#aa51e39b231ea1edb713d9549a42d00a0">BGP_DAMP_USED</a>;
<a name="l00258"></a>00258 }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 <span class="keywordtype">int</span>
<a name="l00261"></a><a class="code" href="bgp__damp_8h.html#abcc2f743317efced3d9f633e38d649eb">00261</a> <a class="code" href="bgp__damp_8c.html#ab12b23e18629cfff0fcc114ca69829d5">bgp_damp_update</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__node.html">bgp_node</a> *<a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a>, 
<a name="l00262"></a>00262          <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> <a class="code" href="structbgp__damp__info.html#a14549e505c1698c5d8473351caaa2d7f">afi</a>, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> <a class="code" href="structbgp__damp__info.html#a47ce9fc92a7ad8fd67a9c768d3f9fc00">safi</a>)
<a name="l00263"></a>00263 {
<a name="l00264"></a>00264   time_t t_now;
<a name="l00265"></a>00265   <span class="keyword">struct </span><a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi;
<a name="l00266"></a>00266   <span class="keywordtype">int</span> status;
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   <span class="keywordflow">if</span> (!binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> || !((bdi = binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>)))
<a name="l00269"></a>00269     <span class="keywordflow">return</span> <a class="code" href="bgp__damp_8h.html#aa51e39b231ea1edb713d9549a42d00a0">BGP_DAMP_USED</a>;
<a name="l00270"></a>00270 
<a name="l00271"></a>00271   t_now = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l00272"></a>00272   <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, binfo, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>);
<a name="l00273"></a>00273 
<a name="l00274"></a>00274   bdi-&gt;<a class="code" href="structbgp__damp__info.html#acdc7e308a11230cd73c90b0dcf7a3cdf">lastrecord</a> = <a class="code" href="bgp__damp_8h.html#a311f4eb102141807a3a95b5f0a55726a">BGP_RECORD_UPDATE</a>;
<a name="l00275"></a>00275   bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> = <a class="code" href="bgp__damp_8c.html#a04742fc672b86175444b4b94161c9a81">bgp_damp_decay</a> (t_now - bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a>, bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>);
<a name="l00276"></a>00276 
<a name="l00277"></a>00277   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>)
<a name="l00278"></a>00278       &amp;&amp; (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> &lt; damp-&gt;<a class="code" href="structbgp__damp__config.html#a61e0e7bdc6964b808d6796fe1019edbd">suppress_value</a>))
<a name="l00279"></a>00279     status = <a class="code" href="bgp__damp_8h.html#aa51e39b231ea1edb713d9549a42d00a0">BGP_DAMP_USED</a>;
<a name="l00280"></a>00280   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>)
<a name="l00281"></a>00281        &amp;&amp; (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> &lt; damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a>) )
<a name="l00282"></a>00282     {
<a name="l00283"></a>00283       <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (rn, binfo, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>);
<a name="l00284"></a>00284       <a class="code" href="bgp__damp_8c.html#a38fa0292f82b418960810ceb8c2d2309">bgp_reuse_list_delete</a> (bdi);
<a name="l00285"></a>00285       <a class="code" href="bgp__damp_8c.html#a9adb7c9da2bfb12c80b3c0602bdda527">BGP_DAMP_LIST_ADD</a> (damp, bdi);
<a name="l00286"></a>00286       bdi-&gt;<a class="code" href="structbgp__damp__info.html#ad4151e652c9e1583cc8ff0ccde2dd72f">suppress_time</a> = 0;
<a name="l00287"></a>00287       status = <a class="code" href="bgp__damp_8h.html#aa51e39b231ea1edb713d9549a42d00a0">BGP_DAMP_USED</a>;
<a name="l00288"></a>00288     }
<a name="l00289"></a>00289   <span class="keywordflow">else</span>
<a name="l00290"></a>00290     status = <a class="code" href="bgp__damp_8h.html#a0f58b7873622a8c3d2e28d38e30719e4">BGP_DAMP_SUPPRESSED</a>;  
<a name="l00291"></a>00291 
<a name="l00292"></a>00292   <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> &gt; damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a> / 2.0)
<a name="l00293"></a>00293     bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a> = t_now;
<a name="l00294"></a>00294   <span class="keywordflow">else</span>
<a name="l00295"></a>00295     <a class="code" href="bgp__damp_8c.html#a0c4f46bfbd9a397b8ba5d830d48cc5ca">bgp_damp_info_free</a> (bdi, 0);
<a name="l00296"></a>00296     
<a name="l00297"></a>00297   <span class="keywordflow">return</span> status;
<a name="l00298"></a>00298 }
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 <span class="comment">/* Remove dampening information and history route.  */</span>
<a name="l00301"></a>00301 <span class="keywordtype">int</span> 
<a name="l00302"></a><a class="code" href="bgp__damp_8h.html#a177487cf8dc8e80e62c55debe7ede7d5">00302</a> <a class="code" href="bgp__damp_8c.html#a1cdac465054860376051b602d242b392">bgp_damp_scan</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> <a class="code" href="structbgp__damp__info.html#a14549e505c1698c5d8473351caaa2d7f">afi</a>, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> <a class="code" href="structbgp__damp__info.html#a47ce9fc92a7ad8fd67a9c768d3f9fc00">safi</a>)
<a name="l00303"></a>00303 {
<a name="l00304"></a>00304   time_t t_now, t_diff;
<a name="l00305"></a>00305   <span class="keyword">struct </span><a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi;
<a name="l00306"></a>00306   
<a name="l00307"></a>00307   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a> &amp;&amp; binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>);
<a name="l00308"></a>00308   
<a name="l00309"></a>00309   t_now = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l00310"></a>00310   bdi = binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>;
<a name="l00311"></a>00311  
<a name="l00312"></a>00312   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>))
<a name="l00313"></a>00313     {
<a name="l00314"></a>00314       t_diff = t_now - bdi-&gt;<a class="code" href="structbgp__damp__info.html#ad4151e652c9e1583cc8ff0ccde2dd72f">suppress_time</a>;
<a name="l00315"></a>00315 
<a name="l00316"></a>00316       <span class="keywordflow">if</span> (t_diff &gt;= damp-&gt;<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a>)
<a name="l00317"></a>00317         {
<a name="l00318"></a>00318           <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a>, binfo, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>);
<a name="l00319"></a>00319           <a class="code" href="bgp__damp_8c.html#a38fa0292f82b418960810ceb8c2d2309">bgp_reuse_list_delete</a> (bdi);
<a name="l00320"></a>00320       <a class="code" href="bgp__damp_8c.html#a9adb7c9da2bfb12c80b3c0602bdda527">BGP_DAMP_LIST_ADD</a> (damp, bdi);
<a name="l00321"></a>00321           bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> = damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a>;
<a name="l00322"></a>00322           bdi-&gt;<a class="code" href="structbgp__damp__info.html#ad4151e652c9e1583cc8ff0ccde2dd72f">suppress_time</a> = 0;
<a name="l00323"></a>00323           bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a> = t_now;
<a name="l00324"></a>00324           
<a name="l00325"></a>00325           <span class="comment">/* Need to announce UPDATE once this binfo is usable again. */</span>
<a name="l00326"></a>00326           <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#acdc7e308a11230cd73c90b0dcf7a3cdf">lastrecord</a> == <a class="code" href="bgp__damp_8h.html#a311f4eb102141807a3a95b5f0a55726a">BGP_RECORD_UPDATE</a>)
<a name="l00327"></a>00327             <span class="keywordflow">return</span> 1;
<a name="l00328"></a>00328           <span class="keywordflow">else</span>
<a name="l00329"></a>00329             <span class="keywordflow">return</span> 0;
<a name="l00330"></a>00330         }
<a name="l00331"></a>00331     }
<a name="l00332"></a>00332   <span class="keywordflow">else</span>
<a name="l00333"></a>00333     {
<a name="l00334"></a>00334       t_diff = t_now - bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a>;
<a name="l00335"></a>00335       bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> = <a class="code" href="bgp__damp_8c.html#a04742fc672b86175444b4b94161c9a81">bgp_damp_decay</a> (t_diff, bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>);
<a name="l00336"></a>00336 
<a name="l00337"></a>00337       <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a> &lt;= damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a> / 2.0)
<a name="l00338"></a>00338         {
<a name="l00339"></a>00339           <span class="comment">/* release the bdi, bdi-&gt;binfo. */</span>  
<a name="l00340"></a>00340           <a class="code" href="bgp__damp_8c.html#a0c4f46bfbd9a397b8ba5d830d48cc5ca">bgp_damp_info_free</a> (bdi, 1);
<a name="l00341"></a>00341           <span class="keywordflow">return</span> 0;
<a name="l00342"></a>00342         }            
<a name="l00343"></a>00343       <span class="keywordflow">else</span>
<a name="l00344"></a>00344         bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a> = t_now;
<a name="l00345"></a>00345     }       
<a name="l00346"></a>00346   <span class="keywordflow">return</span> 0;
<a name="l00347"></a>00347 }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 <span class="keywordtype">void</span>
<a name="l00350"></a><a class="code" href="bgp__damp_8h.html#afec4152cae969d5c6b34a87d62382489">00350</a> <a class="code" href="bgp__damp_8c.html#a0c4f46bfbd9a397b8ba5d830d48cc5ca">bgp_damp_info_free</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi, <span class="keywordtype">int</span> withdraw)
<a name="l00351"></a>00351 {
<a name="l00352"></a>00352   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *binfo;
<a name="l00353"></a>00353 
<a name="l00354"></a>00354   <span class="keywordflow">if</span> (! bdi)
<a name="l00355"></a>00355     <span class="keywordflow">return</span>;
<a name="l00356"></a>00356 
<a name="l00357"></a>00357   binfo = bdi-&gt;<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>;
<a name="l00358"></a>00358   binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00359"></a>00359 
<a name="l00360"></a>00360   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>))
<a name="l00361"></a>00361     <a class="code" href="bgp__damp_8c.html#a38fa0292f82b418960810ceb8c2d2309">bgp_reuse_list_delete</a> (bdi);
<a name="l00362"></a>00362   <span class="keywordflow">else</span>
<a name="l00363"></a>00363     <a class="code" href="bgp__damp_8c.html#af9283a47419c1af6dab5a1f220f3fa69">BGP_DAMP_LIST_DEL</a> (damp, bdi);
<a name="l00364"></a>00364 
<a name="l00365"></a>00365   <a class="code" href="bgp__route_8c.html#a818f5df3bcb251b38f290b27a95baca3">bgp_info_unset_flag</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a>, binfo, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>|<a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>);
<a name="l00366"></a>00366 
<a name="l00367"></a>00367   <span class="keywordflow">if</span> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#acdc7e308a11230cd73c90b0dcf7a3cdf">lastrecord</a> == <a class="code" href="bgp__damp_8h.html#aeb2d15f73eff91038418b5c8596a8308">BGP_RECORD_WITHDRAW</a> &amp;&amp; withdraw)
<a name="l00368"></a>00368     <a class="code" href="bgp__route_8c.html#abfe260239e1b72a286e9c45a5aa1afbd">bgp_info_delete</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a506a36cf4f20e2069a1623933c18d6fb">rn</a>, binfo);
<a name="l00369"></a>00369   
<a name="l00370"></a>00370   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0469230ad2a9a5121c508a98d7d279c2">MTYPE_BGP_DAMP_INFO</a>, bdi);
<a name="l00371"></a>00371 }
<a name="l00372"></a>00372 
<a name="l00373"></a>00373 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00374"></a><a class="code" href="bgp__damp_8c.html#ada34675b0114f7719991dae8fb21defe">00374</a> <a class="code" href="bgp__damp_8c.html#ada34675b0114f7719991dae8fb21defe">bgp_damp_parameter_set</a> (<span class="keywordtype">int</span> hlife, <span class="keywordtype">int</span> reuse, <span class="keywordtype">int</span> sup, <span class="keywordtype">int</span> maxsup)
<a name="l00375"></a>00375 {
<a name="l00376"></a>00376   <span class="keywordtype">double</span> reuse_max_ratio;
<a name="l00377"></a>00377   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00378"></a>00378   <span class="keywordtype">double</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00379"></a>00379     
<a name="l00380"></a>00380   damp-&gt;<a class="code" href="structbgp__damp__config.html#a61e0e7bdc6964b808d6796fe1019edbd">suppress_value</a> = sup;
<a name="l00381"></a>00381   damp-&gt;<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a> = hlife;
<a name="l00382"></a>00382   damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a> = reuse;
<a name="l00383"></a>00383   damp-&gt;<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a> = maxsup;
<a name="l00384"></a>00384 
<a name="l00385"></a>00385   <span class="comment">/* Initialize params per bgp_damp_config. */</span>
<a name="l00386"></a>00386   damp-&gt;<a class="code" href="structbgp__damp__config.html#ad01f01c54dc229b545b912d7a14ded83">reuse_index_size</a> = <a class="code" href="bgp__damp_8h.html#a8b34f88efd4ed74a463e46260f850e8e">REUSE_ARRAY_SIZE</a>;
<a name="l00387"></a>00387 
<a name="l00388"></a>00388   damp-&gt;<a class="code" href="structbgp__damp__config.html#a46ab465397181f1fc58383f268e30885">ceiling</a> = (int)(damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a> * (pow(2, (<span class="keywordtype">double</span>)damp-&gt;<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a>/damp-&gt;<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a>))); 
<a name="l00389"></a>00389 
<a name="l00390"></a>00390   <span class="comment">/* Decay-array computations */</span>
<a name="l00391"></a>00391   damp-&gt;<a class="code" href="structbgp__damp__config.html#a8a14f82a5f992a698f6be233a21afce9">decay_array_size</a> = ceil ((<span class="keywordtype">double</span>) damp-&gt;<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a> / <a class="code" href="bgp__damp_8h.html#a5400b1f2028d38732e4377be4f32b255">DELTA_T</a>);
<a name="l00392"></a>00392   damp-&gt;<a class="code" href="structbgp__damp__config.html#ad35b88c80cde9e6c1b6dd5f73d79c599">decay_array</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3ba40968b9b6a7aff633aea95f2341f8">MTYPE_BGP_DAMP_ARRAY</a>,
<a name="l00393"></a>00393                    <span class="keyword">sizeof</span>(<span class="keywordtype">double</span>) * (damp-&gt;<a class="code" href="structbgp__damp__config.html#a8a14f82a5f992a698f6be233a21afce9">decay_array_size</a>));
<a name="l00394"></a>00394   damp-&gt;<a class="code" href="structbgp__damp__config.html#ad35b88c80cde9e6c1b6dd5f73d79c599">decay_array</a>[0] = 1.0;
<a name="l00395"></a>00395   damp-&gt;<a class="code" href="structbgp__damp__config.html#ad35b88c80cde9e6c1b6dd5f73d79c599">decay_array</a>[1] = exp ((1.0/((<span class="keywordtype">double</span>)damp-&gt;<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a>/<a class="code" href="bgp__damp_8h.html#a5400b1f2028d38732e4377be4f32b255">DELTA_T</a>)) * log(0.5));
<a name="l00396"></a>00396 
<a name="l00397"></a>00397   <span class="comment">/* Calculate decay values for all possible times */</span>
<a name="l00398"></a>00398   <span class="keywordflow">for</span> (i = 2; i &lt; damp-&gt;<a class="code" href="structbgp__damp__config.html#a8a14f82a5f992a698f6be233a21afce9">decay_array_size</a>; i++)
<a name="l00399"></a>00399     damp-&gt;<a class="code" href="structbgp__damp__config.html#ad35b88c80cde9e6c1b6dd5f73d79c599">decay_array</a>[i] = damp-&gt;<a class="code" href="structbgp__damp__config.html#ad35b88c80cde9e6c1b6dd5f73d79c599">decay_array</a>[i-1] * damp-&gt;<a class="code" href="structbgp__damp__config.html#ad35b88c80cde9e6c1b6dd5f73d79c599">decay_array</a>[1];
<a name="l00400"></a>00400     
<a name="l00401"></a>00401   <span class="comment">/* Reuse-list computations */</span>
<a name="l00402"></a>00402   i = ceil ((<span class="keywordtype">double</span>)damp-&gt;<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a> / <a class="code" href="bgp__damp_8h.html#a0ab730b90f217aaee332a4c77360dfca">DELTA_REUSE</a>) + 1;
<a name="l00403"></a>00403   <span class="keywordflow">if</span> (i &gt; <a class="code" href="bgp__damp_8h.html#a9d1055d6abdc192383615cb45d163fba">REUSE_LIST_SIZE</a> || i == 0)
<a name="l00404"></a>00404     i = <a class="code" href="bgp__damp_8h.html#a9d1055d6abdc192383615cb45d163fba">REUSE_LIST_SIZE</a>;
<a name="l00405"></a>00405   damp-&gt;<a class="code" href="structbgp__damp__config.html#ad82b645f7ca7c7debdb3c54943d86771">reuse_list_size</a> = <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>; 
<a name="l00406"></a>00406 
<a name="l00407"></a>00407   damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3ba40968b9b6a7aff633aea95f2341f8">MTYPE_BGP_DAMP_ARRAY</a>, 
<a name="l00408"></a>00408                   damp-&gt;<a class="code" href="structbgp__damp__config.html#ad82b645f7ca7c7debdb3c54943d86771">reuse_list_size</a> 
<a name="l00409"></a>00409                   * sizeof (<span class="keyword">struct</span> bgp_reuse_node *));
<a name="l00410"></a>00410   memset (damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>, 0x00, 
<a name="l00411"></a>00411           damp-&gt;<a class="code" href="structbgp__damp__config.html#ad82b645f7ca7c7debdb3c54943d86771">reuse_list_size</a> * sizeof (<span class="keyword">struct</span> bgp_reuse_node *));  
<a name="l00412"></a>00412 
<a name="l00413"></a>00413   <span class="comment">/* Reuse-array computations */</span>
<a name="l00414"></a>00414   damp-&gt;<a class="code" href="structbgp__damp__config.html#a4f84b3db83411ea2f69351e487f19b42">reuse_index</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3ba40968b9b6a7aff633aea95f2341f8">MTYPE_BGP_DAMP_ARRAY</a>, 
<a name="l00415"></a>00415                    <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) * damp-&gt;<a class="code" href="structbgp__damp__config.html#ad01f01c54dc229b545b912d7a14ded83">reuse_index_size</a>);
<a name="l00416"></a>00416   memset (damp-&gt;<a class="code" href="structbgp__damp__config.html#a4f84b3db83411ea2f69351e487f19b42">reuse_index</a>, 0x00,
<a name="l00417"></a>00417           damp-&gt;<a class="code" href="structbgp__damp__config.html#ad82b645f7ca7c7debdb3c54943d86771">reuse_list_size</a> * sizeof (<span class="keywordtype">int</span>));
<a name="l00418"></a>00418 
<a name="l00419"></a>00419   reuse_max_ratio = (double)damp-&gt;<a class="code" href="structbgp__damp__config.html#a46ab465397181f1fc58383f268e30885">ceiling</a>/damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a>;
<a name="l00420"></a>00420   j = (exp((<span class="keywordtype">double</span>)damp-&gt;<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a>/damp-&gt;<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a>) * log10(2.0));
<a name="l00421"></a>00421   <span class="keywordflow">if</span> ( reuse_max_ratio &gt; j &amp;&amp; j != 0 )
<a name="l00422"></a>00422     reuse_max_ratio = <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00423"></a>00423 
<a name="l00424"></a>00424   damp-&gt;<a class="code" href="structbgp__damp__config.html#ae3cb43b4b1bdb6330512218fe87bbce0">scale_factor</a> = (double)damp-&gt;<a class="code" href="structbgp__damp__config.html#ad01f01c54dc229b545b912d7a14ded83">reuse_index_size</a>/(reuse_max_ratio - 1);
<a name="l00425"></a>00425 
<a name="l00426"></a>00426   <span class="keywordflow">for</span> (i = 0; i &lt; damp-&gt;<a class="code" href="structbgp__damp__config.html#ad01f01c54dc229b545b912d7a14ded83">reuse_index_size</a>; i++)
<a name="l00427"></a>00427     {
<a name="l00428"></a>00428       damp-&gt;<a class="code" href="structbgp__damp__config.html#a4f84b3db83411ea2f69351e487f19b42">reuse_index</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] = 
<a name="l00429"></a>00429     (int)(((<span class="keywordtype">double</span>)damp-&gt;<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a> / <a class="code" href="bgp__damp_8h.html#a0ab730b90f217aaee332a4c77360dfca">DELTA_REUSE</a>)
<a name="l00430"></a>00430           * log10 (1.0 / (damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a> * ( 1.0 + ((<span class="keywordtype">double</span>)i/damp-&gt;<a class="code" href="structbgp__damp__config.html#ae3cb43b4b1bdb6330512218fe87bbce0">scale_factor</a>)))) / log10(0.5));
<a name="l00431"></a>00431     }
<a name="l00432"></a>00432 }
<a name="l00433"></a>00433 
<a name="l00434"></a>00434 <span class="keywordtype">int</span>
<a name="l00435"></a><a class="code" href="bgp__damp_8h.html#a29aef1bd162d03693ce3ef1aad6eb03b">00435</a> <a class="code" href="bgp__damp_8c.html#a1c4a2f4e76f8ebba440c7a7db87bf2d2">bgp_damp_enable</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, time_t half,
<a name="l00436"></a>00436          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reuse, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> suppress, time_t max)
<a name="l00437"></a>00437 {
<a name="l00438"></a>00438   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>))
<a name="l00439"></a>00439     {
<a name="l00440"></a>00440       <span class="keywordflow">if</span> (damp-&gt;<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a> == half
<a name="l00441"></a>00441       &amp;&amp; damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a> == reuse
<a name="l00442"></a>00442       &amp;&amp; damp-&gt;<a class="code" href="structbgp__damp__config.html#a61e0e7bdc6964b808d6796fe1019edbd">suppress_value</a> == suppress
<a name="l00443"></a>00443       &amp;&amp; damp-&gt;<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a> == max)
<a name="l00444"></a>00444     <span class="keywordflow">return</span> 0;
<a name="l00445"></a>00445       <a class="code" href="bgp__damp_8c.html#a12aae1fce37ad880818236997eb67e51">bgp_damp_disable</a> (bgp, afi, safi);
<a name="l00446"></a>00446     }
<a name="l00447"></a>00447 
<a name="l00448"></a>00448   <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>);
<a name="l00449"></a>00449   <a class="code" href="bgp__damp_8c.html#ada34675b0114f7719991dae8fb21defe">bgp_damp_parameter_set</a> (half, reuse, suppress, max);
<a name="l00450"></a>00450 
<a name="l00451"></a>00451   <span class="comment">/* Register reuse timer.  */</span>
<a name="l00452"></a>00452   <span class="keywordflow">if</span> (! damp-&gt;<a class="code" href="structbgp__damp__config.html#a917075d1961998bb01d7cb2043a4aa80">t_reuse</a>)
<a name="l00453"></a>00453     damp-&gt;<a class="code" href="structbgp__damp__config.html#a917075d1961998bb01d7cb2043a4aa80">t_reuse</a> = 
<a name="l00454"></a>00454       <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="bgp__damp_8c.html#a1eb38f534f8bbb214584a2dbacb649a0">bgp_reuse_timer</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="bgp__damp_8h.html#a0ab730b90f217aaee332a4c77360dfca">DELTA_REUSE</a>);
<a name="l00455"></a>00455 
<a name="l00456"></a>00456   <span class="keywordflow">return</span> 0;
<a name="l00457"></a>00457 }
<a name="l00458"></a>00458 
<a name="l00459"></a>00459 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00460"></a><a class="code" href="bgp__damp_8c.html#ae83c7c3e15db5d6fb697f7321c1c6f4b">00460</a> <a class="code" href="bgp__damp_8c.html#ae83c7c3e15db5d6fb697f7321c1c6f4b">bgp_damp_config_clean</a> (<span class="keyword">struct</span> <a class="code" href="structbgp__damp__config.html">bgp_damp_config</a> *damp)
<a name="l00461"></a>00461 {
<a name="l00462"></a>00462   <span class="comment">/* Free decay array */</span>
<a name="l00463"></a>00463   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3ba40968b9b6a7aff633aea95f2341f8">MTYPE_BGP_DAMP_ARRAY</a>, damp-&gt;<a class="code" href="structbgp__damp__config.html#ad35b88c80cde9e6c1b6dd5f73d79c599">decay_array</a>);
<a name="l00464"></a>00464 
<a name="l00465"></a>00465   <span class="comment">/* Free reuse index array */</span>
<a name="l00466"></a>00466   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3ba40968b9b6a7aff633aea95f2341f8">MTYPE_BGP_DAMP_ARRAY</a>, damp-&gt;<a class="code" href="structbgp__damp__config.html#a4f84b3db83411ea2f69351e487f19b42">reuse_index</a>);
<a name="l00467"></a>00467 
<a name="l00468"></a>00468   <span class="comment">/* Free reuse list array. */</span>
<a name="l00469"></a>00469   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3ba40968b9b6a7aff633aea95f2341f8">MTYPE_BGP_DAMP_ARRAY</a>, damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>);
<a name="l00470"></a>00470 }
<a name="l00471"></a>00471 
<a name="l00472"></a>00472 <span class="comment">/* Clean all the bgp_damp_info stored in reuse_list. */</span>
<a name="l00473"></a>00473 <span class="keywordtype">void</span>
<a name="l00474"></a><a class="code" href="bgp__damp_8h.html#a87eff85caf5992e70da951242cccc565">00474</a> <a class="code" href="bgp__damp_8c.html#a87eff85caf5992e70da951242cccc565">bgp_damp_info_clean</a> (<span class="keywordtype">void</span>)
<a name="l00475"></a>00475 {
<a name="l00476"></a>00476   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00477"></a>00477   <span class="keyword">struct </span><a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi, *<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a>;
<a name="l00478"></a>00478 
<a name="l00479"></a>00479   damp-&gt;<a class="code" href="structbgp__damp__config.html#a9043492faf6e46560ab22c0e408d2b86">reuse_offset</a> = 0;
<a name="l00480"></a>00480 
<a name="l00481"></a>00481   <span class="keywordflow">for</span> (i = 0; i &lt; damp-&gt;<a class="code" href="structbgp__damp__config.html#ad82b645f7ca7c7debdb3c54943d86771">reuse_list_size</a>; i++)
<a name="l00482"></a>00482     {
<a name="l00483"></a>00483       <span class="keywordflow">if</span> (! damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>[i])
<a name="l00484"></a>00484     <span class="keywordflow">continue</span>;
<a name="l00485"></a>00485 
<a name="l00486"></a>00486       <span class="keywordflow">for</span> (bdi = damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>[i]; bdi; bdi = next)
<a name="l00487"></a>00487     {
<a name="l00488"></a>00488       next = bdi-&gt;<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a>;
<a name="l00489"></a>00489       <a class="code" href="bgp__damp_8c.html#a0c4f46bfbd9a397b8ba5d830d48cc5ca">bgp_damp_info_free</a> (bdi, 1);
<a name="l00490"></a>00490     }
<a name="l00491"></a>00491       damp-&gt;<a class="code" href="structbgp__damp__config.html#a31e11b75924cfb22e0a563e532849fd4">reuse_list</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00492"></a>00492     }
<a name="l00493"></a>00493 
<a name="l00494"></a>00494   <span class="keywordflow">for</span> (bdi = damp-&gt;<a class="code" href="structbgp__damp__config.html#aaa7d72e2afdf80f29bd4c71fdeb100bd">no_reuse_list</a>; bdi; bdi = next)
<a name="l00495"></a>00495     {
<a name="l00496"></a>00496       next = bdi-&gt;<a class="code" href="structbgp__damp__info.html#aaab72d4a62904dfd1c1c317936d7ffea">next</a>;
<a name="l00497"></a>00497       <a class="code" href="bgp__damp_8c.html#a0c4f46bfbd9a397b8ba5d830d48cc5ca">bgp_damp_info_free</a> (bdi, 1);
<a name="l00498"></a>00498     }
<a name="l00499"></a>00499   damp-&gt;<a class="code" href="structbgp__damp__config.html#aaa7d72e2afdf80f29bd4c71fdeb100bd">no_reuse_list</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00500"></a>00500 }
<a name="l00501"></a>00501 
<a name="l00502"></a>00502 <span class="keywordtype">int</span>
<a name="l00503"></a><a class="code" href="bgp__damp_8h.html#a09e30ef3ca688a764ce567f7b8dbff62">00503</a> <a class="code" href="bgp__damp_8c.html#a12aae1fce37ad880818236997eb67e51">bgp_damp_disable</a> (<span class="keyword">struct</span> <a class="code" href="structbgp.html">bgp</a> *<a class="code" href="structbgp.html">bgp</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> <a class="code" href="structbgp__damp__info.html#a14549e505c1698c5d8473351caaa2d7f">afi</a>, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> <a class="code" href="structbgp__damp__info.html#a47ce9fc92a7ad8fd67a9c768d3f9fc00">safi</a>)
<a name="l00504"></a>00504 {
<a name="l00505"></a>00505   <span class="comment">/* Cancel reuse thread. */</span>
<a name="l00506"></a>00506   <span class="keywordflow">if</span> (damp-&gt;<a class="code" href="structbgp__damp__config.html#a917075d1961998bb01d7cb2043a4aa80">t_reuse</a> )
<a name="l00507"></a>00507     <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (damp-&gt;<a class="code" href="structbgp__damp__config.html#a917075d1961998bb01d7cb2043a4aa80">t_reuse</a>);
<a name="l00508"></a>00508   damp-&gt;<a class="code" href="structbgp__damp__config.html#a917075d1961998bb01d7cb2043a4aa80">t_reuse</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00509"></a>00509 
<a name="l00510"></a>00510   <span class="comment">/* Clean BGP dampening information.  */</span>
<a name="l00511"></a>00511   <a class="code" href="bgp__damp_8c.html#a87eff85caf5992e70da951242cccc565">bgp_damp_info_clean</a> ();
<a name="l00512"></a>00512 
<a name="l00513"></a>00513   <span class="comment">/* Clear configuration */</span>
<a name="l00514"></a>00514   <a class="code" href="bgp__damp_8c.html#ae83c7c3e15db5d6fb697f7321c1c6f4b">bgp_damp_config_clean</a> (&amp;<a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>);
<a name="l00515"></a>00515 
<a name="l00516"></a>00516   <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#a30da262ef5f391dae5c93ed04cf243c4">af_flags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a1f74f91741ac0799c3348ce5f9e82992">BGP_CONFIG_DAMPENING</a>);
<a name="l00517"></a>00517   <span class="keywordflow">return</span> 0;
<a name="l00518"></a>00518 }
<a name="l00519"></a>00519 
<a name="l00520"></a>00520 <span class="keywordtype">void</span>
<a name="l00521"></a><a class="code" href="bgp__damp_8h.html#ac3b0d63e8478beac52a88f8ea6833c86">00521</a> <a class="code" href="bgp__damp_8c.html#a2d5528f427dd64bddefa520e998f085e">bgp_config_write_damp</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l00522"></a>00522 {
<a name="l00523"></a>00523   <span class="keywordflow">if</span> (<a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a> == <a class="code" href="bgp__damp_8h.html#a099e218170293741c73cc9dbfff822f8">DEFAULT_HALF_LIFE</a>*60
<a name="l00524"></a>00524       &amp;&amp; <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a> == <a class="code" href="bgp__damp_8h.html#a3bf1dcbb80b956851a56ad50639e2acd">DEFAULT_REUSE</a>
<a name="l00525"></a>00525       &amp;&amp; <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a61e0e7bdc6964b808d6796fe1019edbd">suppress_value</a> == <a class="code" href="bgp__damp_8h.html#a94af1812833b72e6cc01e6d2c253fdd7">DEFAULT_SUPPRESS</a>
<a name="l00526"></a>00526       &amp;&amp; <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a> == <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a>*4)
<a name="l00527"></a>00527     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp dampening%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00528"></a>00528   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a> != <a class="code" href="bgp__damp_8h.html#a099e218170293741c73cc9dbfff822f8">DEFAULT_HALF_LIFE</a>*60
<a name="l00529"></a>00529        &amp;&amp; <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a> == <a class="code" href="bgp__damp_8h.html#a3bf1dcbb80b956851a56ad50639e2acd">DEFAULT_REUSE</a>
<a name="l00530"></a>00530        &amp;&amp; <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a61e0e7bdc6964b808d6796fe1019edbd">suppress_value</a> == <a class="code" href="bgp__damp_8h.html#a94af1812833b72e6cc01e6d2c253fdd7">DEFAULT_SUPPRESS</a>
<a name="l00531"></a>00531        &amp;&amp; <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a> == <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a>*4)
<a name="l00532"></a>00532     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp dampening %ld%s&quot;</span>,
<a name="l00533"></a>00533          <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a>/60,
<a name="l00534"></a>00534          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00535"></a>00535   <span class="keywordflow">else</span>
<a name="l00536"></a>00536     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; bgp dampening %ld %d %d %ld%s&quot;</span>,
<a name="l00537"></a>00537          <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a7055c68200a901c92d87d6aa79acece7">half_life</a>/60,
<a name="l00538"></a>00538          <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a>,
<a name="l00539"></a>00539          <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a61e0e7bdc6964b808d6796fe1019edbd">suppress_value</a>,
<a name="l00540"></a>00540          <a class="code" href="bgp__damp_8c.html#ad3adefbd53055fecb5eea7e002c2c638">bgp_damp_cfg</a>.<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a>/60,
<a name="l00541"></a>00541          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00542"></a>00542 }
<a name="l00543"></a>00543 
<a name="l00544"></a>00544 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00545"></a><a class="code" href="bgp__damp_8c.html#a09df51c0fccbc11c1818a00e06be28da">00545</a> <a class="code" href="bgp__damp_8c.html#a09df51c0fccbc11c1818a00e06be28da">bgp_get_reuse_time</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>, <span class="keywordtype">char</span> *buf, <span class="keywordtype">size_t</span> len)
<a name="l00546"></a>00546 {
<a name="l00547"></a>00547   time_t reuse_time = 0;
<a name="l00548"></a>00548   <span class="keyword">struct </span>tm *tm = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00549"></a>00549 
<a name="l00550"></a>00550   <span class="keywordflow">if</span> (penalty &gt; damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a>)
<a name="l00551"></a>00551     {
<a name="l00552"></a>00552       reuse_time = (int) (<a class="code" href="bgp__damp_8h.html#a5400b1f2028d38732e4377be4f32b255">DELTA_T</a> * ((log((<span class="keywordtype">double</span>)damp-&gt;<a class="code" href="structbgp__damp__config.html#aec889c6882eb02a28dc81d58f8321d3c">reuse_limit</a>/penalty))/(log(damp-&gt;<a class="code" href="structbgp__damp__config.html#ad35b88c80cde9e6c1b6dd5f73d79c599">decay_array</a>[1])))); 
<a name="l00553"></a>00553 
<a name="l00554"></a>00554       <span class="keywordflow">if</span> (reuse_time &gt; damp-&gt;<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a>)
<a name="l00555"></a>00555     reuse_time = damp-&gt;<a class="code" href="structbgp__damp__config.html#a94f99fef7621bac5fab20490f889dca4">max_suppress_time</a>;
<a name="l00556"></a>00556 
<a name="l00557"></a>00557       tm = gmtime (&amp;reuse_time);
<a name="l00558"></a>00558     }
<a name="l00559"></a>00559   <span class="keywordflow">else</span> 
<a name="l00560"></a>00560     reuse_time = 0;
<a name="l00561"></a>00561 
<a name="l00562"></a>00562   <span class="comment">/* Making formatted timer strings. */</span>
<a name="l00563"></a>00563 <span class="preprocessor">#define ONE_DAY_SECOND 60*60*24</span>
<a name="l00564"></a>00564 <span class="preprocessor"></span><span class="preprocessor">#define ONE_WEEK_SECOND 60*60*24*7</span>
<a name="l00565"></a>00565 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (reuse_time == 0)
<a name="l00566"></a>00566     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;00:00:00&quot;</span>);
<a name="l00567"></a>00567   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (reuse_time &lt; <a class="code" href="bgp__damp_8c.html#a8950077f458e540a8b4292539e0120cf">ONE_DAY_SECOND</a>)
<a name="l00568"></a>00568     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%02d:%02d:%02d&quot;</span>, 
<a name="l00569"></a>00569               tm-&gt;tm_hour, tm-&gt;tm_min, tm-&gt;tm_sec);
<a name="l00570"></a>00570   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (reuse_time &lt; <a class="code" href="bgp__damp_8c.html#a762bcaaf64d0f21361ca5c0262b49f33">ONE_WEEK_SECOND</a>)
<a name="l00571"></a>00571     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%dd%02dh%02dm&quot;</span>, 
<a name="l00572"></a>00572               tm-&gt;tm_yday, tm-&gt;tm_hour, tm-&gt;tm_min);
<a name="l00573"></a>00573   <span class="keywordflow">else</span>
<a name="l00574"></a>00574     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%02dw%dd%02dh&quot;</span>, 
<a name="l00575"></a>00575               tm-&gt;tm_yday/7, tm-&gt;tm_yday - ((tm-&gt;tm_yday/7) * 7), tm-&gt;tm_hour); 
<a name="l00576"></a>00576 
<a name="l00577"></a>00577   <span class="keywordflow">return</span> buf;
<a name="l00578"></a>00578 }
<a name="l00579"></a>00579  
<a name="l00580"></a>00580 <span class="keywordtype">void</span>
<a name="l00581"></a><a class="code" href="bgp__damp_8h.html#a3b79a1f824e26a030900a8485bf6da80">00581</a> <a class="code" href="bgp__damp_8c.html#a3d56794255e856c30ce24f0adc808221">bgp_damp_info_vty</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *binfo)  
<a name="l00582"></a>00582 {
<a name="l00583"></a>00583   <span class="keyword">struct </span><a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi;
<a name="l00584"></a>00584   time_t t_now, t_diff;
<a name="l00585"></a>00585   <span class="keywordtype">char</span> timebuf[<a class="code" href="bgpd_8h.html#a4c420c0c5e00f67ebf9850015b7efd27">BGP_UPTIME_LEN</a>];
<a name="l00586"></a>00586   <span class="keywordtype">int</span> <a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>;
<a name="l00587"></a>00587 
<a name="l00588"></a>00588   <span class="keywordflow">if</span> (!binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l00589"></a>00589     <span class="keywordflow">return</span>;
<a name="l00590"></a>00590   
<a name="l00591"></a>00591   <span class="comment">/* BGP dampening information.  */</span>
<a name="l00592"></a>00592   bdi = binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>;
<a name="l00593"></a>00593 
<a name="l00594"></a>00594   <span class="comment">/* If dampening is not enabled or there is no dampening information,</span>
<a name="l00595"></a>00595 <span class="comment">     return immediately.  */</span>
<a name="l00596"></a>00596   <span class="keywordflow">if</span> (! damp || ! bdi)
<a name="l00597"></a>00597     <span class="keywordflow">return</span>;
<a name="l00598"></a>00598 
<a name="l00599"></a>00599   <span class="comment">/* Calculate new penalty.  */</span>
<a name="l00600"></a>00600   t_now = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l00601"></a>00601   t_diff = t_now - bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a>;
<a name="l00602"></a>00602   penalty = <a class="code" href="bgp__damp_8c.html#a04742fc672b86175444b4b94161c9a81">bgp_damp_decay</a> (t_diff, bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>);
<a name="l00603"></a>00603 
<a name="l00604"></a>00604   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;      Dampinfo: penalty %d, flapped %d times in %s&quot;</span>,
<a name="l00605"></a>00605            penalty, bdi-&gt;<a class="code" href="structbgp__damp__info.html#ab12ae05f133ded91a152d8b42c33336a">flap</a>,
<a name="l00606"></a>00606        <a class="code" href="bgpd_8c.html#acf827381bb67155dd3f9ec490bc453ff">peer_uptime</a> (bdi-&gt;<a class="code" href="structbgp__damp__info.html#a79b767b81bcc0f2015c6da5651dfa149">start_time</a>, timebuf, <a class="code" href="bgpd_8h.html#a4c420c0c5e00f67ebf9850015b7efd27">BGP_UPTIME_LEN</a>));
<a name="l00607"></a>00607 
<a name="l00608"></a>00608   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a8ef9b384054b6b52e7d0af4021a3cc05">BGP_INFO_DAMPED</a>)
<a name="l00609"></a>00609       &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (binfo-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a57adf9fc517cc65fb9f4bcbf8ff796f2">BGP_INFO_HISTORY</a>))
<a name="l00610"></a>00610     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;, reuse in %s&quot;</span>,
<a name="l00611"></a>00611          <a class="code" href="bgp__damp_8c.html#a09df51c0fccbc11c1818a00e06be28da">bgp_get_reuse_time</a> (penalty, timebuf, <a class="code" href="bgpd_8h.html#a4c420c0c5e00f67ebf9850015b7efd27">BGP_UPTIME_LEN</a>));
<a name="l00612"></a>00612 
<a name="l00613"></a>00613   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00614"></a>00614 }
<a name="l00615"></a>00615 
<a name="l00616"></a>00616 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00617"></a><a class="code" href="bgp__damp_8h.html#af37d7ea0c77db015306574f981114493">00617</a> <a class="code" href="bgp__damp_8c.html#a4dab8cc4c114da6cbe9ff4258a958103">bgp_damp_reuse_time_vty</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structbgp__info.html">bgp_info</a> *<a class="code" href="structbgp__damp__info.html#af37fca6e0e158d27ae0558caedbb6379">binfo</a>,
<a name="l00618"></a>00618                          <span class="keywordtype">char</span> *timebuf, <span class="keywordtype">size_t</span> len)
<a name="l00619"></a>00619 {
<a name="l00620"></a>00620   <span class="keyword">struct </span><a class="code" href="structbgp__damp__info.html">bgp_damp_info</a> *bdi;
<a name="l00621"></a>00621   time_t t_now, t_diff;
<a name="l00622"></a>00622   <span class="keywordtype">int</span> <a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>;
<a name="l00623"></a>00623   
<a name="l00624"></a>00624   <span class="keywordflow">if</span> (!binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l00625"></a>00625     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00626"></a>00626   
<a name="l00627"></a>00627   <span class="comment">/* BGP dampening information.  */</span>
<a name="l00628"></a>00628   bdi = binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#a7ff3f44362518bf22b13989ec6924986">damp_info</a>;
<a name="l00629"></a>00629 
<a name="l00630"></a>00630   <span class="comment">/* If dampening is not enabled or there is no dampening information,</span>
<a name="l00631"></a>00631 <span class="comment">     return immediately.  */</span>
<a name="l00632"></a>00632   <span class="keywordflow">if</span> (! damp || ! bdi)
<a name="l00633"></a>00633     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00634"></a>00634 
<a name="l00635"></a>00635   <span class="comment">/* Calculate new penalty.  */</span>
<a name="l00636"></a>00636   t_now = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l00637"></a>00637   t_diff = t_now - bdi-&gt;<a class="code" href="structbgp__damp__info.html#a3d0c950f70317aedfd15a0b28feceae1">t_updated</a>;
<a name="l00638"></a>00638   penalty = <a class="code" href="bgp__damp_8c.html#a04742fc672b86175444b4b94161c9a81">bgp_damp_decay</a> (t_diff, bdi-&gt;<a class="code" href="structbgp__damp__info.html#a64957844448af43a55f25e72ffe419a6">penalty</a>);
<a name="l00639"></a>00639 
<a name="l00640"></a>00640   <span class="keywordflow">return</span>  <a class="code" href="bgp__damp_8c.html#a09df51c0fccbc11c1818a00e06be28da">bgp_get_reuse_time</a> (penalty, timebuf, len);
<a name="l00641"></a>00641 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__damp_8c.html">bgp_damp.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:02 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
