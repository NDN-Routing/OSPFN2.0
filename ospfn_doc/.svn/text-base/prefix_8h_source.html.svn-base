<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/prefix.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('prefix_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/prefix.h</div>  </div>
</div>
<div class="contents">
<a href="prefix_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Prefix structure.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1998 Kunihiro Ishiguro</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#ifndef _ZEBRA_PREFIX_H</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span><span class="preprocessor">#define _ZEBRA_PREFIX_H</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">/*</span>
<a name="l00029"></a>00029 <span class="comment"> * A struct prefix contains an address family, a prefix length, and an</span>
<a name="l00030"></a>00030 <span class="comment"> * address.  This can represent either a &#39;network prefix&#39; as defined</span>
<a name="l00031"></a>00031 <span class="comment"> * by CIDR, where the &#39;host bits&#39; of the prefix are 0</span>
<a name="l00032"></a>00032 <span class="comment"> * (e.g. AF_INET:10.0.0.0/8), or an address and netmask</span>
<a name="l00033"></a>00033 <span class="comment"> * (e.g. AF_INET:10.0.0.9/8), such as might be configured on an</span>
<a name="l00034"></a>00034 <span class="comment"> * interface.</span>
<a name="l00035"></a>00035 <span class="comment"> */</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">/* IPv4 and IPv6 unified prefix structure. */</span>
<a name="l00038"></a><a class="code" href="structprefix.html">00038</a> <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a>
<a name="l00039"></a>00039 {
<a name="l00040"></a><a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">00040</a>   u_char <a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>;
<a name="l00041"></a><a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">00041</a>   u_char <a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l00042"></a>00042   <span class="keyword">union </span>
<a name="l00043"></a>00043   {
<a name="l00044"></a><a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">00044</a>     u_char <a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>;
<a name="l00045"></a><a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">00045</a>     <span class="keyword">struct </span>in_addr <a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l00046"></a>00046 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span>    <span class="keyword">struct </span>in6_addr prefix6;
<a name="l00048"></a>00048 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00049"></a>00049     <span class="keyword">struct </span>
<a name="l00050"></a>00050     {
<a name="l00051"></a><a class="code" href="structprefix.html#a9352ce45b07428a2fc68a4f90925cdae">00051</a>       <span class="keyword">struct </span>in_addr <a class="code" href="structprefix.html#a9352ce45b07428a2fc68a4f90925cdae">id</a>;
<a name="l00052"></a><a class="code" href="structprefix.html#a323135b4532e0ac445c10956e9ea1c20">00052</a>       <span class="keyword">struct </span>in_addr <a class="code" href="structprefix.html#a323135b4532e0ac445c10956e9ea1c20">adv_router</a>;
<a name="l00053"></a>00053     } <a class="code" href="structprefix.html#a416d94ff668bb11283d8e2aee61cca72">lp</a>;
<a name="l00054"></a><a class="code" href="structprefix.html#aff8f7c555d44bdcf53f9e09d3a2d2e68">00054</a>     u_char <a class="code" href="structprefix.html#aff8f7c555d44bdcf53f9e09d3a2d2e68">val</a>[8];
<a name="l00055"></a>00055   } u <a class="code" href="structprefix.html#a85fb839c1302025af46fe05fb90ee406">__attribute__</a> ((aligned (8)));
<a name="l00056"></a><a class="code" href="prefix_8h.html#a6b458105367a186babd858fd008a66be">00056</a> };
<a name="l00057"></a><a class="code" href="prefix_8h.html#a08e40e2dbc7ccdbf7fb88358aead274e">00057</a> 
<a name="l00058"></a>00058 <span class="comment">/* IPv4 prefix structure. */</span>
<a name="l00059"></a><a class="code" href="structprefix__ipv4.html">00059</a> <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>
<a name="l00060"></a>00060 {
<a name="l00061"></a><a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">00061</a>   u_char <a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00062"></a><a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">00062</a>   u_char <a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>;
<a name="l00063"></a><a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">00063</a>   <span class="keyword">struct </span>in_addr <a class="code" href="structprefix.html">prefix</a> <a class="code" href="structprefix__ipv4.html#ab09ca7043cb922a1659bd571098dd76d">__attribute__</a> ((aligned (8)));
<a name="l00064"></a><a class="code" href="prefix_8h.html#aa4419784611184c74a36162ffcf0123d">00064</a> };
<a name="l00065"></a>00065 
<a name="l00066"></a><a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">00066</a> <span class="comment">/* IPv6 prefix structure. */</span>
<a name="l00067"></a>00067 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="keyword">struct </span>prefix_ipv6
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070   u_char family;
<a name="l00071"></a>00071   u_char prefixlen;
<a name="l00072"></a>00072   <span class="keyword">struct </span>in6_addr prefix __attribute__ ((aligned (8)));
<a name="l00073"></a>00073 };
<a name="l00074"></a>00074 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00075"></a>00075 
<a name="l00076"></a><a class="code" href="structprefix__ls.html">00076</a> <span class="keyword">struct </span><a class="code" href="structprefix__ls.html">prefix_ls</a>
<a name="l00077"></a>00077 {
<a name="l00078"></a><a class="code" href="structprefix__ls.html#a9434c793e55a8d2f2375ae3d8d70af10">00078</a>   u_char <a class="code" href="structprefix__ls.html#a9434c793e55a8d2f2375ae3d8d70af10">family</a>;
<a name="l00079"></a><a class="code" href="structprefix__ls.html#a1ee1b2fc862ab8012f9d23e7ace80cad">00079</a>   u_char <a class="code" href="structprefix__ls.html#a1ee1b2fc862ab8012f9d23e7ace80cad">prefixlen</a>;
<a name="l00080"></a>00080   <span class="keyword">struct </span>in_addr <a class="code" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a> <a class="code" href="structprefix__ls.html#ac7834f5199a8cf4af8713ba4c8ef894f">__attribute__</a> ((aligned (8)));
<a name="l00081"></a><a class="code" href="structprefix__ls.html#ab406ab0b578ca4d930293850449d9f7a">00081</a>   <span class="keyword">struct </span>in_addr <a class="code" href="structprefix__ls.html#ab406ab0b578ca4d930293850449d9f7a">adv_router</a>;
<a name="l00082"></a>00082 };
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="comment">/* Prefix for routing distinguisher. */</span>
<a name="l00085"></a><a class="code" href="structprefix__rd.html">00085</a> <span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a>
<a name="l00086"></a>00086 {
<a name="l00087"></a><a class="code" href="structprefix__rd.html#aebc7554cffb51de46f09161875fb52ac">00087</a>   u_char <a class="code" href="structprefix__rd.html#aebc7554cffb51de46f09161875fb52ac">family</a>;
<a name="l00088"></a><a class="code" href="structprefix__rd.html#a1cbb8003bb847577d7d47a58f42c4873">00088</a>   u_char <a class="code" href="structprefix__rd.html#a1cbb8003bb847577d7d47a58f42c4873">prefixlen</a>;
<a name="l00089"></a>00089   u_char <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>[8] <a class="code" href="structprefix__rd.html#a3b5c9da9fe4986679c7c52138d23fdcb">__attribute__</a> ((aligned (8)));
<a name="l00090"></a>00090 };
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="preprocessor">#ifndef INET_ADDRSTRLEN</span>
<a name="l00093"></a><a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">00093</a> <span class="preprocessor"></span><span class="preprocessor">#define INET_ADDRSTRLEN 16</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* INET_ADDRSTRLEN */</span>
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="preprocessor">#ifndef INET6_ADDRSTRLEN</span>
<a name="l00097"></a><a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">00097</a> <span class="preprocessor"></span><span class="preprocessor">#define INET6_ADDRSTRLEN 46</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* INET6_ADDRSTRLEN */</span>
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="preprocessor">#ifndef INET6_BUFSIZ</span>
<a name="l00101"></a><a class="code" href="prefix_8h.html#aa154275bc7ebcfcb3a335788ad4dfe09">00101</a> <span class="preprocessor"></span><span class="preprocessor">#define INET6_BUFSIZ 51</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* INET6_BUFSIZ */</span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="comment">/* Max bit/byte length of IPv4 address. */</span>
<a name="l00105"></a><a class="code" href="prefix_8h.html#a013983d7a5267a63023c50ab32a85c24">00105</a> <span class="preprocessor">#define IPV4_MAX_BYTELEN    4</span>
<a name="l00106"></a><a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">00106</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV4_MAX_BITLEN    32</span>
<a name="l00107"></a><a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">00107</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV4_MAX_PREFIXLEN 32</span>
<a name="l00108"></a><a class="code" href="prefix_8h.html#aed79e5e7f07f40fd10b39c04fbb24fc8">00108</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV4_ADDR_CMP(D,S)   memcmp ((D), (S), IPV4_MAX_BYTELEN)</span>
<a name="l00109"></a><a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">00109</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV4_ADDR_SAME(D,S)  (memcmp ((D), (S), IPV4_MAX_BYTELEN) == 0)</span>
<a name="l00110"></a><a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">00110</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV4_ADDR_COPY(D,S)  memcpy ((D), (S), IPV4_MAX_BYTELEN)</span>
<a name="l00111"></a>00111 <span class="preprocessor"></span>
<a name="l00112"></a><a class="code" href="prefix_8h.html#a3864bb8a4b7cb6bff9e5c1d9ace8c215">00112</a> <span class="preprocessor">#define IPV4_NET0(a)    ((((u_int32_t) (a)) &amp; 0xff000000) == 0x00000000)</span>
<a name="l00113"></a><a class="code" href="prefix_8h.html#a255d6e4fa5cfaf4cd252266a0bd4dfda">00113</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV4_NET127(a)  ((((u_int32_t) (a)) &amp; 0xff000000) == 0x7f000000)</span>
<a name="l00114"></a><a class="code" href="prefix_8h.html#a456b834f6c0154cb01cadca0aec37f6a">00114</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV4_LINKLOCAL(a) ((((u_int32_t) (a)) &amp; 0xffff0000) == 0xa9fe0000)</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span>
<a name="l00116"></a>00116 <span class="comment">/* Max bit/byte length of IPv6 address. */</span>
<a name="l00117"></a><a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">00117</a> <span class="preprocessor">#define IPV6_MAX_BYTELEN    16</span>
<a name="l00118"></a><a class="code" href="prefix_8h.html#a05e4b561a81bb5a6f28ac69717d25dbb">00118</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV6_MAX_BITLEN    128</span>
<a name="l00119"></a><a class="code" href="prefix_8h.html#af240d7cd80eb12fc2e7e73a36e506131">00119</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV6_MAX_PREFIXLEN 128</span>
<a name="l00120"></a><a class="code" href="prefix_8h.html#a480ef8d442476500bb29a6e43ac62a5f">00120</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV6_ADDR_CMP(D,S)   memcmp ((D), (S), IPV6_MAX_BYTELEN)</span>
<a name="l00121"></a><a class="code" href="prefix_8h.html#a5f1eaa85b153050a498dacc958ab8283">00121</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV6_ADDR_SAME(D,S)  (memcmp ((D), (S), IPV6_MAX_BYTELEN) == 0)</span>
<a name="l00122"></a><a class="code" href="prefix_8h.html#aea44c9c04fa7bd58457b572592d391a7">00122</a> <span class="preprocessor"></span><span class="preprocessor">#define IPV6_ADDR_COPY(D,S)  memcpy ((D), (S), IPV6_MAX_BYTELEN)</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span>
<a name="l00124"></a>00124 <span class="comment">/* Count prefix size from mask length */</span>
<a name="l00125"></a><a class="code" href="prefix_8h.html#a472145011d944606a257487e80cc3ace">00125</a> <span class="preprocessor">#define PSIZE(a) (((a) + 7) / (8))</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span>
<a name="l00127"></a>00127 <span class="comment">/* Prefix&#39;s family member. */</span>
<a name="l00128"></a><a class="code" href="prefix_8h.html#a936de9ce96dcf8ebdfd5942c08425663">00128</a> <span class="preprocessor">#define PREFIX_FAMILY(p)  ((p)-&gt;family)</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span>
<a name="l00130"></a>00130 <span class="comment">/* Check bit of the prefix. */</span>
<a name="l00131"></a>00131 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00132"></a><a class="code" href="prefix_8h.html#a448f1ebdeae472533f8faafd675e8f0b">00132</a> <a class="code" href="prefix_8h.html#a448f1ebdeae472533f8faafd675e8f0b">prefix_bit</a> (<span class="keyword">const</span> u_char *<a class="code" href="structprefix.html">prefix</a>, <span class="keyword">const</span> u_char prefixlen)
<a name="l00133"></a>00133 {
<a name="l00134"></a>00134   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset = prefixlen / 8;
<a name="l00135"></a>00135   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shift  = 7 - (prefixlen % 8);
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   <span class="keywordflow">return</span> (prefix[offset] &gt;&gt; shift) &amp; 1;
<a name="l00138"></a>00138 }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>
<a name="l00141"></a><a class="code" href="prefix_8h.html#a977f32ed59782cfac9322d423455c189">00141</a> <a class="code" href="prefix_8h.html#a977f32ed59782cfac9322d423455c189">prefix6_bit</a> (<span class="keyword">const</span> <span class="keyword">struct</span> in6_addr *<a class="code" href="structprefix.html">prefix</a>, <span class="keyword">const</span> u_char prefixlen)
<a name="l00142"></a>00142 {
<a name="l00143"></a>00143   <span class="keywordflow">return</span> <a class="code" href="prefix_8h.html#a448f1ebdeae472533f8faafd675e8f0b">prefix_bit</a>((<span class="keyword">const</span> u_char *) &amp;prefix-&gt;s6_addr, prefixlen);
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 <span class="comment">/* Prototypes. */</span>
<a name="l00147"></a>00147 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#a6d5ede437568763fc6ef7d9cc772b501">afi2family</a> (<span class="keywordtype">int</span>);
<a name="l00148"></a>00148 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#a5d1761cfd89b5e35540ece8fe2573299">family2afi</a> (<span class="keywordtype">int</span>);
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="prefix_8c.html#a334dfe0b68e0de68379895a8ff3057e7">prefix_new</a> (<span class="keywordtype">void</span>);
<a name="l00151"></a>00151 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="prefix_8c.html#a5d8a68bc25fb973c471e61aaeb76a015">prefix_free</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00152"></a>00152 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="prefix_8c.html#a857a677dba88a14eab7a4090d0bcd3fe">prefix_family_str</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00153"></a>00153 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#ad076653f7c139acd0fdedb511542e915">prefix_blen</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00154"></a>00154 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00155"></a>00155 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#a8b848557695ae5694bd2282eba23e367">prefix2str</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *, <span class="keywordtype">char</span> *, <span class="keywordtype">int</span>);
<a name="l00156"></a>00156 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *, <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00157"></a>00157 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *, <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00158"></a>00158 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#a203098ec44d398d5c8692082d8cae725">prefix_cmp</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *, <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00159"></a>00159 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="prefix_8c.html#abaad44d47b408d45484fdd729ab501b2">prefix_copy</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *dest, <span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *src);
<a name="l00160"></a>00160 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="prefix_8c.html#aec236431a98092b2c21d0ff8501e29ff">sockunion2prefix</a> (<span class="keyword">const</span> <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *dest,
<a name="l00163"></a>00163                                         <span class="keyword">const</span> <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *mask);
<a name="l00164"></a>00164 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="prefix_8c.html#a7e9fdfe551fb280a2e9a149a7f742d87">sockunion2hostprefix</a> (<span class="keyword">const</span> <span class="keyword">union</span> <a class="code" href="unionsockunion.html">sockunion</a> *);
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="prefix_8c.html#af674876d8d874e88225f559322d797ac">prefix_ipv4_new</a> (<span class="keywordtype">void</span>);
<a name="l00167"></a>00167 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="prefix_8c.html#a226bbb39f0a469263b369d16b58ab62f">prefix_ipv4_free</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *);
<a name="l00168"></a>00168 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *, <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *);
<a name="l00169"></a>00169 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *);
<a name="l00170"></a>00170 
<a name="l00171"></a><a class="code" href="prefix_8h.html#acd8595e70861e22a9f8277bca3535aed">00171</a> <span class="preprocessor">#define PREFIX_COPY_IPV4(DST, SRC)  \</span>
<a name="l00172"></a>00172 <span class="preprocessor">    *((struct prefix_ipv4 *)(DST)) = *((const struct prefix_ipv4 *)(SRC));</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span>
<a name="l00174"></a>00174 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#a042562296bf8a9715da2d77fb226ab25">prefix_ipv4_any</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *);
<a name="l00175"></a>00175 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="prefix_8c.html#a00e9cb624cf0d2526fbc5a48b340d046">apply_classful_mask_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *);
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="keyword">extern</span> u_char <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (<span class="keyword">struct</span> in_addr);
<a name="l00178"></a>00178 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (<span class="keywordtype">int</span>, <span class="keyword">struct</span> in_addr *);
<a name="l00179"></a>00179 <span class="comment">/* returns the network portion of the host address */</span>
<a name="l00180"></a>00180 <span class="keyword">extern</span> in_addr_t <a class="code" href="prefix_8c.html#ab4067c206567a0757076aa3fb9f285ce">ipv4_network_addr</a> (in_addr_t hostaddr, <span class="keywordtype">int</span> masklen);
<a name="l00181"></a>00181 <span class="comment">/* given the address of a host on a network and the network mask length,</span>
<a name="l00182"></a>00182 <span class="comment"> * calculate the broadcast address for that network;</span>
<a name="l00183"></a>00183 <span class="comment"> * special treatment for /31: returns the address of the other host</span>
<a name="l00184"></a>00184 <span class="comment"> * on the network by flipping the host bit */</span>
<a name="l00185"></a>00185 <span class="keyword">extern</span> in_addr_t <a class="code" href="prefix_8c.html#a0416c71ab42c828a9ee8ee82ddda6a77">ipv4_broadcast_addr</a> (in_addr_t hostaddr, <span class="keywordtype">int</span> masklen);
<a name="l00186"></a>00186 
<a name="l00187"></a>00187 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#ae0eafe597bd81e87765f0231f1012653">netmask_str2prefix_str</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *, <span class="keyword">const</span> <span class="keywordtype">char</span> *, <span class="keywordtype">char</span> *);
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="keyword">struct </span>prefix_ipv6 *prefix_ipv6_new (<span class="keywordtype">void</span>);
<a name="l00191"></a>00191 <span class="keyword">extern</span> <span class="keywordtype">void</span> prefix_ipv6_free (<span class="keyword">struct</span> prefix_ipv6 *);
<a name="l00192"></a>00192 <span class="keyword">extern</span> <span class="keywordtype">int</span> str2prefix_ipv6 (<span class="keyword">const</span> <span class="keywordtype">char</span> *, <span class="keyword">struct</span> prefix_ipv6 *);
<a name="l00193"></a>00193 <span class="keyword">extern</span> <span class="keywordtype">void</span> apply_mask_ipv6 (<span class="keyword">struct</span> prefix_ipv6 *);
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 <span class="preprocessor">#define PREFIX_COPY_IPV6(DST, SRC)  \</span>
<a name="l00196"></a>00196 <span class="preprocessor">    *((struct prefix_ipv6 *)(DST)) = *((const struct prefix_ipv6 *)(SRC));</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span>
<a name="l00198"></a>00198 <span class="keyword">extern</span> <span class="keywordtype">int</span> ip6_masklen (<span class="keyword">struct</span> in6_addr);
<a name="l00199"></a>00199 <span class="keyword">extern</span> <span class="keywordtype">void</span> masklen2ip6 (<span class="keywordtype">int</span>, <span class="keyword">struct</span> in6_addr *);
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 <span class="keyword">extern</span> <span class="keywordtype">void</span> str2in6_addr (<span class="keyword">const</span> <span class="keywordtype">char</span> *, <span class="keyword">struct</span> in6_addr *);
<a name="l00202"></a>00202 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *inet6_ntoa (<span class="keyword">struct</span> in6_addr);
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="prefix_8c.html#abca8c8e6c67ae2442bbdbb028e6b11c8">all_digit</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 <span class="preprocessor">#endif </span><span class="comment">/* _ZEBRA_PREFIX_H */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="prefix_8h.html">prefix.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
