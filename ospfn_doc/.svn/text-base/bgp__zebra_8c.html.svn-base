<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_zebra.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__zebra_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_zebra.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="network_8h_source.html">network.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="zclient_8h_source.html">zclient.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="routemap_8h_source.html">routemap.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgpd_8h_source.html">bgpd/bgpd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__route_8h_source.html">bgpd/bgp_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__attr_8h_source.html">bgpd/bgp_attr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__nexthop_8h_source.html">bgpd/bgp_nexthop.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__zebra_8h_source.html">bgpd/bgp_zebra.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__fsm_8h_source.html">bgpd/bgp_fsm.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__debug_8h_source.html">bgpd/bgp_debug.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for bgp_zebra.c:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__zebra_8c__incl.png" border="0" usemap="#bgpd_2bgp__zebra_8c" alt=""/></div>
<map name="bgpd_2bgp__zebra_8c" id="bgpd_2bgp__zebra_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1540,80,1607,107"/><area shape="rect" id="node61" href="command_8h.html" title="command.h" alt="" coords="2998,80,3089,107"/><area shape="rect" id="node67" href="thread_8h.html" title="thread.h" alt="" coords="3005,229,3077,256"/><area shape="rect" id="node69" href="log_8h.html" title="log.h" alt="" coords="2786,229,2837,256"/><area shape="rect" id="node74" href="stream_8h.html" title="stream.h" alt="" coords="3397,80,3472,107"/><area shape="rect" id="node76" href="prefix_8h.html" title="prefix.h" alt="" coords="3401,155,3468,181"/><area shape="rect" id="node78" href="sockunion_8h.html" title="sockunion.h" alt="" coords="3313,229,3407,256"/><area shape="rect" id="node80" href="network_8h.html" title="network.h" alt="" coords="3547,80,3629,107"/><area shape="rect" id="node85" href="zclient_8h.html" title="zclient.h" alt="" coords="3829,80,3901,107"/><area shape="rect" id="node89" href="routemap_8h.html" title="routemap.h" alt="" coords="3925,80,4016,107"/><area shape="rect" id="node92" href="bgpd_8h.html" title="bgpd/bgpd.h" alt="" coords="3222,80,3321,107"/><area shape="rect" id="node95" href="bgp__route_8h.html" title="bgpd/bgp_route.h" alt="" coords="4040,80,4171,107"/><area shape="rect" id="node97" href="bgp__attr_8h.html" title="bgpd/bgp_attr.h" alt="" coords="4257,155,4377,181"/><area shape="rect" id="node99" href="bgp__nexthop_8h.html" title="bgpd/bgp_nexthop.h" alt="" coords="3654,80,3804,107"/><area shape="rect" id="node102" href="bgp__zebra_8h.html" title="bgpd/bgp_zebra.h" alt="" coords="4409,80,4540,107"/><area shape="rect" id="node104" href="bgp__fsm_8h.html" title="bgpd/bgp_fsm.h" alt="" coords="4565,80,4685,107"/><area shape="rect" id="node106" href="bgp__debug_8h.html" title="bgpd/bgp_debug.h" alt="" coords="4195,80,4333,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="1739,155,1816,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="1841,155,1889,181"/><area shape="rect" id="node63" href="vector_8h.html" title="vector.h" alt="" coords="3075,155,3147,181"/><area shape="rect" id="node65" href="vty_8h.html" title="vty.h" alt="" coords="2850,155,2901,181"/><area shape="rect" id="node72" href="route__types_8h.html" title="lib/route_types.h" alt="" coords="2926,155,3049,181"/><area shape="rect" id="node87" href="if_8h.html" title="if.h" alt="" coords="3777,155,3817,181"/></map>
</div>
</div>
<p><a href="bgp__zebra_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a88e2711780e86b9d978926a2c494a4b3">bgp_router_id_update</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a4cc83372d062b473e38e37f45cc8db00">bgp_interface_add</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a9cb30d7f1f2ccb8d308c4e15346aa14c">bgp_interface_delete</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#ada1a56699359a3f1a564935aab4c6e55">bgp_interface_up</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a09b0cfe6fa27a28ebdf7473f5e916c22">bgp_interface_down</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a7b54ec13635aebffd8121be36cea0ca4">bgp_interface_address_add</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a42e3aed3931c5aeb6394fbb3d382ad63">bgp_interface_address_delete</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a21266614aeaa7bbcbe7784fd3450fdb4">zebra_read_ipv4</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a0d8fe6db8cf649697766dbe9c913a952">if_lookup_by_ipv4</a> (struct in_addr *addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a52b2dfd215b4f25b96daae5dc6b50942">if_lookup_by_ipv4_exact</a> (struct in_addr *addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a2f418d523b44f752454834fffa11670c">bgp_nexthop_set</a> (union <a class="el" href="unionsockunion.html">sockunion</a> *local, union <a class="el" href="unionsockunion.html">sockunion</a> *remote, struct <a class="el" href="structbgp__nexthop.html">bgp_nexthop</a> *<a class="el" href="structnexthop.html">nexthop</a>, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a7ea53f9049b2f5a323e2991962142d63">bgp_zebra_announce</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structbgp__info.html">bgp_info</a> *info, struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a067b7ce285841e44d9fa9d827bb83740">bgp_zebra_withdraw</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structbgp__info.html">bgp_info</a> *info)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a1fd679d33401cfd34cac264dc7500d2d">bgp_redistribute_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a5ec8581cffe3c2cd216ee69b17b9c40f">bgp_redistribute_rmap_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#af504f769cc3fe8babcde1ed1709c79df">bgp_redistribute_metric_set</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, u_int32_t <a class="el" href="structmetric.html">metric</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#aa90152d0184e4d44b31492232ebad27e">bgp_redistribute_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#adbb127830d008dda1cefd2808ac940d8">bgp_redistribute_routemap_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a90eb5aa1c34b07fa7955737d940bbb9e">bgp_redistribute_metric_unset</a> (struct <a class="el" href="structbgp.html">bgp</a> *<a class="el" href="structbgp.html">bgp</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a2a493e9acff62550bc916134935af412">bgp_zclient_reset</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a9462cb6e82b6f043681e5c9048b97596">bgp_zebra_init</a> (void)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#abe1502972ba9aa40adc080e419c496bf">zclient</a> = NULL</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct in_addr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__zebra_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a></td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a4cc83372d062b473e38e37f45cc8db00"></a><!-- doxytag: member="bgp_zebra.c::bgp_interface_add" ref="a4cc83372d062b473e38e37f45cc8db00" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_interface_add </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00075">75</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;

  ifp = <a class="code" href="zclient_8c.html#af2dbed49848c57eaae1185751ec18648">zebra_interface_add_read</a> (zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA) &amp;&amp; ifp)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra rcvd: interface add %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7b54ec13635aebffd8121be36cea0ca4"></a><!-- doxytag: member="bgp_zebra.c::bgp_interface_address_add" ref="a7b54ec13635aebffd8121be36cea0ca4" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_interface_address_add </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00178">178</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;

  ifc = <a class="code" href="zclient_8c.html#a361d54ec3dad267afc3335fe155367a2">zebra_interface_address_read</a> (command, zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>);

  <span class="keywordflow">if</span> (ifc == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[128];
      <a class="code" href="prefix_8c.html#a8b848557695ae5694bd2282eba23e367">prefix2str</a>(ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>, buf, <span class="keyword">sizeof</span>(buf));
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra rcvd: interface %s address add %s&quot;</span>,
         ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, buf);
    }

  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>))
    <a class="code" href="bgp__nexthop_8c.html#a460fcfcab9de444aa794ad7fe7524c6d">bgp_connected_add</a> (ifc);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a42e3aed3931c5aeb6394fbb3d382ad63"></a><!-- doxytag: member="bgp_zebra.c::bgp_interface_address_delete" ref="a42e3aed3931c5aeb6394fbb3d382ad63" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_interface_address_delete </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00203">203</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;

  ifc = <a class="code" href="zclient_8c.html#a361d54ec3dad267afc3335fe155367a2">zebra_interface_address_read</a> (command, zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>);

  <span class="keywordflow">if</span> (ifc == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[128];
      <a class="code" href="prefix_8c.html#a8b848557695ae5694bd2282eba23e367">prefix2str</a>(ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>, buf, <span class="keyword">sizeof</span>(buf));
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra rcvd: interface %s address delete %s&quot;</span>,
         ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, buf);
    }

  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>))
    <a class="code" href="bgp__nexthop_8c.html#a3379269447e15a3519cc24cc3ae0de14">bgp_connected_delete</a> (ifc);

  <a class="code" href="if_8c.html#aefcfc40d0358af75f26135eb0a33903d">connected_free</a> (ifc);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9cb30d7f1f2ccb8d308c4e15346aa14c"></a><!-- doxytag: member="bgp_zebra.c::bgp_interface_delete" ref="a9cb30d7f1f2ccb8d308c4e15346aa14c" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_interface_delete </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00088">88</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;

  s = zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>;
  ifp = <a class="code" href="zclient_8c.html#a989f3e044d41b4e18463027a94b846e7">zebra_interface_state_read</a> (s);
  ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = <a class="code" href="if_8h.html#a18949aeeb4a8fbe7e3be43e6bbe86527">IFINDEX_INTERNAL</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra rcvd: interface delete %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a09b0cfe6fa27a28ebdf7473f5e916c22"></a><!-- doxytag: member="bgp_zebra.c::bgp_interface_down" ref="a09b0cfe6fa27a28ebdf7473f5e916c22" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_interface_down </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00128">128</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *c;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  s = zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>;
  ifp = <a class="code" href="zclient_8c.html#a989f3e044d41b4e18463027a94b846e7">zebra_interface_state_read</a> (s);
  <span class="keywordflow">if</span> (! ifp)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra rcvd: interface %s down&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node, nnode, c))
    <a class="code" href="bgp__nexthop_8c.html#a3379269447e15a3519cc24cc3ae0de14">bgp_connected_delete</a> (c);

  <span class="comment">/* Fast external-failover (Currently IPv4 only) */</span>
  {
    <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *mnode;
    <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
    <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
    <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *peer_if;

    <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, mnode, bgp))
      {
    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (bgp-&gt;<a class="code" href="structbgp.html#acd06f15451957d2d5914143f87550b9e">flags</a>, <a class="code" href="bgpd_8h.html#a28ae0f957b1abc1140e12fda08edc322">BGP_FLAG_NO_FAST_EXT_FAILOVER</a>))
      <span class="keywordflow">continue</span>;

    <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
      {
        <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != 1)
          <span class="keywordflow">continue</span>;

        <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
          peer_if = <a class="code" href="bgp__zebra_8c.html#a0d8fe6db8cf649697766dbe9c913a952">if_lookup_by_ipv4</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>.<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr);
        <span class="keywordflow">else</span>
          <span class="keywordflow">continue</span>;

        <span class="keywordflow">if</span> (ifp == peer_if)
          <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
      }
      }
  }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ada1a56699359a3f1a564935aab4c6e55"></a><!-- doxytag: member="bgp_zebra.c::bgp_interface_up" ref="ada1a56699359a3f1a564935aab4c6e55" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_interface_up </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00105">105</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *c;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  s = zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>;
  ifp = <a class="code" href="zclient_8c.html#a989f3e044d41b4e18463027a94b846e7">zebra_interface_state_read</a> (s);

  <span class="keywordflow">if</span> (! ifp)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra rcvd: interface %s up&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node, nnode, c))
    <a class="code" href="bgp__nexthop_8c.html#a460fcfcab9de444aa794ad7fe7524c6d">bgp_connected_add</a> (c);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2f418d523b44f752454834fffa11670c"></a><!-- doxytag: member="bgp_zebra.c::bgp_nexthop_set" ref="a2f418d523b44f752454834fffa11670c" args="(union sockunion *local, union sockunion *remote, struct bgp_nexthop *nexthop, struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_nexthop_set </td>
          <td>(</td>
          <td class="paramtype">union <a class="el" href="unionsockunion.html">sockunion</a> *&#160;</td>
          <td class="paramname"><em>local</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">union <a class="el" href="unionsockunion.html">sockunion</a> *&#160;</td>
          <td class="paramname"><em>remote</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__nexthop.html">bgp_nexthop</a> *&#160;</td>
          <td class="paramname"><em>nexthop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00531">531</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret = 0;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  memset (nexthop, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nexthop.html">bgp_nexthop</a>));

  <span class="keywordflow">if</span> (!local)
    <span class="keywordflow">return</span> -1;
  <span class="keywordflow">if</span> (!remote)
    <span class="keywordflow">return</span> -1;

  <span class="keywordflow">if</span> (local-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
    {
      nexthop-&gt;<a class="code" href="structbgp__nexthop.html#a8fed6fdf9282fb5e87f3f52b94313646">v4</a> = local-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr;
      ifp = <a class="code" href="bgp__zebra_8c.html#a0d8fe6db8cf649697766dbe9c913a952">if_lookup_by_ipv4</a> (&amp;local-&gt;<a class="code" href="unionsockunion.html#a50fab1a37b798a49a085f78351680ab7">sin</a>.sin_addr);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (local-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
    {
      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;local-&gt;sin6.sin6_addr))
    {
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>)
        ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (<a class="code" href="if_8c.html#a957921d44ba446eb52b305bb270ca2df">if_nametoindex</a> (peer-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>));
    }
      <span class="keywordflow">else</span>
    ifp = if_lookup_by_ipv6 (&amp;local-&gt;sin6.sin6_addr);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">if</span> (!ifp)
    <span class="keywordflow">return</span> -1;

  nexthop-&gt;<a class="code" href="structbgp__nexthop.html#a7b6a78171a44be3140ec745e87e79a63">ifp</a> = ifp;

  <span class="comment">/* IPv4 connection. */</span>
  <span class="keywordflow">if</span> (local-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET)
    {
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <span class="comment">/* IPv6 nexthop*/</span>
      ret = if_get_ipv6_global (ifp, &amp;nexthop-&gt;v6_global);

      <span class="comment">/* There is no global nexthop. */</span>
      <span class="keywordflow">if</span> (!ret)
    if_get_ipv6_local (ifp, &amp;nexthop-&gt;v6_global);
      <span class="keywordflow">else</span>
    if_get_ipv6_local (ifp, &amp;nexthop-&gt;v6_local);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    }

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* IPv6 connection. */</span>
  <span class="keywordflow">if</span> (local-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
    {
      <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *direct = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <span class="comment">/* IPv4 nexthop.  I don&#39;t care about it. */</span>
      <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>.s_addr)
    nexthop-&gt;<a class="code" href="structbgp__nexthop.html#a8fed6fdf9282fb5e87f3f52b94313646">v4</a> = peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>;

      <span class="comment">/* Global address*/</span>
      <span class="keywordflow">if</span> (! IN6_IS_ADDR_LINKLOCAL (&amp;local-&gt;sin6.sin6_addr))
    {
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;nexthop-&gt;v6_global, &amp;local-&gt;sin6.sin6_addr, 
          <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);

      <span class="comment">/* If directory connected set link-local address. */</span>
      direct = if_lookup_by_ipv6 (&amp;remote-&gt;sin6.sin6_addr);
      <span class="keywordflow">if</span> (direct)
        if_get_ipv6_local (ifp, &amp;nexthop-&gt;v6_local);
    }
      <span class="keywordflow">else</span>
    <span class="comment">/* Link-local address. */</span>
    {
      ret = if_get_ipv6_global (ifp, &amp;nexthop-&gt;v6_global);

      <span class="comment">/* If there is no global address.  Set link-local address as</span>
<span class="comment">             global.  I know this break RFC specification... */</span>
      <span class="keywordflow">if</span> (!ret)
        <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;nexthop-&gt;v6_global, &amp;local-&gt;sin6.sin6_addr, 
            <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;nexthop-&gt;v6_local, &amp;local-&gt;sin6.sin6_addr, 
            <a class="code" href="prefix_8h.html#ac2642af4f4d7a4209ad6261e72c658f9">IPV6_MAX_BYTELEN</a>);
    }
    }

  <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;local-&gt;sin6.sin6_addr) ||
      if_lookup_by_ipv6 (&amp;remote-&gt;sin6.sin6_addr))
    peer-&gt;<a class="code" href="structpeer.html#ab2847caa2148b30de1db8f52b8c7dad9">shared_network</a> = 1;
  <span class="keywordflow">else</span>
    peer-&gt;<a class="code" href="structpeer.html#ab2847caa2148b30de1db8f52b8c7dad9">shared_network</a> = 0;

  <span class="comment">/* KAME stack specific treatment.  */</span>
<span class="preprocessor">#ifdef KAME</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;nexthop-&gt;v6_global)
      &amp;&amp; <a class="code" href="sockunion_8h.html#a054cf6fda7e526f269ca64bb1002c067">IN6_LINKLOCAL_IFINDEX</a> (nexthop-&gt;v6_global))
    {
      <a class="code" href="sockunion_8h.html#ac5e492dc1d10f95eb64eaac05ec9bab0">SET_IN6_LINKLOCAL_IFINDEX</a> (nexthop-&gt;v6_global, 0);
    }
  <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (&amp;nexthop-&gt;v6_local)
      &amp;&amp; <a class="code" href="sockunion_8h.html#a054cf6fda7e526f269ca64bb1002c067">IN6_LINKLOCAL_IFINDEX</a> (nexthop-&gt;v6_local))
    {
      <a class="code" href="sockunion_8h.html#ac5e492dc1d10f95eb64eaac05ec9bab0">SET_IN6_LINKLOCAL_IFINDEX</a> (nexthop-&gt;v6_local, 0);
    }
<span class="preprocessor">#endif </span><span class="comment">/* KAME */</span>
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af504f769cc3fe8babcde1ed1709c79df"></a><!-- doxytag: member="bgp_zebra.c::bgp_redistribute_metric_set" ref="af504f769cc3fe8babcde1ed1709c79df" args="(struct bgp *bgp, afi_t afi, int type, u_int32_t metric)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_metric_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>metric</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00937">937</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>]
      &amp;&amp; bgp-&gt;<a class="code" href="structbgp.html#a3c35a477ebcabe4c3887b3b4a373c47c">redist_metric</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] == <a class="code" href="structmetric.html">metric</a>)
    <span class="keywordflow">return</span> 0;

  bgp-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 1;
  bgp-&gt;<a class="code" href="structbgp.html#a3c35a477ebcabe4c3887b3b4a373c47c">redist_metric</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = <a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a>;

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a90eb5aa1c34b07fa7955737d940bbb9e"></a><!-- doxytag: member="bgp_zebra.c::bgp_redistribute_metric_unset" ref="a90eb5aa1c34b07fa7955737d940bbb9e" args="(struct bgp *bgp, afi_t afi, int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_metric_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l01006">1006</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (! bgp-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>])
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Unset metric. */</span>
  bgp-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;
  bgp-&gt;<a class="code" href="structbgp.html#a3c35a477ebcabe4c3887b3b4a373c47c">redist_metric</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5ec8581cffe3c2cd216ee69b17b9c40f"></a><!-- doxytag: member="bgp_zebra.c::bgp_redistribute_rmap_set" ref="a5ec8581cffe3c2cd216ee69b17b9c40f" args="(struct bgp *bgp, afi_t afi, int type, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_rmap_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00920">920</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>
      &amp;&amp; (strcmp (bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>) == 0))
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][type].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
    free (bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][type].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>);
  bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#a8b49a178b9734b1b1a04847a9c5bf3fe">map</a> = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="adbb127830d008dda1cefd2808ac940d8"></a><!-- doxytag: member="bgp_zebra.c::bgp_redistribute_routemap_unset" ref="adbb127830d008dda1cefd2808ac940d8" args="(struct bgp *bgp, afi_t afi, int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_routemap_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00991">991</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (! bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Unset route-map. */</span>
  free (bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][type].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>);
  bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#a8b49a178b9734b1b1a04847a9c5bf3fe">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1fd679d33401cfd34cac264dc7500d2d"></a><!-- doxytag: member="bgp_zebra.c::bgp_redistribute_set" ref="a1fd679d33401cfd34cac264dc7500d2d" args="(struct bgp *bgp, afi_t afi, int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00894">894</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Set flag to BGP instance. */</span>
  bgp-&gt;<a class="code" href="structbgp.html#adf85d87af017be850e1dc3339c655848">redist</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 1;

  <span class="comment">/* Return if already redistribute flag is set. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>])
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;

  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 1;

  <span class="comment">/* Return if zebra connection is not established. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: redistribute add %s&quot;</span>, <a class="code" href="log_8c.html#ae87aa85b5b05b120d376956ce5d13444">zebra_route_string</a>(<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>));
    
  <span class="comment">/* Send distribute add message to zebra. */</span>
  <a class="code" href="zclient_8c.html#a0ed1704cde688d0575a1394a34f6fc82">zebra_redistribute_send</a> (<a class="code" href="zebra_8h.html#aaf00306d6060095dd258463ee7cb0cc1">ZEBRA_REDISTRIBUTE_ADD</a>, <a class="code" href="structzclient.html">zclient</a>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa90152d0184e4d44b31492232ebad27e"></a><!-- doxytag: member="bgp_zebra.c::bgp_redistribute_unset" ref="aa90152d0184e4d44b31492232ebad27e" args="(struct bgp *bgp, afi_t afi, int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_redistribute_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00952">952</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Unset flag from BGP instance. */</span>
  bgp-&gt;<a class="code" href="structbgp.html#adf85d87af017be850e1dc3339c655848">redist</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;

  <span class="comment">/* Unset route-map. */</span>
  <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>)
    free (bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][type].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a>);
  bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#ac321205b3775d3cf7c70affd935c3a72">name</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  bgp-&gt;<a class="code" href="structbgp.html#acaab0bed60f887d8de2414e5dcc01a25">rmap</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structbgp.html#a8b49a178b9734b1b1a04847a9c5bf3fe">map</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Unset metric. */</span>
  bgp-&gt;<a class="code" href="structbgp.html#a274669c638d4124ce6a01aa1294b9d21">redist_metric_flag</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;
  bgp-&gt;<a class="code" href="structbgp.html#a3c35a477ebcabe4c3887b3b4a373c47c">redist_metric</a>[afi][<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;

  <span class="comment">/* Return if zebra connection is disabled. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[type])
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>] = 0;

  <span class="keywordflow">if</span> (bgp-&gt;<a class="code" href="structbgp.html#adf85d87af017be850e1dc3339c655848">redist</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][type] == 0 
      &amp;&amp; bgp-&gt;<a class="code" href="structbgp.html#adf85d87af017be850e1dc3339c655848">redist</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][type] == 0 
      &amp;&amp; <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &gt;= 0)
    {
      <span class="comment">/* Send distribute delete message to zebra. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: redistribute delete %s&quot;</span>,
           <a class="code" href="log_8c.html#ae87aa85b5b05b120d376956ce5d13444">zebra_route_string</a>(type));
      <a class="code" href="zclient_8c.html#a0ed1704cde688d0575a1394a34f6fc82">zebra_redistribute_send</a> (<a class="code" href="zebra_8h.html#a1dce1941aae01a8a16dace7591398a0d">ZEBRA_REDISTRIBUTE_DELETE</a>, <a class="code" href="structzclient.html">zclient</a>, type);
    }
  
  <span class="comment">/* Withdraw redistributed routes from current BGP&#39;s routing table. */</span>
  <a class="code" href="bgp__route_8h.html#ab7121f0cd3100fffb819723728d50c2e">bgp_redistribute_withdraw</a> (bgp, afi, type);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a88e2711780e86b9d978926a2c494a4b3"></a><!-- doxytag: member="bgp_zebra.c::bgp_router_id_update" ref="a88e2711780e86b9d978926a2c494a4b3" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int bgp_router_id_update </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00047">47</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> router_id;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;

  <a class="code" href="zclient_8c.html#a6adcd87e46d205582c81673f669067f3">zebra_router_id_update_read</a>(zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>,&amp;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>);

  <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[128];
      <a class="code" href="prefix_8c.html#a8b848557695ae5694bd2282eba23e367">prefix2str</a>(&amp;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>, buf, <span class="keyword">sizeof</span>(buf));
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra rcvd: router id update %s&quot;</span>, buf);
    }

  <a class="code" href="bgp__vty_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a> = <a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>.u.prefix4;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="bgpd_8c.html#adeab9451f33cb80e3dad19688138d378">bm</a>-&gt;<a class="code" href="structbgp__master.html#a781eb39eeb74ba12d8cb78f887d4d755">bgp</a>, node, nnode, bgp))
    {
      <span class="keywordflow">if</span> (!bgp-&gt;<a class="code" href="structbgp.html#a88e6503684b286900c9f72c2c2a2f5f6">router_id_static</a>.s_addr)
        <a class="code" href="bgpd_8c.html#a95a081ca99d2713d2405c00786db1193">bgp_router_id_set</a> (bgp, &amp;<a class="code" href="structbgp.html#ac85364afca7a6afc7c184148355318a7">router_id</a>.u.prefix4);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2a493e9acff62550bc916134935af412"></a><!-- doxytag: member="bgp_zebra.c::bgp_zclient_reset" ref="a2a493e9acff62550bc916134935af412" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_zclient_reset </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l01019">1019</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zclient_8c.html#ad002f3a9a797ab41ed60505ed5007ae7">zclient_reset</a> (<a class="code" href="structzclient.html">zclient</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7ea53f9049b2f5a323e2991962142d63"></a><!-- doxytag: member="bgp_zebra.c::bgp_zebra_announce" ref="a7ea53f9049b2f5a323e2991962142d63" args="(struct prefix *p, struct bgp_info *info, struct bgp *bgp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_zebra_announce </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__info.html">bgp_info</a> *&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp.html">bgp</a> *&#160;</td>
          <td class="paramname"><em>bgp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00643">643</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="structbgp.html#acd06f15451957d2d5914143f87550b9e">flags</a>;
  u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (! <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>])
    <span class="keywordflow">return</span>;

  flags = 0;
  peer = info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a> || <a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a647ad85450d688c959849bc89cd9ccb8">BGP_PEER_CONFED</a>)
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a49dfa659951c25dc0784165a6083546b">ZEBRA_FLAG_IBGP</a>);
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a5edc0a08174731d635cf05f3908bd6ae">ZEBRA_FLAG_INTERNAL</a>);
    }

  <span class="keywordflow">if</span> ((<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != 1)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a5edc0a08174731d635cf05f3908bd6ae">ZEBRA_FLAG_INTERNAL</a>);

  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
    {
      <span class="keyword">struct </span><a class="code" href="structzapi__ipv4.html">zapi_ipv4</a> api;
      <span class="keyword">struct </span>in_addr *<a class="code" href="structnexthop.html">nexthop</a>;

      api.<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a> = flags;
      nexthop = &amp;info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>;

      api.type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
      api.message = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      api.nexthop_num = 1;
      api.nexthop = &amp;nexthop;
      api.ifindex_num = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>);
      api.metric = info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>;

      distance = <a class="code" href="bgp__route_8h.html#a45aae1ba2d5eedac029237c73f16881e">bgp_distance_apply</a> (p, info, bgp);

      <span class="keywordflow">if</span> (distance)
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#abe498bb81bfbda17757173ef23e25179">ZAPI_MESSAGE_DISTANCE</a>);
      api.distance = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
    }

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: IPv4 route add %s/%d nexthop %s metric %u&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, nexthop, buf[1], <span class="keyword">sizeof</span>(buf[1])),
             api.metric);
    }

      <a class="code" href="zclient_8c.html#ad9a398f43faa79a0bab620c985fb476a">zapi_ipv4_route</a> (<a class="code" href="zebra_8h.html#aa2913a6b1e5fbc598479aa282343a5e1">ZEBRA_IPV4_ROUTE_ADD</a>, <a class="code" href="structzclient.html">zclient</a>, 
                       (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) p, &amp;api);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* We have to think about a IPv6 link-local address curse. */</span>
  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
    {
      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
      <span class="keyword">struct </span>in6_addr *nexthop;
      <span class="keyword">struct </span>zapi_ipv6 api;

      ifindex = 0;
      nexthop = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
      
      <span class="comment">/* Only global address nexthop exists. */</span>
      <span class="keywordflow">if</span> (info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16)
    nexthop = &amp;info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global;
      
      <span class="comment">/* If both global and link-local address present. */</span>
      <span class="keywordflow">if</span> (info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
    {
      <span class="comment">/* Workaround for Cisco&#39;s nexthop bug.  */</span>
      <span class="keywordflow">if</span> (IN6_IS_ADDR_UNSPECIFIED (&amp;info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global)
          &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a>-&gt;<a class="code" href="unionsockunion.html#a696d7d44e90274cc3bb86231cd51cfd4">sa</a>.sa_family == AF_INET6)
        nexthop = &amp;peer-&gt;<a class="code" href="structpeer.html#a9ab7f1f3e48a3027c0f8a92fa6e2de28">su_remote</a>-&gt;sin6.sin6_addr;
      <span class="keywordflow">else</span>
        nexthop = &amp;info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_local;

      <span class="keywordflow">if</span> (info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a7b6a78171a44be3140ec745e87e79a63">ifp</a>)
        ifindex = info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a7b6a78171a44be3140ec745e87e79a63">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
    }

      <span class="keywordflow">if</span> (nexthop == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (nexthop) &amp;&amp; ! ifindex)
    {
      <span class="keywordflow">if</span> (info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>)
        ifindex = <a class="code" href="if_8c.html#a957921d44ba446eb52b305bb270ca2df">if_nametoindex</a> (info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a7b6a78171a44be3140ec745e87e79a63">ifp</a>)
        ifindex = info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a7b6a78171a44be3140ec745e87e79a63">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
    }

      <span class="comment">/* Make Zebra API structure. */</span>
      api.flags = flags;
      api.type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
      api.message = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      api.nexthop_num = 1;
      api.nexthop = &amp;nexthop;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#ae8d1e48f6c2858ecda1c3aee4219a0e6">ZAPI_MESSAGE_IFINDEX</a>);
      api.ifindex_num = 1;
      api.ifindex = &amp;ifindex;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>);
      api.metric = info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>;

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: IPv6 route add %s/%d nexthop %s metric %u&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6, &amp;p-&gt;u.prefix6, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6, nexthop, buf[1], <span class="keyword">sizeof</span>(buf[1])),
             api.metric);
    }

      zapi_ipv6_route (<a class="code" href="zebra_8h.html#a2d0f19502bde040501c7ad64bc955739">ZEBRA_IPV6_ROUTE_ADD</a>, <a class="code" href="structzclient.html">zclient</a>, 
                       (<span class="keyword">struct</span> prefix_ipv6 *) p, &amp;api);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9462cb6e82b6f043681e5c9048b97596"></a><!-- doxytag: member="bgp_zebra.c::bgp_zebra_init" ref="a9462cb6e82b6f043681e5c9048b97596" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_zebra_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l01025">1025</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Set default values. */</span>
  <a class="code" href="structzclient.html">zclient</a> = <a class="code" href="zclient_8c.html#aa521f2a71596b1dc50f76fcb57dff30b">zclient_new</a> ();
  <a class="code" href="zclient_8c.html#ac649a246f405850a3ade72de002745e3">zclient_init</a> (<a class="code" href="structzclient.html">zclient</a>, <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>);
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a91ae88d0aa9ff087af5b7567334197f6">router_id_update</a> = <a class="code" href="bgp__zebra_8c.html#a88e2711780e86b9d978926a2c494a4b3">bgp_router_id_update</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a42e63c358fc87552ca16a1eea8b69c4f">interface_add</a> = <a class="code" href="bgp__zebra_8c.html#a4cc83372d062b473e38e37f45cc8db00">bgp_interface_add</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a59d608db28363c236285c6323d5697ab">interface_delete</a> = <a class="code" href="bgp__zebra_8c.html#a9cb30d7f1f2ccb8d308c4e15346aa14c">bgp_interface_delete</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a75ee908bb229653f271356b982fa76e7">interface_address_add</a> = <a class="code" href="bgp__zebra_8c.html#a7b54ec13635aebffd8121be36cea0ca4">bgp_interface_address_add</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a3494b722f85fe14ff8c99ddae54bad94">interface_address_delete</a> = <a class="code" href="bgp__zebra_8c.html#a42e3aed3931c5aeb6394fbb3d382ad63">bgp_interface_address_delete</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#ac2fe2ea5a7f820e1ac572f7629be997f">ipv4_route_add</a> = <a class="code" href="bgp__zebra_8c.html#a21266614aeaa7bbcbe7784fd3450fdb4">zebra_read_ipv4</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a2fa1fdde8885665490f46edc8c102d4a">ipv4_route_delete</a> = <a class="code" href="bgp__zebra_8c.html#a21266614aeaa7bbcbe7784fd3450fdb4">zebra_read_ipv4</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a45465702e655472187e9efc3c1734daa">interface_up</a> = <a class="code" href="bgp__zebra_8c.html#ada1a56699359a3f1a564935aab4c6e55">bgp_interface_up</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a426b5e0ec3b5ad8843eb42deaa4fe335">interface_down</a> = <a class="code" href="bgp__zebra_8c.html#a09b0cfe6fa27a28ebdf7473f5e916c22">bgp_interface_down</a>;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a9d185464cca684ac3d024ec4be7b9881">ipv6_route_add</a> = zebra_read_ipv6;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a86d1ece8718111eee4bdd79ca320e8ea">ipv6_route_delete</a> = zebra_read_ipv6;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="comment">/* Interface related init. */</span>
  <a class="code" href="if_8c.html#ac78cad8082fa880e50b2c945f8a3c33d">if_init</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a067b7ce285841e44d9fa9d827bb83740"></a><!-- doxytag: member="bgp_zebra.c::bgp_zebra_withdraw" ref="a067b7ce285841e44d9fa9d827bb83740" args="(struct prefix *p, struct bgp_info *info)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_zebra_withdraw </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__info.html">bgp_info</a> *&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00778">778</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>;
  <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a53dfb4d4cfc1331edf8a62d04d99f08f">sock</a> &lt; 0)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">if</span> (! <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>])
    <span class="keywordflow">return</span>;

  peer = info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
  flags = 0;

  <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635a9e245a415718944a081734a08a8d7e92">BGP_PEER_IBGP</a>)
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a5edc0a08174731d635cf05f3908bd6ae">ZEBRA_FLAG_INTERNAL</a>);
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a49dfa659951c25dc0784165a6083546b">ZEBRA_FLAG_IBGP</a>);
    }

  <span class="keywordflow">if</span> ((<a class="code" href="bgpd_8c.html#af16a840274ca5f244f25c1ce3aa70aa2">peer_sort</a> (peer) == <a class="code" href="bgpd_8h.html#a726ca809ffd3d67ab4b8476646f26635ad00e75d3926c01967f5debfa4f9c4654">BGP_PEER_EBGP</a> &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#adb765fb0aec575c436ba1e465e9eb4bd">ttl</a> != 1)
      || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a22a47f83fdcd884acb2b84e04c085797">PEER_FLAG_DISABLE_CONNECTED_CHECK</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="zebra_8h.html#a5edc0a08174731d635cf05f3908bd6ae">ZEBRA_FLAG_INTERNAL</a>);

  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
    {
      <span class="keyword">struct </span><a class="code" href="structzapi__ipv4.html">zapi_ipv4</a> api;
      <span class="keyword">struct </span>in_addr *<a class="code" href="structnexthop.html">nexthop</a>;

      api.<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a> = flags;
      nexthop = &amp;info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#ab23f9ed5b7c55ea658ab6dc729bc9e63">nexthop</a>;

      api.type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
      api.message = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      api.nexthop_num = 1;
      api.nexthop = &amp;nexthop;
      api.ifindex_num = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>);
      api.metric = info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>;

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: IPv4 route delete %s/%d nexthop %s metric %u&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, nexthop, buf[1], <span class="keyword">sizeof</span>(buf[1])),
             api.metric);
    }

      <a class="code" href="zclient_8c.html#ad9a398f43faa79a0bab620c985fb476a">zapi_ipv4_route</a> (<a class="code" href="zebra_8h.html#a0c9efcc3f61219a6697f5da18d8de992">ZEBRA_IPV4_ROUTE_DELETE</a>, <a class="code" href="structzclient.html">zclient</a>, 
                       (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) p, &amp;api);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* We have to think about a IPv6 link-local address curse. */</span>
  <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
    {
      <span class="keyword">struct </span>zapi_ipv6 api;
      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
      <span class="keyword">struct </span>in6_addr *nexthop;
      
      <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>);
      
      ifindex = 0;
      nexthop = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <span class="comment">/* Only global address nexthop exists. */</span>
      <span class="keywordflow">if</span> (info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 16)
    nexthop = &amp;info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_global;

      <span class="comment">/* If both global and link-local address present. */</span>
      <span class="keywordflow">if</span> (info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#aa9572231b6d45822cd1af557583cdba5">mp_nexthop_len</a> == 32)
    {
      nexthop = &amp;info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;mp_nexthop_local;
      <span class="keywordflow">if</span> (info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a7b6a78171a44be3140ec745e87e79a63">ifp</a>)
        ifindex = info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#acf0de33545a449bafcefaefd963f1995">nexthop</a>.<a class="code" href="structbgp__nexthop.html#a7b6a78171a44be3140ec745e87e79a63">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
    }

      <span class="keywordflow">if</span> (nexthop == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

      <span class="keywordflow">if</span> (IN6_IS_ADDR_LINKLOCAL (nexthop) &amp;&amp; ! ifindex)
    <span class="keywordflow">if</span> (info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>)
      ifindex = <a class="code" href="if_8c.html#a957921d44ba446eb52b305bb270ca2df">if_nametoindex</a> (info-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a8e4c2a0f676f9c1debe5adb6f15a1945">ifname</a>);

      api.flags = flags;
      api.type = <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>;
      api.message = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      api.nexthop_num = 1;
      api.nexthop = &amp;nexthop;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#ae8d1e48f6c2858ecda1c3aee4219a0e6">ZAPI_MESSAGE_IFINDEX</a>);
      api.ifindex_num = 1;
      api.ifindex = &amp;ifindex;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>);
      api.metric = info-&gt;<a class="code" href="structbgp__info.html#ac08a1276a0597228115a0f26aa9fe27a">attr</a>-&gt;<a class="code" href="structattr.html#a2dc4bc77a20816cd457a2040b05e316f">med</a>;

      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra send: IPv6 route delete %s/%d nexthop %s metric %u&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6, &amp;p-&gt;u.prefix6, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET6, nexthop, buf[1], <span class="keyword">sizeof</span>(buf[1])),
             api.metric);
    }

      zapi_ipv6_route (<a class="code" href="zebra_8h.html#ad98414d027f7107e91cb040a329ad48a">ZEBRA_IPV6_ROUTE_DELETE</a>, <a class="code" href="structzclient.html">zclient</a>, 
                       (<span class="keyword">struct</span> prefix_ipv6 *) p, &amp;api);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0d8fe6db8cf649697766dbe9c913a952"></a><!-- doxytag: member="bgp_zebra.c::if_lookup_by_ipv4" ref="a0d8fe6db8cf649697766dbe9c913a952" args="(struct in_addr *addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structinterface.html">interface</a>* if_lookup_by_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>addr</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00385">385</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ifnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *<a class="code" href="structconnected.html">connected</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *cp; 
  
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = *addr;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, ifnode, ifp))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, cnode, connected))
    {
      cp = connected-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
        
      <span class="keywordflow">if</span> (cp-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (cp, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>))
          <span class="keywordflow">return</span> ifp;
    }
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a52b2dfd215b4f25b96daae5dc6b50942"></a><!-- doxytag: member="bgp_zebra.c::if_lookup_by_ipv4_exact" ref="a52b2dfd215b4f25b96daae5dc6b50942" args="(struct in_addr *addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structinterface.html">interface</a>* if_lookup_by_ipv4_exact </td>
          <td>(</td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>addr</em></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00413">413</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ifnode;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *<a class="code" href="structconnected.html">connected</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *cp; 
  
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, ifnode, ifp))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, cnode, connected))
    {
      cp = connected-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
        
      <span class="keywordflow">if</span> (cp-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
        <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;cp-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, addr))
          <span class="keywordflow">return</span> ifp;
    }
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a21266614aeaa7bbcbe7784fd3450fdb4"></a><!-- doxytag: member="bgp_zebra.c::zebra_read_ipv4" ref="a21266614aeaa7bbcbe7784fd3450fdb4" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int zebra_read_ipv4 </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00231">231</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structzapi__ipv4.html">zapi_ipv4</a> api;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="structzapi__ipv4.html#a7043b2c08d10a58daa5e6e7800ff8a29">ifindex</a>;
  <span class="keyword">struct </span>in_addr <a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  s = zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>;
  ifindex = 0;
  <a class="code" href="structnexthop.html">nexthop</a>.s_addr = 0;

  <span class="comment">/* Type, flags, message. */</span>
  api.<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  api.flags = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  api.message = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);

  <span class="comment">/* IPv4 prefix. */</span>
  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, s, <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen));

  <span class="comment">/* Nexthop, ifindex, distance, metric. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>))
    {
      api.nexthop_num = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      <a class="code" href="structnexthop.html">nexthop</a>.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
    }
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#ae8d1e48f6c2858ecda1c3aee4219a0e6">ZAPI_MESSAGE_IFINDEX</a>))
    {
      api.ifindex_num = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      ifindex = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
    }
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#abe498bb81bfbda17757173ef23e25179">ZAPI_MESSAGE_DISTANCE</a>))
    api.distance = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>))
    api.metric = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
  <span class="keywordflow">else</span>
    api.metric = 0;

  <span class="keywordflow">if</span> (command == <a class="code" href="zebra_8h.html#aa2913a6b1e5fbc598479aa282343a5e1">ZEBRA_IPV4_ROUTE_ADD</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra rcvd: IPv4 route add %s %s/%d nexthop %s metric %u&quot;</span>,
             <a class="code" href="log_8c.html#ae87aa85b5b05b120d376956ce5d13444">zebra_route_string</a>(api.type),
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;<a class="code" href="structnexthop.html">nexthop</a>, buf[1], <span class="keyword">sizeof</span>(buf[1])),
             api.metric);
    }
      <a class="code" href="bgp__route_8h.html#ad43d4207e8e8d357b758d7898f59dfec">bgp_redistribute_add</a>((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;<a class="code" href="structnexthop.html">nexthop</a>, api.metric, api.<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>);
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA))
    {
      <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra rcvd: IPv4 route delete %s %s/%d &quot;</span>
             <span class="stringliteral">&quot;nexthop %s metric %u&quot;</span>,
             <a class="code" href="log_8c.html#ae87aa85b5b05b120d376956ce5d13444">zebra_route_string</a>(api.type),
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;<a class="code" href="structnexthop.html">nexthop</a>, buf[1], <span class="keyword">sizeof</span>(buf[1])),
             api.metric);
    }
      <a class="code" href="bgp__route_8h.html#a7484774dce89c4dd82bf5e17b1688cbb">bgp_redistribute_delete</a>((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, api.type);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a5ff73fe88ce576fe7fc3877984367add"></a><!-- doxytag: member="bgp_zebra.c::router_id_zebra" ref="a5ff73fe88ce576fe7fc3877984367add" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct in_addr <a class="el" href="ospfd_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00043">43</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>

</div>
</div>
<a class="anchor" id="abe1502972ba9aa40adc080e419c496bf"></a><!-- doxytag: member="bgp_zebra.c::zclient" ref="abe1502972ba9aa40adc080e419c496bf" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structzclient.html">zclient</a>* <a class="el" href="structzclient.html">zclient</a> = NULL</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__zebra_8c_source.html#l00042">42</a> of file <a class="el" href="bgp__zebra_8c_source.html">bgp_zebra.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__zebra_8c.html">bgp_zebra.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:18 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
