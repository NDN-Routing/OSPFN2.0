<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/pqueue.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('pqueue_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/pqueue.c</div>  </div>
</div>
<div class="contents">
<a href="pqueue_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Priority queue functions.</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 2003 Yasuhiro Ohara</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">it under the terms of the GNU General Public License as published</span>
<a name="l00008"></a>00008 <span class="comment">by the Free Software Foundation; either version 2, or (at your</span>
<a name="l00009"></a>00009 <span class="comment">option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the</span>
<a name="l00018"></a>00018 <span class="comment">Free Software Foundation, Inc., 59 Temple Place - Suite 330,</span>
<a name="l00019"></a>00019 <span class="comment">Boston, MA 02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="pqueue_8h.html">pqueue.h</a>&quot;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="comment">/* priority queue using heap sort */</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">/* pqueue-&gt;cmp() controls the order of sorting (i.e, ascending or</span>
<a name="l00029"></a>00029 <span class="comment">   descending). If you want the left node to move upper of the heap</span>
<a name="l00030"></a>00030 <span class="comment">   binary tree, make cmp() to return less than 0.  for example, if cmp</span>
<a name="l00031"></a>00031 <span class="comment">   (10, 20) returns -1, the sorting is ascending order. if cmp (10,</span>
<a name="l00032"></a>00032 <span class="comment">   20) returns 1, the sorting is descending order. if cmp (10, 20)</span>
<a name="l00033"></a>00033 <span class="comment">   returns 0, this library does not do sorting (which will not be what</span>
<a name="l00034"></a>00034 <span class="comment">   you want).  To be brief, if the contents of cmp_func (left, right)</span>
<a name="l00035"></a>00035 <span class="comment">   is left - right, dequeue () returns the smallest node.  Otherwise</span>
<a name="l00036"></a>00036 <span class="comment">   (if the contents is right - left), dequeue () returns the largest</span>
<a name="l00037"></a>00037 <span class="comment">   node.  */</span>
<a name="l00038"></a>00038 
<a name="l00039"></a><a class="code" href="pqueue_8c.html#af55149bc1f05cf18af067a302e31e3f9">00039</a> <span class="preprocessor">#define DATA_SIZE (sizeof (void *))</span>
<a name="l00040"></a><a class="code" href="pqueue_8c.html#a194510e524e9c01830b1f1fae9dcb47e">00040</a> <span class="preprocessor"></span><span class="preprocessor">#define PARENT_OF(x) ((x - 1) / 2)</span>
<a name="l00041"></a><a class="code" href="pqueue_8c.html#a9463c174df115b30eec183601c44067d">00041</a> <span class="preprocessor"></span><span class="preprocessor">#define LEFT_OF(x)  (2 * x + 1)</span>
<a name="l00042"></a><a class="code" href="pqueue_8c.html#a9cb5c9bf559ecaf191e6b06c5acaef6c">00042</a> <span class="preprocessor"></span><span class="preprocessor">#define RIGHT_OF(x) (2 * x + 2)</span>
<a name="l00043"></a><a class="code" href="pqueue_8c.html#ab0c41596aa0885797e0823f25e307643">00043</a> <span class="preprocessor"></span><span class="preprocessor">#define HAVE_CHILD(x,q) (x &lt; (q)-&gt;size / 2)</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045 <span class="keywordtype">void</span>
<a name="l00046"></a><a class="code" href="pqueue_8h.html#ab8caec03e5beeef534a0dd7258a2abe5">00046</a> <a class="code" href="pqueue_8c.html#ab8caec03e5beeef534a0dd7258a2abe5">trickle_up</a> (<span class="keywordtype">int</span> index, <span class="keyword">struct</span> <a class="code" href="structpqueue.html">pqueue</a> *queue)
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048   <span class="keywordtype">void</span> *tmp;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050   <span class="comment">/* Save current node as tmp node.  */</span>
<a name="l00051"></a>00051   tmp = queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[index];
<a name="l00052"></a>00052 
<a name="l00053"></a>00053   <span class="comment">/* Continue until the node reaches top or the place where the parent</span>
<a name="l00054"></a>00054 <span class="comment">     node should be upper than the tmp node.  */</span>
<a name="l00055"></a>00055   <span class="keywordflow">while</span> (index &gt; 0 &amp;&amp;
<a name="l00056"></a>00056          (*queue-&gt;<a class="code" href="structpqueue.html#ab07da518da86aacef25a3b94404bec09">cmp</a>) (tmp, queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[<a class="code" href="pqueue_8c.html#a194510e524e9c01830b1f1fae9dcb47e">PARENT_OF</a> (index)]) &lt; 0)
<a name="l00057"></a>00057     {
<a name="l00058"></a>00058       <span class="comment">/* actually trickle up */</span>
<a name="l00059"></a>00059       queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[index] = queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[<a class="code" href="pqueue_8c.html#a194510e524e9c01830b1f1fae9dcb47e">PARENT_OF</a> (index)];
<a name="l00060"></a>00060       <span class="keywordflow">if</span> (queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00061"></a>00061     (*queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a>) (queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[index], index);
<a name="l00062"></a>00062       index = <a class="code" href="pqueue_8c.html#a194510e524e9c01830b1f1fae9dcb47e">PARENT_OF</a> (index);
<a name="l00063"></a>00063     }
<a name="l00064"></a>00064 
<a name="l00065"></a>00065   <span class="comment">/* Restore the tmp node to appropriate place.  */</span>
<a name="l00066"></a>00066   queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[index] = tmp;
<a name="l00067"></a>00067   <span class="keywordflow">if</span> (queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00068"></a>00068     (*queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a>) (tmp, index);
<a name="l00069"></a>00069 }
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="keywordtype">void</span>
<a name="l00072"></a><a class="code" href="pqueue_8h.html#a827dbb24b47313012e25dc7d656c0f7a">00072</a> <a class="code" href="pqueue_8c.html#a827dbb24b47313012e25dc7d656c0f7a">trickle_down</a> (<span class="keywordtype">int</span> index, <span class="keyword">struct</span> <a class="code" href="structpqueue.html">pqueue</a> *queue)
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074   <span class="keywordtype">void</span> *tmp;
<a name="l00075"></a>00075   <span class="keywordtype">int</span> which;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077   <span class="comment">/* Save current node as tmp node.  */</span>
<a name="l00078"></a>00078   tmp = queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[index];
<a name="l00079"></a>00079 
<a name="l00080"></a>00080   <span class="comment">/* Continue until the node have at least one (left) child.  */</span>
<a name="l00081"></a>00081   <span class="keywordflow">while</span> (<a class="code" href="pqueue_8c.html#ab0c41596aa0885797e0823f25e307643">HAVE_CHILD</a> (index, queue))
<a name="l00082"></a>00082     {
<a name="l00083"></a>00083       <span class="comment">/* If right child exists, and if the right child is more proper</span>
<a name="l00084"></a>00084 <span class="comment">         to be moved upper.  */</span>
<a name="l00085"></a>00085       <span class="keywordflow">if</span> (<a class="code" href="pqueue_8c.html#a9cb5c9bf559ecaf191e6b06c5acaef6c">RIGHT_OF</a> (index) &lt; queue-&gt;<a class="code" href="structpqueue.html#a15089ae2aadc39f77b8d1b9b46fb8efe">size</a> &amp;&amp;
<a name="l00086"></a>00086           (*queue-&gt;<a class="code" href="structpqueue.html#ab07da518da86aacef25a3b94404bec09">cmp</a>) (queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[<a class="code" href="pqueue_8c.html#a9463c174df115b30eec183601c44067d">LEFT_OF</a> (index)],
<a name="l00087"></a>00087                          queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[<a class="code" href="pqueue_8c.html#a9cb5c9bf559ecaf191e6b06c5acaef6c">RIGHT_OF</a> (index)]) &gt; 0)
<a name="l00088"></a>00088         which = <a class="code" href="pqueue_8c.html#a9cb5c9bf559ecaf191e6b06c5acaef6c">RIGHT_OF</a> (index);
<a name="l00089"></a>00089       <span class="keywordflow">else</span>
<a name="l00090"></a>00090         which = <a class="code" href="pqueue_8c.html#a9463c174df115b30eec183601c44067d">LEFT_OF</a> (index);
<a name="l00091"></a>00091 
<a name="l00092"></a>00092       <span class="comment">/* If the tmp node should be upper than the child, break.  */</span>
<a name="l00093"></a>00093       <span class="keywordflow">if</span> ((*queue-&gt;<a class="code" href="structpqueue.html#ab07da518da86aacef25a3b94404bec09">cmp</a>) (queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[which], tmp) &gt; 0)
<a name="l00094"></a>00094         <span class="keywordflow">break</span>;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096       <span class="comment">/* Actually trickle down the tmp node.  */</span>
<a name="l00097"></a>00097       queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[index] = queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[which];
<a name="l00098"></a>00098        <span class="keywordflow">if</span> (queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00099"></a>00099      (*queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a>) (queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[index], index);
<a name="l00100"></a>00100       index = which;
<a name="l00101"></a>00101     }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103   <span class="comment">/* Restore the tmp node to appropriate place.  */</span>
<a name="l00104"></a>00104   queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[index] = tmp;
<a name="l00105"></a>00105   <span class="keywordflow">if</span> (queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00106"></a>00106     (*queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a>) (tmp, index);
<a name="l00107"></a>00107 }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="keyword">struct </span><a class="code" href="structpqueue.html">pqueue</a> *
<a name="l00110"></a><a class="code" href="pqueue_8h.html#a2579024e6715cbdb92af477dcdd1bb31">00110</a> <a class="code" href="pqueue_8c.html#a2579024e6715cbdb92af477dcdd1bb31">pqueue_create</a> (<span class="keywordtype">void</span>)
<a name="l00111"></a>00111 {
<a name="l00112"></a>00112   <span class="keyword">struct </span><a class="code" href="structpqueue.html">pqueue</a> *queue;
<a name="l00113"></a>00113 
<a name="l00114"></a>00114   queue = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bab534822c0c0cfcc0ccde77f7aec5122f">MTYPE_PQUEUE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structpqueue.html">pqueue</a>));
<a name="l00115"></a>00115 
<a name="l00116"></a>00116   queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba209fcd4e29f4f34c0ee34a9f21b08474">MTYPE_PQUEUE_DATA</a>, 
<a name="l00117"></a>00117                           <a class="code" href="pqueue_8c.html#af55149bc1f05cf18af067a302e31e3f9">DATA_SIZE</a> * <a class="code" href="pqueue_8h.html#afbcc314a0c9163633c20d479920c8bbb">PQUEUE_INIT_ARRAYSIZE</a>);
<a name="l00118"></a>00118   queue-&gt;<a class="code" href="structpqueue.html#a68a2d70ceaedec3f1d0420a1759f01f6">array_size</a> = <a class="code" href="pqueue_8h.html#afbcc314a0c9163633c20d479920c8bbb">PQUEUE_INIT_ARRAYSIZE</a>;
<a name="l00119"></a>00119 
<a name="l00120"></a>00120   <span class="comment">/* By default we want nothing to happen when a node changes. */</span>
<a name="l00121"></a>00121   queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00122"></a>00122   <span class="keywordflow">return</span> queue;
<a name="l00123"></a>00123 }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 <span class="keywordtype">void</span>
<a name="l00126"></a><a class="code" href="pqueue_8h.html#ad0099423e65490faf86a429bab2e7059">00126</a> <a class="code" href="pqueue_8c.html#ad0099423e65490faf86a429bab2e7059">pqueue_delete</a> (<span class="keyword">struct</span> <a class="code" href="structpqueue.html">pqueue</a> *queue)
<a name="l00127"></a>00127 {
<a name="l00128"></a>00128   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba209fcd4e29f4f34c0ee34a9f21b08474">MTYPE_PQUEUE_DATA</a>, queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>);
<a name="l00129"></a>00129   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bab534822c0c0cfcc0ccde77f7aec5122f">MTYPE_PQUEUE</a>, queue);
<a name="l00130"></a>00130 }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00133"></a><a class="code" href="pqueue_8c.html#a3c78ef83a0e3d7bc8b033c76271fc2b3">00133</a> <a class="code" href="pqueue_8c.html#a3c78ef83a0e3d7bc8b033c76271fc2b3">pqueue_expand</a> (<span class="keyword">struct</span> <a class="code" href="structpqueue.html">pqueue</a> *queue)
<a name="l00134"></a>00134 {
<a name="l00135"></a>00135   <span class="keywordtype">void</span> **newarray;
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   newarray = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba209fcd4e29f4f34c0ee34a9f21b08474">MTYPE_PQUEUE_DATA</a>, queue-&gt;<a class="code" href="structpqueue.html#a68a2d70ceaedec3f1d0420a1759f01f6">array_size</a> * <a class="code" href="pqueue_8c.html#af55149bc1f05cf18af067a302e31e3f9">DATA_SIZE</a> * 2);
<a name="l00138"></a>00138   <span class="keywordflow">if</span> (newarray == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00139"></a>00139     <span class="keywordflow">return</span> 0;
<a name="l00140"></a>00140 
<a name="l00141"></a>00141   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (newarray, queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>, queue-&gt;<a class="code" href="structpqueue.html#a68a2d70ceaedec3f1d0420a1759f01f6">array_size</a> * <a class="code" href="pqueue_8c.html#af55149bc1f05cf18af067a302e31e3f9">DATA_SIZE</a>);
<a name="l00142"></a>00142 
<a name="l00143"></a>00143   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba209fcd4e29f4f34c0ee34a9f21b08474">MTYPE_PQUEUE_DATA</a>, queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>);
<a name="l00144"></a>00144   queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a> = newarray;
<a name="l00145"></a>00145   queue-&gt;<a class="code" href="structpqueue.html#a68a2d70ceaedec3f1d0420a1759f01f6">array_size</a> *= 2;
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   <span class="keywordflow">return</span> 1;
<a name="l00148"></a>00148 }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="keywordtype">void</span>
<a name="l00151"></a><a class="code" href="pqueue_8h.html#af8c7960d1e3ce1edf2b78dfc4873d321">00151</a> <a class="code" href="pqueue_8c.html#af8c7960d1e3ce1edf2b78dfc4873d321">pqueue_enqueue</a> (<span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>, <span class="keyword">struct</span> <a class="code" href="structpqueue.html">pqueue</a> *queue)
<a name="l00152"></a>00152 {
<a name="l00153"></a>00153   <span class="keywordflow">if</span> (queue-&gt;<a class="code" href="structpqueue.html#a15089ae2aadc39f77b8d1b9b46fb8efe">size</a> + 2 &gt;= queue-&gt;<a class="code" href="structpqueue.html#a68a2d70ceaedec3f1d0420a1759f01f6">array_size</a> &amp;&amp; ! <a class="code" href="pqueue_8c.html#a3c78ef83a0e3d7bc8b033c76271fc2b3">pqueue_expand</a> (queue))
<a name="l00154"></a>00154     <span class="keywordflow">return</span>;
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[queue-&gt;<a class="code" href="structpqueue.html#a15089ae2aadc39f77b8d1b9b46fb8efe">size</a>] = <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l00157"></a>00157   <span class="keywordflow">if</span> (queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00158"></a>00158     (*queue-&gt;<a class="code" href="structpqueue.html#a4ead77ed00570005794a66bf040c816f">update</a>) (data, queue-&gt;<a class="code" href="structpqueue.html#a15089ae2aadc39f77b8d1b9b46fb8efe">size</a>);
<a name="l00159"></a>00159   <a class="code" href="pqueue_8c.html#ab8caec03e5beeef534a0dd7258a2abe5">trickle_up</a> (queue-&gt;<a class="code" href="structpqueue.html#a15089ae2aadc39f77b8d1b9b46fb8efe">size</a>, queue);
<a name="l00160"></a>00160   queue-&gt;<a class="code" href="structpqueue.html#a15089ae2aadc39f77b8d1b9b46fb8efe">size</a> ++;
<a name="l00161"></a>00161 }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 <span class="keywordtype">void</span> *
<a name="l00164"></a><a class="code" href="pqueue_8h.html#a1c1a1203050a22dcd10966a857a26505">00164</a> <a class="code" href="pqueue_8c.html#a1c1a1203050a22dcd10966a857a26505">pqueue_dequeue</a> (<span class="keyword">struct</span> <a class="code" href="structpqueue.html">pqueue</a> *queue)
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166   <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a> = queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[0];
<a name="l00167"></a>00167   queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[0] =  queue-&gt;<a class="code" href="structpqueue.html#ab0bd435f08b1d4b4a91ec75c4a41f888">array</a>[--queue-&gt;<a class="code" href="structpqueue.html#a15089ae2aadc39f77b8d1b9b46fb8efe">size</a>];
<a name="l00168"></a>00168   <a class="code" href="pqueue_8c.html#a827dbb24b47313012e25dc7d656c0f7a">trickle_down</a> (0, queue);
<a name="l00169"></a>00169   <span class="keywordflow">return</span> <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>;
<a name="l00170"></a>00170 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="pqueue_8c.html">pqueue.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
