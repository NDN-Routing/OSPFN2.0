<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/if.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('if_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/if.h</div>  </div>
</div>
<div class="contents">
<a href="if_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Interface related header.</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 1997, 98, 99 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">it under the terms of the GNU General Public License as published</span>
<a name="l00008"></a>00008 <span class="comment">by the Free Software Foundation; either version 2, or (at your</span>
<a name="l00009"></a>00009 <span class="comment">option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the</span>
<a name="l00018"></a>00018 <span class="comment">Free Software Foundation, Inc., 59 Temple Place - Suite 330,</span>
<a name="l00019"></a>00019 <span class="comment">Boston, MA 02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef _ZEBRA_IF_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define _ZEBRA_IF_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="comment">/*</span>
<a name="l00027"></a>00027 <span class="comment">  Interface name length.</span>
<a name="l00028"></a>00028 <span class="comment"></span>
<a name="l00029"></a>00029 <span class="comment">   Linux define value in /usr/include/linux/if.h.</span>
<a name="l00030"></a>00030 <span class="comment">   #define IFNAMSIZ        16</span>
<a name="l00031"></a>00031 <span class="comment"></span>
<a name="l00032"></a>00032 <span class="comment">   FreeBSD define value in /usr/include/net/if.h.</span>
<a name="l00033"></a>00033 <span class="comment">   #define IFNAMSIZ        16</span>
<a name="l00034"></a>00034 <span class="comment">*/</span>
<a name="l00035"></a>00035 
<a name="l00036"></a><a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">00036</a> <span class="preprocessor">#define INTERFACE_NAMSIZ      20</span>
<a name="l00037"></a><a class="code" href="if_8h.html#ab832c2d3db56c12ab8e78f275ebc0c94">00037</a> <span class="preprocessor"></span><span class="preprocessor">#define INTERFACE_HWADDR_MAX  20</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span>
<a name="l00039"></a>00039 <span class="preprocessor">#ifdef HAVE_PROC_NET_DEV</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="keyword">struct </span>if_stats
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_packets;   <span class="comment">/* total packets received       */</span>
<a name="l00043"></a>00043   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx_packets;   <span class="comment">/* total packets transmitted    */</span>
<a name="l00044"></a>00044   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_bytes;     <span class="comment">/* total bytes received         */</span>
<a name="l00045"></a>00045   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx_bytes;     <span class="comment">/* total bytes transmitted      */</span>
<a name="l00046"></a>00046   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_errors;    <span class="comment">/* bad packets received         */</span>
<a name="l00047"></a>00047   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx_errors;    <span class="comment">/* packet transmit problems     */</span>
<a name="l00048"></a>00048   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_dropped;   <span class="comment">/* no space in linux buffers    */</span>
<a name="l00049"></a>00049   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx_dropped;   <span class="comment">/* no space available in linux  */</span>
<a name="l00050"></a>00050   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_multicast; <span class="comment">/* multicast packets received   */</span>
<a name="l00051"></a>00051   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_compressed;
<a name="l00052"></a>00052   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx_compressed;
<a name="l00053"></a>00053   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> collisions;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055   <span class="comment">/* detailed rx_errors: */</span>
<a name="l00056"></a>00056   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_length_errors;
<a name="l00057"></a>00057   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_over_errors;       <span class="comment">/* receiver ring buff overflow  */</span>
<a name="l00058"></a>00058   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_crc_errors;        <span class="comment">/* recved pkt with crc error    */</span>
<a name="l00059"></a>00059   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_frame_errors;      <span class="comment">/* recv&#39;d frame alignment error */</span>
<a name="l00060"></a>00060   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_fifo_errors;       <span class="comment">/* recv&#39;r fifo overrun          */</span>
<a name="l00061"></a>00061   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> rx_missed_errors;     <span class="comment">/* receiver missed packet     */</span>
<a name="l00062"></a>00062   <span class="comment">/* detailed tx_errors */</span>
<a name="l00063"></a>00063   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx_aborted_errors;
<a name="l00064"></a>00064   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx_carrier_errors;
<a name="l00065"></a>00065   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx_fifo_errors;
<a name="l00066"></a>00066   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx_heartbeat_errors;
<a name="l00067"></a>00067   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> tx_window_errors;
<a name="l00068"></a>00068 };
<a name="l00069"></a>00069 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_PROC_NET_DEV */</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="comment">/* Interface structure */</span>
<a name="l00072"></a><a class="code" href="structinterface.html">00072</a> <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> 
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074   <span class="comment">/* Interface name.  This should probably never be changed after the</span>
<a name="l00075"></a>00075 <span class="comment">     interface is created, because the configuration info for this interface</span>
<a name="l00076"></a>00076 <span class="comment">     is associated with this structure.  For that reason, the interface</span>
<a name="l00077"></a>00077 <span class="comment">     should also never be deleted (to avoid losing configuration info).</span>
<a name="l00078"></a>00078 <span class="comment">     To delete, just set ifindex to IFINDEX_INTERNAL to indicate that the</span>
<a name="l00079"></a>00079 <span class="comment">     interface does not exist in the kernel.</span>
<a name="l00080"></a>00080 <span class="comment">   */</span>
<a name="l00081"></a><a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">00081</a>   <span class="keywordtype">char</span> <a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>[<a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a> + 1];
<a name="l00082"></a>00082 
<a name="l00083"></a>00083   <span class="comment">/* Interface index (should be IFINDEX_INTERNAL for non-kernel or</span>
<a name="l00084"></a>00084 <span class="comment">     deleted interfaces). */</span>
<a name="l00085"></a><a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">00085</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l00086"></a><a class="code" href="if_8h.html#a18949aeeb4a8fbe7e3be43e6bbe86527">00086</a> <span class="preprocessor">#define IFINDEX_INTERNAL    0</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>
<a name="l00088"></a>00088   <span class="comment">/* Zebra internal interface status */</span>
<a name="l00089"></a><a class="code" href="structinterface.html#ae145c01f63b3abaca8e3805f9e396c4a">00089</a>   u_char <a class="code" href="structinterface.html#ae145c01f63b3abaca8e3805f9e396c4a">status</a>;
<a name="l00090"></a><a class="code" href="if_8h.html#a977548125c39a6ba021b2d0fde8f5a52">00090</a> <span class="preprocessor">#define ZEBRA_INTERFACE_ACTIVE     (1 &lt;&lt; 0)</span>
<a name="l00091"></a><a class="code" href="if_8h.html#a5d71f799d30585759656ac1dc387a9c2">00091</a> <span class="preprocessor"></span><span class="preprocessor">#define ZEBRA_INTERFACE_SUB        (1 &lt;&lt; 1)</span>
<a name="l00092"></a><a class="code" href="if_8h.html#aa9e7c65b5cb18f24bd6f3e0e0d37181d">00092</a> <span class="preprocessor"></span><span class="preprocessor">#define ZEBRA_INTERFACE_LINKDETECTION (1 &lt;&lt; 2)</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span>  
<a name="l00094"></a>00094   <span class="comment">/* Interface flags. */</span>
<a name="l00095"></a><a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">00095</a>   uint64_t <a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   <span class="comment">/* Interface metric */</span>
<a name="l00098"></a><a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">00098</a>   <span class="keywordtype">int</span> <a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a>;
<a name="l00099"></a>00099 
<a name="l00100"></a>00100   <span class="comment">/* Interface MTU. */</span>
<a name="l00101"></a><a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">00101</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>;    <span class="comment">/* IPv4 MTU */</span>
<a name="l00102"></a><a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">00102</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a>;   <span class="comment">/* IPv6 MTU - probably, but not neccessarily same as mtu */</span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104   <span class="comment">/* Hardware address. */</span>
<a name="l00105"></a>00105 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_DL</span>
<a name="l00106"></a>00106 <span class="preprocessor"></span>  <span class="keyword">struct </span>sockaddr_dl sdl;
<a name="l00107"></a>00107 <span class="preprocessor">#else</span>
<a name="l00108"></a><a class="code" href="structinterface.html#ac17135561cfbdbe156036eead5da38c5">00108</a> <span class="preprocessor"></span>  <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="structinterface.html#ac17135561cfbdbe156036eead5da38c5">hw_type</a>;
<a name="l00109"></a><a class="code" href="structinterface.html#a6fe2f3c7e5be26c4e376b514d86f5c22">00109</a>   u_char <a class="code" href="structinterface.html#a6fe2f3c7e5be26c4e376b514d86f5c22">hw_addr</a>[<a class="code" href="if_8h.html#ab832c2d3db56c12ab8e78f275ebc0c94">INTERFACE_HWADDR_MAX</a>];
<a name="l00110"></a><a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">00110</a>   <span class="keywordtype">int</span> <a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>;
<a name="l00111"></a>00111 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_DL */</span>
<a name="l00112"></a>00112 
<a name="l00113"></a>00113   <span class="comment">/* interface bandwidth, kbits */</span>
<a name="l00114"></a><a class="code" href="structinterface.html#a324b6a80459775b1e5e254369649e075">00114</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structinterface.html#a324b6a80459775b1e5e254369649e075">bandwidth</a>;
<a name="l00115"></a>00115   
<a name="l00116"></a>00116   <span class="comment">/* description of the interface. */</span>
<a name="l00117"></a><a class="code" href="structinterface.html#a273b8698448bacdf46b32b3665e7b8d2">00117</a>   <span class="keywordtype">char</span> *<a class="code" href="structinterface.html#a273b8698448bacdf46b32b3665e7b8d2">desc</a>;           
<a name="l00118"></a>00118 
<a name="l00119"></a>00119   <span class="comment">/* Distribute list. */</span>
<a name="l00120"></a><a class="code" href="structinterface.html#ab7d43e6832292b40c9b1d12e595548a1">00120</a>   <span class="keywordtype">void</span> *<a class="code" href="structinterface.html#ab7d43e6832292b40c9b1d12e595548a1">distribute_in</a>;
<a name="l00121"></a><a class="code" href="structinterface.html#af112017405fc7c5a272c9834338d8c06">00121</a>   <span class="keywordtype">void</span> *<a class="code" href="structinterface.html#af112017405fc7c5a272c9834338d8c06">distribute_out</a>;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123   <span class="comment">/* Connected address list. */</span>
<a name="l00124"></a><a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">00124</a>   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">/* Daemon specific interface data pointer. */</span>
<a name="l00127"></a><a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">00127</a>   <span class="keywordtype">void</span> *<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00128"></a>00128 
<a name="l00129"></a>00129   <span class="comment">/* Statistics fileds. */</span>
<a name="l00130"></a>00130 <span class="preprocessor">#ifdef HAVE_PROC_NET_DEV</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span>  <span class="keyword">struct </span>if_stats stats;
<a name="l00132"></a>00132 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_PROC_NET_DEV */</span>  
<a name="l00133"></a>00133 <span class="preprocessor">#ifdef HAVE_NET_RT_IFLIST</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span>  <span class="keyword">struct </span>if_data stats;
<a name="l00135"></a>00135 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_NET_RT_IFLIST */</span>
<a name="l00136"></a>00136 };
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="comment">/* Connected address structure. */</span>
<a name="l00139"></a><a class="code" href="structconnected.html">00139</a> <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a>
<a name="l00140"></a>00140 {
<a name="l00141"></a>00141   <span class="comment">/* Attached interface. */</span>
<a name="l00142"></a><a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">00142</a>   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144   <span class="comment">/* Flags for configuration. */</span>
<a name="l00145"></a><a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">00145</a>   u_char <a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>;
<a name="l00146"></a><a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">00146</a> <span class="preprocessor">#define ZEBRA_IFC_REAL         (1 &lt;&lt; 0)</span>
<a name="l00147"></a><a class="code" href="if_8h.html#a4c3561e2d67366e175998d69dbc87874">00147</a> <span class="preprocessor"></span><span class="preprocessor">#define ZEBRA_IFC_CONFIGURED   (1 &lt;&lt; 1)</span>
<a name="l00148"></a>00148 <span class="preprocessor"></span>  <span class="comment">/*</span>
<a name="l00149"></a>00149 <span class="comment">     The ZEBRA_IFC_REAL flag should be set if and only if this address</span>
<a name="l00150"></a>00150 <span class="comment">     exists in the kernel.</span>
<a name="l00151"></a>00151 <span class="comment">     The ZEBRA_IFC_CONFIGURED flag should be set if and only if this address</span>
<a name="l00152"></a>00152 <span class="comment">     was configured by the user from inside quagga.</span>
<a name="l00153"></a>00153 <span class="comment">   */</span>
<a name="l00154"></a>00154 
<a name="l00155"></a>00155   <span class="comment">/* Flags for connected address. */</span>
<a name="l00156"></a><a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">00156</a>   u_char <a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>;
<a name="l00157"></a><a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">00157</a> <span class="preprocessor">#define ZEBRA_IFA_SECONDARY    (1 &lt;&lt; 0)</span>
<a name="l00158"></a><a class="code" href="if_8h.html#aa84309c25e4cee681e361d14404618e9">00158</a> <span class="preprocessor"></span><span class="preprocessor">#define ZEBRA_IFA_PEER         (1 &lt;&lt; 1)</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span>  <span class="comment">/* N.B. the ZEBRA_IFA_PEER flag should be set if and only if</span>
<a name="l00160"></a>00160 <span class="comment">     a peer address has been configured.  If this flag is set,</span>
<a name="l00161"></a>00161 <span class="comment">     the destination field must contain the peer address.  </span>
<a name="l00162"></a>00162 <span class="comment">     Otherwise, if this flag is not set, the destination address</span>
<a name="l00163"></a>00163 <span class="comment">     will either contain a broadcast address or be NULL.</span>
<a name="l00164"></a>00164 <span class="comment">   */</span>
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   <span class="comment">/* Address of connected network. */</span>
<a name="l00167"></a><a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">00167</a>   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169   <span class="comment">/* Peer or Broadcast address, depending on whether ZEBRA_IFA_PEER is set.</span>
<a name="l00170"></a>00170 <span class="comment">     Note: destination may be NULL if ZEBRA_IFA_PEER is not set. */</span>
<a name="l00171"></a><a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">00171</a>   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173   <span class="comment">/* Label for Linux 2.2.X and upper. */</span>
<a name="l00174"></a><a class="code" href="structconnected.html#abf60adc50689971ec30b6161150ffd2c">00174</a>   <span class="keywordtype">char</span> *<a class="code" href="structconnected.html#abf60adc50689971ec30b6161150ffd2c">label</a>;
<a name="l00175"></a>00175 };
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="comment">/* Does the destination field contain a peer address? */</span>
<a name="l00178"></a><a class="code" href="if_8h.html#a2443297a4d8f44cc5d2ce38fcbf345f2">00178</a> <span class="preprocessor">#define CONNECTED_PEER(C) CHECK_FLAG((C)-&gt;flags, ZEBRA_IFA_PEER)</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span>
<a name="l00180"></a>00180 <span class="comment">/* Prefix to insert into the RIB */</span>
<a name="l00181"></a><a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">00181</a> <span class="preprocessor">#define CONNECTED_PREFIX(C) \</span>
<a name="l00182"></a>00182 <span class="preprocessor">    (CONNECTED_PEER(C) ? (C)-&gt;destination : (C)-&gt;address)</span>
<a name="l00183"></a>00183 <span class="preprocessor"></span>
<a name="l00184"></a>00184 <span class="comment">/* Identifying address.  We guess that if there&#39;s a peer address, but the</span>
<a name="l00185"></a>00185 <span class="comment">   local address is in the same prefix, then the local address may be unique. */</span>
<a name="l00186"></a><a class="code" href="if_8h.html#ad5c7865cf89efe7aef6ae2c7919ac92b">00186</a> <span class="preprocessor">#define CONNECTED_ID(C) \</span>
<a name="l00187"></a>00187 <span class="preprocessor">    ((CONNECTED_PEER(C) &amp;&amp; !prefix_match((C)-&gt;destination, (C)-&gt;address)) ?\</span>
<a name="l00188"></a>00188 <span class="preprocessor">     (C)-&gt;destination : (C)-&gt;address)</span>
<a name="l00189"></a>00189 <span class="preprocessor"></span>
<a name="l00190"></a>00190 <span class="comment">/* Interface hook sort. */</span>
<a name="l00191"></a><a class="code" href="if_8h.html#a4185c142d0c9619a6cab25061dfd50f3">00191</a> <span class="preprocessor">#define IF_NEW_HOOK   0</span>
<a name="l00192"></a><a class="code" href="if_8h.html#afa0a12fa62fd3fd8b5fb9a1b917f3afa">00192</a> <span class="preprocessor"></span><span class="preprocessor">#define IF_DELETE_HOOK 1</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>
<a name="l00194"></a>00194 <span class="comment">/* There are some interface flags which are only supported by some</span>
<a name="l00195"></a>00195 <span class="comment">   operating system. */</span>
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="preprocessor">#ifndef IFF_NOTRAILERS</span>
<a name="l00198"></a><a class="code" href="if_8h.html#a64f791f858692052c2a780d76102ab0d">00198</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_NOTRAILERS 0x0</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_NOTRAILERS */</span>
<a name="l00200"></a>00200 <span class="preprocessor">#ifndef IFF_OACTIVE</span>
<a name="l00201"></a><a class="code" href="if_8h.html#a293b646a578873cb1f32782dff7f0c69">00201</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_OACTIVE 0x0</span>
<a name="l00202"></a>00202 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_OACTIVE */</span>
<a name="l00203"></a>00203 <span class="preprocessor">#ifndef IFF_SIMPLEX</span>
<a name="l00204"></a><a class="code" href="if_8h.html#a91db9a080607f18baefeabd64d944c96">00204</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_SIMPLEX 0x0</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_SIMPLEX */</span>
<a name="l00206"></a>00206 <span class="preprocessor">#ifndef IFF_LINK0</span>
<a name="l00207"></a><a class="code" href="if_8h.html#a278f2e3a5ac6116900b559f54a074c19">00207</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_LINK0 0x0</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_LINK0 */</span>
<a name="l00209"></a>00209 <span class="preprocessor">#ifndef IFF_LINK1</span>
<a name="l00210"></a><a class="code" href="if_8h.html#af887b51ca0fbf010dcca80a6453f21bd">00210</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_LINK1 0x0</span>
<a name="l00211"></a>00211 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_LINK1 */</span>
<a name="l00212"></a>00212 <span class="preprocessor">#ifndef IFF_LINK2</span>
<a name="l00213"></a><a class="code" href="if_8h.html#aebfd59be70fb92ad8fee2c61518f9cbb">00213</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_LINK2 0x0</span>
<a name="l00214"></a>00214 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_LINK2 */</span>
<a name="l00215"></a>00215 <span class="preprocessor">#ifndef IFF_NOXMIT</span>
<a name="l00216"></a><a class="code" href="if_8h.html#a618b82c91d363cdd3479ab18618315c0">00216</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_NOXMIT 0x0</span>
<a name="l00217"></a>00217 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_NOXMIT */</span>
<a name="l00218"></a>00218 <span class="preprocessor">#ifndef IFF_NORTEXCH</span>
<a name="l00219"></a><a class="code" href="if_8h.html#aca9a7d69c855815a3598393630f02b71">00219</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_NORTEXCH 0x0</span>
<a name="l00220"></a>00220 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_NORTEXCH */</span>
<a name="l00221"></a>00221 <span class="preprocessor">#ifndef IFF_IPV4</span>
<a name="l00222"></a><a class="code" href="if_8h.html#a0e1cfe137faa1f83088d136373e22041">00222</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_IPV4 0x0</span>
<a name="l00223"></a>00223 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_IPV4 */</span>
<a name="l00224"></a>00224 <span class="preprocessor">#ifndef IFF_IPV6</span>
<a name="l00225"></a><a class="code" href="if_8h.html#aea8814a8036af8b308ad5ea6d32eac4b">00225</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_IPV6 0x0</span>
<a name="l00226"></a>00226 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_IPV6 */</span>
<a name="l00227"></a>00227 <span class="preprocessor">#ifndef IFF_VIRTUAL</span>
<a name="l00228"></a><a class="code" href="if_8h.html#acaaa02017e5735b2d94b78191b2d1e31">00228</a> <span class="preprocessor"></span><span class="preprocessor">#define IFF_VIRTUAL 0x0</span>
<a name="l00229"></a>00229 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* IFF_VIRTUAL */</span>
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 <span class="comment">/* Prototypes. */</span>
<a name="l00232"></a>00232 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="if_8c.html#a108649aca79b02d34a138e7123df9b77">if_cmp_func</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00233"></a>00233 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *<a class="code" href="if_8c.html#a5a7398837ed51febeaea57200f118fd5">if_create</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, <span class="keywordtype">int</span> namelen);
<a name="l00234"></a>00234 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *<a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
<a name="l00235"></a>00235 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *<a class="code" href="if_8c.html#a48cb8d5af59fd0e8f723797aa11ccbf2">if_lookup_exact_address</a> (<span class="keyword">struct</span> in_addr);
<a name="l00236"></a>00236 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *<a class="code" href="if_8c.html#a84f550f6181fac06214b71b6408fc8db">if_lookup_address</a> (<span class="keyword">struct</span> in_addr);
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 <span class="comment">/* These 2 functions are to be used when the ifname argument is terminated</span>
<a name="l00239"></a>00239 <span class="comment">   by a &#39;\0&#39; character: */</span>
<a name="l00240"></a>00240 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *<a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *ifname);
<a name="l00241"></a>00241 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *<a class="code" href="if_8c.html#ade08039f656683282d34ea210ea79447">if_get_by_name</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *ifname);
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 <span class="comment">/* For these 2 functions, the namelen argument should be the precise length</span>
<a name="l00244"></a>00244 <span class="comment">   of the ifname string (not counting any optional trailing &#39;\0&#39; character).</span>
<a name="l00245"></a>00245 <span class="comment">   In most cases, strnlen should be used to calculate the namelen value. */</span>
<a name="l00246"></a>00246 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *<a class="code" href="if_8c.html#a8ae0929167c87a44b1933994a0254d29">if_lookup_by_name_len</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *ifname,
<a name="l00247"></a>00247                            <span class="keywordtype">size_t</span> namelen);
<a name="l00248"></a>00248 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *<a class="code" href="if_8c.html#a18fa51c3b90a3afa1f564e85a2f4c62b">if_get_by_name_len</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *ifname, <span class="keywordtype">size_t</span> namelen);
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 <span class="comment">/* Delete the interface, but do not free the structure, and leave it in the</span>
<a name="l00252"></a>00252 <span class="comment">   interface list.  It is often advisable to leave the pseudo interface </span>
<a name="l00253"></a>00253 <span class="comment">   structure because there may be configuration information attached. */</span>
<a name="l00254"></a>00254 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="if_8c.html#a439fd4917061b73dbeef59aac5a0bd5e">if_delete_retain</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 <span class="comment">/* Delete and free the interface structure: calls if_delete_retain and then</span>
<a name="l00257"></a>00257 <span class="comment">   deletes it from the interface list and frees the structure. */</span>
<a name="l00258"></a>00258 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="if_8c.html#a705a02a3d76b6a98b47957dadcef66e1">if_delete</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00261"></a>00261 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="if_8c.html#a827ab3bfd7bf3c5fb5c5dbca4eb6e753">if_is_running</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00262"></a>00262 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00263"></a>00263 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00264"></a>00264 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="if_8c.html#a88f3bd141d217db7e4118a78b1db1b60">if_is_broadcast</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00265"></a>00265 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="if_8c.html#a61aed2ccc7ec47d6822546664ea77f0c">if_is_pointopoint</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00266"></a>00266 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="if_8c.html#a0bdd794de28c265aec55d740ed3c5ddc">if_is_multicast</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00267"></a>00267 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="if_8c.html#af0a4090e849fe0dff798e976d8fa2482">if_add_hook</a> (<span class="keywordtype">int</span>, <span class="keywordtype">int</span> (*)(<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *));
<a name="l00268"></a>00268 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="if_8c.html#ac78cad8082fa880e50b2c945f8a3c33d">if_init</a> (<span class="keywordtype">void</span>);
<a name="l00269"></a>00269 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="if_8c.html#ab43357666e54f725d36b708b260f83f6">if_dump_all</a> (<span class="keywordtype">void</span>);
<a name="l00270"></a>00270 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="if_8c.html#a75d5485663b09e8a83a1d79d67d5ea39">if_flag_dump</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>);
<a name="l00271"></a>00271 
<a name="l00272"></a>00272 <span class="comment">/* Please use ifindex2ifname instead of if_indextoname where possible;</span>
<a name="l00273"></a>00273 <span class="comment">   ifindex2ifname uses internal interface info, whereas if_indextoname must</span>
<a name="l00274"></a>00274 <span class="comment">   make a system call. */</span>
<a name="l00275"></a>00275 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 <span class="comment">/* Please use ifname2ifindex instead of if_nametoindex where possible;</span>
<a name="l00278"></a>00278 <span class="comment">   ifname2ifindex uses internal interface info, whereas if_nametoindex must</span>
<a name="l00279"></a>00279 <span class="comment">   make a system call. */</span>
<a name="l00280"></a>00280 <span class="keyword">extern</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="if_8c.html#a5167773d3552390b1652214c6dbbb1b7">ifname2ifindex</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *ifname);
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 <span class="comment">/* Connected address functions. */</span>
<a name="l00283"></a>00283 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *<a class="code" href="if_8c.html#a3f0f3d92c824863a40af915d7f540cc5">connected_new</a> (<span class="keywordtype">void</span>);
<a name="l00284"></a>00284 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="if_8c.html#aefcfc40d0358af75f26135eb0a33903d">connected_free</a> (<span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *);
<a name="l00285"></a>00285 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="if_8h.html#a226042f73bcb2ea3690686cb17baa8f8">connected_add</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *);
<a name="l00286"></a>00286 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a>  *<a class="code" href="if_8c.html#ae243c0b66d0c529a2ad22d1442457c2e">connected_add_by_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *,
<a name="l00287"></a>00287                                             <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *,
<a name="l00288"></a>00288                                             <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00289"></a>00289 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a>  *<a class="code" href="if_8c.html#a05a2b59bad209d6a820026d73c29de8e">connected_delete_by_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *, 
<a name="l00290"></a>00290                                                <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00291"></a>00291 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a>  *<a class="code" href="if_8c.html#a7cea5b88a9e4c0abf48f9951090e5fad">connected_lookup_address</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *, 
<a name="l00292"></a>00292                                              <span class="keyword">struct</span> in_addr);
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 <span class="preprocessor">#ifndef HAVE_IF_NAMETOINDEX</span>
<a name="l00295"></a>00295 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="if_8c.html#a957921d44ba446eb52b305bb270ca2df">if_nametoindex</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00296"></a>00296 <span class="preprocessor">#endif</span>
<a name="l00297"></a>00297 <span class="preprocessor"></span><span class="preprocessor">#ifndef HAVE_IF_INDEXTONAME</span>
<a name="l00298"></a>00298 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="keywordtype">char</span> *<a class="code" href="if_8c.html#a2e22330f87622f0659002d0aff75b487">if_indextoname</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>, <span class="keywordtype">char</span> *);
<a name="l00299"></a>00299 <span class="preprocessor">#endif</span>
<a name="l00300"></a>00300 <span class="preprocessor"></span>
<a name="l00301"></a>00301 <span class="comment">/* Exported variables. */</span>
<a name="l00302"></a>00302 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>;
<a name="l00303"></a>00303 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structcmd__element.html">cmd_element</a> <a class="code" href="if_8h.html#a51777a76e1c996fcf81ab577db829158">interface_desc_cmd</a>;
<a name="l00304"></a>00304 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structcmd__element.html">cmd_element</a> <a class="code" href="if_8h.html#aee31b677aae5a7d464c06d1aabc3f87a">no_interface_desc_cmd</a>;
<a name="l00305"></a>00305 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structcmd__element.html">cmd_element</a> <a class="code" href="if_8h.html#ab6e8f13999936ceba12d9a8e36484c49">interface_cmd</a>;
<a name="l00306"></a>00306 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structcmd__element.html">cmd_element</a> <a class="code" href="if_8h.html#a990fb34f428b4c81d006a48ae14f6084">no_interface_cmd</a>;
<a name="l00307"></a>00307 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structcmd__element.html">cmd_element</a> <a class="code" href="if_8h.html#ab5081a8a2bbf7ff58d5ec4b6e76b7981">interface_pseudo_cmd</a>;
<a name="l00308"></a>00308 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structcmd__element.html">cmd_element</a> <a class="code" href="if_8h.html#a8ef313e1f391c1050a94791c20086aee">no_interface_pseudo_cmd</a>;
<a name="l00309"></a>00309 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structcmd__element.html">cmd_element</a> <a class="code" href="if_8h.html#a3c70e0d1c13baf8f55bb7ed45742b3b5">show_address_cmd</a>;
<a name="l00310"></a>00310 
<a name="l00311"></a>00311 <span class="preprocessor">#endif </span><span class="comment">/* _ZEBRA_IF_H */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="if_8h.html">if.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
