<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_opaque.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__opaque_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ospfd/ospf_opaque.c</div>  </div>
</div>
<div class="contents">
<a href="ospf__opaque_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * This is an implementation of rfc2370.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2001 KDD R&amp;D Laboratories, Inc.</span>
<a name="l00004"></a>00004 <span class="comment"> * http://www.kddlabs.co.jp/</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00009"></a>00009 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00010"></a>00010 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00011"></a>00011 <span class="comment"> * later version.</span>
<a name="l00012"></a>00012 <span class="comment"> * </span>
<a name="l00013"></a>00013 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment"> * General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment"> *</span>
<a name="l00018"></a>00018 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00020"></a>00020 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00021"></a>00021 <span class="comment"> * 02111-1307, USA.</span>
<a name="l00022"></a>00022 <span class="comment"> */</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="comment">/***** MTYPE definitions are not reflected to &quot;memory.h&quot; yet. *****/</span>
<a name="l00025"></a><a class="code" href="ospf__opaque_8c.html#a00f5e4922ffebdc2ec1c7ea51bdd712d">00025</a> <span class="preprocessor">#define MTYPE_OSPF_OPAQUE_FUNCTAB   0</span>
<a name="l00026"></a><a class="code" href="ospf__opaque_8c.html#ac5493be6608386ff7d59059179698a50">00026</a> <span class="preprocessor"></span><span class="preprocessor">#define MTYPE_OPAQUE_INFO_PER_TYPE  0</span>
<a name="l00027"></a><a class="code" href="ospf__opaque_8c.html#af05beecea27878275347774479daf68b">00027</a> <span class="preprocessor"></span><span class="preprocessor">#define MTYPE_OPAQUE_INFO_PER_ID    0</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#ifdef HAVE_OPAQUE_LSA</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="vty_8h.html">vty.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="hash_8h.html">hash.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>      <span class="comment">/* for inet_aton() */</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="ospfd_8h.html">ospfd/ospfd.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="ospf__interface_8h.html">ospfd/ospf_interface.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ism_8h.html">ospfd/ospf_ism.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="ospf__asbr_8h.html">ospfd/ospf_asbr.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsa_8h.html">ospfd/ospf_lsa.h</a>&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsdb_8h.html">ospfd/ospf_lsdb.h</a>&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="ospf__neighbor_8h.html">ospfd/ospf_neighbor.h</a>&quot;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="ospf__nsm_8h.html">ospfd/ospf_nsm.h</a>&quot;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="ospf__flood_8h.html">ospfd/ospf_flood.h</a>&quot;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;<a class="code" href="ospf__packet_8h.html">ospfd/ospf_packet.h</a>&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;<a class="code" href="ospf__spf_8h.html">ospfd/ospf_spf.h</a>&quot;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="ospf__dump_8h.html">ospfd/ospf_dump.h</a>&quot;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;<a class="code" href="ospf__route_8h.html">ospfd/ospf_route.h</a>&quot;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ase_8h.html">ospfd/ospf_ase.h</a>&quot;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;<a class="code" href="ospf__zebra_8h.html">ospfd/ospf_zebra.h</a>&quot;</span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="comment">/*------------------------------------------------------------------------*</span>
<a name="l00062"></a>00062 <span class="comment"> * Followings are initialize/terminate functions for Opaque-LSAs handling.</span>
<a name="l00063"></a>00063 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="preprocessor">#ifdef HAVE_OSPF_TE</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="ospf__te_8h.html">ospfd/ospf_te.h</a>&quot;</span>
<a name="l00067"></a>00067 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OSPF_TE */</span>
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="preprocessor">#ifdef SUPPORT_OSPF_API</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="keywordtype">int</span> <a class="code" href="ospf__apiserver_8h.html#a82ce46071ee6e83d6634dce4acbf8bb9">ospf_apiserver_init</a> (<span class="keywordtype">void</span>);
<a name="l00071"></a>00071 <span class="keywordtype">void</span> <a class="code" href="ospf__apiserver_8h.html#a7698984c9824fb7ab5f04a95f64c65e2">ospf_apiserver_term</a> (<span class="keywordtype">void</span>); 
<a name="l00072"></a>00072 <span class="comment">/* Init apiserver? It&#39;s disabled by default. */</span>
<a name="l00073"></a>00073 <span class="keywordtype">int</span> ospf_apiserver_enable;
<a name="l00074"></a>00074 <span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_OSPF_API */</span>
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="keyword">static</span> <span class="keywordtype">void</span> ospf_opaque_register_vty (<span class="keywordtype">void</span>);
<a name="l00077"></a>00077 <span class="keyword">static</span> <span class="keywordtype">void</span> ospf_opaque_funclist_init (<span class="keywordtype">void</span>);
<a name="l00078"></a>00078 <span class="keyword">static</span> <span class="keywordtype">void</span> ospf_opaque_funclist_term (<span class="keywordtype">void</span>);
<a name="l00079"></a>00079 <span class="keyword">static</span> <span class="keywordtype">void</span> free_opaque_info_per_type (<span class="keywordtype">void</span> *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>);
<a name="l00080"></a>00080 <span class="keyword">static</span> <span class="keywordtype">void</span> free_opaque_info_per_id (<span class="keywordtype">void</span> *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>);
<a name="l00081"></a>00081 <span class="keyword">static</span> <span class="keywordtype">int</span> ospf_opaque_lsa_install_hook (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa);
<a name="l00082"></a>00082 <span class="keyword">static</span> <span class="keywordtype">int</span> ospf_opaque_lsa_delete_hook (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa);
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="keywordtype">void</span>
<a name="l00085"></a>00085 <a class="code" href="ospf__opaque_8h.html#aeb225e682458f06002755db2fb89a0cb">ospf_opaque_init</a> (<span class="keywordtype">void</span>)
<a name="l00086"></a>00086 {
<a name="l00087"></a>00087   ospf_opaque_register_vty ();
<a name="l00088"></a>00088   ospf_opaque_funclist_init ();
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="preprocessor">#ifdef HAVE_OSPF_TE</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="ospf__te_8h.html#a441a1bf2da7b4114be4d53f7bf03e92d">ospf_mpls_te_init</a> () != 0)
<a name="l00092"></a>00092     <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l00093"></a>00093 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OSPF_TE */</span>
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="preprocessor">#ifdef SUPPORT_OSPF_API</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span>  <span class="keywordflow">if</span> ((ospf_apiserver_enable) &amp;&amp; (<a class="code" href="ospf__apiserver_8h.html#a82ce46071ee6e83d6634dce4acbf8bb9">ospf_apiserver_init</a> () != 0))
<a name="l00097"></a>00097     <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l00098"></a>00098 <span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_OSPF_API */</span>
<a name="l00099"></a>00099 
<a name="l00100"></a>00100   <span class="keywordflow">return</span>;
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="keywordtype">void</span>
<a name="l00104"></a>00104 <a class="code" href="ospf__opaque_8h.html#a41c39a3e75d1d5e880a5ea0ed49905ec">ospf_opaque_term</a> (<span class="keywordtype">void</span>)
<a name="l00105"></a>00105 {
<a name="l00106"></a>00106 <span class="preprocessor">#ifdef HAVE_OSPF_TE</span>
<a name="l00107"></a>00107 <span class="preprocessor"></span>  <a class="code" href="ospf__te_8h.html#ab9277ac3593f16dce1e2b9a1220573fe">ospf_mpls_te_term</a> ();
<a name="l00108"></a>00108 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OSPF_TE */</span>
<a name="l00109"></a>00109 
<a name="l00110"></a>00110 <span class="preprocessor">#ifdef SUPPORT_OSPF_API</span>
<a name="l00111"></a>00111 <span class="preprocessor"></span>  <a class="code" href="ospf__apiserver_8h.html#a7698984c9824fb7ab5f04a95f64c65e2">ospf_apiserver_term</a> ();
<a name="l00112"></a>00112 <span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_OSPF_API */</span>
<a name="l00113"></a>00113 
<a name="l00114"></a>00114   ospf_opaque_funclist_term ();
<a name="l00115"></a>00115   <span class="keywordflow">return</span>;
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="keywordtype">int</span>
<a name="l00119"></a>00119 <a class="code" href="ospf__opaque_8h.html#ac17f05a1ebf3fccea3febad454f66a13">ospf_opaque_type9_lsa_init</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121   <span class="keywordflow">if</span> (oi-&gt;opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00122"></a>00122     <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (oi-&gt;opaque_lsa_self);
<a name="l00123"></a>00123 
<a name="l00124"></a>00124   oi-&gt;opaque_lsa_self = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00125"></a>00125   oi-&gt;opaque_lsa_self-&gt;del = free_opaque_info_per_type;
<a name="l00126"></a>00126   oi-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00127"></a>00127   <span class="keywordflow">return</span> 0;
<a name="l00128"></a>00128 }
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 <span class="keywordtype">void</span>
<a name="l00131"></a>00131 <a class="code" href="ospf__opaque_8h.html#a5ea00e524339f12f53f7427f3608c4a6">ospf_opaque_type9_lsa_term</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l00132"></a>00132 {
<a name="l00133"></a>00133   <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (oi-&gt;t_opaque_lsa_self);
<a name="l00134"></a>00134   <span class="keywordflow">if</span> (oi-&gt;opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00135"></a>00135     <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (oi-&gt;opaque_lsa_self);
<a name="l00136"></a>00136   oi-&gt;opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00137"></a>00137   <span class="keywordflow">return</span>;
<a name="l00138"></a>00138 }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="keywordtype">int</span>
<a name="l00141"></a>00141 <a class="code" href="ospf__opaque_8h.html#a6817ba7e55ba931f75b13f719da847b0">ospf_opaque_type10_lsa_init</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>)
<a name="l00142"></a>00142 {
<a name="l00143"></a>00143   <span class="keywordflow">if</span> (area-&gt;opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00144"></a>00144     <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (area-&gt;opaque_lsa_self);
<a name="l00145"></a>00145 
<a name="l00146"></a>00146   area-&gt;opaque_lsa_self = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00147"></a>00147   area-&gt;opaque_lsa_self-&gt;del = free_opaque_info_per_type;
<a name="l00148"></a>00148   area-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="preprocessor">#ifdef MONITOR_LSDB_CHANGE</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span>  area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#a29a103c0c827f95bc0674c9519838fe1">new_lsa_hook</a> = ospf_opaque_lsa_install_hook;
<a name="l00152"></a>00152   area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#acd33ec723611182b8ac051c1b22ced96">del_lsa_hook</a> = ospf_opaque_lsa_delete_hook;
<a name="l00153"></a>00153 <span class="preprocessor">#endif </span><span class="comment">/* MONITOR_LSDB_CHANGE */</span>
<a name="l00154"></a>00154   <span class="keywordflow">return</span> 0;
<a name="l00155"></a>00155 }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 <span class="keywordtype">void</span>
<a name="l00158"></a>00158 <a class="code" href="ospf__opaque_8h.html#adc01fc52cf0e7a2a337b760210d69a7f">ospf_opaque_type10_lsa_term</a> (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *area)
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160 <span class="preprocessor">#ifdef MONITOR_LSDB_CHANGE</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span>  area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#a29a103c0c827f95bc0674c9519838fe1">new_lsa_hook</a> = 
<a name="l00162"></a>00162   area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#acd33ec723611182b8ac051c1b22ced96">del_lsa_hook</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00163"></a>00163 <span class="preprocessor">#endif </span><span class="comment">/* MONITOR_LSDB_CHANGE */</span>
<a name="l00164"></a>00164 
<a name="l00165"></a>00165   <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (area-&gt;t_opaque_lsa_self);
<a name="l00166"></a>00166   <span class="keywordflow">if</span> (area-&gt;opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00167"></a>00167     <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (area-&gt;opaque_lsa_self);
<a name="l00168"></a>00168   area-&gt;opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00169"></a>00169   <span class="keywordflow">return</span>;
<a name="l00170"></a>00170 }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="keywordtype">int</span>
<a name="l00173"></a>00173 <a class="code" href="ospf__opaque_8h.html#ab36bbe167f6dfaefff8cc6562088d5e8">ospf_opaque_type11_lsa_init</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *top)
<a name="l00174"></a>00174 {
<a name="l00175"></a>00175   <span class="keywordflow">if</span> (top-&gt;opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00176"></a>00176     <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (top-&gt;opaque_lsa_self);
<a name="l00177"></a>00177 
<a name="l00178"></a>00178   top-&gt;opaque_lsa_self = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00179"></a>00179   top-&gt;opaque_lsa_self-&gt;del = free_opaque_info_per_type;
<a name="l00180"></a>00180   top-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 <span class="preprocessor">#ifdef MONITOR_LSDB_CHANGE</span>
<a name="l00183"></a>00183 <span class="preprocessor"></span>  top-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#a29a103c0c827f95bc0674c9519838fe1">new_lsa_hook</a> = ospf_opaque_lsa_install_hook;
<a name="l00184"></a>00184   top-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#acd33ec723611182b8ac051c1b22ced96">del_lsa_hook</a> = ospf_opaque_lsa_delete_hook;
<a name="l00185"></a>00185 <span class="preprocessor">#endif </span><span class="comment">/* MONITOR_LSDB_CHANGE */</span>
<a name="l00186"></a>00186   <span class="keywordflow">return</span> 0;
<a name="l00187"></a>00187 }
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 <span class="keywordtype">void</span>
<a name="l00190"></a>00190 <a class="code" href="ospf__opaque_8h.html#a585b78ae190eca243a024d1288611592">ospf_opaque_type11_lsa_term</a> (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *top)
<a name="l00191"></a>00191 {
<a name="l00192"></a>00192 <span class="preprocessor">#ifdef MONITOR_LSDB_CHANGE</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>  top-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#a29a103c0c827f95bc0674c9519838fe1">new_lsa_hook</a> = 
<a name="l00194"></a>00194   top-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#acd33ec723611182b8ac051c1b22ced96">del_lsa_hook</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00195"></a>00195 <span class="preprocessor">#endif </span><span class="comment">/* MONITOR_LSDB_CHANGE */</span>
<a name="l00196"></a>00196 
<a name="l00197"></a>00197   <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (top-&gt;t_opaque_lsa_self);
<a name="l00198"></a>00198   <span class="keywordflow">if</span> (top-&gt;opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00199"></a>00199     <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (top-&gt;opaque_lsa_self);
<a name="l00200"></a>00200   top-&gt;opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00201"></a>00201   <span class="keywordflow">return</span>;
<a name="l00202"></a>00202 }
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00205"></a>00205 ospf_opaque_type_name (u_char opaque_type)
<a name="l00206"></a>00206 {
<a name="l00207"></a>00207   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a> = <span class="stringliteral">&quot;Unknown&quot;</span>;
<a name="l00208"></a>00208 
<a name="l00209"></a>00209   <span class="keywordflow">switch</span> (opaque_type)
<a name="l00210"></a>00210     {
<a name="l00211"></a>00211     <span class="keywordflow">case</span> <a class="code" href="ospf__opaque_8h.html#a8c73b474152f1a487791f92e35bf30fe">OPAQUE_TYPE_WILDCARD</a>: <span class="comment">/* This is a special assignment! */</span>
<a name="l00212"></a>00212       name = <span class="stringliteral">&quot;Wildcard&quot;</span>;
<a name="l00213"></a>00213       <span class="keywordflow">break</span>;
<a name="l00214"></a>00214     <span class="keywordflow">case</span> <a class="code" href="ospf__opaque_8h.html#a7dddfc012a93950f7e43cf4204943852">OPAQUE_TYPE_TRAFFIC_ENGINEERING_LSA</a>:
<a name="l00215"></a>00215       name = <span class="stringliteral">&quot;Traffic Engineering LSA&quot;</span>;
<a name="l00216"></a>00216       <span class="keywordflow">break</span>;
<a name="l00217"></a>00217     <span class="keywordflow">case</span> <a class="code" href="ospf__opaque_8h.html#a1d9913a6e5433d2b7382ab593f5be802">OPAQUE_TYPE_SYCAMORE_OPTICAL_TOPOLOGY_DESC</a>:
<a name="l00218"></a>00218       name = <span class="stringliteral">&quot;Sycamore optical topology description&quot;</span>;
<a name="l00219"></a>00219       <span class="keywordflow">break</span>;
<a name="l00220"></a>00220     <span class="keywordflow">case</span> <a class="code" href="ospf__opaque_8h.html#ae808ccee34e5f85b1b2661be3840703a">OPAQUE_TYPE_GRACE_LSA</a>:
<a name="l00221"></a>00221       name = <span class="stringliteral">&quot;Grace-LSA&quot;</span>;
<a name="l00222"></a>00222       <span class="keywordflow">break</span>;
<a name="l00223"></a>00223     <span class="keywordflow">default</span>:
<a name="l00224"></a>00224       <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#af2fcb53876bdd986bb4aa1f148d11e36">OPAQUE_TYPE_RANGE_UNASSIGNED</a> (opaque_type))
<a name="l00225"></a>00225         name = <span class="stringliteral">&quot;Unassigned&quot;</span>;
<a name="l00226"></a>00226       <span class="comment">/* XXX warning: comparison is always true due to limited range of data type */</span>
<a name="l00227"></a>00227       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#a19e0d3b1dcb388c258cd129cd56afff1">OPAQUE_TYPE_RANGE_RESERVED</a> (opaque_type))
<a name="l00228"></a>00228         name = <span class="stringliteral">&quot;Private/Experimental&quot;</span>;
<a name="l00229"></a>00229       <span class="keywordflow">break</span>;
<a name="l00230"></a>00230     }
<a name="l00231"></a>00231   <span class="keywordflow">return</span> <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;
<a name="l00232"></a>00232 }
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 <span class="comment">/*------------------------------------------------------------------------*</span>
<a name="l00235"></a>00235 <span class="comment"> * Followings are management functions to store user specified callbacks.</span>
<a name="l00236"></a>00236 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 <span class="keyword">struct </span>opaque_info_per_type; <span class="comment">/* Forward declaration. */</span>
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 <span class="keyword">struct </span>ospf_opaque_functab
<a name="l00241"></a>00241 {
<a name="l00242"></a>00242   u_char opaque_type;
<a name="l00243"></a>00243   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245   int (* new_if_hook)(<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp);
<a name="l00246"></a>00246   int (* del_if_hook)(<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp);
<a name="l00247"></a>00247   void (* ism_change_hook)(<span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keywordtype">int</span> old_status);
<a name="l00248"></a>00248   void (* nsm_change_hook)(<span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keywordtype">int</span> old_status);
<a name="l00249"></a>00249   void (* config_write_router)(<span class="keyword">struct </span><a class="code" href="structvty.html">vty</a> *<a class="code" href="vtysh_8c.html#a15b2c4e868040617c54eaaba3663b337">vty</a>);
<a name="l00250"></a>00250   void (* config_write_if    )(<span class="keyword">struct </span><a class="code" href="structvty.html">vty</a> *<a class="code" href="vtysh_8c.html#a15b2c4e868040617c54eaaba3663b337">vty</a>, <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp);
<a name="l00251"></a>00251   void (* <a class="code" href="isisd_8c.html#aff90ca2b271a0d399b326d6c0552bb41">config_write_debug</a> )(<span class="keyword">struct </span><a class="code" href="structvty.html">vty</a> *<a class="code" href="vtysh_8c.html#a15b2c4e868040617c54eaaba3663b337">vty</a>);
<a name="l00252"></a>00252   void (* show_opaque_info   )(<span class="keyword">struct </span><a class="code" href="structvty.html">vty</a> *<a class="code" href="vtysh_8c.html#a15b2c4e868040617c54eaaba3663b337">vty</a>, <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa);
<a name="l00253"></a>00253   int  (* lsa_originator)(<span class="keywordtype">void</span> *arg);
<a name="l00254"></a>00254   void (* lsa_refresher )(<span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa);
<a name="l00255"></a>00255   int (* new_lsa_hook)(<span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa);
<a name="l00256"></a>00256   int (* del_lsa_hook)(<span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa);
<a name="l00257"></a>00257   <span class="comment">/* 08/23/2011 yic +1 */</span>
<a name="l00258"></a>00258   void (* router_routing_table_change_hook)(<span class="keyword">struct </span>in_addr router_id, struct <a class="code" href="structroute__node.html">route_node</a> *rn);
<a name="l00259"></a>00259 };
<a name="l00260"></a>00260 
<a name="l00261"></a>00261 <span class="comment">/* Handle LSA-9/10/11 altogether. */</span>
<a name="l00262"></a>00262 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *ospf_opaque_wildcard_funclist;
<a name="l00263"></a>00263 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *ospf_opaque_type9_funclist;
<a name="l00264"></a>00264 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *ospf_opaque_type10_funclist;
<a name="l00265"></a>00265 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *ospf_opaque_type11_funclist;
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00268"></a>00268 ospf_opaque_del_functab (<span class="keywordtype">void</span> *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>)
<a name="l00269"></a>00269 {
<a name="l00270"></a>00270   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="ospf__opaque_8c.html#a00f5e4922ffebdc2ec1c7ea51bdd712d">MTYPE_OSPF_OPAQUE_FUNCTAB</a>, val);
<a name="l00271"></a>00271   <span class="keywordflow">return</span>;
<a name="l00272"></a>00272 }
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00275"></a>00275 ospf_opaque_funclist_init (<span class="keywordtype">void</span>)
<a name="l00276"></a>00276 {
<a name="l00277"></a>00277   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l00278"></a>00278 
<a name="l00279"></a>00279   funclist = ospf_opaque_wildcard_funclist = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00280"></a>00280   funclist-&gt;<a class="code" href="structlist.html#ac4fd9a331fe65f4c0891aa35bf84a6f5">del</a> = ospf_opaque_del_functab;
<a name="l00281"></a>00281 
<a name="l00282"></a>00282   funclist = ospf_opaque_type9_funclist  = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00283"></a>00283   funclist-&gt;<a class="code" href="structlist.html#ac4fd9a331fe65f4c0891aa35bf84a6f5">del</a> = ospf_opaque_del_functab;
<a name="l00284"></a>00284 
<a name="l00285"></a>00285   funclist = ospf_opaque_type10_funclist = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00286"></a>00286   funclist-&gt;<a class="code" href="structlist.html#ac4fd9a331fe65f4c0891aa35bf84a6f5">del</a> = ospf_opaque_del_functab;
<a name="l00287"></a>00287 
<a name="l00288"></a>00288   funclist = ospf_opaque_type11_funclist = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00289"></a>00289   funclist-&gt;<a class="code" href="structlist.html#ac4fd9a331fe65f4c0891aa35bf84a6f5">del</a> = ospf_opaque_del_functab;
<a name="l00290"></a>00290   <span class="keywordflow">return</span>;
<a name="l00291"></a>00291 }
<a name="l00292"></a>00292 
<a name="l00293"></a>00293 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00294"></a>00294 ospf_opaque_funclist_term (<span class="keywordtype">void</span>)
<a name="l00295"></a>00295 {
<a name="l00296"></a>00296   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298   funclist = ospf_opaque_wildcard_funclist;
<a name="l00299"></a>00299   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (funclist);
<a name="l00300"></a>00300 
<a name="l00301"></a>00301   funclist = ospf_opaque_type9_funclist;
<a name="l00302"></a>00302   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (funclist);
<a name="l00303"></a>00303 
<a name="l00304"></a>00304   funclist = ospf_opaque_type10_funclist;
<a name="l00305"></a>00305   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (funclist);
<a name="l00306"></a>00306 
<a name="l00307"></a>00307   funclist = ospf_opaque_type11_funclist;
<a name="l00308"></a>00308   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (funclist);
<a name="l00309"></a>00309   <span class="keywordflow">return</span>;
<a name="l00310"></a>00310 }
<a name="l00311"></a>00311 
<a name="l00312"></a>00312 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *
<a name="l00313"></a>00313 ospf_get_opaque_funclist (u_char lsa_type)
<a name="l00314"></a>00314 {
<a name="l00315"></a>00315   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00316"></a>00316 
<a name="l00317"></a>00317   <span class="keywordflow">switch</span> (lsa_type)
<a name="l00318"></a>00318     {
<a name="l00319"></a>00319     <span class="keywordflow">case</span> <a class="code" href="ospf__opaque_8h.html#a8c73b474152f1a487791f92e35bf30fe">OPAQUE_TYPE_WILDCARD</a>:
<a name="l00320"></a>00320       <span class="comment">/* XXX</span>
<a name="l00321"></a>00321 <span class="comment">       * This is an ugly trick to handle type-9/10/11 LSA altogether.</span>
<a name="l00322"></a>00322 <span class="comment">       * Yes, &quot;OPAQUE_TYPE_WILDCARD (value 0)&quot; is not an LSA-type, nor</span>
<a name="l00323"></a>00323 <span class="comment">       * an officially assigned opaque-type.</span>
<a name="l00324"></a>00324 <span class="comment">       * Though it is possible that the value might be officially used</span>
<a name="l00325"></a>00325 <span class="comment">       * in the future, we use it internally as a special label, for now.</span>
<a name="l00326"></a>00326 <span class="comment">       */</span>
<a name="l00327"></a>00327       funclist = ospf_opaque_wildcard_funclist;
<a name="l00328"></a>00328       <span class="keywordflow">break</span>;
<a name="l00329"></a>00329     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l00330"></a>00330       funclist = ospf_opaque_type9_funclist;
<a name="l00331"></a>00331       <span class="keywordflow">break</span>;
<a name="l00332"></a>00332     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l00333"></a>00333       funclist = ospf_opaque_type10_funclist;
<a name="l00334"></a>00334       <span class="keywordflow">break</span>;
<a name="l00335"></a>00335     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l00336"></a>00336       funclist = ospf_opaque_type11_funclist;
<a name="l00337"></a>00337       <span class="keywordflow">break</span>;
<a name="l00338"></a>00338     <span class="keywordflow">default</span>:
<a name="l00339"></a>00339       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_get_opaque_funclist: Unexpected LSA-type(%u)&quot;</span>, lsa_type);
<a name="l00340"></a>00340       <span class="keywordflow">break</span>;
<a name="l00341"></a>00341     }
<a name="l00342"></a>00342   <span class="keywordflow">return</span> funclist;
<a name="l00343"></a>00343 }
<a name="l00344"></a>00344 
<a name="l00345"></a>00345 <span class="comment">/* XXX: such a huge argument list can /not/ be healthy... */</span>
<a name="l00346"></a>00346 <span class="keywordtype">int</span>
<a name="l00347"></a>00347 <a class="code" href="ospf__opaque_8h.html#a625591adfc981177469407fa6132b3c3">ospf_register_opaque_functab</a> (
<a name="l00348"></a>00348   u_char lsa_type,
<a name="l00349"></a>00349   u_char opaque_type,
<a name="l00350"></a>00350   <span class="keywordtype">int</span> (* new_if_hook)(<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp),
<a name="l00351"></a>00351   <span class="keywordtype">int</span> (* del_if_hook)(<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp),
<a name="l00352"></a>00352   <span class="keywordtype">void</span> (* ism_change_hook)(<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keywordtype">int</span> old_status),
<a name="l00353"></a>00353   <span class="keywordtype">void</span> (* nsm_change_hook)(<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keywordtype">int</span> old_status),
<a name="l00354"></a>00354   <span class="keywordtype">void</span> (* config_write_router)(<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>),
<a name="l00355"></a>00355   <span class="keywordtype">void</span> (* config_write_if    )(<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp),
<a name="l00356"></a>00356   <span class="keywordtype">void</span> (* <a class="code" href="isisd_8c.html#aff90ca2b271a0d399b326d6c0552bb41">config_write_debug</a> )(<span class="keyword">struct</span> vty *vty),
<a name="l00357"></a>00357   <span class="keywordtype">void</span> (* show_opaque_info   )(<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa),
<a name="l00358"></a>00358   <span class="keywordtype">int</span>  (* lsa_originator)(<span class="keywordtype">void</span> *arg),
<a name="l00359"></a>00359   <span class="keywordtype">void</span> (* lsa_refresher )(<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa),
<a name="l00360"></a>00360   <span class="keywordtype">int</span> (* new_lsa_hook)(<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa),
<a name="l00361"></a>00361   <span class="keywordtype">int</span> (* del_lsa_hook)(<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa),
<a name="l00362"></a>00362   <span class="comment">/* 08/23/2011 yic +1 */</span>
<a name="l00363"></a>00363   <span class="keywordtype">void</span> (* router_routing_table_change_hook)())
<a name="l00364"></a>00364 {
<a name="l00365"></a>00365   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l00366"></a>00366   <span class="keyword">struct </span>ospf_opaque_functab *<span class="keyword">new</span>;
<a name="l00367"></a>00367   <span class="keywordtype">int</span> rc = -1;
<a name="l00368"></a>00368 
<a name="l00369"></a>00369   <span class="keywordflow">if</span> ((funclist = ospf_get_opaque_funclist (lsa_type)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00370"></a>00370     {
<a name="l00371"></a>00371       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_register_opaque_functab: Cannot get funclist&quot;</span>
<a name="l00372"></a>00372                  <span class="stringliteral">&quot; for Type-%u LSAs?&quot;</span>,
<a name="l00373"></a>00373                  lsa_type);
<a name="l00374"></a>00374       <span class="keywordflow">goto</span> out;
<a name="l00375"></a>00375     }
<a name="l00376"></a>00376   <span class="keywordflow">else</span>
<a name="l00377"></a>00377     {
<a name="l00378"></a>00378       <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00379"></a>00379       <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00380"></a>00380       
<a name="l00381"></a>00381       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00382"></a>00382         <span class="keywordflow">if</span> (functab-&gt;opaque_type == opaque_type)
<a name="l00383"></a>00383           {
<a name="l00384"></a>00384             <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_register_opaque_functab: Duplicated entry?:&quot;</span>
<a name="l00385"></a>00385                        <span class="stringliteral">&quot; lsa_type(%u), opaque_type(%u)&quot;</span>, 
<a name="l00386"></a>00386                        lsa_type, opaque_type);
<a name="l00387"></a>00387             <span class="keywordflow">goto</span> out;
<a name="l00388"></a>00388           }
<a name="l00389"></a>00389     }
<a name="l00390"></a>00390 
<a name="l00391"></a>00391   <span class="keywordflow">if</span> ((<span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="ospf__opaque_8c.html#a00f5e4922ffebdc2ec1c7ea51bdd712d">MTYPE_OSPF_OPAQUE_FUNCTAB</a>,
<a name="l00392"></a>00392               <span class="keyword">sizeof</span> (<span class="keyword">struct</span> ospf_opaque_functab))) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00393"></a>00393     {
<a name="l00394"></a>00394       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_register_opaque_functab: XMALLOC: %s&quot;</span>,
<a name="l00395"></a>00395                  <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00396"></a>00396       <span class="keywordflow">goto</span> out;
<a name="l00397"></a>00397     }
<a name="l00398"></a>00398 
<a name="l00399"></a>00399   <span class="keyword">new</span>-&gt;opaque_type    = opaque_type;
<a name="l00400"></a>00400   <span class="keyword">new</span>-&gt;oipt           = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00401"></a>00401   <span class="keyword">new</span>-&gt;new_if_hook    = new_if_hook;
<a name="l00402"></a>00402   <span class="keyword">new</span>-&gt;del_if_hook    = del_if_hook;
<a name="l00403"></a>00403   <span class="keyword">new</span>-&gt;ism_change_hook     = ism_change_hook;
<a name="l00404"></a>00404   <span class="keyword">new</span>-&gt;nsm_change_hook     = nsm_change_hook;
<a name="l00405"></a>00405   <span class="keyword">new</span>-&gt;config_write_router = config_write_router;
<a name="l00406"></a>00406   <span class="keyword">new</span>-&gt;config_write_if     = config_write_if;
<a name="l00407"></a>00407   <span class="keyword">new</span>-&gt;config_write_debug  = <a class="code" href="isisd_8c.html#aff90ca2b271a0d399b326d6c0552bb41">config_write_debug</a>;
<a name="l00408"></a>00408   <span class="keyword">new</span>-&gt;show_opaque_info    = show_opaque_info;
<a name="l00409"></a>00409   <span class="keyword">new</span>-&gt;lsa_originator = lsa_originator;
<a name="l00410"></a>00410   <span class="keyword">new</span>-&gt;lsa_refresher  = lsa_refresher;
<a name="l00411"></a>00411   <span class="keyword">new</span>-&gt;new_lsa_hook   = new_lsa_hook;
<a name="l00412"></a>00412   <span class="keyword">new</span>-&gt;del_lsa_hook   = del_lsa_hook;
<a name="l00413"></a>00413   <span class="comment">/* 08/23/2011 yic +1 */</span>
<a name="l00414"></a>00414   <span class="keyword">new</span>-&gt;router_routing_table_change_hook = router_routing_table_change_hook;
<a name="l00415"></a>00415 
<a name="l00416"></a>00416   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (funclist, <span class="keyword">new</span>);
<a name="l00417"></a>00417   rc = 0;
<a name="l00418"></a>00418 
<a name="l00419"></a>00419 out:
<a name="l00420"></a>00420   <span class="keywordflow">return</span> rc;
<a name="l00421"></a>00421 }
<a name="l00422"></a>00422 
<a name="l00423"></a>00423 <span class="keywordtype">void</span>
<a name="l00424"></a>00424 <a class="code" href="ospf__opaque_8h.html#a41bea3a6d41383d3785814e97a32f4c6">ospf_delete_opaque_functab</a> (u_char lsa_type, u_char opaque_type)
<a name="l00425"></a>00425 {
<a name="l00426"></a>00426   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l00427"></a>00427   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00428"></a>00428   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00429"></a>00429 
<a name="l00430"></a>00430   <span class="keywordflow">if</span> ((funclist = ospf_get_opaque_funclist (lsa_type)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00431"></a>00431     <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00432"></a>00432       {
<a name="l00433"></a>00433         <span class="keywordflow">if</span> (functab-&gt;opaque_type == opaque_type)
<a name="l00434"></a>00434           {
<a name="l00435"></a>00435             <span class="comment">/* Cleanup internal control information, if it still remains. */</span>
<a name="l00436"></a>00436             <span class="keywordflow">if</span> (functab-&gt;oipt != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00437"></a>00437               free_opaque_info_per_type (functab-&gt;oipt);
<a name="l00438"></a>00438 
<a name="l00439"></a>00439             <span class="comment">/* Dequeue listnode entry from the list. */</span>
<a name="l00440"></a>00440             <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (funclist, functab);
<a name="l00441"></a>00441 
<a name="l00442"></a>00442             <span class="comment">/* Avoid misjudgement in the next lookup. */</span>
<a name="l00443"></a>00443             <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (funclist) == 0)
<a name="l00444"></a>00444               funclist-&gt;<a class="code" href="structlist.html#a8306954be149c09248a51079826dd5f8">head</a> = funclist-&gt;<a class="code" href="structlist.html#a92df9371518988e714aa5c5c4aefa1bb">tail</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00445"></a>00445 
<a name="l00446"></a>00446             <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="ospf__opaque_8c.html#a00f5e4922ffebdc2ec1c7ea51bdd712d">MTYPE_OSPF_OPAQUE_FUNCTAB</a>, functab);
<a name="l00447"></a>00447             <span class="keywordflow">break</span>;
<a name="l00448"></a>00448       }
<a name="l00449"></a>00449       }
<a name="l00450"></a>00450 
<a name="l00451"></a>00451   <span class="keywordflow">return</span>;
<a name="l00452"></a>00452 }
<a name="l00453"></a>00453 
<a name="l00454"></a>00454 <span class="keyword">static</span> <span class="keyword">struct </span>ospf_opaque_functab *
<a name="l00455"></a>00455 ospf_opaque_functab_lookup (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00456"></a>00456 {
<a name="l00457"></a>00457   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l00458"></a>00458   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00459"></a>00459   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00460"></a>00460   u_char <a class="code" href="structkey.html">key</a> = <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr));
<a name="l00461"></a>00461 
<a name="l00462"></a>00462   <span class="keywordflow">if</span> ((funclist = ospf_get_opaque_funclist (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00463"></a>00463     <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (funclist, node, functab))
<a name="l00464"></a>00464       <span class="keywordflow">if</span> (functab-&gt;opaque_type == key)
<a name="l00465"></a>00465         <span class="keywordflow">return</span> functab;
<a name="l00466"></a>00466 
<a name="l00467"></a>00467   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00468"></a>00468 }
<a name="l00469"></a>00469 
<a name="l00470"></a>00470 <span class="comment">/*------------------------------------------------------------------------*</span>
<a name="l00471"></a>00471 <span class="comment"> * Followings are management functions for self-originated LSA entries.</span>
<a name="l00472"></a>00472 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l00473"></a>00473 
<a name="l00474"></a>00474 <span class="comment">/*</span>
<a name="l00475"></a>00475 <span class="comment"> * Opaque-LSA control information per opaque-type.</span>
<a name="l00476"></a>00476 <span class="comment"> * Single Opaque-Type may have multiple instances; each of them will be</span>
<a name="l00477"></a>00477 <span class="comment"> * identified by their opaque-id.</span>
<a name="l00478"></a>00478 <span class="comment"> */</span>
<a name="l00479"></a>00479 <span class="keyword">struct </span>opaque_info_per_type
<a name="l00480"></a>00480 {
<a name="l00481"></a>00481   u_char lsa_type;
<a name="l00482"></a>00482   u_char opaque_type;
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   <span class="keyword">enum</span> { PROC_NORMAL, PROC_SUSPEND } status;
<a name="l00485"></a>00485 
<a name="l00486"></a>00486   <span class="comment">/*</span>
<a name="l00487"></a>00487 <span class="comment">   * Thread for (re-)origination scheduling for this opaque-type.</span>
<a name="l00488"></a>00488 <span class="comment">   *</span>
<a name="l00489"></a>00489 <span class="comment">   * Initial origination of Opaque-LSAs is controlled by generic</span>
<a name="l00490"></a>00490 <span class="comment">   * Opaque-LSA handling module so that same opaque-type entries are</span>
<a name="l00491"></a>00491 <span class="comment">   * called all at once when certain conditions are met.</span>
<a name="l00492"></a>00492 <span class="comment">   * However, there might be cases that some Opaque-LSA clients need</span>
<a name="l00493"></a>00493 <span class="comment">   * to (re-)originate their own Opaque-LSAs out-of-sync with others.</span>
<a name="l00494"></a>00494 <span class="comment">   * This thread is prepared for that specific purpose.</span>
<a name="l00495"></a>00495 <span class="comment">   */</span>
<a name="l00496"></a>00496   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *t_opaque_lsa_self;
<a name="l00497"></a>00497 
<a name="l00498"></a>00498   <span class="comment">/*</span>
<a name="l00499"></a>00499 <span class="comment">   * Backpointer to an &quot;owner&quot; which is LSA-type dependent.</span>
<a name="l00500"></a>00500 <span class="comment">   *   type-9:  struct ospf_interface</span>
<a name="l00501"></a>00501 <span class="comment">   *   type-10: struct ospf_area</span>
<a name="l00502"></a>00502 <span class="comment">   *   type-11: struct ospf</span>
<a name="l00503"></a>00503 <span class="comment">   */</span>
<a name="l00504"></a>00504   <span class="keywordtype">void</span> *owner;
<a name="l00505"></a>00505 
<a name="l00506"></a>00506   <span class="comment">/* Collection of callback functions for this opaque-type. */</span>
<a name="l00507"></a>00507   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00508"></a>00508 
<a name="l00509"></a>00509   <span class="comment">/* List of Opaque-LSA control informations per opaque-id. */</span>
<a name="l00510"></a>00510   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *id_list;
<a name="l00511"></a>00511 };
<a name="l00512"></a>00512 
<a name="l00513"></a>00513 <span class="comment">/* Opaque-LSA control information per opaque-id. */</span>
<a name="l00514"></a>00514 <span class="keyword">struct </span>opaque_info_per_id
<a name="l00515"></a>00515 {
<a name="l00516"></a>00516   u_int32_t opaque_id;
<a name="l00517"></a>00517 
<a name="l00518"></a>00518   <span class="comment">/* Thread for refresh/flush scheduling for this opaque-type/id. */</span>
<a name="l00519"></a>00519   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *t_opaque_lsa_self;
<a name="l00520"></a>00520 
<a name="l00521"></a>00521   <span class="comment">/* Backpointer to Opaque-LSA control information per opaque-type. */</span>
<a name="l00522"></a>00522   <span class="keyword">struct </span>opaque_info_per_type *opqctl_type;
<a name="l00523"></a>00523 
<a name="l00524"></a>00524   <span class="comment">/* Here comes an actual Opaque-LSA entry for this opaque-type/id. */</span>
<a name="l00525"></a>00525   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l00526"></a>00526 };
<a name="l00527"></a>00527 
<a name="l00528"></a>00528 <span class="keyword">static</span> <span class="keyword">struct </span>opaque_info_per_type *register_opaque_info_per_type (<span class="keyword">struct</span> ospf_opaque_functab *functab, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>);
<a name="l00529"></a>00529 <span class="keyword">static</span> <span class="keyword">struct </span>opaque_info_per_type *lookup_opaque_info_by_type (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa);
<a name="l00530"></a>00530 <span class="keyword">static</span> <span class="keyword">struct </span>opaque_info_per_id *register_opaque_info_per_id (<span class="keyword">struct</span> opaque_info_per_type *oipt, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>);
<a name="l00531"></a>00531 <span class="keyword">static</span> <span class="keyword">struct </span>opaque_info_per_id *lookup_opaque_info_by_id (<span class="keyword">struct</span> opaque_info_per_type *oipt, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa);
<a name="l00532"></a>00532 <span class="keyword">static</span> <span class="keyword">struct </span>opaque_info_per_id *register_opaque_lsa (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>);
<a name="l00533"></a>00533 
<a name="l00534"></a>00534 
<a name="l00535"></a>00535 <span class="keyword">static</span> <span class="keyword">struct </span>opaque_info_per_type *
<a name="l00536"></a>00536 register_opaque_info_per_type (<span class="keyword">struct</span> ospf_opaque_functab *functab,
<a name="l00537"></a>00537                                <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>)
<a name="l00538"></a>00538 {
<a name="l00539"></a>00539   <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *top;
<a name="l00540"></a>00540   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l00541"></a>00541 
<a name="l00542"></a>00542   <span class="keywordflow">if</span> ((oipt = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="ospf__opaque_8c.html#ac5493be6608386ff7d59059179698a50">MTYPE_OPAQUE_INFO_PER_TYPE</a>,
<a name="l00543"></a>00543                <span class="keyword">sizeof</span> (<span class="keyword">struct</span> opaque_info_per_type))) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00544"></a>00544     {
<a name="l00545"></a>00545       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;register_opaque_info_per_type: XMALLOC: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00546"></a>00546       <span class="keywordflow">goto</span> out;
<a name="l00547"></a>00547     }
<a name="l00548"></a>00548 
<a name="l00549"></a>00549   <span class="keywordflow">switch</span> (new-&gt;data-&gt;type)
<a name="l00550"></a>00550     {
<a name="l00551"></a>00551     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l00552"></a>00552       oipt-&gt;owner = <span class="keyword">new</span>-&gt;oi;
<a name="l00553"></a>00553       <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (new-&gt;oi-&gt;opaque_lsa_self, oipt);
<a name="l00554"></a>00554       <span class="keywordflow">break</span>;
<a name="l00555"></a>00555     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l00556"></a>00556       oipt-&gt;owner = <span class="keyword">new</span>-&gt;area;
<a name="l00557"></a>00557       <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (new-&gt;area-&gt;opaque_lsa_self, oipt);
<a name="l00558"></a>00558       <span class="keywordflow">break</span>;
<a name="l00559"></a>00559     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l00560"></a>00560       top = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l00561"></a>00561       <span class="keywordflow">if</span> (new-&gt;area != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; (top = new-&gt;area-&gt;ospf) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00562"></a>00562         {
<a name="l00563"></a>00563           free_opaque_info_per_type ((<span class="keywordtype">void</span> *) oipt);
<a name="l00564"></a>00564           oipt = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00565"></a>00565           <span class="keywordflow">goto</span> out; <span class="comment">/* This case may not exist. */</span>
<a name="l00566"></a>00566         }
<a name="l00567"></a>00567       oipt-&gt;owner = top;
<a name="l00568"></a>00568       <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (top-&gt;opaque_lsa_self, oipt);
<a name="l00569"></a>00569       <span class="keywordflow">break</span>;
<a name="l00570"></a>00570     <span class="keywordflow">default</span>:
<a name="l00571"></a>00571       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;register_opaque_info_per_type: Unexpected LSA-type(%u)&quot;</span>, new-&gt;data-&gt;type);
<a name="l00572"></a>00572       free_opaque_info_per_type ((<span class="keywordtype">void</span> *) oipt);
<a name="l00573"></a>00573       oipt = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00574"></a>00574       <span class="keywordflow">goto</span> out; <span class="comment">/* This case may not exist. */</span>
<a name="l00575"></a>00575     }
<a name="l00576"></a>00576 
<a name="l00577"></a>00577   oipt-&gt;lsa_type = <span class="keyword">new</span>-&gt;data-&gt;type;
<a name="l00578"></a>00578   oipt-&gt;opaque_type = <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (new-&gt;data-&gt;id.s_addr));
<a name="l00579"></a>00579   oipt-&gt;status = PROC_NORMAL;
<a name="l00580"></a>00580   oipt-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00581"></a>00581   oipt-&gt;functab = functab;
<a name="l00582"></a>00582   functab-&gt;oipt = oipt;
<a name="l00583"></a>00583   oipt-&gt;id_list = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l00584"></a>00584   oipt-&gt;id_list-&gt;del = free_opaque_info_per_id;
<a name="l00585"></a>00585 
<a name="l00586"></a>00586 out:
<a name="l00587"></a>00587   <span class="keywordflow">return</span> oipt;
<a name="l00588"></a>00588 }
<a name="l00589"></a>00589 
<a name="l00590"></a>00590 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00591"></a>00591 free_opaque_info_per_type (<span class="keywordtype">void</span> *<a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>)
<a name="l00592"></a>00592 {
<a name="l00593"></a>00593   <span class="keyword">struct </span>opaque_info_per_type *oipt = (<span class="keyword">struct </span>opaque_info_per_type *) val;
<a name="l00594"></a>00594   <span class="keyword">struct </span>opaque_info_per_id *oipi;
<a name="l00595"></a>00595   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l00596"></a>00596   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00597"></a>00597 
<a name="l00598"></a>00598   <span class="comment">/* Control information per opaque-id may still exist. */</span>
<a name="l00599"></a>00599   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (oipt-&gt;id_list, node, nnode, oipi))
<a name="l00600"></a>00600     {
<a name="l00601"></a>00601       <span class="keywordflow">if</span> ((lsa = oipi-&gt;lsa) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00602"></a>00602         <span class="keywordflow">continue</span>;
<a name="l00603"></a>00603       <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (lsa))
<a name="l00604"></a>00604         <span class="keywordflow">continue</span>;
<a name="l00605"></a>00605       <a class="code" href="ospf__opaque_8h.html#adc5d31cc8c6d8fd4eff1d8069027c39b">ospf_opaque_lsa_flush_schedule</a> (lsa);
<a name="l00606"></a>00606     }
<a name="l00607"></a>00607 
<a name="l00608"></a>00608   <span class="comment">/* Remove &quot;oipt&quot; from its owner&#39;s self-originated LSA list. */</span>
<a name="l00609"></a>00609   <span class="keywordflow">switch</span> (oipt-&gt;lsa_type)
<a name="l00610"></a>00610     {
<a name="l00611"></a>00611     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l00612"></a>00612       {
<a name="l00613"></a>00613         <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi = (<span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *)(oipt-&gt;owner);
<a name="l00614"></a>00614         <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (oi-&gt;opaque_lsa_self, oipt);
<a name="l00615"></a>00615         <span class="keywordflow">break</span>;
<a name="l00616"></a>00616       }
<a name="l00617"></a>00617     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l00618"></a>00618       {
<a name="l00619"></a>00619         <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *area = (<span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *)(oipt-&gt;owner);
<a name="l00620"></a>00620         <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (area-&gt;opaque_lsa_self, oipt);
<a name="l00621"></a>00621         <span class="keywordflow">break</span>;
<a name="l00622"></a>00622       }
<a name="l00623"></a>00623     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l00624"></a>00624       {
<a name="l00625"></a>00625         <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *top = (<span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *)(oipt-&gt;owner);
<a name="l00626"></a>00626         <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (top-&gt;opaque_lsa_self, oipt);
<a name="l00627"></a>00627         <span class="keywordflow">break</span>;
<a name="l00628"></a>00628       }
<a name="l00629"></a>00629     <span class="keywordflow">default</span>:
<a name="l00630"></a>00630       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;free_opaque_info_per_type: Unexpected LSA-type(%u)&quot;</span>, oipt-&gt;lsa_type);
<a name="l00631"></a>00631       <span class="keywordflow">break</span>; <span class="comment">/* This case may not exist. */</span>
<a name="l00632"></a>00632     }
<a name="l00633"></a>00633 
<a name="l00634"></a>00634   <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (oipt-&gt;t_opaque_lsa_self);
<a name="l00635"></a>00635   <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (oipt-&gt;id_list);
<a name="l00636"></a>00636   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="ospf__opaque_8c.html#ac5493be6608386ff7d59059179698a50">MTYPE_OPAQUE_INFO_PER_TYPE</a>, oipt);
<a name="l00637"></a>00637   <span class="keywordflow">return</span>;
<a name="l00638"></a>00638 }
<a name="l00639"></a>00639 
<a name="l00640"></a>00640 <span class="keyword">static</span> <span class="keyword">struct </span>opaque_info_per_type *
<a name="l00641"></a>00641 lookup_opaque_info_by_type (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00642"></a>00642 {
<a name="l00643"></a>00643   <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *top;
<a name="l00644"></a>00644   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00645"></a>00645   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00646"></a>00646   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *listtop = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00647"></a>00647   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00648"></a>00648   <span class="keyword">struct </span>opaque_info_per_type *oipt = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00649"></a>00649   u_char key = <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr));
<a name="l00650"></a>00650 
<a name="l00651"></a>00651   <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l00652"></a>00652     {
<a name="l00653"></a>00653     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l00654"></a>00654       <span class="keywordflow">if</span> ((oi = lsa-&gt;oi) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00655"></a>00655         listtop = oi-&gt;opaque_lsa_self;
<a name="l00656"></a>00656       <span class="keywordflow">else</span>
<a name="l00657"></a>00657         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Type-9 Opaque-LSA: Reference to OI is missing?&quot;</span>);
<a name="l00658"></a>00658       <span class="keywordflow">break</span>;
<a name="l00659"></a>00659     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l00660"></a>00660       <span class="keywordflow">if</span> ((area = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00661"></a>00661         listtop = area-&gt;opaque_lsa_self;
<a name="l00662"></a>00662       <span class="keywordflow">else</span>
<a name="l00663"></a>00663         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Type-10 Opaque-LSA: Reference to AREA is missing?&quot;</span>);
<a name="l00664"></a>00664       <span class="keywordflow">break</span>;
<a name="l00665"></a>00665     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l00666"></a>00666       top = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l00667"></a>00667       <span class="keywordflow">if</span> ((area = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; (top = area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00668"></a>00668         {
<a name="l00669"></a>00669           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Type-11 Opaque-LSA: Reference to OSPF is missing?&quot;</span>);
<a name="l00670"></a>00670           <span class="keywordflow">break</span>; <span class="comment">/* Unlikely to happen. */</span>
<a name="l00671"></a>00671         }
<a name="l00672"></a>00672       listtop = top-&gt;opaque_lsa_self;
<a name="l00673"></a>00673       <span class="keywordflow">break</span>;
<a name="l00674"></a>00674     <span class="keywordflow">default</span>:
<a name="l00675"></a>00675       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;lookup_opaque_info_by_type: Unexpected LSA-type(%u)&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l00676"></a>00676       <span class="keywordflow">break</span>;
<a name="l00677"></a>00677     }
<a name="l00678"></a>00678 
<a name="l00679"></a>00679   <span class="keywordflow">if</span> (listtop != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00680"></a>00680     <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (listtop, node, nnode, oipt))
<a name="l00681"></a>00681       <span class="keywordflow">if</span> (oipt-&gt;opaque_type == key)
<a name="l00682"></a>00682         <span class="keywordflow">return</span> oipt;
<a name="l00683"></a>00683 
<a name="l00684"></a>00684   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00685"></a>00685 }
<a name="l00686"></a>00686 
<a name="l00687"></a>00687 <span class="keyword">static</span> <span class="keyword">struct </span>opaque_info_per_id *
<a name="l00688"></a>00688 register_opaque_info_per_id (<span class="keyword">struct</span> opaque_info_per_type *oipt,
<a name="l00689"></a>00689                              <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>)
<a name="l00690"></a>00690 {
<a name="l00691"></a>00691   <span class="keyword">struct </span>opaque_info_per_id *oipi;
<a name="l00692"></a>00692 
<a name="l00693"></a>00693   <span class="keywordflow">if</span> ((oipi = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="ospf__opaque_8c.html#af05beecea27878275347774479daf68b">MTYPE_OPAQUE_INFO_PER_ID</a>,
<a name="l00694"></a>00694                <span class="keyword">sizeof</span> (<span class="keyword">struct</span> opaque_info_per_id))) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00695"></a>00695     {
<a name="l00696"></a>00696       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;register_opaque_info_per_id: XMALLOC: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00697"></a>00697       <span class="keywordflow">goto</span> out;
<a name="l00698"></a>00698     }
<a name="l00699"></a>00699   oipi-&gt;opaque_id = <a class="code" href="ospf__opaque_8h.html#a44dd18f87765dd2c8b6003c5efd099df">GET_OPAQUE_ID</a> (ntohl (new-&gt;data-&gt;id.s_addr));
<a name="l00700"></a>00700   oipi-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00701"></a>00701   oipi-&gt;opqctl_type = oipt;
<a name="l00702"></a>00702   oipi-&gt;lsa = <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (<span class="keyword">new</span>);
<a name="l00703"></a>00703 
<a name="l00704"></a>00704   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (oipt-&gt;id_list, oipi);
<a name="l00705"></a>00705 
<a name="l00706"></a>00706 out:
<a name="l00707"></a>00707   <span class="keywordflow">return</span> oipi;
<a name="l00708"></a>00708 }
<a name="l00709"></a>00709 
<a name="l00710"></a>00710 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00711"></a>00711 free_opaque_info_per_id (<span class="keywordtype">void</span> *val)
<a name="l00712"></a>00712 {
<a name="l00713"></a>00713   <span class="keyword">struct </span>opaque_info_per_id *oipi = (<span class="keyword">struct </span>opaque_info_per_id *) val;
<a name="l00714"></a>00714 
<a name="l00715"></a>00715   <a class="code" href="ospfd_8h.html#aad5b9afadb0a72aae30f4a7e750cc66a">OSPF_TIMER_OFF</a> (oipi-&gt;t_opaque_lsa_self);
<a name="l00716"></a>00716   <span class="keywordflow">if</span> (oipi-&gt;lsa != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00717"></a>00717     <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;oipi-&gt;lsa);
<a name="l00718"></a>00718   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="ospf__opaque_8c.html#af05beecea27878275347774479daf68b">MTYPE_OPAQUE_INFO_PER_ID</a>, oipi);
<a name="l00719"></a>00719   <span class="keywordflow">return</span>;
<a name="l00720"></a>00720 }
<a name="l00721"></a>00721 
<a name="l00722"></a>00722 <span class="keyword">static</span> <span class="keyword">struct </span>opaque_info_per_id *
<a name="l00723"></a>00723 lookup_opaque_info_by_id (<span class="keyword">struct</span> opaque_info_per_type *oipt,
<a name="l00724"></a>00724                           <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00725"></a>00725 {
<a name="l00726"></a>00726   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00727"></a>00727   <span class="keyword">struct </span>opaque_info_per_id   *oipi;
<a name="l00728"></a>00728   u_int32_t key = <a class="code" href="ospf__opaque_8h.html#a44dd18f87765dd2c8b6003c5efd099df">GET_OPAQUE_ID</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr));
<a name="l00729"></a>00729 
<a name="l00730"></a>00730   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (oipt-&gt;id_list, node, nnode, oipi))
<a name="l00731"></a>00731     <span class="keywordflow">if</span> (oipi-&gt;opaque_id == key)
<a name="l00732"></a>00732       <span class="keywordflow">return</span> oipi;
<a name="l00733"></a>00733 
<a name="l00734"></a>00734   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00735"></a>00735 }
<a name="l00736"></a>00736 
<a name="l00737"></a>00737 <span class="keyword">static</span> <span class="keyword">struct </span>opaque_info_per_id *
<a name="l00738"></a>00738 register_opaque_lsa (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span>)
<a name="l00739"></a>00739 {
<a name="l00740"></a>00740   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00741"></a>00741   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l00742"></a>00742   <span class="keyword">struct </span>opaque_info_per_id *oipi = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00743"></a>00743 
<a name="l00744"></a>00744   <span class="keywordflow">if</span> ((functab = ospf_opaque_functab_lookup (<span class="keyword">new</span>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00745"></a>00745     <span class="keywordflow">goto</span> out;
<a name="l00746"></a>00746 
<a name="l00747"></a>00747   <span class="keywordflow">if</span> ((oipt = lookup_opaque_info_by_type (<span class="keyword">new</span>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l00748"></a>00748   &amp;&amp;  (oipt = register_opaque_info_per_type (functab, <span class="keyword">new</span>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00749"></a>00749     <span class="keywordflow">goto</span> out;
<a name="l00750"></a>00750 
<a name="l00751"></a>00751   <span class="keywordflow">if</span> ((oipi = register_opaque_info_per_id (oipt, <span class="keyword">new</span>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00752"></a>00752     <span class="keywordflow">goto</span> out;
<a name="l00753"></a>00753 
<a name="l00754"></a>00754 out:
<a name="l00755"></a>00755   <span class="keywordflow">return</span> oipi;
<a name="l00756"></a>00756 }
<a name="l00757"></a>00757 
<a name="l00758"></a>00758 <span class="comment">/*------------------------------------------------------------------------*</span>
<a name="l00759"></a>00759 <span class="comment"> * Followings are (vty) configuration functions for Opaque-LSAs handling.</span>
<a name="l00760"></a>00760 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l00761"></a>00761 
<a name="l00762"></a>00762 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (capability_opaque,
<a name="l00763"></a>00763        capability_opaque_cmd,
<a name="l00764"></a>00764        <span class="stringliteral">&quot;capability opaque&quot;</span>,
<a name="l00765"></a>00765        <span class="stringliteral">&quot;Enable specific OSPF feature\n&quot;</span>
<a name="l00766"></a>00766        <span class="stringliteral">&quot;Opaque LSA\n&quot;</span>)
<a name="l00767"></a>00767 {
<a name="l00768"></a>00768   <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a> = (<span class="keyword">struct </span>ospf *) vty-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00769"></a>00769 
<a name="l00770"></a>00770   <span class="comment">/* Turn on the &quot;master switch&quot; of opaque-lsa capability. */</span>
<a name="l00771"></a>00771   if (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>))
<a name="l00772"></a>00772     {
<a name="l00773"></a>00773       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00774"></a>00774         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Opaque capability: OFF -&gt; ON&quot;</span>);
<a name="l00775"></a>00775 
<a name="l00776"></a>00776       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>);
<a name="l00777"></a>00777       <a class="code" href="ospf__neighbor_8c.html#ad8a06eee7456a7316b7814eb0ef6f1c1">ospf_renegotiate_optional_capabilities</a> (ospf);
<a name="l00778"></a>00778     }
<a name="l00779"></a>00779   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00780"></a>00780 }
<a name="l00781"></a>00781 
<a name="l00782"></a>00782 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (capability_opaque,
<a name="l00783"></a>00783        ospf_opaque_capable_cmd,
<a name="l00784"></a>00784        <span class="stringliteral">&quot;ospf opaque-lsa&quot;</span>,
<a name="l00785"></a>00785        <span class="stringliteral">&quot;OSPF specific commands\n&quot;</span>
<a name="l00786"></a>00786        <span class="stringliteral">&quot;Enable the Opaque-LSA capability (rfc2370)\n&quot;</span>)
<a name="l00787"></a>00787 
<a name="l00788"></a>00788 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_capability_opaque,
<a name="l00789"></a>00789        no_capability_opaque_cmd,
<a name="l00790"></a>00790        &quot;no capability opaque&quot;,
<a name="l00791"></a>00791        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l00792"></a>00792        &quot;Enable specific OSPF feature\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l00793"></a>00793        &quot;Opaque LSA\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l00794"></a>00794 {
<a name="l00795"></a>00795   <span class="keyword">struct </span>ospf *ospf = (<span class="keyword">struct </span>ospf *) vty-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00796"></a>00796 
<a name="l00797"></a>00797   <span class="comment">/* Turn off the &quot;master switch&quot; of opaque-lsa capability. */</span>
<a name="l00798"></a>00798   if (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>))
<a name="l00799"></a>00799     {
<a name="l00800"></a>00800       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l00801"></a>00801         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Opaque capability: ON -&gt; OFF&quot;</span>);
<a name="l00802"></a>00802 
<a name="l00803"></a>00803       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>);
<a name="l00804"></a>00804       <a class="code" href="ospf__neighbor_8c.html#ad8a06eee7456a7316b7814eb0ef6f1c1">ospf_renegotiate_optional_capabilities</a> (ospf);
<a name="l00805"></a>00805     }
<a name="l00806"></a>00806   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00807"></a>00807 }
<a name="l00808"></a>00808 
<a name="l00809"></a>00809 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_capability_opaque,
<a name="l00810"></a>00810        no_ospf_opaque_capable_cmd,
<a name="l00811"></a>00811        <span class="stringliteral">&quot;no ospf opaque-lsa&quot;</span>,
<a name="l00812"></a>00812        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l00813"></a>00813        <span class="stringliteral">&quot;OSPF specific commands\n&quot;</span>
<a name="l00814"></a>00814        <span class="stringliteral">&quot;Disable the Opaque-LSA capability (rfc2370)\n&quot;</span>)
<a name="l00815"></a>00815 
<a name="l00816"></a>00816 static <span class="keywordtype">void</span>
<a name="l00817"></a>00817 ospf_opaque_register_vty (<span class="keywordtype">void</span>)
<a name="l00818"></a>00818 {
<a name="l00819"></a>00819   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a53037feb34b636b5cabbcdb85698ac35">OSPF_NODE</a>, &amp;capability_opaque_cmd);
<a name="l00820"></a>00820   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a53037feb34b636b5cabbcdb85698ac35">OSPF_NODE</a>, &amp;no_capability_opaque_cmd);
<a name="l00821"></a>00821   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a53037feb34b636b5cabbcdb85698ac35">OSPF_NODE</a>, &amp;ospf_opaque_capable_cmd);
<a name="l00822"></a>00822   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a53037feb34b636b5cabbcdb85698ac35">OSPF_NODE</a>, &amp;no_ospf_opaque_capable_cmd);
<a name="l00823"></a>00823   <span class="keywordflow">return</span>;
<a name="l00824"></a>00824 }
<a name="l00825"></a>00825 
<a name="l00826"></a>00826 <span class="comment">/*------------------------------------------------------------------------*</span>
<a name="l00827"></a>00827 <span class="comment"> * Followings are collection of user-registered function callers.</span>
<a name="l00828"></a>00828 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l00829"></a>00829 
<a name="l00830"></a>00830 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00831"></a>00831 opaque_lsa_new_if_callback (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00832"></a>00832 {
<a name="l00833"></a>00833   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00834"></a>00834   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00835"></a>00835   <span class="keywordtype">int</span> rc = -1;
<a name="l00836"></a>00836 
<a name="l00837"></a>00837   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00838"></a>00838     <span class="keywordflow">if</span> (functab-&gt;new_if_hook != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00839"></a>00839       <span class="keywordflow">if</span> ((* functab-&gt;new_if_hook)(ifp) != 0)
<a name="l00840"></a>00840         <span class="keywordflow">goto</span> out;
<a name="l00841"></a>00841   rc = 0;
<a name="l00842"></a>00842 out:
<a name="l00843"></a>00843   <span class="keywordflow">return</span> rc;
<a name="l00844"></a>00844 }
<a name="l00845"></a>00845 
<a name="l00846"></a>00846 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00847"></a>00847 opaque_lsa_del_if_callback (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00848"></a>00848 {
<a name="l00849"></a>00849   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00850"></a>00850   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00851"></a>00851   <span class="keywordtype">int</span> rc = -1;
<a name="l00852"></a>00852 
<a name="l00853"></a>00853   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00854"></a>00854     <span class="keywordflow">if</span> (functab-&gt;del_if_hook != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00855"></a>00855       <span class="keywordflow">if</span> ((* functab-&gt;del_if_hook)(ifp) != 0)
<a name="l00856"></a>00856         <span class="keywordflow">goto</span> out;
<a name="l00857"></a>00857   rc = 0;
<a name="l00858"></a>00858 out:
<a name="l00859"></a>00859   <span class="keywordflow">return</span> rc;
<a name="l00860"></a>00860 }
<a name="l00861"></a>00861 
<a name="l00862"></a>00862 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00863"></a>00863 opaque_lsa_ism_change_callback (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist,
<a name="l00864"></a>00864                                 <span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keywordtype">int</span> old_status)
<a name="l00865"></a>00865 {
<a name="l00866"></a>00866   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00867"></a>00867   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00868"></a>00868 
<a name="l00869"></a>00869   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00870"></a>00870     <span class="keywordflow">if</span> (functab-&gt;ism_change_hook != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00871"></a>00871       (* functab-&gt;ism_change_hook)(oi, old_status);
<a name="l00872"></a>00872 
<a name="l00873"></a>00873   <span class="keywordflow">return</span>;
<a name="l00874"></a>00874 }
<a name="l00875"></a>00875 
<a name="l00876"></a>00876 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00877"></a>00877 opaque_lsa_nsm_change_callback (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist,
<a name="l00878"></a>00878                                 <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keywordtype">int</span> old_status)
<a name="l00879"></a>00879 {
<a name="l00880"></a>00880   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00881"></a>00881   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00882"></a>00882 
<a name="l00883"></a>00883   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00884"></a>00884     <span class="keywordflow">if</span> (functab-&gt;nsm_change_hook != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00885"></a>00885       (* functab-&gt;nsm_change_hook)(nbr, old_status);
<a name="l00886"></a>00886   <span class="keywordflow">return</span>;
<a name="l00887"></a>00887 }
<a name="l00888"></a>00888 
<a name="l00889"></a>00889 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00890"></a>00890 opaque_lsa_config_write_router_callback (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist, 
<a name="l00891"></a>00891                                          <span class="keyword">struct</span> vty *vty)
<a name="l00892"></a>00892 {
<a name="l00893"></a>00893   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00894"></a>00894   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00895"></a>00895 
<a name="l00896"></a>00896   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00897"></a>00897     <span class="keywordflow">if</span> (functab-&gt;config_write_router != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00898"></a>00898       (* functab-&gt;config_write_router)(vty);
<a name="l00899"></a>00899   <span class="keywordflow">return</span>;
<a name="l00900"></a>00900 }
<a name="l00901"></a>00901 
<a name="l00902"></a>00902 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00903"></a>00903 opaque_lsa_config_write_if_callback (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist,
<a name="l00904"></a>00904                                      <span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00905"></a>00905 {
<a name="l00906"></a>00906   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00907"></a>00907   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00908"></a>00908 
<a name="l00909"></a>00909   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00910"></a>00910     <span class="keywordflow">if</span> (functab-&gt;config_write_if != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00911"></a>00911       (* functab-&gt;config_write_if)(vty, ifp);
<a name="l00912"></a>00912   <span class="keywordflow">return</span>;
<a name="l00913"></a>00913 }
<a name="l00914"></a>00914 
<a name="l00915"></a>00915 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00916"></a>00916 opaque_lsa_config_write_debug_callback (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist, <span class="keyword">struct</span> vty *vty)
<a name="l00917"></a>00917 {
<a name="l00918"></a>00918   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00919"></a>00919   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00920"></a>00920 
<a name="l00921"></a>00921   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00922"></a>00922     <span class="keywordflow">if</span> (functab-&gt;config_write_debug != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00923"></a>00923       (* functab-&gt;config_write_debug)(vty);
<a name="l00924"></a>00924   <span class="keywordflow">return</span>;
<a name="l00925"></a>00925 }
<a name="l00926"></a>00926 
<a name="l00927"></a>00927 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00928"></a>00928 opaque_lsa_originate_callback (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist, <span class="keywordtype">void</span> *lsa_type_dependent)
<a name="l00929"></a>00929 {
<a name="l00930"></a>00930   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00931"></a>00931   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00932"></a>00932   <span class="keywordtype">int</span> rc = -1;
<a name="l00933"></a>00933 
<a name="l00934"></a>00934   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00935"></a>00935     <span class="keywordflow">if</span> (functab-&gt;lsa_originator != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00936"></a>00936       <span class="keywordflow">if</span> ((* functab-&gt;lsa_originator)(lsa_type_dependent) != 0)
<a name="l00937"></a>00937          <span class="keywordflow">goto</span> out;
<a name="l00938"></a>00938   rc = 0;
<a name="l00939"></a>00939 out:
<a name="l00940"></a>00940   <span class="keywordflow">return</span> rc;
<a name="l00941"></a>00941 }
<a name="l00942"></a>00942 
<a name="l00943"></a>00943 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00944"></a>00944 new_lsa_callback (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00945"></a>00945 {
<a name="l00946"></a>00946   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00947"></a>00947   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00948"></a>00948   <span class="keywordtype">int</span> rc = -1;
<a name="l00949"></a>00949 
<a name="l00950"></a>00950   <span class="comment">/* This function handles ALL types of LSAs, not only opaque ones. */</span>
<a name="l00951"></a>00951   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00952"></a>00952     <span class="keywordflow">if</span> (functab-&gt;new_lsa_hook != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00953"></a>00953       <span class="keywordflow">if</span> ((* functab-&gt;new_lsa_hook)(lsa) != 0)
<a name="l00954"></a>00954         <span class="keywordflow">goto</span> out;
<a name="l00955"></a>00955   rc = 0;
<a name="l00956"></a>00956 out:
<a name="l00957"></a>00957   <span class="keywordflow">return</span> rc;
<a name="l00958"></a>00958 }
<a name="l00959"></a>00959 
<a name="l00960"></a>00960 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00961"></a>00961 del_lsa_callback (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l00962"></a>00962 {
<a name="l00963"></a>00963   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00964"></a>00964   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00965"></a>00965   <span class="keywordtype">int</span> rc = -1;
<a name="l00966"></a>00966 
<a name="l00967"></a>00967   <span class="comment">/* This function handles ALL types of LSAs, not only opaque ones. */</span>
<a name="l00968"></a>00968   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00969"></a>00969     <span class="keywordflow">if</span> (functab-&gt;del_lsa_hook != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00970"></a>00970       <span class="keywordflow">if</span> ((* functab-&gt;del_lsa_hook)(lsa) != 0)
<a name="l00971"></a>00971         <span class="keywordflow">goto</span> out;
<a name="l00972"></a>00972   rc = 0;
<a name="l00973"></a>00973 out:
<a name="l00974"></a>00974   <span class="keywordflow">return</span> rc;
<a name="l00975"></a>00975 }
<a name="l00976"></a>00976 
<a name="l00977"></a>00977 <span class="comment">/* 08/23/2011 yic +n */</span>
<a name="l00978"></a>00978 <span class="keyword">static</span> <span class="keywordtype">void</span> opaque_router_routing_table_change_callback(<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *funclist,
<a name="l00979"></a>00979         <span class="keyword">struct</span> in_addr router_id, <span class="keyword">struct</span> <a class="code" href="structroute__node.html">route_node</a> *rn)
<a name="l00980"></a>00980 {
<a name="l00981"></a>00981     <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00982"></a>00982     <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l00983"></a>00983 
<a name="l00984"></a>00984     <span class="comment">/* This function handles ALL types of LSAs, not only opaque ones. */</span>
<a name="l00985"></a>00985     <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (funclist, node, nnode, functab))
<a name="l00986"></a>00986         <span class="keywordflow">if</span> (functab-&gt;router_routing_table_change_hook != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00987"></a>00987             (* functab-&gt;router_routing_table_change_hook)(router_id, rn);
<a name="l00988"></a>00988 }
<a name="l00989"></a>00989 
<a name="l00990"></a>00990 <span class="comment">/*------------------------------------------------------------------------*</span>
<a name="l00991"></a>00991 <span class="comment"> * Followings are glue functions to call Opaque-LSA specific processing.</span>
<a name="l00992"></a>00992 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l00993"></a>00993 
<a name="l00994"></a>00994 <span class="keywordtype">int</span>
<a name="l00995"></a>00995 <a class="code" href="ospf__opaque_8h.html#a815a52d8eba68484eac70aa5c63e41fa">ospf_opaque_new_if</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00996"></a>00996 {
<a name="l00997"></a>00997   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l00998"></a>00998   <span class="keywordtype">int</span> rc = -1;
<a name="l00999"></a>00999 
<a name="l01000"></a>01000   funclist = ospf_opaque_wildcard_funclist;
<a name="l01001"></a>01001   <span class="keywordflow">if</span> (opaque_lsa_new_if_callback (funclist, ifp) != 0)
<a name="l01002"></a>01002     <span class="keywordflow">goto</span> out;
<a name="l01003"></a>01003 
<a name="l01004"></a>01004   funclist = ospf_opaque_type9_funclist;
<a name="l01005"></a>01005   <span class="keywordflow">if</span> (opaque_lsa_new_if_callback (funclist, ifp) != 0)
<a name="l01006"></a>01006     <span class="keywordflow">goto</span> out;
<a name="l01007"></a>01007 
<a name="l01008"></a>01008   funclist = ospf_opaque_type10_funclist;
<a name="l01009"></a>01009   <span class="keywordflow">if</span> (opaque_lsa_new_if_callback (funclist, ifp) != 0)
<a name="l01010"></a>01010     <span class="keywordflow">goto</span> out;
<a name="l01011"></a>01011 
<a name="l01012"></a>01012   funclist = ospf_opaque_type11_funclist;
<a name="l01013"></a>01013   <span class="keywordflow">if</span> (opaque_lsa_new_if_callback (funclist, ifp) != 0)
<a name="l01014"></a>01014     <span class="keywordflow">goto</span> out;
<a name="l01015"></a>01015 
<a name="l01016"></a>01016   rc = 0;
<a name="l01017"></a>01017 out:
<a name="l01018"></a>01018   <span class="keywordflow">return</span> rc;
<a name="l01019"></a>01019 }
<a name="l01020"></a>01020 
<a name="l01021"></a>01021 <span class="keywordtype">int</span>
<a name="l01022"></a>01022 <a class="code" href="ospf__opaque_8h.html#af51358fa8ab4c4ec7ad70a124a7d403c">ospf_opaque_del_if</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l01023"></a>01023 {
<a name="l01024"></a>01024   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l01025"></a>01025   <span class="keywordtype">int</span> rc = -1;
<a name="l01026"></a>01026 
<a name="l01027"></a>01027   funclist = ospf_opaque_wildcard_funclist;
<a name="l01028"></a>01028   <span class="keywordflow">if</span> (opaque_lsa_del_if_callback (funclist, ifp) != 0)
<a name="l01029"></a>01029     <span class="keywordflow">goto</span> out;
<a name="l01030"></a>01030 
<a name="l01031"></a>01031   funclist = ospf_opaque_type9_funclist;
<a name="l01032"></a>01032   <span class="keywordflow">if</span> (opaque_lsa_del_if_callback (funclist, ifp) != 0)
<a name="l01033"></a>01033     <span class="keywordflow">goto</span> out;
<a name="l01034"></a>01034 
<a name="l01035"></a>01035   funclist = ospf_opaque_type10_funclist;
<a name="l01036"></a>01036   <span class="keywordflow">if</span> (opaque_lsa_del_if_callback (funclist, ifp) != 0)
<a name="l01037"></a>01037     <span class="keywordflow">goto</span> out;
<a name="l01038"></a>01038 
<a name="l01039"></a>01039   funclist = ospf_opaque_type11_funclist;
<a name="l01040"></a>01040   <span class="keywordflow">if</span> (opaque_lsa_del_if_callback (funclist, ifp) != 0)
<a name="l01041"></a>01041     <span class="keywordflow">goto</span> out;
<a name="l01042"></a>01042 
<a name="l01043"></a>01043   rc = 0;
<a name="l01044"></a>01044 out:
<a name="l01045"></a>01045   <span class="keywordflow">return</span> rc;
<a name="l01046"></a>01046 }
<a name="l01047"></a>01047 
<a name="l01048"></a>01048 <span class="keywordtype">void</span>
<a name="l01049"></a>01049 <a class="code" href="ospf__opaque_8h.html#affdc5ee3a6fab6f28d76b6a3d087e834">ospf_opaque_ism_change</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keywordtype">int</span> old_status)
<a name="l01050"></a>01050 {
<a name="l01051"></a>01051   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l01052"></a>01052 
<a name="l01053"></a>01053   funclist = ospf_opaque_wildcard_funclist;
<a name="l01054"></a>01054   opaque_lsa_ism_change_callback (funclist, oi, old_status);
<a name="l01055"></a>01055 
<a name="l01056"></a>01056   funclist = ospf_opaque_type9_funclist;
<a name="l01057"></a>01057   opaque_lsa_ism_change_callback (funclist, oi, old_status);
<a name="l01058"></a>01058 
<a name="l01059"></a>01059   funclist = ospf_opaque_type10_funclist;
<a name="l01060"></a>01060   opaque_lsa_ism_change_callback (funclist, oi, old_status);
<a name="l01061"></a>01061 
<a name="l01062"></a>01062   funclist = ospf_opaque_type11_funclist;
<a name="l01063"></a>01063   opaque_lsa_ism_change_callback (funclist, oi, old_status);
<a name="l01064"></a>01064 
<a name="l01065"></a>01065   <span class="keywordflow">return</span>;
<a name="l01066"></a>01066 }
<a name="l01067"></a>01067 
<a name="l01068"></a>01068 <span class="keywordtype">void</span>
<a name="l01069"></a>01069 <a class="code" href="ospf__opaque_8h.html#a2349d620cc402245a1e47d7ce5b4fc2e">ospf_opaque_nsm_change</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keywordtype">int</span> old_state)
<a name="l01070"></a>01070 {
<a name="l01071"></a>01071   <span class="keyword">struct </span>ospf *top;
<a name="l01072"></a>01072   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l01073"></a>01073 
<a name="l01074"></a>01074   <span class="keywordflow">if</span> ((top = <a class="code" href="ospf__opaque_8h.html#acf470147baa1a2b6de79fe6e00b671af">oi_to_top</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01075"></a>01075     <span class="keywordflow">goto</span> out;
<a name="l01076"></a>01076 
<a name="l01077"></a>01077   <span class="keywordflow">if</span> (old_state != <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a> &amp;&amp; nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> == <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>)
<a name="l01078"></a>01078     {
<a name="l01079"></a>01079       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a>, <a class="code" href="ospfd_8h.html#a3273018c458aa48440274e21e935c85f">OSPF_OPTION_O</a>))
<a name="l01080"></a>01080         {
<a name="l01081"></a>01081           <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (top-&gt;opaque, OPAQUE_OPERATION_READY_BIT))
<a name="l01082"></a>01082             {
<a name="l01083"></a>01083               <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01084"></a>01084                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Opaque-LSA: Now get operational!&quot;</span>);
<a name="l01085"></a>01085 
<a name="l01086"></a>01086               <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (top-&gt;opaque, OPAQUE_OPERATION_READY_BIT);
<a name="l01087"></a>01087             }
<a name="l01088"></a>01088 
<a name="l01089"></a>01089           <a class="code" href="ospf__opaque_8h.html#a50c104d86adbf7073dbce6f9e12f3f1f">ospf_opaque_lsa_originate_schedule</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01090"></a>01090         }
<a name="l01091"></a>01091     }
<a name="l01092"></a>01092   <span class="keywordflow">else</span>
<a name="l01093"></a>01093   <span class="keywordflow">if</span> (old_state == <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a> &amp;&amp; nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> != <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>)
<a name="l01094"></a>01094     {
<a name="l01095"></a>01095 <span class="preprocessor">#ifdef NOTYET</span>
<a name="l01096"></a>01096 <span class="preprocessor"></span>      <span class="comment">/*</span>
<a name="l01097"></a>01097 <span class="comment">       * If no more opaque-capable full-state neighbor remains in the</span>
<a name="l01098"></a>01098 <span class="comment">       * flooding scope which corresponds to Opaque-LSA type, periodic</span>
<a name="l01099"></a>01099 <span class="comment">       * LS flooding should be stopped.</span>
<a name="l01100"></a>01100 <span class="comment">       */</span>
<a name="l01101"></a>01101 <span class="preprocessor">#endif </span><span class="comment">/* NOTYET */</span>
<a name="l01102"></a>01102       ;
<a name="l01103"></a>01103     }
<a name="l01104"></a>01104 
<a name="l01105"></a>01105   funclist = ospf_opaque_wildcard_funclist;
<a name="l01106"></a>01106   opaque_lsa_nsm_change_callback (funclist, nbr, old_state);
<a name="l01107"></a>01107 
<a name="l01108"></a>01108   funclist = ospf_opaque_type9_funclist;
<a name="l01109"></a>01109   opaque_lsa_nsm_change_callback (funclist, nbr, old_state);
<a name="l01110"></a>01110 
<a name="l01111"></a>01111   funclist = ospf_opaque_type10_funclist;
<a name="l01112"></a>01112   opaque_lsa_nsm_change_callback (funclist, nbr, old_state);
<a name="l01113"></a>01113 
<a name="l01114"></a>01114   funclist = ospf_opaque_type11_funclist;
<a name="l01115"></a>01115   opaque_lsa_nsm_change_callback (funclist, nbr, old_state);
<a name="l01116"></a>01116 
<a name="l01117"></a>01117 out:
<a name="l01118"></a>01118   <span class="keywordflow">return</span>;
<a name="l01119"></a>01119 }
<a name="l01120"></a>01120 
<a name="l01121"></a>01121 <span class="keywordtype">void</span>
<a name="l01122"></a>01122 <a class="code" href="ospf__opaque_8h.html#aec4d42e44af3bf8e88dc79ee07a6cace">ospf_opaque_config_write_router</a> (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> ospf *ospf)
<a name="l01123"></a>01123 {
<a name="l01124"></a>01124   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l01125"></a>01125 
<a name="l01126"></a>01126   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>))
<a name="l01127"></a>01127     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; capability opaque%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01128"></a>01128 
<a name="l01129"></a>01129   funclist = ospf_opaque_wildcard_funclist;
<a name="l01130"></a>01130   opaque_lsa_config_write_router_callback (funclist, vty);
<a name="l01131"></a>01131 
<a name="l01132"></a>01132   funclist = ospf_opaque_type9_funclist;
<a name="l01133"></a>01133   opaque_lsa_config_write_router_callback (funclist, vty);
<a name="l01134"></a>01134 
<a name="l01135"></a>01135   funclist = ospf_opaque_type10_funclist;
<a name="l01136"></a>01136   opaque_lsa_config_write_router_callback (funclist, vty);
<a name="l01137"></a>01137 
<a name="l01138"></a>01138   funclist = ospf_opaque_type11_funclist;
<a name="l01139"></a>01139   opaque_lsa_config_write_router_callback (funclist, vty);
<a name="l01140"></a>01140 
<a name="l01141"></a>01141   <span class="keywordflow">return</span>;
<a name="l01142"></a>01142 }
<a name="l01143"></a>01143 
<a name="l01144"></a>01144 <span class="keywordtype">void</span>
<a name="l01145"></a>01145 <a class="code" href="ospf__opaque_8h.html#a039de9d0b968bd310f91c8dfaedae8b4">ospf_opaque_config_write_if</a> (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l01146"></a>01146 {
<a name="l01147"></a>01147   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l01148"></a>01148 
<a name="l01149"></a>01149   funclist = ospf_opaque_wildcard_funclist;
<a name="l01150"></a>01150   opaque_lsa_config_write_if_callback (funclist, vty, ifp);
<a name="l01151"></a>01151 
<a name="l01152"></a>01152   funclist = ospf_opaque_type9_funclist;
<a name="l01153"></a>01153   opaque_lsa_config_write_if_callback (funclist, vty, ifp);
<a name="l01154"></a>01154 
<a name="l01155"></a>01155   funclist = ospf_opaque_type10_funclist;
<a name="l01156"></a>01156   opaque_lsa_config_write_if_callback (funclist, vty, ifp);
<a name="l01157"></a>01157 
<a name="l01158"></a>01158   funclist = ospf_opaque_type11_funclist;
<a name="l01159"></a>01159   opaque_lsa_config_write_if_callback (funclist, vty, ifp);
<a name="l01160"></a>01160 
<a name="l01161"></a>01161   <span class="keywordflow">return</span>;
<a name="l01162"></a>01162 }
<a name="l01163"></a>01163 
<a name="l01164"></a>01164 <span class="keywordtype">void</span>
<a name="l01165"></a>01165 <a class="code" href="ospf__opaque_8h.html#addea18cefc8b18f0261fc8facd78be75">ospf_opaque_config_write_debug</a> (<span class="keyword">struct</span> vty *vty)
<a name="l01166"></a>01166 {
<a name="l01167"></a>01167   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l01168"></a>01168 
<a name="l01169"></a>01169   funclist = ospf_opaque_wildcard_funclist;
<a name="l01170"></a>01170   opaque_lsa_config_write_debug_callback (funclist, vty);
<a name="l01171"></a>01171 
<a name="l01172"></a>01172   funclist = ospf_opaque_type9_funclist;
<a name="l01173"></a>01173   opaque_lsa_config_write_debug_callback (funclist, vty);
<a name="l01174"></a>01174 
<a name="l01175"></a>01175   funclist = ospf_opaque_type10_funclist;
<a name="l01176"></a>01176   opaque_lsa_config_write_debug_callback (funclist, vty);
<a name="l01177"></a>01177 
<a name="l01178"></a>01178   funclist = ospf_opaque_type11_funclist;
<a name="l01179"></a>01179   opaque_lsa_config_write_debug_callback (funclist, vty);
<a name="l01180"></a>01180 
<a name="l01181"></a>01181   <span class="keywordflow">return</span>;
<a name="l01182"></a>01182 }
<a name="l01183"></a>01183 
<a name="l01184"></a>01184 <span class="keywordtype">void</span>
<a name="l01185"></a>01185 <a class="code" href="ospf__opaque_8h.html#a79497924b589025bb93b611388ac70e1">show_opaque_info_detail</a> (<span class="keyword">struct</span> vty *vty, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l01186"></a>01186 {
<a name="l01187"></a>01187   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
<a name="l01188"></a>01188   u_int32_t lsid = ntohl (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr);
<a name="l01189"></a>01189   u_char    opaque_type = <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (lsid);
<a name="l01190"></a>01190   u_int32_t opaque_id = <a class="code" href="ospf__opaque_8h.html#a44dd18f87765dd2c8b6003c5efd099df">GET_OPAQUE_ID</a> (lsid);
<a name="l01191"></a>01191   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l01192"></a>01192 
<a name="l01193"></a>01193   <span class="comment">/* Switch output functionality by vty address. */</span>
<a name="l01194"></a>01194   <span class="keywordflow">if</span> (vty != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01195"></a>01195     {
<a name="l01196"></a>01196       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Opaque-Type %u (%s)%s&quot;</span>, opaque_type,
<a name="l01197"></a>01197            ospf_opaque_type_name (opaque_type), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01198"></a>01198       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Opaque-ID   0x%x%s&quot;</span>, opaque_id, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01199"></a>01199 
<a name="l01200"></a>01200       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Opaque-Info: %u octets of data%s%s&quot;</span>,
<a name="l01201"></a>01201                ntohs (lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>) - <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>,
<a name="l01202"></a>01202                <a class="code" href="ospf__opaque_8h.html#adcab14cba9d8bf4a492ee197fb0b26a9">VALID_OPAQUE_INFO_LEN</a>(lsah) ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;(Invalid length?)&quot;</span>,
<a name="l01203"></a>01203                <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01204"></a>01204     }
<a name="l01205"></a>01205   <span class="keywordflow">else</span>
<a name="l01206"></a>01206     {
<a name="l01207"></a>01207       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    Opaque-Type %u (%s)&quot;</span>, opaque_type,
<a name="l01208"></a>01208          ospf_opaque_type_name (opaque_type));
<a name="l01209"></a>01209       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    Opaque-ID   0x%x&quot;</span>, opaque_id);
<a name="l01210"></a>01210 
<a name="l01211"></a>01211       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    Opaque-Info: %u octets of data%s&quot;</span>,
<a name="l01212"></a>01212                ntohs (lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>) - <a class="code" href="ospf__lsa_8h.html#a7cf423b6ef1c2152b96c88e36593bec4">OSPF_LSA_HEADER_SIZE</a>,
<a name="l01213"></a>01213                <a class="code" href="ospf__opaque_8h.html#adcab14cba9d8bf4a492ee197fb0b26a9">VALID_OPAQUE_INFO_LEN</a>(lsah) ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;(Invalid length?)&quot;</span>);
<a name="l01214"></a>01214     }
<a name="l01215"></a>01215 
<a name="l01216"></a>01216   <span class="comment">/* Call individual output functions. */</span>
<a name="l01217"></a>01217   <span class="keywordflow">if</span> ((functab = ospf_opaque_functab_lookup (lsa)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01218"></a>01218     <span class="keywordflow">if</span> (functab-&gt;show_opaque_info != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01219"></a>01219       (* functab-&gt;show_opaque_info)(vty, lsa);
<a name="l01220"></a>01220 
<a name="l01221"></a>01221   <span class="keywordflow">return</span>;
<a name="l01222"></a>01222 }
<a name="l01223"></a>01223 
<a name="l01224"></a>01224 <span class="keywordtype">void</span>
<a name="l01225"></a>01225 <a class="code" href="ospf__opaque_8h.html#ab1d29c5d2436c971e50355af688a2f78">ospf_opaque_lsa_dump</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, u_int16_t <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)
<a name="l01226"></a>01226 {
<a name="l01227"></a>01227   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> lsa;
<a name="l01228"></a>01228 
<a name="l01229"></a>01229   lsa.<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a> = (<span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *) <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (s);
<a name="l01230"></a>01230   <a class="code" href="ospf__opaque_8h.html#a79497924b589025bb93b611388ac70e1">show_opaque_info_detail</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;lsa);
<a name="l01231"></a>01231   <span class="keywordflow">return</span>;
<a name="l01232"></a>01232 }
<a name="l01233"></a>01233 
<a name="l01234"></a>01234 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01235"></a>01235 ospf_opaque_lsa_install_hook (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l01236"></a>01236 {
<a name="l01237"></a>01237   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l01238"></a>01238   <span class="keywordtype">int</span> rc = -1;
<a name="l01239"></a>01239 
<a name="l01240"></a>01240   <span class="comment">/*</span>
<a name="l01241"></a>01241 <span class="comment">   * Some Opaque-LSA user may want to monitor every LSA installation</span>
<a name="l01242"></a>01242 <span class="comment">   * into the LSDB, regardless with target LSA type.</span>
<a name="l01243"></a>01243 <span class="comment">   */</span>
<a name="l01244"></a>01244   funclist = ospf_opaque_wildcard_funclist;
<a name="l01245"></a>01245   <span class="keywordflow">if</span> (new_lsa_callback (funclist, lsa) != 0)
<a name="l01246"></a>01246     <span class="keywordflow">goto</span> out;
<a name="l01247"></a>01247 
<a name="l01248"></a>01248   funclist = ospf_opaque_type9_funclist;
<a name="l01249"></a>01249   <span class="keywordflow">if</span> (new_lsa_callback (funclist, lsa) != 0)
<a name="l01250"></a>01250     <span class="keywordflow">goto</span> out;
<a name="l01251"></a>01251 
<a name="l01252"></a>01252   funclist = ospf_opaque_type10_funclist;
<a name="l01253"></a>01253   <span class="keywordflow">if</span> (new_lsa_callback (funclist, lsa) != 0)
<a name="l01254"></a>01254     <span class="keywordflow">goto</span> out;
<a name="l01255"></a>01255 
<a name="l01256"></a>01256   funclist = ospf_opaque_type11_funclist;
<a name="l01257"></a>01257   <span class="keywordflow">if</span> (new_lsa_callback (funclist, lsa) != 0)
<a name="l01258"></a>01258     <span class="keywordflow">goto</span> out;
<a name="l01259"></a>01259 
<a name="l01260"></a>01260   rc = 0;
<a name="l01261"></a>01261 out:
<a name="l01262"></a>01262   <span class="keywordflow">return</span> rc;
<a name="l01263"></a>01263 }
<a name="l01264"></a>01264 
<a name="l01265"></a>01265 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01266"></a>01266 ospf_opaque_lsa_delete_hook (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l01267"></a>01267 {
<a name="l01268"></a>01268   <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l01269"></a>01269   <span class="keywordtype">int</span> rc = -1;
<a name="l01270"></a>01270 
<a name="l01271"></a>01271   <span class="comment">/*</span>
<a name="l01272"></a>01272 <span class="comment">   * Some Opaque-LSA user may want to monitor every LSA deletion</span>
<a name="l01273"></a>01273 <span class="comment">   * from the LSDB, regardless with target LSA type.</span>
<a name="l01274"></a>01274 <span class="comment">   */</span>
<a name="l01275"></a>01275   funclist = ospf_opaque_wildcard_funclist;
<a name="l01276"></a>01276   <span class="keywordflow">if</span> (del_lsa_callback (funclist, lsa) != 0)
<a name="l01277"></a>01277     <span class="keywordflow">goto</span> out;
<a name="l01278"></a>01278 
<a name="l01279"></a>01279   funclist = ospf_opaque_type9_funclist;
<a name="l01280"></a>01280   <span class="keywordflow">if</span> (del_lsa_callback (funclist, lsa) != 0)
<a name="l01281"></a>01281     <span class="keywordflow">goto</span> out;
<a name="l01282"></a>01282 
<a name="l01283"></a>01283   funclist = ospf_opaque_type10_funclist;
<a name="l01284"></a>01284   <span class="keywordflow">if</span> (del_lsa_callback (funclist, lsa) != 0)
<a name="l01285"></a>01285     <span class="keywordflow">goto</span> out;
<a name="l01286"></a>01286 
<a name="l01287"></a>01287   funclist = ospf_opaque_type11_funclist;
<a name="l01288"></a>01288   <span class="keywordflow">if</span> (del_lsa_callback (funclist, lsa) != 0)
<a name="l01289"></a>01289     <span class="keywordflow">goto</span> out;
<a name="l01290"></a>01290 
<a name="l01291"></a>01291   rc = 0;
<a name="l01292"></a>01292 out:
<a name="l01293"></a>01293   <span class="keywordflow">return</span> rc;
<a name="l01294"></a>01294 }
<a name="l01295"></a>01295 
<a name="l01296"></a>01296 <span class="comment">/* 08/23/2011 yic +n */</span>
<a name="l01297"></a>01297 <span class="keywordtype">void</span> <a class="code" href="ospf__opaque_8h.html#a58d83f276124716d11804cd62e77985a">ospf_opaque_router_routing_table_change</a>(<span class="keyword">struct</span> in_addr router_id, <span class="keyword">struct</span> <a class="code" href="structroute__node.html">route_node</a> *rn)
<a name="l01298"></a>01298 {
<a name="l01299"></a>01299     <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *funclist;
<a name="l01300"></a>01300 
<a name="l01301"></a>01301     funclist = ospf_opaque_wildcard_funclist;
<a name="l01302"></a>01302     opaque_router_routing_table_change_callback(funclist, router_id, rn);
<a name="l01303"></a>01303 
<a name="l01304"></a>01304     funclist = ospf_opaque_type9_funclist;
<a name="l01305"></a>01305     opaque_router_routing_table_change_callback(funclist, router_id, rn);
<a name="l01306"></a>01306 
<a name="l01307"></a>01307     funclist = ospf_opaque_type10_funclist;
<a name="l01308"></a>01308     opaque_router_routing_table_change_callback(funclist, router_id, rn);
<a name="l01309"></a>01309 
<a name="l01310"></a>01310     funclist = ospf_opaque_type11_funclist;
<a name="l01311"></a>01311     opaque_router_routing_table_change_callback(funclist, router_id, rn);
<a name="l01312"></a>01312 }
<a name="l01313"></a>01313 
<a name="l01314"></a>01314 <span class="comment">/*------------------------------------------------------------------------*</span>
<a name="l01315"></a>01315 <span class="comment"> * Followings are Opaque-LSA origination/refresh management functions.</span>
<a name="l01316"></a>01316 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l01317"></a>01317 
<a name="l01318"></a>01318 <span class="keyword">static</span> <span class="keywordtype">int</span> ospf_opaque_type9_lsa_originate (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>);
<a name="l01319"></a>01319 <span class="keyword">static</span> <span class="keywordtype">int</span> ospf_opaque_type10_lsa_originate (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>);
<a name="l01320"></a>01320 <span class="keyword">static</span> <span class="keywordtype">int</span> ospf_opaque_type11_lsa_originate (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>);
<a name="l01321"></a>01321 <span class="keyword">static</span> <span class="keywordtype">void</span> ospf_opaque_lsa_reoriginate_resume (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *listtop, <span class="keywordtype">void</span> *arg);
<a name="l01322"></a>01322 
<a name="l01323"></a>01323 <span class="keywordtype">void</span>
<a name="l01324"></a>01324 <a class="code" href="ospf__opaque_8h.html#a50c104d86adbf7073dbce6f9e12f3f1f">ospf_opaque_lsa_originate_schedule</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keywordtype">int</span> *delay0)
<a name="l01325"></a>01325 {
<a name="l01326"></a>01326   <span class="keyword">struct </span>ospf *top;
<a name="l01327"></a>01327   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l01328"></a>01328   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01329"></a>01329   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l01330"></a>01330   <span class="keywordtype">int</span> delay = 0;
<a name="l01331"></a>01331 
<a name="l01332"></a>01332   <span class="keywordflow">if</span> ((top = <a class="code" href="ospf__opaque_8h.html#acf470147baa1a2b6de79fe6e00b671af">oi_to_top</a> (oi)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || (area = oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01333"></a>01333     {
<a name="l01334"></a>01334       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_originate_schedule: Invalid argument?&quot;</span>);
<a name="l01335"></a>01335       <span class="keywordflow">goto</span> out;
<a name="l01336"></a>01336     }
<a name="l01337"></a>01337 
<a name="l01338"></a>01338   <span class="comment">/* It may not a right time to schedule origination now. */</span>
<a name="l01339"></a>01339   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (top-&gt;opaque, OPAQUE_OPERATION_READY_BIT))
<a name="l01340"></a>01340     {
<a name="l01341"></a>01341       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01342"></a>01342         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_originate_schedule: Not operational.&quot;</span>);
<a name="l01343"></a>01343       <span class="keywordflow">goto</span> out; <span class="comment">/* This is not an error. */</span>
<a name="l01344"></a>01344     }
<a name="l01345"></a>01345   <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#a22f5fbb8d8c29a987847ca54159bb24e">IS_OPAQUE_LSA_ORIGINATION_BLOCKED</a> (top-&gt;opaque))
<a name="l01346"></a>01346     {
<a name="l01347"></a>01347       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01348"></a>01348         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_originate_schedule: Under blockade.&quot;</span>);
<a name="l01349"></a>01349       <span class="keywordflow">goto</span> out; <span class="comment">/* This is not an error, too. */</span>
<a name="l01350"></a>01350     }
<a name="l01351"></a>01351 
<a name="l01352"></a>01352   <span class="keywordflow">if</span> (delay0 != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01353"></a>01353     delay = *delay0;
<a name="l01354"></a>01354 
<a name="l01355"></a>01355   <span class="comment">/*</span>
<a name="l01356"></a>01356 <span class="comment">   * There might be some entries that have been waiting for triggering</span>
<a name="l01357"></a>01357 <span class="comment">   * of per opaque-type re-origination get resumed.</span>
<a name="l01358"></a>01358 <span class="comment">   */</span>
<a name="l01359"></a>01359   ospf_opaque_lsa_reoriginate_resume (  oi-&gt;opaque_lsa_self, (<span class="keywordtype">void</span> *)   oi);
<a name="l01360"></a>01360   ospf_opaque_lsa_reoriginate_resume (area-&gt;opaque_lsa_self, (<span class="keywordtype">void</span> *) area);
<a name="l01361"></a>01361   ospf_opaque_lsa_reoriginate_resume ( top-&gt;opaque_lsa_self, (<span class="keywordtype">void</span> *)  top);
<a name="l01362"></a>01362 
<a name="l01363"></a>01363   <span class="comment">/*</span>
<a name="l01364"></a>01364 <span class="comment">   * Now, schedule origination of all Opaque-LSAs per opaque-type.</span>
<a name="l01365"></a>01365 <span class="comment">   */</span>
<a name="l01366"></a>01366   <span class="keywordflow">if</span> (! <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (ospf_opaque_type9_funclist)
<a name="l01367"></a>01367   &amp;&amp;    <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (oi-&gt;opaque_lsa_self)
<a name="l01368"></a>01368   &amp;&amp;    oi-&gt;t_opaque_lsa_self == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01369"></a>01369     {
<a name="l01370"></a>01370       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01371"></a>01371         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Schedule Type-9 Opaque-LSA origination in %d sec later.&quot;</span>, delay);
<a name="l01372"></a>01372       oi-&gt;t_opaque_lsa_self =
<a name="l01373"></a>01373     <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, ospf_opaque_type9_lsa_originate, oi, delay);
<a name="l01374"></a>01374       delay += <a class="code" href="ospfd_8h.html#a8e517a858d0da0eb3b4fcf8c06391117">OSPF_MIN_LS_INTERVAL</a>;
<a name="l01375"></a>01375     }
<a name="l01376"></a>01376 
<a name="l01377"></a>01377   <span class="keywordflow">if</span> (! <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (ospf_opaque_type10_funclist)
<a name="l01378"></a>01378   &amp;&amp;    <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (area-&gt;opaque_lsa_self)
<a name="l01379"></a>01379   &amp;&amp;    area-&gt;t_opaque_lsa_self == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01380"></a>01380     {
<a name="l01381"></a>01381       <span class="comment">/*</span>
<a name="l01382"></a>01382 <span class="comment">       * One AREA may contain multiple OIs, but above 2nd and 3rd</span>
<a name="l01383"></a>01383 <span class="comment">       * conditions prevent from scheduling the originate function</span>
<a name="l01384"></a>01384 <span class="comment">       * again and again.</span>
<a name="l01385"></a>01385 <span class="comment">       */</span>
<a name="l01386"></a>01386       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01387"></a>01387         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Schedule Type-10 Opaque-LSA origination in %d sec later.&quot;</span>, delay);
<a name="l01388"></a>01388       area-&gt;t_opaque_lsa_self =
<a name="l01389"></a>01389         <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, ospf_opaque_type10_lsa_originate,
<a name="l01390"></a>01390                           area, delay);
<a name="l01391"></a>01391       delay += <a class="code" href="ospfd_8h.html#a8e517a858d0da0eb3b4fcf8c06391117">OSPF_MIN_LS_INTERVAL</a>;
<a name="l01392"></a>01392     }
<a name="l01393"></a>01393 
<a name="l01394"></a>01394   <span class="keywordflow">if</span> (! <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (ospf_opaque_type11_funclist)
<a name="l01395"></a>01395   &amp;&amp;    <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (top-&gt;opaque_lsa_self)
<a name="l01396"></a>01396   &amp;&amp;    top-&gt;t_opaque_lsa_self == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01397"></a>01397     {
<a name="l01398"></a>01398       <span class="comment">/*</span>
<a name="l01399"></a>01399 <span class="comment">       * One OSPF may contain multiple AREAs, but above 2nd and 3rd</span>
<a name="l01400"></a>01400 <span class="comment">       * conditions prevent from scheduling the originate function</span>
<a name="l01401"></a>01401 <span class="comment">       * again and again.</span>
<a name="l01402"></a>01402 <span class="comment">       */</span>
<a name="l01403"></a>01403       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01404"></a>01404         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Schedule Type-11 Opaque-LSA origination in %d sec later.&quot;</span>, delay);
<a name="l01405"></a>01405       top-&gt;t_opaque_lsa_self =
<a name="l01406"></a>01406         <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, ospf_opaque_type11_lsa_originate,
<a name="l01407"></a>01407                           top, delay);
<a name="l01408"></a>01408       delay += <a class="code" href="ospfd_8h.html#a8e517a858d0da0eb3b4fcf8c06391117">OSPF_MIN_LS_INTERVAL</a>;
<a name="l01409"></a>01409     }
<a name="l01410"></a>01410 
<a name="l01411"></a>01411   <span class="comment">/*</span>
<a name="l01412"></a>01412 <span class="comment">   * Following section treats a special situation that this node&#39;s</span>
<a name="l01413"></a>01413 <span class="comment">   * opaque capability has changed as &quot;ON -&gt; OFF -&gt; ON&quot;.</span>
<a name="l01414"></a>01414 <span class="comment">   */</span>
<a name="l01415"></a>01415   <span class="keywordflow">if</span> (! <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (ospf_opaque_type9_funclist)
<a name="l01416"></a>01416   &amp;&amp;  ! <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (oi-&gt;opaque_lsa_self))
<a name="l01417"></a>01417     {
<a name="l01418"></a>01418       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (oi-&gt;opaque_lsa_self, node, nnode, oipt))
<a name="l01419"></a>01419         {
<a name="l01420"></a>01420       <span class="comment">/* </span>
<a name="l01421"></a>01421 <span class="comment">       * removed the test for</span>
<a name="l01422"></a>01422 <span class="comment">       *   (! list_isempty (oipt-&gt;id_list))   * Handler is already active. *</span>
<a name="l01423"></a>01423 <span class="comment">           * because opaque cababilities ON -&gt; OFF -&gt; ON result in list_isempty (oipt-&gt;id_list)</span>
<a name="l01424"></a>01424 <span class="comment">       * not being empty.</span>
<a name="l01425"></a>01425 <span class="comment">       */</span>
<a name="l01426"></a>01426           <span class="keywordflow">if</span> (oipt-&gt;t_opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> <span class="comment">/* Waiting for a thread call. */</span>
<a name="l01427"></a>01427               || oipt-&gt;status == PROC_SUSPEND)   <span class="comment">/* Cannot originate now. */</span>
<a name="l01428"></a>01428               <span class="keywordflow">continue</span>;
<a name="l01429"></a>01429 
<a name="l01430"></a>01430           <a class="code" href="ospf__opaque_8h.html#a8051c5bd74e77728c6ad70f717ce5100">ospf_opaque_lsa_reoriginate_schedule</a> ((<span class="keywordtype">void</span> *) oi,
<a name="l01431"></a>01431             <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>, oipt-&gt;opaque_type);
<a name="l01432"></a>01432         }
<a name="l01433"></a>01433     }
<a name="l01434"></a>01434 
<a name="l01435"></a>01435   <span class="keywordflow">if</span> (! <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (ospf_opaque_type10_funclist)
<a name="l01436"></a>01436   &amp;&amp;  ! <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (area-&gt;opaque_lsa_self))
<a name="l01437"></a>01437     {
<a name="l01438"></a>01438       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (area-&gt;opaque_lsa_self, node, nnode, oipt))
<a name="l01439"></a>01439         {
<a name="l01440"></a>01440       <span class="comment">/* </span>
<a name="l01441"></a>01441 <span class="comment">       * removed the test for</span>
<a name="l01442"></a>01442 <span class="comment">       *   (! list_isempty (oipt-&gt;id_list))   * Handler is already active. *</span>
<a name="l01443"></a>01443 <span class="comment">           * because opaque cababilities ON -&gt; OFF -&gt; ON result in list_isempty (oipt-&gt;id_list)</span>
<a name="l01444"></a>01444 <span class="comment">       * not being empty.</span>
<a name="l01445"></a>01445 <span class="comment">       */</span>
<a name="l01446"></a>01446           <span class="keywordflow">if</span> (oipt-&gt;t_opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> <span class="comment">/* Waiting for a thread call. */</span>
<a name="l01447"></a>01447               || oipt-&gt;status == PROC_SUSPEND)   <span class="comment">/* Cannot originate now. */</span>
<a name="l01448"></a>01448             <span class="keywordflow">continue</span>;
<a name="l01449"></a>01449 
<a name="l01450"></a>01450           <a class="code" href="ospf__opaque_8h.html#a8051c5bd74e77728c6ad70f717ce5100">ospf_opaque_lsa_reoriginate_schedule</a> ((<span class="keywordtype">void</span> *) area,
<a name="l01451"></a>01451             <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>, oipt-&gt;opaque_type);
<a name="l01452"></a>01452         }
<a name="l01453"></a>01453     }
<a name="l01454"></a>01454 
<a name="l01455"></a>01455   <span class="keywordflow">if</span> (! <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (ospf_opaque_type11_funclist)
<a name="l01456"></a>01456   &amp;&amp;  ! <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (top-&gt;opaque_lsa_self))
<a name="l01457"></a>01457     {
<a name="l01458"></a>01458       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (top-&gt;opaque_lsa_self, node, nnode, oipt))
<a name="l01459"></a>01459         {
<a name="l01460"></a>01460       <span class="comment">/* </span>
<a name="l01461"></a>01461 <span class="comment">       * removed the test for</span>
<a name="l01462"></a>01462 <span class="comment">       *   (! list_isempty (oipt-&gt;id_list))   * Handler is already active. *</span>
<a name="l01463"></a>01463 <span class="comment">           * because opaque cababilities ON -&gt; OFF -&gt; ON result in list_isempty (oipt-&gt;id_list)</span>
<a name="l01464"></a>01464 <span class="comment">       * not being empty.</span>
<a name="l01465"></a>01465 <span class="comment">       */</span>
<a name="l01466"></a>01466           <span class="keywordflow">if</span> (oipt-&gt;t_opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> <span class="comment">/* Waiting for a thread call. */</span>
<a name="l01467"></a>01467               || oipt-&gt;status == PROC_SUSPEND)   <span class="comment">/* Cannot originate now. */</span>
<a name="l01468"></a>01468             <span class="keywordflow">continue</span>;
<a name="l01469"></a>01469 
<a name="l01470"></a>01470           <a class="code" href="ospf__opaque_8h.html#a8051c5bd74e77728c6ad70f717ce5100">ospf_opaque_lsa_reoriginate_schedule</a> ((<span class="keywordtype">void</span> *) top,
<a name="l01471"></a>01471             <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>, oipt-&gt;opaque_type);
<a name="l01472"></a>01472         }
<a name="l01473"></a>01473     }
<a name="l01474"></a>01474 
<a name="l01475"></a>01475   <span class="keywordflow">if</span> (delay0 != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01476"></a>01476     *delay0 = delay;
<a name="l01477"></a>01477 
<a name="l01478"></a>01478 out:
<a name="l01479"></a>01479   <span class="keywordflow">return</span>;
<a name="l01480"></a>01480 }
<a name="l01481"></a>01481 
<a name="l01482"></a>01482 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01483"></a>01483 ospf_opaque_type9_lsa_originate (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)
<a name="l01484"></a>01484 {
<a name="l01485"></a>01485   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01486"></a>01486   <span class="keywordtype">int</span> rc;
<a name="l01487"></a>01487 
<a name="l01488"></a>01488   oi = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l01489"></a>01489   oi-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01490"></a>01490 
<a name="l01491"></a>01491   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01492"></a>01492     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Timer[Type9-LSA]: Originate Opaque-LSAs for OI %s&quot;</span>,
<a name="l01493"></a>01493                 <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l01494"></a>01494 
<a name="l01495"></a>01495   rc = opaque_lsa_originate_callback (ospf_opaque_type9_funclist, oi);
<a name="l01496"></a>01496 
<a name="l01497"></a>01497   <span class="keywordflow">return</span> rc;
<a name="l01498"></a>01498 }
<a name="l01499"></a>01499 
<a name="l01500"></a>01500 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01501"></a>01501 ospf_opaque_type10_lsa_originate (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l01502"></a>01502 {
<a name="l01503"></a>01503   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l01504"></a>01504   <span class="keywordtype">int</span> rc;
<a name="l01505"></a>01505 
<a name="l01506"></a>01506   area = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l01507"></a>01507   area-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01508"></a>01508 
<a name="l01509"></a>01509   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01510"></a>01510     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Timer[Type10-LSA]: Originate Opaque-LSAs for Area %s&quot;</span>,
<a name="l01511"></a>01511                 inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l01512"></a>01512 
<a name="l01513"></a>01513   rc = opaque_lsa_originate_callback (ospf_opaque_type10_funclist, area);
<a name="l01514"></a>01514 
<a name="l01515"></a>01515   <span class="keywordflow">return</span> rc;
<a name="l01516"></a>01516 }
<a name="l01517"></a>01517 
<a name="l01518"></a>01518 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01519"></a>01519 ospf_opaque_type11_lsa_originate (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l01520"></a>01520 {
<a name="l01521"></a>01521   <span class="keyword">struct </span>ospf *top;
<a name="l01522"></a>01522   <span class="keywordtype">int</span> rc;
<a name="l01523"></a>01523 
<a name="l01524"></a>01524   top = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l01525"></a>01525   top-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01526"></a>01526 
<a name="l01527"></a>01527   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01528"></a>01528     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Timer[Type11-LSA]: Originate AS-External Opaque-LSAs&quot;</span>);
<a name="l01529"></a>01529 
<a name="l01530"></a>01530   rc = opaque_lsa_originate_callback (ospf_opaque_type11_funclist, top);
<a name="l01531"></a>01531 
<a name="l01532"></a>01532   <span class="keywordflow">return</span> rc;
<a name="l01533"></a>01533 }
<a name="l01534"></a>01534 
<a name="l01535"></a>01535 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01536"></a>01536 ospf_opaque_lsa_reoriginate_resume (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *listtop, <span class="keywordtype">void</span> *arg)
<a name="l01537"></a>01537 {
<a name="l01538"></a>01538   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01539"></a>01539   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l01540"></a>01540   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l01541"></a>01541 
<a name="l01542"></a>01542   <span class="keywordflow">if</span> (listtop == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01543"></a>01543     <span class="keywordflow">goto</span> out;
<a name="l01544"></a>01544 
<a name="l01545"></a>01545   <span class="comment">/*</span>
<a name="l01546"></a>01546 <span class="comment">   * Pickup oipt entries those which in SUSPEND status, and give</span>
<a name="l01547"></a>01547 <span class="comment">   * them a chance to start re-origination now.</span>
<a name="l01548"></a>01548 <span class="comment">   */</span>
<a name="l01549"></a>01549   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (listtop, node, nnode, oipt))
<a name="l01550"></a>01550     {
<a name="l01551"></a>01551       <span class="keywordflow">if</span> (oipt-&gt;status != PROC_SUSPEND)
<a name="l01552"></a>01552           <span class="keywordflow">continue</span>;
<a name="l01553"></a>01553 
<a name="l01554"></a>01554       oipt-&gt;status = PROC_NORMAL;
<a name="l01555"></a>01555 
<a name="l01556"></a>01556       <span class="keywordflow">if</span> ((functab = oipt-&gt;functab) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l01557"></a>01557           || functab-&gt;lsa_originator  == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01558"></a>01558         <span class="keywordflow">continue</span>;
<a name="l01559"></a>01559 
<a name="l01560"></a>01560       <span class="keywordflow">if</span> ((* functab-&gt;lsa_originator)(arg) != 0)
<a name="l01561"></a>01561         {
<a name="l01562"></a>01562           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_resume: Failed (opaque-type=%u)&quot;</span>, oipt-&gt;opaque_type);
<a name="l01563"></a>01563           <span class="keywordflow">continue</span>;
<a name="l01564"></a>01564         }
<a name="l01565"></a>01565     }
<a name="l01566"></a>01566 
<a name="l01567"></a>01567 out:
<a name="l01568"></a>01568   <span class="keywordflow">return</span>;
<a name="l01569"></a>01569 }
<a name="l01570"></a>01570 
<a name="l01571"></a>01571 <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *
<a name="l01572"></a>01572 <a class="code" href="ospf__opaque_8h.html#adcdf3f83a447665cfcb282c18ab5cc71">ospf_opaque_lsa_install</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa, <span class="keywordtype">int</span> rt_recalc)
<a name="l01573"></a>01573 {
<a name="l01574"></a>01574   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *<span class="keyword">new</span> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01575"></a>01575   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l01576"></a>01576   <span class="keyword">struct </span>opaque_info_per_id *oipi;
<a name="l01577"></a>01577   <span class="keyword">struct </span>ospf *top;
<a name="l01578"></a>01578 
<a name="l01579"></a>01579   <span class="comment">/* Don&#39;t take &quot;rt_recalc&quot; into consideration for now. */</span><span class="comment">/* XXX */</span>
<a name="l01580"></a>01580 
<a name="l01581"></a>01581   <span class="keywordflow">if</span> (! <a class="code" href="ospf__lsa_8h.html#aba06df657f75f729003128da649322f8">IS_LSA_SELF</a> (lsa))
<a name="l01582"></a>01582     {
<a name="l01583"></a>01583       <span class="keyword">new</span> = lsa; <span class="comment">/* Don&#39;t touch this LSA. */</span>
<a name="l01584"></a>01584       <span class="keywordflow">goto</span> out;
<a name="l01585"></a>01585     }
<a name="l01586"></a>01586 
<a name="l01587"></a>01587   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (lsa, LSA_INSTALL))
<a name="l01588"></a>01588     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Install Type-%u Opaque-LSA: [opaque-type=%u, opaque-id=%x]&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)), <a class="code" href="ospf__opaque_8h.html#a44dd18f87765dd2c8b6003c5efd099df">GET_OPAQUE_ID</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)));
<a name="l01589"></a>01589 
<a name="l01590"></a>01590   <span class="comment">/* Replace the existing lsa with the new one. */</span>
<a name="l01591"></a>01591   <span class="keywordflow">if</span> ((oipt = lookup_opaque_info_by_type (lsa)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l01592"></a>01592       &amp;&amp; (oipi = lookup_opaque_info_by_id (oipt, lsa)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01593"></a>01593     {
<a name="l01594"></a>01594       <a class="code" href="ospf__lsa_8c.html#a268fc5c6673caf7ee94c0eaaa88455b8">ospf_lsa_unlock</a> (&amp;oipi-&gt;lsa);
<a name="l01595"></a>01595       oipi-&gt;lsa = <a class="code" href="ospf__lsa_8c.html#a312850eed27e83bb9f66d27bb5bfb144">ospf_lsa_lock</a> (lsa);
<a name="l01596"></a>01596     }
<a name="l01597"></a>01597   <span class="comment">/* Register the new lsa entry and get its control info. */</span>
<a name="l01598"></a>01598   <span class="keywordflow">else</span>
<a name="l01599"></a>01599   <span class="keywordflow">if</span> ((oipi = register_opaque_lsa (lsa)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01600"></a>01600     {
<a name="l01601"></a>01601       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_install: register_opaque_lsa() ?&quot;</span>);
<a name="l01602"></a>01602       <span class="keywordflow">goto</span> out;
<a name="l01603"></a>01603     }
<a name="l01604"></a>01604 
<a name="l01605"></a>01605   <span class="comment">/*</span>
<a name="l01606"></a>01606 <span class="comment">   * Make use of a common mechanism (ospf_lsa_refresh_walker)</span>
<a name="l01607"></a>01607 <span class="comment">   * for periodic refresh of self-originated Opaque-LSAs.</span>
<a name="l01608"></a>01608 <span class="comment">   */</span>
<a name="l01609"></a>01609   <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l01610"></a>01610     {
<a name="l01611"></a>01611     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l01612"></a>01612       <span class="keywordflow">if</span> ((top = <a class="code" href="ospf__opaque_8h.html#acf470147baa1a2b6de79fe6e00b671af">oi_to_top</a> (lsa-&gt;oi)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01613"></a>01613         {
<a name="l01614"></a>01614           <span class="comment">/* Above conditions must have passed. */</span>
<a name="l01615"></a>01615           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_install: Sonmething wrong?&quot;</span>);
<a name="l01616"></a>01616           <span class="keywordflow">goto</span> out;
<a name="l01617"></a>01617         }
<a name="l01618"></a>01618       <span class="keywordflow">break</span>;
<a name="l01619"></a>01619     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l01620"></a>01620       <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || (top = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01621"></a>01621         {
<a name="l01622"></a>01622           <span class="comment">/* Above conditions must have passed. */</span>
<a name="l01623"></a>01623           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_install: Sonmething wrong?&quot;</span>);
<a name="l01624"></a>01624           <span class="keywordflow">goto</span> out;
<a name="l01625"></a>01625         }
<a name="l01626"></a>01626       <span class="keywordflow">break</span>;
<a name="l01627"></a>01627     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l01628"></a>01628       top = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01629"></a>01629       <span class="keywordflow">if</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; (top = lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01630"></a>01630         {
<a name="l01631"></a>01631           <span class="comment">/* Above conditions must have passed. */</span>
<a name="l01632"></a>01632           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_install: Sonmething wrong?&quot;</span>);
<a name="l01633"></a>01633           <span class="keywordflow">goto</span> out;
<a name="l01634"></a>01634         }
<a name="l01635"></a>01635       <span class="keywordflow">break</span>;
<a name="l01636"></a>01636     <span class="keywordflow">default</span>:
<a name="l01637"></a>01637       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_install: Unexpected LSA-type(%u)&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l01638"></a>01638       <span class="keywordflow">goto</span> out;
<a name="l01639"></a>01639     }
<a name="l01640"></a>01640 
<a name="l01641"></a>01641   <a class="code" href="ospf__lsa_8c.html#aac345ad0177ef3e0a5236ef623ffb176">ospf_refresher_register_lsa</a> (top, lsa);
<a name="l01642"></a>01642   <span class="keyword">new</span> = lsa;
<a name="l01643"></a>01643 
<a name="l01644"></a>01644 out:
<a name="l01645"></a>01645   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l01646"></a>01646 }
<a name="l01647"></a>01647 
<a name="l01648"></a>01648 <span class="keywordtype">void</span>
<a name="l01649"></a>01649 <a class="code" href="ospf__opaque_8h.html#a5d47cc4e0de52b67511124fcb5aa2be5">ospf_opaque_lsa_refresh</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l01650"></a>01650 {
<a name="l01651"></a>01651   <span class="keyword">struct </span>ospf *ospf;
<a name="l01652"></a>01652   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l01653"></a>01653 
<a name="l01654"></a>01654   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01655"></a>01655 
<a name="l01656"></a>01656   <span class="keywordflow">if</span> ((functab = ospf_opaque_functab_lookup (lsa)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l01657"></a>01657       || functab-&gt;lsa_refresher == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01658"></a>01658     {
<a name="l01659"></a>01659       <span class="comment">/*</span>
<a name="l01660"></a>01660 <span class="comment">       * Though this LSA seems to have originated on this node, the</span>
<a name="l01661"></a>01661 <span class="comment">       * handling module for this &quot;lsa-type and opaque-type&quot; was</span>
<a name="l01662"></a>01662 <span class="comment">       * already deleted sometime ago.</span>
<a name="l01663"></a>01663 <span class="comment">       * Anyway, this node still has a responsibility to flush this</span>
<a name="l01664"></a>01664 <span class="comment">       * LSA from the routing domain.</span>
<a name="l01665"></a>01665 <span class="comment">       */</span>
<a name="l01666"></a>01666       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01667"></a>01667         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[Type%d:%s]: Flush stray Opaque-LSA&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, inet_ntoa (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>));
<a name="l01668"></a>01668 
<a name="l01669"></a>01669       lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>);
<a name="l01670"></a>01670       <a class="code" href="ospf__lsa_8c.html#ab730b081b5aa660ffc5d0ec642d03d27">ospf_lsa_maxage</a> (ospf, lsa);
<a name="l01671"></a>01671     }
<a name="l01672"></a>01672   <span class="keywordflow">else</span>
<a name="l01673"></a>01673     (* functab-&gt;lsa_refresher)(lsa);
<a name="l01674"></a>01674 
<a name="l01675"></a>01675   <span class="keywordflow">return</span>;
<a name="l01676"></a>01676 }
<a name="l01677"></a>01677 
<a name="l01678"></a>01678 <span class="comment">/*------------------------------------------------------------------------*</span>
<a name="l01679"></a>01679 <span class="comment"> * Followings are re-origination/refresh/flush operations of Opaque-LSAs,</span>
<a name="l01680"></a>01680 <span class="comment"> * triggered by external interventions (vty session, signaling, etc).</span>
<a name="l01681"></a>01681 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l01682"></a>01682 
<a name="l01683"></a>01683 <span class="preprocessor">#define OSPF_OPAQUE_TIMER_ON(T,F,L,V) \</span>
<a name="l01684"></a>01684 <span class="preprocessor">      if (!(T)) \</span>
<a name="l01685"></a>01685 <span class="preprocessor">        (T) = thread_add_timer (master, (F), (L), (V))</span>
<a name="l01686"></a>01686 <span class="preprocessor"></span>
<a name="l01687"></a>01687 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *pseudo_lsa (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *area, u_char lsa_type, u_char opaque_type);
<a name="l01688"></a>01688 <span class="keyword">static</span> <span class="keywordtype">int</span> ospf_opaque_type9_lsa_reoriginate_timer (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t);
<a name="l01689"></a>01689 <span class="keyword">static</span> <span class="keywordtype">int</span> ospf_opaque_type10_lsa_reoriginate_timer (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t);
<a name="l01690"></a>01690 <span class="keyword">static</span> <span class="keywordtype">int</span> ospf_opaque_type11_lsa_reoriginate_timer (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t);
<a name="l01691"></a>01691 <span class="keyword">static</span> <span class="keywordtype">int</span> ospf_opaque_lsa_refresh_timer (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t);
<a name="l01692"></a>01692 
<a name="l01693"></a>01693 <span class="keywordtype">void</span>
<a name="l01694"></a>01694 <a class="code" href="ospf__opaque_8h.html#a8051c5bd74e77728c6ad70f717ce5100">ospf_opaque_lsa_reoriginate_schedule</a> (<span class="keywordtype">void</span> *lsa_type_dependent,
<a name="l01695"></a>01695                                       u_char lsa_type, u_char opaque_type)
<a name="l01696"></a>01696 {
<a name="l01697"></a>01697   <span class="keyword">struct </span>ospf *top;
<a name="l01698"></a>01698   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> dummy, *area = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01699"></a>01699   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01700"></a>01700 
<a name="l01701"></a>01701   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l01702"></a>01702   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l01703"></a>01703   int (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> * <a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>) = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01704"></a>01704   <span class="keywordtype">int</span> delay;
<a name="l01705"></a>01705 
<a name="l01706"></a>01706   <span class="keywordflow">switch</span> (lsa_type)
<a name="l01707"></a>01707     {
<a name="l01708"></a>01708     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l01709"></a>01709       <span class="keywordflow">if</span> ((oi = (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *) lsa_type_dependent) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01710"></a>01710         {
<a name="l01711"></a>01711           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_schedule:&quot;</span>
<a name="l01712"></a>01712                      <span class="stringliteral">&quot; Type-9 Opaque-LSA: Invalid parameter?&quot;</span>);
<a name="l01713"></a>01713           <span class="keywordflow">goto</span> out;
<a name="l01714"></a>01714         }
<a name="l01715"></a>01715       <span class="keywordflow">if</span> ((top = <a class="code" href="ospf__opaque_8h.html#acf470147baa1a2b6de79fe6e00b671af">oi_to_top</a> (oi)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01716"></a>01716         {
<a name="l01717"></a>01717           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_schedule: OI(%s) -&gt; TOP?&quot;</span>,
<a name="l01718"></a>01718                      <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l01719"></a>01719           <span class="keywordflow">goto</span> out;
<a name="l01720"></a>01720         }
<a name="l01721"></a>01721       <span class="keywordflow">if</span> (!<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (ospf_opaque_type9_funclist)
<a name="l01722"></a>01722           &amp;&amp; <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (oi-&gt;opaque_lsa_self)
<a name="l01723"></a>01723           &amp;&amp; oi-&gt;t_opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01724"></a>01724         {
<a name="l01725"></a>01725           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Type-9 Opaque-LSA (opaque_type=%u):&quot;</span>
<a name="l01726"></a>01726                      <span class="stringliteral">&quot; Common origination for OI(%s) has already started&quot;</span>,
<a name="l01727"></a>01727                      opaque_type, <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l01728"></a>01728           <span class="keywordflow">goto</span> out;
<a name="l01729"></a>01729         }
<a name="l01730"></a>01730       <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a> = ospf_opaque_type9_lsa_reoriginate_timer;
<a name="l01731"></a>01731       <span class="keywordflow">break</span>;
<a name="l01732"></a>01732     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l01733"></a>01733       <span class="keywordflow">if</span> ((area = (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *) lsa_type_dependent) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01734"></a>01734         {
<a name="l01735"></a>01735           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_schedule:&quot;</span>
<a name="l01736"></a>01736                      <span class="stringliteral">&quot; Type-10 Opaque-LSA: Invalid parameter?&quot;</span>);
<a name="l01737"></a>01737           <span class="keywordflow">goto</span> out;
<a name="l01738"></a>01738         }
<a name="l01739"></a>01739       <span class="keywordflow">if</span> ((top = area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01740"></a>01740         {
<a name="l01741"></a>01741           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_schedule:&quot;</span>
<a name="l01742"></a>01742                      <span class="stringliteral">&quot; AREA(%s) -&gt; TOP?&quot;</span>, inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l01743"></a>01743           <span class="keywordflow">goto</span> out;
<a name="l01744"></a>01744         }
<a name="l01745"></a>01745       <span class="keywordflow">if</span> (!<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (ospf_opaque_type10_funclist)
<a name="l01746"></a>01746           &amp;&amp; <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (area-&gt;opaque_lsa_self)
<a name="l01747"></a>01747           &amp;&amp; area-&gt;t_opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01748"></a>01748         {
<a name="l01749"></a>01749           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Type-10 Opaque-LSA (opaque_type=%u):&quot;</span>
<a name="l01750"></a>01750                      <span class="stringliteral">&quot; Common origination for AREA(%s) has already started&quot;</span>,
<a name="l01751"></a>01751                      opaque_type, inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l01752"></a>01752           <span class="keywordflow">goto</span> out;
<a name="l01753"></a>01753         }
<a name="l01754"></a>01754       <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a> = ospf_opaque_type10_lsa_reoriginate_timer;
<a name="l01755"></a>01755       <span class="keywordflow">break</span>;
<a name="l01756"></a>01756     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l01757"></a>01757       <span class="keywordflow">if</span> ((top = (<span class="keyword">struct</span> ospf *) lsa_type_dependent) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01758"></a>01758         {
<a name="l01759"></a>01759           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_schedule:&quot;</span>
<a name="l01760"></a>01760                      <span class="stringliteral">&quot; Type-11 Opaque-LSA: Invalid parameter?&quot;</span>);
<a name="l01761"></a>01761           <span class="keywordflow">goto</span> out;
<a name="l01762"></a>01762         }
<a name="l01763"></a>01763       <span class="keywordflow">if</span> (!<a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (ospf_opaque_type11_funclist)
<a name="l01764"></a>01764           &amp;&amp; <a class="code" href="linklist_8h.html#a6076d643ed23a6095c7821ddf52d3f47">list_isempty</a> (top-&gt;opaque_lsa_self)
<a name="l01765"></a>01765           &amp;&amp; top-&gt;t_opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01766"></a>01766         {
<a name="l01767"></a>01767           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Type-11 Opaque-LSA (opaque_type=%u):&quot;</span>
<a name="l01768"></a>01768                      <span class="stringliteral">&quot; Common origination has already started&quot;</span>, opaque_type);
<a name="l01769"></a>01769           <span class="keywordflow">goto</span> out;
<a name="l01770"></a>01770         }
<a name="l01771"></a>01771 
<a name="l01772"></a>01772       <span class="comment">/* Fake &quot;area&quot; to pass &quot;ospf&quot; to a lookup function later. */</span>
<a name="l01773"></a>01773       dummy.ospf = top;
<a name="l01774"></a>01774       area = &amp;dummy;
<a name="l01775"></a>01775 
<a name="l01776"></a>01776       <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a> = ospf_opaque_type11_lsa_reoriginate_timer;
<a name="l01777"></a>01777       <span class="keywordflow">break</span>;
<a name="l01778"></a>01778     <span class="keywordflow">default</span>:
<a name="l01779"></a>01779       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_schedule:&quot;</span>
<a name="l01780"></a>01780                  <span class="stringliteral">&quot; Unexpected LSA-type(%u)&quot;</span>,
<a name="l01781"></a>01781                  lsa_type);
<a name="l01782"></a>01782       <span class="keywordflow">goto</span> out;
<a name="l01783"></a>01783     }
<a name="l01784"></a>01784 
<a name="l01785"></a>01785   <span class="comment">/* It may not a right time to schedule reorigination now. */</span>
<a name="l01786"></a>01786   <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (top-&gt;opaque, OPAQUE_OPERATION_READY_BIT))
<a name="l01787"></a>01787     {
<a name="l01788"></a>01788       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01789"></a>01789         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_schedule: Not operational.&quot;</span>);
<a name="l01790"></a>01790       <span class="keywordflow">goto</span> out;                 <span class="comment">/* This is not an error. */</span>
<a name="l01791"></a>01791     }
<a name="l01792"></a>01792   <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#a22f5fbb8d8c29a987847ca54159bb24e">IS_OPAQUE_LSA_ORIGINATION_BLOCKED</a> (top-&gt;opaque))
<a name="l01793"></a>01793     {
<a name="l01794"></a>01794       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01795"></a>01795         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_schedule: Under blockade.&quot;</span>);
<a name="l01796"></a>01796       <span class="keywordflow">goto</span> out;                 <span class="comment">/* This is not an error, too. */</span>
<a name="l01797"></a>01797     }
<a name="l01798"></a>01798 
<a name="l01799"></a>01799   <span class="comment">/* Generate a dummy lsa to be passed for a lookup function. */</span>
<a name="l01800"></a>01800   lsa = pseudo_lsa (oi, area, lsa_type, opaque_type);
<a name="l01801"></a>01801 
<a name="l01802"></a>01802   <span class="keywordflow">if</span> ((oipt = lookup_opaque_info_by_type (lsa)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01803"></a>01803     {
<a name="l01804"></a>01804       <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l01805"></a>01805       <span class="keywordflow">if</span> ((functab = ospf_opaque_functab_lookup (lsa)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01806"></a>01806         {
<a name="l01807"></a>01807           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_schedule:&quot;</span>
<a name="l01808"></a>01808                      <span class="stringliteral">&quot; No associated function?: lsa_type(%u),&quot;</span>
<a name="l01809"></a>01809                      <span class="stringliteral">&quot; opaque_type(%u)&quot;</span>,
<a name="l01810"></a>01810                      lsa_type, opaque_type);
<a name="l01811"></a>01811           <span class="keywordflow">goto</span> out;
<a name="l01812"></a>01812         }
<a name="l01813"></a>01813       <span class="keywordflow">if</span> ((oipt = register_opaque_info_per_type (functab, lsa)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01814"></a>01814         {
<a name="l01815"></a>01815           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_reoriginate_schedule:&quot;</span>
<a name="l01816"></a>01816                      <span class="stringliteral">&quot; Cannot get a control info?: lsa_type(%u),&quot;</span>
<a name="l01817"></a>01817                      <span class="stringliteral">&quot; opaque_type(%u)&quot;</span>,
<a name="l01818"></a>01818                      lsa_type, opaque_type);
<a name="l01819"></a>01819           <span class="keywordflow">goto</span> out;
<a name="l01820"></a>01820         }
<a name="l01821"></a>01821     }
<a name="l01822"></a>01822 
<a name="l01823"></a>01823   <span class="keywordflow">if</span> (oipt-&gt;t_opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01824"></a>01824     {
<a name="l01825"></a>01825       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01826"></a>01826         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Type-%u Opaque-LSA has already scheduled to&quot;</span>
<a name="l01827"></a>01827                    <span class="stringliteral">&quot; RE-ORIGINATE: [opaque-type=%u]&quot;</span>,
<a name="l01828"></a>01828                    lsa_type, <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)));
<a name="l01829"></a>01829       <span class="keywordflow">goto</span> out;
<a name="l01830"></a>01830     }
<a name="l01831"></a>01831 
<a name="l01832"></a>01832   <span class="comment">/*</span>
<a name="l01833"></a>01833 <span class="comment">   * Different from initial origination time, in which various conditions</span>
<a name="l01834"></a>01834 <span class="comment">   * (opaque capability, neighbor status etc) are assured by caller of</span>
<a name="l01835"></a>01835 <span class="comment">   * the originating function &quot;ospf_opaque_lsa_originate_schedule ()&quot;,</span>
<a name="l01836"></a>01836 <span class="comment">   * it is highly possible that these conditions might not be satisfied</span>
<a name="l01837"></a>01837 <span class="comment">   * at the time of re-origination function is to be called.</span>
<a name="l01838"></a>01838 <span class="comment">   */</span>
<a name="l01839"></a>01839   delay = <a class="code" href="ospfd_8h.html#a8e517a858d0da0eb3b4fcf8c06391117">OSPF_MIN_LS_INTERVAL</a>; <span class="comment">/* XXX */</span>
<a name="l01840"></a>01840 
<a name="l01841"></a>01841   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01842"></a>01842     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Schedule Type-%u Opaque-LSA to RE-ORIGINATE in %d&quot;</span>
<a name="l01843"></a>01843                <span class="stringliteral">&quot; sec later: [opaque-type=%u]&quot;</span>, 
<a name="l01844"></a>01844                lsa_type, delay, 
<a name="l01845"></a>01845                <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)));
<a name="l01846"></a>01846 
<a name="l01847"></a>01847   OSPF_OPAQUE_TIMER_ON (oipt-&gt;t_opaque_lsa_self, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, oipt, delay);
<a name="l01848"></a>01848 
<a name="l01849"></a>01849 out:
<a name="l01850"></a>01850   <span class="keywordflow">return</span>;
<a name="l01851"></a>01851 }
<a name="l01852"></a>01852 
<a name="l01853"></a>01853 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *
<a name="l01854"></a>01854 pseudo_lsa (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi, <span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *area,
<a name="l01855"></a>01855             u_char lsa_type, u_char opaque_type)
<a name="l01856"></a>01856 {
<a name="l01857"></a>01857   <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> lsa = { 0 };
<a name="l01858"></a>01858   <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> lsah = { 0 };
<a name="l01859"></a>01859   u_int32_t tmp;
<a name="l01860"></a>01860 
<a name="l01861"></a>01861   lsa.oi   = oi;
<a name="l01862"></a>01862   lsa.<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a> = <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l01863"></a>01863   lsa.<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a> = &amp;lsah;
<a name="l01864"></a>01864 
<a name="l01865"></a>01865   lsah.<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a> = lsa_type;
<a name="l01866"></a>01866   tmp = <a class="code" href="ospf__opaque_8h.html#a44507a22a8268862dc322c292455d7a6">SET_OPAQUE_LSID</a> (opaque_type, 0); <span class="comment">/* Opaque-ID is unused here. */</span>
<a name="l01867"></a>01867   lsah.<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr = htonl (tmp);
<a name="l01868"></a>01868 
<a name="l01869"></a>01869   <span class="keywordflow">return</span> &amp;lsa;
<a name="l01870"></a>01870 }
<a name="l01871"></a>01871 
<a name="l01872"></a>01872 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01873"></a>01873 ospf_opaque_type9_lsa_reoriginate_timer (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l01874"></a>01874 {
<a name="l01875"></a>01875   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l01876"></a>01876   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l01877"></a>01877   <span class="keyword">struct </span>ospf *top;
<a name="l01878"></a>01878   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01879"></a>01879   <span class="keywordtype">int</span> rc = -1;
<a name="l01880"></a>01880 
<a name="l01881"></a>01881   oipt = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l01882"></a>01882   oipt-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01883"></a>01883 
<a name="l01884"></a>01884   <span class="keywordflow">if</span> ((functab = oipt-&gt;functab) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l01885"></a>01885   ||   functab-&gt;lsa_originator == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01886"></a>01886     {
<a name="l01887"></a>01887       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_type9_lsa_reoriginate_timer: No associated function?&quot;</span>);
<a name="l01888"></a>01888       <span class="keywordflow">goto</span> out;
<a name="l01889"></a>01889     }
<a name="l01890"></a>01890 
<a name="l01891"></a>01891   oi = (<span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *) oipt-&gt;owner;
<a name="l01892"></a>01892   if ((top = <a class="code" href="ospf__opaque_8h.html#acf470147baa1a2b6de79fe6e00b671af">oi_to_top</a> (oi)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01893"></a>01893     {
<a name="l01894"></a>01894       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_type9_lsa_reoriginate_timer: Something wrong?&quot;</span>);
<a name="l01895"></a>01895       <span class="keywordflow">goto</span> out;
<a name="l01896"></a>01896     }
<a name="l01897"></a>01897 
<a name="l01898"></a>01898   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (top-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>)
<a name="l01899"></a>01899   ||  ! <a class="code" href="ospf__interface_8c.html#a25678bf88909391ee05583a4e73a838d">ospf_if_is_enable</a> (oi)
<a name="l01900"></a>01900   ||    ospf_nbr_count_opaque_capable (oi) == 0)
<a name="l01901"></a>01901     {
<a name="l01902"></a>01902       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01903"></a>01903         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Suspend re-origination of Type-9 Opaque-LSAs (opaque-type=%u) for a while...&quot;</span>, oipt-&gt;opaque_type);
<a name="l01904"></a>01904     
<a name="l01905"></a>01905       oipt-&gt;status = PROC_SUSPEND;
<a name="l01906"></a>01906       rc = 0;
<a name="l01907"></a>01907       <span class="keywordflow">goto</span> out;
<a name="l01908"></a>01908     }
<a name="l01909"></a>01909 
<a name="l01910"></a>01910   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01911"></a>01911     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Timer[Type9-LSA]: Re-originate Opaque-LSAs (opaque-type=%u) for OI (%s)&quot;</span>, oipt-&gt;opaque_type, <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l01912"></a>01912 
<a name="l01913"></a>01913   rc = (* functab-&gt;lsa_originator)(oi);
<a name="l01914"></a>01914 out:
<a name="l01915"></a>01915   <span class="keywordflow">return</span> rc;
<a name="l01916"></a>01916 }
<a name="l01917"></a>01917 
<a name="l01918"></a>01918 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01919"></a>01919 ospf_opaque_type10_lsa_reoriginate_timer (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l01920"></a>01920 {
<a name="l01921"></a>01921   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l01922"></a>01922   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l01923"></a>01923   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01924"></a>01924   <span class="keyword">struct </span>ospf *top;
<a name="l01925"></a>01925   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l01926"></a>01926   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01927"></a>01927   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>, rc = -1;
<a name="l01928"></a>01928 
<a name="l01929"></a>01929   oipt = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l01930"></a>01930   oipt-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01931"></a>01931 
<a name="l01932"></a>01932   <span class="keywordflow">if</span> ((functab = oipt-&gt;functab) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l01933"></a>01933   ||   functab-&gt;lsa_originator == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01934"></a>01934     {
<a name="l01935"></a>01935       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_type10_lsa_reoriginate_timer: No associated function?&quot;</span>);
<a name="l01936"></a>01936       <span class="keywordflow">goto</span> out;
<a name="l01937"></a>01937     }
<a name="l01938"></a>01938 
<a name="l01939"></a>01939   area = (<span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *) oipt-&gt;owner;
<a name="l01940"></a>01940   if (area == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || (top = area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01941"></a>01941     {
<a name="l01942"></a>01942       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_type10_lsa_reoriginate_timer: Something wrong?&quot;</span>);
<a name="l01943"></a>01943       <span class="keywordflow">goto</span> out;
<a name="l01944"></a>01944     }
<a name="l01945"></a>01945 
<a name="l01946"></a>01946   <span class="comment">/* There must be at least one &quot;opaque-capable, full-state&quot; neighbor. */</span>
<a name="l01947"></a>01947   n = 0;
<a name="l01948"></a>01948   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (area-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, node, nnode, oi))
<a name="l01949"></a>01949     {
<a name="l01950"></a>01950       <span class="keywordflow">if</span> ((n = ospf_nbr_count_opaque_capable (oi)) &gt; 0)
<a name="l01951"></a>01951         <span class="keywordflow">break</span>;
<a name="l01952"></a>01952     }
<a name="l01953"></a>01953 
<a name="l01954"></a>01954   <span class="keywordflow">if</span> (n == 0 || ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (top-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>))
<a name="l01955"></a>01955     {
<a name="l01956"></a>01956       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01957"></a>01957         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Suspend re-origination of Type-10 Opaque-LSAs&quot;</span>
<a name="l01958"></a>01958                    <span class="stringliteral">&quot; (opaque-type=%u) for a while...&quot;</span>, 
<a name="l01959"></a>01959                    oipt-&gt;opaque_type);
<a name="l01960"></a>01960 
<a name="l01961"></a>01961       oipt-&gt;status = PROC_SUSPEND;
<a name="l01962"></a>01962       rc = 0;
<a name="l01963"></a>01963       <span class="keywordflow">goto</span> out;
<a name="l01964"></a>01964     }
<a name="l01965"></a>01965 
<a name="l01966"></a>01966   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l01967"></a>01967     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Timer[Type10-LSA]: Re-originate Opaque-LSAs&quot;</span>
<a name="l01968"></a>01968                <span class="stringliteral">&quot; (opaque-type=%u) for Area %s&quot;</span>, 
<a name="l01969"></a>01969                oipt-&gt;opaque_type, inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l01970"></a>01970 
<a name="l01971"></a>01971   rc = (* functab-&gt;lsa_originator)(area);
<a name="l01972"></a>01972 out:
<a name="l01973"></a>01973   <span class="keywordflow">return</span> rc;
<a name="l01974"></a>01974 }
<a name="l01975"></a>01975 
<a name="l01976"></a>01976 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01977"></a>01977 ospf_opaque_type11_lsa_reoriginate_timer (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l01978"></a>01978 {
<a name="l01979"></a>01979   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l01980"></a>01980   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l01981"></a>01981   <span class="keyword">struct </span>ospf *top;
<a name="l01982"></a>01982   <span class="keywordtype">int</span> rc = -1;
<a name="l01983"></a>01983 
<a name="l01984"></a>01984   oipt = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l01985"></a>01985   oipt-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01986"></a>01986 
<a name="l01987"></a>01987   <span class="keywordflow">if</span> ((functab = oipt-&gt;functab) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l01988"></a>01988       || functab-&gt;lsa_originator == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01989"></a>01989     {
<a name="l01990"></a>01990       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_type11_lsa_reoriginate_timer:&quot;</span>
<a name="l01991"></a>01991                  <span class="stringliteral">&quot; No associated function?&quot;</span>);
<a name="l01992"></a>01992       <span class="keywordflow">goto</span> out;
<a name="l01993"></a>01993     }
<a name="l01994"></a>01994 
<a name="l01995"></a>01995   <span class="keywordflow">if</span> ((top = (<span class="keyword">struct</span> ospf *) oipt-&gt;owner) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01996"></a>01996     {
<a name="l01997"></a>01997       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_type11_lsa_reoriginate_timer: Something wrong?&quot;</span>);
<a name="l01998"></a>01998       <span class="keywordflow">goto</span> out;
<a name="l01999"></a>01999     }
<a name="l02000"></a>02000 
<a name="l02001"></a>02001   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (top-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>))
<a name="l02002"></a>02002     {
<a name="l02003"></a>02003       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02004"></a>02004         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Suspend re-origination of Type-11 Opaque-LSAs (opaque-type=%u) for a while...&quot;</span>, oipt-&gt;opaque_type);
<a name="l02005"></a>02005     
<a name="l02006"></a>02006       oipt-&gt;status = PROC_SUSPEND;
<a name="l02007"></a>02007       rc = 0;
<a name="l02008"></a>02008       <span class="keywordflow">goto</span> out;
<a name="l02009"></a>02009     }
<a name="l02010"></a>02010 
<a name="l02011"></a>02011   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02012"></a>02012     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Timer[Type11-LSA]: Re-originate Opaque-LSAs (opaque-type=%u).&quot;</span>, oipt-&gt;opaque_type);
<a name="l02013"></a>02013 
<a name="l02014"></a>02014   rc = (* functab-&gt;lsa_originator)(top);
<a name="l02015"></a>02015 out:
<a name="l02016"></a>02016   <span class="keywordflow">return</span> rc;
<a name="l02017"></a>02017 }
<a name="l02018"></a>02018 
<a name="l02019"></a>02019 <span class="keywordtype">void</span>
<a name="l02020"></a>02020 <a class="code" href="ospf__opaque_8h.html#aa09894547334df306db297c657329cb9">ospf_opaque_lsa_refresh_schedule</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa0)
<a name="l02021"></a>02021 {
<a name="l02022"></a>02022   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l02023"></a>02023   <span class="keyword">struct </span>opaque_info_per_id *oipi;
<a name="l02024"></a>02024   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02025"></a>02025   <span class="keywordtype">int</span> delay;
<a name="l02026"></a>02026 
<a name="l02027"></a>02027   <span class="keywordflow">if</span> ((oipt = lookup_opaque_info_by_type (lsa0)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l02028"></a>02028   ||  (oipi = lookup_opaque_info_by_id (oipt, lsa0)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02029"></a>02029     {
<a name="l02030"></a>02030       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_refresh_schedule: Invalid parameter?&quot;</span>);
<a name="l02031"></a>02031       <span class="keywordflow">goto</span> out;
<a name="l02032"></a>02032     }
<a name="l02033"></a>02033 
<a name="l02034"></a>02034   <span class="comment">/* Given &quot;lsa0&quot; and current &quot;oipi-&gt;lsa&quot; may different, but harmless. */</span>
<a name="l02035"></a>02035   <span class="keywordflow">if</span> ((lsa = oipi-&gt;lsa) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02036"></a>02036     {
<a name="l02037"></a>02037       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_refresh_schedule: Something wrong?&quot;</span>);
<a name="l02038"></a>02038       <span class="keywordflow">goto</span> out;
<a name="l02039"></a>02039     }
<a name="l02040"></a>02040 
<a name="l02041"></a>02041   <span class="keywordflow">if</span> (oipi-&gt;t_opaque_lsa_self != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02042"></a>02042     {
<a name="l02043"></a>02043       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02044"></a>02044         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Type-%u Opaque-LSA has already scheduled to REFRESH: [opaque-type=%u, opaque-id=%x]&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)), <a class="code" href="ospf__opaque_8h.html#a44dd18f87765dd2c8b6003c5efd099df">GET_OPAQUE_ID</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)));
<a name="l02045"></a>02045       <span class="keywordflow">goto</span> out;
<a name="l02046"></a>02046     }
<a name="l02047"></a>02047 
<a name="l02048"></a>02048   <span class="comment">/* Delete this lsa from neighbor retransmit-list. */</span>
<a name="l02049"></a>02049   <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l02050"></a>02050     {
<a name="l02051"></a>02051     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l02052"></a>02052     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l02053"></a>02053       <a class="code" href="ospf__flood_8c.html#a8f46211a0fe7065405e8bdda81963204">ospf_ls_retransmit_delete_nbr_area</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>, lsa);
<a name="l02054"></a>02054       <span class="keywordflow">break</span>;
<a name="l02055"></a>02055     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l02056"></a>02056       <a class="code" href="ospf__flood_8c.html#add1aa73829326bf3733d0d442002cb95">ospf_ls_retransmit_delete_nbr_as</a> (lsa0-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, lsa);
<a name="l02057"></a>02057       <span class="keywordflow">break</span>;
<a name="l02058"></a>02058     <span class="keywordflow">default</span>:
<a name="l02059"></a>02059       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_refresh_schedule: Unexpected LSA-type(%u)&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l02060"></a>02060       <span class="keywordflow">goto</span> out;
<a name="l02061"></a>02061     }
<a name="l02062"></a>02062 
<a name="l02063"></a>02063   delay = <a class="code" href="ospf__lsa_8c.html#a8f4fa72b19256ed0ecd962b21a9241a7">ospf_lsa_refresh_delay</a> (lsa);
<a name="l02064"></a>02064 
<a name="l02065"></a>02065   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02066"></a>02066     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Schedule Type-%u Opaque-LSA to REFRESH in %d sec later: [opaque-type=%u, opaque-id=%x]&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, delay, <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)), <a class="code" href="ospf__opaque_8h.html#a44dd18f87765dd2c8b6003c5efd099df">GET_OPAQUE_ID</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)));
<a name="l02067"></a>02067 
<a name="l02068"></a>02068   OSPF_OPAQUE_TIMER_ON (oipi-&gt;t_opaque_lsa_self,
<a name="l02069"></a>02069                         ospf_opaque_lsa_refresh_timer, oipi, delay);
<a name="l02070"></a>02070 out:
<a name="l02071"></a>02071   <span class="keywordflow">return</span>;
<a name="l02072"></a>02072 }
<a name="l02073"></a>02073 
<a name="l02074"></a>02074 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02075"></a>02075 ospf_opaque_lsa_refresh_timer (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *t)
<a name="l02076"></a>02076 {
<a name="l02077"></a>02077   <span class="keyword">struct </span>opaque_info_per_id *oipi;
<a name="l02078"></a>02078   <span class="keyword">struct </span>ospf_opaque_functab *functab;
<a name="l02079"></a>02079   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02080"></a>02080 
<a name="l02081"></a>02081   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02082"></a>02082     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Timer[Opaque-LSA]: (Opaque-LSA Refresh expire)&quot;</span>);
<a name="l02083"></a>02083 
<a name="l02084"></a>02084   oipi = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
<a name="l02085"></a>02085   oipi-&gt;t_opaque_lsa_self = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02086"></a>02086 
<a name="l02087"></a>02087   <span class="keywordflow">if</span> ((lsa = oipi-&gt;lsa) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02088"></a>02088     <span class="keywordflow">if</span> ((functab = oipi-&gt;opqctl_type-&gt;functab) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02089"></a>02089       <span class="keywordflow">if</span> (functab-&gt;lsa_refresher != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02090"></a>02090         (* functab-&gt;lsa_refresher)(lsa);
<a name="l02091"></a>02091 
<a name="l02092"></a>02092   <span class="keywordflow">return</span> 0;
<a name="l02093"></a>02093 }
<a name="l02094"></a>02094 
<a name="l02095"></a>02095 <span class="keywordtype">void</span>
<a name="l02096"></a>02096 <a class="code" href="ospf__opaque_8h.html#adc5d31cc8c6d8fd4eff1d8069027c39b">ospf_opaque_lsa_flush_schedule</a> (<span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa0)
<a name="l02097"></a>02097 {
<a name="l02098"></a>02098   <span class="keyword">struct </span>opaque_info_per_type *oipt;
<a name="l02099"></a>02099   <span class="keyword">struct </span>opaque_info_per_id *oipi;
<a name="l02100"></a>02100   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02101"></a>02101 
<a name="l02102"></a>02102   <span class="keywordflow">if</span> ((oipt = lookup_opaque_info_by_type (lsa0)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l02103"></a>02103   ||  (oipi = lookup_opaque_info_by_id (oipt, lsa0)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02104"></a>02104     {
<a name="l02105"></a>02105       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_flush_schedule: Invalid parameter?&quot;</span>);
<a name="l02106"></a>02106       <span class="keywordflow">goto</span> out;
<a name="l02107"></a>02107     }
<a name="l02108"></a>02108 
<a name="l02109"></a>02109   <span class="comment">/* Given &quot;lsa0&quot; and current &quot;oipi-&gt;lsa&quot; may different, but harmless. */</span>
<a name="l02110"></a>02110   <span class="keywordflow">if</span> ((lsa = oipi-&gt;lsa) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02111"></a>02111     {
<a name="l02112"></a>02112       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_flush_schedule: Something wrong?&quot;</span>);
<a name="l02113"></a>02113       <span class="keywordflow">goto</span> out;
<a name="l02114"></a>02114     }
<a name="l02115"></a>02115 
<a name="l02116"></a>02116   <span class="comment">/* Delete this lsa from neighbor retransmit-list. */</span>
<a name="l02117"></a>02117   <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l02118"></a>02118     {
<a name="l02119"></a>02119     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l02120"></a>02120     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l02121"></a>02121       <a class="code" href="ospf__flood_8c.html#a8f46211a0fe7065405e8bdda81963204">ospf_ls_retransmit_delete_nbr_area</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>, lsa);
<a name="l02122"></a>02122       <span class="keywordflow">break</span>;
<a name="l02123"></a>02123     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l02124"></a>02124       <a class="code" href="ospf__flood_8c.html#add1aa73829326bf3733d0d442002cb95">ospf_ls_retransmit_delete_nbr_as</a> (lsa0-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, lsa);
<a name="l02125"></a>02125       <span class="keywordflow">break</span>;
<a name="l02126"></a>02126     <span class="keywordflow">default</span>:
<a name="l02127"></a>02127       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_lsa_flush_schedule: Unexpected LSA-type(%u)&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l02128"></a>02128       <span class="keywordflow">goto</span> out;
<a name="l02129"></a>02129     }
<a name="l02130"></a>02130 
<a name="l02131"></a>02131   <span class="comment">/* Dequeue listnode entry from the list. */</span>
<a name="l02132"></a>02132   <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (oipt-&gt;id_list, oipi);
<a name="l02133"></a>02133 
<a name="l02134"></a>02134   <span class="comment">/* Avoid misjudgement in the next lookup. */</span>
<a name="l02135"></a>02135   <span class="keywordflow">if</span> (<a class="code" href="linklist_8h.html#a0429e6385b31a314cc64432a906201e5">listcount</a> (oipt-&gt;id_list) == 0)
<a name="l02136"></a>02136     oipt-&gt;id_list-&gt;head = oipt-&gt;id_list-&gt;tail = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02137"></a>02137 
<a name="l02138"></a>02138   <span class="comment">/* Disassociate internal control information with the given lsa. */</span>
<a name="l02139"></a>02139   free_opaque_info_per_id ((<span class="keywordtype">void</span> *) oipi);
<a name="l02140"></a>02140 
<a name="l02141"></a>02141   <span class="comment">/* Force given lsa&#39;s age to MaxAge. */</span>
<a name="l02142"></a>02142   lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>);
<a name="l02143"></a>02143 
<a name="l02144"></a>02144   <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02145"></a>02145     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Schedule Type-%u Opaque-LSA to FLUSH: [opaque-type=%u, opaque-id=%x]&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>, <a class="code" href="ospf__opaque_8h.html#a33d474a2ee1cabff7a723d1c5faa46f6">GET_OPAQUE_TYPE</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)), <a class="code" href="ospf__opaque_8h.html#a44dd18f87765dd2c8b6003c5efd099df">GET_OPAQUE_ID</a> (ntohl (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>.s_addr)));
<a name="l02146"></a>02146 
<a name="l02147"></a>02147   <span class="comment">/* This lsa will be flushed and removed eventually. */</span>
<a name="l02148"></a>02148   <a class="code" href="ospf__lsa_8c.html#ab730b081b5aa660ffc5d0ec642d03d27">ospf_lsa_maxage</a> (lsa0-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>, lsa);
<a name="l02149"></a>02149 
<a name="l02150"></a>02150 out:
<a name="l02151"></a>02151   <span class="keywordflow">return</span>;
<a name="l02152"></a>02152 }
<a name="l02153"></a>02153 
<a name="l02154"></a>02154 <span class="comment">/*------------------------------------------------------------------------*</span>
<a name="l02155"></a>02155 <span class="comment"> * Followings are control functions to block origination after restart.</span>
<a name="l02156"></a>02156 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l02157"></a>02157 
<a name="l02158"></a>02158 <span class="keyword">static</span> <span class="keywordtype">void</span> ospf_opaque_exclude_lsa_from_lsreq (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *nbrs, <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *inbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa);
<a name="l02159"></a>02159 <span class="keyword">static</span> <span class="keywordtype">void</span> ospf_opaque_type9_lsa_rxmt_nbr_check (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi);
<a name="l02160"></a>02160 <span class="keyword">static</span> <span class="keywordtype">void</span> ospf_opaque_type10_lsa_rxmt_nbr_check (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *area);
<a name="l02161"></a>02161 <span class="keyword">static</span> <span class="keywordtype">void</span> ospf_opaque_type11_lsa_rxmt_nbr_check (<span class="keyword">struct</span> ospf *top);
<a name="l02162"></a>02162 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ospf_opaque_nrxmt_self (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *nbrs, <span class="keywordtype">int</span> lsa_type);
<a name="l02163"></a>02163 
<a name="l02164"></a>02164 <span class="keywordtype">void</span>
<a name="l02165"></a>02165 <a class="code" href="ospf__opaque_8h.html#a1305cd45c4dda8bd2a53326fef2c774d">ospf_opaque_adjust_lsreq</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *lsas)
<a name="l02166"></a>02166 {
<a name="l02167"></a>02167   <span class="keyword">struct </span>ospf *top;
<a name="l02168"></a>02168   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l02169"></a>02169   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02170"></a>02170   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node1, *nnode1;
<a name="l02171"></a>02171   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node2, *nnode2;
<a name="l02172"></a>02172   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02173"></a>02173 
<a name="l02174"></a>02174   <span class="keywordflow">if</span> ((top = <a class="code" href="ospf__opaque_8h.html#acf470147baa1a2b6de79fe6e00b671af">oi_to_top</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02175"></a>02175     <span class="keywordflow">goto</span> out;
<a name="l02176"></a>02176 
<a name="l02177"></a>02177   <span class="comment">/*</span>
<a name="l02178"></a>02178 <span class="comment">   * If an instance of self-originated Opaque-LSA is found in the given</span>
<a name="l02179"></a>02179 <span class="comment">   * LSA list, and it is not installed to LSDB yet, exclude it from the</span>
<a name="l02180"></a>02180 <span class="comment">   * list &quot;nbr-&gt;ls_req&quot;. In this way, it is assured that an LSReq message,</span>
<a name="l02181"></a>02181 <span class="comment">   * which might be sent in the process of flooding, will not request for</span>
<a name="l02182"></a>02182 <span class="comment">   * the LSA to be flushed immediately; otherwise, depending on timing,</span>
<a name="l02183"></a>02183 <span class="comment">   * an LSUpd message will carry instances of target LSAs with MaxAge,</span>
<a name="l02184"></a>02184 <span class="comment">   * while other LSUpd message might carry old LSA instances (non-MaxAge).</span>
<a name="l02185"></a>02185 <span class="comment">   * Obviously, the latter would trigger miserable situations that repeat</span>
<a name="l02186"></a>02186 <span class="comment">   * installation and removal of unwanted LSAs indefinitely.</span>
<a name="l02187"></a>02187 <span class="comment">   */</span>
<a name="l02188"></a>02188   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (lsas, node1, nnode1, lsa))
<a name="l02189"></a>02189     {
<a name="l02190"></a>02190       <span class="comment">/* Filter out unwanted LSAs. */</span>
<a name="l02191"></a>02191       <span class="keywordflow">if</span> (! <a class="code" href="ospf__opaque_8h.html#adca492bee2510ab6955b68454830c021">IS_OPAQUE_LSA</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>))
<a name="l02192"></a>02192         <span class="keywordflow">continue</span>;
<a name="l02193"></a>02193       <span class="keywordflow">if</span> (! <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>, &amp;top-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))
<a name="l02194"></a>02194         <span class="keywordflow">continue</span>;
<a name="l02195"></a>02195 
<a name="l02196"></a>02196       <span class="comment">/*</span>
<a name="l02197"></a>02197 <span class="comment">       * Don&#39;t touch an LSA which has MaxAge; two possible cases.</span>
<a name="l02198"></a>02198 <span class="comment">       *</span>
<a name="l02199"></a>02199 <span class="comment">       *   1) This LSA has originally flushed by myself (received LSUpd</span>
<a name="l02200"></a>02200 <span class="comment">       *      message&#39;s router-id is equal to my router-id), and flooded</span>
<a name="l02201"></a>02201 <span class="comment">       *      back by an opaque-capable router.</span>
<a name="l02202"></a>02202 <span class="comment">       *</span>
<a name="l02203"></a>02203 <span class="comment">       *   2) This LSA has expired in an opaque-capable router and thus</span>
<a name="l02204"></a>02204 <span class="comment">       *      flushed by the router.</span>
<a name="l02205"></a>02205 <span class="comment">       */</span>
<a name="l02206"></a>02206       <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (lsa))
<a name="l02207"></a>02207         <span class="keywordflow">continue</span>;
<a name="l02208"></a>02208 
<a name="l02209"></a>02209       <span class="comment">/* If the LSA has installed in the LSDB, nothing to do here. */</span>
<a name="l02210"></a>02210       <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#a02a444e61c60412cd2d17bd130ae06af">ospf_lsa_lookup_by_header</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02211"></a>02211         <span class="keywordflow">continue</span>;
<a name="l02212"></a>02212 
<a name="l02213"></a>02213       <span class="comment">/* Ok, here we go. */</span>
<a name="l02214"></a>02214       <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l02215"></a>02215         {
<a name="l02216"></a>02216         <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l02217"></a>02217           oi = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>;
<a name="l02218"></a>02218           ospf_opaque_exclude_lsa_from_lsreq (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>, nbr, lsa);
<a name="l02219"></a>02219           <span class="keywordflow">break</span>;
<a name="l02220"></a>02220         <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l02221"></a>02221           area = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>;
<a name="l02222"></a>02222           <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (area-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, node2, nnode2, oi))
<a name="l02223"></a>02223             ospf_opaque_exclude_lsa_from_lsreq (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>, nbr, lsa);
<a name="l02224"></a>02224           <span class="keywordflow">break</span>;
<a name="l02225"></a>02225         <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l02226"></a>02226           <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (top-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node2, nnode2, oi))
<a name="l02227"></a>02227             ospf_opaque_exclude_lsa_from_lsreq (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>, nbr, lsa);
<a name="l02228"></a>02228           <span class="keywordflow">break</span>;
<a name="l02229"></a>02229         <span class="keywordflow">default</span>:
<a name="l02230"></a>02230           <span class="keywordflow">break</span>;
<a name="l02231"></a>02231         }
<a name="l02232"></a>02232     }
<a name="l02233"></a>02233 
<a name="l02234"></a>02234 out:
<a name="l02235"></a>02235   <span class="keywordflow">return</span>;
<a name="l02236"></a>02236 }
<a name="l02237"></a>02237 
<a name="l02238"></a>02238 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02239"></a>02239 ospf_opaque_exclude_lsa_from_lsreq (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *nbrs,
<a name="l02240"></a>02240                                     <span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *inbr,
<a name="l02241"></a>02241                                     <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l02242"></a>02242 {
<a name="l02243"></a>02243   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l02244"></a>02244   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *onbr;
<a name="l02245"></a>02245   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *ls_req;
<a name="l02246"></a>02246 
<a name="l02247"></a>02247   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (nbrs); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l02248"></a>02248     {
<a name="l02249"></a>02249       <span class="keywordflow">if</span> ((onbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02250"></a>02250         <span class="keywordflow">continue</span>;
<a name="l02251"></a>02251       <span class="keywordflow">if</span> (onbr == inbr)
<a name="l02252"></a>02252         <span class="keywordflow">continue</span>;
<a name="l02253"></a>02253       <span class="keywordflow">if</span> ((ls_req = <a class="code" href="ospf__flood_8c.html#a27c6e0c56e71024a8f2906b22ff31558">ospf_ls_request_lookup</a> (onbr, lsa)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02254"></a>02254         <span class="keywordflow">continue</span>;
<a name="l02255"></a>02255 
<a name="l02256"></a>02256       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02257"></a>02257         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;LSA[%s]: Exclude this entry from LSReq to send.&quot;</span>, <a class="code" href="ospf__lsa_8c.html#aa3a9efa2cceb09f1a6c7e3b5beba8bf6">dump_lsa_key</a> (lsa));
<a name="l02258"></a>02258 
<a name="l02259"></a>02259       <a class="code" href="ospf__flood_8c.html#a140fef53d3293227a5f51d11580cdcb8">ospf_ls_request_delete</a> (onbr, ls_req);
<a name="l02260"></a>02260 <span class="comment">/*    ospf_check_nbr_loading (onbr);*/</span><span class="comment">/* XXX */</span>
<a name="l02261"></a>02261     }
<a name="l02262"></a>02262 
<a name="l02263"></a>02263   <span class="keywordflow">return</span>;
<a name="l02264"></a>02264 }
<a name="l02265"></a>02265 
<a name="l02266"></a>02266 <span class="keywordtype">void</span>
<a name="l02267"></a>02267 <a class="code" href="ospf__opaque_8h.html#ac8060bfd88d1dd4e8b89f46952154739">ospf_opaque_self_originated_lsa_received</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, 
<a name="l02268"></a>02268                                           <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l02269"></a>02269 {
<a name="l02270"></a>02270   <span class="keyword">struct </span>ospf *top;
<a name="l02271"></a>02271   u_char before;
<a name="l02272"></a>02272 
<a name="l02273"></a>02273   <span class="keywordflow">if</span> ((top = <a class="code" href="ospf__opaque_8h.html#acf470147baa1a2b6de79fe6e00b671af">oi_to_top</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02274"></a>02274     <span class="keywordflow">return</span>;
<a name="l02275"></a>02275 
<a name="l02276"></a>02276   before = <a class="code" href="ospf__opaque_8h.html#a22f5fbb8d8c29a987847ca54159bb24e">IS_OPAQUE_LSA_ORIGINATION_BLOCKED</a> (top-&gt;opaque);
<a name="l02277"></a>02277 
<a name="l02278"></a>02278   <span class="comment">/*</span>
<a name="l02279"></a>02279 <span class="comment">   * Since these LSA entries are not yet installed into corresponding</span>
<a name="l02280"></a>02280 <span class="comment">   * LSDB, just flush them without calling ospf_ls_maxage() afterward.</span>
<a name="l02281"></a>02281 <span class="comment">   */</span>
<a name="l02282"></a>02282   lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a> = htons (<a class="code" href="ospfd_8h.html#a2f2ee186f07abbe2afec70662e026341">OSPF_LSA_MAXAGE</a>);
<a name="l02283"></a>02283   <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l02284"></a>02284     {
<a name="l02285"></a>02285     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l02286"></a>02286       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (top-&gt;opaque, OPAQUE_BLOCK_TYPE_09_LSA_BIT);
<a name="l02287"></a>02287       <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a><span class="comment">/*inbr*/</span>, lsa);
<a name="l02288"></a>02288       <span class="keywordflow">break</span>;
<a name="l02289"></a>02289     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l02290"></a>02290       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (top-&gt;opaque, OPAQUE_BLOCK_TYPE_10_LSA_BIT);
<a name="l02291"></a>02291       <a class="code" href="ospf__flood_8c.html#aa350bf192623114dae7914a98325a71f">ospf_flood_through_area</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a><span class="comment">/*inbr*/</span>, lsa);
<a name="l02292"></a>02292       <span class="keywordflow">break</span>;
<a name="l02293"></a>02293     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l02294"></a>02294       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (top-&gt;opaque, OPAQUE_BLOCK_TYPE_11_LSA_BIT);
<a name="l02295"></a>02295       <a class="code" href="ospf__flood_8c.html#a2169b7a36db2e596585f2d3242ac94b6">ospf_flood_through_as</a> (top, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a><span class="comment">/*inbr*/</span>, lsa);
<a name="l02296"></a>02296       <span class="keywordflow">break</span>;
<a name="l02297"></a>02297     <span class="keywordflow">default</span>:
<a name="l02298"></a>02298       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_self_originated_lsa_received: Unexpected LSA-type(%u)&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l02299"></a>02299       <span class="keywordflow">return</span>;
<a name="l02300"></a>02300     }
<a name="l02301"></a>02301 
<a name="l02302"></a>02302   <a class="code" href="ospf__lsa_8c.html#a85a6af80b4a93ce1a4e9ebb397920de4">ospf_lsa_discard</a> (lsa); <span class="comment">/* List &quot;lsas&quot; will be deleted by caller. */</span>
<a name="l02303"></a>02303 
<a name="l02304"></a>02304   <span class="keywordflow">if</span> (before == 0 &amp;&amp; <a class="code" href="ospf__opaque_8h.html#a22f5fbb8d8c29a987847ca54159bb24e">IS_OPAQUE_LSA_ORIGINATION_BLOCKED</a> (top-&gt;opaque))
<a name="l02305"></a>02305     {
<a name="l02306"></a>02306       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02307"></a>02307         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Block Opaque-LSA origination: OFF -&gt; ON&quot;</span>);
<a name="l02308"></a>02308     }
<a name="l02309"></a>02309 }
<a name="l02310"></a>02310 
<a name="l02311"></a>02311 <span class="keywordtype">void</span>
<a name="l02312"></a>02312 <a class="code" href="ospf__opaque_8h.html#a2df97bff3c2de212258a4767dd778152">ospf_opaque_ls_ack_received</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr, <span class="keyword">struct</span> <a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa)
<a name="l02313"></a>02313 {
<a name="l02314"></a>02314   <span class="keyword">struct </span>ospf *top;
<a name="l02315"></a>02315   <span class="keywordtype">int</span> delay;
<a name="l02316"></a>02316   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02317"></a>02317   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02318"></a>02318 
<a name="l02319"></a>02319   <span class="keywordflow">if</span> ((top = <a class="code" href="ospf__opaque_8h.html#acf470147baa1a2b6de79fe6e00b671af">oi_to_top</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02320"></a>02320     <span class="keywordflow">return</span>;
<a name="l02321"></a>02321   
<a name="l02322"></a>02322   <span class="keywordflow">if</span> (!<a class="code" href="ospf__opaque_8h.html#a22f5fbb8d8c29a987847ca54159bb24e">IS_OPAQUE_LSA_ORIGINATION_BLOCKED</a> (top-&gt;opaque))
<a name="l02323"></a>02323     <span class="keywordflow">return</span>;
<a name="l02324"></a>02324   
<a name="l02325"></a>02325   <span class="keywordflow">switch</span> (lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>)
<a name="l02326"></a>02326     {
<a name="l02327"></a>02327     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>:
<a name="l02328"></a>02328       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (top-&gt;opaque, OPAQUE_BLOCK_TYPE_09_LSA_BIT))
<a name="l02329"></a>02329         ospf_opaque_type9_lsa_rxmt_nbr_check (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>);
<a name="l02330"></a>02330       <span class="comment">/* Callback function... */</span>
<a name="l02331"></a>02331       <span class="keywordflow">break</span>;
<a name="l02332"></a>02332     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>:
<a name="l02333"></a>02333       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (top-&gt;opaque, OPAQUE_BLOCK_TYPE_10_LSA_BIT))
<a name="l02334"></a>02334         ospf_opaque_type10_lsa_rxmt_nbr_check (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>);
<a name="l02335"></a>02335       <span class="comment">/* Callback function... */</span>
<a name="l02336"></a>02336       <span class="keywordflow">break</span>;
<a name="l02337"></a>02337     <span class="keywordflow">case</span> <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>:
<a name="l02338"></a>02338       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (top-&gt;opaque, OPAQUE_BLOCK_TYPE_11_LSA_BIT))
<a name="l02339"></a>02339         ospf_opaque_type11_lsa_rxmt_nbr_check (top);
<a name="l02340"></a>02340       <span class="comment">/* Callback function... */</span>
<a name="l02341"></a>02341       <span class="keywordflow">break</span>;
<a name="l02342"></a>02342     <span class="keywordflow">default</span>:
<a name="l02343"></a>02343       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_opaque_ls_ack_received: Unexpected LSA-type(%u)&quot;</span>, lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l02344"></a>02344       <span class="keywordflow">return</span>;
<a name="l02345"></a>02345     }
<a name="l02346"></a>02346   
<a name="l02347"></a>02347   <span class="keywordflow">if</span> (<a class="code" href="ospf__opaque_8h.html#a22f5fbb8d8c29a987847ca54159bb24e">IS_OPAQUE_LSA_ORIGINATION_BLOCKED</a> (top-&gt;opaque))
<a name="l02348"></a>02348     {
<a name="l02349"></a>02349       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02350"></a>02350         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Block Opaque-LSA origination: ON -&gt; OFF&quot;</span>);
<a name="l02351"></a>02351       <span class="keywordflow">return</span>; <span class="comment">/* Blocking still in progress. */</span>
<a name="l02352"></a>02352     }
<a name="l02353"></a>02353   
<a name="l02354"></a>02354   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (top-&gt;<a class="code" href="structospf.html#adef61932fdc53ba8c61df0343606337f">config</a>, <a class="code" href="ospfd_8h.html#a8a1da6bf18b7cef0bbe2551fdf40a3b4">OSPF_OPAQUE_CAPABLE</a>))
<a name="l02355"></a>02355     <span class="keywordflow">return</span>; <span class="comment">/* Opaque capability condition must have changed. */</span>
<a name="l02356"></a>02356 
<a name="l02357"></a>02357   <span class="comment">/* Ok, let&#39;s start origination of Opaque-LSAs. */</span>
<a name="l02358"></a>02358   delay = <a class="code" href="ospfd_8h.html#a8e517a858d0da0eb3b4fcf8c06391117">OSPF_MIN_LS_INTERVAL</a>;
<a name="l02359"></a>02359 
<a name="l02360"></a>02360   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (top-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
<a name="l02361"></a>02361     {
<a name="l02362"></a>02362       <span class="keywordflow">if</span> (! <a class="code" href="ospf__interface_8c.html#a25678bf88909391ee05583a4e73a838d">ospf_if_is_enable</a> (oi)
<a name="l02363"></a>02363           || ospf_nbr_count_opaque_capable (oi) == 0)
<a name="l02364"></a>02364         <span class="keywordflow">continue</span>;
<a name="l02365"></a>02365 
<a name="l02366"></a>02366       <a class="code" href="ospf__opaque_8h.html#a50c104d86adbf7073dbce6f9e12f3f1f">ospf_opaque_lsa_originate_schedule</a> (oi, &amp;delay);
<a name="l02367"></a>02367     }
<a name="l02368"></a>02368     
<a name="l02369"></a>02369   <span class="keywordflow">return</span>;
<a name="l02370"></a>02370 }
<a name="l02371"></a>02371 
<a name="l02372"></a>02372 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02373"></a>02373 ospf_opaque_type9_lsa_rxmt_nbr_check (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l02374"></a>02374 {
<a name="l02375"></a>02375   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;
<a name="l02376"></a>02376 
<a name="l02377"></a>02377   n = ospf_opaque_nrxmt_self (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>, <a class="code" href="ospf__lsa_8h.html#a9f5ad1d8944ebad62941128f9aeee23a">OSPF_OPAQUE_LINK_LSA</a>);
<a name="l02378"></a>02378   <span class="keywordflow">if</span> (n == 0)
<a name="l02379"></a>02379     {
<a name="l02380"></a>02380       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02381"></a>02381         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Self-originated type-9 Opaque-LSAs: OI(%s): Flush completed&quot;</span>, <a class="code" href="ospf__dump_8h.html#a8617b8a577debdfb2cd2f08c41066497">IF_NAME</a> (oi));
<a name="l02382"></a>02382 
<a name="l02383"></a>02383       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;opaque, OPAQUE_BLOCK_TYPE_09_LSA_BIT);
<a name="l02384"></a>02384     }
<a name="l02385"></a>02385   <span class="keywordflow">return</span>;
<a name="l02386"></a>02386 }
<a name="l02387"></a>02387 
<a name="l02388"></a>02388 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02389"></a>02389 ospf_opaque_type10_lsa_rxmt_nbr_check (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *area)
<a name="l02390"></a>02390 {
<a name="l02391"></a>02391   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l02392"></a>02392   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02393"></a>02393   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> n = 0;
<a name="l02394"></a>02394 
<a name="l02395"></a>02395   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (area-&gt;<a class="code" href="structospf__area.html#aec49fceeb655dde5648208d29dfc66a4">oiflist</a>, node, oi))
<a name="l02396"></a>02396     {
<a name="l02397"></a>02397       <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>.s_addr != <a class="code" href="ospfd_8h.html#a1f0c659cdd89cdac0e14ea0fdec8b7f7">OSPF_AREA_BACKBONE</a>
<a name="l02398"></a>02398           &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a> == <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>) 
<a name="l02399"></a>02399         <span class="keywordflow">continue</span>;
<a name="l02400"></a>02400 
<a name="l02401"></a>02401       n = ospf_opaque_nrxmt_self (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>, <a class="code" href="ospf__lsa_8h.html#affea3ed894380623d4d5bf5dbbad90e9">OSPF_OPAQUE_AREA_LSA</a>);
<a name="l02402"></a>02402       <span class="keywordflow">if</span> (n &gt; 0)
<a name="l02403"></a>02403         <span class="keywordflow">break</span>;
<a name="l02404"></a>02404     }
<a name="l02405"></a>02405 
<a name="l02406"></a>02406   <span class="keywordflow">if</span> (n == 0)
<a name="l02407"></a>02407     {
<a name="l02408"></a>02408       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02409"></a>02409         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Self-originated type-10 Opaque-LSAs: AREA(%s): Flush completed&quot;</span>, inet_ntoa (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>));
<a name="l02410"></a>02410 
<a name="l02411"></a>02411       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>-&gt;opaque, OPAQUE_BLOCK_TYPE_10_LSA_BIT);
<a name="l02412"></a>02412     }
<a name="l02413"></a>02413 
<a name="l02414"></a>02414   <span class="keywordflow">return</span>;
<a name="l02415"></a>02415 }
<a name="l02416"></a>02416 
<a name="l02417"></a>02417 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02418"></a>02418 ospf_opaque_type11_lsa_rxmt_nbr_check (<span class="keyword">struct</span> ospf *top)
<a name="l02419"></a>02419 {
<a name="l02420"></a>02420   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l02421"></a>02421   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02422"></a>02422   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> n = 0;
<a name="l02423"></a>02423 
<a name="l02424"></a>02424   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (top-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
<a name="l02425"></a>02425     {
<a name="l02426"></a>02426       <span class="keywordflow">switch</span> (oi-&gt;<a class="code" href="structospf__interface.html#adb923b0bfebf30738af57dafcf0d0d57">type</a>)
<a name="l02427"></a>02427         {
<a name="l02428"></a>02428         <span class="keywordflow">case</span> <a class="code" href="ospf__interface_8h.html#a45798a2a8b566abd1907f7ae8bc0a2be">OSPF_IFTYPE_VIRTUALLINK</a>:
<a name="l02429"></a>02429           <span class="keywordflow">continue</span>;
<a name="l02430"></a>02430         <span class="keywordflow">default</span>:
<a name="l02431"></a>02431           <span class="keywordflow">break</span>;
<a name="l02432"></a>02432         }
<a name="l02433"></a>02433 
<a name="l02434"></a>02434       n = ospf_opaque_nrxmt_self (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>, <a class="code" href="ospf__lsa_8h.html#a4ec63a35fbaffb7350ff4d69002af21e">OSPF_OPAQUE_AS_LSA</a>);
<a name="l02435"></a>02435       <span class="keywordflow">if</span> (n &gt; 0)
<a name="l02436"></a>02436         <span class="keywordflow">goto</span> out;
<a name="l02437"></a>02437     }
<a name="l02438"></a>02438 
<a name="l02439"></a>02439   <span class="keywordflow">if</span> (n == 0)
<a name="l02440"></a>02440     {
<a name="l02441"></a>02441       <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a6634b26c3071a42864be94d63bfa8d27">IS_DEBUG_OSPF_EVENT</a>)
<a name="l02442"></a>02442         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Self-originated type-11 Opaque-LSAs: Flush completed&quot;</span>);
<a name="l02443"></a>02443 
<a name="l02444"></a>02444       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (top-&gt;opaque, OPAQUE_BLOCK_TYPE_11_LSA_BIT);
<a name="l02445"></a>02445     }
<a name="l02446"></a>02446 
<a name="l02447"></a>02447 out:
<a name="l02448"></a>02448   <span class="keywordflow">return</span>;
<a name="l02449"></a>02449 }
<a name="l02450"></a>02450 
<a name="l02451"></a>02451 <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l02452"></a>02452 ospf_opaque_nrxmt_self (<span class="keyword">struct</span> <a class="code" href="structroute__table.html">route_table</a> *nbrs, <span class="keywordtype">int</span> lsa_type)
<a name="l02453"></a>02453 {
<a name="l02454"></a>02454   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l02455"></a>02455   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l02456"></a>02456   <span class="keyword">struct </span>ospf *top;
<a name="l02457"></a>02457   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> n = 0;
<a name="l02458"></a>02458 
<a name="l02459"></a>02459   <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (nbrs); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l02460"></a>02460     {
<a name="l02461"></a>02461       <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02462"></a>02462         <span class="keywordflow">continue</span>;
<a name="l02463"></a>02463       <span class="keywordflow">if</span> ((top = <a class="code" href="ospf__opaque_8h.html#acf470147baa1a2b6de79fe6e00b671af">oi_to_top</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02464"></a>02464         <span class="keywordflow">continue</span>;
<a name="l02465"></a>02465       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>, &amp;top-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>))
<a name="l02466"></a>02466         <span class="keywordflow">continue</span>;
<a name="l02467"></a>02467       n += <a class="code" href="ospf__flood_8c.html#a2f1065151b3c6941df7b5f5f8f89bd76">ospf_ls_retransmit_count_self</a> (nbr, lsa_type);
<a name="l02468"></a>02468     }
<a name="l02469"></a>02469 
<a name="l02470"></a>02470   <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;
<a name="l02471"></a>02471 }
<a name="l02472"></a>02472 
<a name="l02473"></a>02473 <span class="comment">/*------------------------------------------------------------------------*</span>
<a name="l02474"></a>02474 <span class="comment"> * Followings are util functions; probably be used by Opaque-LSAs only...</span>
<a name="l02475"></a>02475 <span class="comment"> *------------------------------------------------------------------------*/</span>
<a name="l02476"></a>02476 
<a name="l02477"></a>02477 <span class="keywordtype">void</span>
<a name="l02478"></a>02478 <a class="code" href="ospf__opaque_8h.html#a8ca22fea43623338493d6210e2eddcce">htonf</a> (<span class="keywordtype">float</span> *src, <span class="keywordtype">float</span> *dst)
<a name="l02479"></a>02479 {
<a name="l02480"></a>02480   u_int32_t lu1, lu2;
<a name="l02481"></a>02481 
<a name="l02482"></a>02482   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;lu1, src, <span class="keyword">sizeof</span> (u_int32_t));
<a name="l02483"></a>02483   lu2 = htonl (lu1);
<a name="l02484"></a>02484   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (dst, &amp;lu2, <span class="keyword">sizeof</span> (u_int32_t));
<a name="l02485"></a>02485   <span class="keywordflow">return</span>;
<a name="l02486"></a>02486 }
<a name="l02487"></a>02487 
<a name="l02488"></a>02488 <span class="keywordtype">void</span>
<a name="l02489"></a>02489 <a class="code" href="ospf__opaque_8h.html#ab5166b2b901c520c7873315e0a3f6432">ntohf</a> (<span class="keywordtype">float</span> *src, <span class="keywordtype">float</span> *dst)
<a name="l02490"></a>02490 {
<a name="l02491"></a>02491   u_int32_t lu1, lu2;
<a name="l02492"></a>02492 
<a name="l02493"></a>02493   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;lu1, src, <span class="keyword">sizeof</span> (u_int32_t));
<a name="l02494"></a>02494   lu2 = ntohl (lu1);
<a name="l02495"></a>02495   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (dst, &amp;lu2, <span class="keyword">sizeof</span> (u_int32_t));
<a name="l02496"></a>02496   <span class="keywordflow">return</span>;
<a name="l02497"></a>02497 }
<a name="l02498"></a>02498 
<a name="l02499"></a>02499 <span class="keyword">struct </span>ospf *
<a name="l02500"></a>02500 <a class="code" href="ospf__opaque_8h.html#acf470147baa1a2b6de79fe6e00b671af">oi_to_top</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l02501"></a>02501 {
<a name="l02502"></a>02502   <span class="keyword">struct </span>ospf *top = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02503"></a>02503   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l02504"></a>02504 
<a name="l02505"></a>02505   <span class="keywordflow">if</span> (oi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || (area = oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || (top = area-&gt;<a class="code" href="structospf__area.html#a0858934cbc3476d83ba7604309c813ad">ospf</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02506"></a>02506     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Broken relationship for \&quot;OI -&gt; AREA -&gt; OSPF\&quot;?&quot;</span>);
<a name="l02507"></a>02507 
<a name="l02508"></a>02508   <span class="keywordflow">return</span> top;
<a name="l02509"></a>02509 }
<a name="l02510"></a>02510 
<a name="l02511"></a>02511 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_OPAQUE_LSA */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__opaque_8c.html">ospf_opaque.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:07 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
