<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/rtadv.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('rtadv_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">zebra/rtadv.c</div>  </div>
</div>
<div class="contents">
<a href="rtadv_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Router advertisement</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005 6WIND &lt;jean-mickael.guerin@6wind.com&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1999 Kunihiro Ishiguro</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="sockopt_8h.html">sockopt.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="privs_8h.html">privs.h</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="interface_8h.html">zebra/interface.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="rtadv_8h.html">zebra/rtadv.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="debug_8h.html">zebra/debug.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="rib_8h.html">zebra/rib.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="zserv_8h.html">zebra/zserv.h</a>&quot;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>;
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#if defined (HAVE_IPV6) &amp;&amp; defined (RTADV)</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045 <span class="preprocessor">#ifdef OPEN_BSD</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#include &lt;netinet/icmp6.h&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#endif</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="comment">/* If RFC2133 definition is used. */</span>
<a name="l00050"></a>00050 <span class="preprocessor">#ifndef IPV6_JOIN_GROUP</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#define IPV6_JOIN_GROUP  IPV6_ADD_MEMBERSHIP </span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span><span class="preprocessor">#ifndef IPV6_LEAVE_GROUP</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span><span class="preprocessor">#define IPV6_LEAVE_GROUP IPV6_DROP_MEMBERSHIP </span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>
<a name="l00057"></a>00057 <span class="preprocessor">#define ALLNODE   &quot;ff02::1&quot;</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="preprocessor">#define ALLROUTER &quot;ff02::2&quot;</span>
<a name="l00059"></a>00059 <span class="preprocessor"></span>
<a name="l00060"></a>00060 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__t.html">zebra_t</a> <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="keyword">enum</span> rtadv_event {RTADV_START, RTADV_STOP, RTADV_TIMER, 
<a name="l00063"></a>00063           RTADV_TIMER_MSEC, RTADV_READ};
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="keyword">static</span> <span class="keywordtype">void</span> rtadv_event (<span class="keyword">enum</span> rtadv_event, <span class="keywordtype">int</span>);
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="keyword">static</span> <span class="keywordtype">int</span> if_join_all_router (<span class="keywordtype">int</span>, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00068"></a>00068 <span class="keyword">static</span> <span class="keywordtype">int</span> if_leave_all_router (<span class="keywordtype">int</span>, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *);
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="comment">/* Structure which hold status of router advertisement. */</span>
<a name="l00071"></a>00071 <span class="keyword">struct </span>rtadv
<a name="l00072"></a>00072 {
<a name="l00073"></a>00073   <span class="keywordtype">int</span> sock;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075   <span class="keywordtype">int</span> adv_if_count;
<a name="l00076"></a>00076   <span class="keywordtype">int</span> adv_msec_if_count;
<a name="l00077"></a>00077 
<a name="l00078"></a>00078   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *ra_read;
<a name="l00079"></a>00079   <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *ra_timer;
<a name="l00080"></a>00080 };
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="keyword">struct </span>rtadv *rtadv = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="keyword">static</span> <span class="keyword">struct </span>rtadv *
<a name="l00085"></a>00085 rtadv_new (<span class="keywordtype">void</span>)
<a name="l00086"></a>00086 {
<a name="l00087"></a>00087   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtadv));
<a name="l00088"></a>00088 }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00091"></a>00091 rtadv_recv_packet (<span class="keywordtype">int</span> sock, u_char *buf, <span class="keywordtype">int</span> buflen,
<a name="l00092"></a>00092            <span class="keyword">struct</span> sockaddr_in6 *from, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *ifindex,
<a name="l00093"></a>00093            <span class="keywordtype">int</span> *hoplimit)
<a name="l00094"></a>00094 {
<a name="l00095"></a>00095   <span class="keywordtype">int</span> ret;
<a name="l00096"></a>00096   <span class="keyword">struct </span>msghdr <a class="code" href="structmsg.html">msg</a>;
<a name="l00097"></a>00097   <span class="keyword">struct </span>iovec iov;
<a name="l00098"></a>00098   <span class="keyword">struct </span>cmsghdr  *cmsgptr;
<a name="l00099"></a>00099   <span class="keyword">struct </span>in6_addr dst;
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   <span class="keywordtype">char</span> adata[1024];
<a name="l00102"></a>00102 
<a name="l00103"></a>00103   <span class="comment">/* Fill in message and iovec. */</span>
<a name="l00104"></a>00104   <a class="code" href="structmsg.html">msg</a>.msg_name = (<span class="keywordtype">void</span> *) from;
<a name="l00105"></a>00105   <a class="code" href="structmsg.html">msg</a>.msg_namelen = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<a name="l00106"></a>00106   <a class="code" href="structmsg.html">msg</a>.msg_iov = &amp;iov;
<a name="l00107"></a>00107   <a class="code" href="structmsg.html">msg</a>.msg_iovlen = 1;
<a name="l00108"></a>00108   <a class="code" href="structmsg.html">msg</a>.msg_control = (<span class="keywordtype">void</span> *) adata;
<a name="l00109"></a>00109   <a class="code" href="structmsg.html">msg</a>.msg_controllen = <span class="keyword">sizeof</span> adata;
<a name="l00110"></a>00110   iov.iov_base = buf;
<a name="l00111"></a>00111   iov.iov_len = buflen;
<a name="l00112"></a>00112 
<a name="l00113"></a>00113   <span class="comment">/* If recvmsg fail return minus value. */</span>
<a name="l00114"></a>00114   ret = recvmsg (sock, &amp;<a class="code" href="structmsg.html">msg</a>, 0);
<a name="l00115"></a>00115   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00116"></a>00116     <span class="keywordflow">return</span> ret;
<a name="l00117"></a>00117 
<a name="l00118"></a>00118   <span class="keywordflow">for</span> (cmsgptr = <a class="code" href="zebra_8h.html#af3b20d5606eb7dbfc120601cd3a889be">ZCMSG_FIRSTHDR</a>(&amp;<a class="code" href="structmsg.html">msg</a>); cmsgptr != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00119"></a>00119        cmsgptr = CMSG_NXTHDR(&amp;<a class="code" href="structmsg.html">msg</a>, cmsgptr)) 
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121       <span class="comment">/* I want interface index which this packet comes from. */</span>
<a name="l00122"></a>00122       <span class="keywordflow">if</span> (cmsgptr-&gt;cmsg_level == IPPROTO_IPV6 &amp;&amp;
<a name="l00123"></a>00123       cmsgptr-&gt;cmsg_type == IPV6_PKTINFO) 
<a name="l00124"></a>00124     {
<a name="l00125"></a>00125       <span class="keyword">struct </span>in6_pktinfo *ptr;
<a name="l00126"></a>00126       
<a name="l00127"></a>00127       ptr = (<span class="keyword">struct </span>in6_pktinfo *) CMSG_DATA (cmsgptr);
<a name="l00128"></a>00128       *ifindex = ptr-&gt;ipi6_ifindex;
<a name="l00129"></a>00129       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(&amp;dst, &amp;ptr-&gt;ipi6_addr, <span class="keyword">sizeof</span>(ptr-&gt;ipi6_addr));
<a name="l00130"></a>00130         }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132       <span class="comment">/* Incoming packet&#39;s hop limit. */</span>
<a name="l00133"></a>00133       <span class="keywordflow">if</span> (cmsgptr-&gt;cmsg_level == IPPROTO_IPV6 &amp;&amp;
<a name="l00134"></a>00134       cmsgptr-&gt;cmsg_type == IPV6_HOPLIMIT)
<a name="l00135"></a>00135     {
<a name="l00136"></a>00136       <span class="keywordtype">int</span> *hoptr = (<span class="keywordtype">int</span> *) CMSG_DATA (cmsgptr);
<a name="l00137"></a>00137       *hoplimit = *hoptr;
<a name="l00138"></a>00138     }
<a name="l00139"></a>00139     }
<a name="l00140"></a>00140   <span class="keywordflow">return</span> ret;
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 <span class="preprocessor">#define RTADV_MSG_SIZE 4096</span>
<a name="l00144"></a>00144 <span class="preprocessor"></span>
<a name="l00145"></a>00145 <span class="comment">/* Send router advertisement packet. */</span>
<a name="l00146"></a>00146 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00147"></a>00147 rtadv_send_packet (<span class="keywordtype">int</span> sock, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00148"></a>00148 {
<a name="l00149"></a>00149   <span class="keyword">struct </span>msghdr <a class="code" href="structmsg.html">msg</a>;
<a name="l00150"></a>00150   <span class="keyword">struct </span>iovec iov;
<a name="l00151"></a>00151   <span class="keyword">struct </span>cmsghdr  *cmsgptr;
<a name="l00152"></a>00152   <span class="keyword">struct </span>in6_pktinfo *pkt;
<a name="l00153"></a>00153   <span class="keyword">struct </span>sockaddr_in6 addr;
<a name="l00154"></a>00154 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_DL</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span>  <span class="keyword">struct </span>sockaddr_dl *sdl;
<a name="l00156"></a>00156 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_DL */</span>
<a name="l00157"></a>00157   <span class="keyword">static</span> <span class="keywordtype">void</span> *adata = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00158"></a>00158   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> buf[RTADV_MSG_SIZE];
<a name="l00159"></a>00159   <span class="keyword">struct </span>nd_router_advert *rtadv;
<a name="l00160"></a>00160   <span class="keywordtype">int</span> ret;
<a name="l00161"></a>00161   <span class="keywordtype">int</span> len = 0;
<a name="l00162"></a>00162   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00163"></a>00163   <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *rprefix;
<a name="l00164"></a>00164   u_char all_nodes_addr[] = {0xff,0x02,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
<a name="l00165"></a>00165   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00166"></a>00166 
<a name="l00167"></a>00167   <span class="comment">/*</span>
<a name="l00168"></a>00168 <span class="comment">   * Allocate control message bufffer.  This is dynamic because</span>
<a name="l00169"></a>00169 <span class="comment">   * CMSG_SPACE is not guaranteed not to call a function.  Note that</span>
<a name="l00170"></a>00170 <span class="comment">   * the size will be different on different architectures due to</span>
<a name="l00171"></a>00171 <span class="comment">   * differing alignment rules.</span>
<a name="l00172"></a>00172 <span class="comment">   */</span>
<a name="l00173"></a>00173   <span class="keywordflow">if</span> (adata == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00174"></a>00174     {
<a name="l00175"></a>00175       <span class="comment">/* XXX Free on shutdown. */</span>
<a name="l00176"></a>00176       adata = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a>(<a class="code" href="zebra_8h.html#a0769bfc51cb1ffd3fe7f79fe3bf527f3">CMSG_SPACE</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> in6_pktinfo)));
<a name="l00177"></a>00177        
<a name="l00178"></a>00178       <span class="keywordflow">if</span> (adata == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00179"></a>00179     <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;rtadv_send_packet: can&#39;t malloc control data\n&quot;</span>);
<a name="l00180"></a>00180     }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182   <span class="comment">/* Logging of packet. */</span>
<a name="l00183"></a>00183   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a956c6e52675d5f52f15b64fff3b5dfcb">IS_ZEBRA_DEBUG_PACKET</a>)
<a name="l00184"></a>00184     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Router advertisement send to %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   <span class="comment">/* Fill in sockaddr_in6. */</span>
<a name="l00187"></a>00187   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in6));
<a name="l00188"></a>00188   addr.sin6_family = AF_INET6;
<a name="l00189"></a>00189 <span class="preprocessor">#ifdef SIN6_LEN</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span>  addr.sin6_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<a name="l00191"></a>00191 <span class="preprocessor">#endif </span><span class="comment">/* SIN6_LEN */</span>
<a name="l00192"></a>00192   addr.sin6_port = htons (IPPROTO_ICMPV6);
<a name="l00193"></a>00193   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;addr.sin6_addr, all_nodes_addr, sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00194"></a>00194 
<a name="l00195"></a>00195   <span class="comment">/* Fetch interface information. */</span>
<a name="l00196"></a>00196   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00197"></a>00197 
<a name="l00198"></a>00198   <span class="comment">/* Make router advertisement message. */</span>
<a name="l00199"></a>00199   rtadv = (<span class="keyword">struct </span>nd_router_advert *) buf;
<a name="l00200"></a>00200 
<a name="l00201"></a>00201   rtadv-&gt;nd_ra_type = ND_ROUTER_ADVERT;
<a name="l00202"></a>00202   rtadv-&gt;nd_ra_code = 0;
<a name="l00203"></a>00203   rtadv-&gt;nd_ra_cksum = 0;
<a name="l00204"></a>00204 
<a name="l00205"></a>00205   rtadv-&gt;nd_ra_curhoplimit = 64;
<a name="l00206"></a>00206 
<a name="l00207"></a>00207   <span class="comment">/* RFC4191: Default Router Preference is 0 if Router Lifetime is 0. */</span>
<a name="l00208"></a>00208   rtadv-&gt;nd_ra_flags_reserved =
<a name="l00209"></a>00209     zif-&gt;rtadv.AdvDefaultLifetime == 0 ? 0 : zif-&gt;rtadv.DefaultPreference;
<a name="l00210"></a>00210   rtadv-&gt;nd_ra_flags_reserved &lt;&lt;= 3;
<a name="l00211"></a>00211 
<a name="l00212"></a>00212   <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvManagedFlag)
<a name="l00213"></a>00213     rtadv-&gt;nd_ra_flags_reserved |= ND_RA_FLAG_MANAGED;
<a name="l00214"></a>00214   <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvOtherConfigFlag)
<a name="l00215"></a>00215     rtadv-&gt;nd_ra_flags_reserved |= ND_RA_FLAG_OTHER;
<a name="l00216"></a>00216   <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvHomeAgentFlag)
<a name="l00217"></a>00217     rtadv-&gt;nd_ra_flags_reserved |= ND_RA_FLAG_HOME_AGENT;
<a name="l00218"></a>00218   rtadv-&gt;nd_ra_router_lifetime = htons (zif-&gt;rtadv.AdvDefaultLifetime);
<a name="l00219"></a>00219   rtadv-&gt;nd_ra_reachable = htonl (zif-&gt;rtadv.AdvReachableTime);
<a name="l00220"></a>00220   rtadv-&gt;nd_ra_retransmit = htonl (0);
<a name="l00221"></a>00221 
<a name="l00222"></a>00222   len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>nd_router_advert);
<a name="l00223"></a>00223 
<a name="l00224"></a>00224   <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvHomeAgentFlag)
<a name="l00225"></a>00225     {
<a name="l00226"></a>00226       <span class="keyword">struct </span><a class="code" href="structnd__opt__homeagent__info.html">nd_opt_homeagent_info</a> *ndopt_hai = 
<a name="l00227"></a>00227     (<span class="keyword">struct </span><a class="code" href="structnd__opt__homeagent__info.html">nd_opt_homeagent_info</a> *)(buf + len);
<a name="l00228"></a>00228       ndopt_hai-&gt;<a class="code" href="structnd__opt__homeagent__info.html#a79cb427d870bff931bfbf37925c488ae">nd_opt_hai_type</a> = <a class="code" href="rtadv_8h.html#ae1297a0c5e4c94ebe4fdf08b74d9e5c1">ND_OPT_HA_INFORMATION</a>;
<a name="l00229"></a>00229       ndopt_hai-&gt;<a class="code" href="structnd__opt__homeagent__info.html#a2f2ea3f07c30cf3cc6d4a478c9f166e9">nd_opt_hai_len</a> = 1;
<a name="l00230"></a>00230       ndopt_hai-&gt;<a class="code" href="structnd__opt__homeagent__info.html#a23196d120fe8e13c5730edad673fdb28">nd_opt_hai_reserved</a> = 0;
<a name="l00231"></a>00231       ndopt_hai-&gt;<a class="code" href="structnd__opt__homeagent__info.html#a3b7ab76552fdbe7fd78e2eb30a1a3261">nd_opt_hai_preference</a> = htons(zif-&gt;rtadv.HomeAgentPreference);
<a name="l00232"></a>00232       ndopt_hai-&gt;<a class="code" href="structnd__opt__homeagent__info.html#a45393ed35818a5bbc4cbe949da2c6a08">nd_opt_hai_lifetime</a> = htons(zif-&gt;rtadv.HomeAgentLifetime);
<a name="l00233"></a>00233       len += <span class="keyword">sizeof</span>(<span class="keyword">struct </span><a class="code" href="structnd__opt__homeagent__info.html">nd_opt_homeagent_info</a>);
<a name="l00234"></a>00234     }
<a name="l00235"></a>00235 
<a name="l00236"></a>00236   <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvIntervalOption)
<a name="l00237"></a>00237     {
<a name="l00238"></a>00238       <span class="keyword">struct </span><a class="code" href="structnd__opt__adv__interval.html">nd_opt_adv_interval</a> *ndopt_adv = 
<a name="l00239"></a>00239     (<span class="keyword">struct </span><a class="code" href="structnd__opt__adv__interval.html">nd_opt_adv_interval</a> *)(buf + len);
<a name="l00240"></a>00240       ndopt_adv-&gt;<a class="code" href="structnd__opt__adv__interval.html#a92120d7c9ce16effca6bb4f677e35fe9">nd_opt_ai_type</a> = <a class="code" href="rtadv_8h.html#aebfd105a01341a7c00f8a9fc63901cde">ND_OPT_ADV_INTERVAL</a>;
<a name="l00241"></a>00241       ndopt_adv-&gt;<a class="code" href="structnd__opt__adv__interval.html#ad381446f4363d6cc8f95ccdabcc6f9f9">nd_opt_ai_len</a> = 1;
<a name="l00242"></a>00242       ndopt_adv-&gt;<a class="code" href="structnd__opt__adv__interval.html#a285581cb4d04f197a7f0325439c56c31">nd_opt_ai_reserved</a> = 0;
<a name="l00243"></a>00243       ndopt_adv-&gt;<a class="code" href="structnd__opt__adv__interval.html#a20c88b9d3324e0181a806a57c77e4b34">nd_opt_ai_interval</a> = htonl(zif-&gt;rtadv.MaxRtrAdvInterval);
<a name="l00244"></a>00244       len += <span class="keyword">sizeof</span>(<span class="keyword">struct </span><a class="code" href="structnd__opt__adv__interval.html">nd_opt_adv_interval</a>);
<a name="l00245"></a>00245     }
<a name="l00246"></a>00246 
<a name="l00247"></a>00247   <span class="comment">/* Fill in prefix. */</span>
<a name="l00248"></a>00248   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (zif-&gt;rtadv.AdvPrefixList, node, rprefix))
<a name="l00249"></a>00249     {
<a name="l00250"></a>00250       <span class="keyword">struct </span>nd_opt_prefix_info *pinfo;
<a name="l00251"></a>00251 
<a name="l00252"></a>00252       pinfo = (<span class="keyword">struct </span>nd_opt_prefix_info *) (buf + len);
<a name="l00253"></a>00253 
<a name="l00254"></a>00254       pinfo-&gt;nd_opt_pi_type = ND_OPT_PREFIX_INFORMATION;
<a name="l00255"></a>00255       pinfo-&gt;nd_opt_pi_len = 4;
<a name="l00256"></a>00256       pinfo-&gt;nd_opt_pi_prefix_len = rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a35333c65eabf2c5af884c623abefe75c">prefix</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l00257"></a>00257 
<a name="l00258"></a>00258       pinfo-&gt;nd_opt_pi_flags_reserved = 0;
<a name="l00259"></a>00259       <span class="keywordflow">if</span> (rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a6276a1595f61ab45da2d6273a70e01c0">AdvOnLinkFlag</a>)
<a name="l00260"></a>00260     pinfo-&gt;nd_opt_pi_flags_reserved |= ND_OPT_PI_FLAG_ONLINK;
<a name="l00261"></a>00261       <span class="keywordflow">if</span> (rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a0e26102c990b2157c1de33df3689ecaf">AdvAutonomousFlag</a>)
<a name="l00262"></a>00262     pinfo-&gt;nd_opt_pi_flags_reserved |= ND_OPT_PI_FLAG_AUTO;
<a name="l00263"></a>00263       <span class="keywordflow">if</span> (rprefix-&gt;<a class="code" href="structrtadv__prefix.html#ad6fc4c17270c2e7ce5df6a7666544aec">AdvRouterAddressFlag</a>)
<a name="l00264"></a>00264     pinfo-&gt;nd_opt_pi_flags_reserved |= <a class="code" href="rtadv_8h.html#a653aae738b94c27ebb69ed945e105066">ND_OPT_PI_FLAG_RADDR</a>;
<a name="l00265"></a>00265 
<a name="l00266"></a>00266       pinfo-&gt;nd_opt_pi_valid_time = htonl (rprefix-&gt;<a class="code" href="structrtadv__prefix.html#ad1c5428ea50c81f2633685c917ec7874">AdvValidLifetime</a>);
<a name="l00267"></a>00267       pinfo-&gt;nd_opt_pi_preferred_time = htonl (rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a30f431face138f0e97c92b6cff07bc45">AdvPreferredLifetime</a>);
<a name="l00268"></a>00268       pinfo-&gt;nd_opt_pi_reserved2 = 0;
<a name="l00269"></a>00269 
<a name="l00270"></a>00270       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;pinfo-&gt;nd_opt_pi_prefix, &amp;rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a35333c65eabf2c5af884c623abefe75c">prefix</a>.u.prefix6,
<a name="l00271"></a>00271           sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l00274"></a>00274 <span class="preprocessor"></span>      {
<a name="l00275"></a>00275     u_char buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
<a name="l00276"></a>00276 
<a name="l00277"></a>00277     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;DEBUG %s&quot;</span>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;pinfo-&gt;nd_opt_pi_prefix, 
<a name="l00278"></a>00278                buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>));
<a name="l00279"></a>00279 
<a name="l00280"></a>00280       }
<a name="l00281"></a>00281 <span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
<a name="l00282"></a>00282 
<a name="l00283"></a>00283       len += <span class="keyword">sizeof</span> (<span class="keyword">struct </span>nd_opt_prefix_info);
<a name="l00284"></a>00284     }
<a name="l00285"></a>00285 
<a name="l00286"></a>00286   <span class="comment">/* Hardware address. */</span>
<a name="l00287"></a>00287 <span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_DL</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>  sdl = &amp;ifp-&gt;sdl;
<a name="l00289"></a>00289   <span class="keywordflow">if</span> (sdl != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; sdl-&gt;sdl_alen != 0)
<a name="l00290"></a>00290     {
<a name="l00291"></a>00291       buf[len++] = ND_OPT_SOURCE_LINKADDR;
<a name="l00292"></a>00292 
<a name="l00293"></a>00293       <span class="comment">/* Option length should be rounded up to next octet if</span>
<a name="l00294"></a>00294 <span class="comment">         the link address does not end on an octet boundary. */</span>
<a name="l00295"></a>00295       buf[len++] = (sdl-&gt;sdl_alen + 9) &gt;&gt; 3;
<a name="l00296"></a>00296 
<a name="l00297"></a>00297       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (buf + len, LLADDR (sdl), sdl-&gt;sdl_alen);
<a name="l00298"></a>00298       len += sdl-&gt;sdl_alen;
<a name="l00299"></a>00299 
<a name="l00300"></a>00300       <span class="comment">/* Pad option to end on an octet boundary. */</span>
<a name="l00301"></a>00301       memset (buf + len, 0, -(sdl-&gt;sdl_alen + 2) &amp; 0x7);
<a name="l00302"></a>00302       len += -(sdl-&gt;sdl_alen + 2) &amp; 0x7;
<a name="l00303"></a>00303     }
<a name="l00304"></a>00304 <span class="preprocessor">#else</span>
<a name="l00305"></a>00305 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a> != 0)
<a name="l00306"></a>00306     {
<a name="l00307"></a>00307       buf[len++] = ND_OPT_SOURCE_LINKADDR;
<a name="l00308"></a>00308 
<a name="l00309"></a>00309       <span class="comment">/* Option length should be rounded up to next octet if</span>
<a name="l00310"></a>00310 <span class="comment">         the link address does not end on an octet boundary. */</span>
<a name="l00311"></a>00311       buf[len++] = (ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a> + 9) &gt;&gt; 3;
<a name="l00312"></a>00312 
<a name="l00313"></a>00313       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (buf + len, ifp-&gt;<a class="code" href="structinterface.html#a6fe2f3c7e5be26c4e376b514d86f5c22">hw_addr</a>, ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>);
<a name="l00314"></a>00314       len += ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>;
<a name="l00315"></a>00315 
<a name="l00316"></a>00316       <span class="comment">/* Pad option to end on an octet boundary. */</span>
<a name="l00317"></a>00317       memset (buf + len, 0, -(ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a> + 2) &amp; 0x7);
<a name="l00318"></a>00318       len += -(ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a> + 2) &amp; 0x7;
<a name="l00319"></a>00319     }
<a name="l00320"></a>00320 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_DL */</span>
<a name="l00321"></a>00321 
<a name="l00322"></a>00322   <a class="code" href="structmsg.html">msg</a>.msg_name = (<span class="keywordtype">void</span> *) &amp;addr;
<a name="l00323"></a>00323   <a class="code" href="structmsg.html">msg</a>.msg_namelen = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in6);
<a name="l00324"></a>00324   <a class="code" href="structmsg.html">msg</a>.msg_iov = &amp;iov;
<a name="l00325"></a>00325   <a class="code" href="structmsg.html">msg</a>.msg_iovlen = 1;
<a name="l00326"></a>00326   <a class="code" href="structmsg.html">msg</a>.msg_control = (<span class="keywordtype">void</span> *) adata;
<a name="l00327"></a>00327   <a class="code" href="structmsg.html">msg</a>.msg_controllen = <a class="code" href="zebra_8h.html#a0769bfc51cb1ffd3fe7f79fe3bf527f3">CMSG_SPACE</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> in6_pktinfo));
<a name="l00328"></a>00328   <a class="code" href="structmsg.html">msg</a>.msg_flags = 0;
<a name="l00329"></a>00329   iov.iov_base = buf;
<a name="l00330"></a>00330   iov.iov_len = len;
<a name="l00331"></a>00331 
<a name="l00332"></a>00332   cmsgptr = <a class="code" href="zebra_8h.html#af3b20d5606eb7dbfc120601cd3a889be">ZCMSG_FIRSTHDR</a>(&amp;<a class="code" href="structmsg.html">msg</a>);
<a name="l00333"></a>00333   cmsgptr-&gt;cmsg_len = <a class="code" href="zebra_8h.html#a0a270c323a1b54a4bfca7c3485e0b6bf">CMSG_LEN</a>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> in6_pktinfo));
<a name="l00334"></a>00334   cmsgptr-&gt;cmsg_level = IPPROTO_IPV6;
<a name="l00335"></a>00335   cmsgptr-&gt;cmsg_type = IPV6_PKTINFO;
<a name="l00336"></a>00336 
<a name="l00337"></a>00337   pkt = (<span class="keyword">struct </span>in6_pktinfo *) CMSG_DATA (cmsgptr);
<a name="l00338"></a>00338   memset (&amp;pkt-&gt;ipi6_addr, 0, sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00339"></a>00339   pkt-&gt;ipi6_ifindex = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l00340"></a>00340 
<a name="l00341"></a>00341   ret = sendmsg (sock, &amp;<a class="code" href="structmsg.html">msg</a>, 0);
<a name="l00342"></a>00342   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00343"></a>00343     {
<a name="l00344"></a>00344       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rtadv_send_packet: sendmsg %d (%s)\n&quot;</span>,
<a name="l00345"></a>00345         errno, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00346"></a>00346     }
<a name="l00347"></a>00347 }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00350"></a>00350 rtadv_timer (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00351"></a>00351 {
<a name="l00352"></a>00352   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l00353"></a>00353   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00354"></a>00354   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00355"></a>00355   <span class="keywordtype">int</span> period;
<a name="l00356"></a>00356 
<a name="l00357"></a>00357   rtadv-&gt;ra_timer = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00358"></a>00358   <span class="keywordflow">if</span> (rtadv-&gt;adv_msec_if_count == 0)
<a name="l00359"></a>00359     {
<a name="l00360"></a>00360       period = 1000; <span class="comment">/* 1 s */</span>
<a name="l00361"></a>00361       rtadv_event (RTADV_TIMER, 1 <span class="comment">/* 1 s */</span>);
<a name="l00362"></a>00362     } 
<a name="l00363"></a>00363   <span class="keywordflow">else</span>
<a name="l00364"></a>00364     {
<a name="l00365"></a>00365       period = 10; <span class="comment">/* 10 ms */</span>
<a name="l00366"></a>00366       rtadv_event (RTADV_TIMER_MSEC, 10 <span class="comment">/* 10 ms */</span>);
<a name="l00367"></a>00367     }
<a name="l00368"></a>00368 
<a name="l00369"></a>00369   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, nnode, ifp))
<a name="l00370"></a>00370     {
<a name="l00371"></a>00371       <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
<a name="l00372"></a>00372     <span class="keywordflow">continue</span>;
<a name="l00373"></a>00373 
<a name="l00374"></a>00374       zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00375"></a>00375 
<a name="l00376"></a>00376       <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvSendAdvertisements)
<a name="l00377"></a>00377     { 
<a name="l00378"></a>00378       zif-&gt;rtadv.AdvIntervalTimer -= period;
<a name="l00379"></a>00379       <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvIntervalTimer &lt;= 0)
<a name="l00380"></a>00380         {
<a name="l00381"></a>00381           zif-&gt;rtadv.AdvIntervalTimer = zif-&gt;rtadv.MaxRtrAdvInterval;
<a name="l00382"></a>00382           rtadv_send_packet (rtadv-&gt;sock, ifp);
<a name="l00383"></a>00383         }
<a name="l00384"></a>00384     }
<a name="l00385"></a>00385     }
<a name="l00386"></a>00386   <span class="keywordflow">return</span> 0;
<a name="l00387"></a>00387 }
<a name="l00388"></a>00388 
<a name="l00389"></a>00389 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00390"></a>00390 rtadv_process_solicit (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00391"></a>00391 {
<a name="l00392"></a>00392   <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Router solicitation received on %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00393"></a>00393 
<a name="l00394"></a>00394   rtadv_send_packet (rtadv-&gt;sock, ifp);
<a name="l00395"></a>00395 }
<a name="l00396"></a>00396 
<a name="l00397"></a>00397 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00398"></a>00398 rtadv_process_advert (<span class="keywordtype">void</span>)
<a name="l00399"></a>00399 {
<a name="l00400"></a>00400   <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Router advertisement received&quot;</span>);
<a name="l00401"></a>00401 }
<a name="l00402"></a>00402 
<a name="l00403"></a>00403 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00404"></a>00404 rtadv_process_packet (u_char *buf, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex, <span class="keywordtype">int</span> hoplimit)
<a name="l00405"></a>00405 {
<a name="l00406"></a>00406   <span class="keyword">struct </span>icmp6_hdr *icmph;
<a name="l00407"></a>00407   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00408"></a>00408   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00409"></a>00409 
<a name="l00410"></a>00410   <span class="comment">/* Interface search. */</span>
<a name="l00411"></a>00411   ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (ifindex);
<a name="l00412"></a>00412   <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00413"></a>00413     {
<a name="l00414"></a>00414       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Unknown interface index: %d&quot;</span>, ifindex);
<a name="l00415"></a>00415       <span class="keywordflow">return</span>;
<a name="l00416"></a>00416     }
<a name="l00417"></a>00417 
<a name="l00418"></a>00418   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
<a name="l00419"></a>00419     <span class="keywordflow">return</span>;
<a name="l00420"></a>00420 
<a name="l00421"></a>00421   <span class="comment">/* Check interface configuration. */</span>
<a name="l00422"></a>00422   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00423"></a>00423   <span class="keywordflow">if</span> (! zif-&gt;rtadv.AdvSendAdvertisements)
<a name="l00424"></a>00424     <span class="keywordflow">return</span>;
<a name="l00425"></a>00425 
<a name="l00426"></a>00426   <span class="comment">/* ICMP message length check. */</span>
<a name="l00427"></a>00427   <span class="keywordflow">if</span> (len &lt; <span class="keyword">sizeof</span> (<span class="keyword">struct</span> icmp6_hdr))
<a name="l00428"></a>00428     {
<a name="l00429"></a>00429       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Invalid ICMPV6 packet length: %d&quot;</span>, len);
<a name="l00430"></a>00430       <span class="keywordflow">return</span>;
<a name="l00431"></a>00431     }
<a name="l00432"></a>00432 
<a name="l00433"></a>00433   icmph = (<span class="keyword">struct </span>icmp6_hdr *) buf;
<a name="l00434"></a>00434 
<a name="l00435"></a>00435   <span class="comment">/* ICMP message type check. */</span>
<a name="l00436"></a>00436   <span class="keywordflow">if</span> (icmph-&gt;icmp6_type != ND_ROUTER_SOLICIT &amp;&amp;
<a name="l00437"></a>00437       icmph-&gt;icmp6_type != ND_ROUTER_ADVERT)
<a name="l00438"></a>00438     {
<a name="l00439"></a>00439       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Unwanted ICMPV6 message type: %d&quot;</span>, icmph-&gt;icmp6_type);
<a name="l00440"></a>00440       <span class="keywordflow">return</span>;
<a name="l00441"></a>00441     }
<a name="l00442"></a>00442 
<a name="l00443"></a>00443   <span class="comment">/* Hoplimit check. */</span>
<a name="l00444"></a>00444   <span class="keywordflow">if</span> (hoplimit &gt;= 0 &amp;&amp; hoplimit != 255)
<a name="l00445"></a>00445     {
<a name="l00446"></a>00446       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Invalid hoplimit %d for router advertisement ICMP packet&quot;</span>,
<a name="l00447"></a>00447          hoplimit);
<a name="l00448"></a>00448       <span class="keywordflow">return</span>;
<a name="l00449"></a>00449     }
<a name="l00450"></a>00450 
<a name="l00451"></a>00451   <span class="comment">/* Check ICMP message type. */</span>
<a name="l00452"></a>00452   <span class="keywordflow">if</span> (icmph-&gt;icmp6_type == ND_ROUTER_SOLICIT)
<a name="l00453"></a>00453     rtadv_process_solicit (ifp);
<a name="l00454"></a>00454   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (icmph-&gt;icmp6_type == ND_ROUTER_ADVERT)
<a name="l00455"></a>00455     rtadv_process_advert ();
<a name="l00456"></a>00456 
<a name="l00457"></a>00457   <span class="keywordflow">return</span>;
<a name="l00458"></a>00458 }
<a name="l00459"></a>00459 
<a name="l00460"></a>00460 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00461"></a>00461 rtadv_read (<span class="keyword">struct</span> thread *thread)
<a name="l00462"></a>00462 {
<a name="l00463"></a>00463   <span class="keywordtype">int</span> sock;
<a name="l00464"></a>00464   <span class="keywordtype">int</span> len;
<a name="l00465"></a>00465   u_char buf[RTADV_MSG_SIZE];
<a name="l00466"></a>00466   <span class="keyword">struct </span>sockaddr_in6 from;
<a name="l00467"></a>00467   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex = 0;
<a name="l00468"></a>00468   <span class="keywordtype">int</span> hoplimit = -1;
<a name="l00469"></a>00469 
<a name="l00470"></a>00470   sock = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);
<a name="l00471"></a>00471   rtadv-&gt;ra_read = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00472"></a>00472 
<a name="l00473"></a>00473   <span class="comment">/* Register myself. */</span>
<a name="l00474"></a>00474   rtadv_event (RTADV_READ, sock);
<a name="l00475"></a>00475 
<a name="l00476"></a>00476   len = rtadv_recv_packet (sock, buf, BUFSIZ, &amp;from, &amp;ifindex, &amp;hoplimit);
<a name="l00477"></a>00477 
<a name="l00478"></a>00478   <span class="keywordflow">if</span> (len &lt; 0) 
<a name="l00479"></a>00479     {
<a name="l00480"></a>00480       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;router solicitation recv failed: %s.&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00481"></a>00481       <span class="keywordflow">return</span> len;
<a name="l00482"></a>00482     }
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   rtadv_process_packet (buf, (<span class="keywordtype">unsigned</span>)len, ifindex, hoplimit);
<a name="l00485"></a>00485 
<a name="l00486"></a>00486   <span class="keywordflow">return</span> 0;
<a name="l00487"></a>00487 }
<a name="l00488"></a>00488 
<a name="l00489"></a>00489 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00490"></a>00490 rtadv_make_socket (<span class="keywordtype">void</span>)
<a name="l00491"></a>00491 {
<a name="l00492"></a>00492   <span class="keywordtype">int</span> sock;
<a name="l00493"></a>00493   <span class="keywordtype">int</span> ret;
<a name="l00494"></a>00494   <span class="keyword">struct </span>icmp6_filter <a class="code" href="structfilter.html">filter</a>;
<a name="l00495"></a>00495 
<a name="l00496"></a>00496   <span class="keywordflow">if</span> ( <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>) )
<a name="l00497"></a>00497        <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rtadv_make_socket: could not raise privs, %s&quot;</span>,
<a name="l00498"></a>00498                   <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno) );
<a name="l00499"></a>00499                   
<a name="l00500"></a>00500   sock = socket (AF_INET6, SOCK_RAW, IPPROTO_ICMPV6);
<a name="l00501"></a>00501 
<a name="l00502"></a>00502   <span class="keywordflow">if</span> ( <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>) )
<a name="l00503"></a>00503        <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rtadv_make_socket: could not lower privs, %s&quot;</span>,
<a name="l00504"></a>00504                  <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno) );
<a name="l00505"></a>00505 
<a name="l00506"></a>00506   <span class="comment">/* When we can&#39;t make ICMPV6 socket simply back.  Router</span>
<a name="l00507"></a>00507 <span class="comment">     advertisement feature will not be supported. */</span>
<a name="l00508"></a>00508   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00509"></a>00509     <span class="keywordflow">return</span> -1;
<a name="l00510"></a>00510 
<a name="l00511"></a>00511   ret = setsockopt_ipv6_pktinfo (sock, 1);
<a name="l00512"></a>00512   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00513"></a>00513     <span class="keywordflow">return</span> ret;
<a name="l00514"></a>00514   ret = setsockopt_ipv6_multicast_loop (sock, 0);
<a name="l00515"></a>00515   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00516"></a>00516     <span class="keywordflow">return</span> ret;
<a name="l00517"></a>00517   ret = setsockopt_ipv6_unicast_hops (sock, 255);
<a name="l00518"></a>00518   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00519"></a>00519     <span class="keywordflow">return</span> ret;
<a name="l00520"></a>00520   ret = setsockopt_ipv6_multicast_hops (sock, 255);
<a name="l00521"></a>00521   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00522"></a>00522     <span class="keywordflow">return</span> ret;
<a name="l00523"></a>00523   ret = setsockopt_ipv6_hoplimit (sock, 1);
<a name="l00524"></a>00524   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00525"></a>00525     <span class="keywordflow">return</span> ret;
<a name="l00526"></a>00526 
<a name="l00527"></a>00527   ICMP6_FILTER_SETBLOCKALL(&amp;<a class="code" href="structfilter.html">filter</a>);
<a name="l00528"></a>00528   ICMP6_FILTER_SETPASS (ND_ROUTER_SOLICIT, &amp;<a class="code" href="structfilter.html">filter</a>);
<a name="l00529"></a>00529   ICMP6_FILTER_SETPASS (ND_ROUTER_ADVERT, &amp;<a class="code" href="structfilter.html">filter</a>);
<a name="l00530"></a>00530 
<a name="l00531"></a>00531   ret = setsockopt (sock, IPPROTO_ICMPV6, ICMP6_FILTER, &amp;<a class="code" href="structfilter.html">filter</a>,
<a name="l00532"></a>00532             <span class="keyword">sizeof</span> (<span class="keyword">struct</span> icmp6_filter));
<a name="l00533"></a>00533   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00534"></a>00534     {
<a name="l00535"></a>00535       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;ICMP6_FILTER set fail: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00536"></a>00536       <span class="keywordflow">return</span> ret;
<a name="l00537"></a>00537     }
<a name="l00538"></a>00538 
<a name="l00539"></a>00539   <span class="keywordflow">return</span> sock;
<a name="l00540"></a>00540 }
<a name="l00541"></a>00541 
<a name="l00542"></a>00542 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *
<a name="l00543"></a>00543 rtadv_prefix_new (<span class="keywordtype">void</span>)
<a name="l00544"></a>00544 {
<a name="l00545"></a>00545   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba070bbd5440404a495fb5609c654b813e">MTYPE_RTADV_PREFIX</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structrtadv__prefix.html">rtadv_prefix</a>));
<a name="l00546"></a>00546 }
<a name="l00547"></a>00547 
<a name="l00548"></a>00548 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00549"></a>00549 rtadv_prefix_free (<span class="keyword">struct</span> <a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *<a class="code" href="structrtadv__prefix.html">rtadv_prefix</a>)
<a name="l00550"></a>00550 {
<a name="l00551"></a>00551   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba070bbd5440404a495fb5609c654b813e">MTYPE_RTADV_PREFIX</a>, rtadv_prefix);
<a name="l00552"></a>00552 }
<a name="l00553"></a>00553 
<a name="l00554"></a>00554 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *
<a name="l00555"></a>00555 rtadv_prefix_lookup (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *rplist, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00556"></a>00556 {
<a name="l00557"></a>00557   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00558"></a>00558   <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *rprefix;
<a name="l00559"></a>00559 
<a name="l00560"></a>00560   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (rplist, node, rprefix))
<a name="l00561"></a>00561     <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (&amp;rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a35333c65eabf2c5af884c623abefe75c">prefix</a>, p))
<a name="l00562"></a>00562       <span class="keywordflow">return</span> rprefix;
<a name="l00563"></a>00563   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00564"></a>00564 }
<a name="l00565"></a>00565 
<a name="l00566"></a>00566 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *
<a name="l00567"></a>00567 rtadv_prefix_get (<span class="keyword">struct</span> <a class="code" href="structlist.html">list</a> *rplist, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *p)
<a name="l00568"></a>00568 {
<a name="l00569"></a>00569   <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *rprefix;
<a name="l00570"></a>00570   
<a name="l00571"></a>00571   rprefix = rtadv_prefix_lookup (rplist, p);
<a name="l00572"></a>00572   <span class="keywordflow">if</span> (rprefix)
<a name="l00573"></a>00573     <span class="keywordflow">return</span> rprefix;
<a name="l00574"></a>00574 
<a name="l00575"></a>00575   rprefix = rtadv_prefix_new ();
<a name="l00576"></a>00576   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a35333c65eabf2c5af884c623abefe75c">prefix</a>, p, sizeof (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a>));
<a name="l00577"></a>00577   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (rplist, rprefix);
<a name="l00578"></a>00578 
<a name="l00579"></a>00579   <span class="keywordflow">return</span> rprefix;
<a name="l00580"></a>00580 }
<a name="l00581"></a>00581 
<a name="l00582"></a>00582 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00583"></a>00583 rtadv_prefix_set (<span class="keyword">struct</span> <a class="code" href="structzebra__if.html">zebra_if</a> *zif, <span class="keyword">struct</span> <a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *rp)
<a name="l00584"></a>00584 {
<a name="l00585"></a>00585   <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *rprefix;
<a name="l00586"></a>00586   
<a name="l00587"></a>00587   rprefix = rtadv_prefix_get (zif-&gt;rtadv.AdvPrefixList, &amp;rp-&gt;<a class="code" href="structrtadv__prefix.html#a35333c65eabf2c5af884c623abefe75c">prefix</a>);
<a name="l00588"></a>00588 
<a name="l00589"></a>00589   <span class="comment">/* Set parameters. */</span>
<a name="l00590"></a>00590   rprefix-&gt;<a class="code" href="structrtadv__prefix.html#ad1c5428ea50c81f2633685c917ec7874">AdvValidLifetime</a> = rp-&gt;<a class="code" href="structrtadv__prefix.html#ad1c5428ea50c81f2633685c917ec7874">AdvValidLifetime</a>;
<a name="l00591"></a>00591   rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a30f431face138f0e97c92b6cff07bc45">AdvPreferredLifetime</a> = rp-&gt;<a class="code" href="structrtadv__prefix.html#a30f431face138f0e97c92b6cff07bc45">AdvPreferredLifetime</a>;
<a name="l00592"></a>00592   rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a6276a1595f61ab45da2d6273a70e01c0">AdvOnLinkFlag</a> = rp-&gt;<a class="code" href="structrtadv__prefix.html#a6276a1595f61ab45da2d6273a70e01c0">AdvOnLinkFlag</a>;
<a name="l00593"></a>00593   rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a0e26102c990b2157c1de33df3689ecaf">AdvAutonomousFlag</a> = rp-&gt;<a class="code" href="structrtadv__prefix.html#a0e26102c990b2157c1de33df3689ecaf">AdvAutonomousFlag</a>;
<a name="l00594"></a>00594   rprefix-&gt;<a class="code" href="structrtadv__prefix.html#ad6fc4c17270c2e7ce5df6a7666544aec">AdvRouterAddressFlag</a> = rp-&gt;<a class="code" href="structrtadv__prefix.html#ad6fc4c17270c2e7ce5df6a7666544aec">AdvRouterAddressFlag</a>;
<a name="l00595"></a>00595 }
<a name="l00596"></a>00596 
<a name="l00597"></a>00597 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00598"></a>00598 rtadv_prefix_reset (<span class="keyword">struct</span> <a class="code" href="structzebra__if.html">zebra_if</a> *zif, <span class="keyword">struct</span> <a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *rp)
<a name="l00599"></a>00599 {
<a name="l00600"></a>00600   <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *rprefix;
<a name="l00601"></a>00601   
<a name="l00602"></a>00602   rprefix = rtadv_prefix_lookup (zif-&gt;rtadv.AdvPrefixList, &amp;rp-&gt;<a class="code" href="structrtadv__prefix.html#a35333c65eabf2c5af884c623abefe75c">prefix</a>);
<a name="l00603"></a>00603   <span class="keywordflow">if</span> (rprefix != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00604"></a>00604     {
<a name="l00605"></a>00605       <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (zif-&gt;rtadv.AdvPrefixList, (<span class="keywordtype">void</span> *) rprefix);
<a name="l00606"></a>00606       rtadv_prefix_free (rprefix);
<a name="l00607"></a>00607       <span class="keywordflow">return</span> 1;
<a name="l00608"></a>00608     }
<a name="l00609"></a>00609   <span class="keywordflow">else</span>
<a name="l00610"></a>00610     <span class="keywordflow">return</span> 0;
<a name="l00611"></a>00611 }
<a name="l00612"></a>00612 
<a name="l00613"></a>00613 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_suppress_ra,
<a name="l00614"></a>00614        ipv6_nd_suppress_ra_cmd,
<a name="l00615"></a>00615        <span class="stringliteral">&quot;ipv6 nd suppress-ra&quot;</span>,
<a name="l00616"></a>00616        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00617"></a>00617        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00618"></a>00618        <span class="stringliteral">&quot;Suppress Router Advertisement\n&quot;</span>)
<a name="l00619"></a>00619 {
<a name="l00620"></a>00620   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00621"></a>00621   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00622"></a>00622 
<a name="l00623"></a>00623   ifp = <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00624"></a>00624   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00625"></a>00625 
<a name="l00626"></a>00626   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
<a name="l00627"></a>00627     {
<a name="l00628"></a>00628       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid interface%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00629"></a>00629       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00630"></a>00630     }
<a name="l00631"></a>00631 
<a name="l00632"></a>00632   <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvSendAdvertisements)
<a name="l00633"></a>00633     {
<a name="l00634"></a>00634       zif-&gt;rtadv.AdvSendAdvertisements = 0;
<a name="l00635"></a>00635       zif-&gt;rtadv.AdvIntervalTimer = 0;
<a name="l00636"></a>00636       rtadv-&gt;adv_if_count--;
<a name="l00637"></a>00637 
<a name="l00638"></a>00638       if_leave_all_router (rtadv-&gt;sock, ifp);
<a name="l00639"></a>00639 
<a name="l00640"></a>00640       <span class="keywordflow">if</span> (rtadv-&gt;adv_if_count == 0)
<a name="l00641"></a>00641     rtadv_event (RTADV_STOP, 0);
<a name="l00642"></a>00642     }
<a name="l00643"></a>00643 
<a name="l00644"></a>00644   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00645"></a>00645 }
<a name="l00646"></a>00646 
<a name="l00647"></a>00647 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_suppress_ra,
<a name="l00648"></a>00648        no_ipv6_nd_suppress_ra_cmd,
<a name="l00649"></a>00649        <span class="stringliteral">&quot;no ipv6 nd suppress-ra&quot;</span>,
<a name="l00650"></a>00650        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l00651"></a>00651        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00652"></a>00652        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00653"></a>00653        <span class="stringliteral">&quot;Suppress Router Advertisement\n&quot;</span>)
<a name="l00654"></a>00654 {
<a name="l00655"></a>00655   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00656"></a>00656   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00657"></a>00657 
<a name="l00658"></a>00658   ifp = <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00659"></a>00659   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00660"></a>00660 
<a name="l00661"></a>00661   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
<a name="l00662"></a>00662     {
<a name="l00663"></a>00663       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid interface%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00664"></a>00664       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00665"></a>00665     }
<a name="l00666"></a>00666 
<a name="l00667"></a>00667   <span class="keywordflow">if</span> (! zif-&gt;rtadv.AdvSendAdvertisements)
<a name="l00668"></a>00668     {
<a name="l00669"></a>00669       zif-&gt;rtadv.AdvSendAdvertisements = 1;
<a name="l00670"></a>00670       zif-&gt;rtadv.AdvIntervalTimer = 0;
<a name="l00671"></a>00671       rtadv-&gt;adv_if_count++;
<a name="l00672"></a>00672 
<a name="l00673"></a>00673       if_join_all_router (rtadv-&gt;sock, ifp);
<a name="l00674"></a>00674 
<a name="l00675"></a>00675       <span class="keywordflow">if</span> (rtadv-&gt;adv_if_count == 1)
<a name="l00676"></a>00676     rtadv_event (RTADV_START, rtadv-&gt;sock);
<a name="l00677"></a>00677     }
<a name="l00678"></a>00678 
<a name="l00679"></a>00679   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00680"></a>00680 }
<a name="l00681"></a>00681 
<a name="l00682"></a>00682 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_ra_interval_msec,
<a name="l00683"></a>00683        ipv6_nd_ra_interval_msec_cmd,
<a name="l00684"></a>00684        <span class="stringliteral">&quot;ipv6 nd ra-interval msec MILLISECONDS&quot;</span>,
<a name="l00685"></a>00685        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00686"></a>00686        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00687"></a>00687        <span class="stringliteral">&quot;Router Advertisement interval\n&quot;</span>
<a name="l00688"></a>00688        <span class="stringliteral">&quot;Router Advertisement interval in milliseconds\n&quot;</span>)
<a name="l00689"></a>00689 {
<a name="l00690"></a>00690   <span class="keywordtype">int</span> <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;
<a name="l00691"></a>00691   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00692"></a>00692   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00693"></a>00693 
<a name="l00694"></a>00694   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00695"></a>00695   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00696"></a>00696 
<a name="l00697"></a>00697   interval = atoi (argv[0]);
<a name="l00698"></a>00698 
<a name="l00699"></a>00699   <span class="keywordflow">if</span> (interval &lt;= 0)
<a name="l00700"></a>00700     {
<a name="l00701"></a>00701       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid Router Advertisement Interval%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00702"></a>00702       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00703"></a>00703     }
<a name="l00704"></a>00704 
<a name="l00705"></a>00705   <span class="keywordflow">if</span> (zif-&gt;rtadv.MaxRtrAdvInterval % 1000)
<a name="l00706"></a>00706     rtadv-&gt;adv_msec_if_count--;
<a name="l00707"></a>00707 
<a name="l00708"></a>00708   <span class="keywordflow">if</span> (interval % 1000)
<a name="l00709"></a>00709     rtadv-&gt;adv_msec_if_count++;
<a name="l00710"></a>00710   
<a name="l00711"></a>00711   zif-&gt;rtadv.MaxRtrAdvInterval = <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;
<a name="l00712"></a>00712   zif-&gt;rtadv.MinRtrAdvInterval = 0.33 * <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;
<a name="l00713"></a>00713   zif-&gt;rtadv.AdvIntervalTimer = 0;
<a name="l00714"></a>00714 
<a name="l00715"></a>00715   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00716"></a>00716 }
<a name="l00717"></a>00717 
<a name="l00718"></a>00718 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_ra_interval,
<a name="l00719"></a>00719        ipv6_nd_ra_interval_cmd,
<a name="l00720"></a>00720        <span class="stringliteral">&quot;ipv6 nd ra-interval SECONDS&quot;</span>,
<a name="l00721"></a>00721        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00722"></a>00722        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00723"></a>00723        <span class="stringliteral">&quot;Router Advertisement interval\n&quot;</span>
<a name="l00724"></a>00724        <span class="stringliteral">&quot;Router Advertisement interval in seconds\n&quot;</span>)
<a name="l00725"></a>00725 {
<a name="l00726"></a>00726   <span class="keywordtype">int</span> <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;
<a name="l00727"></a>00727   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00728"></a>00728   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00729"></a>00729 
<a name="l00730"></a>00730   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00731"></a>00731   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00732"></a>00732 
<a name="l00733"></a>00733   interval = atoi (argv[0]);
<a name="l00734"></a>00734 
<a name="l00735"></a>00735   <span class="keywordflow">if</span> (interval &lt;= 0)
<a name="l00736"></a>00736     {
<a name="l00737"></a>00737       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid Router Advertisement Interval%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00738"></a>00738       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00739"></a>00739     }
<a name="l00740"></a>00740 
<a name="l00741"></a>00741   <span class="keywordflow">if</span> (zif-&gt;rtadv.MaxRtrAdvInterval % 1000)
<a name="l00742"></a>00742     rtadv-&gt;adv_msec_if_count--;
<a name="l00743"></a>00743     
<a name="l00744"></a>00744   <span class="comment">/* convert to milliseconds */</span>
<a name="l00745"></a>00745   interval = interval * 1000; 
<a name="l00746"></a>00746     
<a name="l00747"></a>00747   zif-&gt;rtadv.MaxRtrAdvInterval = <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;
<a name="l00748"></a>00748   zif-&gt;rtadv.MinRtrAdvInterval = 0.33 * <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;
<a name="l00749"></a>00749   zif-&gt;rtadv.AdvIntervalTimer = 0;
<a name="l00750"></a>00750 
<a name="l00751"></a>00751   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00752"></a>00752 }
<a name="l00753"></a>00753 
<a name="l00754"></a>00754 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_ra_interval,
<a name="l00755"></a>00755        no_ipv6_nd_ra_interval_cmd,
<a name="l00756"></a>00756        <span class="stringliteral">&quot;no ipv6 nd ra-interval&quot;</span>,
<a name="l00757"></a>00757        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l00758"></a>00758        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00759"></a>00759        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00760"></a>00760        <span class="stringliteral">&quot;Router Advertisement interval\n&quot;</span>)
<a name="l00761"></a>00761 {
<a name="l00762"></a>00762   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00763"></a>00763   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00764"></a>00764 
<a name="l00765"></a>00765   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00766"></a>00766   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00767"></a>00767 
<a name="l00768"></a>00768   if (zif-&gt;rtadv.MaxRtrAdvInterval % 1000)
<a name="l00769"></a>00769     rtadv-&gt;adv_msec_if_count--;
<a name="l00770"></a>00770   
<a name="l00771"></a>00771   zif-&gt;rtadv.MaxRtrAdvInterval = RTADV_MAX_RTR_ADV_INTERVAL;
<a name="l00772"></a>00772   zif-&gt;rtadv.MinRtrAdvInterval = RTADV_MIN_RTR_ADV_INTERVAL;
<a name="l00773"></a>00773   zif-&gt;rtadv.AdvIntervalTimer = zif-&gt;rtadv.MaxRtrAdvInterval;
<a name="l00774"></a>00774 
<a name="l00775"></a>00775   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00776"></a>00776 }
<a name="l00777"></a>00777 
<a name="l00778"></a>00778 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_ra_lifetime,
<a name="l00779"></a>00779        ipv6_nd_ra_lifetime_cmd,
<a name="l00780"></a>00780        <span class="stringliteral">&quot;ipv6 nd ra-lifetime SECONDS&quot;</span>,
<a name="l00781"></a>00781        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00782"></a>00782        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00783"></a>00783        <span class="stringliteral">&quot;Router lifetime\n&quot;</span>
<a name="l00784"></a>00784        <span class="stringliteral">&quot;Router lifetime in seconds\n&quot;</span>)
<a name="l00785"></a>00785 {
<a name="l00786"></a>00786   <span class="keywordtype">int</span> lifetime;
<a name="l00787"></a>00787   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00788"></a>00788   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00789"></a>00789 
<a name="l00790"></a>00790   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00791"></a>00791   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00792"></a>00792 
<a name="l00793"></a>00793   lifetime = atoi (argv[0]);
<a name="l00794"></a>00794 
<a name="l00795"></a>00795   <span class="keywordflow">if</span> (lifetime &lt; 0 || lifetime &gt; 0xffff)
<a name="l00796"></a>00796     {
<a name="l00797"></a>00797       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid Router Lifetime%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00798"></a>00798       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00799"></a>00799     }
<a name="l00800"></a>00800 
<a name="l00801"></a>00801   zif-&gt;rtadv.AdvDefaultLifetime = lifetime;
<a name="l00802"></a>00802 
<a name="l00803"></a>00803   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00804"></a>00804 }
<a name="l00805"></a>00805 
<a name="l00806"></a>00806 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_ra_lifetime,
<a name="l00807"></a>00807        no_ipv6_nd_ra_lifetime_cmd,
<a name="l00808"></a>00808        <span class="stringliteral">&quot;no ipv6 nd ra-lifetime&quot;</span>,
<a name="l00809"></a>00809        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l00810"></a>00810        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00811"></a>00811        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00812"></a>00812        <span class="stringliteral">&quot;Router lifetime\n&quot;</span>)
<a name="l00813"></a>00813 {
<a name="l00814"></a>00814   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00815"></a>00815   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00816"></a>00816 
<a name="l00817"></a>00817   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00818"></a>00818   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00819"></a>00819 
<a name="l00820"></a>00820   zif-&gt;rtadv.AdvDefaultLifetime = RTADV_ADV_DEFAULT_LIFETIME;
<a name="l00821"></a>00821 
<a name="l00822"></a>00822   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00823"></a>00823 }
<a name="l00824"></a>00824 
<a name="l00825"></a>00825 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_reachable_time,
<a name="l00826"></a>00826        ipv6_nd_reachable_time_cmd,
<a name="l00827"></a>00827        <span class="stringliteral">&quot;ipv6 nd reachable-time MILLISECONDS&quot;</span>,
<a name="l00828"></a>00828        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00829"></a>00829        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00830"></a>00830        <span class="stringliteral">&quot;Reachable time\n&quot;</span>
<a name="l00831"></a>00831        <span class="stringliteral">&quot;Reachable time in milliseconds\n&quot;</span>)
<a name="l00832"></a>00832 {
<a name="l00833"></a>00833   u_int32_t rtime;
<a name="l00834"></a>00834   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00835"></a>00835   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00836"></a>00836 
<a name="l00837"></a>00837   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00838"></a>00838   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00839"></a>00839 
<a name="l00840"></a>00840   rtime = (u_int32_t) atol (argv[0]);
<a name="l00841"></a>00841 
<a name="l00842"></a>00842   <span class="keywordflow">if</span> (rtime &gt; RTADV_MAX_REACHABLE_TIME)
<a name="l00843"></a>00843     {
<a name="l00844"></a>00844       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid Reachable time%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00845"></a>00845       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00846"></a>00846     }
<a name="l00847"></a>00847 
<a name="l00848"></a>00848   zif-&gt;rtadv.AdvReachableTime = rtime;
<a name="l00849"></a>00849 
<a name="l00850"></a>00850   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00851"></a>00851 }
<a name="l00852"></a>00852 
<a name="l00853"></a>00853 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_reachable_time,
<a name="l00854"></a>00854        no_ipv6_nd_reachable_time_cmd,
<a name="l00855"></a>00855        <span class="stringliteral">&quot;no ipv6 nd reachable-time&quot;</span>,
<a name="l00856"></a>00856        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l00857"></a>00857        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00858"></a>00858        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00859"></a>00859        <span class="stringliteral">&quot;Reachable time\n&quot;</span>)
<a name="l00860"></a>00860 {
<a name="l00861"></a>00861   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00862"></a>00862   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00863"></a>00863 
<a name="l00864"></a>00864   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00865"></a>00865   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00866"></a>00866 
<a name="l00867"></a>00867   zif-&gt;rtadv.AdvReachableTime = 0;
<a name="l00868"></a>00868 
<a name="l00869"></a>00869   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00870"></a>00870 }
<a name="l00871"></a>00871 
<a name="l00872"></a>00872 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_homeagent_preference,
<a name="l00873"></a>00873        ipv6_nd_homeagent_preference_cmd,
<a name="l00874"></a>00874        <span class="stringliteral">&quot;ipv6 nd home-agent-preference PREFERENCE&quot;</span>,
<a name="l00875"></a>00875        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00876"></a>00876        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00877"></a>00877        <span class="stringliteral">&quot;Home Agent preference\n&quot;</span>
<a name="l00878"></a>00878        <span class="stringliteral">&quot;Home Agent preference value 0..65535\n&quot;</span>)
<a name="l00879"></a>00879 {
<a name="l00880"></a>00880   u_int32_t hapref;
<a name="l00881"></a>00881   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00882"></a>00882   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00883"></a>00883 
<a name="l00884"></a>00884   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00885"></a>00885   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00886"></a>00886 
<a name="l00887"></a>00887   hapref = (u_int32_t) atol (argv[0]);
<a name="l00888"></a>00888 
<a name="l00889"></a>00889   <span class="keywordflow">if</span> (hapref &gt; 65535)
<a name="l00890"></a>00890     {
<a name="l00891"></a>00891       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid Home Agent preference%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00892"></a>00892       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00893"></a>00893     }
<a name="l00894"></a>00894 
<a name="l00895"></a>00895   zif-&gt;rtadv.HomeAgentPreference = hapref;
<a name="l00896"></a>00896 
<a name="l00897"></a>00897   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00898"></a>00898 }
<a name="l00899"></a>00899 
<a name="l00900"></a>00900 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_homeagent_preference,
<a name="l00901"></a>00901        no_ipv6_nd_homeagent_preference_cmd,
<a name="l00902"></a>00902        <span class="stringliteral">&quot;no ipv6 nd home-agent-preference&quot;</span>,
<a name="l00903"></a>00903        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l00904"></a>00904        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00905"></a>00905        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00906"></a>00906        <span class="stringliteral">&quot;Home Agent preference\n&quot;</span>)
<a name="l00907"></a>00907 {
<a name="l00908"></a>00908   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00909"></a>00909   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00910"></a>00910 
<a name="l00911"></a>00911   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00912"></a>00912   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00913"></a>00913 
<a name="l00914"></a>00914   zif-&gt;rtadv.HomeAgentPreference = 0;
<a name="l00915"></a>00915 
<a name="l00916"></a>00916   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00917"></a>00917 }
<a name="l00918"></a>00918 
<a name="l00919"></a>00919 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_homeagent_lifetime,
<a name="l00920"></a>00920        ipv6_nd_homeagent_lifetime_cmd,
<a name="l00921"></a>00921        <span class="stringliteral">&quot;ipv6 nd home-agent-lifetime SECONDS&quot;</span>,
<a name="l00922"></a>00922        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00923"></a>00923        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00924"></a>00924        <span class="stringliteral">&quot;Home Agent lifetime\n&quot;</span>
<a name="l00925"></a>00925        <span class="stringliteral">&quot;Home Agent lifetime in seconds\n&quot;</span>)
<a name="l00926"></a>00926 {
<a name="l00927"></a>00927   u_int32_t ha_ltime;
<a name="l00928"></a>00928   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00929"></a>00929   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00930"></a>00930 
<a name="l00931"></a>00931   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00932"></a>00932   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00933"></a>00933 
<a name="l00934"></a>00934   ha_ltime = (u_int32_t) atol (argv[0]);
<a name="l00935"></a>00935 
<a name="l00936"></a>00936   <span class="keywordflow">if</span> (ha_ltime &gt; RTADV_MAX_HALIFETIME)
<a name="l00937"></a>00937     {
<a name="l00938"></a>00938       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid Home Agent Lifetime time%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00939"></a>00939       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00940"></a>00940     }
<a name="l00941"></a>00941 
<a name="l00942"></a>00942   zif-&gt;rtadv.HomeAgentLifetime = ha_ltime;
<a name="l00943"></a>00943 
<a name="l00944"></a>00944   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00945"></a>00945 }
<a name="l00946"></a>00946 
<a name="l00947"></a>00947 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_homeagent_lifetime,
<a name="l00948"></a>00948        no_ipv6_nd_homeagent_lifetime_cmd,
<a name="l00949"></a>00949        <span class="stringliteral">&quot;no ipv6 nd home-agent-lifetime&quot;</span>,
<a name="l00950"></a>00950        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l00951"></a>00951        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00952"></a>00952        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00953"></a>00953        <span class="stringliteral">&quot;Home Agent lifetime\n&quot;</span>)
<a name="l00954"></a>00954 {
<a name="l00955"></a>00955   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00956"></a>00956   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00957"></a>00957 
<a name="l00958"></a>00958   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00959"></a>00959   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00960"></a>00960 
<a name="l00961"></a>00961   zif-&gt;rtadv.HomeAgentLifetime = 0;
<a name="l00962"></a>00962 
<a name="l00963"></a>00963   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00964"></a>00964 }
<a name="l00965"></a>00965 
<a name="l00966"></a>00966 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_managed_config_flag,
<a name="l00967"></a>00967        ipv6_nd_managed_config_flag_cmd,
<a name="l00968"></a>00968        <span class="stringliteral">&quot;ipv6 nd managed-config-flag&quot;</span>,
<a name="l00969"></a>00969        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00970"></a>00970        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00971"></a>00971        <span class="stringliteral">&quot;Managed address configuration flag\n&quot;</span>)
<a name="l00972"></a>00972 {
<a name="l00973"></a>00973   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00974"></a>00974   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00975"></a>00975 
<a name="l00976"></a>00976   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00977"></a>00977   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00978"></a>00978 
<a name="l00979"></a>00979   zif-&gt;rtadv.AdvManagedFlag = 1;
<a name="l00980"></a>00980 
<a name="l00981"></a>00981   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00982"></a>00982 }
<a name="l00983"></a>00983 
<a name="l00984"></a>00984 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_managed_config_flag,
<a name="l00985"></a>00985        no_ipv6_nd_managed_config_flag_cmd,
<a name="l00986"></a>00986        <span class="stringliteral">&quot;no ipv6 nd managed-config-flag&quot;</span>,
<a name="l00987"></a>00987        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l00988"></a>00988        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l00989"></a>00989        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l00990"></a>00990        <span class="stringliteral">&quot;Managed address configuration flag\n&quot;</span>)
<a name="l00991"></a>00991 {
<a name="l00992"></a>00992   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00993"></a>00993   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l00994"></a>00994 
<a name="l00995"></a>00995   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l00996"></a>00996   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l00997"></a>00997 
<a name="l00998"></a>00998   zif-&gt;rtadv.AdvManagedFlag = 0;
<a name="l00999"></a>00999 
<a name="l01000"></a>01000   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01001"></a>01001 }
<a name="l01002"></a>01002 
<a name="l01003"></a>01003 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_homeagent_config_flag,
<a name="l01004"></a>01004        ipv6_nd_homeagent_config_flag_cmd,
<a name="l01005"></a>01005        <span class="stringliteral">&quot;ipv6 nd home-agent-config-flag&quot;</span>,
<a name="l01006"></a>01006        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l01007"></a>01007        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l01008"></a>01008        <span class="stringliteral">&quot;Home Agent configuration flag\n&quot;</span>)
<a name="l01009"></a>01009 {
<a name="l01010"></a>01010   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01011"></a>01011   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l01012"></a>01012 
<a name="l01013"></a>01013   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l01014"></a>01014   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01015"></a>01015 
<a name="l01016"></a>01016   zif-&gt;rtadv.AdvHomeAgentFlag = 1;
<a name="l01017"></a>01017 
<a name="l01018"></a>01018   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01019"></a>01019 }
<a name="l01020"></a>01020 
<a name="l01021"></a>01021 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_homeagent_config_flag,
<a name="l01022"></a>01022        no_ipv6_nd_homeagent_config_flag_cmd,
<a name="l01023"></a>01023        <span class="stringliteral">&quot;no ipv6 nd home-agent-config-flag&quot;</span>,
<a name="l01024"></a>01024        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01025"></a>01025        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l01026"></a>01026        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l01027"></a>01027        <span class="stringliteral">&quot;Home Agent configuration flag\n&quot;</span>)
<a name="l01028"></a>01028 {
<a name="l01029"></a>01029   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01030"></a>01030   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l01031"></a>01031 
<a name="l01032"></a>01032   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l01033"></a>01033   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01034"></a>01034 
<a name="l01035"></a>01035   zif-&gt;rtadv.AdvHomeAgentFlag = 0;
<a name="l01036"></a>01036 
<a name="l01037"></a>01037   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01038"></a>01038 }
<a name="l01039"></a>01039 
<a name="l01040"></a>01040 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_adv_interval_config_option,
<a name="l01041"></a>01041        ipv6_nd_adv_interval_config_option_cmd,
<a name="l01042"></a>01042        <span class="stringliteral">&quot;ipv6 nd adv-interval-option&quot;</span>,
<a name="l01043"></a>01043        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l01044"></a>01044        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l01045"></a>01045        <span class="stringliteral">&quot;Advertisement Interval Option\n&quot;</span>)
<a name="l01046"></a>01046 {
<a name="l01047"></a>01047   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01048"></a>01048   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l01049"></a>01049 
<a name="l01050"></a>01050   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l01051"></a>01051   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01052"></a>01052 
<a name="l01053"></a>01053   zif-&gt;rtadv.AdvIntervalOption = 1;
<a name="l01054"></a>01054 
<a name="l01055"></a>01055   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01056"></a>01056 }
<a name="l01057"></a>01057 
<a name="l01058"></a>01058 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_adv_interval_config_option,
<a name="l01059"></a>01059        no_ipv6_nd_adv_interval_config_option_cmd,
<a name="l01060"></a>01060        <span class="stringliteral">&quot;no ipv6 nd adv-interval-option&quot;</span>,
<a name="l01061"></a>01061        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01062"></a>01062        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l01063"></a>01063        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l01064"></a>01064        <span class="stringliteral">&quot;Advertisement Interval Option\n&quot;</span>)
<a name="l01065"></a>01065 {
<a name="l01066"></a>01066   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01067"></a>01067   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l01068"></a>01068 
<a name="l01069"></a>01069   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l01070"></a>01070   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01071"></a>01071 
<a name="l01072"></a>01072   zif-&gt;rtadv.AdvIntervalOption = 0;
<a name="l01073"></a>01073 
<a name="l01074"></a>01074   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01075"></a>01075 }
<a name="l01076"></a>01076 
<a name="l01077"></a>01077 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_other_config_flag,
<a name="l01078"></a>01078        ipv6_nd_other_config_flag_cmd,
<a name="l01079"></a>01079        <span class="stringliteral">&quot;ipv6 nd other-config-flag&quot;</span>,
<a name="l01080"></a>01080        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l01081"></a>01081        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l01082"></a>01082        <span class="stringliteral">&quot;Other statefull configuration flag\n&quot;</span>)
<a name="l01083"></a>01083 {
<a name="l01084"></a>01084   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01085"></a>01085   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l01086"></a>01086 
<a name="l01087"></a>01087   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l01088"></a>01088   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01089"></a>01089 
<a name="l01090"></a>01090   zif-&gt;rtadv.AdvOtherConfigFlag = 1;
<a name="l01091"></a>01091 
<a name="l01092"></a>01092   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01093"></a>01093 }
<a name="l01094"></a>01094 
<a name="l01095"></a>01095 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_other_config_flag,
<a name="l01096"></a>01096        no_ipv6_nd_other_config_flag_cmd,
<a name="l01097"></a>01097        <span class="stringliteral">&quot;no ipv6 nd other-config-flag&quot;</span>,
<a name="l01098"></a>01098        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01099"></a>01099        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l01100"></a>01100        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l01101"></a>01101        <span class="stringliteral">&quot;Other statefull configuration flag\n&quot;</span>)
<a name="l01102"></a>01102 {
<a name="l01103"></a>01103   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01104"></a>01104   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *zif;
<a name="l01105"></a>01105 
<a name="l01106"></a>01106   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l01107"></a>01107   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01108"></a>01108 
<a name="l01109"></a>01109   zif-&gt;rtadv.AdvOtherConfigFlag = 0;
<a name="l01110"></a>01110 
<a name="l01111"></a>01111   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01112"></a>01112 }
<a name="l01113"></a>01113 
<a name="l01114"></a>01114 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_prefix,
<a name="l01115"></a>01115        ipv6_nd_prefix_cmd,
<a name="l01116"></a>01116        <span class="stringliteral">&quot;ipv6 nd prefix X:X::X:X/M (&lt;0-4294967295&gt;|infinite) &quot;</span>
<a name="l01117"></a>01117        <span class="stringliteral">&quot;(&lt;0-4294967295&gt;|infinite) (off-link|) (no-autoconfig|) (router-address|)&quot;</span>,
<a name="l01118"></a>01118        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l01119"></a>01119        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l01120"></a>01120        <span class="stringliteral">&quot;Prefix information\n&quot;</span>
<a name="l01121"></a>01121        <span class="stringliteral">&quot;IPv6 prefix\n&quot;</span>
<a name="l01122"></a>01122        <span class="stringliteral">&quot;Valid lifetime in seconds\n&quot;</span>
<a name="l01123"></a>01123        <span class="stringliteral">&quot;Infinite valid lifetime\n&quot;</span>
<a name="l01124"></a>01124        <span class="stringliteral">&quot;Preferred lifetime in seconds\n&quot;</span>
<a name="l01125"></a>01125        <span class="stringliteral">&quot;Infinite preferred lifetime\n&quot;</span>
<a name="l01126"></a>01126        <span class="stringliteral">&quot;Do not use prefix for onlink determination\n&quot;</span>
<a name="l01127"></a>01127        <span class="stringliteral">&quot;Do not use prefix for autoconfiguration\n&quot;</span>
<a name="l01128"></a>01128        <span class="stringliteral">&quot;Set Router Address flag\n&quot;</span>)
<a name="l01129"></a>01129 {
<a name="l01130"></a>01130   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l01131"></a>01131   <span class="keywordtype">int</span> ret;
<a name="l01132"></a>01132   <span class="keywordtype">int</span> cursor = 1;
<a name="l01133"></a>01133   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01134"></a>01134   <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *<a class="code" href="structzebra__if.html">zebra_if</a>;
<a name="l01135"></a>01135   <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> rp;
<a name="l01136"></a>01136 
<a name="l01137"></a>01137   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l01138"></a>01138   zebra_if = ifp-&gt;info;
<a name="l01139"></a>01139 
<a name="l01140"></a>01140   ret = str2prefix_ipv6 (argv[0], (<span class="keyword">struct</span> prefix_ipv6 *) &amp;rp.<a class="code" href="structrtadv__prefix.html#a35333c65eabf2c5af884c623abefe75c">prefix</a>);
<a name="l01141"></a>01141   <span class="keywordflow">if</span> (!ret)
<a name="l01142"></a>01142     {
<a name="l01143"></a>01143       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Malformed IPv6 prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01144"></a>01144       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01145"></a>01145     }
<a name="l01146"></a>01146   rp.<a class="code" href="structrtadv__prefix.html#a6276a1595f61ab45da2d6273a70e01c0">AdvOnLinkFlag</a> = 1;
<a name="l01147"></a>01147   rp.<a class="code" href="structrtadv__prefix.html#a0e26102c990b2157c1de33df3689ecaf">AdvAutonomousFlag</a> = 1;
<a name="l01148"></a>01148   rp.<a class="code" href="structrtadv__prefix.html#ad6fc4c17270c2e7ce5df6a7666544aec">AdvRouterAddressFlag</a> = 0;
<a name="l01149"></a>01149   rp.<a class="code" href="structrtadv__prefix.html#ad1c5428ea50c81f2633685c917ec7874">AdvValidLifetime</a> = <a class="code" href="rtadv_8h.html#a07fbd3506a9631ad20b0f2fb3b87e762">RTADV_VALID_LIFETIME</a>;
<a name="l01150"></a>01150   rp.<a class="code" href="structrtadv__prefix.html#a30f431face138f0e97c92b6cff07bc45">AdvPreferredLifetime</a> = <a class="code" href="rtadv_8h.html#a723100d76b91d22ed547036e8f1db4fe">RTADV_PREFERRED_LIFETIME</a>;
<a name="l01151"></a>01151 
<a name="l01152"></a>01152   <span class="keywordflow">if</span> (argc &gt; 1)
<a name="l01153"></a>01153     {
<a name="l01154"></a>01154       <span class="keywordflow">if</span> ((isdigit(argv[1][0])) || strncmp (argv[1], <span class="stringliteral">&quot;i&quot;</span>, 1) == 0)
<a name="l01155"></a>01155     {
<a name="l01156"></a>01156       <span class="keywordflow">if</span> ( strncmp (argv[1], <span class="stringliteral">&quot;i&quot;</span>, 1) == 0)
<a name="l01157"></a>01157         rp.<a class="code" href="structrtadv__prefix.html#ad1c5428ea50c81f2633685c917ec7874">AdvValidLifetime</a> = <a class="code" href="zebra_8h.html#ab5eb23180f7cc12b7d6c04a8ec067fdd">UINT32_MAX</a>;
<a name="l01158"></a>01158       <span class="keywordflow">else</span>
<a name="l01159"></a>01159         rp.<a class="code" href="structrtadv__prefix.html#ad1c5428ea50c81f2633685c917ec7874">AdvValidLifetime</a> = (u_int32_t) strtoll (argv[1],
<a name="l01160"></a>01160         (<span class="keywordtype">char</span> **)<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 10);
<a name="l01161"></a>01161       
<a name="l01162"></a>01162       <span class="keywordflow">if</span> ( strncmp (argv[2], <span class="stringliteral">&quot;i&quot;</span>, 1) == 0)
<a name="l01163"></a>01163         rp.<a class="code" href="structrtadv__prefix.html#a30f431face138f0e97c92b6cff07bc45">AdvPreferredLifetime</a> = <a class="code" href="zebra_8h.html#ab5eb23180f7cc12b7d6c04a8ec067fdd">UINT32_MAX</a>;
<a name="l01164"></a>01164       <span class="keywordflow">else</span>
<a name="l01165"></a>01165         rp.<a class="code" href="structrtadv__prefix.html#a30f431face138f0e97c92b6cff07bc45">AdvPreferredLifetime</a> = (u_int32_t) strtoll (argv[2],
<a name="l01166"></a>01166         (<span class="keywordtype">char</span> **)<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 10);
<a name="l01167"></a>01167 
<a name="l01168"></a>01168       <span class="keywordflow">if</span> (rp.<a class="code" href="structrtadv__prefix.html#a30f431face138f0e97c92b6cff07bc45">AdvPreferredLifetime</a> &gt; rp.<a class="code" href="structrtadv__prefix.html#ad1c5428ea50c81f2633685c917ec7874">AdvValidLifetime</a>)
<a name="l01169"></a>01169         {
<a name="l01170"></a>01170           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Invalid preferred lifetime%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01171"></a>01171           <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01172"></a>01172         }
<a name="l01173"></a>01173       cursor = cursor + 2;
<a name="l01174"></a>01174     }
<a name="l01175"></a>01175       <span class="keywordflow">if</span> (argc &gt; cursor)
<a name="l01176"></a>01176     {
<a name="l01177"></a>01177       <span class="keywordflow">for</span> (i = cursor; i &lt; argc; i++)
<a name="l01178"></a>01178         {
<a name="l01179"></a>01179           <span class="keywordflow">if</span> (strncmp (argv[i], <span class="stringliteral">&quot;of&quot;</span>, 2) == 0)
<a name="l01180"></a>01180         rp.<a class="code" href="structrtadv__prefix.html#a6276a1595f61ab45da2d6273a70e01c0">AdvOnLinkFlag</a> = 0;
<a name="l01181"></a>01181           <span class="keywordflow">if</span> (strncmp (argv[i], <span class="stringliteral">&quot;no&quot;</span>, 2) == 0)
<a name="l01182"></a>01182         rp.<a class="code" href="structrtadv__prefix.html#a0e26102c990b2157c1de33df3689ecaf">AdvAutonomousFlag</a> = 0;
<a name="l01183"></a>01183           <span class="keywordflow">if</span> (strncmp (argv[i], <span class="stringliteral">&quot;ro&quot;</span>, 2) == 0)
<a name="l01184"></a>01184         rp.<a class="code" href="structrtadv__prefix.html#ad6fc4c17270c2e7ce5df6a7666544aec">AdvRouterAddressFlag</a> = 1;
<a name="l01185"></a>01185         }
<a name="l01186"></a>01186     }
<a name="l01187"></a>01187     }
<a name="l01188"></a>01188 
<a name="l01189"></a>01189   rtadv_prefix_set (zebra_if, &amp;rp);
<a name="l01190"></a>01190 
<a name="l01191"></a>01191   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01192"></a>01192 }
<a name="l01193"></a>01193 
<a name="l01194"></a>01194 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01195"></a>01195        ipv6_nd_prefix_val_nortaddr_cmd,
<a name="l01196"></a>01196        <span class="stringliteral">&quot;ipv6 nd prefix X:X::X:X/M (&lt;0-4294967295&gt;|infinite) &quot;</span>
<a name="l01197"></a>01197        <span class="stringliteral">&quot;(&lt;0-4294967295&gt;|infinite) (off-link|) (no-autoconfig|)&quot;</span>,
<a name="l01198"></a>01198        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l01199"></a>01199        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l01200"></a>01200        <span class="stringliteral">&quot;Prefix information\n&quot;</span>
<a name="l01201"></a>01201        <span class="stringliteral">&quot;IPv6 prefix\n&quot;</span>
<a name="l01202"></a>01202        <span class="stringliteral">&quot;Valid lifetime in seconds\n&quot;</span>
<a name="l01203"></a>01203        <span class="stringliteral">&quot;Infinite valid lifetime\n&quot;</span>
<a name="l01204"></a>01204        <span class="stringliteral">&quot;Preferred lifetime in seconds\n&quot;</span>
<a name="l01205"></a>01205        <span class="stringliteral">&quot;Infinite preferred lifetime\n&quot;</span>
<a name="l01206"></a>01206        <span class="stringliteral">&quot;Do not use prefix for onlink determination\n&quot;</span>
<a name="l01207"></a>01207        <span class="stringliteral">&quot;Do not use prefix for autoconfiguration\n&quot;</span>)
<a name="l01208"></a>01208 
<a name="l01209"></a>01209 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01210"></a>01210        ipv6_nd_prefix_val_rev_cmd,
<a name="l01211"></a>01211        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (&lt;0-4294967295&gt;|infinite) &quot;
<a name="l01212"></a>01212        &quot;(&lt;0-4294967295&gt;|infinite) (no-autoconfig|) (off-link|)&quot;,
<a name="l01213"></a>01213        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01214"></a>01214        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01215"></a>01215        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01216"></a>01216        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01217"></a>01217        &quot;Valid lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01218"></a>01218        &quot;Infinite valid lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01219"></a>01219        &quot;Preferred lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01220"></a>01220        &quot;Infinite preferred lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01221"></a>01221        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for autoconfiguration\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01222"></a>01222        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for onlink determination\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01223"></a>01223 
<a name="l01224"></a>01224 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01225"></a>01225        ipv6_nd_prefix_val_rev_rtaddr_cmd,
<a name="l01226"></a>01226        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (&lt;0-4294967295&gt;|infinite) &quot;
<a name="l01227"></a>01227        &quot;(&lt;0-4294967295&gt;|infinite) (no-autoconfig|) (off-link|) (router-address|)&quot;,
<a name="l01228"></a>01228        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01229"></a>01229        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01230"></a>01230        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01231"></a>01231        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01232"></a>01232        &quot;Valid lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01233"></a>01233        &quot;Infinite valid lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01234"></a>01234        &quot;Preferred lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01235"></a>01235        &quot;Infinite preferred lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01236"></a>01236        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for autoconfiguration\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01237"></a>01237        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for onlink determination\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01238"></a>01238        &quot;Set Router Address flag\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01239"></a>01239 
<a name="l01240"></a>01240 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01241"></a>01241        ipv6_nd_prefix_val_noauto_cmd,
<a name="l01242"></a>01242        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (&lt;0-4294967295&gt;|infinite) &quot;
<a name="l01243"></a>01243        &quot;(&lt;0-4294967295&gt;|infinite) (no-autoconfig|)&quot;,
<a name="l01244"></a>01244        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01245"></a>01245        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01246"></a>01246        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01247"></a>01247        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01248"></a>01248        &quot;Valid lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01249"></a>01249        &quot;Infinite valid lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01250"></a>01250        &quot;Preferred lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01251"></a>01251        &quot;Infinite preferred lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01252"></a>01252        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for autoconfiguration&quot;)
<a name="l01253"></a>01253 
<a name="l01254"></a>01254 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01255"></a>01255        ipv6_nd_prefix_val_offlink_cmd,
<a name="l01256"></a>01256        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (&lt;0-4294967295&gt;|infinite) &quot;
<a name="l01257"></a>01257        &quot;(&lt;0-4294967295&gt;|infinite) (off-link|)&quot;,
<a name="l01258"></a>01258        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01259"></a>01259        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01260"></a>01260        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01261"></a>01261        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01262"></a>01262        &quot;Valid lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01263"></a>01263        &quot;Infinite valid lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01264"></a>01264        &quot;Preferred lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01265"></a>01265        &quot;Infinite preferred lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01266"></a>01266        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for onlink determination\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01267"></a>01267 
<a name="l01268"></a>01268 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01269"></a>01269        ipv6_nd_prefix_val_rtaddr_cmd,
<a name="l01270"></a>01270        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (&lt;0-4294967295&gt;|infinite) &quot;
<a name="l01271"></a>01271        &quot;(&lt;0-4294967295&gt;|infinite) (router-address|)&quot;,
<a name="l01272"></a>01272        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01273"></a>01273        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01274"></a>01274        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01275"></a>01275        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01276"></a>01276        &quot;Valid lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01277"></a>01277        &quot;Infinite valid lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01278"></a>01278        &quot;Preferred lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01279"></a>01279        &quot;Infinite preferred lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01280"></a>01280        &quot;Set Router Address flag\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01281"></a>01281 
<a name="l01282"></a>01282 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01283"></a>01283        ipv6_nd_prefix_val_cmd,
<a name="l01284"></a>01284        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (&lt;0-4294967295&gt;|infinite) &quot;
<a name="l01285"></a>01285        &quot;(&lt;0-4294967295&gt;|infinite)&quot;,
<a name="l01286"></a>01286        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01287"></a>01287        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01288"></a>01288        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01289"></a>01289        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01290"></a>01290        &quot;Valid lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01291"></a>01291        &quot;Infinite valid lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01292"></a>01292        &quot;Preferred lifetime <a class="code" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> seconds\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01293"></a>01293        &quot;Infinite preferred lifetime\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01294"></a>01294 
<a name="l01295"></a>01295 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01296"></a>01296        ipv6_nd_prefix_noval_cmd,
<a name="l01297"></a>01297        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (no-autoconfig|) (off-link|)&quot;,
<a name="l01298"></a>01298        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01299"></a>01299        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01300"></a>01300        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01301"></a>01301        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01302"></a>01302        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for autoconfiguration\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01303"></a>01303        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for onlink determination\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01304"></a>01304 
<a name="l01305"></a>01305 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01306"></a>01306        ipv6_nd_prefix_noval_rev_cmd,
<a name="l01307"></a>01307        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (off-link|) (no-autoconfig|)&quot;,
<a name="l01308"></a>01308        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01309"></a>01309        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01310"></a>01310        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01311"></a>01311        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01312"></a>01312        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for onlink determination\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01313"></a>01313        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for autoconfiguration\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01314"></a>01314 
<a name="l01315"></a>01315 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01316"></a>01316        ipv6_nd_prefix_noval_noauto_cmd,
<a name="l01317"></a>01317        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (no-autoconfig|)&quot;,
<a name="l01318"></a>01318        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01319"></a>01319        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01320"></a>01320        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01321"></a>01321        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01322"></a>01322        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for autoconfiguration\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01323"></a>01323 
<a name="l01324"></a>01324 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01325"></a>01325        ipv6_nd_prefix_noval_offlink_cmd,
<a name="l01326"></a>01326        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (off-link|)&quot;,
<a name="l01327"></a>01327        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01328"></a>01328        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01329"></a>01329        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01330"></a>01330        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01331"></a>01331        &quot;Do not use <a class="code" href="structprefix.html">prefix</a> for onlink determination\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01332"></a>01332 
<a name="l01333"></a>01333 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01334"></a>01334        ipv6_nd_prefix_noval_rtaddr_cmd,
<a name="l01335"></a>01335        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M (router-address|)&quot;,
<a name="l01336"></a>01336        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01337"></a>01337        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01338"></a>01338        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01339"></a>01339        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01340"></a>01340        &quot;Set Router Address flag\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01341"></a>01341 
<a name="l01342"></a>01342 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (ipv6_nd_prefix,
<a name="l01343"></a>01343        ipv6_nd_prefix_prefix_cmd,
<a name="l01344"></a>01344        &quot;ipv6 nd <a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>::<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>:<a class="code" href="spgrid_8c.html#a90fd6c5f495a36ebf73ab5d2f1c21b47">X</a>/M&quot;,
<a name="l01345"></a>01345        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01346"></a>01346        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01347"></a>01347        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01348"></a>01348        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01349"></a>01349 
<a name="l01350"></a>01350 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_prefix,
<a name="l01351"></a>01351        no_ipv6_nd_prefix_cmd,
<a name="l01352"></a>01352        &quot;no ipv6 nd <a class="code" href="structprefix.html">prefix</a> IPV6PREFIX&quot;,
<a name="l01353"></a>01353        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01354"></a>01354        &quot;Interface IPv6 <a class="code" href="structconfig.html">config</a> commands\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01355"></a>01355        &quot;Neighbor discovery\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01356"></a>01356        &quot;Prefix information\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l01357"></a>01357        &quot;IPv6 <a class="code" href="structprefix.html">prefix</a>\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l01358"></a>01358 {
<a name="l01359"></a>01359   <span class="keywordtype">int</span> ret;
<a name="l01360"></a>01360   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01361"></a>01361   <span class="keyword">struct </span>zebra_if *zebra_if;
<a name="l01362"></a>01362   <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> rp;
<a name="l01363"></a>01363 
<a name="l01364"></a>01364   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l01365"></a>01365   zebra_if = ifp-&gt;info;
<a name="l01366"></a>01366 
<a name="l01367"></a>01367   ret = str2prefix_ipv6 (argv[0], (<span class="keyword">struct</span> prefix_ipv6 *) &amp;rp.<a class="code" href="structrtadv__prefix.html#a35333c65eabf2c5af884c623abefe75c">prefix</a>);
<a name="l01368"></a>01368   <span class="keywordflow">if</span> (!ret)
<a name="l01369"></a>01369     {
<a name="l01370"></a>01370       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Malformed IPv6 prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01371"></a>01371       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01372"></a>01372     }
<a name="l01373"></a>01373 
<a name="l01374"></a>01374   ret = rtadv_prefix_reset (zebra_if, &amp;rp);
<a name="l01375"></a>01375   <span class="keywordflow">if</span> (!ret)
<a name="l01376"></a>01376     {
<a name="l01377"></a>01377       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Non-exist IPv6 prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01378"></a>01378       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01379"></a>01379     }
<a name="l01380"></a>01380 
<a name="l01381"></a>01381   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01382"></a>01382 }
<a name="l01383"></a>01383 
<a name="l01384"></a>01384 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_nd_router_preference,
<a name="l01385"></a>01385        ipv6_nd_router_preference_cmd,
<a name="l01386"></a>01386        <span class="stringliteral">&quot;ipv6 nd router-preference (high|medium|low)&quot;</span>,
<a name="l01387"></a>01387        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l01388"></a>01388        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l01389"></a>01389        <span class="stringliteral">&quot;Default router preference\n&quot;</span>
<a name="l01390"></a>01390        <span class="stringliteral">&quot;High default router preference\n&quot;</span>
<a name="l01391"></a>01391        <span class="stringliteral">&quot;Low default router preference\n&quot;</span>
<a name="l01392"></a>01392        <span class="stringliteral">&quot;Medium default router preference (default)\n&quot;</span>)
<a name="l01393"></a>01393 {
<a name="l01394"></a>01394   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01395"></a>01395   <span class="keyword">struct </span>zebra_if *zif;
<a name="l01396"></a>01396   <span class="keywordtype">int</span> i = 0;
<a name="l01397"></a>01397 
<a name="l01398"></a>01398   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l01399"></a>01399   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01400"></a>01400 
<a name="l01401"></a>01401   while (0 != rtadv_pref_strs[i])
<a name="l01402"></a>01402     {
<a name="l01403"></a>01403       <span class="keywordflow">if</span> (strncmp (argv[0], rtadv_pref_strs[i], 1) == 0)
<a name="l01404"></a>01404     {
<a name="l01405"></a>01405       zif-&gt;rtadv.DefaultPreference = <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l01406"></a>01406       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01407"></a>01407     }
<a name="l01408"></a>01408       i++;
<a name="l01409"></a>01409     }
<a name="l01410"></a>01410 
<a name="l01411"></a>01411   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a007b585758677d61751303a88c8914d5">CMD_ERR_NO_MATCH</a>;
<a name="l01412"></a>01412 }
<a name="l01413"></a>01413 
<a name="l01414"></a>01414 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_nd_router_preference,
<a name="l01415"></a>01415        no_ipv6_nd_router_preference_cmd,
<a name="l01416"></a>01416        <span class="stringliteral">&quot;no ipv6 nd router-preference&quot;</span>,
<a name="l01417"></a>01417        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01418"></a>01418        <span class="stringliteral">&quot;Interface IPv6 config commands\n&quot;</span>
<a name="l01419"></a>01419        <span class="stringliteral">&quot;Neighbor discovery\n&quot;</span>
<a name="l01420"></a>01420        <span class="stringliteral">&quot;Default router preference\n&quot;</span>)
<a name="l01421"></a>01421 {
<a name="l01422"></a>01422   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01423"></a>01423   <span class="keyword">struct </span>zebra_if *zif;
<a name="l01424"></a>01424 
<a name="l01425"></a>01425   ifp = (<span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *) <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a>;
<a name="l01426"></a>01426   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01427"></a>01427 
<a name="l01428"></a>01428   zif-&gt;rtadv.DefaultPreference = RTADV_PREF_MEDIUM; <span class="comment">/* Default per RFC4191. */</span>
<a name="l01429"></a>01429 
<a name="l01430"></a>01430   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01431"></a>01431 }
<a name="l01432"></a>01432 
<a name="l01433"></a>01433 <span class="comment">/* Write configuration about router advertisement. */</span>
<a name="l01434"></a>01434 <span class="keywordtype">void</span>
<a name="l01435"></a>01435 <a class="code" href="rtadv_8h.html#a20c3cc72fed124a5b2bc130c0457838c">rtadv_config_write</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l01436"></a>01436 {
<a name="l01437"></a>01437   <span class="keyword">struct </span>zebra_if *zif;
<a name="l01438"></a>01438   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l01439"></a>01439   <span class="keyword">struct </span><a class="code" href="structrtadv__prefix.html">rtadv_prefix</a> *rprefix;
<a name="l01440"></a>01440   u_char buf[<a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>];
<a name="l01441"></a>01441   <span class="keywordtype">int</span> <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;
<a name="l01442"></a>01442 
<a name="l01443"></a>01443   <span class="keywordflow">if</span> (! rtadv)
<a name="l01444"></a>01444     <span class="keywordflow">return</span>;
<a name="l01445"></a>01445 
<a name="l01446"></a>01446   zif = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
<a name="l01447"></a>01447 
<a name="l01448"></a>01448   <span class="keywordflow">if</span> (! <a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
<a name="l01449"></a>01449     {
<a name="l01450"></a>01450       <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvSendAdvertisements)
<a name="l01451"></a>01451     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no ipv6 nd suppress-ra%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01452"></a>01452       <span class="keywordflow">else</span>
<a name="l01453"></a>01453     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ipv6 nd suppress-ra%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01454"></a>01454     }
<a name="l01455"></a>01455 
<a name="l01456"></a>01456   
<a name="l01457"></a>01457   interval = zif-&gt;rtadv.MaxRtrAdvInterval;
<a name="l01458"></a>01458   <span class="keywordflow">if</span> (interval % 1000)
<a name="l01459"></a>01459     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ipv6 nd ra-interval msec %d%s&quot;</span>, interval,
<a name="l01460"></a>01460          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01461"></a>01461   <span class="keywordflow">else</span>
<a name="l01462"></a>01462     <span class="keywordflow">if</span> (interval != RTADV_MAX_RTR_ADV_INTERVAL)
<a name="l01463"></a>01463       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ipv6 nd ra-interval %d%s&quot;</span>, interval / 1000,
<a name="l01464"></a>01464          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01465"></a>01465 
<a name="l01466"></a>01466   <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvDefaultLifetime != RTADV_ADV_DEFAULT_LIFETIME)
<a name="l01467"></a>01467     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ipv6 nd ra-lifetime %d%s&quot;</span>, zif-&gt;rtadv.AdvDefaultLifetime,
<a name="l01468"></a>01468          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01469"></a>01469 
<a name="l01470"></a>01470   <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvReachableTime)
<a name="l01471"></a>01471     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ipv6 nd reachable-time %d%s&quot;</span>, zif-&gt;rtadv.AdvReachableTime,
<a name="l01472"></a>01472          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01473"></a>01473 
<a name="l01474"></a>01474   <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvManagedFlag)
<a name="l01475"></a>01475     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ipv6 nd managed-config-flag%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01476"></a>01476 
<a name="l01477"></a>01477   <span class="keywordflow">if</span> (zif-&gt;rtadv.AdvOtherConfigFlag)
<a name="l01478"></a>01478     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ipv6 nd other-config-flag%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01479"></a>01479 
<a name="l01480"></a>01480   <span class="keywordflow">if</span> (zif-&gt;rtadv.DefaultPreference != RTADV_PREF_MEDIUM)
<a name="l01481"></a>01481     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ipv6 nd router-preference %s%s&quot;</span>,
<a name="l01482"></a>01482          rtadv_pref_strs[zif-&gt;rtadv.DefaultPreference],
<a name="l01483"></a>01483          <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01484"></a>01484 
<a name="l01485"></a>01485   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (zif-&gt;rtadv.AdvPrefixList, node, rprefix))
<a name="l01486"></a>01486     {
<a name="l01487"></a>01487       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ipv6 nd prefix %s/%d&quot;</span>,
<a name="l01488"></a>01488            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a35333c65eabf2c5af884c623abefe75c">prefix</a>.u.prefix6, 
<a name="l01489"></a>01489               (<span class="keywordtype">char</span> *) buf, <a class="code" href="prefix_8h.html#af776b22a727aae7c9f4d869d50df47e8">INET6_ADDRSTRLEN</a>),
<a name="l01490"></a>01490            rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a35333c65eabf2c5af884c623abefe75c">prefix</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l01491"></a>01491       <span class="keywordflow">if</span> ((rprefix-&gt;<a class="code" href="structrtadv__prefix.html#ad1c5428ea50c81f2633685c917ec7874">AdvValidLifetime</a> != <a class="code" href="rtadv_8h.html#a07fbd3506a9631ad20b0f2fb3b87e762">RTADV_VALID_LIFETIME</a>) || 
<a name="l01492"></a>01492       (rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a30f431face138f0e97c92b6cff07bc45">AdvPreferredLifetime</a> != <a class="code" href="rtadv_8h.html#a723100d76b91d22ed547036e8f1db4fe">RTADV_PREFERRED_LIFETIME</a>))
<a name="l01493"></a>01493     {
<a name="l01494"></a>01494       <span class="keywordflow">if</span> (rprefix-&gt;<a class="code" href="structrtadv__prefix.html#ad1c5428ea50c81f2633685c917ec7874">AdvValidLifetime</a> == <a class="code" href="zebra_8h.html#ab5eb23180f7cc12b7d6c04a8ec067fdd">UINT32_MAX</a>)
<a name="l01495"></a>01495         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; infinite&quot;</span>);
<a name="l01496"></a>01496       <span class="keywordflow">else</span>
<a name="l01497"></a>01497         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; %u&quot;</span>, rprefix-&gt;<a class="code" href="structrtadv__prefix.html#ad1c5428ea50c81f2633685c917ec7874">AdvValidLifetime</a>);
<a name="l01498"></a>01498       <span class="keywordflow">if</span> (rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a30f431face138f0e97c92b6cff07bc45">AdvPreferredLifetime</a> == <a class="code" href="zebra_8h.html#ab5eb23180f7cc12b7d6c04a8ec067fdd">UINT32_MAX</a>)
<a name="l01499"></a>01499         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; infinite&quot;</span>);
<a name="l01500"></a>01500       <span class="keywordflow">else</span>
<a name="l01501"></a>01501         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; %u&quot;</span>, rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a30f431face138f0e97c92b6cff07bc45">AdvPreferredLifetime</a>);
<a name="l01502"></a>01502     }
<a name="l01503"></a>01503       <span class="keywordflow">if</span> (!rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a6276a1595f61ab45da2d6273a70e01c0">AdvOnLinkFlag</a>)
<a name="l01504"></a>01504     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; off-link&quot;</span>);
<a name="l01505"></a>01505       <span class="keywordflow">if</span> (!rprefix-&gt;<a class="code" href="structrtadv__prefix.html#a0e26102c990b2157c1de33df3689ecaf">AdvAutonomousFlag</a>)
<a name="l01506"></a>01506     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; no-autoconfig&quot;</span>);
<a name="l01507"></a>01507       <span class="keywordflow">if</span> (rprefix-&gt;<a class="code" href="structrtadv__prefix.html#ad6fc4c17270c2e7ce5df6a7666544aec">AdvRouterAddressFlag</a>)
<a name="l01508"></a>01508     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; router-address&quot;</span>);
<a name="l01509"></a>01509       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01510"></a>01510     }
<a name="l01511"></a>01511 }
<a name="l01512"></a>01512 
<a name="l01513"></a>01513 
<a name="l01514"></a>01514 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01515"></a>01515 rtadv_event (<span class="keyword">enum</span> rtadv_event <a class="code" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a>, <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>)
<a name="l01516"></a>01516 {
<a name="l01517"></a>01517   <span class="keywordflow">switch</span> (event)
<a name="l01518"></a>01518     {
<a name="l01519"></a>01519     <span class="keywordflow">case</span> RTADV_START:
<a name="l01520"></a>01520       <span class="keywordflow">if</span> (! rtadv-&gt;ra_read)
<a name="l01521"></a>01521     rtadv-&gt;ra_read = <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, rtadv_read, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, val);
<a name="l01522"></a>01522       <span class="keywordflow">if</span> (! rtadv-&gt;ra_timer)
<a name="l01523"></a>01523     rtadv-&gt;ra_timer = <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, rtadv_timer,
<a name="l01524"></a>01524                                         <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l01525"></a>01525       <span class="keywordflow">break</span>;
<a name="l01526"></a>01526     <span class="keywordflow">case</span> RTADV_STOP:
<a name="l01527"></a>01527       <span class="keywordflow">if</span> (rtadv-&gt;ra_timer)
<a name="l01528"></a>01528     {
<a name="l01529"></a>01529       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (rtadv-&gt;ra_timer);
<a name="l01530"></a>01530       rtadv-&gt;ra_timer = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01531"></a>01531     }
<a name="l01532"></a>01532       <span class="keywordflow">if</span> (rtadv-&gt;ra_read)
<a name="l01533"></a>01533     {
<a name="l01534"></a>01534       <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (rtadv-&gt;ra_read);
<a name="l01535"></a>01535       rtadv-&gt;ra_read = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01536"></a>01536     }
<a name="l01537"></a>01537       <span class="keywordflow">break</span>;
<a name="l01538"></a>01538     <span class="keywordflow">case</span> RTADV_TIMER:
<a name="l01539"></a>01539       <span class="keywordflow">if</span> (! rtadv-&gt;ra_timer)
<a name="l01540"></a>01540     rtadv-&gt;ra_timer = <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, rtadv_timer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l01541"></a>01541                                         val);
<a name="l01542"></a>01542       <span class="keywordflow">break</span>;
<a name="l01543"></a>01543     <span class="keywordflow">case</span> RTADV_TIMER_MSEC:
<a name="l01544"></a>01544       <span class="keywordflow">if</span> (! rtadv-&gt;ra_timer)
<a name="l01545"></a>01545     rtadv-&gt;ra_timer = <a class="code" href="thread_8h.html#a9231be4b08f04f6ebc1bea080443ba74">thread_add_timer_msec</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, rtadv_timer, 
<a name="l01546"></a>01546                         <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, val);
<a name="l01547"></a>01547       <span class="keywordflow">break</span>;
<a name="l01548"></a>01548     <span class="keywordflow">case</span> RTADV_READ:
<a name="l01549"></a>01549       <span class="keywordflow">if</span> (! rtadv-&gt;ra_read)
<a name="l01550"></a>01550     rtadv-&gt;ra_read = <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, rtadv_read, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, val);
<a name="l01551"></a>01551       <span class="keywordflow">break</span>;
<a name="l01552"></a>01552     <span class="keywordflow">default</span>:
<a name="l01553"></a>01553       <span class="keywordflow">break</span>;
<a name="l01554"></a>01554     }
<a name="l01555"></a>01555   <span class="keywordflow">return</span>;
<a name="l01556"></a>01556 }
<a name="l01557"></a>01557 
<a name="l01558"></a>01558 <span class="keywordtype">void</span>
<a name="l01559"></a>01559 <a class="code" href="rtadv_8c.html#a7f913597228a506267b1ddfce7489e73">rtadv_init</a> (<span class="keywordtype">void</span>)
<a name="l01560"></a>01560 {
<a name="l01561"></a>01561   <span class="keywordtype">int</span> sock;
<a name="l01562"></a>01562 
<a name="l01563"></a>01563   sock = rtadv_make_socket ();
<a name="l01564"></a>01564   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l01565"></a>01565     <span class="keywordflow">return</span>;
<a name="l01566"></a>01566 
<a name="l01567"></a>01567   rtadv = rtadv_new ();
<a name="l01568"></a>01568   rtadv-&gt;sock = sock;
<a name="l01569"></a>01569 
<a name="l01570"></a>01570   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_suppress_ra_cmd);
<a name="l01571"></a>01571   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_suppress_ra_cmd);
<a name="l01572"></a>01572   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_ra_interval_cmd);
<a name="l01573"></a>01573   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_ra_interval_msec_cmd);
<a name="l01574"></a>01574   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_ra_interval_cmd);
<a name="l01575"></a>01575   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_ra_lifetime_cmd);
<a name="l01576"></a>01576   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_ra_lifetime_cmd);
<a name="l01577"></a>01577   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_reachable_time_cmd);
<a name="l01578"></a>01578   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_reachable_time_cmd);
<a name="l01579"></a>01579   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_managed_config_flag_cmd);
<a name="l01580"></a>01580   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_managed_config_flag_cmd);
<a name="l01581"></a>01581   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_other_config_flag_cmd);
<a name="l01582"></a>01582   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_other_config_flag_cmd);
<a name="l01583"></a>01583   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_homeagent_config_flag_cmd);
<a name="l01584"></a>01584   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_homeagent_config_flag_cmd);
<a name="l01585"></a>01585   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_homeagent_preference_cmd);
<a name="l01586"></a>01586   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_homeagent_preference_cmd);
<a name="l01587"></a>01587   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_homeagent_lifetime_cmd);
<a name="l01588"></a>01588   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_homeagent_lifetime_cmd);
<a name="l01589"></a>01589   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_adv_interval_config_option_cmd);
<a name="l01590"></a>01590   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_adv_interval_config_option_cmd);
<a name="l01591"></a>01591   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_cmd);
<a name="l01592"></a>01592   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_val_rev_rtaddr_cmd);
<a name="l01593"></a>01593   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_val_nortaddr_cmd);
<a name="l01594"></a>01594   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_val_rev_cmd);
<a name="l01595"></a>01595   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_val_noauto_cmd);
<a name="l01596"></a>01596   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_val_offlink_cmd);
<a name="l01597"></a>01597   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_val_rtaddr_cmd);
<a name="l01598"></a>01598   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_val_cmd);
<a name="l01599"></a>01599   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_noval_cmd);
<a name="l01600"></a>01600   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_noval_rev_cmd);
<a name="l01601"></a>01601   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_noval_noauto_cmd);
<a name="l01602"></a>01602   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_noval_offlink_cmd);
<a name="l01603"></a>01603   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_noval_rtaddr_cmd);
<a name="l01604"></a>01604   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_prefix_prefix_cmd);
<a name="l01605"></a>01605   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_prefix_cmd);
<a name="l01606"></a>01606   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;ipv6_nd_router_preference_cmd);
<a name="l01607"></a>01607   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682ab6c1e2776b59860b606da9864e608e39">INTERFACE_NODE</a>, &amp;no_ipv6_nd_router_preference_cmd);
<a name="l01608"></a>01608 }
<a name="l01609"></a>01609 
<a name="l01610"></a>01610 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01611"></a>01611 if_join_all_router (<span class="keywordtype">int</span> sock, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l01612"></a>01612 {
<a name="l01613"></a>01613   <span class="keywordtype">int</span> ret;
<a name="l01614"></a>01614 
<a name="l01615"></a>01615   <span class="keyword">struct </span>ipv6_mreq mreq;
<a name="l01616"></a>01616 
<a name="l01617"></a>01617   memset (&amp;mreq, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> ipv6_mreq));
<a name="l01618"></a>01618   <a class="code" href="sockunion_8c.html#ac13c2042641ea5031bc7e244e8061b84">inet_pton</a> (AF_INET6, ALLROUTER, &amp;mreq.ipv6mr_multiaddr);
<a name="l01619"></a>01619   mreq.ipv6mr_interface = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l01620"></a>01620 
<a name="l01621"></a>01621   ret = setsockopt (sock, IPPROTO_IPV6, <a class="code" href="ripng__interface_8c.html#a4ff6253432e91b991fc9f52243508724">IPV6_JOIN_GROUP</a>, 
<a name="l01622"></a>01622             (<span class="keywordtype">char</span> *) &amp;mreq, <span class="keyword">sizeof</span> mreq);
<a name="l01623"></a>01623   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01624"></a>01624     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t setsockopt IPV6_JOIN_GROUP: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l01625"></a>01625 
<a name="l01626"></a>01626   <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;rtadv: %s join to all-routers multicast group&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l01627"></a>01627 
<a name="l01628"></a>01628   <span class="keywordflow">return</span> 0;
<a name="l01629"></a>01629 }
<a name="l01630"></a>01630 
<a name="l01631"></a>01631 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01632"></a>01632 if_leave_all_router (<span class="keywordtype">int</span> sock, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l01633"></a>01633 {
<a name="l01634"></a>01634   <span class="keywordtype">int</span> ret;
<a name="l01635"></a>01635 
<a name="l01636"></a>01636   <span class="keyword">struct </span>ipv6_mreq mreq;
<a name="l01637"></a>01637 
<a name="l01638"></a>01638   memset (&amp;mreq, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> ipv6_mreq));
<a name="l01639"></a>01639   <a class="code" href="sockunion_8c.html#ac13c2042641ea5031bc7e244e8061b84">inet_pton</a> (AF_INET6, ALLROUTER, &amp;mreq.ipv6mr_multiaddr);
<a name="l01640"></a>01640   mreq.ipv6mr_interface = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l01641"></a>01641 
<a name="l01642"></a>01642   ret = setsockopt (sock, IPPROTO_IPV6, <a class="code" href="ripng__interface_8c.html#a646d950859a748ed739ab6677682ba01">IPV6_LEAVE_GROUP</a>, 
<a name="l01643"></a>01643             (<span class="keywordtype">char</span> *) &amp;mreq, <span class="keyword">sizeof</span> mreq);
<a name="l01644"></a>01644   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01645"></a>01645     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t setsockopt IPV6_LEAVE_GROUP: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l01646"></a>01646 
<a name="l01647"></a>01647   <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;rtadv: %s leave from all-routers multicast group&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l01648"></a>01648 
<a name="l01649"></a>01649   <span class="keywordflow">return</span> 0;
<a name="l01650"></a>01650 }
<a name="l01651"></a>01651 
<a name="l01652"></a>01652 <span class="preprocessor">#else</span>
<a name="l01653"></a>01653 <span class="preprocessor"></span><span class="keywordtype">void</span>
<a name="l01654"></a><a class="code" href="rtadv_8h.html#a7f913597228a506267b1ddfce7489e73">01654</a> <a class="code" href="rtadv_8c.html#a7f913597228a506267b1ddfce7489e73">rtadv_init</a> (<span class="keywordtype">void</span>)
<a name="l01655"></a>01655 {
<a name="l01656"></a>01656   <span class="comment">/* Empty.*/</span>;
<a name="l01657"></a>01657 }
<a name="l01658"></a>01658 <span class="preprocessor">#endif </span><span class="comment">/* RTADV &amp;&amp; HAVE_IPV6 */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="rtadv_8c.html">rtadv.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
