<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/rt_netlink.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('rt__netlink_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">zebra/rt_netlink.c</div>  </div>
</div>
<div class="contents">
<a href="rt__netlink_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Kernel routing table updates using netlink over GNU/Linux system.</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1997, 98, 99 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> * later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="comment">/* Hack for GNU libc version 2. */</span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef MSG_TRUNC</span>
<a name="l00026"></a><a class="code" href="rt__netlink_8c.html#a6a90f17f258e36353f09375263324f41">00026</a> <span class="preprocessor"></span><span class="preprocessor">#define MSG_TRUNC      0x20</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* MSG_TRUNC */</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="connected_8h.html">connected.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="rib_8h.html">rib.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="privs_8h.html">privs.h</a>&quot;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="zserv_8h.html">zebra/zserv.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="rt_8h.html">zebra/rt.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="redistribute_8h.html">zebra/redistribute.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="interface_8h.html">zebra/interface.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="debug_8h.html">zebra/debug.h</a>&quot;</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="comment">/* Socket interface to kernel */</span>
<a name="l00046"></a><a class="code" href="structnlsock.html">00046</a> <span class="keyword">struct </span><a class="code" href="structnlsock.html">nlsock</a>
<a name="l00047"></a>00047 {
<a name="l00048"></a><a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">00048</a>   <span class="keywordtype">int</span> <a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>;
<a name="l00049"></a><a class="code" href="structnlsock.html#a45e4187569b7a314348d2f7bdcb3e76e">00049</a>   <span class="keywordtype">int</span> <a class="code" href="structnlsock.html#a45e4187569b7a314348d2f7bdcb3e76e">seq</a>;
<a name="l00050"></a><a class="code" href="structnlsock.html#a52642791667f9fa96c7af22c991d30bd">00050</a>   <span class="keyword">struct </span>sockaddr_nl <a class="code" href="structnlsock.html#a52642791667f9fa96c7af22c991d30bd">snl</a>;
<a name="l00051"></a><a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">00051</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>;
<a name="l00052"></a>00052 } <a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>      = { -1, 0, {0}, <span class="stringliteral">&quot;netlink-listen&quot;</span>},     <span class="comment">/* kernel messages */</span>
<a name="l00053"></a>00053   <a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>  = { -1, 0, {0}, <span class="stringliteral">&quot;netlink-cmd&quot;</span>};        <span class="comment">/* command channel */</span>
<a name="l00054"></a>00054 
<a name="l00055"></a><a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">00055</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>[] = {
<a name="l00056"></a>00056   {RTM_NEWROUTE, <span class="stringliteral">&quot;RTM_NEWROUTE&quot;</span>},
<a name="l00057"></a>00057   {RTM_DELROUTE, <span class="stringliteral">&quot;RTM_DELROUTE&quot;</span>},
<a name="l00058"></a>00058   {RTM_GETROUTE, <span class="stringliteral">&quot;RTM_GETROUTE&quot;</span>},
<a name="l00059"></a>00059   {RTM_NEWLINK,  <span class="stringliteral">&quot;RTM_NEWLINK&quot;</span>},
<a name="l00060"></a>00060   {RTM_DELLINK,  <span class="stringliteral">&quot;RTM_DELLINK&quot;</span>},
<a name="l00061"></a>00061   {RTM_GETLINK,  <span class="stringliteral">&quot;RTM_GETLINK&quot;</span>},
<a name="l00062"></a>00062   {RTM_NEWADDR,  <span class="stringliteral">&quot;RTM_NEWADDR&quot;</span>},
<a name="l00063"></a>00063   {RTM_DELADDR,  <span class="stringliteral">&quot;RTM_DELADDR&quot;</span>},
<a name="l00064"></a>00064   {RTM_GETADDR,  <span class="stringliteral">&quot;RTM_GETADDR&quot;</span>},
<a name="l00065"></a>00065   {0, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>}
<a name="l00066"></a>00066 };
<a name="l00067"></a>00067 
<a name="l00068"></a><a class="code" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">00068</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a>[] =
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070   <span class="stringliteral">&quot;none&quot;</span>,
<a name="l00071"></a>00071   <span class="stringliteral">&quot;Directly connected&quot;</span>,
<a name="l00072"></a>00072   <span class="stringliteral">&quot;Interface route&quot;</span>,
<a name="l00073"></a>00073   <span class="stringliteral">&quot;IPv4 nexthop&quot;</span>,
<a name="l00074"></a>00074   <span class="stringliteral">&quot;IPv4 nexthop with ifindex&quot;</span>,
<a name="l00075"></a>00075   <span class="stringliteral">&quot;IPv4 nexthop with ifname&quot;</span>,
<a name="l00076"></a>00076   <span class="stringliteral">&quot;IPv6 nexthop&quot;</span>,
<a name="l00077"></a>00077   <span class="stringliteral">&quot;IPv6 nexthop with ifindex&quot;</span>,
<a name="l00078"></a>00078   <span class="stringliteral">&quot;IPv6 nexthop with ifname&quot;</span>,
<a name="l00079"></a>00079   <span class="stringliteral">&quot;Null0 nexthop&quot;</span>,
<a name="l00080"></a>00080 };
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__t.html">zebra_t</a> <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="keyword">extern</span> u_int32_t <a class="code" href="rt__netlink_8c.html#aa4fe0a028fde5c45c4f236d47d591a80">nl_rcvbufsize</a>;
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">/* Note: on netlink systems, there should be a 1-to-1 mapping between interface</span>
<a name="l00089"></a>00089 <span class="comment">   names and ifindex values. */</span>
<a name="l00090"></a>00090 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00091"></a><a class="code" href="rt__netlink_8c.html#a5c99605e6bb5d2d0dd874f4336734806">00091</a> <a class="code" href="rt__netlink_8c.html#a5c99605e6bb5d2d0dd874f4336734806">set_ifindex</a>(<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifi_index)
<a name="l00092"></a>00092 {
<a name="l00093"></a>00093   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *oifp;
<a name="l00094"></a>00094 
<a name="l00095"></a>00095   <span class="keywordflow">if</span> (((oifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a>(ifi_index)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) &amp;&amp; (oifp != ifp))
<a name="l00096"></a>00096     {
<a name="l00097"></a>00097       <span class="keywordflow">if</span> (ifi_index == <a class="code" href="if_8h.html#a18949aeeb4a8fbe7e3be43e6bbe86527">IFINDEX_INTERNAL</a>)
<a name="l00098"></a>00098         <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Netlink is setting interface %s ifindex to reserved &quot;</span>
<a name="l00099"></a>00099          <span class="stringliteral">&quot;internal value %u&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifi_index);
<a name="l00100"></a>00100       <span class="keywordflow">else</span>
<a name="l00101"></a>00101         {
<a name="l00102"></a>00102       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00103"></a>00103         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;interface index %d was renamed from %s to %s&quot;</span>,
<a name="l00104"></a>00104                    ifi_index, oifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00105"></a>00105       <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a>(oifp))
<a name="l00106"></a>00106         <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;interface rename detected on up interface: index %d &quot;</span>
<a name="l00107"></a>00107              <span class="stringliteral">&quot;was renamed from %s to %s, results are uncertain!&quot;</span>, 
<a name="l00108"></a>00108                  ifi_index, oifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00109"></a>00109       <a class="code" href="interface_8c.html#a5ca58fe2209f09a828330810fc5a7d71">if_delete_update</a>(oifp);
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111     }
<a name="l00112"></a>00112   ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = ifi_index;
<a name="l00113"></a>00113 }
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00116"></a><a class="code" href="rt__netlink_8c.html#a9d729425d97c0c5f1d2b293ba7c9a5a9">00116</a> <a class="code" href="rt__netlink_8c.html#a9d729425d97c0c5f1d2b293ba7c9a5a9">netlink_recvbuf</a> (<span class="keyword">struct</span> <a class="code" href="structnlsock.html">nlsock</a> *nl, uint32_t newsize)
<a name="l00117"></a>00117 {
<a name="l00118"></a>00118   u_int32_t oldsize;
<a name="l00119"></a>00119   <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> newlen = <span class="keyword">sizeof</span>(newsize);
<a name="l00120"></a>00120   <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> oldlen = <span class="keyword">sizeof</span>(oldsize);
<a name="l00121"></a>00121   <span class="keywordtype">int</span> ret;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123   ret = getsockopt(nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, SOL_SOCKET, SO_RCVBUF, &amp;oldsize, &amp;oldlen);
<a name="l00124"></a>00124   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00125"></a>00125     {
<a name="l00126"></a>00126       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t get %s receive buffer size: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l00127"></a>00127         <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00128"></a>00128       <span class="keywordflow">return</span> -1;
<a name="l00129"></a>00129     }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131   ret = setsockopt(nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, SOL_SOCKET, SO_RCVBUF, &amp;<a class="code" href="rt__netlink_8c.html#aa4fe0a028fde5c45c4f236d47d591a80">nl_rcvbufsize</a>,
<a name="l00132"></a>00132            <span class="keyword">sizeof</span>(<a class="code" href="rt__netlink_8c.html#aa4fe0a028fde5c45c4f236d47d591a80">nl_rcvbufsize</a>));
<a name="l00133"></a>00133   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00134"></a>00134     {
<a name="l00135"></a>00135       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t set %s receive buffer size: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l00136"></a>00136         <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00137"></a>00137       <span class="keywordflow">return</span> -1;
<a name="l00138"></a>00138     }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140   ret = getsockopt(nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, SOL_SOCKET, SO_RCVBUF, &amp;newsize, &amp;newlen);
<a name="l00141"></a>00141   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00142"></a>00142     {
<a name="l00143"></a>00143       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t get %s receive buffer size: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l00144"></a>00144         <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00145"></a>00145       <span class="keywordflow">return</span> -1;
<a name="l00146"></a>00146     }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148   <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_INFO,
<a name="l00149"></a>00149     <span class="stringliteral">&quot;Setting netlink socket receive buffer size: %u -&gt; %u&quot;</span>,
<a name="l00150"></a>00150     oldsize, newsize);
<a name="l00151"></a>00151   <span class="keywordflow">return</span> 0;
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 <span class="comment">/* Make socket for Linux netlink interface. */</span>
<a name="l00155"></a>00155 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00156"></a><a class="code" href="rt__netlink_8c.html#a1c6085b143dcd6789d63c133afa5a0a4">00156</a> <a class="code" href="rt__netlink_8c.html#a1c6085b143dcd6789d63c133afa5a0a4">netlink_socket</a> (<span class="keyword">struct</span> <a class="code" href="structnlsock.html">nlsock</a> *nl, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> groups)
<a name="l00157"></a>00157 {
<a name="l00158"></a>00158   <span class="keywordtype">int</span> ret;
<a name="l00159"></a>00159   <span class="keyword">struct </span>sockaddr_nl snl;
<a name="l00160"></a>00160   <span class="keywordtype">int</span> sock;
<a name="l00161"></a>00161   <span class="keywordtype">int</span> namelen;
<a name="l00162"></a>00162   <span class="keywordtype">int</span> save_errno;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164   sock = socket (AF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
<a name="l00165"></a>00165   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00166"></a>00166     {
<a name="l00167"></a>00167       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t open %s socket: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l00168"></a>00168             <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00169"></a>00169       <span class="keywordflow">return</span> -1;
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172   memset (&amp;snl, 0, <span class="keyword">sizeof</span> snl);
<a name="l00173"></a>00173   snl.nl_family = AF_NETLINK;
<a name="l00174"></a>00174   snl.nl_groups = groups;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176   <span class="comment">/* Bind the socket to the netlink structure for anything. */</span>
<a name="l00177"></a>00177   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
<a name="l00178"></a>00178     {
<a name="l00179"></a>00179       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
<a name="l00180"></a>00180       <span class="keywordflow">return</span> -1;
<a name="l00181"></a>00181     }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183   ret = bind (sock, (<span class="keyword">struct</span> sockaddr *) &amp;snl, <span class="keyword">sizeof</span> snl);
<a name="l00184"></a>00184   save_errno = errno;
<a name="l00185"></a>00185   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00186"></a>00186     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l00187"></a>00187 
<a name="l00188"></a>00188   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00189"></a>00189     {
<a name="l00190"></a>00190       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t bind %s socket to group 0x%x: %s&quot;</span>,
<a name="l00191"></a>00191             nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, snl.nl_groups, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (save_errno));
<a name="l00192"></a>00192       close (sock);
<a name="l00193"></a>00193       <span class="keywordflow">return</span> -1;
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196   <span class="comment">/* multiple netlink sockets will have different nl_pid */</span>
<a name="l00197"></a>00197   namelen = <span class="keyword">sizeof</span> snl;
<a name="l00198"></a>00198   ret = getsockname (sock, (<span class="keyword">struct</span> sockaddr *) &amp;snl, (<a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> *) &amp;namelen);
<a name="l00199"></a>00199   <span class="keywordflow">if</span> (ret &lt; 0 || namelen != <span class="keyword">sizeof</span> snl)
<a name="l00200"></a>00200     {
<a name="l00201"></a>00201       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t get %s socket name: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l00202"></a>00202             <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00203"></a>00203       close (sock);
<a name="l00204"></a>00204       <span class="keywordflow">return</span> -1;
<a name="l00205"></a>00205     }
<a name="l00206"></a>00206 
<a name="l00207"></a>00207   nl-&gt;<a class="code" href="structnlsock.html#a52642791667f9fa96c7af22c991d30bd">snl</a> = snl;
<a name="l00208"></a>00208   nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a> = sock;
<a name="l00209"></a>00209   <span class="keywordflow">return</span> ret;
<a name="l00210"></a>00210 }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="comment">/* Get type specified information from netlink. */</span>
<a name="l00213"></a>00213 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00214"></a><a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">00214</a> <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (<span class="keywordtype">int</span> family, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keyword">struct</span> <a class="code" href="structnlsock.html">nlsock</a> *nl)
<a name="l00215"></a>00215 {
<a name="l00216"></a>00216   <span class="keywordtype">int</span> ret;
<a name="l00217"></a>00217   <span class="keyword">struct </span>sockaddr_nl snl;
<a name="l00218"></a>00218   <span class="keywordtype">int</span> save_errno;
<a name="l00219"></a>00219 
<a name="l00220"></a>00220   <span class="keyword">struct</span>
<a name="l00221"></a>00221   {
<a name="l00222"></a>00222     <span class="keyword">struct </span>nlmsghdr nlh;
<a name="l00223"></a>00223     <span class="keyword">struct </span>rtgenmsg g;
<a name="l00224"></a>00224   } req;
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 
<a name="l00227"></a>00227   <span class="comment">/* Check netlink socket. */</span>
<a name="l00228"></a>00228   <span class="keywordflow">if</span> (nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a> &lt; 0)
<a name="l00229"></a>00229     {
<a name="l00230"></a>00230       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s socket isn&#39;t active.&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
<a name="l00231"></a>00231       <span class="keywordflow">return</span> -1;
<a name="l00232"></a>00232     }
<a name="l00233"></a>00233 
<a name="l00234"></a>00234   memset (&amp;snl, 0, <span class="keyword">sizeof</span> snl);
<a name="l00235"></a>00235   snl.nl_family = AF_NETLINK;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   memset (&amp;req, 0, <span class="keyword">sizeof</span> req);
<a name="l00238"></a>00238   req.nlh.nlmsg_len = <span class="keyword">sizeof</span> req;
<a name="l00239"></a>00239   req.nlh.nlmsg_type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00240"></a>00240   req.nlh.nlmsg_flags = NLM_F_ROOT | NLM_F_MATCH | NLM_F_REQUEST;
<a name="l00241"></a>00241   req.nlh.nlmsg_pid = nl-&gt;<a class="code" href="structnlsock.html#a52642791667f9fa96c7af22c991d30bd">snl</a>.nl_pid;
<a name="l00242"></a>00242   req.nlh.nlmsg_seq = ++nl-&gt;<a class="code" href="structnlsock.html#a45e4187569b7a314348d2f7bdcb3e76e">seq</a>;
<a name="l00243"></a>00243   req.g.rtgen_family = family;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245   <span class="comment">/* linux appears to check capabilities on every message </span>
<a name="l00246"></a>00246 <span class="comment">   * have to raise caps for every message sent</span>
<a name="l00247"></a>00247 <span class="comment">   */</span>
<a name="l00248"></a>00248   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
<a name="l00249"></a>00249     {
<a name="l00250"></a>00250       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
<a name="l00251"></a>00251       <span class="keywordflow">return</span> -1;
<a name="l00252"></a>00252     }
<a name="l00253"></a>00253 
<a name="l00254"></a>00254   ret = sendto (nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, (<span class="keywordtype">void</span> *) &amp;req, <span class="keyword">sizeof</span> req, 0,
<a name="l00255"></a>00255                 (<span class="keyword">struct</span> sockaddr *) &amp;snl, <span class="keyword">sizeof</span> snl);
<a name="l00256"></a>00256   save_errno = errno;
<a name="l00257"></a>00257 
<a name="l00258"></a>00258   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00259"></a>00259     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l00260"></a>00260 
<a name="l00261"></a>00261   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00262"></a>00262     {
<a name="l00263"></a>00263       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s sendto failed: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l00264"></a>00264             <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (save_errno));
<a name="l00265"></a>00265       <span class="keywordflow">return</span> -1;
<a name="l00266"></a>00266     }
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   <span class="keywordflow">return</span> 0;
<a name="l00269"></a>00269 }
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 <span class="comment">/* Receive message from netlink interface and pass those information</span>
<a name="l00272"></a>00272 <span class="comment">   to the given function. */</span>
<a name="l00273"></a>00273 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00274"></a><a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">00274</a> <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<span class="keywordtype">int</span> (*<a class="code" href="structfilter.html">filter</a>) (<span class="keyword">struct</span> sockaddr_nl *, <span class="keyword">struct</span> nlmsghdr *),
<a name="l00275"></a>00275                     <span class="keyword">struct</span> <a class="code" href="structnlsock.html">nlsock</a> *nl)
<a name="l00276"></a>00276 {
<a name="l00277"></a>00277   <span class="keywordtype">int</span> status;
<a name="l00278"></a>00278   <span class="keywordtype">int</span> ret = 0;
<a name="l00279"></a>00279   <span class="keywordtype">int</span> error;
<a name="l00280"></a>00280 
<a name="l00281"></a>00281   <span class="keywordflow">while</span> (1)
<a name="l00282"></a>00282     {
<a name="l00283"></a>00283       <span class="keywordtype">char</span> buf[4096];
<a name="l00284"></a>00284       <span class="keyword">struct </span>iovec iov = { buf, <span class="keyword">sizeof</span> buf };
<a name="l00285"></a>00285       <span class="keyword">struct </span>sockaddr_nl snl;
<a name="l00286"></a>00286       <span class="keyword">struct </span>msghdr msg = { (<span class="keywordtype">void</span> *) &amp;snl, <span class="keyword">sizeof</span> snl, &amp;iov, 1, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0 };
<a name="l00287"></a>00287       <span class="keyword">struct </span>nlmsghdr *h;
<a name="l00288"></a>00288 
<a name="l00289"></a>00289       status = recvmsg (nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, &amp;msg, 0);
<a name="l00290"></a>00290       <span class="keywordflow">if</span> (status &lt; 0)
<a name="l00291"></a>00291         {
<a name="l00292"></a>00292           <span class="keywordflow">if</span> (errno == EINTR)
<a name="l00293"></a>00293             <span class="keywordflow">continue</span>;
<a name="l00294"></a>00294           <span class="keywordflow">if</span> (errno == EWOULDBLOCK || errno == EAGAIN)
<a name="l00295"></a>00295             <span class="keywordflow">break</span>;
<a name="l00296"></a>00296           <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s recvmsg overrun: %s&quot;</span>,
<a name="l00297"></a>00297         nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00298"></a>00298           <span class="keywordflow">continue</span>;
<a name="l00299"></a>00299         }
<a name="l00300"></a>00300 
<a name="l00301"></a>00301       <span class="keywordflow">if</span> (status == 0)
<a name="l00302"></a>00302         {
<a name="l00303"></a>00303           <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s EOF&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
<a name="l00304"></a>00304           <span class="keywordflow">return</span> -1;
<a name="l00305"></a>00305         }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307       <span class="keywordflow">if</span> (msg.msg_namelen != <span class="keyword">sizeof</span> snl)
<a name="l00308"></a>00308         {
<a name="l00309"></a>00309           <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s sender address length error: length %d&quot;</span>,
<a name="l00310"></a>00310                 nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, msg.msg_namelen);
<a name="l00311"></a>00311           <span class="keywordflow">return</span> -1;
<a name="l00312"></a>00312         }
<a name="l00313"></a>00313       
<a name="l00314"></a>00314       <span class="keywordflow">for</span> (h = (<span class="keyword">struct</span> nlmsghdr *) buf; NLMSG_OK (h, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) status);
<a name="l00315"></a>00315            h = NLMSG_NEXT (h, status))
<a name="l00316"></a>00316         {
<a name="l00317"></a>00317           <span class="comment">/* Finish of reading. */</span>
<a name="l00318"></a>00318           <span class="keywordflow">if</span> (h-&gt;nlmsg_type == NLMSG_DONE)
<a name="l00319"></a>00319             <span class="keywordflow">return</span> ret;
<a name="l00320"></a>00320 
<a name="l00321"></a>00321           <span class="comment">/* Error handling. */</span>
<a name="l00322"></a>00322           <span class="keywordflow">if</span> (h-&gt;nlmsg_type == NLMSG_ERROR)
<a name="l00323"></a>00323             {
<a name="l00324"></a>00324               <span class="keyword">struct </span>nlmsgerr *err = (<span class="keyword">struct </span>nlmsgerr *) NLMSG_DATA (h);
<a name="l00325"></a>00325           <span class="keywordtype">int</span> errnum = err-&gt;error;
<a name="l00326"></a>00326           <span class="keywordtype">int</span> msg_type = err-&gt;msg.nlmsg_type;
<a name="l00327"></a>00327 
<a name="l00328"></a>00328               <span class="comment">/* If the error field is zero, then this is an ACK */</span>
<a name="l00329"></a>00329               <span class="keywordflow">if</span> (err-&gt;error == 0)
<a name="l00330"></a>00330                 {
<a name="l00331"></a>00331                   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00332"></a>00332                     {
<a name="l00333"></a>00333                       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s ACK: type=%s(%u), seq=%u, pid=%u&quot;</span>,
<a name="l00334"></a>00334                                  __FUNCTION__, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l00335"></a>00335                                  <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (nlmsg_str, err-&gt;msg.nlmsg_type),
<a name="l00336"></a>00336                                  err-&gt;msg.nlmsg_type, err-&gt;msg.nlmsg_seq,
<a name="l00337"></a>00337                                  err-&gt;msg.nlmsg_pid);
<a name="l00338"></a>00338                     }
<a name="l00339"></a>00339 
<a name="l00340"></a>00340                   <span class="comment">/* return if not a multipart message, otherwise continue */</span>
<a name="l00341"></a>00341                   <span class="keywordflow">if</span> (!(h-&gt;nlmsg_flags &amp; NLM_F_MULTI))
<a name="l00342"></a>00342                     {
<a name="l00343"></a>00343                       <span class="keywordflow">return</span> 0;
<a name="l00344"></a>00344                     }
<a name="l00345"></a>00345                   <span class="keywordflow">continue</span>;
<a name="l00346"></a>00346                 }
<a name="l00347"></a>00347 
<a name="l00348"></a>00348               <span class="keywordflow">if</span> (h-&gt;nlmsg_len &lt; NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> nlmsgerr)))
<a name="l00349"></a>00349                 {
<a name="l00350"></a>00350                   <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s error: message truncated&quot;</span>,
<a name="l00351"></a>00351                         nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
<a name="l00352"></a>00352                   <span class="keywordflow">return</span> -1;
<a name="l00353"></a>00353                 }
<a name="l00354"></a>00354 
<a name="l00355"></a>00355               <span class="comment">/* Deal with errors that occur because of races in link handling */</span>
<a name="l00356"></a>00356           <span class="keywordflow">if</span> (nl == &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>
<a name="l00357"></a>00357           &amp;&amp; ((msg_type == RTM_DELROUTE &amp;&amp;
<a name="l00358"></a>00358                (-errnum == ENODEV || -errnum == ESRCH))
<a name="l00359"></a>00359               || (msg_type == RTM_NEWROUTE &amp;&amp; -errnum == EEXIST)))
<a name="l00360"></a>00360         {
<a name="l00361"></a>00361           <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00362"></a>00362             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: error: %s type=%s(%u), seq=%u, pid=%u&quot;</span>,
<a name="l00363"></a>00363                 nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (-errnum),
<a name="l00364"></a>00364                 <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (nlmsg_str, msg_type),
<a name="l00365"></a>00365                 msg_type, err-&gt;msg.nlmsg_seq, err-&gt;msg.nlmsg_pid);
<a name="l00366"></a>00366           <span class="keywordflow">return</span> 0;
<a name="l00367"></a>00367         }
<a name="l00368"></a>00368 
<a name="l00369"></a>00369           <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s error: %s, type=%s(%u), seq=%u, pid=%u&quot;</span>,
<a name="l00370"></a>00370             nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (-errnum),
<a name="l00371"></a>00371             <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (nlmsg_str, msg_type),
<a name="l00372"></a>00372             msg_type, err-&gt;msg.nlmsg_seq, err-&gt;msg.nlmsg_pid);
<a name="l00373"></a>00373               <span class="keywordflow">return</span> -1;
<a name="l00374"></a>00374             }
<a name="l00375"></a>00375 
<a name="l00376"></a>00376           <span class="comment">/* OK we got netlink message. */</span>
<a name="l00377"></a>00377           <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00378"></a>00378             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_parse_info: %s type %s(%u), seq=%u, pid=%u&quot;</span>,
<a name="l00379"></a>00379                        nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l00380"></a>00380                        <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (nlmsg_str, h-&gt;nlmsg_type), h-&gt;nlmsg_type,
<a name="l00381"></a>00381                        h-&gt;nlmsg_seq, h-&gt;nlmsg_pid);
<a name="l00382"></a>00382 
<a name="l00383"></a>00383           <span class="comment">/* skip unsolicited messages originating from command socket */</span>
<a name="l00384"></a>00384           <span class="keywordflow">if</span> (nl != &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a> &amp;&amp; h-&gt;nlmsg_pid == <a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>.<a class="code" href="structnlsock.html#a52642791667f9fa96c7af22c991d30bd">snl</a>.nl_pid)
<a name="l00385"></a>00385             {
<a name="l00386"></a>00386               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00387"></a>00387                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_parse_info: %s packet comes from %s&quot;</span>,
<a name="l00388"></a>00388                             <a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>.<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
<a name="l00389"></a>00389               <span class="keywordflow">continue</span>;
<a name="l00390"></a>00390             }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392           error = (*filter) (&amp;snl, h);
<a name="l00393"></a>00393           <span class="keywordflow">if</span> (error &lt; 0)
<a name="l00394"></a>00394             {
<a name="l00395"></a>00395               <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s filter function error&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
<a name="l00396"></a>00396               ret = error;
<a name="l00397"></a>00397             }
<a name="l00398"></a>00398         }
<a name="l00399"></a>00399 
<a name="l00400"></a>00400       <span class="comment">/* After error care. */</span>
<a name="l00401"></a>00401       <span class="keywordflow">if</span> (msg.msg_flags &amp; <a class="code" href="rt__netlink_8c.html#a6a90f17f258e36353f09375263324f41">MSG_TRUNC</a>)
<a name="l00402"></a>00402         {
<a name="l00403"></a>00403           <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s error: message truncated&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
<a name="l00404"></a>00404           <span class="keywordflow">continue</span>;
<a name="l00405"></a>00405         }
<a name="l00406"></a>00406       <span class="keywordflow">if</span> (status)
<a name="l00407"></a>00407         {
<a name="l00408"></a>00408           <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s error: data remnant size %d&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l00409"></a>00409                 status);
<a name="l00410"></a>00410           <span class="keywordflow">return</span> -1;
<a name="l00411"></a>00411         }
<a name="l00412"></a>00412     }
<a name="l00413"></a>00413   <span class="keywordflow">return</span> ret;
<a name="l00414"></a>00414 }
<a name="l00415"></a>00415 
<a name="l00416"></a>00416 <span class="comment">/* Utility function for parse rtattr. */</span>
<a name="l00417"></a>00417 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00418"></a><a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">00418</a> <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (<span class="keyword">struct</span> rtattr **tb, <span class="keywordtype">int</span> max, <span class="keyword">struct</span> rtattr *rta,
<a name="l00419"></a>00419                       <span class="keywordtype">int</span> len)
<a name="l00420"></a>00420 {
<a name="l00421"></a>00421   <span class="keywordflow">while</span> (RTA_OK (rta, len))
<a name="l00422"></a>00422     {
<a name="l00423"></a>00423       <span class="keywordflow">if</span> (rta-&gt;rta_type &lt;= max)
<a name="l00424"></a>00424         tb[rta-&gt;rta_type] = rta;
<a name="l00425"></a>00425       rta = RTA_NEXT (rta, len);
<a name="l00426"></a>00426     }
<a name="l00427"></a>00427 }
<a name="l00428"></a>00428 
<a name="l00429"></a>00429 <span class="comment">/* Called from interface_lookup_netlink().  This function is only used</span>
<a name="l00430"></a>00430 <span class="comment">   during bootstrap. */</span>
<a name="l00431"></a>00431 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00432"></a><a class="code" href="rt__netlink_8c.html#a9b6329fe421003715b72f100fb709b09">00432</a> <a class="code" href="rt__netlink_8c.html#a9b6329fe421003715b72f100fb709b09">netlink_interface</a> (<span class="keyword">struct</span> sockaddr_nl *snl, <span class="keyword">struct</span> nlmsghdr *h)
<a name="l00433"></a>00433 {
<a name="l00434"></a>00434   <span class="keywordtype">int</span> len;
<a name="l00435"></a>00435   <span class="keyword">struct </span>ifinfomsg *ifi;
<a name="l00436"></a>00436   <span class="keyword">struct </span>rtattr *tb[IFLA_MAX + 1];
<a name="l00437"></a>00437   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00438"></a>00438   <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;
<a name="l00439"></a>00439   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00440"></a>00440 
<a name="l00441"></a>00441   ifi = NLMSG_DATA (h);
<a name="l00442"></a>00442 
<a name="l00443"></a>00443   <span class="keywordflow">if</span> (h-&gt;nlmsg_type != RTM_NEWLINK)
<a name="l00444"></a>00444     <span class="keywordflow">return</span> 0;
<a name="l00445"></a>00445 
<a name="l00446"></a>00446   len = h-&gt;nlmsg_len - NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> ifinfomsg));
<a name="l00447"></a>00447   <span class="keywordflow">if</span> (len &lt; 0)
<a name="l00448"></a>00448     <span class="keywordflow">return</span> -1;
<a name="l00449"></a>00449 
<a name="l00450"></a>00450   <span class="comment">/* Looking up interface name. */</span>
<a name="l00451"></a>00451   memset (tb, 0, <span class="keyword">sizeof</span> tb);
<a name="l00452"></a>00452   <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (tb, IFLA_MAX, IFLA_RTA (ifi), len);
<a name="l00453"></a>00453   
<a name="l00454"></a>00454 <span class="preprocessor">#ifdef IFLA_WIRELESS</span>
<a name="l00455"></a>00455 <span class="preprocessor"></span>  <span class="comment">/* check for wireless messages to ignore */</span>
<a name="l00456"></a>00456   <span class="keywordflow">if</span> ((tb[IFLA_WIRELESS] != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) &amp;&amp; (ifi-&gt;ifi_change == 0))
<a name="l00457"></a>00457     {
<a name="l00458"></a>00458       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00459"></a>00459         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ignoring IFLA_WIRELESS message&quot;</span>, __func__);
<a name="l00460"></a>00460       <span class="keywordflow">return</span> 0;
<a name="l00461"></a>00461     }
<a name="l00462"></a>00462 <span class="preprocessor">#endif </span><span class="comment">/* IFLA_WIRELESS */</span>
<a name="l00463"></a>00463 
<a name="l00464"></a>00464   <span class="keywordflow">if</span> (tb[IFLA_IFNAME] == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00465"></a>00465     <span class="keywordflow">return</span> -1;
<a name="l00466"></a>00466   name = (<span class="keywordtype">char</span> *) RTA_DATA (tb[IFLA_IFNAME]);
<a name="l00467"></a>00467 
<a name="l00468"></a>00468   <span class="comment">/* Add interface. */</span>
<a name="l00469"></a>00469   ifp = <a class="code" href="if_8c.html#ade08039f656683282d34ea210ea79447">if_get_by_name</a> (name);
<a name="l00470"></a>00470   <a class="code" href="rt__netlink_8c.html#a5c99605e6bb5d2d0dd874f4336734806">set_ifindex</a>(ifp, ifi-&gt;ifi_index);
<a name="l00471"></a>00471   ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> = ifi-&gt;ifi_flags &amp; 0x0000fffff;
<a name="l00472"></a>00472   ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = *(uint32_t *) RTA_DATA (tb[IFLA_MTU]);
<a name="l00473"></a>00473   ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = 1;
<a name="l00474"></a>00474 
<a name="l00475"></a>00475   <span class="comment">/* Hardware type and address. */</span>
<a name="l00476"></a>00476   ifp-&gt;<a class="code" href="structinterface.html#ac17135561cfbdbe156036eead5da38c5">hw_type</a> = ifi-&gt;ifi_type;
<a name="l00477"></a>00477 
<a name="l00478"></a>00478   <span class="keywordflow">if</span> (tb[IFLA_ADDRESS])
<a name="l00479"></a>00479     {
<a name="l00480"></a>00480       <span class="keywordtype">int</span> <a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>;
<a name="l00481"></a>00481 
<a name="l00482"></a>00482       hw_addr_len = RTA_PAYLOAD (tb[IFLA_ADDRESS]);
<a name="l00483"></a>00483 
<a name="l00484"></a>00484       <span class="keywordflow">if</span> (hw_addr_len &gt; <a class="code" href="if_8h.html#ab832c2d3db56c12ab8e78f275ebc0c94">INTERFACE_HWADDR_MAX</a>)
<a name="l00485"></a>00485         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Hardware address is too large: %d&quot;</span>, hw_addr_len);
<a name="l00486"></a>00486       <span class="keywordflow">else</span>
<a name="l00487"></a>00487         {
<a name="l00488"></a>00488           ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a> = <a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>;
<a name="l00489"></a>00489           <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (ifp-&gt;<a class="code" href="structinterface.html#a6fe2f3c7e5be26c4e376b514d86f5c22">hw_addr</a>, RTA_DATA (tb[IFLA_ADDRESS]), hw_addr_len);
<a name="l00490"></a>00490 
<a name="l00491"></a>00491           <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>; i++)
<a name="l00492"></a>00492             <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a6fe2f3c7e5be26c4e376b514d86f5c22">hw_addr</a>[i] != 0)
<a name="l00493"></a>00493               <span class="keywordflow">break</span>;
<a name="l00494"></a>00494 
<a name="l00495"></a>00495           <span class="keywordflow">if</span> (i == hw_addr_len)
<a name="l00496"></a>00496             ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a> = 0;
<a name="l00497"></a>00497           <span class="keywordflow">else</span>
<a name="l00498"></a>00498             ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a> = <a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>;
<a name="l00499"></a>00499         }
<a name="l00500"></a>00500     }
<a name="l00501"></a>00501 
<a name="l00502"></a>00502   <a class="code" href="interface_8c.html#afc558d5fc9ef4b3b59af78576e079a28">if_add_update</a> (ifp);
<a name="l00503"></a>00503 
<a name="l00504"></a>00504   <span class="keywordflow">return</span> 0;
<a name="l00505"></a>00505 }
<a name="l00506"></a>00506 
<a name="l00507"></a>00507 <span class="comment">/* Lookup interface IPv4/IPv6 address. */</span>
<a name="l00508"></a>00508 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00509"></a><a class="code" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">00509</a> <a class="code" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">netlink_interface_addr</a> (<span class="keyword">struct</span> sockaddr_nl *snl, <span class="keyword">struct</span> nlmsghdr *h)
<a name="l00510"></a>00510 {
<a name="l00511"></a>00511   <span class="keywordtype">int</span> len;
<a name="l00512"></a>00512   <span class="keyword">struct </span>ifaddrmsg *ifa;
<a name="l00513"></a>00513   <span class="keyword">struct </span>rtattr *tb[IFA_MAX + 1];
<a name="l00514"></a>00514   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00515"></a>00515   <span class="keywordtype">void</span> *addr;
<a name="l00516"></a>00516   <span class="keywordtype">void</span> *broad;
<a name="l00517"></a>00517   u_char <a class="code" href="structflags.html">flags</a> = 0;
<a name="l00518"></a>00518   <span class="keywordtype">char</span> *label = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00519"></a>00519 
<a name="l00520"></a>00520   ifa = NLMSG_DATA (h);
<a name="l00521"></a>00521 
<a name="l00522"></a>00522   <span class="keywordflow">if</span> (ifa-&gt;ifa_family != AF_INET
<a name="l00523"></a>00523 #ifdef HAVE_IPV6
<a name="l00524"></a>00524       &amp;&amp; ifa-&gt;ifa_family != AF_INET6
<a name="l00525"></a>00525 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l00526"></a>00526     )
<a name="l00527"></a>00527     <span class="keywordflow">return</span> 0;
<a name="l00528"></a>00528 
<a name="l00529"></a>00529   <span class="keywordflow">if</span> (h-&gt;nlmsg_type != RTM_NEWADDR &amp;&amp; h-&gt;nlmsg_type != RTM_DELADDR)
<a name="l00530"></a>00530     <span class="keywordflow">return</span> 0;
<a name="l00531"></a>00531 
<a name="l00532"></a>00532   len = h-&gt;nlmsg_len - NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> ifaddrmsg));
<a name="l00533"></a>00533   <span class="keywordflow">if</span> (len &lt; 0)
<a name="l00534"></a>00534     <span class="keywordflow">return</span> -1;
<a name="l00535"></a>00535 
<a name="l00536"></a>00536   memset (tb, 0, <span class="keyword">sizeof</span> tb);
<a name="l00537"></a>00537   <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (tb, IFA_MAX, IFA_RTA (ifa), len);
<a name="l00538"></a>00538 
<a name="l00539"></a>00539   ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (ifa-&gt;ifa_index);
<a name="l00540"></a>00540   <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00541"></a>00541     {
<a name="l00542"></a>00542       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;netlink_interface_addr can&#39;t find interface by index %d&quot;</span>,
<a name="l00543"></a>00543                 ifa-&gt;ifa_index);
<a name="l00544"></a>00544       <span class="keywordflow">return</span> -1;
<a name="l00545"></a>00545     }
<a name="l00546"></a>00546 
<a name="l00547"></a>00547   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)    <span class="comment">/* remove this line to see initial ifcfg */</span>
<a name="l00548"></a>00548     {
<a name="l00549"></a>00549       <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l00550"></a>00550       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_interface_addr %s %s:&quot;</span>,
<a name="l00551"></a>00551                  <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (nlmsg_str, h-&gt;nlmsg_type), ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00552"></a>00552       <span class="keywordflow">if</span> (tb[IFA_LOCAL])
<a name="l00553"></a>00553         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  IFA_LOCAL     %s/%d&quot;</span>,
<a name="l00554"></a>00554             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (ifa-&gt;ifa_family, RTA_DATA (tb[IFA_LOCAL]),
<a name="l00555"></a>00555                    buf, BUFSIZ), ifa-&gt;ifa_prefixlen);
<a name="l00556"></a>00556       <span class="keywordflow">if</span> (tb[IFA_ADDRESS])
<a name="l00557"></a>00557         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  IFA_ADDRESS   %s/%d&quot;</span>,
<a name="l00558"></a>00558             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (ifa-&gt;ifa_family, RTA_DATA (tb[IFA_ADDRESS]),
<a name="l00559"></a>00559                                buf, BUFSIZ), ifa-&gt;ifa_prefixlen);
<a name="l00560"></a>00560       <span class="keywordflow">if</span> (tb[IFA_BROADCAST])
<a name="l00561"></a>00561         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  IFA_BROADCAST %s/%d&quot;</span>,
<a name="l00562"></a>00562             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (ifa-&gt;ifa_family, RTA_DATA (tb[IFA_BROADCAST]),
<a name="l00563"></a>00563                    buf, BUFSIZ), ifa-&gt;ifa_prefixlen);
<a name="l00564"></a>00564       <span class="keywordflow">if</span> (tb[IFA_LABEL] &amp;&amp; strcmp (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, RTA_DATA (tb[IFA_LABEL])))
<a name="l00565"></a>00565         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  IFA_LABEL     %s&quot;</span>, (<span class="keywordtype">char</span> *)RTA_DATA (tb[IFA_LABEL]));
<a name="l00566"></a>00566       
<a name="l00567"></a>00567       <span class="keywordflow">if</span> (tb[IFA_CACHEINFO])
<a name="l00568"></a>00568         {
<a name="l00569"></a>00569           <span class="keyword">struct </span>ifa_cacheinfo *ci = RTA_DATA (tb[IFA_CACHEINFO]);
<a name="l00570"></a>00570           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  IFA_CACHEINFO pref %d, valid %d&quot;</span>,
<a name="l00571"></a>00571                       ci-&gt;ifa_prefered, ci-&gt;ifa_valid);
<a name="l00572"></a>00572         }
<a name="l00573"></a>00573     }
<a name="l00574"></a>00574   
<a name="l00575"></a>00575   <span class="comment">/* logic copied from iproute2/ip/ipaddress.c:print_addrinfo() */</span>
<a name="l00576"></a>00576   <span class="keywordflow">if</span> (tb[IFA_LOCAL] == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00577"></a>00577     tb[IFA_LOCAL] = tb[IFA_ADDRESS];
<a name="l00578"></a>00578   <span class="keywordflow">if</span> (tb[IFA_ADDRESS] == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00579"></a>00579     tb[IFA_ADDRESS] = tb[IFA_LOCAL];
<a name="l00580"></a>00580   
<a name="l00581"></a>00581   <span class="comment">/* local interface address */</span>
<a name="l00582"></a>00582   addr = (tb[IFA_LOCAL] ? RTA_DATA(tb[IFA_LOCAL]) : <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00583"></a>00583 
<a name="l00584"></a>00584   <span class="comment">/* is there a peer address? */</span>
<a name="l00585"></a>00585   <span class="keywordflow">if</span> (tb[IFA_ADDRESS] &amp;&amp;
<a name="l00586"></a>00586       <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a>(RTA_DATA(tb[IFA_ADDRESS]), RTA_DATA(tb[IFA_LOCAL]), RTA_PAYLOAD(tb[IFA_ADDRESS])))
<a name="l00587"></a>00587     {
<a name="l00588"></a>00588       broad = RTA_DATA(tb[IFA_ADDRESS]);
<a name="l00589"></a>00589       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="if_8h.html#aa84309c25e4cee681e361d14404618e9">ZEBRA_IFA_PEER</a>);
<a name="l00590"></a>00590     }
<a name="l00591"></a>00591   <span class="keywordflow">else</span>
<a name="l00592"></a>00592     <span class="comment">/* seeking a broadcast address */</span>
<a name="l00593"></a>00593     broad = (tb[IFA_BROADCAST] ? RTA_DATA(tb[IFA_BROADCAST]) : <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00594"></a>00594 
<a name="l00595"></a>00595   <span class="comment">/* addr is primary key, SOL if we don&#39;t have one */</span>
<a name="l00596"></a>00596   <span class="keywordflow">if</span> (addr == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00597"></a>00597     {
<a name="l00598"></a>00598       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: NULL address&quot;</span>, __func__);
<a name="l00599"></a>00599       <span class="keywordflow">return</span> -1;
<a name="l00600"></a>00600     }
<a name="l00601"></a>00601 
<a name="l00602"></a>00602   <span class="comment">/* Flags. */</span>
<a name="l00603"></a>00603   <span class="keywordflow">if</span> (ifa-&gt;ifa_flags &amp; IFA_F_SECONDARY)
<a name="l00604"></a>00604     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">ZEBRA_IFA_SECONDARY</a>);
<a name="l00605"></a>00605 
<a name="l00606"></a>00606   <span class="comment">/* Label */</span>
<a name="l00607"></a>00607   <span class="keywordflow">if</span> (tb[IFA_LABEL])
<a name="l00608"></a>00608     label = (<span class="keywordtype">char</span> *) RTA_DATA (tb[IFA_LABEL]);
<a name="l00609"></a>00609 
<a name="l00610"></a>00610   <span class="keywordflow">if</span> (ifp &amp;&amp; label &amp;&amp; strcmp (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, label) == 0)
<a name="l00611"></a>00611     label = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00612"></a>00612 
<a name="l00613"></a>00613   <span class="comment">/* Register interface address to the interface. */</span>
<a name="l00614"></a>00614   <span class="keywordflow">if</span> (ifa-&gt;ifa_family == AF_INET)
<a name="l00615"></a>00615     {
<a name="l00616"></a>00616       <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWADDR)
<a name="l00617"></a>00617         <a class="code" href="connected_8c.html#adfdf8a147f3057eebc9854c50f65d65b">connected_add_ipv4</a> (ifp, flags,
<a name="l00618"></a>00618                             (<span class="keyword">struct</span> in_addr *) addr, ifa-&gt;ifa_prefixlen,
<a name="l00619"></a>00619                             (<span class="keyword">struct</span> in_addr *) broad, label);
<a name="l00620"></a>00620       <span class="keywordflow">else</span>
<a name="l00621"></a>00621         <a class="code" href="connected_8c.html#a751e06dc0752d03ac5c08c34b99d83f7">connected_delete_ipv4</a> (ifp, flags,
<a name="l00622"></a>00622                                (<span class="keyword">struct</span> in_addr *) addr, ifa-&gt;ifa_prefixlen,
<a name="l00623"></a>00623                                (<span class="keyword">struct</span> in_addr *) broad);
<a name="l00624"></a>00624     }
<a name="l00625"></a>00625 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00626"></a>00626 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (ifa-&gt;ifa_family == AF_INET6)
<a name="l00627"></a>00627     {
<a name="l00628"></a>00628       <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWADDR)
<a name="l00629"></a>00629         connected_add_ipv6 (ifp, flags,
<a name="l00630"></a>00630                             (<span class="keyword">struct</span> in6_addr *) addr, ifa-&gt;ifa_prefixlen,
<a name="l00631"></a>00631                             (<span class="keyword">struct</span> in6_addr *) broad, label);
<a name="l00632"></a>00632       <span class="keywordflow">else</span>
<a name="l00633"></a>00633         connected_delete_ipv6 (ifp,
<a name="l00634"></a>00634                                (<span class="keyword">struct</span> in6_addr *) addr, ifa-&gt;ifa_prefixlen,
<a name="l00635"></a>00635                                (<span class="keyword">struct</span> in6_addr *) broad);
<a name="l00636"></a>00636     }
<a name="l00637"></a>00637 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00638"></a>00638 
<a name="l00639"></a>00639   <span class="keywordflow">return</span> 0;
<a name="l00640"></a>00640 }
<a name="l00641"></a>00641 
<a name="l00642"></a>00642 <span class="comment">/* Looking up routing table by netlink interface. */</span>
<a name="l00643"></a>00643 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00644"></a><a class="code" href="rt__netlink_8c.html#a9c04be98bf7c5f03642b435673c9bcd4">00644</a> <a class="code" href="rt__netlink_8c.html#a9c04be98bf7c5f03642b435673c9bcd4">netlink_routing_table</a> (<span class="keyword">struct</span> sockaddr_nl *snl, <span class="keyword">struct</span> nlmsghdr *h)
<a name="l00645"></a>00645 {
<a name="l00646"></a>00646   <span class="keywordtype">int</span> len;
<a name="l00647"></a>00647   <span class="keyword">struct </span>rtmsg *rtm;
<a name="l00648"></a>00648   <span class="keyword">struct </span>rtattr *tb[RTA_MAX + 1];
<a name="l00649"></a>00649   u_char <a class="code" href="structflags.html">flags</a> = 0;
<a name="l00650"></a>00650 
<a name="l00651"></a>00651   <span class="keywordtype">char</span> anyaddr[16] = { 0 };
<a name="l00652"></a>00652 
<a name="l00653"></a>00653   <span class="keywordtype">int</span> index;
<a name="l00654"></a>00654   <span class="keywordtype">int</span> table;
<a name="l00655"></a>00655   <span class="keywordtype">int</span> <a class="code" href="structmetric.html">metric</a>;
<a name="l00656"></a>00656 
<a name="l00657"></a>00657   <span class="keywordtype">void</span> *dest;
<a name="l00658"></a>00658   <span class="keywordtype">void</span> *gate;
<a name="l00659"></a>00659   <span class="keywordtype">void</span> *src;
<a name="l00660"></a>00660 
<a name="l00661"></a>00661   rtm = NLMSG_DATA (h);
<a name="l00662"></a>00662 
<a name="l00663"></a>00663   <span class="keywordflow">if</span> (h-&gt;nlmsg_type != RTM_NEWROUTE)
<a name="l00664"></a>00664     <span class="keywordflow">return</span> 0;
<a name="l00665"></a>00665   <span class="keywordflow">if</span> (rtm-&gt;rtm_type != RTN_UNICAST)
<a name="l00666"></a>00666     <span class="keywordflow">return</span> 0;
<a name="l00667"></a>00667 
<a name="l00668"></a>00668   table = rtm-&gt;rtm_table;
<a name="l00669"></a>00669 <span class="preprocessor">#if 0                           </span><span class="comment">/* we weed them out later in rib_weed_tables () */</span>
<a name="l00670"></a>00670   <span class="keywordflow">if</span> (table != <a class="code" href="zebra_8h.html#a905cf7650e977e4fec30736f4984507a">RT_TABLE_MAIN</a> &amp;&amp; table != <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a5cde5668ed28c239047f536ad2b9d1c6">rtm_table_default</a>)
<a name="l00671"></a>00671     <span class="keywordflow">return</span> 0;
<a name="l00672"></a>00672 <span class="preprocessor">#endif</span>
<a name="l00673"></a>00673 <span class="preprocessor"></span>
<a name="l00674"></a>00674   len = h-&gt;nlmsg_len - NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtmsg));
<a name="l00675"></a>00675   <span class="keywordflow">if</span> (len &lt; 0)
<a name="l00676"></a>00676     <span class="keywordflow">return</span> -1;
<a name="l00677"></a>00677 
<a name="l00678"></a>00678   memset (tb, 0, <span class="keyword">sizeof</span> tb);
<a name="l00679"></a>00679   <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (tb, RTA_MAX, RTM_RTA (rtm), len);
<a name="l00680"></a>00680 
<a name="l00681"></a>00681   <span class="keywordflow">if</span> (rtm-&gt;rtm_flags &amp; RTM_F_CLONED)
<a name="l00682"></a>00682     <span class="keywordflow">return</span> 0;
<a name="l00683"></a>00683   <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_REDIRECT)
<a name="l00684"></a>00684     <span class="keywordflow">return</span> 0;
<a name="l00685"></a>00685   <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_KERNEL)
<a name="l00686"></a>00686     <span class="keywordflow">return</span> 0;
<a name="l00687"></a>00687 
<a name="l00688"></a>00688   <span class="keywordflow">if</span> (rtm-&gt;rtm_src_len != 0)
<a name="l00689"></a>00689     <span class="keywordflow">return</span> 0;
<a name="l00690"></a>00690 
<a name="l00691"></a>00691   <span class="comment">/* Route which inserted by Zebra. */</span>
<a name="l00692"></a>00692   <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_ZEBRA)
<a name="l00693"></a>00693     flags |= <a class="code" href="zebra_8h.html#a31c75681286a8a6a7311c55d8db8409e">ZEBRA_FLAG_SELFROUTE</a>;
<a name="l00694"></a>00694 
<a name="l00695"></a>00695   index = 0;
<a name="l00696"></a>00696   metric = 0;
<a name="l00697"></a>00697   dest = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00698"></a>00698   gate = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00699"></a>00699   src = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00700"></a>00700 
<a name="l00701"></a>00701   <span class="keywordflow">if</span> (tb[RTA_OIF])
<a name="l00702"></a>00702     index = *(<span class="keywordtype">int</span> *) RTA_DATA (tb[RTA_OIF]);
<a name="l00703"></a>00703 
<a name="l00704"></a>00704   <span class="keywordflow">if</span> (tb[RTA_DST])
<a name="l00705"></a>00705     dest = RTA_DATA (tb[RTA_DST]);
<a name="l00706"></a>00706   <span class="keywordflow">else</span>
<a name="l00707"></a>00707     dest = anyaddr;
<a name="l00708"></a>00708 
<a name="l00709"></a>00709   <span class="keywordflow">if</span> (tb[RTA_PREFSRC])
<a name="l00710"></a>00710     src = RTA_DATA (tb[RTA_PREFSRC]);
<a name="l00711"></a>00711 
<a name="l00712"></a>00712   <span class="comment">/* Multipath treatment is needed. */</span>
<a name="l00713"></a>00713   <span class="keywordflow">if</span> (tb[RTA_GATEWAY])
<a name="l00714"></a>00714     gate = RTA_DATA (tb[RTA_GATEWAY]);
<a name="l00715"></a>00715 
<a name="l00716"></a>00716   <span class="keywordflow">if</span> (tb[RTA_PRIORITY])
<a name="l00717"></a>00717     metric = *(<span class="keywordtype">int</span> *) RTA_DATA(tb[RTA_PRIORITY]);
<a name="l00718"></a>00718 
<a name="l00719"></a>00719   <span class="keywordflow">if</span> (rtm-&gt;rtm_family == AF_INET)
<a name="l00720"></a>00720     {
<a name="l00721"></a>00721       <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00722"></a>00722       p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00723"></a>00723       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;p.prefix, dest, 4);
<a name="l00724"></a>00724       p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = rtm-&gt;rtm_dst_len;
<a name="l00725"></a>00725 
<a name="l00726"></a>00726       <a class="code" href="rib_8h.html#a9f8cbb8feedf49125b4da9b87c36fedb">rib_add_ipv4</a> (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, flags, &amp;p, gate, src, index, table, metric, 0);
<a name="l00727"></a>00727     }
<a name="l00728"></a>00728 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00729"></a>00729 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (rtm-&gt;rtm_family == AF_INET6)
<a name="l00730"></a>00730     {
<a name="l00731"></a>00731       <span class="keyword">struct </span>prefix_ipv6 p;
<a name="l00732"></a>00732       p.family = AF_INET6;
<a name="l00733"></a>00733       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;p.prefix, dest, 16);
<a name="l00734"></a>00734       p.prefixlen = rtm-&gt;rtm_dst_len;
<a name="l00735"></a>00735 
<a name="l00736"></a>00736       rib_add_ipv6 (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, flags, &amp;p, gate, index, table,
<a name="l00737"></a>00737             metric, 0);
<a name="l00738"></a>00738     }
<a name="l00739"></a>00739 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00740"></a>00740 
<a name="l00741"></a>00741   <span class="keywordflow">return</span> 0;
<a name="l00742"></a>00742 }
<a name="l00743"></a>00743 
<a name="l00744"></a><a class="code" href="rt__netlink_8c.html#a3868f54f344479068c738714723ded02">00744</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="rt__netlink_8c.html#a3868f54f344479068c738714723ded02">rtproto_str</a>[] = {
<a name="l00745"></a>00745   {RTPROT_REDIRECT, <span class="stringliteral">&quot;redirect&quot;</span>},
<a name="l00746"></a>00746   {RTPROT_KERNEL,   <span class="stringliteral">&quot;kernel&quot;</span>},
<a name="l00747"></a>00747   {RTPROT_BOOT,     <span class="stringliteral">&quot;boot&quot;</span>},
<a name="l00748"></a>00748   {RTPROT_STATIC,   <span class="stringliteral">&quot;static&quot;</span>},
<a name="l00749"></a>00749   {RTPROT_GATED,    <span class="stringliteral">&quot;GateD&quot;</span>},
<a name="l00750"></a>00750   {RTPROT_RA,       <span class="stringliteral">&quot;router advertisement&quot;</span>},
<a name="l00751"></a>00751   {RTPROT_MRT,      <span class="stringliteral">&quot;MRT&quot;</span>},
<a name="l00752"></a>00752   {RTPROT_ZEBRA,    <span class="stringliteral">&quot;Zebra&quot;</span>},
<a name="l00753"></a>00753 <span class="preprocessor">#ifdef RTPROT_BIRD</span>
<a name="l00754"></a>00754 <span class="preprocessor"></span>  {RTPROT_BIRD,     <span class="stringliteral">&quot;BIRD&quot;</span>},
<a name="l00755"></a>00755 <span class="preprocessor">#endif </span><span class="comment">/* RTPROT_BIRD */</span>
<a name="l00756"></a>00756   {0,               <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>}
<a name="l00757"></a>00757 };
<a name="l00758"></a>00758 
<a name="l00759"></a>00759 <span class="comment">/* Routing information change from the kernel. */</span>
<a name="l00760"></a>00760 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00761"></a><a class="code" href="rt__netlink_8c.html#ac8f765ce015c72754da14933f147f318">00761</a> <a class="code" href="rt__netlink_8c.html#ac8f765ce015c72754da14933f147f318">netlink_route_change</a> (<span class="keyword">struct</span> sockaddr_nl *snl, <span class="keyword">struct</span> nlmsghdr *h)
<a name="l00762"></a>00762 {
<a name="l00763"></a>00763   <span class="keywordtype">int</span> len;
<a name="l00764"></a>00764   <span class="keyword">struct </span>rtmsg *rtm;
<a name="l00765"></a>00765   <span class="keyword">struct </span>rtattr *tb[RTA_MAX + 1];
<a name="l00766"></a>00766 
<a name="l00767"></a>00767   <span class="keywordtype">char</span> anyaddr[16] = { 0 };
<a name="l00768"></a>00768 
<a name="l00769"></a>00769   <span class="keywordtype">int</span> index;
<a name="l00770"></a>00770   <span class="keywordtype">int</span> table;
<a name="l00771"></a>00771   <span class="keywordtype">void</span> *dest;
<a name="l00772"></a>00772   <span class="keywordtype">void</span> *gate;
<a name="l00773"></a>00773   <span class="keywordtype">void</span> *src;
<a name="l00774"></a>00774 
<a name="l00775"></a>00775   rtm = NLMSG_DATA (h);
<a name="l00776"></a>00776 
<a name="l00777"></a>00777   <span class="keywordflow">if</span> (!(h-&gt;nlmsg_type == RTM_NEWROUTE || h-&gt;nlmsg_type == RTM_DELROUTE))
<a name="l00778"></a>00778     {
<a name="l00779"></a>00779       <span class="comment">/* If this is not route add/delete message print warning. */</span>
<a name="l00780"></a>00780       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Kernel message: %d\n&quot;</span>, h-&gt;nlmsg_type);
<a name="l00781"></a>00781       <span class="keywordflow">return</span> 0;
<a name="l00782"></a>00782     }
<a name="l00783"></a>00783 
<a name="l00784"></a>00784   <span class="comment">/* Connected route. */</span>
<a name="l00785"></a>00785   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00786"></a>00786     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s %s %s proto %s&quot;</span>,
<a name="l00787"></a>00787                h-&gt;nlmsg_type ==
<a name="l00788"></a>00788                RTM_NEWROUTE ? <span class="stringliteral">&quot;RTM_NEWROUTE&quot;</span> : <span class="stringliteral">&quot;RTM_DELROUTE&quot;</span>,
<a name="l00789"></a>00789                rtm-&gt;rtm_family == AF_INET ? <span class="stringliteral">&quot;ipv4&quot;</span> : <span class="stringliteral">&quot;ipv6&quot;</span>,
<a name="l00790"></a>00790                rtm-&gt;rtm_type == RTN_UNICAST ? <span class="stringliteral">&quot;unicast&quot;</span> : <span class="stringliteral">&quot;multicast&quot;</span>,
<a name="l00791"></a>00791                <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (rtproto_str, rtm-&gt;rtm_protocol));
<a name="l00792"></a>00792 
<a name="l00793"></a>00793   <span class="keywordflow">if</span> (rtm-&gt;rtm_type != RTN_UNICAST)
<a name="l00794"></a>00794     {
<a name="l00795"></a>00795       <span class="keywordflow">return</span> 0;
<a name="l00796"></a>00796     }
<a name="l00797"></a>00797 
<a name="l00798"></a>00798   table = rtm-&gt;rtm_table;
<a name="l00799"></a>00799   <span class="keywordflow">if</span> (table != <a class="code" href="zebra_8h.html#a905cf7650e977e4fec30736f4984507a">RT_TABLE_MAIN</a> &amp;&amp; table != <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a5cde5668ed28c239047f536ad2b9d1c6">rtm_table_default</a>)
<a name="l00800"></a>00800     {
<a name="l00801"></a>00801       <span class="keywordflow">return</span> 0;
<a name="l00802"></a>00802     }
<a name="l00803"></a>00803 
<a name="l00804"></a>00804   len = h-&gt;nlmsg_len - NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtmsg));
<a name="l00805"></a>00805   <span class="keywordflow">if</span> (len &lt; 0)
<a name="l00806"></a>00806     <span class="keywordflow">return</span> -1;
<a name="l00807"></a>00807 
<a name="l00808"></a>00808   memset (tb, 0, <span class="keyword">sizeof</span> tb);
<a name="l00809"></a>00809   <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (tb, RTA_MAX, RTM_RTA (rtm), len);
<a name="l00810"></a>00810 
<a name="l00811"></a>00811   <span class="keywordflow">if</span> (rtm-&gt;rtm_flags &amp; RTM_F_CLONED)
<a name="l00812"></a>00812     <span class="keywordflow">return</span> 0;
<a name="l00813"></a>00813   <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_REDIRECT)
<a name="l00814"></a>00814     <span class="keywordflow">return</span> 0;
<a name="l00815"></a>00815   <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_KERNEL)
<a name="l00816"></a>00816     <span class="keywordflow">return</span> 0;
<a name="l00817"></a>00817 
<a name="l00818"></a>00818   <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_ZEBRA &amp;&amp; h-&gt;nlmsg_type == RTM_NEWROUTE)
<a name="l00819"></a>00819     <span class="keywordflow">return</span> 0;
<a name="l00820"></a>00820 
<a name="l00821"></a>00821   <span class="keywordflow">if</span> (rtm-&gt;rtm_src_len != 0)
<a name="l00822"></a>00822     {
<a name="l00823"></a>00823       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;netlink_route_change(): no src len&quot;</span>);
<a name="l00824"></a>00824       <span class="keywordflow">return</span> 0;
<a name="l00825"></a>00825     }
<a name="l00826"></a>00826 
<a name="l00827"></a>00827   index = 0;
<a name="l00828"></a>00828   dest = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00829"></a>00829   gate = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00830"></a>00830   src = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00831"></a>00831 
<a name="l00832"></a>00832   <span class="keywordflow">if</span> (tb[RTA_OIF])
<a name="l00833"></a>00833     index = *(<span class="keywordtype">int</span> *) RTA_DATA (tb[RTA_OIF]);
<a name="l00834"></a>00834 
<a name="l00835"></a>00835   <span class="keywordflow">if</span> (tb[RTA_DST])
<a name="l00836"></a>00836     dest = RTA_DATA (tb[RTA_DST]);
<a name="l00837"></a>00837   <span class="keywordflow">else</span>
<a name="l00838"></a>00838     dest = anyaddr;
<a name="l00839"></a>00839 
<a name="l00840"></a>00840   <span class="keywordflow">if</span> (tb[RTA_GATEWAY])
<a name="l00841"></a>00841     gate = RTA_DATA (tb[RTA_GATEWAY]);
<a name="l00842"></a>00842 
<a name="l00843"></a>00843   <span class="keywordflow">if</span> (tb[RTA_PREFSRC])
<a name="l00844"></a>00844     src = RTA_DATA (tb[RTA_PREFSRC]);
<a name="l00845"></a>00845 
<a name="l00846"></a>00846   <span class="keywordflow">if</span> (rtm-&gt;rtm_family == AF_INET)
<a name="l00847"></a>00847     {
<a name="l00848"></a>00848       <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00849"></a>00849       p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00850"></a>00850       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;p.prefix, dest, 4);
<a name="l00851"></a>00851       p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = rtm-&gt;rtm_dst_len;
<a name="l00852"></a>00852 
<a name="l00853"></a>00853       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00854"></a>00854         {
<a name="l00855"></a>00855           <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWROUTE)
<a name="l00856"></a>00856             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RTM_NEWROUTE %s/%d&quot;</span>,
<a name="l00857"></a>00857                        inet_ntoa (p.prefix), p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
<a name="l00858"></a>00858           <span class="keywordflow">else</span>
<a name="l00859"></a>00859             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RTM_DELROUTE %s/%d&quot;</span>,
<a name="l00860"></a>00860                        inet_ntoa (p.prefix), p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
<a name="l00861"></a>00861         }
<a name="l00862"></a>00862 
<a name="l00863"></a>00863       <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWROUTE)
<a name="l00864"></a>00864         <a class="code" href="rib_8h.html#a9f8cbb8feedf49125b4da9b87c36fedb">rib_add_ipv4</a> (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, 0, &amp;p, gate, src, index, table, 0, 0);
<a name="l00865"></a>00865       <span class="keywordflow">else</span>
<a name="l00866"></a>00866         <a class="code" href="rib_8h.html#a71bb35924cbe7fc66195c1876c77bb44">rib_delete_ipv4</a> (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, 0, &amp;p, gate, index, table);
<a name="l00867"></a>00867     }
<a name="l00868"></a>00868 
<a name="l00869"></a>00869 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00870"></a>00870 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (rtm-&gt;rtm_family == AF_INET6)
<a name="l00871"></a>00871     {
<a name="l00872"></a>00872       <span class="keyword">struct </span>prefix_ipv6 p;
<a name="l00873"></a>00873       <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l00874"></a>00874 
<a name="l00875"></a>00875       p.family = AF_INET6;
<a name="l00876"></a>00876       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;p.prefix, dest, 16);
<a name="l00877"></a>00877       p.prefixlen = rtm-&gt;rtm_dst_len;
<a name="l00878"></a>00878 
<a name="l00879"></a>00879       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00880"></a>00880         {
<a name="l00881"></a>00881           <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWROUTE)
<a name="l00882"></a>00882             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RTM_NEWROUTE %s/%d&quot;</span>,
<a name="l00883"></a>00883                        <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;p.prefix, buf, BUFSIZ),
<a name="l00884"></a>00884                        p.prefixlen);
<a name="l00885"></a>00885           <span class="keywordflow">else</span>
<a name="l00886"></a>00886             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RTM_DELROUTE %s/%d&quot;</span>,
<a name="l00887"></a>00887                        <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;p.prefix, buf, BUFSIZ),
<a name="l00888"></a>00888                        p.prefixlen);
<a name="l00889"></a>00889         }
<a name="l00890"></a>00890 
<a name="l00891"></a>00891       <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWROUTE)
<a name="l00892"></a>00892         rib_add_ipv6 (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, 0, &amp;p, gate, index, table, 0, 0);
<a name="l00893"></a>00893       <span class="keywordflow">else</span>
<a name="l00894"></a>00894         rib_delete_ipv6 (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, 0, &amp;p, gate, index, table);
<a name="l00895"></a>00895     }
<a name="l00896"></a>00896 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00897"></a>00897 
<a name="l00898"></a>00898   <span class="keywordflow">return</span> 0;
<a name="l00899"></a>00899 }
<a name="l00900"></a>00900 
<a name="l00901"></a>00901 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00902"></a><a class="code" href="rt__netlink_8c.html#a45fac153b6c1d7c0a77f619989fe4954">00902</a> <a class="code" href="rt__netlink_8c.html#a45fac153b6c1d7c0a77f619989fe4954">netlink_link_change</a> (<span class="keyword">struct</span> sockaddr_nl *snl, <span class="keyword">struct</span> nlmsghdr *h)
<a name="l00903"></a>00903 {
<a name="l00904"></a>00904   <span class="keywordtype">int</span> len;
<a name="l00905"></a>00905   <span class="keyword">struct </span>ifinfomsg *ifi;
<a name="l00906"></a>00906   <span class="keyword">struct </span>rtattr *tb[IFLA_MAX + 1];
<a name="l00907"></a>00907   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l00908"></a>00908   <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;
<a name="l00909"></a>00909 
<a name="l00910"></a>00910   ifi = NLMSG_DATA (h);
<a name="l00911"></a>00911 
<a name="l00912"></a>00912   <span class="keywordflow">if</span> (!(h-&gt;nlmsg_type == RTM_NEWLINK || h-&gt;nlmsg_type == RTM_DELLINK))
<a name="l00913"></a>00913     {
<a name="l00914"></a>00914       <span class="comment">/* If this is not link add/delete message so print warning. */</span>
<a name="l00915"></a>00915       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;netlink_link_change: wrong kernel message %d\n&quot;</span>,
<a name="l00916"></a>00916                  h-&gt;nlmsg_type);
<a name="l00917"></a>00917       <span class="keywordflow">return</span> 0;
<a name="l00918"></a>00918     }
<a name="l00919"></a>00919 
<a name="l00920"></a>00920   len = h-&gt;nlmsg_len - NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> ifinfomsg));
<a name="l00921"></a>00921   <span class="keywordflow">if</span> (len &lt; 0)
<a name="l00922"></a>00922     <span class="keywordflow">return</span> -1;
<a name="l00923"></a>00923 
<a name="l00924"></a>00924   <span class="comment">/* Looking up interface name. */</span>
<a name="l00925"></a>00925   memset (tb, 0, <span class="keyword">sizeof</span> tb);
<a name="l00926"></a>00926   <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (tb, IFLA_MAX, IFLA_RTA (ifi), len);
<a name="l00927"></a>00927 
<a name="l00928"></a>00928 <span class="preprocessor">#ifdef IFLA_WIRELESS</span>
<a name="l00929"></a>00929 <span class="preprocessor"></span>  <span class="comment">/* check for wireless messages to ignore */</span>
<a name="l00930"></a>00930   <span class="keywordflow">if</span> ((tb[IFLA_WIRELESS] != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) &amp;&amp; (ifi-&gt;ifi_change == 0))
<a name="l00931"></a>00931     {
<a name="l00932"></a>00932       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l00933"></a>00933         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ignoring IFLA_WIRELESS message&quot;</span>, __func__);
<a name="l00934"></a>00934       <span class="keywordflow">return</span> 0;
<a name="l00935"></a>00935     }
<a name="l00936"></a>00936 <span class="preprocessor">#endif </span><span class="comment">/* IFLA_WIRELESS */</span>
<a name="l00937"></a>00937   
<a name="l00938"></a>00938   <span class="keywordflow">if</span> (tb[IFLA_IFNAME] == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00939"></a>00939     <span class="keywordflow">return</span> -1;
<a name="l00940"></a>00940   name = (<span class="keywordtype">char</span> *) RTA_DATA (tb[IFLA_IFNAME]);
<a name="l00941"></a>00941 
<a name="l00942"></a>00942   <span class="comment">/* Add interface. */</span>
<a name="l00943"></a>00943   <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWLINK)
<a name="l00944"></a>00944     {
<a name="l00945"></a>00945       ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (name);
<a name="l00946"></a>00946 
<a name="l00947"></a>00947       <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifp-&gt;<a class="code" href="structinterface.html#ae145c01f63b3abaca8e3805f9e396c4a">status</a>, <a class="code" href="if_8h.html#a977548125c39a6ba021b2d0fde8f5a52">ZEBRA_INTERFACE_ACTIVE</a>))
<a name="l00948"></a>00948         {
<a name="l00949"></a>00949           <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00950"></a>00950             ifp = <a class="code" href="if_8c.html#ade08039f656683282d34ea210ea79447">if_get_by_name</a> (name);
<a name="l00951"></a>00951 
<a name="l00952"></a>00952           <a class="code" href="rt__netlink_8c.html#a5c99605e6bb5d2d0dd874f4336734806">set_ifindex</a>(ifp, ifi-&gt;ifi_index);
<a name="l00953"></a>00953           ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> = ifi-&gt;ifi_flags &amp; 0x0000fffff;
<a name="l00954"></a>00954           ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = *(<span class="keywordtype">int</span> *) RTA_DATA (tb[IFLA_MTU]);
<a name="l00955"></a>00955           ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = 1;
<a name="l00956"></a>00956 
<a name="l00957"></a>00957           <span class="comment">/* If new link is added. */</span>
<a name="l00958"></a>00958           <a class="code" href="interface_8c.html#afc558d5fc9ef4b3b59af78576e079a28">if_add_update</a> (ifp);
<a name="l00959"></a>00959         }
<a name="l00960"></a>00960       <span class="keywordflow">else</span>
<a name="l00961"></a>00961         {
<a name="l00962"></a>00962           <span class="comment">/* Interface status change. */</span>
<a name="l00963"></a>00963           <a class="code" href="rt__netlink_8c.html#a5c99605e6bb5d2d0dd874f4336734806">set_ifindex</a>(ifp, ifi-&gt;ifi_index);
<a name="l00964"></a>00964           ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = *(<span class="keywordtype">int</span> *) RTA_DATA (tb[IFLA_MTU]);
<a name="l00965"></a>00965           ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = 1;
<a name="l00966"></a>00966 
<a name="l00967"></a>00967           <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
<a name="l00968"></a>00968             {
<a name="l00969"></a>00969               ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> = ifi-&gt;ifi_flags &amp; 0x0000fffff;
<a name="l00970"></a>00970               <span class="keywordflow">if</span> (!<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
<a name="l00971"></a>00971                 <a class="code" href="interface_8c.html#a07c9e55f4e6b0072a7ccbf902b0b3035">if_down</a> (ifp);
<a name="l00972"></a>00972           <span class="keywordflow">else</span>
<a name="l00973"></a>00973         <span class="comment">/* Must notify client daemons of new interface status. */</span>
<a name="l00974"></a>00974             <a class="code" href="redistribute_8c.html#a47e3eef746ea4c7dd28652d126b29908">zebra_interface_up_update</a> (ifp);
<a name="l00975"></a>00975             }
<a name="l00976"></a>00976           <span class="keywordflow">else</span>
<a name="l00977"></a>00977             {
<a name="l00978"></a>00978               ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> = ifi-&gt;ifi_flags &amp; 0x0000fffff;
<a name="l00979"></a>00979               <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
<a name="l00980"></a>00980                 <a class="code" href="interface_8c.html#a5ed3c13631e5c34358258aad230d5380">if_up</a> (ifp);
<a name="l00981"></a>00981             }
<a name="l00982"></a>00982         }
<a name="l00983"></a>00983     }
<a name="l00984"></a>00984   <span class="keywordflow">else</span>
<a name="l00985"></a>00985     {
<a name="l00986"></a>00986       <span class="comment">/* RTM_DELLINK. */</span>
<a name="l00987"></a>00987       ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (name);
<a name="l00988"></a>00988 
<a name="l00989"></a>00989       <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00990"></a>00990         {
<a name="l00991"></a>00991           <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;interface %s is deleted but can&#39;t find&quot;</span>,
<a name="l00992"></a>00992                 name);
<a name="l00993"></a>00993           <span class="keywordflow">return</span> 0;
<a name="l00994"></a>00994         }
<a name="l00995"></a>00995 
<a name="l00996"></a>00996       <a class="code" href="interface_8c.html#a5ca58fe2209f09a828330810fc5a7d71">if_delete_update</a> (ifp);
<a name="l00997"></a>00997     }
<a name="l00998"></a>00998 
<a name="l00999"></a>00999   <span class="keywordflow">return</span> 0;
<a name="l01000"></a>01000 }
<a name="l01001"></a>01001 
<a name="l01002"></a>01002 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01003"></a><a class="code" href="rt__netlink_8c.html#a37aed8052016d2d44f7d058d871d4b59">01003</a> <a class="code" href="rt__netlink_8c.html#a37aed8052016d2d44f7d058d871d4b59">netlink_information_fetch</a> (<span class="keyword">struct</span> sockaddr_nl *snl, <span class="keyword">struct</span> nlmsghdr *h)
<a name="l01004"></a>01004 {
<a name="l01005"></a>01005   <span class="comment">/* JF: Ignore messages that aren&#39;t from the kernel */</span>
<a name="l01006"></a>01006   <span class="keywordflow">if</span> ( snl-&gt;nl_pid != 0 )
<a name="l01007"></a>01007     {
<a name="l01008"></a>01008       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> ( <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Ignoring message from pid %u&quot;</span>, snl-&gt;nl_pid );
<a name="l01009"></a>01009       <span class="keywordflow">return</span> 0;
<a name="l01010"></a>01010     }
<a name="l01011"></a>01011 
<a name="l01012"></a>01012   <span class="keywordflow">switch</span> (h-&gt;nlmsg_type)
<a name="l01013"></a>01013     {
<a name="l01014"></a>01014     <span class="keywordflow">case</span> RTM_NEWROUTE:
<a name="l01015"></a>01015       <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#ac8f765ce015c72754da14933f147f318">netlink_route_change</a> (snl, h);
<a name="l01016"></a>01016       <span class="keywordflow">break</span>;
<a name="l01017"></a>01017     <span class="keywordflow">case</span> RTM_DELROUTE:
<a name="l01018"></a>01018       <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#ac8f765ce015c72754da14933f147f318">netlink_route_change</a> (snl, h);
<a name="l01019"></a>01019       <span class="keywordflow">break</span>;
<a name="l01020"></a>01020     <span class="keywordflow">case</span> RTM_NEWLINK:
<a name="l01021"></a>01021       <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a45fac153b6c1d7c0a77f619989fe4954">netlink_link_change</a> (snl, h);
<a name="l01022"></a>01022       <span class="keywordflow">break</span>;
<a name="l01023"></a>01023     <span class="keywordflow">case</span> RTM_DELLINK:
<a name="l01024"></a>01024       <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a45fac153b6c1d7c0a77f619989fe4954">netlink_link_change</a> (snl, h);
<a name="l01025"></a>01025       <span class="keywordflow">break</span>;
<a name="l01026"></a>01026     <span class="keywordflow">case</span> RTM_NEWADDR:
<a name="l01027"></a>01027       <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">netlink_interface_addr</a> (snl, h);
<a name="l01028"></a>01028       <span class="keywordflow">break</span>;
<a name="l01029"></a>01029     <span class="keywordflow">case</span> RTM_DELADDR:
<a name="l01030"></a>01030       <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">netlink_interface_addr</a> (snl, h);
<a name="l01031"></a>01031       <span class="keywordflow">break</span>;
<a name="l01032"></a>01032     <span class="keywordflow">default</span>:
<a name="l01033"></a>01033       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Unknown netlink nlmsg_type %d\n&quot;</span>, h-&gt;nlmsg_type);
<a name="l01034"></a>01034       <span class="keywordflow">break</span>;
<a name="l01035"></a>01035     }
<a name="l01036"></a>01036   <span class="keywordflow">return</span> 0;
<a name="l01037"></a>01037 }
<a name="l01038"></a>01038 
<a name="l01039"></a>01039 <span class="comment">/* Interface lookup by netlink socket. */</span>
<a name="l01040"></a>01040 <span class="keywordtype">int</span>
<a name="l01041"></a><a class="code" href="rt__netlink_8c.html#aadaa9f17773804e3fbafba32b6cf9696">01041</a> <a class="code" href="if__netlink_8c.html#aadaa9f17773804e3fbafba32b6cf9696">interface_lookup_netlink</a> (<span class="keywordtype">void</span>)
<a name="l01042"></a>01042 {
<a name="l01043"></a>01043   <span class="keywordtype">int</span> ret;
<a name="l01044"></a>01044 
<a name="l01045"></a>01045   <span class="comment">/* Get interface information. */</span>
<a name="l01046"></a>01046   ret = <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (AF_PACKET, RTM_GETLINK, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01047"></a>01047   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01048"></a>01048     <span class="keywordflow">return</span> ret;
<a name="l01049"></a>01049   ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a9b6329fe421003715b72f100fb709b09">netlink_interface</a>, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01050"></a>01050   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01051"></a>01051     <span class="keywordflow">return</span> ret;
<a name="l01052"></a>01052 
<a name="l01053"></a>01053   <span class="comment">/* Get IPv4 address of the interfaces. */</span>
<a name="l01054"></a>01054   ret = <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (AF_INET, RTM_GETADDR, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01055"></a>01055   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01056"></a>01056     <span class="keywordflow">return</span> ret;
<a name="l01057"></a>01057   ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">netlink_interface_addr</a>, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01058"></a>01058   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01059"></a>01059     <span class="keywordflow">return</span> ret;
<a name="l01060"></a>01060 
<a name="l01061"></a>01061 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01062"></a>01062 <span class="preprocessor"></span>  <span class="comment">/* Get IPv6 address of the interfaces. */</span>
<a name="l01063"></a>01063   ret = <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (AF_INET6, RTM_GETADDR, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01064"></a>01064   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01065"></a>01065     <span class="keywordflow">return</span> ret;
<a name="l01066"></a>01066   ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">netlink_interface_addr</a>, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01067"></a>01067   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01068"></a>01068     <span class="keywordflow">return</span> ret;
<a name="l01069"></a>01069 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01070"></a>01070 
<a name="l01071"></a>01071   <span class="keywordflow">return</span> 0;
<a name="l01072"></a>01072 }
<a name="l01073"></a>01073 
<a name="l01074"></a>01074 <span class="comment">/* Routing table read function using netlink interface.  Only called</span>
<a name="l01075"></a>01075 <span class="comment">   bootstrap time. */</span>
<a name="l01076"></a>01076 <span class="keywordtype">int</span>
<a name="l01077"></a><a class="code" href="rtread__netlink_8c.html#a97f50b4506d27256cbe5986379471950">01077</a> <a class="code" href="rt__netlink_8c.html#ade2bbd0951e2dc56765b5651836c87ce">netlink_route_read</a> (<span class="keywordtype">void</span>)
<a name="l01078"></a>01078 {
<a name="l01079"></a>01079   <span class="keywordtype">int</span> ret;
<a name="l01080"></a>01080 
<a name="l01081"></a>01081   <span class="comment">/* Get IPv4 routing table. */</span>
<a name="l01082"></a>01082   ret = <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (AF_INET, RTM_GETROUTE, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01083"></a>01083   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01084"></a>01084     <span class="keywordflow">return</span> ret;
<a name="l01085"></a>01085   ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a9c04be98bf7c5f03642b435673c9bcd4">netlink_routing_table</a>, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01086"></a>01086   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01087"></a>01087     <span class="keywordflow">return</span> ret;
<a name="l01088"></a>01088 
<a name="l01089"></a>01089 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01090"></a>01090 <span class="preprocessor"></span>  <span class="comment">/* Get IPv6 routing table. */</span>
<a name="l01091"></a>01091   ret = <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (AF_INET6, RTM_GETROUTE, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01092"></a>01092   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01093"></a>01093     <span class="keywordflow">return</span> ret;
<a name="l01094"></a>01094   ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a9c04be98bf7c5f03642b435673c9bcd4">netlink_routing_table</a>, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01095"></a>01095   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01096"></a>01096     <span class="keywordflow">return</span> ret;
<a name="l01097"></a>01097 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01098"></a>01098 
<a name="l01099"></a>01099   <span class="keywordflow">return</span> 0;
<a name="l01100"></a>01100 }
<a name="l01101"></a>01101 
<a name="l01102"></a>01102 <span class="comment">/* Utility function  comes from iproute2. </span>
<a name="l01103"></a>01103 <span class="comment">   Authors: Alexey Kuznetsov, &lt;kuznet@ms2.inr.ac.ru&gt; */</span>
<a name="l01104"></a>01104 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01105"></a><a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">01105</a> <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (<span class="keyword">struct</span> nlmsghdr *<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>, <span class="keywordtype">int</span> maxlen, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>, <span class="keywordtype">int</span> alen)
<a name="l01106"></a>01106 {
<a name="l01107"></a>01107   <span class="keywordtype">int</span> len;
<a name="l01108"></a>01108   <span class="keyword">struct </span>rtattr *rta;
<a name="l01109"></a>01109 
<a name="l01110"></a>01110   len = RTA_LENGTH (alen);
<a name="l01111"></a>01111 
<a name="l01112"></a>01112   <span class="keywordflow">if</span> (NLMSG_ALIGN (n-&gt;nlmsg_len) + len &gt; maxlen)
<a name="l01113"></a>01113     <span class="keywordflow">return</span> -1;
<a name="l01114"></a>01114 
<a name="l01115"></a>01115   rta = (<span class="keyword">struct </span>rtattr *) (((<span class="keywordtype">char</span> *) n) + NLMSG_ALIGN (n-&gt;nlmsg_len));
<a name="l01116"></a>01116   rta-&gt;rta_type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l01117"></a>01117   rta-&gt;rta_len = len;
<a name="l01118"></a>01118   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (RTA_DATA (rta), data, alen);
<a name="l01119"></a>01119   n-&gt;nlmsg_len = NLMSG_ALIGN (n-&gt;nlmsg_len) + len;
<a name="l01120"></a>01120 
<a name="l01121"></a>01121   <span class="keywordflow">return</span> 0;
<a name="l01122"></a>01122 }
<a name="l01123"></a>01123 
<a name="l01124"></a>01124 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01125"></a><a class="code" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">01125</a> <a class="code" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">rta_addattr_l</a> (<span class="keyword">struct</span> rtattr *rta, <span class="keywordtype">int</span> maxlen, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">void</span> *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>, <span class="keywordtype">int</span> alen)
<a name="l01126"></a>01126 {
<a name="l01127"></a>01127   <span class="keywordtype">int</span> len;
<a name="l01128"></a>01128   <span class="keyword">struct </span>rtattr *subrta;
<a name="l01129"></a>01129 
<a name="l01130"></a>01130   len = RTA_LENGTH (alen);
<a name="l01131"></a>01131 
<a name="l01132"></a>01132   <span class="keywordflow">if</span> (RTA_ALIGN (rta-&gt;rta_len) + len &gt; maxlen)
<a name="l01133"></a>01133     <span class="keywordflow">return</span> -1;
<a name="l01134"></a>01134 
<a name="l01135"></a>01135   subrta = (<span class="keyword">struct </span>rtattr *) (((<span class="keywordtype">char</span> *) rta) + RTA_ALIGN (rta-&gt;rta_len));
<a name="l01136"></a>01136   subrta-&gt;rta_type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l01137"></a>01137   subrta-&gt;rta_len = len;
<a name="l01138"></a>01138   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (RTA_DATA (subrta), data, alen);
<a name="l01139"></a>01139   rta-&gt;rta_len = NLMSG_ALIGN (rta-&gt;rta_len) + len;
<a name="l01140"></a>01140 
<a name="l01141"></a>01141   <span class="keywordflow">return</span> 0;
<a name="l01142"></a>01142 }
<a name="l01143"></a>01143 
<a name="l01144"></a>01144 <span class="comment">/* Utility function comes from iproute2. </span>
<a name="l01145"></a>01145 <span class="comment">   Authors: Alexey Kuznetsov, &lt;kuznet@ms2.inr.ac.ru&gt; */</span>
<a name="l01146"></a>01146 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01147"></a><a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">01147</a> <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (<span class="keyword">struct</span> nlmsghdr *<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>, <span class="keywordtype">int</span> maxlen, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">int</span> <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>)
<a name="l01148"></a>01148 {
<a name="l01149"></a>01149   <span class="keywordtype">int</span> len;
<a name="l01150"></a>01150   <span class="keyword">struct </span>rtattr *rta;
<a name="l01151"></a>01151 
<a name="l01152"></a>01152   len = RTA_LENGTH (4);
<a name="l01153"></a>01153 
<a name="l01154"></a>01154   <span class="keywordflow">if</span> (NLMSG_ALIGN (n-&gt;nlmsg_len) + len &gt; maxlen)
<a name="l01155"></a>01155     <span class="keywordflow">return</span> -1;
<a name="l01156"></a>01156 
<a name="l01157"></a>01157   rta = (<span class="keyword">struct </span>rtattr *) (((<span class="keywordtype">char</span> *) n) + NLMSG_ALIGN (n-&gt;nlmsg_len));
<a name="l01158"></a>01158   rta-&gt;rta_type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l01159"></a>01159   rta-&gt;rta_len = len;
<a name="l01160"></a>01160   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (RTA_DATA (rta), &amp;data, 4);
<a name="l01161"></a>01161   n-&gt;nlmsg_len = NLMSG_ALIGN (n-&gt;nlmsg_len) + len;
<a name="l01162"></a>01162 
<a name="l01163"></a>01163   <span class="keywordflow">return</span> 0;
<a name="l01164"></a>01164 }
<a name="l01165"></a>01165 
<a name="l01166"></a>01166 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01167"></a><a class="code" href="rt__netlink_8c.html#a9bbcbae6235ca62292ec5f7f0a63ec8d">01167</a> <a class="code" href="rt__netlink_8c.html#a9bbcbae6235ca62292ec5f7f0a63ec8d">netlink_talk_filter</a> (<span class="keyword">struct</span> sockaddr_nl *snl, <span class="keyword">struct</span> nlmsghdr *h)
<a name="l01168"></a>01168 {
<a name="l01169"></a>01169   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;netlink_talk: ignoring message type 0x%04x&quot;</span>, h-&gt;nlmsg_type);
<a name="l01170"></a>01170   <span class="keywordflow">return</span> 0;
<a name="l01171"></a>01171 }
<a name="l01172"></a>01172 
<a name="l01173"></a>01173 <span class="comment">/* sendmsg() to netlink socket then recvmsg(). */</span>
<a name="l01174"></a>01174 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01175"></a><a class="code" href="rt__netlink_8c.html#ae6893dc7903dc8ac58967ebd1ecb9929">01175</a> <a class="code" href="rt__netlink_8c.html#ae6893dc7903dc8ac58967ebd1ecb9929">netlink_talk</a> (<span class="keyword">struct</span> nlmsghdr *<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>, <span class="keyword">struct</span> <a class="code" href="structnlsock.html">nlsock</a> *nl)
<a name="l01176"></a>01176 {
<a name="l01177"></a>01177   <span class="keywordtype">int</span> status;
<a name="l01178"></a>01178   <span class="keyword">struct </span>sockaddr_nl snl;
<a name="l01179"></a>01179   <span class="keyword">struct </span>iovec iov = { (<span class="keywordtype">void</span> *) n, n-&gt;nlmsg_len };
<a name="l01180"></a>01180   <span class="keyword">struct </span>msghdr msg = { (<span class="keywordtype">void</span> *) &amp;snl, <span class="keyword">sizeof</span> snl, &amp;iov, 1, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0 };
<a name="l01181"></a>01181   <span class="keywordtype">int</span> save_errno;
<a name="l01182"></a>01182 
<a name="l01183"></a>01183   memset (&amp;snl, 0, <span class="keyword">sizeof</span> snl);
<a name="l01184"></a>01184   snl.nl_family = AF_NETLINK;
<a name="l01185"></a>01185 
<a name="l01186"></a>01186   n-&gt;nlmsg_seq = ++nl-&gt;<a class="code" href="structnlsock.html#a45e4187569b7a314348d2f7bdcb3e76e">seq</a>;
<a name="l01187"></a>01187 
<a name="l01188"></a>01188   <span class="comment">/* Request an acknowledgement by setting NLM_F_ACK */</span>
<a name="l01189"></a>01189   n-&gt;nlmsg_flags |= NLM_F_ACK;
<a name="l01190"></a>01190 
<a name="l01191"></a>01191   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01192"></a>01192     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_talk: %s type %s(%u), seq=%u&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l01193"></a>01193                <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (nlmsg_str, n-&gt;nlmsg_type), n-&gt;nlmsg_type,
<a name="l01194"></a>01194                n-&gt;nlmsg_seq);
<a name="l01195"></a>01195 
<a name="l01196"></a>01196   <span class="comment">/* Send message to netlink interface. */</span>
<a name="l01197"></a>01197   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
<a name="l01198"></a>01198     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
<a name="l01199"></a>01199   status = sendmsg (nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, &amp;msg, 0);
<a name="l01200"></a>01200   save_errno = errno;
<a name="l01201"></a>01201   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l01202"></a>01202     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l01203"></a>01203 
<a name="l01204"></a>01204   <span class="keywordflow">if</span> (status &lt; 0)
<a name="l01205"></a>01205     {
<a name="l01206"></a>01206       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;netlink_talk sendmsg() error: %s&quot;</span>,
<a name="l01207"></a>01207             <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (save_errno));
<a name="l01208"></a>01208       <span class="keywordflow">return</span> -1;
<a name="l01209"></a>01209     }
<a name="l01210"></a>01210 
<a name="l01211"></a>01211 
<a name="l01212"></a>01212   <span class="comment">/* </span>
<a name="l01213"></a>01213 <span class="comment">   * Get reply from netlink socket. </span>
<a name="l01214"></a>01214 <span class="comment">   * The reply should either be an acknowlegement or an error.</span>
<a name="l01215"></a>01215 <span class="comment">   */</span>
<a name="l01216"></a>01216   <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a9bbcbae6235ca62292ec5f7f0a63ec8d">netlink_talk_filter</a>, nl);
<a name="l01217"></a>01217 }
<a name="l01218"></a>01218 
<a name="l01219"></a>01219 <span class="comment">/* Routing table change via netlink interface. */</span>
<a name="l01220"></a>01220 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01221"></a><a class="code" href="rt__netlink_8c.html#af906bd1169159d6eea28f9438e4dbc23">01221</a> <a class="code" href="rt__netlink_8c.html#af906bd1169159d6eea28f9438e4dbc23">netlink_route</a> (<span class="keywordtype">int</span> cmd, <span class="keywordtype">int</span> family, <span class="keywordtype">void</span> *dest, <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, <span class="keywordtype">void</span> *gate,
<a name="l01222"></a>01222                <span class="keywordtype">int</span> index, <span class="keywordtype">int</span> zebra_flags, <span class="keywordtype">int</span> table)
<a name="l01223"></a>01223 {
<a name="l01224"></a>01224   <span class="keywordtype">int</span> ret;
<a name="l01225"></a>01225   <span class="keywordtype">int</span> bytelen;
<a name="l01226"></a>01226   <span class="keyword">struct </span>sockaddr_nl snl;
<a name="l01227"></a>01227   <span class="keywordtype">int</span> discard;
<a name="l01228"></a>01228 
<a name="l01229"></a>01229   <span class="keyword">struct</span>
<a name="l01230"></a>01230   {
<a name="l01231"></a>01231     <span class="keyword">struct </span>nlmsghdr n;
<a name="l01232"></a>01232     <span class="keyword">struct </span>rtmsg r;
<a name="l01233"></a>01233     <span class="keywordtype">char</span> buf[1024];
<a name="l01234"></a>01234   } req;
<a name="l01235"></a>01235 
<a name="l01236"></a>01236   memset (&amp;req, 0, <span class="keyword">sizeof</span> req);
<a name="l01237"></a>01237 
<a name="l01238"></a>01238   bytelen = (family == AF_INET ? 4 : 16);
<a name="l01239"></a>01239 
<a name="l01240"></a>01240   req.n.nlmsg_len = NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtmsg));
<a name="l01241"></a>01241   req.n.nlmsg_flags = NLM_F_CREATE | NLM_F_REQUEST;
<a name="l01242"></a>01242   req.n.nlmsg_type = cmd;
<a name="l01243"></a>01243   req.r.rtm_family = family;
<a name="l01244"></a>01244   req.r.rtm_table = table;
<a name="l01245"></a>01245   req.r.rtm_dst_len = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l01246"></a>01246   req.r.rtm_protocol = RTPROT_ZEBRA;
<a name="l01247"></a>01247   req.r.rtm_scope = RT_SCOPE_UNIVERSE;
<a name="l01248"></a>01248 
<a name="l01249"></a>01249   <span class="keywordflow">if</span> ((zebra_flags &amp; <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>)
<a name="l01250"></a>01250       || (zebra_flags &amp; <a class="code" href="zebra_8h.html#ade86fda8e343fab895b8996b27358ca0">ZEBRA_FLAG_REJECT</a>))
<a name="l01251"></a>01251     discard = 1;
<a name="l01252"></a>01252   <span class="keywordflow">else</span>
<a name="l01253"></a>01253     discard = 0;
<a name="l01254"></a>01254 
<a name="l01255"></a>01255   <span class="keywordflow">if</span> (cmd == RTM_NEWROUTE)
<a name="l01256"></a>01256     {
<a name="l01257"></a>01257       <span class="keywordflow">if</span> (discard)
<a name="l01258"></a>01258         {
<a name="l01259"></a>01259           <span class="keywordflow">if</span> (zebra_flags &amp; ZEBRA_FLAG_BLACKHOLE)
<a name="l01260"></a>01260             req.r.rtm_type = RTN_BLACKHOLE;
<a name="l01261"></a>01261           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (zebra_flags &amp; ZEBRA_FLAG_REJECT)
<a name="l01262"></a>01262             req.r.rtm_type = RTN_UNREACHABLE;
<a name="l01263"></a>01263           <span class="keywordflow">else</span>
<a name="l01264"></a>01264             <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (RTN_BLACKHOLE != RTN_UNREACHABLE);  <span class="comment">/* false */</span>
<a name="l01265"></a>01265         }
<a name="l01266"></a>01266       <span class="keywordflow">else</span>
<a name="l01267"></a>01267         req.r.rtm_type = RTN_UNICAST;
<a name="l01268"></a>01268     }
<a name="l01269"></a>01269 
<a name="l01270"></a>01270   <span class="keywordflow">if</span> (dest)
<a name="l01271"></a>01271     <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_DST, dest, bytelen);
<a name="l01272"></a>01272 
<a name="l01273"></a>01273   <span class="keywordflow">if</span> (!discard)
<a name="l01274"></a>01274     {
<a name="l01275"></a>01275       <span class="keywordflow">if</span> (gate)
<a name="l01276"></a>01276         <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_GATEWAY, gate, bytelen);
<a name="l01277"></a>01277       <span class="keywordflow">if</span> (index &gt; 0)
<a name="l01278"></a>01278         <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_OIF, index);
<a name="l01279"></a>01279     }
<a name="l01280"></a>01280 
<a name="l01281"></a>01281   <span class="comment">/* Destination netlink address. */</span>
<a name="l01282"></a>01282   memset (&amp;snl, 0, <span class="keyword">sizeof</span> snl);
<a name="l01283"></a>01283   snl.nl_family = AF_NETLINK;
<a name="l01284"></a>01284 
<a name="l01285"></a>01285   <span class="comment">/* Talk to netlink socket. */</span>
<a name="l01286"></a>01286   ret = <a class="code" href="rt__netlink_8c.html#ae6893dc7903dc8ac58967ebd1ecb9929">netlink_talk</a> (&amp;req.n, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01287"></a>01287   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01288"></a>01288     <span class="keywordflow">return</span> -1;
<a name="l01289"></a>01289 
<a name="l01290"></a>01290   <span class="keywordflow">return</span> 0;
<a name="l01291"></a>01291 }
<a name="l01292"></a>01292 
<a name="l01293"></a>01293 <span class="comment">/* Routing table change via netlink interface. */</span>
<a name="l01294"></a>01294 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01295"></a><a class="code" href="rt__netlink_8c.html#a0e3c75709d3e9ee940e4162ba28716a5">01295</a> <a class="code" href="rt__netlink_8c.html#a0e3c75709d3e9ee940e4162ba28716a5">netlink_route_multipath</a> (<span class="keywordtype">int</span> cmd, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>,
<a name="l01296"></a>01296                          <span class="keywordtype">int</span> family)
<a name="l01297"></a>01297 {
<a name="l01298"></a>01298   <span class="keywordtype">int</span> bytelen;
<a name="l01299"></a>01299   <span class="keyword">struct </span>sockaddr_nl snl;
<a name="l01300"></a>01300   <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01301"></a>01301   <span class="keywordtype">int</span> nexthop_num = 0;
<a name="l01302"></a>01302   <span class="keywordtype">int</span> discard;
<a name="l01303"></a>01303 
<a name="l01304"></a>01304   <span class="keyword">struct</span>
<a name="l01305"></a>01305   {
<a name="l01306"></a>01306     <span class="keyword">struct </span>nlmsghdr n;
<a name="l01307"></a>01307     <span class="keyword">struct </span>rtmsg r;
<a name="l01308"></a>01308     <span class="keywordtype">char</span> buf[1024];
<a name="l01309"></a>01309   } req;
<a name="l01310"></a>01310 
<a name="l01311"></a>01311   memset (&amp;req, 0, <span class="keyword">sizeof</span> req);
<a name="l01312"></a>01312 
<a name="l01313"></a>01313   bytelen = (family == AF_INET ? 4 : 16);
<a name="l01314"></a>01314 
<a name="l01315"></a>01315   req.n.nlmsg_len = NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtmsg));
<a name="l01316"></a>01316   req.n.nlmsg_flags = NLM_F_CREATE | NLM_F_REQUEST;
<a name="l01317"></a>01317   req.n.nlmsg_type = cmd;
<a name="l01318"></a>01318   req.r.rtm_family = family;
<a name="l01319"></a>01319   req.r.rtm_table = rib-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a>;
<a name="l01320"></a>01320   req.r.rtm_dst_len = p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l01321"></a>01321   req.r.rtm_protocol = RTPROT_ZEBRA;
<a name="l01322"></a>01322   req.r.rtm_scope = RT_SCOPE_UNIVERSE;
<a name="l01323"></a>01323 
<a name="l01324"></a>01324   <span class="keywordflow">if</span> ((rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> &amp; <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>) || (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> &amp; <a class="code" href="zebra_8h.html#ade86fda8e343fab895b8996b27358ca0">ZEBRA_FLAG_REJECT</a>))
<a name="l01325"></a>01325     discard = 1;
<a name="l01326"></a>01326   <span class="keywordflow">else</span>
<a name="l01327"></a>01327     discard = 0;
<a name="l01328"></a>01328 
<a name="l01329"></a>01329   <span class="keywordflow">if</span> (cmd == RTM_NEWROUTE)
<a name="l01330"></a>01330     {
<a name="l01331"></a>01331       <span class="keywordflow">if</span> (discard)
<a name="l01332"></a>01332         {
<a name="l01333"></a>01333           <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> &amp; <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>)
<a name="l01334"></a>01334             req.r.rtm_type = RTN_BLACKHOLE;
<a name="l01335"></a>01335           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> &amp; <a class="code" href="zebra_8h.html#ade86fda8e343fab895b8996b27358ca0">ZEBRA_FLAG_REJECT</a>)
<a name="l01336"></a>01336             req.r.rtm_type = RTN_UNREACHABLE;
<a name="l01337"></a>01337           <span class="keywordflow">else</span>
<a name="l01338"></a>01338             <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (RTN_BLACKHOLE != RTN_UNREACHABLE);  <span class="comment">/* false */</span>
<a name="l01339"></a>01339         }
<a name="l01340"></a>01340       <span class="keywordflow">else</span>
<a name="l01341"></a>01341         req.r.rtm_type = RTN_UNICAST;
<a name="l01342"></a>01342     }
<a name="l01343"></a>01343 
<a name="l01344"></a>01344   <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_DST, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, bytelen);
<a name="l01345"></a>01345 
<a name="l01346"></a>01346   <span class="comment">/* Metric. */</span>
<a name="l01347"></a>01347   <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PRIORITY, rib-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a>);
<a name="l01348"></a>01348 
<a name="l01349"></a>01349   <span class="keywordflow">if</span> (discard)
<a name="l01350"></a>01350     {
<a name="l01351"></a>01351       <span class="keywordflow">if</span> (cmd == RTM_NEWROUTE)
<a name="l01352"></a>01352         <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
<a name="l01353"></a>01353           <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);
<a name="l01354"></a>01354       <span class="keywordflow">goto</span> skip;
<a name="l01355"></a>01355     }
<a name="l01356"></a>01356 
<a name="l01357"></a>01357   <span class="comment">/* Multipath case. */</span>
<a name="l01358"></a>01358   <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#abe75551b41daecde649cb9864ef2dd01">nexthop_active_num</a> == 1 || MULTIPATH_NUM == 1)
<a name="l01359"></a>01359     {
<a name="l01360"></a>01360       <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
<a name="l01361"></a>01361         {
<a name="l01362"></a>01362 
<a name="l01363"></a>01363           <span class="keywordflow">if</span> ((cmd == RTM_NEWROUTE
<a name="l01364"></a>01364                &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>))
<a name="l01365"></a>01365               || (cmd == RTM_DELROUTE
<a name="l01366"></a>01366                   &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>)))
<a name="l01367"></a>01367             {
<a name="l01368"></a>01368 
<a name="l01369"></a>01369               <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>))
<a name="l01370"></a>01370                 {
<a name="l01371"></a>01371                   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01372"></a>01372                     {
<a name="l01373"></a>01373                       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
<a name="l01374"></a>01374                         (<span class="stringliteral">&quot;netlink_route_multipath() (recursive, 1 hop): &quot;</span>
<a name="l01375"></a>01375                          <span class="stringliteral">&quot;%s %s/%d, type %s&quot;</span>, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (nlmsg_str, cmd),
<a name="l01376"></a>01376 #ifdef HAVE_IPV6
<a name="l01377"></a>01377              (family == AF_INET) ? inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>) :
<a name="l01378"></a>01378              inet6_ntoa (p-&gt;u.prefix6),
<a name="l01379"></a>01379 #<span class="keywordflow">else</span>
<a name="l01380"></a>01380              inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
<a name="l01381"></a>01381 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l01382"></a>01382              
<a name="l01383"></a>01383              p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, <a class="code" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a>[nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a>]);
<a name="l01384"></a>01384                     }
<a name="l01385"></a>01385 
<a name="l01386"></a>01386                   <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>
<a name="l01387"></a>01387                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
<a name="l01388"></a>01388             {
<a name="l01389"></a>01389               <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_GATEWAY,
<a name="l01390"></a>01390                  &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
<a name="l01391"></a>01391                       <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
<a name="l01392"></a>01392                   <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a>(&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PREFSRC,
<a name="l01393"></a>01393                      &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
<a name="l01394"></a>01394               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01395"></a>01395             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
<a name="l01396"></a>01396                    <span class="stringliteral">&quot;1 hop): nexthop via %s if %u&quot;</span>,
<a name="l01397"></a>01397                    inet_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>),
<a name="l01398"></a>01398                    nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
<a name="l01399"></a>01399             }
<a name="l01400"></a>01400 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01401"></a>01401 <span class="preprocessor"></span>                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>
<a name="l01402"></a>01402                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>
<a name="l01403"></a>01403                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>)
<a name="l01404"></a>01404             {
<a name="l01405"></a>01405               <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_GATEWAY,
<a name="l01406"></a>01406                  &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.ipv6, bytelen);
<a name="l01407"></a>01407 
<a name="l01408"></a>01408               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01409"></a>01409             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
<a name="l01410"></a>01410                    <span class="stringliteral">&quot;1 hop): nexthop via %s if %u&quot;</span>,
<a name="l01411"></a>01411                    inet6_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.ipv6),
<a name="l01412"></a>01412                    nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
<a name="l01413"></a>01413             }
<a name="l01414"></a>01414 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01415"></a>01415                   <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
<a name="l01416"></a>01416                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>
<a name="l01417"></a>01417                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>
<a name="l01418"></a>01418                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>
<a name="l01419"></a>01419                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>)
<a name="l01420"></a>01420             {
<a name="l01421"></a>01421               <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_OIF,
<a name="l01422"></a>01422                  nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
<a name="l01423"></a>01423                       <span class="keywordflow">if</span> ((nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>
<a name="l01424"></a>01424                            || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>)
<a name="l01425"></a>01425                           &amp;&amp; nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
<a name="l01426"></a>01426                         <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PREFSRC,
<a name="l01427"></a>01427                  &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
<a name="l01428"></a>01428 
<a name="l01429"></a>01429               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01430"></a>01430             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
<a name="l01431"></a>01431                    <span class="stringliteral">&quot;1 hop): nexthop via if %u&quot;</span>,
<a name="l01432"></a>01432                    nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
<a name="l01433"></a>01433             }
<a name="l01434"></a>01434                 }
<a name="l01435"></a>01435               <span class="keywordflow">else</span>
<a name="l01436"></a>01436                 {
<a name="l01437"></a>01437                   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01438"></a>01438                     {
<a name="l01439"></a>01439                       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
<a name="l01440"></a>01440                         (<span class="stringliteral">&quot;netlink_route_multipath() (single hop): &quot;</span>
<a name="l01441"></a>01441                          <span class="stringliteral">&quot;%s %s/%d, type %s&quot;</span>, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (nlmsg_str, cmd),
<a name="l01442"></a>01442 #ifdef HAVE_IPV6
<a name="l01443"></a>01443              (family == AF_INET) ? inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>) :
<a name="l01444"></a>01444              inet6_ntoa (p-&gt;u.prefix6),
<a name="l01445"></a>01445 #<span class="keywordflow">else</span>
<a name="l01446"></a>01446              inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
<a name="l01447"></a>01447 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l01448"></a>01448              p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, <a class="code" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a>[nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>]);
<a name="l01449"></a>01449                     }
<a name="l01450"></a>01450 
<a name="l01451"></a>01451                   <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>
<a name="l01452"></a>01452                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
<a name="l01453"></a>01453             {
<a name="l01454"></a>01454               <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_GATEWAY,
<a name="l01455"></a>01455                  &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
<a name="l01456"></a>01456               <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
<a name="l01457"></a>01457                         <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PREFSRC,
<a name="l01458"></a>01458                  &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
<a name="l01459"></a>01459 
<a name="l01460"></a>01460               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01461"></a>01461             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (single hop): &quot;</span>
<a name="l01462"></a>01462                    <span class="stringliteral">&quot;nexthop via %s if %u&quot;</span>,
<a name="l01463"></a>01463                    inet_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>),
<a name="l01464"></a>01464                    nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
<a name="l01465"></a>01465             }
<a name="l01466"></a>01466 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01467"></a>01467 <span class="preprocessor"></span>                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>
<a name="l01468"></a>01468                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>
<a name="l01469"></a>01469                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>)
<a name="l01470"></a>01470             {
<a name="l01471"></a>01471               <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_GATEWAY,
<a name="l01472"></a>01472                  &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6, bytelen);
<a name="l01473"></a>01473 
<a name="l01474"></a>01474               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01475"></a>01475             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (single hop): &quot;</span>
<a name="l01476"></a>01476                    <span class="stringliteral">&quot;nexthop via %s if %u&quot;</span>,
<a name="l01477"></a>01477                    inet6_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6),
<a name="l01478"></a>01478                    nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
<a name="l01479"></a>01479             }
<a name="l01480"></a>01480 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01481"></a>01481                   <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
<a name="l01482"></a>01482                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>
<a name="l01483"></a>01483                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
<a name="l01484"></a>01484             {
<a name="l01485"></a>01485               <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_OIF, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
<a name="l01486"></a>01486 
<a name="l01487"></a>01487               <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
<a name="l01488"></a>01488                         <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PREFSRC,
<a name="l01489"></a>01489                  &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
<a name="l01490"></a>01490 
<a name="l01491"></a>01491               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01492"></a>01492             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (single hop): &quot;</span>
<a name="l01493"></a>01493                    <span class="stringliteral">&quot;nexthop via if %u&quot;</span>, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
<a name="l01494"></a>01494             }
<a name="l01495"></a>01495                   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>
<a name="l01496"></a>01496                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>)
<a name="l01497"></a>01497             {
<a name="l01498"></a>01498               <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_OIF, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
<a name="l01499"></a>01499 
<a name="l01500"></a>01500               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01501"></a>01501             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (single hop): &quot;</span>
<a name="l01502"></a>01502                    <span class="stringliteral">&quot;nexthop via if %u&quot;</span>, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
<a name="l01503"></a>01503             }
<a name="l01504"></a>01504                 }
<a name="l01505"></a>01505 
<a name="l01506"></a>01506               <span class="keywordflow">if</span> (cmd == RTM_NEWROUTE)
<a name="l01507"></a>01507                 <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);
<a name="l01508"></a>01508 
<a name="l01509"></a>01509               nexthop_num++;
<a name="l01510"></a>01510               <span class="keywordflow">break</span>;
<a name="l01511"></a>01511             }
<a name="l01512"></a>01512         }
<a name="l01513"></a>01513     }
<a name="l01514"></a>01514   <span class="keywordflow">else</span>
<a name="l01515"></a>01515     {
<a name="l01516"></a>01516       <span class="keywordtype">char</span> buf[1024];
<a name="l01517"></a>01517       <span class="keyword">struct </span>rtattr *rta = (<span class="keywordtype">void</span> *) buf;
<a name="l01518"></a>01518       <span class="keyword">struct </span>rtnexthop *rtnh;
<a name="l01519"></a>01519       <span class="keyword">union </span><a class="code" href="uniong__addr.html">g_addr</a> *src = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01520"></a>01520 
<a name="l01521"></a>01521       rta-&gt;rta_type = RTA_MULTIPATH;
<a name="l01522"></a>01522       rta-&gt;rta_len = RTA_LENGTH (0);
<a name="l01523"></a>01523       rtnh = RTA_DATA (rta);
<a name="l01524"></a>01524 
<a name="l01525"></a>01525       nexthop_num = 0;
<a name="l01526"></a>01526       <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>;
<a name="l01527"></a>01527            nexthop &amp;&amp; (MULTIPATH_NUM == 0 || nexthop_num &lt; MULTIPATH_NUM);
<a name="l01528"></a>01528            nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
<a name="l01529"></a>01529         {
<a name="l01530"></a>01530           <span class="keywordflow">if</span> ((cmd == RTM_NEWROUTE
<a name="l01531"></a>01531                &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>))
<a name="l01532"></a>01532               || (cmd == RTM_DELROUTE
<a name="l01533"></a>01533                   &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>)))
<a name="l01534"></a>01534             {
<a name="l01535"></a>01535               nexthop_num++;
<a name="l01536"></a>01536 
<a name="l01537"></a>01537               rtnh-&gt;rtnh_len = <span class="keyword">sizeof</span> (*rtnh);
<a name="l01538"></a>01538               rtnh-&gt;rtnh_flags = 0;
<a name="l01539"></a>01539               rtnh-&gt;rtnh_hops = 0;
<a name="l01540"></a>01540               rta-&gt;rta_len += rtnh-&gt;rtnh_len;
<a name="l01541"></a>01541 
<a name="l01542"></a>01542               <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>))
<a name="l01543"></a>01543                 {
<a name="l01544"></a>01544                   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01545"></a>01545                     {
<a name="l01546"></a>01546                       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_route_multipath() &quot;</span>
<a name="l01547"></a>01547                          <span class="stringliteral">&quot;(recursive, multihop): %s %s/%d type %s&quot;</span>,
<a name="l01548"></a>01548              <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (nlmsg_str, cmd),
<a name="l01549"></a>01549 #ifdef HAVE_IPV6
<a name="l01550"></a>01550              (family == AF_INET) ? inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>) :
<a name="l01551"></a>01551              inet6_ntoa (p-&gt;u.prefix6),
<a name="l01552"></a>01552 #<span class="keywordflow">else</span>
<a name="l01553"></a>01553              inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
<a name="l01554"></a>01554 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l01555"></a>01555                          p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, <a class="code" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a>[nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a>]);
<a name="l01556"></a>01556                     }
<a name="l01557"></a>01557                   <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>
<a name="l01558"></a>01558                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
<a name="l01559"></a>01559                     {
<a name="l01560"></a>01560                       <a class="code" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">rta_addattr_l</a> (rta, 4096, RTA_GATEWAY,
<a name="l01561"></a>01561                                      &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
<a name="l01562"></a>01562                       rtnh-&gt;rtnh_len += <span class="keyword">sizeof</span> (<span class="keyword">struct </span>rtattr) + 4;
<a name="l01563"></a>01563 
<a name="l01564"></a>01564               <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
<a name="l01565"></a>01565                         src = &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;
<a name="l01566"></a>01566 
<a name="l01567"></a>01567               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01568"></a>01568             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
<a name="l01569"></a>01569                    <span class="stringliteral">&quot;multihop): nexthop via %s if %u&quot;</span>,
<a name="l01570"></a>01570                    inet_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>),
<a name="l01571"></a>01571                    nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
<a name="l01572"></a>01572                     }
<a name="l01573"></a>01573 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01574"></a>01574 <span class="preprocessor"></span>                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>
<a name="l01575"></a>01575                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>
<a name="l01576"></a>01576                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>)
<a name="l01577"></a>01577             {
<a name="l01578"></a>01578               <a class="code" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">rta_addattr_l</a> (rta, 4096, RTA_GATEWAY,
<a name="l01579"></a>01579                      &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.ipv6, bytelen);
<a name="l01580"></a>01580 
<a name="l01581"></a>01581               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01582"></a>01582             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
<a name="l01583"></a>01583                    <span class="stringliteral">&quot;multihop): nexthop via %s if %u&quot;</span>,
<a name="l01584"></a>01584                    inet6_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.ipv6),
<a name="l01585"></a>01585                    nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
<a name="l01586"></a>01586             }
<a name="l01587"></a>01587 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01588"></a>01588                   <span class="comment">/* ifindex */</span>
<a name="l01589"></a>01589                   <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>
<a name="l01590"></a>01590               || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
<a name="l01591"></a>01591                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>)
<a name="l01592"></a>01592             {
<a name="l01593"></a>01593               rtnh-&gt;rtnh_ifindex = nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>;
<a name="l01594"></a>01594                       <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
<a name="l01595"></a>01595                         src = &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;
<a name="l01596"></a>01596 
<a name="l01597"></a>01597               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01598"></a>01598             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
<a name="l01599"></a>01599                    <span class="stringliteral">&quot;multihop): nexthop via if %u&quot;</span>,
<a name="l01600"></a>01600                    nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
<a name="l01601"></a>01601             }
<a name="l01602"></a>01602           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>
<a name="l01603"></a>01603                       || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>)
<a name="l01604"></a>01604             {
<a name="l01605"></a>01605               rtnh-&gt;rtnh_ifindex = nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>;
<a name="l01606"></a>01606 
<a name="l01607"></a>01607               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01608"></a>01608             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
<a name="l01609"></a>01609                    <span class="stringliteral">&quot;multihop): nexthop via if %u&quot;</span>,
<a name="l01610"></a>01610                    nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
<a name="l01611"></a>01611             }
<a name="l01612"></a>01612                   <span class="keywordflow">else</span>
<a name="l01613"></a>01613             {
<a name="l01614"></a>01614               rtnh-&gt;rtnh_ifindex = 0;
<a name="l01615"></a>01615             }
<a name="l01616"></a>01616                 }
<a name="l01617"></a>01617               <span class="keywordflow">else</span>
<a name="l01618"></a>01618                 {
<a name="l01619"></a>01619                   <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01620"></a>01620                     {
<a name="l01621"></a>01621                       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_route_multipath() (multihop): &quot;</span>
<a name="l01622"></a>01622                          <span class="stringliteral">&quot;%s %s/%d, type %s&quot;</span>, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (nlmsg_str, cmd),
<a name="l01623"></a>01623 #ifdef HAVE_IPV6
<a name="l01624"></a>01624              (family == AF_INET) ? inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>) :
<a name="l01625"></a>01625              inet6_ntoa (p-&gt;u.prefix6),
<a name="l01626"></a>01626 #<span class="keywordflow">else</span>
<a name="l01627"></a>01627              inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
<a name="l01628"></a>01628 #endif <span class="comment">/* HAVE_IPV6 */</span>
<a name="l01629"></a>01629              p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, <a class="code" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a>[nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>]);
<a name="l01630"></a>01630                     }
<a name="l01631"></a>01631                   <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>
<a name="l01632"></a>01632                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
<a name="l01633"></a>01633                     {
<a name="l01634"></a>01634               <a class="code" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">rta_addattr_l</a> (rta, 4096, RTA_GATEWAY,
<a name="l01635"></a>01635                      &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
<a name="l01636"></a>01636               rtnh-&gt;rtnh_len += <span class="keyword">sizeof</span> (<span class="keyword">struct </span>rtattr) + 4;
<a name="l01637"></a>01637 
<a name="l01638"></a>01638               <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
<a name="l01639"></a>01639                         src = &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;
<a name="l01640"></a>01640 
<a name="l01641"></a>01641                       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01642"></a>01642             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (multihop): &quot;</span>
<a name="l01643"></a>01643                    <span class="stringliteral">&quot;nexthop via %s if %u&quot;</span>,
<a name="l01644"></a>01644                    inet_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>),
<a name="l01645"></a>01645                    nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
<a name="l01646"></a>01646                     }
<a name="l01647"></a>01647 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01648"></a>01648 <span class="preprocessor"></span>                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>
<a name="l01649"></a>01649                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>
<a name="l01650"></a>01650                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>)
<a name="l01651"></a>01651             { 
<a name="l01652"></a>01652               <a class="code" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">rta_addattr_l</a> (rta, 4096, RTA_GATEWAY,
<a name="l01653"></a>01653                      &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6, bytelen);
<a name="l01654"></a>01654 
<a name="l01655"></a>01655               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01656"></a>01656             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (multihop): &quot;</span>
<a name="l01657"></a>01657                    <span class="stringliteral">&quot;nexthop via %s if %u&quot;</span>,
<a name="l01658"></a>01658                    inet6_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6),
<a name="l01659"></a>01659                    nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
<a name="l01660"></a>01660             }
<a name="l01661"></a>01661 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01662"></a>01662                   <span class="comment">/* ifindex */</span>
<a name="l01663"></a>01663                   <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>
<a name="l01664"></a>01664               || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
<a name="l01665"></a>01665                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>)
<a name="l01666"></a>01666                     {
<a name="l01667"></a>01667               rtnh-&gt;rtnh_ifindex = nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;
<a name="l01668"></a>01668               <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
<a name="l01669"></a>01669             src = &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;
<a name="l01670"></a>01670               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01671"></a>01671             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (multihop): &quot;</span>
<a name="l01672"></a>01672                    <span class="stringliteral">&quot;nexthop via if %u&quot;</span>, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
<a name="l01673"></a>01673             }
<a name="l01674"></a>01674                   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>
<a name="l01675"></a>01675                       || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>)
<a name="l01676"></a>01676             {
<a name="l01677"></a>01677               rtnh-&gt;rtnh_ifindex = nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;
<a name="l01678"></a>01678 
<a name="l01679"></a>01679               <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01680"></a>01680             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (multihop): &quot;</span>
<a name="l01681"></a>01681                    <span class="stringliteral">&quot;nexthop via if %u&quot;</span>, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
<a name="l01682"></a>01682             }
<a name="l01683"></a>01683                   <span class="keywordflow">else</span>
<a name="l01684"></a>01684             {
<a name="l01685"></a>01685               rtnh-&gt;rtnh_ifindex = 0;
<a name="l01686"></a>01686             }
<a name="l01687"></a>01687                 }
<a name="l01688"></a>01688               rtnh = RTNH_NEXT (rtnh);
<a name="l01689"></a>01689 
<a name="l01690"></a>01690               <span class="keywordflow">if</span> (cmd == RTM_NEWROUTE)
<a name="l01691"></a>01691                 <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);
<a name="l01692"></a>01692             }
<a name="l01693"></a>01693         }
<a name="l01694"></a>01694       <span class="keywordflow">if</span> (src)
<a name="l01695"></a>01695         <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PREFSRC, &amp;src-&gt;<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
<a name="l01696"></a>01696 
<a name="l01697"></a>01697       <span class="keywordflow">if</span> (rta-&gt;rta_len &gt; RTA_LENGTH (0))
<a name="l01698"></a>01698         <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, 1024, RTA_MULTIPATH, RTA_DATA (rta),
<a name="l01699"></a>01699                    RTA_PAYLOAD (rta));
<a name="l01700"></a>01700     }
<a name="l01701"></a>01701 
<a name="l01702"></a>01702   <span class="comment">/* If there is no useful nexthop then return. */</span>
<a name="l01703"></a>01703   <span class="keywordflow">if</span> (nexthop_num == 0)
<a name="l01704"></a>01704     {
<a name="l01705"></a>01705       <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
<a name="l01706"></a>01706         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_route_multipath(): No useful nexthop.&quot;</span>);
<a name="l01707"></a>01707       <span class="keywordflow">return</span> 0;
<a name="l01708"></a>01708     }
<a name="l01709"></a>01709 
<a name="l01710"></a>01710 skip:
<a name="l01711"></a>01711 
<a name="l01712"></a>01712   <span class="comment">/* Destination netlink address. */</span>
<a name="l01713"></a>01713   memset (&amp;snl, 0, <span class="keyword">sizeof</span> snl);
<a name="l01714"></a>01714   snl.nl_family = AF_NETLINK;
<a name="l01715"></a>01715 
<a name="l01716"></a>01716   <span class="comment">/* Talk to netlink socket. */</span>
<a name="l01717"></a>01717   <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#ae6893dc7903dc8ac58967ebd1ecb9929">netlink_talk</a> (&amp;req.n, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01718"></a>01718 }
<a name="l01719"></a>01719 
<a name="l01720"></a>01720 <span class="keywordtype">int</span>
<a name="l01721"></a><a class="code" href="rt__netlink_8c.html#afea56d96d08fd5aab1d8e506cd4b25c0">01721</a> <a class="code" href="kernel__null_8c.html#aa6feda059b2e43a10fff6c3517a0cc58">kernel_add_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>)
<a name="l01722"></a>01722 {
<a name="l01723"></a>01723   <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a0e3c75709d3e9ee940e4162ba28716a5">netlink_route_multipath</a> (RTM_NEWROUTE, p, rib, AF_INET);
<a name="l01724"></a>01724 }
<a name="l01725"></a>01725 
<a name="l01726"></a>01726 <span class="keywordtype">int</span>
<a name="l01727"></a><a class="code" href="rt__netlink_8c.html#af2913f44f44cac8461b82b362ebbe986">01727</a> <a class="code" href="rt_8h.html#a971b1b9939895652d58c065d2a3493cc">kernel_delete_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>)
<a name="l01728"></a>01728 {
<a name="l01729"></a>01729   <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a0e3c75709d3e9ee940e4162ba28716a5">netlink_route_multipath</a> (RTM_DELROUTE, p, rib, AF_INET);
<a name="l01730"></a>01730 }
<a name="l01731"></a>01731 
<a name="l01732"></a>01732 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01733"></a>01733 <span class="preprocessor"></span><span class="keywordtype">int</span>
<a name="l01734"></a>01734 <a class="code" href="kernel__null_8c.html#af67f65b3b9fcc4137ba7c2df10f1e3f9">kernel_add_ipv6</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>)
<a name="l01735"></a>01735 {
<a name="l01736"></a>01736   <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a0e3c75709d3e9ee940e4162ba28716a5">netlink_route_multipath</a> (RTM_NEWROUTE, p, rib, AF_INET6);
<a name="l01737"></a>01737 }
<a name="l01738"></a>01738 
<a name="l01739"></a>01739 <span class="keywordtype">int</span>
<a name="l01740"></a>01740 kernel_delete_ipv6 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <span class="keyword">struct</span> <a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>)
<a name="l01741"></a>01741 {
<a name="l01742"></a>01742   <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a0e3c75709d3e9ee940e4162ba28716a5">netlink_route_multipath</a> (RTM_DELROUTE, p, rib, AF_INET6);
<a name="l01743"></a>01743 }
<a name="l01744"></a>01744 
<a name="l01745"></a>01745 <span class="comment">/* Delete IPv6 route from the kernel. */</span>
<a name="l01746"></a>01746 <span class="keywordtype">int</span>
<a name="l01747"></a>01747 <a class="code" href="kernel__null_8c.html#a5f3b179c330c4ba96ba68a947c1a03a7">kernel_delete_ipv6_old</a> (<span class="keyword">struct</span> prefix_ipv6 *dest, <span class="keyword">struct</span> in6_addr *gate,
<a name="l01748"></a>01748                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index, <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>, <span class="keywordtype">int</span> table)
<a name="l01749"></a>01749 {
<a name="l01750"></a>01750   <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#af906bd1169159d6eea28f9438e4dbc23">netlink_route</a> (RTM_DELROUTE, AF_INET6, &amp;dest-&gt;prefix,
<a name="l01751"></a>01751                         dest-&gt;prefixlen, gate, index, flags, table);
<a name="l01752"></a>01752 }
<a name="l01753"></a>01753 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01754"></a>01754 
<a name="l01755"></a>01755 <span class="comment">/* Interface address modification. */</span>
<a name="l01756"></a>01756 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01757"></a><a class="code" href="rt__netlink_8c.html#a201c79d2e3c1eb272146e2e49391e524">01757</a> <a class="code" href="rt__netlink_8c.html#a201c79d2e3c1eb272146e2e49391e524">netlink_address</a> (<span class="keywordtype">int</span> cmd, <span class="keywordtype">int</span> family, <span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp,
<a name="l01758"></a>01758                  <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l01759"></a>01759 {
<a name="l01760"></a>01760   <span class="keywordtype">int</span> bytelen;
<a name="l01761"></a>01761   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l01762"></a>01762 
<a name="l01763"></a>01763   <span class="keyword">struct</span>
<a name="l01764"></a>01764   {
<a name="l01765"></a>01765     <span class="keyword">struct </span>nlmsghdr n;
<a name="l01766"></a>01766     <span class="keyword">struct </span>ifaddrmsg ifa;
<a name="l01767"></a>01767     <span class="keywordtype">char</span> buf[1024];
<a name="l01768"></a>01768   } req;
<a name="l01769"></a>01769 
<a name="l01770"></a>01770   p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l01771"></a>01771   memset (&amp;req, 0, <span class="keyword">sizeof</span> req);
<a name="l01772"></a>01772 
<a name="l01773"></a>01773   bytelen = (family == AF_INET ? 4 : 16);
<a name="l01774"></a>01774 
<a name="l01775"></a>01775   req.n.nlmsg_len = NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> ifaddrmsg));
<a name="l01776"></a>01776   req.n.nlmsg_flags = NLM_F_REQUEST;
<a name="l01777"></a>01777   req.n.nlmsg_type = cmd;
<a name="l01778"></a>01778   req.ifa.ifa_family = family;
<a name="l01779"></a>01779 
<a name="l01780"></a>01780   req.ifa.ifa_index = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l01781"></a>01781   req.ifa.ifa_prefixlen = p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l01782"></a>01782 
<a name="l01783"></a>01783   <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, IFA_LOCAL, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, bytelen);
<a name="l01784"></a>01784 
<a name="l01785"></a>01785   <span class="keywordflow">if</span> (family == AF_INET &amp;&amp; cmd == RTM_NEWADDR)
<a name="l01786"></a>01786     {
<a name="l01787"></a>01787       <span class="keywordflow">if</span> (!<a class="code" href="if_8h.html#a2443297a4d8f44cc5d2ce38fcbf345f2">CONNECTED_PEER</a>(ifc) &amp;&amp; ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>)
<a name="l01788"></a>01788         {
<a name="l01789"></a>01789           p = ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>;
<a name="l01790"></a>01790           <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, IFA_BROADCAST, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>,
<a name="l01791"></a>01791                      bytelen);
<a name="l01792"></a>01792         }
<a name="l01793"></a>01793     }
<a name="l01794"></a>01794 
<a name="l01795"></a>01795   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>, <a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">ZEBRA_IFA_SECONDARY</a>))
<a name="l01796"></a>01796     <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (req.ifa.ifa_flags, IFA_F_SECONDARY);
<a name="l01797"></a>01797 
<a name="l01798"></a>01798   <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#abf60adc50689971ec30b6161150ffd2c">label</a>)
<a name="l01799"></a>01799     <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, IFA_LABEL, ifc-&gt;<a class="code" href="structconnected.html#abf60adc50689971ec30b6161150ffd2c">label</a>,
<a name="l01800"></a>01800                strlen (ifc-&gt;<a class="code" href="structconnected.html#abf60adc50689971ec30b6161150ffd2c">label</a>) + 1);
<a name="l01801"></a>01801 
<a name="l01802"></a>01802   <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#ae6893dc7903dc8ac58967ebd1ecb9929">netlink_talk</a> (&amp;req.n, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
<a name="l01803"></a>01803 }
<a name="l01804"></a>01804 
<a name="l01805"></a>01805 <span class="keywordtype">int</span>
<a name="l01806"></a><a class="code" href="rt__netlink_8c.html#a597c594e7152b27e36d6be6cc3b80fb9">01806</a> <a class="code" href="kernel__null_8c.html#adfe0f641680f62af235c49919cb3dcbb">kernel_address_add_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l01807"></a>01807 {
<a name="l01808"></a>01808   <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a201c79d2e3c1eb272146e2e49391e524">netlink_address</a> (RTM_NEWADDR, AF_INET, ifp, ifc);
<a name="l01809"></a>01809 }
<a name="l01810"></a>01810 
<a name="l01811"></a>01811 <span class="keywordtype">int</span>
<a name="l01812"></a><a class="code" href="rt__netlink_8c.html#a1a6e7419a16cae0c86088a6e0d13f242">01812</a> <a class="code" href="kernel__null_8c.html#a84be221f9731486399f2f2ac969bcfb5">kernel_address_delete_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l01813"></a>01813 {
<a name="l01814"></a>01814   <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a201c79d2e3c1eb272146e2e49391e524">netlink_address</a> (RTM_DELADDR, AF_INET, ifp, ifc);
<a name="l01815"></a>01815 }
<a name="l01816"></a>01816 
<a name="l01817"></a>01817 
<a name="l01818"></a>01818 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structthread__master.html">thread_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l01819"></a>01819 
<a name="l01820"></a>01820 <span class="comment">/* Kernel route reflection. */</span>
<a name="l01821"></a>01821 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01822"></a><a class="code" href="rt__netlink_8c.html#a1a57616537b4466f86de043316933986">01822</a> <a class="code" href="rt__netlink_8c.html#a1a57616537b4466f86de043316933986">kernel_read</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l01823"></a>01823 {
<a name="l01824"></a>01824   <span class="keywordtype">int</span> ret;
<a name="l01825"></a>01825   <span class="keywordtype">int</span> sock;
<a name="l01826"></a>01826 
<a name="l01827"></a>01827   sock = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);
<a name="l01828"></a>01828   ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a37aed8052016d2d44f7d058d871d4b59">netlink_information_fetch</a>, &amp;<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>);
<a name="l01829"></a>01829   <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, <a class="code" href="rt__netlink_8c.html#a1a57616537b4466f86de043316933986">kernel_read</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>);
<a name="l01830"></a>01830 
<a name="l01831"></a>01831   <span class="keywordflow">return</span> 0;
<a name="l01832"></a>01832 }
<a name="l01833"></a>01833 
<a name="l01834"></a>01834 <span class="comment">/* Filter out messages from self that occur on listener socket,</span>
<a name="l01835"></a>01835 <span class="comment">   caused by our actions on the command socket</span>
<a name="l01836"></a>01836 <span class="comment"> */</span>
<a name="l01837"></a><a class="code" href="rt__netlink_8c.html#a79db799b8a7dcbbbdda00ee9b2c58953">01837</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="rt__netlink_8c.html#a79db799b8a7dcbbbdda00ee9b2c58953">netlink_install_filter</a> (<span class="keywordtype">int</span> sock, __u32 <a class="code" href="zebra_2main_8c.html#ae0d46a978d5cd6707411f276ad869b9c">pid</a>)
<a name="l01838"></a>01838 {
<a name="l01839"></a>01839   <span class="keyword">struct </span>sock_filter filter[] = {
<a name="l01840"></a>01840     <span class="comment">/* 0: ldh [4]             */</span>
<a name="l01841"></a>01841     BPF_STMT(BPF_LD|BPF_ABS|BPF_H, offsetof(<span class="keyword">struct</span> nlmsghdr, nlmsg_type)),
<a name="l01842"></a>01842     <span class="comment">/* 1: jeq 0x18 jt 3 jf 6  */</span>
<a name="l01843"></a>01843     BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, htons(RTM_NEWROUTE), 1, 0),
<a name="l01844"></a>01844     <span class="comment">/* 2: jeq 0x19 jt 3 jf 6  */</span>
<a name="l01845"></a>01845     BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, htons(RTM_DELROUTE), 0, 3),
<a name="l01846"></a>01846     <span class="comment">/* 3: ldw [12]        */</span>
<a name="l01847"></a>01847     BPF_STMT(BPF_LD|BPF_ABS|BPF_W, offsetof(<span class="keyword">struct</span> nlmsghdr, nlmsg_pid)),
<a name="l01848"></a>01848     <span class="comment">/* 4: jeq XX  jt 5 jf 6   */</span>
<a name="l01849"></a>01849     BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, htonl(pid), 0, 1),
<a name="l01850"></a>01850     <span class="comment">/* 5: ret 0    (skip)     */</span>
<a name="l01851"></a>01851     BPF_STMT(BPF_RET|BPF_K, 0),
<a name="l01852"></a>01852     <span class="comment">/* 6: ret 0xffff (keep)   */</span>
<a name="l01853"></a>01853     BPF_STMT(BPF_RET|BPF_K, 0xffff),
<a name="l01854"></a>01854   };
<a name="l01855"></a>01855 
<a name="l01856"></a>01856   <span class="keyword">struct </span>sock_fprog prog = {
<a name="l01857"></a>01857     .len = <span class="keyword">sizeof</span>(filter) / <span class="keyword">sizeof</span>(filter[0]),
<a name="l01858"></a>01858     .filter = filter,
<a name="l01859"></a>01859   };
<a name="l01860"></a>01860 
<a name="l01861"></a>01861   <span class="keywordflow">if</span> (setsockopt(sock, SOL_SOCKET, SO_ATTACH_FILTER, &amp;prog, <span class="keyword">sizeof</span>(prog)) &lt; 0)
<a name="l01862"></a>01862     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t install socket filter: %s\n&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l01863"></a>01863 }
<a name="l01864"></a>01864 
<a name="l01865"></a>01865 <span class="comment">/* Exported interface function.  This function simply calls</span>
<a name="l01866"></a>01866 <span class="comment">   netlink_socket (). */</span>
<a name="l01867"></a>01867 <span class="keywordtype">void</span>
<a name="l01868"></a><a class="code" href="rt__netlink_8c.html#a0dbe43a64cbf994bf9189e7767f93342">01868</a> <a class="code" href="kernel__null_8c.html#a0dbe43a64cbf994bf9189e7767f93342">kernel_init</a> (<span class="keywordtype">void</span>)
<a name="l01869"></a>01869 {
<a name="l01870"></a>01870   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> groups;
<a name="l01871"></a>01871 
<a name="l01872"></a>01872   groups = RTMGRP_LINK | RTMGRP_IPV4_ROUTE | RTMGRP_IPV4_IFADDR;
<a name="l01873"></a>01873 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01874"></a>01874 <span class="preprocessor"></span>  groups |= RTMGRP_IPV6_ROUTE | RTMGRP_IPV6_IFADDR;
<a name="l01875"></a>01875 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l01876"></a>01876   <a class="code" href="rt__netlink_8c.html#a1c6085b143dcd6789d63c133afa5a0a4">netlink_socket</a> (&amp;<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>, groups);
<a name="l01877"></a>01877   <a class="code" href="rt__netlink_8c.html#a1c6085b143dcd6789d63c133afa5a0a4">netlink_socket</a> (&amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>, 0);
<a name="l01878"></a>01878 
<a name="l01879"></a>01879   <span class="comment">/* Register kernel socket. */</span>
<a name="l01880"></a>01880   <span class="keywordflow">if</span> (<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a> &gt; 0)
<a name="l01881"></a>01881     {
<a name="l01882"></a>01882       <span class="comment">/* Only want non-blocking on the netlink event socket */</span>
<a name="l01883"></a>01883       <span class="keywordflow">if</span> (fcntl (<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, F_SETFL, O_NONBLOCK) &lt; 0)
<a name="l01884"></a>01884     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t set %s socket flags: %s&quot;</span>, <a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
<a name="l01885"></a>01885         <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l01886"></a>01886 
<a name="l01887"></a>01887       <span class="comment">/* Set receive buffer size if it&#39;s set from command line */</span>
<a name="l01888"></a>01888       <span class="keywordflow">if</span> (<a class="code" href="rt__netlink_8c.html#aa4fe0a028fde5c45c4f236d47d591a80">nl_rcvbufsize</a>)
<a name="l01889"></a>01889     <a class="code" href="rt__netlink_8c.html#a9d729425d97c0c5f1d2b293ba7c9a5a9">netlink_recvbuf</a> (&amp;<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>, <a class="code" href="rt__netlink_8c.html#aa4fe0a028fde5c45c4f236d47d591a80">nl_rcvbufsize</a>);
<a name="l01890"></a>01890 
<a name="l01891"></a>01891       <a class="code" href="rt__netlink_8c.html#a79db799b8a7dcbbbdda00ee9b2c58953">netlink_install_filter</a> (<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, <a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>.<a class="code" href="structnlsock.html#a52642791667f9fa96c7af22c991d30bd">snl</a>.nl_pid);
<a name="l01892"></a>01892       <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, <a class="code" href="rt__netlink_8c.html#a1a57616537b4466f86de043316933986">kernel_read</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>);
<a name="l01893"></a>01893     }
<a name="l01894"></a>01894 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="rt__netlink_8c.html">rt_netlink.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
