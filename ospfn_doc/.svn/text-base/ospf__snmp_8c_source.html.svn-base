<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_snmp.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__snmp_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ospfd/ospf_snmp.c</div>  </div>
</div>
<div class="contents">
<a href="ospf__snmp_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* OSPFv2 SNMP support</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005 6WIND &lt;alain.ritoux@6wind.com&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2000 IP Infusion Inc.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Written by Kunihiro Ishiguro &lt;kunihiro@zebra.org&gt;</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00008"></a>00008 <span class="comment"> *</span>
<a name="l00009"></a>00009 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00010"></a>00010 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00011"></a>00011 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00012"></a>00012 <span class="comment"> * later version.</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00015"></a>00015 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00017"></a>00017 <span class="comment"> * General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment"> *</span>
<a name="l00019"></a>00019 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00020"></a>00020 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00021"></a>00021 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00022"></a>00022 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00023"></a>00023 <span class="comment"> */</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifdef HAVE_SNMP</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#ifdef HAVE_NETSNMP</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#include &lt;net-snmp/net-snmp-config.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;net-snmp/net-snmp-includes.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#else</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#include &lt;asn1.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;snmp.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;snmp_impl.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#endif</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="smux_8h.html">smux.h</a>&quot;</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="ospfd_8h.html">ospfd/ospfd.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="ospf__interface_8h.html">ospfd/ospf_interface.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="ospf__asbr_8h.html">ospfd/ospf_asbr.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsa_8h.html">ospfd/ospf_lsa.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="ospf__lsdb_8h.html">ospfd/ospf_lsdb.h</a>&quot;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="ospf__abr_8h.html">ospfd/ospf_abr.h</a>&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="ospf__neighbor_8h.html">ospfd/ospf_neighbor.h</a>&quot;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="ospf__nsm_8h.html">ospfd/ospf_nsm.h</a>&quot;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="ospf__flood_8h.html">ospfd/ospf_flood.h</a>&quot;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;<a class="code" href="ospf__ism_8h.html">ospfd/ospf_ism.h</a>&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;<a class="code" href="ospf__dump_8h.html">ospfd/ospf_dump.h</a>&quot;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="ospf__snmp_8h.html">ospfd/ospf_snmp.h</a>&quot;</span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="comment">/* OSPF2-MIB. */</span>
<a name="l00059"></a>00059 <span class="preprocessor">#define OSPF2MIB 1,3,6,1,2,1,14</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span>
<a name="l00061"></a>00061 <span class="comment">/* OSPF MIB General Group values. */</span>
<a name="l00062"></a>00062 <span class="preprocessor">#define OSPFROUTERID                     1</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="preprocessor">#define OSPFADMINSTAT                    2</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVERSIONNUMBER                3</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREABDRRTRSTATUS             4</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor">#define OSPFASBDRRTRSTATUS               5</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor">#define OSPFEXTERNLSACOUNT               6</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor">#define OSPFEXTERNLSACKSUMSUM            7</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">#define OSPFTOSSUPPORT                   8</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor">#define OSPFORIGINATENEWLSAS             9</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#define OSPFRXNEWLSAS                    10</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#define OSPFEXTLSDBLIMIT                 11</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="preprocessor">#define OSPFMULTICASTEXTENSIONS          12</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span><span class="preprocessor">#define OSPFEXITOVERFLOWINTERVAL         13</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span><span class="preprocessor">#define OSPFDEMANDEXTENSIONS             14</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span>
<a name="l00077"></a>00077 <span class="comment">/* OSPF MIB ospfAreaTable. */</span>
<a name="l00078"></a>00078 <span class="preprocessor">#define OSPFAREAID                       1</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAUTHTYPE                     2</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIMPORTASEXTERN               3</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span><span class="preprocessor">#define OSPFSPFRUNS                      4</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREABDRRTRCOUNT              5</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span><span class="preprocessor">#define OSPFASBDRRTRCOUNT                6</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREALSACOUNT                 7</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREALSACKSUMSUM              8</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREASUMMARY                  9</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREASTATUS                   10</span>
<a name="l00088"></a>00088 <span class="preprocessor"></span>
<a name="l00089"></a>00089 <span class="comment">/* OSPF MIB ospfStubAreaTable. */</span>
<a name="l00090"></a>00090 <span class="preprocessor">#define OSPFSTUBAREAID                   1</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span><span class="preprocessor">#define OSPFSTUBTOS                      2</span>
<a name="l00092"></a>00092 <span class="preprocessor"></span><span class="preprocessor">#define OSPFSTUBMETRIC                   3</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span><span class="preprocessor">#define OSPFSTUBSTATUS                   4</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span><span class="preprocessor">#define OSPFSTUBMETRICTYPE               5</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>
<a name="l00096"></a>00096 <span class="comment">/* OSPF MIB ospfLsdbTable. */</span>
<a name="l00097"></a>00097 <span class="preprocessor">#define OSPFLSDBAREAID                   1</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span><span class="preprocessor">#define OSPFLSDBTYPE                     2</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span><span class="preprocessor">#define OSPFLSDBLSID                     3</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span><span class="preprocessor">#define OSPFLSDBROUTERID                 4</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span><span class="preprocessor">#define OSPFLSDBSEQUENCE                 5</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span><span class="preprocessor">#define OSPFLSDBAGE                      6</span>
<a name="l00103"></a>00103 <span class="preprocessor"></span><span class="preprocessor">#define OSPFLSDBCHECKSUM                 7</span>
<a name="l00104"></a>00104 <span class="preprocessor"></span><span class="preprocessor">#define OSPFLSDBADVERTISEMENT            8</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span>
<a name="l00106"></a>00106 <span class="comment">/* OSPF MIB ospfAreaRangeTable. */</span>
<a name="l00107"></a>00107 <span class="preprocessor">#define OSPFAREARANGEAREAID              1</span>
<a name="l00108"></a>00108 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREARANGENET                 2</span>
<a name="l00109"></a>00109 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREARANGEMASK                3</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREARANGESTATUS              4</span>
<a name="l00111"></a>00111 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREARANGEEFFECT              5</span>
<a name="l00112"></a>00112 <span class="preprocessor"></span>
<a name="l00113"></a>00113 <span class="comment">/* OSPF MIB ospfHostTable. */</span>
<a name="l00114"></a>00114 <span class="preprocessor">#define OSPFHOSTIPADDRESS                1</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span><span class="preprocessor">#define OSPFHOSTTOS                      2</span>
<a name="l00116"></a>00116 <span class="preprocessor"></span><span class="preprocessor">#define OSPFHOSTMETRIC                   3</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span><span class="preprocessor">#define OSPFHOSTSTATUS                   4</span>
<a name="l00118"></a>00118 <span class="preprocessor"></span><span class="preprocessor">#define OSPFHOSTAREAID                   5</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span>
<a name="l00120"></a>00120 <span class="comment">/* OSPF MIB ospfIfTable. */</span>
<a name="l00121"></a>00121 <span class="preprocessor">#define OSPFIFIPADDRESS                  1</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span><span class="preprocessor">#define OSPFADDRESSLESSIF                2</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFAREAID                     3</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFTYPE                       4</span>
<a name="l00125"></a>00125 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFADMINSTAT                  5</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFRTRPRIORITY                6</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFTRANSITDELAY               7</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFRETRANSINTERVAL            8</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFHELLOINTERVAL              9</span>
<a name="l00130"></a>00130 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFRTRDEADINTERVAL            10</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFPOLLINTERVAL               11</span>
<a name="l00132"></a>00132 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFSTATE                      12</span>
<a name="l00133"></a>00133 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFDESIGNATEDROUTER           13</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFBACKUPDESIGNATEDROUTER     14</span>
<a name="l00135"></a>00135 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFEVENTS                     15</span>
<a name="l00136"></a>00136 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFAUTHKEY                    16</span>
<a name="l00137"></a>00137 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFSTATUS                     17</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFMULTICASTFORWARDING        18</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFDEMAND                     19</span>
<a name="l00140"></a>00140 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFAUTHTYPE                   20</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span>
<a name="l00142"></a>00142 <span class="comment">/* OSPF MIB ospfIfMetricTable. */</span>
<a name="l00143"></a>00143 <span class="preprocessor">#define OSPFIFMETRICIPADDRESS            1</span>
<a name="l00144"></a>00144 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFMETRICADDRESSLESSIF        2</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFMETRICTOS                  3</span>
<a name="l00146"></a>00146 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFMETRICVALUE                4</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span><span class="preprocessor">#define OSPFIFMETRICSTATUS               5</span>
<a name="l00148"></a>00148 <span class="preprocessor"></span>
<a name="l00149"></a>00149 <span class="comment">/* OSPF MIB ospfVirtIfTable. */</span>
<a name="l00150"></a>00150 <span class="preprocessor">#define OSPFVIRTIFAREAID                 1</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTIFNEIGHBOR               2</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTIFTRANSITDELAY           3</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTIFRETRANSINTERVAL        4</span>
<a name="l00154"></a>00154 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTIFHELLOINTERVAL          5</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTIFRTRDEADINTERVAL        6</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTIFSTATE                  7</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTIFEVENTS                 8</span>
<a name="l00158"></a>00158 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTIFAUTHKEY                9</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTIFSTATUS                 10</span>
<a name="l00160"></a>00160 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTIFAUTHTYPE               11</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span>
<a name="l00162"></a>00162 <span class="comment">/* OSPF MIB ospfNbrTable. */</span>
<a name="l00163"></a>00163 <span class="preprocessor">#define OSPFNBRIPADDR                    1</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span><span class="preprocessor">#define OSPFNBRADDRESSLESSINDEX          2</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span><span class="preprocessor">#define OSPFNBRRTRID                     3</span>
<a name="l00166"></a>00166 <span class="preprocessor"></span><span class="preprocessor">#define OSPFNBROPTIONS                   4</span>
<a name="l00167"></a>00167 <span class="preprocessor"></span><span class="preprocessor">#define OSPFNBRPRIORITY                  5</span>
<a name="l00168"></a>00168 <span class="preprocessor"></span><span class="preprocessor">#define OSPFNBRSTATE                     6</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span><span class="preprocessor">#define OSPFNBREVENTS                    7</span>
<a name="l00170"></a>00170 <span class="preprocessor"></span><span class="preprocessor">#define OSPFNBRLSRETRANSQLEN             8</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span><span class="preprocessor">#define OSPFNBMANBRSTATUS                9</span>
<a name="l00172"></a>00172 <span class="preprocessor"></span><span class="preprocessor">#define OSPFNBMANBRPERMANENCE            10</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span><span class="preprocessor">#define OSPFNBRHELLOSUPPRESSED           11</span>
<a name="l00174"></a>00174 <span class="preprocessor"></span>
<a name="l00175"></a>00175 <span class="comment">/* OSPF MIB ospfVirtNbrTable. */</span>
<a name="l00176"></a>00176 <span class="preprocessor">#define OSPFVIRTNBRAREA                  1</span>
<a name="l00177"></a>00177 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTNBRRTRID                 2</span>
<a name="l00178"></a>00178 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTNBRIPADDR                3</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTNBROPTIONS               4</span>
<a name="l00180"></a>00180 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTNBRSTATE                 5</span>
<a name="l00181"></a>00181 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTNBREVENTS                6</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTNBRLSRETRANSQLEN         7</span>
<a name="l00183"></a>00183 <span class="preprocessor"></span><span class="preprocessor">#define OSPFVIRTNBRHELLOSUPPRESSED       8</span>
<a name="l00184"></a>00184 <span class="preprocessor"></span>
<a name="l00185"></a>00185 <span class="comment">/* OSPF MIB ospfExtLsdbTable. */</span>
<a name="l00186"></a>00186 <span class="preprocessor">#define OSPFEXTLSDBTYPE                  1</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span><span class="preprocessor">#define OSPFEXTLSDBLSID                  2</span>
<a name="l00188"></a>00188 <span class="preprocessor"></span><span class="preprocessor">#define OSPFEXTLSDBROUTERID              3</span>
<a name="l00189"></a>00189 <span class="preprocessor"></span><span class="preprocessor">#define OSPFEXTLSDBSEQUENCE              4</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span><span class="preprocessor">#define OSPFEXTLSDBAGE                   5</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span><span class="preprocessor">#define OSPFEXTLSDBCHECKSUM              6</span>
<a name="l00192"></a>00192 <span class="preprocessor"></span><span class="preprocessor">#define OSPFEXTLSDBADVERTISEMENT         7</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>
<a name="l00194"></a>00194 <span class="comment">/* OSPF MIB ospfAreaAggregateTable. */</span>
<a name="l00195"></a>00195 <span class="preprocessor">#define OSPFAREAAGGREGATEAREAID          1</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREAAGGREGATELSDBTYPE        2</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREAAGGREGATENET             3</span>
<a name="l00198"></a>00198 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREAAGGREGATEMASK            4</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREAAGGREGATESTATUS          5</span>
<a name="l00200"></a>00200 <span class="preprocessor"></span><span class="preprocessor">#define OSPFAREAAGGREGATEEFFECT          6</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>
<a name="l00202"></a>00202 <span class="comment">/* SYNTAX Status from OSPF-MIB. */</span>
<a name="l00203"></a>00203 <span class="preprocessor">#define OSPF_STATUS_ENABLED  1</span>
<a name="l00204"></a>00204 <span class="preprocessor"></span><span class="preprocessor">#define OSPF_STATUS_DISABLED 2</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span>
<a name="l00206"></a>00206 <span class="comment">/* SNMP value hack. */</span>
<a name="l00207"></a>00207 <span class="preprocessor">#define COUNTER     ASN_COUNTER</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span><span class="preprocessor">#define INTEGER     ASN_INTEGER</span>
<a name="l00209"></a>00209 <span class="preprocessor"></span><span class="preprocessor">#define GAUGE       ASN_GAUGE</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span><span class="preprocessor">#define TIMETICKS   ASN_TIMETICKS</span>
<a name="l00211"></a>00211 <span class="preprocessor"></span><span class="preprocessor">#define IPADDRESS   ASN_IPADDRESS</span>
<a name="l00212"></a>00212 <span class="preprocessor"></span><span class="preprocessor">#define STRING      ASN_OCTET_STR</span>
<a name="l00213"></a>00213 <span class="preprocessor"></span>
<a name="l00214"></a>00214 <span class="comment">/* Declare static local variables for convenience. */</span>
<a name="l00215"></a>00215 <a class="code" href="smux_8h.html#af4d69d4f09e2b7bedf8a6c9f8b704471">SNMP_LOCAL_VARIABLES</a>
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 <span class="comment">/* OSPF-MIB instances. */</span>
<a name="l00218"></a>00218 oid ospf_oid [] = { OSPF2MIB };
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 <span class="comment">/* IP address 0.0.0.0. */</span>
<a name="l00221"></a>00221 <span class="keyword">static</span> <span class="keyword">struct </span>in_addr ospf_empty_addr = {0};
<a name="l00222"></a>00222 
<a name="l00223"></a>00223 <span class="comment">/* Hook functions. */</span>
<a name="l00224"></a>00224 <span class="keyword">static</span> u_char *ospfGeneralGroup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *,
<a name="l00225"></a>00225                  <span class="keywordtype">int</span>, <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00226"></a>00226 <span class="keyword">static</span> u_char *ospfAreaEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *, <span class="keywordtype">int</span>,
<a name="l00227"></a>00227                   <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00228"></a>00228 <span class="keyword">static</span> u_char *ospfStubAreaEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *,
<a name="l00229"></a>00229                   <span class="keywordtype">int</span>, <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00230"></a>00230 <span class="keyword">static</span> u_char *ospfLsdbEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *, <span class="keywordtype">int</span>,
<a name="l00231"></a>00231                   <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00232"></a>00232 <span class="keyword">static</span> u_char *ospfAreaRangeEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *, <span class="keywordtype">int</span>,
<a name="l00233"></a>00233                    <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00234"></a>00234 <span class="keyword">static</span> u_char *ospfHostEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *, <span class="keywordtype">int</span>,
<a name="l00235"></a>00235                   <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00236"></a>00236 <span class="keyword">static</span> u_char *ospfIfEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *, <span class="keywordtype">int</span>,
<a name="l00237"></a>00237                 <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00238"></a>00238 <span class="keyword">static</span> u_char *ospfIfMetricEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *, <span class="keywordtype">int</span>,
<a name="l00239"></a>00239                   <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00240"></a>00240 <span class="keyword">static</span> u_char *ospfVirtIfEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *, <span class="keywordtype">int</span>,
<a name="l00241"></a>00241                 <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00242"></a>00242 <span class="keyword">static</span> u_char *ospfNbrEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *, <span class="keywordtype">int</span>,
<a name="l00243"></a>00243                  <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00244"></a>00244 <span class="keyword">static</span> u_char *ospfVirtNbrEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *, <span class="keywordtype">int</span>,
<a name="l00245"></a>00245                  <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00246"></a>00246 <span class="keyword">static</span> u_char *ospfExtLsdbEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *, <span class="keywordtype">int</span>,
<a name="l00247"></a>00247                  <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00248"></a>00248 <span class="keyword">static</span> u_char *ospfAreaAggregateEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *, oid *, <span class="keywordtype">size_t</span> *,
<a name="l00249"></a>00249                        <span class="keywordtype">int</span>, <span class="keywordtype">size_t</span> *, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **);
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 <span class="keyword">struct </span><a class="code" href="structvariable.html">variable</a> ospf_variables[] = 
<a name="l00252"></a>00252 {
<a name="l00253"></a>00253   <span class="comment">/* OSPF general variables */</span>
<a name="l00254"></a>00254   {OSPFROUTERID,              IPADDRESS, RWRITE, ospfGeneralGroup,
<a name="l00255"></a>00255    2, {1, 1}},
<a name="l00256"></a>00256   {OSPFADMINSTAT,             INTEGER, RWRITE, ospfGeneralGroup,
<a name="l00257"></a>00257    2, {1, 2}},
<a name="l00258"></a>00258   {OSPFVERSIONNUMBER,         INTEGER, RONLY, ospfGeneralGroup,
<a name="l00259"></a>00259    2, {1, 3}},
<a name="l00260"></a>00260   {OSPFAREABDRRTRSTATUS,      INTEGER, RONLY, ospfGeneralGroup,
<a name="l00261"></a>00261    2, {1, 4}},
<a name="l00262"></a>00262   {OSPFASBDRRTRSTATUS,        INTEGER, RWRITE, ospfGeneralGroup,
<a name="l00263"></a>00263    2, {1, 5}},
<a name="l00264"></a>00264   {OSPFEXTERNLSACOUNT,        GAUGE, RONLY, ospfGeneralGroup,
<a name="l00265"></a>00265    2, {1, 6}},
<a name="l00266"></a>00266   {OSPFEXTERNLSACKSUMSUM,     INTEGER, RONLY, ospfGeneralGroup,
<a name="l00267"></a>00267    2, {1, 7}},
<a name="l00268"></a>00268   {OSPFTOSSUPPORT,            INTEGER, RWRITE, ospfGeneralGroup,
<a name="l00269"></a>00269    2, {1, 8}},
<a name="l00270"></a>00270   {OSPFORIGINATENEWLSAS,      COUNTER, RONLY, ospfGeneralGroup,
<a name="l00271"></a>00271    2, {1, 9}},
<a name="l00272"></a>00272   {OSPFRXNEWLSAS,             COUNTER, RONLY, ospfGeneralGroup,
<a name="l00273"></a>00273    2, {1, 10}},
<a name="l00274"></a>00274   {OSPFEXTLSDBLIMIT,          INTEGER, RWRITE, ospfGeneralGroup,
<a name="l00275"></a>00275    2, {1, 11}},
<a name="l00276"></a>00276   {OSPFMULTICASTEXTENSIONS,   INTEGER, RWRITE, ospfGeneralGroup,
<a name="l00277"></a>00277    2, {1, 12}},
<a name="l00278"></a>00278   {OSPFEXITOVERFLOWINTERVAL,  INTEGER, RWRITE, ospfGeneralGroup,
<a name="l00279"></a>00279    2, {1, 13}},
<a name="l00280"></a>00280   {OSPFDEMANDEXTENSIONS,      INTEGER, RWRITE, ospfGeneralGroup,
<a name="l00281"></a>00281    2, {1, 14}},
<a name="l00282"></a>00282 
<a name="l00283"></a>00283   <span class="comment">/* OSPF area data structure. */</span>
<a name="l00284"></a>00284   {OSPFAREAID,                IPADDRESS, RONLY, ospfAreaEntry,
<a name="l00285"></a>00285    3, {2, 1, 1}},
<a name="l00286"></a>00286   {OSPFAUTHTYPE,              INTEGER, RWRITE, ospfAreaEntry,
<a name="l00287"></a>00287    3, {2, 1, 2}},
<a name="l00288"></a>00288   {OSPFIMPORTASEXTERN,        INTEGER, RWRITE, ospfAreaEntry,
<a name="l00289"></a>00289    3, {2, 1, 3}},
<a name="l00290"></a>00290   {OSPFSPFRUNS,               COUNTER, RONLY, ospfAreaEntry,
<a name="l00291"></a>00291    3, {2, 1, 4}},
<a name="l00292"></a>00292   {OSPFAREABDRRTRCOUNT,       GAUGE, RONLY, ospfAreaEntry,
<a name="l00293"></a>00293    3, {2, 1, 5}},
<a name="l00294"></a>00294   {OSPFASBDRRTRCOUNT,         GAUGE, RONLY, ospfAreaEntry,
<a name="l00295"></a>00295    3, {2, 1, 6}},
<a name="l00296"></a>00296   {OSPFAREALSACOUNT,          GAUGE, RONLY, ospfAreaEntry,
<a name="l00297"></a>00297    3, {2, 1, 7}},
<a name="l00298"></a>00298   {OSPFAREALSACKSUMSUM,       INTEGER, RONLY, ospfAreaEntry,
<a name="l00299"></a>00299    3, {2, 1, 8}},
<a name="l00300"></a>00300   {OSPFAREASUMMARY,           INTEGER, RWRITE, ospfAreaEntry,
<a name="l00301"></a>00301    3, {2, 1, 9}},
<a name="l00302"></a>00302   {OSPFAREASTATUS,            INTEGER, RWRITE, ospfAreaEntry,
<a name="l00303"></a>00303    3, {2, 1, 10}},
<a name="l00304"></a>00304 
<a name="l00305"></a>00305   <span class="comment">/* OSPF stub area information. */</span>
<a name="l00306"></a>00306   {OSPFSTUBAREAID,            IPADDRESS, RONLY, ospfStubAreaEntry,
<a name="l00307"></a>00307    3, {3, 1, 1}},
<a name="l00308"></a>00308   {OSPFSTUBTOS,               INTEGER, RONLY, ospfStubAreaEntry,
<a name="l00309"></a>00309    3, {3, 1, 2}},
<a name="l00310"></a>00310   {OSPFSTUBMETRIC,            INTEGER, RWRITE, ospfStubAreaEntry,
<a name="l00311"></a>00311    3, {3, 1, 3}},
<a name="l00312"></a>00312   {OSPFSTUBSTATUS,            INTEGER, RWRITE, ospfStubAreaEntry,
<a name="l00313"></a>00313    3, {3, 1, 4}},
<a name="l00314"></a>00314   {OSPFSTUBMETRICTYPE,        INTEGER, RWRITE, ospfStubAreaEntry,
<a name="l00315"></a>00315    3, {3, 1, 5}},
<a name="l00316"></a>00316 
<a name="l00317"></a>00317   <span class="comment">/* OSPF link state database. */</span>
<a name="l00318"></a>00318   {OSPFLSDBAREAID,            IPADDRESS, RONLY, ospfLsdbEntry,
<a name="l00319"></a>00319    3, {4, 1, 1}},
<a name="l00320"></a>00320   {OSPFLSDBTYPE,              INTEGER, RONLY, ospfLsdbEntry,
<a name="l00321"></a>00321    3, {4, 1, 2}},
<a name="l00322"></a>00322   {OSPFLSDBLSID,              IPADDRESS, RONLY, ospfLsdbEntry,
<a name="l00323"></a>00323    3, {4, 1, 3}},
<a name="l00324"></a>00324   {OSPFLSDBROUTERID,          IPADDRESS, RONLY, ospfLsdbEntry,
<a name="l00325"></a>00325    3, {4, 1, 4}},
<a name="l00326"></a>00326   {OSPFLSDBSEQUENCE,          INTEGER, RONLY, ospfLsdbEntry,
<a name="l00327"></a>00327    3, {4, 1, 5}},
<a name="l00328"></a>00328   {OSPFLSDBAGE,               INTEGER, RONLY, ospfLsdbEntry,
<a name="l00329"></a>00329    3, {4, 1, 6}},
<a name="l00330"></a>00330   {OSPFLSDBCHECKSUM,          INTEGER, RONLY, ospfLsdbEntry,
<a name="l00331"></a>00331    3, {4, 1, 7}},
<a name="l00332"></a>00332   {OSPFLSDBADVERTISEMENT,     STRING, RONLY, ospfLsdbEntry,
<a name="l00333"></a>00333    3, {4, 1, 8}},
<a name="l00334"></a>00334 
<a name="l00335"></a>00335   <span class="comment">/* Area range table. */</span>
<a name="l00336"></a>00336   {OSPFAREARANGEAREAID,       IPADDRESS, RONLY, ospfAreaRangeEntry,
<a name="l00337"></a>00337    3, {5, 1, 1}},
<a name="l00338"></a>00338   {OSPFAREARANGENET,          IPADDRESS, RONLY, ospfAreaRangeEntry,
<a name="l00339"></a>00339    3, {5, 1, 2}},
<a name="l00340"></a>00340   {OSPFAREARANGEMASK,         IPADDRESS, RWRITE, ospfAreaRangeEntry,
<a name="l00341"></a>00341    3, {5, 1, 3}},
<a name="l00342"></a>00342   {OSPFAREARANGESTATUS,       INTEGER, RWRITE, ospfAreaRangeEntry,
<a name="l00343"></a>00343    3, {5, 1, 4}},
<a name="l00344"></a>00344   {OSPFAREARANGEEFFECT,       INTEGER, RWRITE, ospfAreaRangeEntry,
<a name="l00345"></a>00345    3, {5, 1, 5}},
<a name="l00346"></a>00346 
<a name="l00347"></a>00347   <span class="comment">/* OSPF host table. */</span>
<a name="l00348"></a>00348   {OSPFHOSTIPADDRESS,         IPADDRESS, RONLY, ospfHostEntry,
<a name="l00349"></a>00349    3, {6, 1, 1}},
<a name="l00350"></a>00350   {OSPFHOSTTOS,               INTEGER, RONLY, ospfHostEntry,
<a name="l00351"></a>00351    3, {6, 1, 2}},
<a name="l00352"></a>00352   {OSPFHOSTMETRIC,            INTEGER, RWRITE, ospfHostEntry,
<a name="l00353"></a>00353    3, {6, 1, 3}},
<a name="l00354"></a>00354   {OSPFHOSTSTATUS,            INTEGER, RWRITE, ospfHostEntry,
<a name="l00355"></a>00355    3, {6, 1, 4}},
<a name="l00356"></a>00356   {OSPFHOSTAREAID,            IPADDRESS, RONLY, ospfHostEntry,
<a name="l00357"></a>00357    3, {6, 1, 5}},
<a name="l00358"></a>00358 
<a name="l00359"></a>00359   <span class="comment">/* OSPF interface table. */</span>
<a name="l00360"></a>00360   {OSPFIFIPADDRESS,           IPADDRESS, RONLY, ospfIfEntry,
<a name="l00361"></a>00361    3, {7, 1, 1}},
<a name="l00362"></a>00362   {OSPFADDRESSLESSIF,         INTEGER, RONLY, ospfIfEntry,
<a name="l00363"></a>00363    3, {7, 1, 2}},
<a name="l00364"></a>00364   {OSPFIFAREAID,              IPADDRESS, RWRITE, ospfIfEntry,
<a name="l00365"></a>00365    3, {7, 1, 3}},
<a name="l00366"></a>00366   {OSPFIFTYPE,                INTEGER, RWRITE, ospfIfEntry,
<a name="l00367"></a>00367    3, {7, 1, 4}},
<a name="l00368"></a>00368   {OSPFIFADMINSTAT,           INTEGER, RWRITE, ospfIfEntry,
<a name="l00369"></a>00369    3, {7, 1, 5}},
<a name="l00370"></a>00370   {OSPFIFRTRPRIORITY,         INTEGER, RWRITE, ospfIfEntry,
<a name="l00371"></a>00371    3, {7, 1, 6}},
<a name="l00372"></a>00372   {OSPFIFTRANSITDELAY,        INTEGER, RWRITE, ospfIfEntry,
<a name="l00373"></a>00373    3, {7, 1, 7}},
<a name="l00374"></a>00374   {OSPFIFRETRANSINTERVAL,     INTEGER, RWRITE, ospfIfEntry,
<a name="l00375"></a>00375    3, {7, 1, 8}},
<a name="l00376"></a>00376   {OSPFIFHELLOINTERVAL,       INTEGER, RWRITE, ospfIfEntry,
<a name="l00377"></a>00377    3, {7, 1, 9}},
<a name="l00378"></a>00378   {OSPFIFRTRDEADINTERVAL,     INTEGER, RWRITE, ospfIfEntry,
<a name="l00379"></a>00379    3, {7, 1, 10}},
<a name="l00380"></a>00380   {OSPFIFPOLLINTERVAL,        INTEGER, RWRITE, ospfIfEntry,
<a name="l00381"></a>00381    3, {7, 1, 11}},
<a name="l00382"></a>00382   {OSPFIFSTATE,               INTEGER, RONLY, ospfIfEntry,
<a name="l00383"></a>00383    3, {7, 1, 12}},
<a name="l00384"></a>00384   {OSPFIFDESIGNATEDROUTER,    IPADDRESS, RONLY, ospfIfEntry,
<a name="l00385"></a>00385    3, {7, 1, 13}},
<a name="l00386"></a>00386   {OSPFIFBACKUPDESIGNATEDROUTER, IPADDRESS, RONLY, ospfIfEntry,
<a name="l00387"></a>00387    3, {7, 1, 14}},
<a name="l00388"></a>00388   {OSPFIFEVENTS,              COUNTER, RONLY, ospfIfEntry,
<a name="l00389"></a>00389    3, {7, 1, 15}},
<a name="l00390"></a>00390   {OSPFIFAUTHKEY,             STRING,  RWRITE, ospfIfEntry,
<a name="l00391"></a>00391    3, {7, 1, 16}},
<a name="l00392"></a>00392   {OSPFIFSTATUS,              INTEGER, RWRITE, ospfIfEntry,
<a name="l00393"></a>00393    3, {7, 1, 17}},
<a name="l00394"></a>00394   {OSPFIFMULTICASTFORWARDING, INTEGER, RWRITE, ospfIfEntry,
<a name="l00395"></a>00395    3, {7, 1, 18}},
<a name="l00396"></a>00396   {OSPFIFDEMAND,              INTEGER, RWRITE, ospfIfEntry,
<a name="l00397"></a>00397    3, {7, 1, 19}},
<a name="l00398"></a>00398   {OSPFIFAUTHTYPE,            INTEGER, RWRITE, ospfIfEntry,
<a name="l00399"></a>00399    3, {7, 1, 20}},
<a name="l00400"></a>00400 
<a name="l00401"></a>00401   <span class="comment">/* OSPF interface metric table. */</span>
<a name="l00402"></a>00402   {OSPFIFMETRICIPADDRESS,     IPADDRESS, RONLY, ospfIfMetricEntry,
<a name="l00403"></a>00403    3, {8, 1, 1}},
<a name="l00404"></a>00404   {OSPFIFMETRICADDRESSLESSIF, INTEGER, RONLY, ospfIfMetricEntry,
<a name="l00405"></a>00405    3, {8, 1, 2}},
<a name="l00406"></a>00406   {OSPFIFMETRICTOS,           INTEGER, RONLY, ospfIfMetricEntry,
<a name="l00407"></a>00407    3, {8, 1, 3}},
<a name="l00408"></a>00408   {OSPFIFMETRICVALUE,         INTEGER, RWRITE, ospfIfMetricEntry,
<a name="l00409"></a>00409    3, {8, 1, 4}},
<a name="l00410"></a>00410   {OSPFIFMETRICSTATUS,        INTEGER, RWRITE, ospfIfMetricEntry,
<a name="l00411"></a>00411    3, {8, 1, 5}},
<a name="l00412"></a>00412 
<a name="l00413"></a>00413   <span class="comment">/* OSPF virtual interface table. */</span>
<a name="l00414"></a>00414   {OSPFVIRTIFAREAID,          IPADDRESS, RONLY, ospfVirtIfEntry,
<a name="l00415"></a>00415    3, {9, 1, 1}},
<a name="l00416"></a>00416   {OSPFVIRTIFNEIGHBOR,        IPADDRESS, RONLY, ospfVirtIfEntry,
<a name="l00417"></a>00417    3, {9, 1, 2}},
<a name="l00418"></a>00418   {OSPFVIRTIFTRANSITDELAY,    INTEGER, RWRITE, ospfVirtIfEntry,
<a name="l00419"></a>00419    3, {9, 1, 3}},
<a name="l00420"></a>00420   {OSPFVIRTIFRETRANSINTERVAL, INTEGER, RWRITE, ospfVirtIfEntry,
<a name="l00421"></a>00421    3, {9, 1, 4}},
<a name="l00422"></a>00422   {OSPFVIRTIFHELLOINTERVAL,   INTEGER, RWRITE, ospfVirtIfEntry,
<a name="l00423"></a>00423    3, {9, 1, 5}},
<a name="l00424"></a>00424   {OSPFVIRTIFRTRDEADINTERVAL, INTEGER, RWRITE, ospfVirtIfEntry,
<a name="l00425"></a>00425    3, {9, 1, 6}},
<a name="l00426"></a>00426   {OSPFVIRTIFSTATE,           INTEGER, RONLY, ospfVirtIfEntry,
<a name="l00427"></a>00427    3, {9, 1, 7}},
<a name="l00428"></a>00428   {OSPFVIRTIFEVENTS,          COUNTER, RONLY, ospfVirtIfEntry,
<a name="l00429"></a>00429    3, {9, 1, 8}},
<a name="l00430"></a>00430   {OSPFVIRTIFAUTHKEY,         STRING,  RWRITE, ospfVirtIfEntry,
<a name="l00431"></a>00431    3, {9, 1, 9}},
<a name="l00432"></a>00432   {OSPFVIRTIFSTATUS,          INTEGER, RWRITE, ospfVirtIfEntry,
<a name="l00433"></a>00433    3, {9, 1, 10}},
<a name="l00434"></a>00434   {OSPFVIRTIFAUTHTYPE,        INTEGER, RWRITE, ospfVirtIfEntry,
<a name="l00435"></a>00435    3, {9, 1, 11}},
<a name="l00436"></a>00436 
<a name="l00437"></a>00437   <span class="comment">/* OSPF neighbor table. */</span>
<a name="l00438"></a>00438   {OSPFNBRIPADDR,             IPADDRESS, RONLY, ospfNbrEntry,
<a name="l00439"></a>00439    3, {10, 1, 1}},
<a name="l00440"></a>00440   {OSPFNBRADDRESSLESSINDEX,   INTEGER, RONLY, ospfNbrEntry,
<a name="l00441"></a>00441    3, {10, 1, 2}},
<a name="l00442"></a>00442   {OSPFNBRRTRID,              IPADDRESS, RONLY, ospfNbrEntry,
<a name="l00443"></a>00443    3, {10, 1, 3}},
<a name="l00444"></a>00444   {OSPFNBROPTIONS,            INTEGER, RONLY, ospfNbrEntry,
<a name="l00445"></a>00445    3, {10, 1, 4}},
<a name="l00446"></a>00446   {OSPFNBRPRIORITY,           INTEGER, RWRITE, ospfNbrEntry,
<a name="l00447"></a>00447    3, {10, 1, 5}},
<a name="l00448"></a>00448   {OSPFNBRSTATE,              INTEGER, RONLY, ospfNbrEntry,
<a name="l00449"></a>00449    3, {10, 1, 6}},
<a name="l00450"></a>00450   {OSPFNBREVENTS,             COUNTER, RONLY, ospfNbrEntry,
<a name="l00451"></a>00451    3, {10, 1, 7}},
<a name="l00452"></a>00452   {OSPFNBRLSRETRANSQLEN,      GAUGE, RONLY, ospfNbrEntry,
<a name="l00453"></a>00453    3, {10, 1, 8}},
<a name="l00454"></a>00454   {OSPFNBMANBRSTATUS,         INTEGER, RWRITE, ospfNbrEntry,
<a name="l00455"></a>00455    3, {10, 1, 9}},
<a name="l00456"></a>00456   {OSPFNBMANBRPERMANENCE,     INTEGER, RONLY, ospfNbrEntry,
<a name="l00457"></a>00457    3, {10, 1, 10}},
<a name="l00458"></a>00458   {OSPFNBRHELLOSUPPRESSED,    INTEGER, RONLY, ospfNbrEntry,
<a name="l00459"></a>00459    3, {10, 1, 11}},
<a name="l00460"></a>00460 
<a name="l00461"></a>00461   <span class="comment">/* OSPF virtual neighbor table. */</span>
<a name="l00462"></a>00462   {OSPFVIRTNBRAREA,           IPADDRESS, RONLY, ospfVirtNbrEntry,
<a name="l00463"></a>00463    3, {11, 1, 1}},
<a name="l00464"></a>00464   {OSPFVIRTNBRRTRID,          IPADDRESS, RONLY, ospfVirtNbrEntry,
<a name="l00465"></a>00465    3, {11, 1, 2}},
<a name="l00466"></a>00466   {OSPFVIRTNBRIPADDR,         IPADDRESS, RONLY, ospfVirtNbrEntry,
<a name="l00467"></a>00467    3, {11, 1, 3}},
<a name="l00468"></a>00468   {OSPFVIRTNBROPTIONS,        INTEGER, RONLY, ospfVirtNbrEntry,
<a name="l00469"></a>00469    3, {11, 1, 4}},
<a name="l00470"></a>00470   {OSPFVIRTNBRSTATE,          INTEGER, RONLY, ospfVirtNbrEntry,
<a name="l00471"></a>00471    3, {11, 1, 5}},
<a name="l00472"></a>00472   {OSPFVIRTNBREVENTS,         COUNTER, RONLY, ospfVirtNbrEntry,
<a name="l00473"></a>00473    3, {11, 1, 6}},
<a name="l00474"></a>00474   {OSPFVIRTNBRLSRETRANSQLEN,  INTEGER, RONLY, ospfVirtNbrEntry,
<a name="l00475"></a>00475    3, {11, 1, 7}},
<a name="l00476"></a>00476   {OSPFVIRTNBRHELLOSUPPRESSED, INTEGER, RONLY, ospfVirtNbrEntry,
<a name="l00477"></a>00477    3, {11, 1, 8}},
<a name="l00478"></a>00478 
<a name="l00479"></a>00479   <span class="comment">/* OSPF link state database, external. */</span>
<a name="l00480"></a>00480   {OSPFEXTLSDBTYPE,           INTEGER, RONLY, ospfExtLsdbEntry,
<a name="l00481"></a>00481    3, {12, 1, 1}},
<a name="l00482"></a>00482   {OSPFEXTLSDBLSID,           IPADDRESS, RONLY, ospfExtLsdbEntry,
<a name="l00483"></a>00483    3, {12, 1, 2}},
<a name="l00484"></a>00484   {OSPFEXTLSDBROUTERID,       IPADDRESS, RONLY, ospfExtLsdbEntry,
<a name="l00485"></a>00485    3, {12, 1, 3}},
<a name="l00486"></a>00486   {OSPFEXTLSDBSEQUENCE,       INTEGER, RONLY, ospfExtLsdbEntry,
<a name="l00487"></a>00487    3, {12, 1, 4}},
<a name="l00488"></a>00488   {OSPFEXTLSDBAGE,            INTEGER, RONLY, ospfExtLsdbEntry,
<a name="l00489"></a>00489    3, {12, 1, 5}},
<a name="l00490"></a>00490   {OSPFEXTLSDBCHECKSUM,       INTEGER, RONLY, ospfExtLsdbEntry,
<a name="l00491"></a>00491    3, {12, 1, 6}},
<a name="l00492"></a>00492   {OSPFEXTLSDBADVERTISEMENT,  STRING,  RONLY, ospfExtLsdbEntry,
<a name="l00493"></a>00493    3, {12, 1, 7}},
<a name="l00494"></a>00494 
<a name="l00495"></a>00495   <span class="comment">/* OSPF area aggregate table. */</span>
<a name="l00496"></a>00496   {OSPFAREAAGGREGATEAREAID,   IPADDRESS, RONLY, ospfAreaAggregateEntry, 
<a name="l00497"></a>00497    3, {14, 1, 1}},
<a name="l00498"></a>00498   {OSPFAREAAGGREGATELSDBTYPE, INTEGER, RONLY, ospfAreaAggregateEntry, 
<a name="l00499"></a>00499    3, {14, 1, 2}},
<a name="l00500"></a>00500   {OSPFAREAAGGREGATENET,      IPADDRESS, RONLY, ospfAreaAggregateEntry, 
<a name="l00501"></a>00501    3, {14, 1, 3}},
<a name="l00502"></a>00502   {OSPFAREAAGGREGATEMASK,     IPADDRESS, RONLY, ospfAreaAggregateEntry, 
<a name="l00503"></a>00503    3, {14, 1, 4}},
<a name="l00504"></a>00504   {OSPFAREAAGGREGATESTATUS,   INTEGER, RWRITE, ospfAreaAggregateEntry,
<a name="l00505"></a>00505    3, {14, 1, 5}},
<a name="l00506"></a>00506   {OSPFAREAAGGREGATEEFFECT,   INTEGER, RWRITE, ospfAreaAggregateEntry,
<a name="l00507"></a>00507    3, {14, 1, 6}}
<a name="l00508"></a>00508 };
<a name="l00509"></a>00509 
<a name="l00510"></a>00510 <span class="comment">/* The administrative status of OSPF.  When OSPF is enbled on at least</span>
<a name="l00511"></a>00511 <span class="comment">   one interface return 1. */</span>
<a name="l00512"></a>00512 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00513"></a>00513 ospf_admin_stat (<span class="keyword">struct</span> <a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>)
<a name="l00514"></a>00514 {
<a name="l00515"></a>00515   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00516"></a>00516   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l00517"></a>00517 
<a name="l00518"></a>00518   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00519"></a>00519     <span class="keywordflow">return</span> 0;
<a name="l00520"></a>00520 
<a name="l00521"></a>00521   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
<a name="l00522"></a>00522     <span class="keywordflow">if</span> (oi &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>)
<a name="l00523"></a>00523       <span class="keywordflow">return</span> 1;
<a name="l00524"></a>00524 
<a name="l00525"></a>00525   <span class="keywordflow">return</span> 0;
<a name="l00526"></a>00526 }
<a name="l00527"></a>00527 
<a name="l00528"></a>00528 <span class="keyword">static</span> u_char *
<a name="l00529"></a>00529 ospfGeneralGroup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, <span class="keywordtype">size_t</span> *<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>,
<a name="l00530"></a>00530           <span class="keywordtype">int</span> exact, <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l00531"></a>00531 {
<a name="l00532"></a>00532   <span class="keyword">struct </span>ospf *ospf;
<a name="l00533"></a>00533 
<a name="l00534"></a>00534   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l00535"></a>00535 
<a name="l00536"></a>00536   <span class="comment">/* Check whether the instance identifier is valid */</span>
<a name="l00537"></a>00537   <span class="keywordflow">if</span> (<a class="code" href="smux_8h.html#a15cc4f7bbc1b70b7fc5179e939073238">smux_header_generic</a> (v, name, length, exact, var_len, write_method)
<a name="l00538"></a>00538       == <a class="code" href="smux_8h.html#ac8ad57fb87ae8e10684a7b910e92bba6">MATCH_FAILED</a>)
<a name="l00539"></a>00539     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00540"></a>00540 
<a name="l00541"></a>00541   <span class="comment">/* Return the current value of the variable */</span>
<a name="l00542"></a>00542   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l00543"></a>00543     {
<a name="l00544"></a>00544     <span class="keywordflow">case</span> OSPFROUTERID:      <span class="comment">/* 1 */</span>
<a name="l00545"></a>00545       <span class="comment">/* Router-ID of this OSPF instance. */</span>
<a name="l00546"></a>00546       <span class="keywordflow">if</span> (ospf)
<a name="l00547"></a>00547     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>);
<a name="l00548"></a>00548       <span class="keywordflow">else</span>
<a name="l00549"></a>00549     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (ospf_empty_addr);
<a name="l00550"></a>00550       <span class="keywordflow">break</span>;
<a name="l00551"></a>00551     <span class="keywordflow">case</span> OSPFADMINSTAT:     <span class="comment">/* 2 */</span>
<a name="l00552"></a>00552       <span class="comment">/* The administrative status of OSPF in the router. */</span>
<a name="l00553"></a>00553       <span class="keywordflow">if</span> (ospf_admin_stat (ospf))
<a name="l00554"></a>00554     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (OSPF_STATUS_ENABLED);
<a name="l00555"></a>00555       <span class="keywordflow">else</span>
<a name="l00556"></a>00556     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (OSPF_STATUS_DISABLED);
<a name="l00557"></a>00557       <span class="keywordflow">break</span>;
<a name="l00558"></a>00558     <span class="keywordflow">case</span> OSPFVERSIONNUMBER: <span class="comment">/* 3 */</span>
<a name="l00559"></a>00559       <span class="comment">/* OSPF version 2. */</span>
<a name="l00560"></a>00560       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospfd_8h.html#ade0a29a3c62c5cb42b132c812208ea54">OSPF_VERSION</a>);
<a name="l00561"></a>00561       <span class="keywordflow">break</span>;
<a name="l00562"></a>00562     <span class="keywordflow">case</span> OSPFAREABDRRTRSTATUS:  <span class="comment">/* 4 */</span>
<a name="l00563"></a>00563       <span class="comment">/* Area Border router status. */</span>
<a name="l00564"></a>00564       <span class="keywordflow">if</span> (ospf &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#a435f2a4e7119f86c682366f6319ce64f">flags</a>, <a class="code" href="ospfd_8h.html#a0e909e5caea8eee9944b02632cecce52">OSPF_FLAG_ABR</a>))
<a name="l00565"></a>00565     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#a6925b6a4277252cfa3875f8bd263ed04">SNMP_TRUE</a>);
<a name="l00566"></a>00566       <span class="keywordflow">else</span>
<a name="l00567"></a>00567     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#a16a2f057eddb78f6b796be1f926406db">SNMP_FALSE</a>);
<a name="l00568"></a>00568       <span class="keywordflow">break</span>;
<a name="l00569"></a>00569     <span class="keywordflow">case</span> OSPFASBDRRTRSTATUS:    <span class="comment">/* 5 */</span>
<a name="l00570"></a>00570       <span class="comment">/* AS Border router status. */</span>
<a name="l00571"></a>00571       <span class="keywordflow">if</span> (ospf &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ospf-&gt;<a class="code" href="structospf.html#a435f2a4e7119f86c682366f6319ce64f">flags</a>, <a class="code" href="ospfd_8h.html#a68e0a6006a362d25585faeb2cc7fa48d">OSPF_FLAG_ASBR</a>))
<a name="l00572"></a>00572     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#a6925b6a4277252cfa3875f8bd263ed04">SNMP_TRUE</a>);
<a name="l00573"></a>00573       <span class="keywordflow">else</span>
<a name="l00574"></a>00574     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#a16a2f057eddb78f6b796be1f926406db">SNMP_FALSE</a>);
<a name="l00575"></a>00575       <span class="keywordflow">break</span>;
<a name="l00576"></a>00576     <span class="keywordflow">case</span> OSPFEXTERNLSACOUNT:    <span class="comment">/* 6 */</span>
<a name="l00577"></a>00577       <span class="comment">/* External LSA counts. */</span>
<a name="l00578"></a>00578       <span class="keywordflow">if</span> (ospf)
<a name="l00579"></a>00579     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__lsdb_8c.html#aac22a3316876f4a266649e4f2d902973">ospf_lsdb_count_all</a> (ospf-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>));
<a name="l00580"></a>00580       <span class="keywordflow">else</span>
<a name="l00581"></a>00581     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l00582"></a>00582       <span class="keywordflow">break</span>;
<a name="l00583"></a>00583     <span class="keywordflow">case</span> OSPFEXTERNLSACKSUMSUM: <span class="comment">/* 7 */</span>
<a name="l00584"></a>00584       <span class="comment">/* External LSA checksum. */</span>
<a name="l00585"></a>00585       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l00586"></a>00586       <span class="keywordflow">break</span>;
<a name="l00587"></a>00587     <span class="keywordflow">case</span> OSPFTOSSUPPORT:    <span class="comment">/* 8 */</span>
<a name="l00588"></a>00588       <span class="comment">/* TOS is not supported. */</span>
<a name="l00589"></a>00589       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#a16a2f057eddb78f6b796be1f926406db">SNMP_FALSE</a>);
<a name="l00590"></a>00590       <span class="keywordflow">break</span>;
<a name="l00591"></a>00591     <span class="keywordflow">case</span> OSPFORIGINATENEWLSAS:  <span class="comment">/* 9 */</span>
<a name="l00592"></a>00592       <span class="comment">/* The number of new link-state advertisements. */</span>
<a name="l00593"></a>00593       <span class="keywordflow">if</span> (ospf)
<a name="l00594"></a>00594     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (ospf-&gt;<a class="code" href="structospf.html#a4a3d13744fa4c72bfdab00cb7c7a3783">lsa_originate_count</a>);
<a name="l00595"></a>00595       <span class="keywordflow">else</span>
<a name="l00596"></a>00596     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l00597"></a>00597       <span class="keywordflow">break</span>;
<a name="l00598"></a>00598     <span class="keywordflow">case</span> OSPFRXNEWLSAS:     <span class="comment">/* 10 */</span>
<a name="l00599"></a>00599       <span class="comment">/* The number of link-state advertisements received determined</span>
<a name="l00600"></a>00600 <span class="comment">         to be new instantiations. */</span>
<a name="l00601"></a>00601       <span class="keywordflow">if</span> (ospf)
<a name="l00602"></a>00602     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (ospf-&gt;<a class="code" href="structospf.html#a9a1f25184f2f198f43b23b1b94f63060">rx_lsa_count</a>);
<a name="l00603"></a>00603       <span class="keywordflow">else</span>
<a name="l00604"></a>00604     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l00605"></a>00605       <span class="keywordflow">break</span>;
<a name="l00606"></a>00606     <span class="keywordflow">case</span> OSPFEXTLSDBLIMIT:  <span class="comment">/* 11 */</span>
<a name="l00607"></a>00607       <span class="comment">/* There is no limit for the number of non-default</span>
<a name="l00608"></a>00608 <span class="comment">         AS-external-LSAs. */</span>
<a name="l00609"></a>00609       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (-1);
<a name="l00610"></a>00610       <span class="keywordflow">break</span>;
<a name="l00611"></a>00611     <span class="keywordflow">case</span> OSPFMULTICASTEXTENSIONS: <span class="comment">/* 12 */</span>
<a name="l00612"></a>00612       <span class="comment">/* Multicast Extensions to OSPF is not supported. */</span>
<a name="l00613"></a>00613       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l00614"></a>00614       <span class="keywordflow">break</span>;
<a name="l00615"></a>00615     <span class="keywordflow">case</span> OSPFEXITOVERFLOWINTERVAL: <span class="comment">/* 13 */</span>
<a name="l00616"></a>00616       <span class="comment">/* Overflow is not supported. */</span>
<a name="l00617"></a>00617       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l00618"></a>00618       <span class="keywordflow">break</span>;
<a name="l00619"></a>00619     <span class="keywordflow">case</span> OSPFDEMANDEXTENSIONS:  <span class="comment">/* 14 */</span>
<a name="l00620"></a>00620       <span class="comment">/* Demand routing is not supported. */</span>
<a name="l00621"></a>00621       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#a16a2f057eddb78f6b796be1f926406db">SNMP_FALSE</a>);
<a name="l00622"></a>00622       <span class="keywordflow">break</span>;
<a name="l00623"></a>00623     <span class="keywordflow">default</span>:
<a name="l00624"></a>00624       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00625"></a>00625     }
<a name="l00626"></a>00626   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00627"></a>00627 }
<a name="l00628"></a>00628 
<a name="l00629"></a>00629 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *
<a name="l00630"></a>00630 ospf_area_lookup_next (<span class="keyword">struct</span> ospf *ospf, <span class="keyword">struct</span> in_addr *<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>, <span class="keywordtype">int</span> first)
<a name="l00631"></a>00631 {
<a name="l00632"></a>00632   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00633"></a>00633   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00634"></a>00634 
<a name="l00635"></a>00635   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00636"></a>00636     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00637"></a>00637 
<a name="l00638"></a>00638   <span class="keywordflow">if</span> (first)
<a name="l00639"></a>00639     {
<a name="l00640"></a>00640       node = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>);
<a name="l00641"></a>00641       <span class="keywordflow">if</span> (node)
<a name="l00642"></a>00642     {
<a name="l00643"></a>00643       area = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (node);
<a name="l00644"></a>00644       *area_id = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l00645"></a>00645       <span class="keywordflow">return</span> <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00646"></a>00646     }
<a name="l00647"></a>00647       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00648"></a>00648     }
<a name="l00649"></a>00649   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, area))
<a name="l00650"></a>00650     {
<a name="l00651"></a>00651       <span class="keywordflow">if</span> (ntohl (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>.s_addr) &gt; ntohl (area_id-&gt;s_addr))
<a name="l00652"></a>00652     {
<a name="l00653"></a>00653       *area_id = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l00654"></a>00654       <span class="keywordflow">return</span> <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00655"></a>00655     }
<a name="l00656"></a>00656     }
<a name="l00657"></a>00657   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00658"></a>00658 }
<a name="l00659"></a>00659 
<a name="l00660"></a>00660 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *
<a name="l00661"></a>00661 ospfAreaLookup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid name[], <span class="keywordtype">size_t</span> *length,
<a name="l00662"></a>00662         <span class="keyword">struct</span> in_addr *addr, <span class="keywordtype">int</span> exact)
<a name="l00663"></a>00663 {
<a name="l00664"></a>00664   <span class="keyword">struct </span>ospf *ospf;
<a name="l00665"></a>00665   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00666"></a>00666   <span class="keywordtype">int</span> len;
<a name="l00667"></a>00667 
<a name="l00668"></a>00668   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l00669"></a>00669   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00670"></a>00670     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00671"></a>00671 
<a name="l00672"></a>00672   <span class="keywordflow">if</span> (exact)
<a name="l00673"></a>00673     {
<a name="l00674"></a>00674       <span class="comment">/* Length is insufficient to lookup OSPF area. */</span>
<a name="l00675"></a>00675       <span class="keywordflow">if</span> (*length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> != sizeof (<span class="keyword">struct</span> in_addr))
<a name="l00676"></a>00676     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00677"></a>00677 
<a name="l00678"></a>00678       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, sizeof (<span class="keyword">struct</span> in_addr), addr);
<a name="l00679"></a>00679 
<a name="l00680"></a>00680       area = <a class="code" href="ospfd_8c.html#a24d6ed2a6a05e4856e6dbf5eea74f6ef">ospf_area_lookup_by_area_id</a> (ospf, *addr);
<a name="l00681"></a>00681 
<a name="l00682"></a>00682       <span class="keywordflow">return</span> <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00683"></a>00683     }
<a name="l00684"></a>00684   <span class="keywordflow">else</span>
<a name="l00685"></a>00685     {
<a name="l00686"></a>00686       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l00687"></a>00687       <span class="keywordflow">if</span> (len &gt; 4)
<a name="l00688"></a>00688     len = 4;
<a name="l00689"></a>00689       
<a name="l00690"></a>00690       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, len, addr);
<a name="l00691"></a>00691 
<a name="l00692"></a>00692       area = ospf_area_lookup_next (ospf, addr, len == 0 ? 1 : 0);
<a name="l00693"></a>00693 
<a name="l00694"></a>00694       <span class="keywordflow">if</span> (area == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00695"></a>00695     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00696"></a>00696 
<a name="l00697"></a>00697       <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, addr, sizeof (<span class="keyword">struct</span> in_addr));
<a name="l00698"></a>00698       *length = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>in_addr) + v-&gt;namelen;
<a name="l00699"></a>00699 
<a name="l00700"></a>00700       <span class="keywordflow">return</span> <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00701"></a>00701     }
<a name="l00702"></a>00702   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00703"></a>00703 }
<a name="l00704"></a>00704 
<a name="l00705"></a>00705 <span class="keyword">static</span> u_char *
<a name="l00706"></a>00706 ospfAreaEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l00707"></a>00707            <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l00708"></a>00708 {
<a name="l00709"></a>00709   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00710"></a>00710   <span class="keyword">struct </span>in_addr addr;
<a name="l00711"></a>00711 
<a name="l00712"></a>00712   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l00713"></a>00713 
<a name="l00714"></a>00714   area = ospfAreaLookup (v, name, length, &amp;addr, exact);
<a name="l00715"></a>00715   <span class="keywordflow">if</span> (! area)
<a name="l00716"></a>00716     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00717"></a>00717   
<a name="l00718"></a>00718   <span class="comment">/* Return the current value of the variable */</span>
<a name="l00719"></a>00719   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l00720"></a>00720     {
<a name="l00721"></a>00721     <span class="keywordflow">case</span> OSPFAREAID:        <span class="comment">/* 1 */</span>
<a name="l00722"></a>00722       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>);
<a name="l00723"></a>00723       <span class="keywordflow">break</span>;
<a name="l00724"></a>00724     <span class="keywordflow">case</span> OSPFAUTHTYPE:      <span class="comment">/* 2 */</span>
<a name="l00725"></a>00725       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (area-&gt;<a class="code" href="structospf__area.html#af738a86bf7f84034a1e4d1b288a70b22">auth_type</a>);
<a name="l00726"></a>00726       <span class="keywordflow">break</span>;
<a name="l00727"></a>00727     <span class="keywordflow">case</span> OSPFIMPORTASEXTERN:    <span class="comment">/* 3 */</span>
<a name="l00728"></a>00728       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> + 1);
<a name="l00729"></a>00729       <span class="keywordflow">break</span>;
<a name="l00730"></a>00730     <span class="keywordflow">case</span> OSPFSPFRUNS:       <span class="comment">/* 4 */</span>
<a name="l00731"></a>00731       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (area-&gt;<a class="code" href="structospf__area.html#a67be77edde21cd34756ee2c0a990d8bb">spf_calculation</a>);
<a name="l00732"></a>00732       <span class="keywordflow">break</span>;
<a name="l00733"></a>00733     <span class="keywordflow">case</span> OSPFAREABDRRTRCOUNT:   <span class="comment">/* 5 */</span>
<a name="l00734"></a>00734       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (area-&gt;<a class="code" href="structospf__area.html#a467c1a5bf34511b0520f0b13948ece72">abr_count</a>);
<a name="l00735"></a>00735       <span class="keywordflow">break</span>;
<a name="l00736"></a>00736     <span class="keywordflow">case</span> OSPFASBDRRTRCOUNT: <span class="comment">/* 6 */</span>
<a name="l00737"></a>00737       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (area-&gt;<a class="code" href="structospf__area.html#ad46b2710280032eab16991e2369fab32">asbr_count</a>);
<a name="l00738"></a>00738       <span class="keywordflow">break</span>;
<a name="l00739"></a>00739     <span class="keywordflow">case</span> OSPFAREALSACOUNT:  <span class="comment">/* 7 */</span>
<a name="l00740"></a>00740       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>-&gt;<a class="code" href="structospf__lsdb.html#a82e59d86cb154198c2f77da26361f386">total</a>);
<a name="l00741"></a>00741       <span class="keywordflow">break</span>;
<a name="l00742"></a>00742     <span class="keywordflow">case</span> OSPFAREALSACKSUMSUM:   <span class="comment">/* 8 */</span>
<a name="l00743"></a>00743       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l00744"></a>00744       <span class="keywordflow">break</span>;
<a name="l00745"></a>00745     <span class="keywordflow">case</span> OSPFAREASUMMARY:   <span class="comment">/* 9 */</span>
<a name="l00746"></a>00746 <span class="preprocessor">#define OSPF_noAreaSummary   1</span>
<a name="l00747"></a>00747 <span class="preprocessor"></span><span class="preprocessor">#define OSPF_sendAreaSummary 2</span>
<a name="l00748"></a>00748 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#a2a2b5634d8424e1a939836254700a8d0">no_summary</a>)
<a name="l00749"></a>00749     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (OSPF_noAreaSummary);
<a name="l00750"></a>00750       <span class="keywordflow">else</span>
<a name="l00751"></a>00751     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (OSPF_sendAreaSummary);
<a name="l00752"></a>00752       <span class="keywordflow">break</span>;
<a name="l00753"></a>00753     <span class="keywordflow">case</span> OSPFAREASTATUS:    <span class="comment">/* 10 */</span>
<a name="l00754"></a>00754       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#acd99cb4c6b560616ca4cec0043d7aa16">SNMP_VALID</a>);
<a name="l00755"></a>00755       <span class="keywordflow">break</span>;
<a name="l00756"></a>00756     <span class="keywordflow">default</span>:
<a name="l00757"></a>00757       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00758"></a>00758       <span class="keywordflow">break</span>;
<a name="l00759"></a>00759     }
<a name="l00760"></a>00760   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00761"></a>00761 }
<a name="l00762"></a>00762 
<a name="l00763"></a>00763 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *
<a name="l00764"></a>00764 ospf_stub_area_lookup_next (<span class="keyword">struct</span> in_addr *area_id, <span class="keywordtype">int</span> first)
<a name="l00765"></a>00765 {
<a name="l00766"></a>00766   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00767"></a>00767   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00768"></a>00768   <span class="keyword">struct </span>ospf *ospf;
<a name="l00769"></a>00769 
<a name="l00770"></a>00770   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l00771"></a>00771   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00772"></a>00772     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00773"></a>00773 
<a name="l00774"></a>00774   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, area))
<a name="l00775"></a>00775     {
<a name="l00776"></a>00776       <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a34e738eee2ef9dfcea3d7f31d36de08c">OSPF_AREA_STUB</a>)
<a name="l00777"></a>00777     {
<a name="l00778"></a>00778       <span class="keywordflow">if</span> (first)
<a name="l00779"></a>00779         {
<a name="l00780"></a>00780           *area_id = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l00781"></a>00781           <span class="keywordflow">return</span> <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00782"></a>00782         }
<a name="l00783"></a>00783       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ntohl (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>.s_addr) &gt; ntohl (area_id-&gt;s_addr))
<a name="l00784"></a>00784         {
<a name="l00785"></a>00785           *area_id = area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>;
<a name="l00786"></a>00786           <span class="keywordflow">return</span> <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00787"></a>00787         }
<a name="l00788"></a>00788     }
<a name="l00789"></a>00789     }
<a name="l00790"></a>00790   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00791"></a>00791 }
<a name="l00792"></a>00792 
<a name="l00793"></a>00793 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *
<a name="l00794"></a>00794 ospfStubAreaLookup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid name[], <span class="keywordtype">size_t</span> *length,
<a name="l00795"></a>00795             <span class="keyword">struct</span> in_addr *addr, <span class="keywordtype">int</span> exact)
<a name="l00796"></a>00796 {
<a name="l00797"></a>00797   <span class="keyword">struct </span>ospf *ospf;
<a name="l00798"></a>00798   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00799"></a>00799   <span class="keywordtype">int</span> len;
<a name="l00800"></a>00800 
<a name="l00801"></a>00801   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l00802"></a>00802   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00803"></a>00803     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00804"></a>00804 
<a name="l00805"></a>00805   <span class="comment">/* Exact lookup. */</span>
<a name="l00806"></a>00806   <span class="keywordflow">if</span> (exact)
<a name="l00807"></a>00807     {
<a name="l00808"></a>00808       <span class="comment">/* ospfStubAreaID + ospfStubTOS. */</span>
<a name="l00809"></a>00809       <span class="keywordflow">if</span> (*length != v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + sizeof (<span class="keyword">struct</span> in_addr) + 1)
<a name="l00810"></a>00810     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00811"></a>00811 
<a name="l00812"></a>00812       <span class="comment">/* Check ospfStubTOS is zero. */</span>
<a name="l00813"></a>00813       <span class="keywordflow">if</span> (name[*length - 1] != 0)
<a name="l00814"></a>00814     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00815"></a>00815 
<a name="l00816"></a>00816       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, sizeof (<span class="keyword">struct</span> in_addr), addr);
<a name="l00817"></a>00817 
<a name="l00818"></a>00818       area = <a class="code" href="ospfd_8c.html#a24d6ed2a6a05e4856e6dbf5eea74f6ef">ospf_area_lookup_by_area_id</a> (ospf, *addr);
<a name="l00819"></a>00819 
<a name="l00820"></a>00820       <span class="keywordflow">if</span> (area-&gt;<a class="code" href="structospf__area.html#ac7c3a32e77b40506f5bc26209f41ab89">external_routing</a> == <a class="code" href="ospfd_8h.html#a34e738eee2ef9dfcea3d7f31d36de08c">OSPF_AREA_STUB</a>)
<a name="l00821"></a>00821     <span class="keywordflow">return</span> <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00822"></a>00822       <span class="keywordflow">else</span>
<a name="l00823"></a>00823     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00824"></a>00824     }
<a name="l00825"></a>00825   <span class="keywordflow">else</span>
<a name="l00826"></a>00826     {
<a name="l00827"></a>00827       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l00828"></a>00828       <span class="keywordflow">if</span> (len &gt; 4)
<a name="l00829"></a>00829     len = 4;
<a name="l00830"></a>00830       
<a name="l00831"></a>00831       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, len, addr);
<a name="l00832"></a>00832 
<a name="l00833"></a>00833       area = ospf_stub_area_lookup_next (addr, len == 0 ? 1 : 0);
<a name="l00834"></a>00834 
<a name="l00835"></a>00835       <span class="keywordflow">if</span> (area == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00836"></a>00836     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00837"></a>00837 
<a name="l00838"></a>00838       <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, addr, sizeof (<span class="keyword">struct</span> in_addr));
<a name="l00839"></a>00839       <span class="comment">/* Set TOS 0. */</span>
<a name="l00840"></a>00840       name[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <span class="keyword">sizeof</span> (<span class="keyword">struct </span>in_addr)] = 0;
<a name="l00841"></a>00841       *length = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <span class="keyword">sizeof</span> (<span class="keyword">struct </span>in_addr) + 1;
<a name="l00842"></a>00842 
<a name="l00843"></a>00843       <span class="keywordflow">return</span> <a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00844"></a>00844     }
<a name="l00845"></a>00845   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00846"></a>00846 }
<a name="l00847"></a>00847 
<a name="l00848"></a>00848 <span class="keyword">static</span> u_char *
<a name="l00849"></a>00849 ospfStubAreaEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length,
<a name="l00850"></a>00850            <span class="keywordtype">int</span> exact, <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l00851"></a>00851 {
<a name="l00852"></a>00852   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00853"></a>00853   <span class="keyword">struct </span>in_addr addr;
<a name="l00854"></a>00854 
<a name="l00855"></a>00855   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l00856"></a>00856 
<a name="l00857"></a>00857   area = ospfStubAreaLookup (v, name, length, &amp;addr, exact);
<a name="l00858"></a>00858   <span class="keywordflow">if</span> (! area)
<a name="l00859"></a>00859     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00860"></a>00860 
<a name="l00861"></a>00861   <span class="comment">/* Return the current value of the variable */</span>
<a name="l00862"></a>00862   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l00863"></a>00863     {
<a name="l00864"></a>00864     <span class="keywordflow">case</span> OSPFSTUBAREAID:    <span class="comment">/* 1 */</span>
<a name="l00865"></a>00865       <span class="comment">/* OSPF stub area id. */</span>
<a name="l00866"></a>00866       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (area-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>);
<a name="l00867"></a>00867       <span class="keywordflow">break</span>;
<a name="l00868"></a>00868     <span class="keywordflow">case</span> OSPFSTUBTOS:       <span class="comment">/* 2 */</span>
<a name="l00869"></a>00869       <span class="comment">/* TOS value is not supported. */</span>
<a name="l00870"></a>00870       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l00871"></a>00871       <span class="keywordflow">break</span>;
<a name="l00872"></a>00872     <span class="keywordflow">case</span> OSPFSTUBMETRIC:    <span class="comment">/* 3 */</span>
<a name="l00873"></a>00873       <span class="comment">/* Default cost to stub area. */</span>
<a name="l00874"></a>00874       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (area-&gt;<a class="code" href="structospf__area.html#a8276632b8bab54988029593bb3ebc502">default_cost</a>);
<a name="l00875"></a>00875       <span class="keywordflow">break</span>;
<a name="l00876"></a>00876     <span class="keywordflow">case</span> OSPFSTUBSTATUS:    <span class="comment">/* 4 */</span>
<a name="l00877"></a>00877       <span class="comment">/* Status of the stub area. */</span>
<a name="l00878"></a>00878       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#acd99cb4c6b560616ca4cec0043d7aa16">SNMP_VALID</a>);
<a name="l00879"></a>00879       <span class="keywordflow">break</span>;
<a name="l00880"></a>00880     <span class="keywordflow">case</span> OSPFSTUBMETRICTYPE:    <span class="comment">/* 5 */</span>
<a name="l00881"></a>00881       <span class="comment">/* OSPF Metric type. */</span>
<a name="l00882"></a>00882 <span class="preprocessor">#define OSPF_ospfMetric     1</span>
<a name="l00883"></a>00883 <span class="preprocessor"></span><span class="preprocessor">#define OSPF_comparableCost 2</span>
<a name="l00884"></a>00884 <span class="preprocessor"></span><span class="preprocessor">#define OSPF_nonComparable  3</span>
<a name="l00885"></a>00885 <span class="preprocessor"></span>      <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (OSPF_ospfMetric);
<a name="l00886"></a>00886       <span class="keywordflow">break</span>;
<a name="l00887"></a>00887     <span class="keywordflow">default</span>:
<a name="l00888"></a>00888       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00889"></a>00889       <span class="keywordflow">break</span>;
<a name="l00890"></a>00890     }
<a name="l00891"></a>00891   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00892"></a>00892 }
<a name="l00893"></a>00893 
<a name="l00894"></a>00894 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *
<a name="l00895"></a>00895 lsdb_lookup_next (<span class="keyword">struct</span> <a class="code" href="structospf__area.html">ospf_area</a> *area, u_char *<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">int</span> type_next,
<a name="l00896"></a>00896           <span class="keyword">struct</span> in_addr *ls_id, <span class="keywordtype">int</span> ls_id_next,
<a name="l00897"></a>00897           <span class="keyword">struct</span> in_addr *router_id, <span class="keywordtype">int</span> router_id_next)
<a name="l00898"></a>00898 {
<a name="l00899"></a>00899   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l00900"></a>00900   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00901"></a>00901 
<a name="l00902"></a>00902   <span class="keywordflow">if</span> (type_next)
<a name="l00903"></a>00903     i = <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a>;
<a name="l00904"></a>00904   <span class="keywordflow">else</span>
<a name="l00905"></a>00905     i = *<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00906"></a>00906 
<a name="l00907"></a>00907   <span class="comment">/* Sanity check, if LSA type unknwon</span>
<a name="l00908"></a>00908 <span class="comment">     merley skip any LSA */</span>
<a name="l00909"></a>00909   <span class="keywordflow">if</span> ((i &lt; <a class="code" href="ospf__lsa_8h.html#a28f56e6e5dedc2dd8223832a029e18b1">OSPF_MIN_LSA</a>) || (i &gt;= <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>))
<a name="l00910"></a>00910     {
<a name="l00911"></a>00911       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Strange request with LSA type %d\n&quot;</span>, i);
<a name="l00912"></a>00912       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00913"></a>00913     }
<a name="l00914"></a>00914 
<a name="l00915"></a>00915   <span class="keywordflow">for</span> (; i &lt; <a class="code" href="ospf__lsa_8h.html#a3e45213a5a73c9e6ca277573059d1fbc">OSPF_MAX_LSA</a>; i++)
<a name="l00916"></a>00916     {
<a name="l00917"></a>00917       *type = <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00918"></a>00918 
<a name="l00919"></a>00919       lsa = <a class="code" href="ospf__lsdb_8c.html#aa6f18ce9c9ace58b83cac8295a83f61a">ospf_lsdb_lookup_by_id_next</a> (area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>, *type, *ls_id, *router_id,
<a name="l00920"></a>00920                     ls_id_next);
<a name="l00921"></a>00921       <span class="keywordflow">if</span> (lsa)
<a name="l00922"></a>00922     <span class="keywordflow">return</span> lsa;
<a name="l00923"></a>00923 
<a name="l00924"></a>00924       ls_id_next = 1;
<a name="l00925"></a>00925     }
<a name="l00926"></a>00926   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00927"></a>00927 }
<a name="l00928"></a>00928 
<a name="l00929"></a>00929 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *
<a name="l00930"></a>00930 ospfLsdbLookup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length,
<a name="l00931"></a>00931         <span class="keyword">struct</span> in_addr *area_id, u_char *type,
<a name="l00932"></a>00932         <span class="keyword">struct</span> in_addr *ls_id, <span class="keyword">struct</span> in_addr *router_id, <span class="keywordtype">int</span> exact)
<a name="l00933"></a>00933 {
<a name="l00934"></a>00934   <span class="keyword">struct </span>ospf *ospf;
<a name="l00935"></a>00935   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l00936"></a>00936   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l00937"></a>00937   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len;
<a name="l00938"></a>00938   <span class="keywordtype">int</span> type_next;
<a name="l00939"></a>00939   <span class="keywordtype">int</span> ls_id_next;
<a name="l00940"></a>00940   <span class="keywordtype">int</span> router_id_next;
<a name="l00941"></a>00941   oid *offset;
<a name="l00942"></a>00942   <span class="keywordtype">int</span> offsetlen;
<a name="l00943"></a>00943 
<a name="l00944"></a>00944   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l00945"></a>00945 
<a name="l00946"></a>00946 <span class="preprocessor">#define OSPF_LSDB_ENTRY_OFFSET \</span>
<a name="l00947"></a>00947 <span class="preprocessor">          (IN_ADDR_SIZE + 1 + IN_ADDR_SIZE + IN_ADDR_SIZE)</span>
<a name="l00948"></a>00948 <span class="preprocessor"></span>
<a name="l00949"></a>00949   <span class="keywordflow">if</span> (exact)
<a name="l00950"></a>00950     {
<a name="l00951"></a>00951       <span class="comment">/* Area ID + Type + LS ID + Router ID. */</span>
<a name="l00952"></a>00952       <span class="keywordflow">if</span> (*length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> != OSPF_LSDB_ENTRY_OFFSET)
<a name="l00953"></a>00953     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00954"></a>00954       
<a name="l00955"></a>00955       <span class="comment">/* Set OID offset for Area ID. */</span>
<a name="l00956"></a>00956       offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l00957"></a>00957 
<a name="l00958"></a>00958       <span class="comment">/* Lookup area first. */</span>
<a name="l00959"></a>00959       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, area_id);
<a name="l00960"></a>00960       area = <a class="code" href="ospfd_8c.html#a24d6ed2a6a05e4856e6dbf5eea74f6ef">ospf_area_lookup_by_area_id</a> (ospf, *area_id);
<a name="l00961"></a>00961       <span class="keywordflow">if</span> (! area)
<a name="l00962"></a>00962     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00963"></a>00963       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l00964"></a>00964 
<a name="l00965"></a>00965       <span class="comment">/* Type. */</span>
<a name="l00966"></a>00966       *type = *offset;
<a name="l00967"></a>00967       offset++;
<a name="l00968"></a>00968 
<a name="l00969"></a>00969       <span class="comment">/* LS ID. */</span>
<a name="l00970"></a>00970       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, ls_id);
<a name="l00971"></a>00971       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l00972"></a>00972 
<a name="l00973"></a>00973       <span class="comment">/* Router ID. */</span>
<a name="l00974"></a>00974       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, router_id);
<a name="l00975"></a>00975 
<a name="l00976"></a>00976       <span class="comment">/* Lookup LSDB. */</span>
<a name="l00977"></a>00977       <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#a272e7b17825b0ec09ece8ffe848d9a9f">ospf_lsdb_lookup_by_id</a> (area-&gt;<a class="code" href="structospf__area.html#a234992a360998d34aba7b183cf2019c9">lsdb</a>, *type, *ls_id, *router_id);
<a name="l00978"></a>00978     }
<a name="l00979"></a>00979   <span class="keywordflow">else</span>
<a name="l00980"></a>00980     {
<a name="l00981"></a>00981       <span class="comment">/* Get variable length. */</span>
<a name="l00982"></a>00982       offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l00983"></a>00983       offsetlen = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l00984"></a>00984       len = offsetlen;
<a name="l00985"></a>00985 
<a name="l00986"></a>00986       <span class="keywordflow">if</span> (len &gt; <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l00987"></a>00987     len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l00988"></a>00988 
<a name="l00989"></a>00989       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, len, area_id);
<a name="l00990"></a>00990 
<a name="l00991"></a>00991       <span class="comment">/* First we search area. */</span>
<a name="l00992"></a>00992       <span class="keywordflow">if</span> (len == <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l00993"></a>00993     area = <a class="code" href="ospfd_8c.html#a24d6ed2a6a05e4856e6dbf5eea74f6ef">ospf_area_lookup_by_area_id</a> (ospf, *area_id);
<a name="l00994"></a>00994       <span class="keywordflow">else</span>
<a name="l00995"></a>00995     area = ospf_area_lookup_next (ospf, area_id, len == 0 ? 1 : 0);
<a name="l00996"></a>00996 
<a name="l00997"></a>00997       <span class="keywordflow">if</span> (area == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00998"></a>00998     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00999"></a>00999 
<a name="l01000"></a>01000       <span class="keywordflow">do</span> 
<a name="l01001"></a>01001     {
<a name="l01002"></a>01002       <span class="comment">/* Next we lookup type. */</span>
<a name="l01003"></a>01003       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01004"></a>01004       offsetlen -= <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01005"></a>01005       len = offsetlen;
<a name="l01006"></a>01006 
<a name="l01007"></a>01007       <span class="keywordflow">if</span> (len &lt;= 0)
<a name="l01008"></a>01008         type_next = 1;
<a name="l01009"></a>01009       <span class="keywordflow">else</span>
<a name="l01010"></a>01010         {
<a name="l01011"></a>01011           len = 1;
<a name="l01012"></a>01012           type_next = 0;
<a name="l01013"></a>01013           *type = *offset;
<a name="l01014"></a>01014         }
<a name="l01015"></a>01015     
<a name="l01016"></a>01016       <span class="comment">/* LS ID. */</span>
<a name="l01017"></a>01017       offset++;
<a name="l01018"></a>01018       offsetlen--;
<a name="l01019"></a>01019       len = offsetlen;
<a name="l01020"></a>01020 
<a name="l01021"></a>01021       <span class="keywordflow">if</span> (len &lt;= 0)
<a name="l01022"></a>01022         ls_id_next = 1;
<a name="l01023"></a>01023       <span class="keywordflow">else</span>
<a name="l01024"></a>01024         {
<a name="l01025"></a>01025           ls_id_next = 0;
<a name="l01026"></a>01026           <span class="keywordflow">if</span> (len &gt; <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l01027"></a>01027         len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01028"></a>01028 
<a name="l01029"></a>01029           <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, len, ls_id);
<a name="l01030"></a>01030         }
<a name="l01031"></a>01031 
<a name="l01032"></a>01032       <span class="comment">/* Router ID. */</span>
<a name="l01033"></a>01033       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01034"></a>01034       offsetlen -= <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01035"></a>01035       len = offsetlen;
<a name="l01036"></a>01036 
<a name="l01037"></a>01037       <span class="keywordflow">if</span> (len &lt;= 0)
<a name="l01038"></a>01038         router_id_next = 1;
<a name="l01039"></a>01039       <span class="keywordflow">else</span>
<a name="l01040"></a>01040         {
<a name="l01041"></a>01041           router_id_next = 0;
<a name="l01042"></a>01042           <span class="keywordflow">if</span> (len &gt; <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l01043"></a>01043         len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01044"></a>01044 
<a name="l01045"></a>01045           <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, len, router_id);
<a name="l01046"></a>01046         }
<a name="l01047"></a>01047 
<a name="l01048"></a>01048       lsa = lsdb_lookup_next (area, type, type_next, ls_id, ls_id_next,
<a name="l01049"></a>01049                   router_id, router_id_next);
<a name="l01050"></a>01050 
<a name="l01051"></a>01051       <span class="keywordflow">if</span> (lsa)
<a name="l01052"></a>01052         {
<a name="l01053"></a>01053           <span class="comment">/* Fill in length. */</span>
<a name="l01054"></a>01054           *length = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + OSPF_LSDB_ENTRY_OFFSET;
<a name="l01055"></a>01055 
<a name="l01056"></a>01056           <span class="comment">/* Fill in value. */</span>
<a name="l01057"></a>01057           offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l01058"></a>01058           <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (offset, area_id, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l01059"></a>01059           offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01060"></a>01060           *offset = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>;
<a name="l01061"></a>01061           offset++;
<a name="l01062"></a>01062           <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (offset, &amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l01063"></a>01063           offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01064"></a>01064           <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (offset, &amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l01065"></a>01065         
<a name="l01066"></a>01066           <span class="keywordflow">return</span> lsa;
<a name="l01067"></a>01067         }
<a name="l01068"></a>01068     }
<a name="l01069"></a>01069       <span class="keywordflow">while</span> ((area = ospf_area_lookup_next (ospf, area_id, 0)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01070"></a>01070     }
<a name="l01071"></a>01071   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01072"></a>01072 }
<a name="l01073"></a>01073 
<a name="l01074"></a>01074 <span class="keyword">static</span> u_char *
<a name="l01075"></a>01075 ospfLsdbEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l01076"></a>01076            <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l01077"></a>01077 {
<a name="l01078"></a>01078   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l01079"></a>01079   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
<a name="l01080"></a>01080   <span class="keyword">struct </span>in_addr area_id;
<a name="l01081"></a>01081   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l01082"></a>01082   <span class="keyword">struct </span>in_addr ls_id;
<a name="l01083"></a>01083   <span class="keyword">struct </span>in_addr router_id;
<a name="l01084"></a>01084   <span class="keyword">struct </span>ospf *ospf;
<a name="l01085"></a>01085 
<a name="l01086"></a>01086   <span class="comment">/* INDEX { ospfLsdbAreaId, ospfLsdbType,</span>
<a name="l01087"></a>01087 <span class="comment">     ospfLsdbLsid, ospfLsdbRouterId } */</span>
<a name="l01088"></a>01088 
<a name="l01089"></a>01089   memset (&amp;area_id, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l01090"></a>01090   type = 0;
<a name="l01091"></a>01091   memset (&amp;ls_id, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l01092"></a>01092   memset (&amp;router_id, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l01093"></a>01093 
<a name="l01094"></a>01094   <span class="comment">/* Check OSPF instance. */</span>
<a name="l01095"></a>01095   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01096"></a>01096   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01097"></a>01097     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01098"></a>01098 
<a name="l01099"></a>01099   lsa = ospfLsdbLookup (v, name, length, &amp;area_id, &amp;type, &amp;ls_id, &amp;router_id,
<a name="l01100"></a>01100             exact);
<a name="l01101"></a>01101   <span class="keywordflow">if</span> (! lsa)
<a name="l01102"></a>01102     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01103"></a>01103 
<a name="l01104"></a>01104   lsah = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
<a name="l01105"></a>01105 
<a name="l01106"></a>01106   <span class="comment">/* Return the current value of the variable */</span>
<a name="l01107"></a>01107   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l01108"></a>01108     {
<a name="l01109"></a>01109     <span class="keywordflow">case</span> OSPFLSDBAREAID:    <span class="comment">/* 1 */</span>
<a name="l01110"></a>01110       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (lsa-&gt;<a class="code" href="structospf__lsa.html#aba0c88ecf7facd990c4d29466b823402">area</a>-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>);
<a name="l01111"></a>01111       <span class="keywordflow">break</span>;
<a name="l01112"></a>01112     <span class="keywordflow">case</span> OSPFLSDBTYPE:      <span class="comment">/* 2 */</span>
<a name="l01113"></a>01113       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (lsah-&gt;<a class="code" href="structlsa__header.html#a609df537f85c14e7146107e0cb67eae7">type</a>);
<a name="l01114"></a>01114       <span class="keywordflow">break</span>;
<a name="l01115"></a>01115     <span class="keywordflow">case</span> OSPFLSDBLSID:      <span class="comment">/* 3 */</span>
<a name="l01116"></a>01116       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>);
<a name="l01117"></a>01117       <span class="keywordflow">break</span>;
<a name="l01118"></a>01118     <span class="keywordflow">case</span> OSPFLSDBROUTERID:  <span class="comment">/* 4 */</span>
<a name="l01119"></a>01119       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (lsah-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>);
<a name="l01120"></a>01120       <span class="keywordflow">break</span>;
<a name="l01121"></a>01121     <span class="keywordflow">case</span> OSPFLSDBSEQUENCE:  <span class="comment">/* 5 */</span>
<a name="l01122"></a>01122       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (lsah-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>);
<a name="l01123"></a>01123       <span class="keywordflow">break</span>;
<a name="l01124"></a>01124     <span class="keywordflow">case</span> OSPFLSDBAGE:       <span class="comment">/* 6 */</span>
<a name="l01125"></a>01125       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (lsah-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a>);
<a name="l01126"></a>01126       <span class="keywordflow">break</span>;
<a name="l01127"></a>01127     <span class="keywordflow">case</span> OSPFLSDBCHECKSUM:  <span class="comment">/* 7 */</span>
<a name="l01128"></a>01128       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (lsah-&gt;<a class="code" href="structlsa__header.html#aa481a4d27dbba4c1921a74ba672fc2f4">checksum</a>);
<a name="l01129"></a>01129       <span class="keywordflow">break</span>;
<a name="l01130"></a>01130     <span class="keywordflow">case</span> OSPFLSDBADVERTISEMENT: <span class="comment">/* 8 */</span>
<a name="l01131"></a>01131       *var_len = ntohs (lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l01132"></a>01132       <span class="keywordflow">return</span> (u_char *) lsah;
<a name="l01133"></a>01133       <span class="keywordflow">break</span>;
<a name="l01134"></a>01134     <span class="keywordflow">default</span>:
<a name="l01135"></a>01135       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01136"></a>01136       <span class="keywordflow">break</span>;
<a name="l01137"></a>01137     }
<a name="l01138"></a>01138   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01139"></a>01139 }
<a name="l01140"></a>01140 
<a name="l01141"></a>01141 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__area__range.html">ospf_area_range</a> *
<a name="l01142"></a>01142 ospfAreaRangeLookup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length,
<a name="l01143"></a>01143              <span class="keyword">struct</span> in_addr *area_id, <span class="keyword">struct</span> in_addr *range_net,
<a name="l01144"></a>01144              <span class="keywordtype">int</span> exact)
<a name="l01145"></a>01145 {
<a name="l01146"></a>01146   oid *offset;
<a name="l01147"></a>01147   <span class="keywordtype">int</span> offsetlen;
<a name="l01148"></a>01148   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len;
<a name="l01149"></a>01149   <span class="keyword">struct </span>ospf *ospf;
<a name="l01150"></a>01150   <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
<a name="l01151"></a>01151   <span class="keyword">struct </span><a class="code" href="structospf__area__range.html">ospf_area_range</a> *range;
<a name="l01152"></a>01152   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l01153"></a>01153   <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
<a name="l01154"></a>01154   <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l01155"></a>01155 
<a name="l01156"></a>01156   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01157"></a>01157 
<a name="l01158"></a>01158   <span class="keywordflow">if</span> (exact) 
<a name="l01159"></a>01159     {
<a name="l01160"></a>01160       <span class="comment">/* Area ID + Range Network. */</span>
<a name="l01161"></a>01161       <span class="keywordflow">if</span> (v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> != *length)
<a name="l01162"></a>01162     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01163"></a>01163 
<a name="l01164"></a>01164       <span class="comment">/* Set OID offset for Area ID. */</span>
<a name="l01165"></a>01165       offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l01166"></a>01166 
<a name="l01167"></a>01167       <span class="comment">/* Lookup area first. */</span>
<a name="l01168"></a>01168       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, area_id);
<a name="l01169"></a>01169 
<a name="l01170"></a>01170       area = <a class="code" href="ospfd_8c.html#a24d6ed2a6a05e4856e6dbf5eea74f6ef">ospf_area_lookup_by_area_id</a> (ospf, *area_id);
<a name="l01171"></a>01171       <span class="keywordflow">if</span> (! area)
<a name="l01172"></a>01172     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01173"></a>01173 
<a name="l01174"></a>01174       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01175"></a>01175 
<a name="l01176"></a>01176       <span class="comment">/* Lookup area range. */</span>
<a name="l01177"></a>01177       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, range_net);
<a name="l01178"></a>01178       <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = *range_net;
<a name="l01179"></a>01179 
<a name="l01180"></a>01180       <span class="keywordflow">return</span> <a class="code" href="ospf__abr_8c.html#a774663b20cea32fea41dc0ade8ead064">ospf_area_range_lookup</a> (area, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
<a name="l01181"></a>01181     }
<a name="l01182"></a>01182   <span class="keywordflow">else</span>
<a name="l01183"></a>01183     {
<a name="l01184"></a>01184       <span class="comment">/* Set OID offset for Area ID. */</span>
<a name="l01185"></a>01185       offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l01186"></a>01186       offsetlen = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l01187"></a>01187 
<a name="l01188"></a>01188       len = offsetlen;
<a name="l01189"></a>01189       <span class="keywordflow">if</span> (len &gt; <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l01190"></a>01190     len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01191"></a>01191 
<a name="l01192"></a>01192       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, len, area_id);
<a name="l01193"></a>01193 
<a name="l01194"></a>01194       <span class="comment">/* First we search area. */</span>
<a name="l01195"></a>01195       <span class="keywordflow">if</span> (len == <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l01196"></a>01196     area = <a class="code" href="ospfd_8c.html#a24d6ed2a6a05e4856e6dbf5eea74f6ef">ospf_area_lookup_by_area_id</a> (ospf,*area_id);
<a name="l01197"></a>01197       <span class="keywordflow">else</span>
<a name="l01198"></a>01198     area = ospf_area_lookup_next (ospf, area_id, len == 0 ? 1 : 0);
<a name="l01199"></a>01199 
<a name="l01200"></a>01200       <span class="keywordflow">if</span> (area == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01201"></a>01201     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01202"></a>01202 
<a name="l01203"></a>01203       <span class="keywordflow">do</span> 
<a name="l01204"></a>01204     {
<a name="l01205"></a>01205       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01206"></a>01206       offsetlen -= <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01207"></a>01207       len = offsetlen;
<a name="l01208"></a>01208 
<a name="l01209"></a>01209       <span class="keywordflow">if</span> (len &lt; 0)
<a name="l01210"></a>01210         len = 0;
<a name="l01211"></a>01211       <span class="keywordflow">if</span> (len &gt; <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l01212"></a>01212         len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01213"></a>01213 
<a name="l01214"></a>01214       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, len, range_net);
<a name="l01215"></a>01215 
<a name="l01216"></a>01216       range = <a class="code" href="ospf__abr_8c.html#a093b2aa64d23ea0f5b21591238fef4c5">ospf_area_range_lookup_next</a> (area, range_net,
<a name="l01217"></a>01217                            len == 0 ? 1 : 0);
<a name="l01218"></a>01218 
<a name="l01219"></a>01219       <span class="keywordflow">if</span> (range)
<a name="l01220"></a>01220         {
<a name="l01221"></a>01221           <span class="comment">/* Fill in length. */</span>
<a name="l01222"></a>01222           *length = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01223"></a>01223 
<a name="l01224"></a>01224           <span class="comment">/* Fill in value. */</span>
<a name="l01225"></a>01225           offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l01226"></a>01226           <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (offset, area_id, IN_ADDR_SIZE);
<a name="l01227"></a>01227           offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01228"></a>01228           <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (offset, range_net, IN_ADDR_SIZE);
<a name="l01229"></a>01229 
<a name="l01230"></a>01230           <span class="keywordflow">return</span> range;
<a name="l01231"></a>01231         }
<a name="l01232"></a>01232     }
<a name="l01233"></a>01233       <span class="keywordflow">while</span> ((area = ospf_area_lookup_next (ospf, area_id, 0)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01234"></a>01234     }
<a name="l01235"></a>01235   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01236"></a>01236 }
<a name="l01237"></a>01237 
<a name="l01238"></a>01238 <span class="keyword">static</span> u_char *
<a name="l01239"></a>01239 ospfAreaRangeEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l01240"></a>01240             <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l01241"></a>01241 {
<a name="l01242"></a>01242   <span class="keyword">struct </span><a class="code" href="structospf__area__range.html">ospf_area_range</a> *range;
<a name="l01243"></a>01243   <span class="keyword">struct </span>in_addr area_id;
<a name="l01244"></a>01244   <span class="keyword">struct </span>in_addr range_net;
<a name="l01245"></a>01245   <span class="keyword">struct </span>in_addr mask;
<a name="l01246"></a>01246   <span class="keyword">struct </span>ospf *ospf;
<a name="l01247"></a>01247   
<a name="l01248"></a>01248   <span class="comment">/* Check OSPF instance. */</span>
<a name="l01249"></a>01249   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01250"></a>01250   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01251"></a>01251     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01252"></a>01252 
<a name="l01253"></a>01253   memset (&amp;area_id, 0, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l01254"></a>01254   memset (&amp;range_net, 0, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l01255"></a>01255 
<a name="l01256"></a>01256   range = ospfAreaRangeLookup (v, name, length, &amp;area_id, &amp;range_net, exact);
<a name="l01257"></a>01257   <span class="keywordflow">if</span> (! range)
<a name="l01258"></a>01258     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01259"></a>01259 
<a name="l01260"></a>01260   <span class="comment">/* Convert prefixlen to network mask format. */</span>
<a name="l01261"></a>01261   <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (range-&gt;<a class="code" href="structospf__area__range.html#afc6ca0cc37924c70d8d70aa2d426f313">subst_masklen</a>, &amp;mask);
<a name="l01262"></a>01262 
<a name="l01263"></a>01263   <span class="comment">/* Return the current value of the variable */</span>
<a name="l01264"></a>01264   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l01265"></a>01265     {
<a name="l01266"></a>01266     <span class="keywordflow">case</span> OSPFAREARANGEAREAID:   <span class="comment">/* 1 */</span>
<a name="l01267"></a>01267       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (area_id);
<a name="l01268"></a>01268       <span class="keywordflow">break</span>;
<a name="l01269"></a>01269     <span class="keywordflow">case</span> OSPFAREARANGENET:  <span class="comment">/* 2 */</span>
<a name="l01270"></a>01270       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (range_net);
<a name="l01271"></a>01271       <span class="keywordflow">break</span>;
<a name="l01272"></a>01272     <span class="keywordflow">case</span> OSPFAREARANGEMASK: <span class="comment">/* 3 */</span>
<a name="l01273"></a>01273       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (mask);
<a name="l01274"></a>01274       <span class="keywordflow">break</span>;
<a name="l01275"></a>01275     <span class="keywordflow">case</span> OSPFAREARANGESTATUS:   <span class="comment">/* 4 */</span>
<a name="l01276"></a>01276       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#acd99cb4c6b560616ca4cec0043d7aa16">SNMP_VALID</a>);
<a name="l01277"></a>01277       <span class="keywordflow">break</span>;
<a name="l01278"></a>01278     <span class="keywordflow">case</span> OSPFAREARANGEEFFECT:   <span class="comment">/* 5 */</span>
<a name="l01279"></a>01279 <span class="preprocessor">#define OSPF_advertiseMatching      1</span>
<a name="l01280"></a>01280 <span class="preprocessor"></span><span class="preprocessor">#define OSPF_doNotAdvertiseMatching 2</span>
<a name="l01281"></a>01281 <span class="preprocessor"></span>      <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (OSPF_advertiseMatching);
<a name="l01282"></a>01282       <span class="keywordflow">break</span>;
<a name="l01283"></a>01283     <span class="keywordflow">default</span>:
<a name="l01284"></a>01284       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01285"></a>01285       <span class="keywordflow">break</span>;
<a name="l01286"></a>01286     }
<a name="l01287"></a>01287   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01288"></a>01288 }
<a name="l01289"></a>01289 
<a name="l01290"></a>01290 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__nbr__nbma.html">ospf_nbr_nbma</a> *
<a name="l01291"></a>01291 ospfHostLookup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length,
<a name="l01292"></a>01292         <span class="keyword">struct</span> in_addr *addr, <span class="keywordtype">int</span> exact)
<a name="l01293"></a>01293 {
<a name="l01294"></a>01294   <span class="keywordtype">int</span> len;
<a name="l01295"></a>01295   <span class="keyword">struct </span><a class="code" href="structospf__nbr__nbma.html">ospf_nbr_nbma</a> *nbr_nbma;
<a name="l01296"></a>01296   <span class="keyword">struct </span>ospf *ospf;
<a name="l01297"></a>01297 
<a name="l01298"></a>01298   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01299"></a>01299   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01300"></a>01300     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01301"></a>01301 
<a name="l01302"></a>01302   <span class="keywordflow">if</span> (exact)
<a name="l01303"></a>01303     {
<a name="l01304"></a>01304       <span class="comment">/* INDEX { ospfHostIpAddress, ospfHostTOS } */</span>
<a name="l01305"></a>01305       <span class="keywordflow">if</span> (*length != v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1)
<a name="l01306"></a>01306     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01307"></a>01307 
<a name="l01308"></a>01308       <span class="comment">/* Check ospfHostTOS. */</span>
<a name="l01309"></a>01309       <span class="keywordflow">if</span> (name[*length - 1] != 0)
<a name="l01310"></a>01310     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01311"></a>01311 
<a name="l01312"></a>01312       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, addr);
<a name="l01313"></a>01313 
<a name="l01314"></a>01314       nbr_nbma = <a class="code" href="ospfd_8c.html#a5ef294b92140e69feec21601a4893b53">ospf_nbr_nbma_lookup</a> (ospf, *addr);
<a name="l01315"></a>01315 
<a name="l01316"></a>01316       <span class="keywordflow">return</span> <a class="code" href="structospf.html#a89b824e82146fd2494b2bf596934ab57">nbr_nbma</a>;
<a name="l01317"></a>01317     }
<a name="l01318"></a>01318   <span class="keywordflow">else</span>
<a name="l01319"></a>01319     {
<a name="l01320"></a>01320       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l01321"></a>01321       <span class="keywordflow">if</span> (len &gt; 4)
<a name="l01322"></a>01322     len = 4;
<a name="l01323"></a>01323       
<a name="l01324"></a>01324       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, len, addr);
<a name="l01325"></a>01325 
<a name="l01326"></a>01326       nbr_nbma = <a class="code" href="ospfd_8c.html#af6d7c7ae754f459750fd607f1713bc3f">ospf_nbr_nbma_lookup_next</a> (ospf, addr, len == 0 ? 1 : 0);
<a name="l01327"></a>01327 
<a name="l01328"></a>01328       <span class="keywordflow">if</span> (nbr_nbma == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01329"></a>01329     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01330"></a>01330 
<a name="l01331"></a>01331       <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, addr, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l01332"></a>01332 
<a name="l01333"></a>01333       <span class="comment">/* Set TOS 0. */</span>
<a name="l01334"></a>01334       name[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>] = 0;
<a name="l01335"></a>01335 
<a name="l01336"></a>01336       *length = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1;
<a name="l01337"></a>01337 
<a name="l01338"></a>01338       <span class="keywordflow">return</span> <a class="code" href="structospf.html#a89b824e82146fd2494b2bf596934ab57">nbr_nbma</a>;
<a name="l01339"></a>01339     }
<a name="l01340"></a>01340   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01341"></a>01341 }
<a name="l01342"></a>01342 
<a name="l01343"></a>01343 <span class="keyword">static</span> u_char *
<a name="l01344"></a>01344 ospfHostEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l01345"></a>01345            <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l01346"></a>01346 {
<a name="l01347"></a>01347   <span class="keyword">struct </span><a class="code" href="structospf__nbr__nbma.html">ospf_nbr_nbma</a> *nbr_nbma;
<a name="l01348"></a>01348   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01349"></a>01349   <span class="keyword">struct </span>in_addr addr;
<a name="l01350"></a>01350   <span class="keyword">struct </span>ospf *ospf;
<a name="l01351"></a>01351 
<a name="l01352"></a>01352   <span class="comment">/* Check OSPF instance. */</span>
<a name="l01353"></a>01353   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01354"></a>01354   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01355"></a>01355     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01356"></a>01356 
<a name="l01357"></a>01357   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l01358"></a>01358 
<a name="l01359"></a>01359   nbr_nbma = ospfHostLookup (v, name, length, &amp;addr, exact);
<a name="l01360"></a>01360   <span class="keywordflow">if</span> (nbr_nbma == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01361"></a>01361     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01362"></a>01362 
<a name="l01363"></a>01363   oi = nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a501752990df8f83d0efae32fbb9dead9">oi</a>;
<a name="l01364"></a>01364 
<a name="l01365"></a>01365   <span class="comment">/* Return the current value of the variable */</span>
<a name="l01366"></a>01366   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l01367"></a>01367     {
<a name="l01368"></a>01368     <span class="keywordflow">case</span> OSPFHOSTIPADDRESS: <span class="comment">/* 1 */</span>
<a name="l01369"></a>01369       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (nbr_nbma-&gt;<a class="code" href="structospf__nbr__nbma.html#a5fc2a7f849288ef91acc9c055a934fe8">addr</a>);
<a name="l01370"></a>01370       <span class="keywordflow">break</span>;
<a name="l01371"></a>01371     <span class="keywordflow">case</span> OSPFHOSTTOS:       <span class="comment">/* 2 */</span>
<a name="l01372"></a>01372       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l01373"></a>01373       <span class="keywordflow">break</span>;
<a name="l01374"></a>01374     <span class="keywordflow">case</span> OSPFHOSTMETRIC:    <span class="comment">/* 3 */</span>
<a name="l01375"></a>01375       <span class="keywordflow">if</span> (oi)
<a name="l01376"></a>01376     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (oi-&gt;<a class="code" href="structospf__interface.html#a9e3d295cb23b60bbcda26b11553a2d03">output_cost</a>);
<a name="l01377"></a>01377       <span class="keywordflow">else</span>
<a name="l01378"></a>01378     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (1);
<a name="l01379"></a>01379       <span class="keywordflow">break</span>;
<a name="l01380"></a>01380     <span class="keywordflow">case</span> OSPFHOSTSTATUS:    <span class="comment">/* 4 */</span>
<a name="l01381"></a>01381       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#acd99cb4c6b560616ca4cec0043d7aa16">SNMP_VALID</a>);
<a name="l01382"></a>01382       <span class="keywordflow">break</span>;
<a name="l01383"></a>01383     <span class="keywordflow">case</span> OSPFHOSTAREAID:    <span class="comment">/* 5 */</span>
<a name="l01384"></a>01384       <span class="keywordflow">if</span> (oi &amp;&amp; oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>)
<a name="l01385"></a>01385     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>);
<a name="l01386"></a>01386       <span class="keywordflow">else</span>
<a name="l01387"></a>01387     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (ospf_empty_addr);
<a name="l01388"></a>01388       <span class="keywordflow">break</span>;
<a name="l01389"></a>01389     <span class="keywordflow">default</span>:
<a name="l01390"></a>01390       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01391"></a>01391       <span class="keywordflow">break</span>;
<a name="l01392"></a>01392     }
<a name="l01393"></a>01393   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01394"></a>01394 }
<a name="l01395"></a>01395 
<a name="l01396"></a>01396 <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *ospf_snmp_iflist;
<a name="l01397"></a>01397 
<a name="l01398"></a>01398 <span class="keyword">struct </span>ospf_snmp_if
<a name="l01399"></a>01399 {
<a name="l01400"></a>01400   <span class="keyword">struct </span>in_addr addr;
<a name="l01401"></a>01401   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
<a name="l01402"></a>01402   <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
<a name="l01403"></a>01403 };
<a name="l01404"></a>01404 
<a name="l01405"></a>01405 <span class="keyword">static</span> <span class="keyword">struct </span>ospf_snmp_if *
<a name="l01406"></a>01406 ospf_snmp_if_new (<span class="keywordtype">void</span>)
<a name="l01407"></a>01407 {
<a name="l01408"></a>01408   <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> ospf_snmp_if));
<a name="l01409"></a>01409 }
<a name="l01410"></a>01410 
<a name="l01411"></a>01411 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01412"></a>01412 ospf_snmp_if_free (<span class="keyword">struct</span> ospf_snmp_if *osif)
<a name="l01413"></a>01413 {
<a name="l01414"></a>01414   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (0, osif);
<a name="l01415"></a>01415 }
<a name="l01416"></a>01416 
<a name="l01417"></a>01417 <span class="keywordtype">void</span>
<a name="l01418"></a>01418 <a class="code" href="ospf__snmp_8h.html#aba5a9cfd31a7e2217c91a3d5715e9523">ospf_snmp_if_delete</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l01419"></a>01419 {
<a name="l01420"></a>01420   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01421"></a>01421   <span class="keyword">struct </span>ospf_snmp_if *osif;
<a name="l01422"></a>01422 
<a name="l01423"></a>01423   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf_snmp_iflist, node, nnode, osif))
<a name="l01424"></a>01424     {
<a name="l01425"></a>01425       <span class="keywordflow">if</span> (osif-&gt;ifp == ifp)
<a name="l01426"></a>01426     {
<a name="l01427"></a>01427       <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (ospf_snmp_iflist, node);
<a name="l01428"></a>01428       ospf_snmp_if_free (osif);
<a name="l01429"></a>01429       <span class="keywordflow">return</span>;
<a name="l01430"></a>01430     }
<a name="l01431"></a>01431     }
<a name="l01432"></a>01432 }
<a name="l01433"></a>01433 
<a name="l01434"></a>01434 <span class="keywordtype">void</span>
<a name="l01435"></a>01435 <a class="code" href="ospf__snmp_8h.html#ac794e2fa68a7229faab5403263339aa0">ospf_snmp_if_update</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l01436"></a>01436 {
<a name="l01437"></a>01437   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l01438"></a>01438   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="spgrid_8c.html#a3363f400142fb233235d62ccdea22e38">pn</a>;
<a name="l01439"></a>01439   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l01440"></a>01440   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l01441"></a>01441   <span class="keyword">struct </span>ospf_snmp_if *osif;
<a name="l01442"></a>01442   <span class="keyword">struct </span>in_addr *addr;
<a name="l01443"></a>01443   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
<a name="l01444"></a>01444 
<a name="l01445"></a>01445   <a class="code" href="ospf__snmp_8h.html#aba5a9cfd31a7e2217c91a3d5715e9523">ospf_snmp_if_delete</a> (ifp);
<a name="l01446"></a>01446 
<a name="l01447"></a>01447   p = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01448"></a>01448   addr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01449"></a>01449   ifindex = 0;
<a name="l01450"></a>01450 
<a name="l01451"></a>01451   <span class="comment">/* Lookup first IPv4 address entry. */</span>
<a name="l01452"></a>01452   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node, ifc))
<a name="l01453"></a>01453     {
<a name="l01454"></a>01454       p = <a class="code" href="if_8h.html#ad5c7865cf89efe7aef6ae2c7919ac92b">CONNECTED_ID</a>(ifc);
<a name="l01455"></a>01455 
<a name="l01456"></a>01456       <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l01457"></a>01457     {
<a name="l01458"></a>01458       addr = &amp;p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<a name="l01459"></a>01459       <span class="keywordflow">break</span>;
<a name="l01460"></a>01460     }
<a name="l01461"></a>01461     }
<a name="l01462"></a>01462   <span class="keywordflow">if</span> (! addr)
<a name="l01463"></a>01463     ifindex = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
<a name="l01464"></a>01464 
<a name="l01465"></a>01465   <span class="comment">/* Add interface to the list. */</span>
<a name="l01466"></a>01466   pn = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01467"></a>01467   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf_snmp_iflist, node, osif))
<a name="l01468"></a>01468     {
<a name="l01469"></a>01469       <span class="keywordflow">if</span> (addr)
<a name="l01470"></a>01470     {
<a name="l01471"></a>01471       <span class="comment">/* Usual interfaces --&gt; Sort them based on interface IPv4 addresses */</span>
<a name="l01472"></a>01472       <span class="keywordflow">if</span> (ntohl (osif-&gt;addr.s_addr) &gt; ntohl (addr-&gt;s_addr))
<a name="l01473"></a>01473         <span class="keywordflow">break</span>;
<a name="l01474"></a>01474     }
<a name="l01475"></a>01475       <span class="keywordflow">else</span>
<a name="l01476"></a>01476     {
<a name="l01477"></a>01477       <span class="comment">/* Unnumbered interfaces --&gt; Sort them based on interface indexes */</span>
<a name="l01478"></a>01478       <span class="keywordflow">if</span> (osif-&gt;addr.s_addr != 0 || osif-&gt;ifindex &gt; ifindex)
<a name="l01479"></a>01479         <span class="keywordflow">break</span>;
<a name="l01480"></a>01480     }
<a name="l01481"></a>01481       pn = node;
<a name="l01482"></a>01482     }
<a name="l01483"></a>01483 
<a name="l01484"></a>01484   osif = ospf_snmp_if_new ();
<a name="l01485"></a>01485   <span class="keywordflow">if</span> (addr) <span class="comment">/* Usual interface */</span>
<a name="l01486"></a>01486   {
<a name="l01487"></a>01487     osif-&gt;addr = *addr;
<a name="l01488"></a>01488     
<a name="l01489"></a>01489     <span class="comment">/* This field is used for storing ospfAddressLessIf OID value,</span>
<a name="l01490"></a>01490 <span class="comment">     * conform to RFC1850 OSPF-MIB specification, it must be 0 for</span>
<a name="l01491"></a>01491 <span class="comment">     * usual interface */</span>
<a name="l01492"></a>01492     osif-&gt;ifindex = 0;
<a name="l01493"></a>01493   }
<a name="l01494"></a>01494   <span class="keywordflow">else</span>  <span class="comment">/* Unnumbered interface */</span>
<a name="l01495"></a>01495     osif-&gt;ifindex = ifindex;
<a name="l01496"></a>01496   osif-&gt;ifp = ifp;
<a name="l01497"></a>01497 
<a name="l01498"></a>01498   <a class="code" href="linklist_8c.html#a79bb88c8c4960a3d28778f4b87af05c8">listnode_add_after</a> (ospf_snmp_iflist, pn, osif);
<a name="l01499"></a>01499 }
<a name="l01500"></a>01500 
<a name="l01501"></a>01501 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01502"></a>01502 ospf_snmp_is_if_have_addr (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l01503"></a>01503 {
<a name="l01504"></a>01504   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *nn;
<a name="l01505"></a>01505   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l01506"></a>01506 
<a name="l01507"></a>01507   <span class="comment">/* Is this interface having any connected IPv4 address ? */</span>
<a name="l01508"></a>01508   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, nn, ifc))
<a name="l01509"></a>01509   {
<a name="l01510"></a>01510     <span class="keywordflow">if</span> (<a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc)-&gt;family == AF_INET)
<a name="l01511"></a>01511       <span class="keywordflow">return</span> 1;
<a name="l01512"></a>01512   }
<a name="l01513"></a>01513   
<a name="l01514"></a>01514   <span class="keywordflow">return</span> 0;
<a name="l01515"></a>01515 }
<a name="l01516"></a>01516 
<a name="l01517"></a>01517 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l01518"></a>01518 ospf_snmp_if_lookup (<span class="keyword">struct</span> in_addr *ifaddr, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *ifindex)
<a name="l01519"></a>01519 {
<a name="l01520"></a>01520   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l01521"></a>01521   <span class="keyword">struct </span>ospf_snmp_if *osif;
<a name="l01522"></a>01522   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01523"></a>01523   <span class="keyword">struct </span>ospf *ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01524"></a>01524 
<a name="l01525"></a>01525   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf_snmp_iflist, node, osif))
<a name="l01526"></a>01526     {  
<a name="l01527"></a>01527       <span class="keywordflow">if</span> (ifaddr-&gt;s_addr)
<a name="l01528"></a>01528         {
<a name="l01529"></a>01529           <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;osif-&gt;addr, ifaddr))
<a name="l01530"></a>01530             oi = <a class="code" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (ospf, osif-&gt;ifp, *ifaddr);
<a name="l01531"></a>01531         }
<a name="l01532"></a>01532       <span class="keywordflow">else</span>
<a name="l01533"></a>01533         {
<a name="l01534"></a>01534           <span class="keywordflow">if</span> (osif-&gt;ifindex == *ifindex)
<a name="l01535"></a>01535             oi = <a class="code" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (ospf, osif-&gt;ifp, *ifaddr);
<a name="l01536"></a>01536         }
<a name="l01537"></a>01537     }
<a name="l01538"></a>01538   <span class="keywordflow">return</span> oi;
<a name="l01539"></a>01539 }
<a name="l01540"></a>01540 
<a name="l01541"></a>01541 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l01542"></a>01542 ospf_snmp_if_lookup_next (<span class="keyword">struct</span> in_addr *ifaddr, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *ifindex,
<a name="l01543"></a>01543               <span class="keywordtype">int</span> ifaddr_next, <span class="keywordtype">int</span> ifindex_next)
<a name="l01544"></a>01544 {
<a name="l01545"></a>01545   <span class="keyword">struct </span>ospf_snmp_if *osif;
<a name="l01546"></a>01546   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *nn;
<a name="l01547"></a>01547   <span class="keyword">struct </span>ospf *ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01548"></a>01548   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01549"></a>01549 
<a name="l01550"></a>01550   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01551"></a>01551     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01552"></a>01552 
<a name="l01553"></a>01553   <span class="comment">/* No instance is specified --&gt; Return the first OSPF interface */</span>
<a name="l01554"></a>01554   <span class="keywordflow">if</span> (ifaddr_next)
<a name="l01555"></a>01555     {
<a name="l01556"></a>01556       <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf_snmp_iflist, nn, osif))
<a name="l01557"></a>01557     {
<a name="l01558"></a>01558       osif = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (nn);
<a name="l01559"></a>01559       *ifaddr = osif-&gt;addr;
<a name="l01560"></a>01560       *ifindex = osif-&gt;ifindex;
<a name="l01561"></a>01561           <span class="comment">/* Because no instance is specified, we don&#39;t care about the kind of </span>
<a name="l01562"></a>01562 <span class="comment">           * interface (usual or unnumbered), just returning the first valid </span>
<a name="l01563"></a>01563 <span class="comment">           * OSPF interface */</span>
<a name="l01564"></a>01564           oi = <a class="code" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (ospf, osif-&gt;ifp, *ifaddr);
<a name="l01565"></a>01565           <span class="keywordflow">if</span> (oi)
<a name="l01566"></a>01566             <span class="keywordflow">return</span> (oi);
<a name="l01567"></a>01567     }
<a name="l01568"></a>01568       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01569"></a>01569     }
<a name="l01570"></a>01570 
<a name="l01571"></a>01571   <span class="comment">/* An instance is specified --&gt; Return the next OSPF interface */</span>
<a name="l01572"></a>01572   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf_snmp_iflist, nn, osif))
<a name="l01573"></a>01573     {
<a name="l01574"></a>01574       <span class="comment">/* Usual interface */</span>
<a name="l01575"></a>01575       <span class="keywordflow">if</span> (ifaddr-&gt;s_addr) 
<a name="l01576"></a>01576     {
<a name="l01577"></a>01577       <span class="comment">/* The interface must have valid AF_INET connected address */</span>
<a name="l01578"></a>01578       <span class="comment">/* it must have lager IPv4 address value than the lookup entry */</span>
<a name="l01579"></a>01579       <span class="keywordflow">if</span> ((ospf_snmp_is_if_have_addr(osif-&gt;ifp)) &amp;&amp;
<a name="l01580"></a>01580           (ntohl (osif-&gt;addr.s_addr) &gt; ntohl (ifaddr-&gt;s_addr)))
<a name="l01581"></a>01581         {
<a name="l01582"></a>01582           *ifaddr = osif-&gt;addr;
<a name="l01583"></a>01583           *ifindex = osif-&gt;ifindex;
<a name="l01584"></a>01584         
<a name="l01585"></a>01585           <span class="comment">/* and it must be an OSPF interface */</span>
<a name="l01586"></a>01586           oi = <a class="code" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (ospf, osif-&gt;ifp, *ifaddr);
<a name="l01587"></a>01587           <span class="keywordflow">if</span> (oi)
<a name="l01588"></a>01588         <span class="keywordflow">return</span> oi;
<a name="l01589"></a>01589         }
<a name="l01590"></a>01590     }
<a name="l01591"></a>01591       <span class="comment">/* Unnumbered interface */</span>
<a name="l01592"></a>01592       <span class="keywordflow">else</span>  
<a name="l01593"></a>01593         <span class="comment">/* The interface must NOT have valid AF_INET connected address */</span>
<a name="l01594"></a>01594         <span class="comment">/* it must have lager interface index than the lookup entry */</span>
<a name="l01595"></a>01595         <span class="keywordflow">if</span> ((!ospf_snmp_is_if_have_addr(osif-&gt;ifp)) &amp;&amp;
<a name="l01596"></a>01596             (osif-&gt;ifindex &gt; *ifindex))
<a name="l01597"></a>01597           {
<a name="l01598"></a>01598             *ifaddr = osif-&gt;addr;
<a name="l01599"></a>01599             *ifindex = osif-&gt;ifindex;
<a name="l01600"></a>01600         
<a name="l01601"></a>01601             <span class="comment">/* and it must be an OSPF interface */</span>
<a name="l01602"></a>01602             oi = <a class="code" href="ospf__interface_8c.html#ab6de66b3bd1fb23d3469ecf70210d280">ospf_if_lookup_by_local_addr</a> (ospf, osif-&gt;ifp, *ifaddr);
<a name="l01603"></a>01603             <span class="keywordflow">if</span> (oi)
<a name="l01604"></a>01604               <span class="keywordflow">return</span> oi;
<a name="l01605"></a>01605           }
<a name="l01606"></a>01606     }
<a name="l01607"></a>01607   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01608"></a>01608 }
<a name="l01609"></a>01609 
<a name="l01610"></a>01610 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01611"></a>01611 ospf_snmp_iftype (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l01612"></a>01612 {
<a name="l01613"></a>01613 <span class="preprocessor">#define ospf_snmp_iftype_broadcast         1</span>
<a name="l01614"></a>01614 <span class="preprocessor"></span><span class="preprocessor">#define ospf_snmp_iftype_nbma              2</span>
<a name="l01615"></a>01615 <span class="preprocessor"></span><span class="preprocessor">#define ospf_snmp_iftype_pointToPoint      3</span>
<a name="l01616"></a>01616 <span class="preprocessor"></span><span class="preprocessor">#define ospf_snmp_iftype_pointToMultipoint 5</span>
<a name="l01617"></a>01617 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a88f3bd141d217db7e4118a78b1db1b60">if_is_broadcast</a> (ifp))
<a name="l01618"></a>01618     <span class="keywordflow">return</span> ospf_snmp_iftype_broadcast;
<a name="l01619"></a>01619   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a61aed2ccc7ec47d6822546664ea77f0c">if_is_pointopoint</a> (ifp))
<a name="l01620"></a>01620     <span class="keywordflow">return</span> ospf_snmp_iftype_pointToPoint;
<a name="l01621"></a>01621   <span class="keywordflow">return</span> ospf_snmp_iftype_broadcast;
<a name="l01622"></a>01622 }
<a name="l01623"></a>01623 
<a name="l01624"></a>01624 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l01625"></a>01625 ospfIfLookup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length,
<a name="l01626"></a>01626           <span class="keyword">struct</span> in_addr *ifaddr, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *ifindex, <span class="keywordtype">int</span> exact)
<a name="l01627"></a>01627 {
<a name="l01628"></a>01628   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len;
<a name="l01629"></a>01629   <span class="keywordtype">int</span> ifaddr_next = 0;
<a name="l01630"></a>01630   <span class="keywordtype">int</span> ifindex_next = 0;
<a name="l01631"></a>01631   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01632"></a>01632   oid *offset;
<a name="l01633"></a>01633 
<a name="l01634"></a>01634   <span class="keywordflow">if</span> (exact)
<a name="l01635"></a>01635     {
<a name="l01636"></a>01636       <span class="keywordflow">if</span> (*length != v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1)
<a name="l01637"></a>01637     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01638"></a>01638 
<a name="l01639"></a>01639       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, ifaddr);
<a name="l01640"></a>01640       *ifindex = name[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>];
<a name="l01641"></a>01641 
<a name="l01642"></a>01642       <span class="keywordflow">return</span> ospf_snmp_if_lookup (ifaddr, ifindex);
<a name="l01643"></a>01643     }
<a name="l01644"></a>01644   <span class="keywordflow">else</span>
<a name="l01645"></a>01645     {
<a name="l01646"></a>01646       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l01647"></a>01647       <span class="keywordflow">if</span> (len &gt;= <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l01648"></a>01648     len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01649"></a>01649       <span class="keywordflow">if</span> (len &lt;= 0)
<a name="l01650"></a>01650     ifaddr_next = 1;
<a name="l01651"></a>01651 
<a name="l01652"></a>01652       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, len, ifaddr);
<a name="l01653"></a>01653 
<a name="l01654"></a>01654       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> - <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01655"></a>01655       <span class="keywordflow">if</span> (len &gt;= 1)
<a name="l01656"></a>01656     len = 1;
<a name="l01657"></a>01657       <span class="keywordflow">else</span>
<a name="l01658"></a>01658     ifindex_next = 1;
<a name="l01659"></a>01659 
<a name="l01660"></a>01660       <span class="keywordflow">if</span> (len == 1)
<a name="l01661"></a>01661     *ifindex = name[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>];
<a name="l01662"></a>01662 
<a name="l01663"></a>01663       oi = ospf_snmp_if_lookup_next (ifaddr, ifindex, ifaddr_next,
<a name="l01664"></a>01664                       ifindex_next);
<a name="l01665"></a>01665       <span class="keywordflow">if</span> (oi)
<a name="l01666"></a>01666     {
<a name="l01667"></a>01667       *length = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1;
<a name="l01668"></a>01668       offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l01669"></a>01669       <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (offset, ifaddr, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l01670"></a>01670       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01671"></a>01671       *offset = *ifindex;
<a name="l01672"></a>01672       <span class="keywordflow">return</span> oi;
<a name="l01673"></a>01673     }
<a name="l01674"></a>01674     }
<a name="l01675"></a>01675   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01676"></a>01676 }
<a name="l01677"></a>01677 
<a name="l01678"></a>01678 <span class="keyword">static</span> u_char *
<a name="l01679"></a>01679 ospfIfEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l01680"></a>01680          <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l01681"></a>01681 {
<a name="l01682"></a>01682   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
<a name="l01683"></a>01683   <span class="keyword">struct </span>in_addr ifaddr;
<a name="l01684"></a>01684   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01685"></a>01685   <span class="keyword">struct </span>ospf *ospf;
<a name="l01686"></a>01686 
<a name="l01687"></a>01687   ifindex = 0;
<a name="l01688"></a>01688   memset (&amp;ifaddr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l01689"></a>01689 
<a name="l01690"></a>01690   <span class="comment">/* Check OSPF instance. */</span>
<a name="l01691"></a>01691   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01692"></a>01692   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01693"></a>01693     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01694"></a>01694 
<a name="l01695"></a>01695   oi = ospfIfLookup (v, name, length, &amp;ifaddr, &amp;ifindex, exact);
<a name="l01696"></a>01696   <span class="keywordflow">if</span> (oi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01697"></a>01697     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01698"></a>01698 
<a name="l01699"></a>01699   <span class="comment">/* Return the current value of the variable */</span>
<a name="l01700"></a>01700   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l01701"></a>01701     {
<a name="l01702"></a>01702     <span class="keywordflow">case</span> OSPFIFIPADDRESS:   <span class="comment">/* 1 */</span>
<a name="l01703"></a>01703       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (ifaddr);
<a name="l01704"></a>01704       <span class="keywordflow">break</span>;
<a name="l01705"></a>01705     <span class="keywordflow">case</span> OSPFADDRESSLESSIF: <span class="comment">/* 2 */</span>
<a name="l01706"></a>01706       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (ifindex);
<a name="l01707"></a>01707       <span class="keywordflow">break</span>;
<a name="l01708"></a>01708     <span class="keywordflow">case</span> OSPFIFAREAID:      <span class="comment">/* 3 */</span>
<a name="l01709"></a>01709       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>)
<a name="l01710"></a>01710     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#af08c06866d1beb6168de552bb9855c6b">area_id</a>);
<a name="l01711"></a>01711       <span class="keywordflow">else</span>
<a name="l01712"></a>01712     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (ospf_empty_addr);
<a name="l01713"></a>01713       <span class="keywordflow">break</span>;
<a name="l01714"></a>01714     <span class="keywordflow">case</span> OSPFIFTYPE:        <span class="comment">/* 4 */</span>
<a name="l01715"></a>01715       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (ospf_snmp_iftype (oi-&gt;<a class="code" href="structospf__interface.html#a42f951186ccd68e63207f943cb894228">ifp</a>));
<a name="l01716"></a>01716       <span class="keywordflow">break</span>;
<a name="l01717"></a>01717     <span class="keywordflow">case</span> OSPFIFADMINSTAT:   <span class="comment">/* 5 */</span>
<a name="l01718"></a>01718       <span class="keywordflow">if</span> (oi)
<a name="l01719"></a>01719     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (OSPF_STATUS_ENABLED);
<a name="l01720"></a>01720       <span class="keywordflow">else</span>
<a name="l01721"></a>01721     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (OSPF_STATUS_DISABLED);
<a name="l01722"></a>01722       <span class="keywordflow">break</span>;
<a name="l01723"></a>01723     <span class="keywordflow">case</span> OSPFIFRTRPRIORITY: <span class="comment">/* 6 */</span>
<a name="l01724"></a>01724       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__interface_8h.html#accb5457e43688e067b0b9844b08ae520">PRIORITY</a> (oi));
<a name="l01725"></a>01725       <span class="keywordflow">break</span>;
<a name="l01726"></a>01726     <span class="keywordflow">case</span> OSPFIFTRANSITDELAY:    <span class="comment">/* 7 */</span>
<a name="l01727"></a>01727       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, transmit_delay));
<a name="l01728"></a>01728       <span class="keywordflow">break</span>;
<a name="l01729"></a>01729     <span class="keywordflow">case</span> OSPFIFRETRANSINTERVAL: <span class="comment">/* 8 */</span>
<a name="l01730"></a>01730       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, retransmit_interval));
<a name="l01731"></a>01731       <span class="keywordflow">break</span>;
<a name="l01732"></a>01732     <span class="keywordflow">case</span> OSPFIFHELLOINTERVAL:   <span class="comment">/* 9 */</span>
<a name="l01733"></a>01733       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, v_hello));
<a name="l01734"></a>01734       <span class="keywordflow">break</span>;
<a name="l01735"></a>01735     <span class="keywordflow">case</span> OSPFIFRTRDEADINTERVAL: <span class="comment">/* 10 */</span>
<a name="l01736"></a>01736       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, v_wait));
<a name="l01737"></a>01737       <span class="keywordflow">break</span>;
<a name="l01738"></a>01738     <span class="keywordflow">case</span> OSPFIFPOLLINTERVAL:    <span class="comment">/* 11 */</span>
<a name="l01739"></a>01739       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospfd_8h.html#aa863216ebc7bf12bf8d0434cf9bb90d0">OSPF_POLL_INTERVAL_DEFAULT</a>);
<a name="l01740"></a>01740       <span class="keywordflow">break</span>;
<a name="l01741"></a>01741     <span class="keywordflow">case</span> OSPFIFSTATE:       <span class="comment">/* 12 */</span>
<a name="l01742"></a>01742       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__ism_8h.html#a9a7e81bc05399a7de11d0d9ade8fe7a5">ISM_SNMP</a>(oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a>));
<a name="l01743"></a>01743       <span class="keywordflow">break</span>;
<a name="l01744"></a>01744     <span class="keywordflow">case</span> OSPFIFDESIGNATEDROUTER: <span class="comment">/* 13 */</span>
<a name="l01745"></a>01745       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (<a class="code" href="ospf__interface_8h.html#aa84a7dde76ac0a31898992d050858ec5">DR</a> (oi));
<a name="l01746"></a>01746       <span class="keywordflow">break</span>;
<a name="l01747"></a>01747     <span class="keywordflow">case</span> OSPFIFBACKUPDESIGNATEDROUTER: <span class="comment">/* 14 */</span>
<a name="l01748"></a>01748       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (<a class="code" href="ospf__interface_8h.html#ab9a182dc79cc0d10a77a27c60f2351cd">BDR</a> (oi));
<a name="l01749"></a>01749       <span class="keywordflow">break</span>;
<a name="l01750"></a>01750     <span class="keywordflow">case</span> OSPFIFEVENTS:      <span class="comment">/* 15 */</span>
<a name="l01751"></a>01751       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (oi-&gt;<a class="code" href="structospf__interface.html#a00f77cdcfa5c89c1b02675c956e582f5">state_change</a>);
<a name="l01752"></a>01752       <span class="keywordflow">break</span>;
<a name="l01753"></a>01753     <span class="keywordflow">case</span> OSPFIFAUTHKEY:     <span class="comment">/* 16 */</span>
<a name="l01754"></a>01754       *var_len = 0;
<a name="l01755"></a>01755       <span class="keywordflow">return</span> (u_char *) <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_simple);
<a name="l01756"></a>01756       <span class="keywordflow">break</span>;
<a name="l01757"></a>01757     <span class="keywordflow">case</span> OSPFIFSTATUS:      <span class="comment">/* 17 */</span>
<a name="l01758"></a>01758       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#acd99cb4c6b560616ca4cec0043d7aa16">SNMP_VALID</a>);
<a name="l01759"></a>01759       <span class="keywordflow">break</span>;
<a name="l01760"></a>01760     <span class="keywordflow">case</span> OSPFIFMULTICASTFORWARDING: <span class="comment">/* 18 */</span>
<a name="l01761"></a>01761 <span class="preprocessor">#define ospf_snmp_multiforward_blocked    1</span>
<a name="l01762"></a>01762 <span class="preprocessor"></span><span class="preprocessor">#define ospf_snmp_multiforward_multicast  2</span>
<a name="l01763"></a>01763 <span class="preprocessor"></span><span class="preprocessor">#define ospf_snmp_multiforward_unicast    3</span>
<a name="l01764"></a>01764 <span class="preprocessor"></span>      <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (ospf_snmp_multiforward_blocked);
<a name="l01765"></a>01765       <span class="keywordflow">break</span>;
<a name="l01766"></a>01766     <span class="keywordflow">case</span> OSPFIFDEMAND:      <span class="comment">/* 19 */</span>
<a name="l01767"></a>01767       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#a16a2f057eddb78f6b796be1f926406db">SNMP_FALSE</a>);
<a name="l01768"></a>01768       <span class="keywordflow">break</span>;
<a name="l01769"></a>01769     <span class="keywordflow">case</span> OSPFIFAUTHTYPE:    <span class="comment">/* 20 */</span>
<a name="l01770"></a>01770       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>)
<a name="l01771"></a>01771     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#af738a86bf7f84034a1e4d1b288a70b22">auth_type</a>);
<a name="l01772"></a>01772       <span class="keywordflow">else</span>
<a name="l01773"></a>01773     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l01774"></a>01774       <span class="keywordflow">break</span>;
<a name="l01775"></a>01775     <span class="keywordflow">default</span>:
<a name="l01776"></a>01776       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01777"></a>01777       <span class="keywordflow">break</span>;
<a name="l01778"></a>01778     }
<a name="l01779"></a>01779   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01780"></a>01780 }
<a name="l01781"></a>01781 
<a name="l01782"></a>01782 <span class="preprocessor">#define OSPF_SNMP_METRIC_VALUE 1</span>
<a name="l01783"></a>01783 <span class="preprocessor"></span>
<a name="l01784"></a>01784 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *
<a name="l01785"></a>01785 ospfIfMetricLookup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length,
<a name="l01786"></a>01786             <span class="keyword">struct</span> in_addr *ifaddr, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *ifindex, <span class="keywordtype">int</span> exact)
<a name="l01787"></a>01787 {
<a name="l01788"></a>01788   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len;
<a name="l01789"></a>01789   <span class="keywordtype">int</span> ifaddr_next = 0;
<a name="l01790"></a>01790   <span class="keywordtype">int</span> ifindex_next = 0;
<a name="l01791"></a>01791   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01792"></a>01792   oid *offset;
<a name="l01793"></a>01793   <span class="keywordtype">int</span> <a class="code" href="structmetric.html">metric</a>;
<a name="l01794"></a>01794 
<a name="l01795"></a>01795   <span class="keywordflow">if</span> (exact)
<a name="l01796"></a>01796     {
<a name="l01797"></a>01797       <span class="keywordflow">if</span> (*length != v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1 + 1)
<a name="l01798"></a>01798     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01799"></a>01799 
<a name="l01800"></a>01800       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, ifaddr);
<a name="l01801"></a>01801       *ifindex = name[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>];
<a name="l01802"></a>01802       metric = name[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1];
<a name="l01803"></a>01803 
<a name="l01804"></a>01804       <span class="keywordflow">if</span> (metric != OSPF_SNMP_METRIC_VALUE)
<a name="l01805"></a>01805     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01806"></a>01806 
<a name="l01807"></a>01807       <span class="keywordflow">return</span> ospf_snmp_if_lookup (ifaddr, ifindex);
<a name="l01808"></a>01808     }
<a name="l01809"></a>01809   <span class="keywordflow">else</span>
<a name="l01810"></a>01810     {
<a name="l01811"></a>01811       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l01812"></a>01812       <span class="keywordflow">if</span> (len &gt;= <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l01813"></a>01813     len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01814"></a>01814       <span class="keywordflow">else</span>
<a name="l01815"></a>01815     ifaddr_next = 1;
<a name="l01816"></a>01816 
<a name="l01817"></a>01817       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, len, ifaddr);
<a name="l01818"></a>01818 
<a name="l01819"></a>01819       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> - <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01820"></a>01820       <span class="keywordflow">if</span> (len &gt;= 1)
<a name="l01821"></a>01821     len = 1;
<a name="l01822"></a>01822       <span class="keywordflow">else</span>
<a name="l01823"></a>01823     ifindex_next = 1;
<a name="l01824"></a>01824 
<a name="l01825"></a>01825       <span class="keywordflow">if</span> (len == 1)
<a name="l01826"></a>01826     *ifindex = name[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>];
<a name="l01827"></a>01827 
<a name="l01828"></a>01828       oi = ospf_snmp_if_lookup_next (ifaddr, ifindex, ifaddr_next,
<a name="l01829"></a>01829                       ifindex_next);
<a name="l01830"></a>01830       <span class="keywordflow">if</span> (oi)
<a name="l01831"></a>01831     {
<a name="l01832"></a>01832       *length = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1 + 1;
<a name="l01833"></a>01833       offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l01834"></a>01834       <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (offset, ifaddr, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l01835"></a>01835       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l01836"></a>01836       *offset = *ifindex;
<a name="l01837"></a>01837       offset++;
<a name="l01838"></a>01838       *offset = OSPF_SNMP_METRIC_VALUE;
<a name="l01839"></a>01839       <span class="keywordflow">return</span> oi;
<a name="l01840"></a>01840     }
<a name="l01841"></a>01841     }
<a name="l01842"></a>01842   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01843"></a>01843 }
<a name="l01844"></a>01844 
<a name="l01845"></a>01845 <span class="keyword">static</span> u_char *
<a name="l01846"></a>01846 ospfIfMetricEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l01847"></a>01847            <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l01848"></a>01848 {
<a name="l01849"></a>01849   <span class="comment">/* Currently we support metric 1 only. */</span>
<a name="l01850"></a>01850   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
<a name="l01851"></a>01851   <span class="keyword">struct </span>in_addr ifaddr;
<a name="l01852"></a>01852   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l01853"></a>01853   <span class="keyword">struct </span>ospf *ospf;
<a name="l01854"></a>01854 
<a name="l01855"></a>01855   ifindex = 0;
<a name="l01856"></a>01856   memset (&amp;ifaddr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l01857"></a>01857 
<a name="l01858"></a>01858   <span class="comment">/* Check OSPF instance. */</span>
<a name="l01859"></a>01859   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l01860"></a>01860   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01861"></a>01861     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01862"></a>01862 
<a name="l01863"></a>01863   oi = ospfIfMetricLookup (v, name, length, &amp;ifaddr, &amp;ifindex, exact);
<a name="l01864"></a>01864   <span class="keywordflow">if</span> (oi == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01865"></a>01865     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01866"></a>01866 
<a name="l01867"></a>01867   <span class="comment">/* Return the current value of the variable */</span>
<a name="l01868"></a>01868   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l01869"></a>01869     {
<a name="l01870"></a>01870     <span class="keywordflow">case</span> OSPFIFMETRICIPADDRESS:
<a name="l01871"></a>01871       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (ifaddr);
<a name="l01872"></a>01872       <span class="keywordflow">break</span>;
<a name="l01873"></a>01873     <span class="keywordflow">case</span> OSPFIFMETRICADDRESSLESSIF:
<a name="l01874"></a>01874       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (ifindex);
<a name="l01875"></a>01875       <span class="keywordflow">break</span>;
<a name="l01876"></a>01876     <span class="keywordflow">case</span> OSPFIFMETRICTOS:
<a name="l01877"></a>01877       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l01878"></a>01878       <span class="keywordflow">break</span>;
<a name="l01879"></a>01879     <span class="keywordflow">case</span> OSPFIFMETRICVALUE:
<a name="l01880"></a>01880       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (OSPF_SNMP_METRIC_VALUE);
<a name="l01881"></a>01881       <span class="keywordflow">break</span>;
<a name="l01882"></a>01882     <span class="keywordflow">case</span> OSPFIFMETRICSTATUS:
<a name="l01883"></a>01883       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (1);
<a name="l01884"></a>01884       <span class="keywordflow">break</span>;
<a name="l01885"></a>01885     <span class="keywordflow">default</span>:
<a name="l01886"></a>01886       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01887"></a>01887       <span class="keywordflow">break</span>;
<a name="l01888"></a>01888     }
<a name="l01889"></a>01889   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01890"></a>01890 }
<a name="l01891"></a>01891 
<a name="l01892"></a>01892 <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *ospf_snmp_vl_table;
<a name="l01893"></a>01893 
<a name="l01894"></a>01894 <span class="keywordtype">void</span>
<a name="l01895"></a>01895 <a class="code" href="ospf__snmp_8h.html#aa8d32930417e294b53dccf3fa7fbfaa8">ospf_snmp_vl_add</a> (<span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)
<a name="l01896"></a>01896 {
<a name="l01897"></a>01897   <span class="keyword">struct </span><a class="code" href="structprefix__ls.html">prefix_ls</a> <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>;
<a name="l01898"></a>01898   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l01899"></a>01899 
<a name="l01900"></a>01900   memset (&amp;<a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ls.html">prefix_ls</a>));
<a name="l01901"></a>01901   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.family = 0;
<a name="l01902"></a>01902   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.prefixlen = 64;
<a name="l01903"></a>01903   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.id = vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>;
<a name="l01904"></a>01904   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.adv_router = vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>;
<a name="l01905"></a>01905 
<a name="l01906"></a>01906   rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (ospf_snmp_vl_table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>);
<a name="l01907"></a>01907   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = vl_data;
<a name="l01908"></a>01908 }
<a name="l01909"></a>01909 
<a name="l01910"></a>01910 <span class="keywordtype">void</span>
<a name="l01911"></a>01911 <a class="code" href="ospf__snmp_8h.html#ab3ed2f8865147118d24a3b4596121a10">ospf_snmp_vl_delete</a> (<span class="keyword">struct</span> <a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data)
<a name="l01912"></a>01912 {
<a name="l01913"></a>01913   <span class="keyword">struct </span><a class="code" href="structprefix__ls.html">prefix_ls</a> <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>;
<a name="l01914"></a>01914   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l01915"></a>01915 
<a name="l01916"></a>01916   memset (&amp;<a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ls.html">prefix_ls</a>));
<a name="l01917"></a>01917   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.family = 0;
<a name="l01918"></a>01918   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.prefixlen = 64;
<a name="l01919"></a>01919   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.id = vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>;
<a name="l01920"></a>01920   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.adv_router = vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>;
<a name="l01921"></a>01921 
<a name="l01922"></a>01922   rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (ospf_snmp_vl_table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>);
<a name="l01923"></a>01923   <span class="keywordflow">if</span> (! rn)
<a name="l01924"></a>01924     <span class="keywordflow">return</span>;
<a name="l01925"></a>01925   rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01926"></a>01926   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l01927"></a>01927   <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l01928"></a>01928 }
<a name="l01929"></a>01929 
<a name="l01930"></a>01930 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *
<a name="l01931"></a>01931 ospf_snmp_vl_lookup (<span class="keyword">struct</span> in_addr *area_id, <span class="keyword">struct</span> in_addr *neighbor)
<a name="l01932"></a>01932 {
<a name="l01933"></a>01933   <span class="keyword">struct </span><a class="code" href="structprefix__ls.html">prefix_ls</a> <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>;
<a name="l01934"></a>01934   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l01935"></a>01935   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l01936"></a>01936 
<a name="l01937"></a>01937   memset (&amp;<a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ls.html">prefix_ls</a>));
<a name="l01938"></a>01938   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.family = 0;
<a name="l01939"></a>01939   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.prefixlen = 64;
<a name="l01940"></a>01940   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.id = *area_id;
<a name="l01941"></a>01941   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.adv_router = *neighbor;
<a name="l01942"></a>01942 
<a name="l01943"></a>01943   rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (ospf_snmp_vl_table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>);
<a name="l01944"></a>01944   <span class="keywordflow">if</span> (rn)
<a name="l01945"></a>01945     {
<a name="l01946"></a>01946       vl_data = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l01947"></a>01947       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l01948"></a>01948       <span class="keywordflow">return</span> vl_data;
<a name="l01949"></a>01949     }
<a name="l01950"></a>01950   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01951"></a>01951 }
<a name="l01952"></a>01952 
<a name="l01953"></a>01953 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *
<a name="l01954"></a>01954 ospf_snmp_vl_lookup_next (<span class="keyword">struct</span> in_addr *area_id, <span class="keyword">struct</span> in_addr *neighbor,
<a name="l01955"></a>01955               <span class="keywordtype">int</span> first)
<a name="l01956"></a>01956 {
<a name="l01957"></a>01957   <span class="keyword">struct </span><a class="code" href="structprefix__ls.html">prefix_ls</a> <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>;
<a name="l01958"></a>01958   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l01959"></a>01959   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l01960"></a>01960 
<a name="l01961"></a>01961   memset (&amp;<a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ls.html">prefix_ls</a>));
<a name="l01962"></a>01962   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.family = 0;
<a name="l01963"></a>01963   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.prefixlen = 64;
<a name="l01964"></a>01964   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.id = *area_id;
<a name="l01965"></a>01965   <a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>.adv_router = *neighbor;
<a name="l01966"></a>01966 
<a name="l01967"></a>01967   <span class="keywordflow">if</span> (first)
<a name="l01968"></a>01968     rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (ospf_snmp_vl_table);
<a name="l01969"></a>01969   <span class="keywordflow">else</span>
<a name="l01970"></a>01970     {
<a name="l01971"></a>01971       rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (ospf_snmp_vl_table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="prefix_8h.html#a0ddcde6df622c79e6fb1279ca2b72da6">lp</a>);
<a name="l01972"></a>01972       rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn);
<a name="l01973"></a>01973     }
<a name="l01974"></a>01974 
<a name="l01975"></a>01975   <span class="keywordflow">for</span> (; rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l01976"></a>01976     <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l01977"></a>01977       <span class="keywordflow">break</span>;
<a name="l01978"></a>01978 
<a name="l01979"></a>01979   <span class="keywordflow">if</span> (rn &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
<a name="l01980"></a>01980     {
<a name="l01981"></a>01981       vl_data = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
<a name="l01982"></a>01982       *area_id = vl_data-&gt;<a class="code" href="structospf__vl__data.html#a7d89fa86fa918d94b7b4474f93569cd9">vl_area_id</a>;
<a name="l01983"></a>01983       *neighbor = vl_data-&gt;<a class="code" href="structospf__vl__data.html#a43a75c2c446640e2b6b127c6aa390f75">vl_peer</a>;
<a name="l01984"></a>01984       <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l01985"></a>01985       <span class="keywordflow">return</span> vl_data;
<a name="l01986"></a>01986     }
<a name="l01987"></a>01987   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01988"></a>01988 }
<a name="l01989"></a>01989 
<a name="l01990"></a>01990 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *
<a name="l01991"></a>01991 ospfVirtIfLookup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length,
<a name="l01992"></a>01992           <span class="keyword">struct</span> in_addr *area_id, <span class="keyword">struct</span> in_addr *neighbor, <span class="keywordtype">int</span> exact)
<a name="l01993"></a>01993 {
<a name="l01994"></a>01994   <span class="keywordtype">int</span> first;
<a name="l01995"></a>01995   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len;
<a name="l01996"></a>01996   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l01997"></a>01997 
<a name="l01998"></a>01998   <span class="keywordflow">if</span> (exact)
<a name="l01999"></a>01999     {
<a name="l02000"></a>02000       <span class="keywordflow">if</span> (*length != v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l02001"></a>02001     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02002"></a>02002 
<a name="l02003"></a>02003       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, area_id);
<a name="l02004"></a>02004       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, neighbor);
<a name="l02005"></a>02005 
<a name="l02006"></a>02006       <span class="keywordflow">return</span> ospf_snmp_vl_lookup (area_id, neighbor);
<a name="l02007"></a>02007     }
<a name="l02008"></a>02008   <span class="keywordflow">else</span>
<a name="l02009"></a>02009     {
<a name="l02010"></a>02010       first = 0;
<a name="l02011"></a>02011 
<a name="l02012"></a>02012       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l02013"></a>02013       <span class="keywordflow">if</span> (len &lt;= 0)
<a name="l02014"></a>02014     first = 1;
<a name="l02015"></a>02015       <span class="keywordflow">if</span> (len &gt; <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l02016"></a>02016     len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02017"></a>02017       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, len, area_id);
<a name="l02018"></a>02018 
<a name="l02019"></a>02019       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> - <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02020"></a>02020       <span class="keywordflow">if</span> (len &gt; <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l02021"></a>02021     len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02022"></a>02022       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, len, neighbor);
<a name="l02023"></a>02023 
<a name="l02024"></a>02024       vl_data = ospf_snmp_vl_lookup_next (area_id, neighbor, first);
<a name="l02025"></a>02025 
<a name="l02026"></a>02026       <span class="keywordflow">if</span> (vl_data)
<a name="l02027"></a>02027     {
<a name="l02028"></a>02028       *length = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02029"></a>02029       <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, area_id, IN_ADDR_SIZE);
<a name="l02030"></a>02030       <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + IN_ADDR_SIZE, neighbor,
<a name="l02031"></a>02031              IN_ADDR_SIZE);
<a name="l02032"></a>02032       <span class="keywordflow">return</span> vl_data;
<a name="l02033"></a>02033     }
<a name="l02034"></a>02034     }
<a name="l02035"></a>02035   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02036"></a>02036 }
<a name="l02037"></a>02037 
<a name="l02038"></a>02038 <span class="keyword">static</span> u_char *
<a name="l02039"></a>02039 ospfVirtIfEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l02040"></a>02040          <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l02041"></a>02041 {
<a name="l02042"></a>02042   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l02043"></a>02043   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02044"></a>02044   <span class="keyword">struct </span>in_addr area_id;
<a name="l02045"></a>02045   <span class="keyword">struct </span>in_addr neighbor;
<a name="l02046"></a>02046 
<a name="l02047"></a>02047   memset (&amp;area_id, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l02048"></a>02048   memset (&amp;neighbor, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l02049"></a>02049 
<a name="l02050"></a>02050   vl_data = ospfVirtIfLookup (v, name, length, &amp;area_id, &amp;neighbor, exact);
<a name="l02051"></a>02051   <span class="keywordflow">if</span> (! vl_data)
<a name="l02052"></a>02052     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02053"></a>02053   oi = vl_data-&gt;<a class="code" href="structospf__vl__data.html#ab24915d7431d8322eaf5e8ed420d9b20">vl_oi</a>;
<a name="l02054"></a>02054   <span class="keywordflow">if</span> (! oi)
<a name="l02055"></a>02055     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02056"></a>02056   
<a name="l02057"></a>02057   <span class="comment">/* Return the current value of the variable */</span>
<a name="l02058"></a>02058   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l02059"></a>02059     {
<a name="l02060"></a>02060     <span class="keywordflow">case</span> OSPFVIRTIFAREAID:
<a name="l02061"></a>02061       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (area_id);
<a name="l02062"></a>02062       <span class="keywordflow">break</span>;
<a name="l02063"></a>02063     <span class="keywordflow">case</span> OSPFVIRTIFNEIGHBOR:
<a name="l02064"></a>02064       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (neighbor);
<a name="l02065"></a>02065       <span class="keywordflow">break</span>;
<a name="l02066"></a>02066     <span class="keywordflow">case</span> OSPFVIRTIFTRANSITDELAY:
<a name="l02067"></a>02067       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, transmit_delay));
<a name="l02068"></a>02068       <span class="keywordflow">break</span>;
<a name="l02069"></a>02069     <span class="keywordflow">case</span> OSPFVIRTIFRETRANSINTERVAL:
<a name="l02070"></a>02070       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, retransmit_interval));
<a name="l02071"></a>02071       <span class="keywordflow">break</span>;
<a name="l02072"></a>02072     <span class="keywordflow">case</span> OSPFVIRTIFHELLOINTERVAL:
<a name="l02073"></a>02073       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, v_hello));
<a name="l02074"></a>02074       <span class="keywordflow">break</span>;
<a name="l02075"></a>02075     <span class="keywordflow">case</span> OSPFVIRTIFRTRDEADINTERVAL:
<a name="l02076"></a>02076       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, v_wait));
<a name="l02077"></a>02077       <span class="keywordflow">break</span>;
<a name="l02078"></a>02078     <span class="keywordflow">case</span> OSPFVIRTIFSTATE:
<a name="l02079"></a>02079       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a>);
<a name="l02080"></a>02080       <span class="keywordflow">break</span>;
<a name="l02081"></a>02081     <span class="keywordflow">case</span> OSPFVIRTIFEVENTS:
<a name="l02082"></a>02082       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (oi-&gt;<a class="code" href="structospf__interface.html#a00f77cdcfa5c89c1b02675c956e582f5">state_change</a>);
<a name="l02083"></a>02083       <span class="keywordflow">break</span>;
<a name="l02084"></a>02084     <span class="keywordflow">case</span> OSPFVIRTIFAUTHKEY:
<a name="l02085"></a>02085       *var_len = 0;
<a name="l02086"></a>02086       <span class="keywordflow">return</span> (u_char *) <a class="code" href="ospf__interface_8h.html#a3082a40385804021e56001ea2bc5bdb1">OSPF_IF_PARAM</a> (oi, auth_simple);
<a name="l02087"></a>02087       <span class="keywordflow">break</span>;
<a name="l02088"></a>02088     <span class="keywordflow">case</span> OSPFVIRTIFSTATUS:
<a name="l02089"></a>02089       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#acd99cb4c6b560616ca4cec0043d7aa16">SNMP_VALID</a>);
<a name="l02090"></a>02090       <span class="keywordflow">break</span>;
<a name="l02091"></a>02091     <span class="keywordflow">case</span> OSPFVIRTIFAUTHTYPE:
<a name="l02092"></a>02092       <span class="keywordflow">if</span> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>)
<a name="l02093"></a>02093     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (oi-&gt;<a class="code" href="structospf__interface.html#a7a0df59739f1ffa31ab75ff4b9bbcd95">area</a>-&gt;<a class="code" href="structospf__area.html#af738a86bf7f84034a1e4d1b288a70b22">auth_type</a>);
<a name="l02094"></a>02094       <span class="keywordflow">else</span>
<a name="l02095"></a>02095     <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (0);
<a name="l02096"></a>02096       <span class="keywordflow">break</span>;
<a name="l02097"></a>02097     <span class="keywordflow">default</span>:
<a name="l02098"></a>02098       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02099"></a>02099       <span class="keywordflow">break</span>;
<a name="l02100"></a>02100     }
<a name="l02101"></a>02101   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02102"></a>02102 }
<a name="l02103"></a>02103 
<a name="l02104"></a>02104 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *
<a name="l02105"></a>02105 ospf_snmp_nbr_lookup (<span class="keyword">struct</span> ospf *ospf, <span class="keyword">struct</span> in_addr *nbr_addr,
<a name="l02106"></a>02106               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *ifindex)
<a name="l02107"></a>02107 {
<a name="l02108"></a>02108   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l02109"></a>02109   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02110"></a>02110   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l02111"></a>02111   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l02112"></a>02112 
<a name="l02113"></a>02113   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, nnode, oi))
<a name="l02114"></a>02114     {
<a name="l02115"></a>02115       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l02116"></a>02116     <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l02117"></a>02117         &amp;&amp; nbr != oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>
<a name="l02118"></a>02118 <span class="comment">/* If EXACT match is needed, provide ALL entry found</span>
<a name="l02119"></a>02119 <span class="comment">        &amp;&amp; nbr-&gt;state != NSM_Down</span>
<a name="l02120"></a>02120 <span class="comment"> */</span>
<a name="l02121"></a>02121         &amp;&amp; nbr-&gt;<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>.s_addr != 0)
<a name="l02122"></a>02122       {
<a name="l02123"></a>02123         <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nbr-&gt;<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>, nbr_addr))
<a name="l02124"></a>02124           {
<a name="l02125"></a>02125         <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
<a name="l02126"></a>02126         <span class="keywordflow">return</span> nbr;
<a name="l02127"></a>02127           }
<a name="l02128"></a>02128       }
<a name="l02129"></a>02129     }
<a name="l02130"></a>02130   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02131"></a>02131 }
<a name="l02132"></a>02132 
<a name="l02133"></a>02133 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *
<a name="l02134"></a>02134 ospf_snmp_nbr_lookup_next (<span class="keyword">struct</span> in_addr *nbr_addr, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *ifindex,
<a name="l02135"></a>02135                <span class="keywordtype">int</span> first)
<a name="l02136"></a>02136 {
<a name="l02137"></a>02137   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *nn;
<a name="l02138"></a>02138   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02139"></a>02139   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l02140"></a>02140   <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
<a name="l02141"></a>02141   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *<a class="code" href="bgp__aspath_8c.html#a2d017cd3beb218080a7988e2deed2a11">min</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02142"></a>02142   <span class="keyword">struct </span>ospf *ospf = ospf;
<a name="l02143"></a>02143 
<a name="l02144"></a>02144   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l02145"></a>02145 
<a name="l02146"></a>02146   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, nn, oi))
<a name="l02147"></a>02147     {
<a name="l02148"></a>02148       <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (oi-&gt;<a class="code" href="structospf__interface.html#aeb2e2f33698c499957bb55bfc80835d9">nbrs</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
<a name="l02149"></a>02149     <span class="keywordflow">if</span> ((nbr = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l02150"></a>02150         &amp;&amp; nbr != oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>
<a name="l02151"></a>02151         &amp;&amp; nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a> != <a class="code" href="ospf__nsm_8h.html#a4bdf4e7631050dcf28cbe7959f0675ce">NSM_Down</a>
<a name="l02152"></a>02152         &amp;&amp; nbr-&gt;<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>.s_addr != 0)
<a name="l02153"></a>02153       {
<a name="l02154"></a>02154         <span class="keywordflow">if</span> (first)
<a name="l02155"></a>02155           {
<a name="l02156"></a>02156         <span class="keywordflow">if</span> (! min)
<a name="l02157"></a>02157           min = nbr;
<a name="l02158"></a>02158         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ntohl (nbr-&gt;<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>.s_addr) &lt; ntohl (min-&gt;<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>.s_addr))
<a name="l02159"></a>02159           min = nbr;
<a name="l02160"></a>02160           }
<a name="l02161"></a>02161         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ntohl (nbr-&gt;<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>.s_addr) &gt; ntohl (nbr_addr-&gt;s_addr))
<a name="l02162"></a>02162           {
<a name="l02163"></a>02163         <span class="keywordflow">if</span> (! min)
<a name="l02164"></a>02164           min = nbr;
<a name="l02165"></a>02165         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ntohl (nbr-&gt;<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>.s_addr) &lt; ntohl (min-&gt;<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>.s_addr))
<a name="l02166"></a>02166           min = nbr;
<a name="l02167"></a>02167           }
<a name="l02168"></a>02168       }
<a name="l02169"></a>02169     }
<a name="l02170"></a>02170   <span class="keywordflow">if</span> (min)
<a name="l02171"></a>02171     {
<a name="l02172"></a>02172       *nbr_addr = min-&gt;<a class="code" href="structospf__neighbor.html#a959c002cab5b6328120fcac7ba25fbee">src</a>;
<a name="l02173"></a>02173       *ifindex = 0;
<a name="l02174"></a>02174       <span class="keywordflow">return</span> <a class="code" href="bgp__aspath_8c.html#a2d017cd3beb218080a7988e2deed2a11">min</a>;
<a name="l02175"></a>02175     }
<a name="l02176"></a>02176   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02177"></a>02177 }
<a name="l02178"></a>02178 
<a name="l02179"></a>02179 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *
<a name="l02180"></a>02180 ospfNbrLookup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length,
<a name="l02181"></a>02181            <span class="keyword">struct</span> in_addr *nbr_addr, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *ifindex, <span class="keywordtype">int</span> exact)
<a name="l02182"></a>02182 {
<a name="l02183"></a>02183   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len;
<a name="l02184"></a>02184   <span class="keywordtype">int</span> first;
<a name="l02185"></a>02185   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l02186"></a>02186   <span class="keyword">struct </span>ospf *ospf;
<a name="l02187"></a>02187 
<a name="l02188"></a>02188   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l02189"></a>02189 
<a name="l02190"></a>02190   <span class="keywordflow">if</span> (! ospf)
<a name="l02191"></a>02191     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02192"></a>02192 
<a name="l02193"></a>02193   <span class="keywordflow">if</span> (exact)
<a name="l02194"></a>02194     {
<a name="l02195"></a>02195       <span class="keywordflow">if</span> (*length != v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1)
<a name="l02196"></a>02196     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02197"></a>02197 
<a name="l02198"></a>02198       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, nbr_addr);
<a name="l02199"></a>02199       *ifindex = name[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>];
<a name="l02200"></a>02200 
<a name="l02201"></a>02201       <span class="keywordflow">return</span> ospf_snmp_nbr_lookup (ospf, nbr_addr, ifindex);
<a name="l02202"></a>02202     }
<a name="l02203"></a>02203   <span class="keywordflow">else</span>
<a name="l02204"></a>02204     {
<a name="l02205"></a>02205       first = 0;
<a name="l02206"></a>02206       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l02207"></a>02207 
<a name="l02208"></a>02208       <span class="keywordflow">if</span> (len &lt;= 0)
<a name="l02209"></a>02209     first = 1;
<a name="l02210"></a>02210 
<a name="l02211"></a>02211       <span class="keywordflow">if</span> (len &gt; <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l02212"></a>02212     len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02213"></a>02213 
<a name="l02214"></a>02214       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, len, nbr_addr);
<a name="l02215"></a>02215 
<a name="l02216"></a>02216       len = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> - <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02217"></a>02217       <span class="keywordflow">if</span> (len &gt;= 1)
<a name="l02218"></a>02218     *ifindex = name[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>];
<a name="l02219"></a>02219       
<a name="l02220"></a>02220       nbr = ospf_snmp_nbr_lookup_next (nbr_addr, ifindex, first);
<a name="l02221"></a>02221 
<a name="l02222"></a>02222       <span class="keywordflow">if</span> (nbr)
<a name="l02223"></a>02223     {
<a name="l02224"></a>02224       *length = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1;
<a name="l02225"></a>02225       <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>, nbr_addr, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l02226"></a>02226       name[v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>] = *ifindex;
<a name="l02227"></a>02227       <span class="keywordflow">return</span> nbr;
<a name="l02228"></a>02228     }
<a name="l02229"></a>02229     }
<a name="l02230"></a>02230   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02231"></a>02231 }
<a name="l02232"></a>02232 
<a name="l02233"></a>02233 <span class="comment">/* map internal quagga neighbor states to official MIB values:</span>
<a name="l02234"></a>02234 <span class="comment"></span>
<a name="l02235"></a>02235 <span class="comment">ospfNbrState OBJECT-TYPE</span>
<a name="l02236"></a>02236 <span class="comment">        SYNTAX   INTEGER    {</span>
<a name="l02237"></a>02237 <span class="comment">                    down (1),</span>
<a name="l02238"></a>02238 <span class="comment">                    attempt (2),</span>
<a name="l02239"></a>02239 <span class="comment">                    init (3),</span>
<a name="l02240"></a>02240 <span class="comment">                    twoWay (4),</span>
<a name="l02241"></a>02241 <span class="comment">                    exchangeStart (5),</span>
<a name="l02242"></a>02242 <span class="comment">                    exchange (6),</span>
<a name="l02243"></a>02243 <span class="comment">                    loading (7),</span>
<a name="l02244"></a>02244 <span class="comment">                    full (8)</span>
<a name="l02245"></a>02245 <span class="comment">                  }</span>
<a name="l02246"></a>02246 <span class="comment">*/</span>
<a name="l02247"></a>02247 <span class="keyword">static</span> int32_t
<a name="l02248"></a>02248 ospf_snmp_neighbor_state(u_char nst)
<a name="l02249"></a>02249 {
<a name="l02250"></a>02250   <span class="keywordflow">switch</span> (nst)
<a name="l02251"></a>02251     {
<a name="l02252"></a>02252     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#a8151a9925f00bd1d3b3362a7557bab67">NSM_Attempt</a>:
<a name="l02253"></a>02253       <span class="keywordflow">return</span> 2;
<a name="l02254"></a>02254     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#a42c71b8079e65eca44823c00cf93e477">NSM_Init</a>:
<a name="l02255"></a>02255       <span class="keywordflow">return</span> 3;
<a name="l02256"></a>02256     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#a8a9d14bfc7d840e04eff13df3337fa24">NSM_TwoWay</a>:
<a name="l02257"></a>02257       <span class="keywordflow">return</span> 4;
<a name="l02258"></a>02258     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#aa02b0a534709b4557e46db7b31bbedd7">NSM_ExStart</a>:
<a name="l02259"></a>02259       <span class="keywordflow">return</span> 5;
<a name="l02260"></a>02260     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#a2bac91ff388bd6722ce1cdd682184e83">NSM_Exchange</a>:
<a name="l02261"></a>02261       <span class="keywordflow">return</span> 6;
<a name="l02262"></a>02262     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#ab83ae0b2039dc911b4752c05da97bc8b">NSM_Loading</a>:
<a name="l02263"></a>02263       <span class="keywordflow">return</span> 7;
<a name="l02264"></a>02264     <span class="keywordflow">case</span> <a class="code" href="ospf__nsm_8h.html#aae3fb624a87adcc8ae4d12d694fc0929">NSM_Full</a>:
<a name="l02265"></a>02265       <span class="keywordflow">return</span> 8;
<a name="l02266"></a>02266     <span class="keywordflow">default</span>:
<a name="l02267"></a>02267       <span class="keywordflow">return</span> 1; <span class="comment">/* down */</span>
<a name="l02268"></a>02268     }
<a name="l02269"></a>02269 }
<a name="l02270"></a>02270 
<a name="l02271"></a>02271 <span class="keyword">static</span> u_char *
<a name="l02272"></a>02272 ospfNbrEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l02273"></a>02273           <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l02274"></a>02274 {
<a name="l02275"></a>02275   <span class="keyword">struct </span>in_addr nbr_addr;
<a name="l02276"></a>02276   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ifindex;
<a name="l02277"></a>02277   <span class="keyword">struct </span><a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *nbr;
<a name="l02278"></a>02278   <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
<a name="l02279"></a>02279 
<a name="l02280"></a>02280   memset (&amp;nbr_addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l02281"></a>02281   ifindex = 0;
<a name="l02282"></a>02282   
<a name="l02283"></a>02283   nbr = ospfNbrLookup (v, name, length, &amp;nbr_addr, &amp;ifindex, exact);
<a name="l02284"></a>02284   <span class="keywordflow">if</span> (! nbr)
<a name="l02285"></a>02285     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02286"></a>02286   oi = nbr-&gt;<a class="code" href="structospf__neighbor.html#a24eabbd825aa53aba5343ae2d5ea7233">oi</a>;
<a name="l02287"></a>02287   <span class="keywordflow">if</span> (! oi)
<a name="l02288"></a>02288     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02289"></a>02289 
<a name="l02290"></a>02290   <span class="comment">/* Return the current value of the variable */</span>
<a name="l02291"></a>02291   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l02292"></a>02292     {
<a name="l02293"></a>02293     <span class="keywordflow">case</span> OSPFNBRIPADDR:
<a name="l02294"></a>02294       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (nbr_addr);
<a name="l02295"></a>02295       <span class="keywordflow">break</span>;
<a name="l02296"></a>02296     <span class="keywordflow">case</span> OSPFNBRADDRESSLESSINDEX:
<a name="l02297"></a>02297       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (ifindex);
<a name="l02298"></a>02298       <span class="keywordflow">break</span>;
<a name="l02299"></a>02299     <span class="keywordflow">case</span> OSPFNBRRTRID:
<a name="l02300"></a>02300       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a2257238c9040a76e9de9a78cf95bae0d">router_id</a>);
<a name="l02301"></a>02301       <span class="keywordflow">break</span>;
<a name="l02302"></a>02302     <span class="keywordflow">case</span> OSPFNBROPTIONS:
<a name="l02303"></a>02303       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (oi-&gt;<a class="code" href="structospf__interface.html#a6450831debea20d192ad89e650d0edab">nbr_self</a>-&gt;<a class="code" href="structospf__neighbor.html#aefbbf7455ee0d73ae283d9ab8edab4f6">options</a>);
<a name="l02304"></a>02304       <span class="keywordflow">break</span>;
<a name="l02305"></a>02305     <span class="keywordflow">case</span> OSPFNBRPRIORITY:
<a name="l02306"></a>02306       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#ade51baa719592185df1db62d13e9cf63">priority</a>);
<a name="l02307"></a>02307       <span class="keywordflow">break</span>;
<a name="l02308"></a>02308     <span class="keywordflow">case</span> OSPFNBRSTATE:
<a name="l02309"></a>02309       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (ospf_snmp_neighbor_state(nbr-&gt;<a class="code" href="structospf__neighbor.html#a07061a68f4e15effd12479e1047120c7">state</a>));
<a name="l02310"></a>02310       <span class="keywordflow">break</span>;
<a name="l02311"></a>02311     <span class="keywordflow">case</span> OSPFNBREVENTS:
<a name="l02312"></a>02312       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (nbr-&gt;<a class="code" href="structospf__neighbor.html#a177ea967e71e4f14cc26a019e06ea533">state_change</a>);
<a name="l02313"></a>02313       <span class="keywordflow">break</span>;
<a name="l02314"></a>02314     <span class="keywordflow">case</span> OSPFNBRLSRETRANSQLEN:
<a name="l02315"></a>02315       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__flood_8c.html#a9fc5f626cdb9afa119113fb7a8b9daf2">ospf_ls_retransmit_count</a> (nbr));
<a name="l02316"></a>02316       <span class="keywordflow">break</span>;
<a name="l02317"></a>02317     <span class="keywordflow">case</span> OSPFNBMANBRSTATUS:
<a name="l02318"></a>02318       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#acd99cb4c6b560616ca4cec0043d7aa16">SNMP_VALID</a>);
<a name="l02319"></a>02319       <span class="keywordflow">break</span>;
<a name="l02320"></a>02320     <span class="keywordflow">case</span> OSPFNBMANBRPERMANENCE:
<a name="l02321"></a>02321       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (2);
<a name="l02322"></a>02322       <span class="keywordflow">break</span>;
<a name="l02323"></a>02323     <span class="keywordflow">case</span> OSPFNBRHELLOSUPPRESSED:
<a name="l02324"></a>02324       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="smux_8h.html#a16a2f057eddb78f6b796be1f926406db">SNMP_FALSE</a>);
<a name="l02325"></a>02325       <span class="keywordflow">break</span>;
<a name="l02326"></a>02326     <span class="keywordflow">default</span>:
<a name="l02327"></a>02327       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02328"></a>02328       <span class="keywordflow">break</span>;
<a name="l02329"></a>02329     }
<a name="l02330"></a>02330   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02331"></a>02331 }
<a name="l02332"></a>02332 
<a name="l02333"></a>02333 <span class="keyword">static</span> u_char *
<a name="l02334"></a>02334 ospfVirtNbrEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l02335"></a>02335           <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l02336"></a>02336 {
<a name="l02337"></a>02337   <span class="keyword">struct </span><a class="code" href="structospf__vl__data.html">ospf_vl_data</a> *vl_data;
<a name="l02338"></a>02338   <span class="keyword">struct </span>in_addr area_id;
<a name="l02339"></a>02339   <span class="keyword">struct </span>in_addr neighbor;
<a name="l02340"></a>02340   <span class="keyword">struct </span>ospf *ospf;
<a name="l02341"></a>02341 
<a name="l02342"></a>02342   memset (&amp;area_id, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l02343"></a>02343   memset (&amp;neighbor, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l02344"></a>02344 
<a name="l02345"></a>02345   <span class="comment">/* Check OSPF instance. */</span>
<a name="l02346"></a>02346   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l02347"></a>02347   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02348"></a>02348     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02349"></a>02349 
<a name="l02350"></a>02350   vl_data = ospfVirtIfLookup (v, name, length, &amp;area_id, &amp;neighbor, exact);
<a name="l02351"></a>02351   <span class="keywordflow">if</span> (! vl_data)
<a name="l02352"></a>02352     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02353"></a>02353 
<a name="l02354"></a>02354   <span class="comment">/* Return the current value of the variable */</span>
<a name="l02355"></a>02355   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l02356"></a>02356     {
<a name="l02357"></a>02357     <span class="keywordflow">case</span> OSPFVIRTNBRAREA:
<a name="l02358"></a>02358       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02359"></a>02359       <span class="keywordflow">break</span>;
<a name="l02360"></a>02360     <span class="keywordflow">case</span> OSPFVIRTNBRRTRID:
<a name="l02361"></a>02361       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02362"></a>02362       <span class="keywordflow">break</span>;
<a name="l02363"></a>02363     <span class="keywordflow">case</span> OSPFVIRTNBRIPADDR:
<a name="l02364"></a>02364       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02365"></a>02365       <span class="keywordflow">break</span>;
<a name="l02366"></a>02366     <span class="keywordflow">case</span> OSPFVIRTNBROPTIONS:
<a name="l02367"></a>02367       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02368"></a>02368       <span class="keywordflow">break</span>;
<a name="l02369"></a>02369     <span class="keywordflow">case</span> OSPFVIRTNBRSTATE:
<a name="l02370"></a>02370       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02371"></a>02371       <span class="keywordflow">break</span>;
<a name="l02372"></a>02372     <span class="keywordflow">case</span> OSPFVIRTNBREVENTS:
<a name="l02373"></a>02373       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02374"></a>02374       <span class="keywordflow">break</span>;
<a name="l02375"></a>02375     <span class="keywordflow">case</span> OSPFVIRTNBRLSRETRANSQLEN:
<a name="l02376"></a>02376       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02377"></a>02377       <span class="keywordflow">break</span>;
<a name="l02378"></a>02378     <span class="keywordflow">case</span> OSPFVIRTNBRHELLOSUPPRESSED:
<a name="l02379"></a>02379       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02380"></a>02380       <span class="keywordflow">break</span>;
<a name="l02381"></a>02381     <span class="keywordflow">default</span>:
<a name="l02382"></a>02382       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02383"></a>02383       <span class="keywordflow">break</span>;
<a name="l02384"></a>02384     }
<a name="l02385"></a>02385   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02386"></a>02386 }
<a name="l02387"></a>02387 
<a name="l02388"></a>02388 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *
<a name="l02389"></a>02389 ospfExtLsdbLookup (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, u_char *type,
<a name="l02390"></a>02390            <span class="keyword">struct</span> in_addr *ls_id, <span class="keyword">struct</span> in_addr *router_id, <span class="keywordtype">int</span> exact)
<a name="l02391"></a>02391 {
<a name="l02392"></a>02392   <span class="keywordtype">int</span> first;
<a name="l02393"></a>02393   oid *offset;
<a name="l02394"></a>02394   <span class="keywordtype">int</span> offsetlen;
<a name="l02395"></a>02395   u_char lsa_type;
<a name="l02396"></a>02396   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len;
<a name="l02397"></a>02397   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02398"></a>02398   <span class="keyword">struct </span>ospf *ospf;
<a name="l02399"></a>02399 
<a name="l02400"></a>02400   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l02401"></a>02401   <span class="keywordflow">if</span> (exact)
<a name="l02402"></a>02402     {
<a name="l02403"></a>02403       <span class="keywordflow">if</span> (*length != v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 1 + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l02404"></a>02404     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02405"></a>02405       
<a name="l02406"></a>02406       offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l02407"></a>02407 
<a name="l02408"></a>02408       <span class="comment">/* Make it sure given value match to type. */</span>
<a name="l02409"></a>02409       lsa_type = *offset;
<a name="l02410"></a>02410       offset++;
<a name="l02411"></a>02411 
<a name="l02412"></a>02412       <span class="keywordflow">if</span> (lsa_type != *type)
<a name="l02413"></a>02413     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02414"></a>02414       
<a name="l02415"></a>02415       <span class="comment">/* LS ID. */</span>
<a name="l02416"></a>02416       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, ls_id);
<a name="l02417"></a>02417       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02418"></a>02418 
<a name="l02419"></a>02419       <span class="comment">/* Router ID. */</span>
<a name="l02420"></a>02420       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>, router_id);
<a name="l02421"></a>02421 
<a name="l02422"></a>02422       <span class="keywordflow">return</span> <a class="code" href="ospf__lsdb_8c.html#a272e7b17825b0ec09ece8ffe848d9a9f">ospf_lsdb_lookup_by_id</a> (ospf-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>, *type, *ls_id, *router_id);
<a name="l02423"></a>02423     }
<a name="l02424"></a>02424   <span class="keywordflow">else</span>
<a name="l02425"></a>02425     {
<a name="l02426"></a>02426       <span class="comment">/* Get variable length. */</span>
<a name="l02427"></a>02427       first = 0;
<a name="l02428"></a>02428       offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l02429"></a>02429       offsetlen = *length - v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l02430"></a>02430 
<a name="l02431"></a>02431       <span class="comment">/* LSA type value. */</span>
<a name="l02432"></a>02432       lsa_type = *offset;
<a name="l02433"></a>02433       offset++;
<a name="l02434"></a>02434       offsetlen--;
<a name="l02435"></a>02435 
<a name="l02436"></a>02436       <span class="keywordflow">if</span> (offsetlen &lt;= 0 || lsa_type &lt; <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>)
<a name="l02437"></a>02437     first = 1;
<a name="l02438"></a>02438 
<a name="l02439"></a>02439       <span class="comment">/* LS ID. */</span>
<a name="l02440"></a>02440       len = offsetlen;
<a name="l02441"></a>02441       <span class="keywordflow">if</span> (len &gt; <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l02442"></a>02442     len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02443"></a>02443 
<a name="l02444"></a>02444       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, len, ls_id);
<a name="l02445"></a>02445 
<a name="l02446"></a>02446       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02447"></a>02447       offsetlen -= <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02448"></a>02448 
<a name="l02449"></a>02449       <span class="comment">/* Router ID. */</span>
<a name="l02450"></a>02450       len = offsetlen;
<a name="l02451"></a>02451       <span class="keywordflow">if</span> (len &gt; <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>)
<a name="l02452"></a>02452     len = <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02453"></a>02453 
<a name="l02454"></a>02454       <a class="code" href="smux_8h.html#a849e1a9c24025af6be77cd10ec1fb798">oid2in_addr</a> (offset, len, router_id);
<a name="l02455"></a>02455 
<a name="l02456"></a>02456       lsa = <a class="code" href="ospf__lsdb_8c.html#aa6f18ce9c9ace58b83cac8295a83f61a">ospf_lsdb_lookup_by_id_next</a> (ospf-&gt;<a class="code" href="structospf.html#a2840075b79d0a04d991596028f6c2660">lsdb</a>, *type, *ls_id,
<a name="l02457"></a>02457                     *router_id, first);
<a name="l02458"></a>02458 
<a name="l02459"></a>02459       <span class="keywordflow">if</span> (lsa)
<a name="l02460"></a>02460     {
<a name="l02461"></a>02461       <span class="comment">/* Fill in length. */</span>
<a name="l02462"></a>02462       *length = v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a> + 1 + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02463"></a>02463 
<a name="l02464"></a>02464       <span class="comment">/* Fill in value. */</span>
<a name="l02465"></a>02465       offset = name + v-&gt;<a class="code" href="structvariable.html#a1f0065dda83058eaf89301e319ec4cf7">namelen</a>;
<a name="l02466"></a>02466 
<a name="l02467"></a>02467       *offset = <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>;
<a name="l02468"></a>02468       offset++;
<a name="l02469"></a>02469       <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (offset, &amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>, IN_ADDR_SIZE);
<a name="l02470"></a>02470       offset += <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>;
<a name="l02471"></a>02471       <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (offset, &amp;lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>, IN_ADDR_SIZE);
<a name="l02472"></a>02472         
<a name="l02473"></a>02473       <span class="keywordflow">return</span> lsa;
<a name="l02474"></a>02474     }
<a name="l02475"></a>02475     }
<a name="l02476"></a>02476   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02477"></a>02477 }
<a name="l02478"></a>02478 
<a name="l02479"></a>02479 <span class="keyword">static</span> u_char *
<a name="l02480"></a>02480 ospfExtLsdbEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length, <span class="keywordtype">int</span> exact,
<a name="l02481"></a>02481           <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l02482"></a>02482 {
<a name="l02483"></a>02483   <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
<a name="l02484"></a>02484   <span class="keyword">struct </span><a class="code" href="structlsa__header.html">lsa_header</a> *lsah;
<a name="l02485"></a>02485   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l02486"></a>02486   <span class="keyword">struct </span>in_addr ls_id;
<a name="l02487"></a>02487   <span class="keyword">struct </span>in_addr router_id;
<a name="l02488"></a>02488   <span class="keyword">struct </span>ospf *ospf;
<a name="l02489"></a>02489 
<a name="l02490"></a>02490   type = <a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>;
<a name="l02491"></a>02491   memset (&amp;ls_id, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l02492"></a>02492   memset (&amp;router_id, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr));
<a name="l02493"></a>02493 
<a name="l02494"></a>02494   <span class="comment">/* Check OSPF instance. */</span>
<a name="l02495"></a>02495   ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
<a name="l02496"></a>02496   <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02497"></a>02497     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02498"></a>02498 
<a name="l02499"></a>02499   lsa = ospfExtLsdbLookup (v, name, length, &amp;type, &amp;ls_id, &amp;router_id, exact);
<a name="l02500"></a>02500   <span class="keywordflow">if</span> (! lsa)
<a name="l02501"></a>02501     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02502"></a>02502 
<a name="l02503"></a>02503   lsah = lsa-&gt;<a class="code" href="structospf__lsa.html#a31a637ecac976d557e71528613046582">data</a>;
<a name="l02504"></a>02504 
<a name="l02505"></a>02505   <span class="comment">/* Return the current value of the variable */</span>
<a name="l02506"></a>02506   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l02507"></a>02507     {
<a name="l02508"></a>02508     <span class="keywordflow">case</span> OSPFEXTLSDBTYPE:
<a name="l02509"></a>02509       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (<a class="code" href="ospf__lsa_8h.html#ae1f343a4ebcfe793c20519a447f7b851">OSPF_AS_EXTERNAL_LSA</a>);
<a name="l02510"></a>02510       <span class="keywordflow">break</span>;
<a name="l02511"></a>02511     <span class="keywordflow">case</span> OSPFEXTLSDBLSID:
<a name="l02512"></a>02512       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (lsah-&gt;<a class="code" href="structlsa__header.html#a8f4602786c2de855a418b553a4555683">id</a>);
<a name="l02513"></a>02513       <span class="keywordflow">break</span>;
<a name="l02514"></a>02514     <span class="keywordflow">case</span> OSPFEXTLSDBROUTERID:
<a name="l02515"></a>02515       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a8745a86f37751629f4c280c33b06646c">SNMP_IPADDRESS</a> (lsah-&gt;<a class="code" href="structlsa__header.html#a14cecc24f7274d590fc9666f9c62fdd4">adv_router</a>);
<a name="l02516"></a>02516       <span class="keywordflow">break</span>;
<a name="l02517"></a>02517     <span class="keywordflow">case</span> OSPFEXTLSDBSEQUENCE:
<a name="l02518"></a>02518       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (lsah-&gt;<a class="code" href="structlsa__header.html#ac9c2a10b78b2be23acfe6d0a54b9b6b5">ls_seqnum</a>);
<a name="l02519"></a>02519       <span class="keywordflow">break</span>;
<a name="l02520"></a>02520     <span class="keywordflow">case</span> OSPFEXTLSDBAGE:
<a name="l02521"></a>02521       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (lsah-&gt;<a class="code" href="structlsa__header.html#a797ae6158d74b4aa89a9d09c5edb13d2">ls_age</a>);
<a name="l02522"></a>02522       <span class="keywordflow">break</span>;
<a name="l02523"></a>02523     <span class="keywordflow">case</span> OSPFEXTLSDBCHECKSUM:
<a name="l02524"></a>02524       <span class="keywordflow">return</span> <a class="code" href="smux_8h.html#a70470f9a0f3e693ede2b6d10bf3f591c">SNMP_INTEGER</a> (lsah-&gt;<a class="code" href="structlsa__header.html#aa481a4d27dbba4c1921a74ba672fc2f4">checksum</a>);
<a name="l02525"></a>02525       <span class="keywordflow">break</span>;
<a name="l02526"></a>02526     <span class="keywordflow">case</span> OSPFEXTLSDBADVERTISEMENT:
<a name="l02527"></a>02527       *var_len = ntohs (lsah-&gt;<a class="code" href="structlsa__header.html#afdc4c3f29adf98aa83bbef468b8baede">length</a>);
<a name="l02528"></a>02528       <span class="keywordflow">return</span> (u_char *) lsah;
<a name="l02529"></a>02529       <span class="keywordflow">break</span>;
<a name="l02530"></a>02530     <span class="keywordflow">default</span>:
<a name="l02531"></a>02531       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02532"></a>02532       <span class="keywordflow">break</span>;
<a name="l02533"></a>02533     }
<a name="l02534"></a>02534   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02535"></a>02535 }
<a name="l02536"></a>02536 
<a name="l02537"></a>02537 <span class="keyword">static</span> u_char *
<a name="l02538"></a>02538 ospfAreaAggregateEntry (<span class="keyword">struct</span> <a class="code" href="structvariable.html">variable</a> *v, oid *name, <span class="keywordtype">size_t</span> *length,
<a name="l02539"></a>02539             <span class="keywordtype">int</span> exact, <span class="keywordtype">size_t</span> *var_len, <a class="code" href="smux_8h.html#ace14719892f7615b0228ad97d4cc8040">WriteMethod</a> **write_method)
<a name="l02540"></a>02540 {
<a name="l02541"></a>02541   <span class="comment">/* Return the current value of the variable */</span>
<a name="l02542"></a>02542   <span class="keywordflow">switch</span> (v-&gt;<a class="code" href="structvariable.html#ade92e000ca0d35650cc43fc3e54e6350">magic</a>) 
<a name="l02543"></a>02543     {
<a name="l02544"></a>02544     <span class="keywordflow">case</span> OSPFAREAAGGREGATEAREAID:
<a name="l02545"></a>02545       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02546"></a>02546       <span class="keywordflow">break</span>;
<a name="l02547"></a>02547     <span class="keywordflow">case</span> OSPFAREAAGGREGATELSDBTYPE:
<a name="l02548"></a>02548       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02549"></a>02549       <span class="keywordflow">break</span>;
<a name="l02550"></a>02550     <span class="keywordflow">case</span> OSPFAREAAGGREGATENET:
<a name="l02551"></a>02551       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02552"></a>02552       <span class="keywordflow">break</span>;
<a name="l02553"></a>02553     <span class="keywordflow">case</span> OSPFAREAAGGREGATEMASK:
<a name="l02554"></a>02554       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02555"></a>02555       <span class="keywordflow">break</span>;
<a name="l02556"></a>02556     <span class="keywordflow">case</span> OSPFAREAAGGREGATESTATUS:
<a name="l02557"></a>02557       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02558"></a>02558       <span class="keywordflow">break</span>;
<a name="l02559"></a>02559     <span class="keywordflow">case</span> OSPFAREAAGGREGATEEFFECT:
<a name="l02560"></a>02560       <span class="keywordflow">return</span> (u_char *) <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02561"></a>02561       <span class="keywordflow">break</span>;
<a name="l02562"></a>02562     <span class="keywordflow">default</span>:
<a name="l02563"></a>02563       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02564"></a>02564       <span class="keywordflow">break</span>;
<a name="l02565"></a>02565     }
<a name="l02566"></a>02566   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02567"></a>02567 }
<a name="l02568"></a>02568 
<a name="l02569"></a>02569 <span class="comment">/* OSPF Traps. */</span>
<a name="l02570"></a>02570 <span class="preprocessor">#define IFSTATECHANGE      16</span>
<a name="l02571"></a>02571 <span class="preprocessor"></span><span class="preprocessor">#define VIRTIFSTATECHANGE   1</span>
<a name="l02572"></a>02572 <span class="preprocessor"></span><span class="preprocessor">#define NBRSTATECHANGE      2</span>
<a name="l02573"></a>02573 <span class="preprocessor"></span><span class="preprocessor">#define VIRTNBRSTATECHANGE  3</span>
<a name="l02574"></a>02574 <span class="preprocessor"></span>
<a name="l02575"></a>02575 <span class="keyword">struct </span><a class="code" href="structtrap__object.html">trap_object</a> ospfNbrTrapList[] =
<a name="l02576"></a>02576 {
<a name="l02577"></a>02577   {ospfGeneralGroup, -2, {1, OSPFROUTERID}},
<a name="l02578"></a>02578   {ospfNbrEntry, 3, {10, 1, OSPFNBRIPADDR}},
<a name="l02579"></a>02579   {ospfNbrEntry, 3, {10, 1, OSPFNBRRTRID}},
<a name="l02580"></a>02580   {ospfNbrEntry, 3, {10, 1, OSPFNBRSTATE}}
<a name="l02581"></a>02581 };
<a name="l02582"></a>02582 
<a name="l02583"></a>02583 
<a name="l02584"></a>02584 <span class="keyword">struct </span><a class="code" href="structtrap__object.html">trap_object</a> ospfVirtNbrTrapList[] =
<a name="l02585"></a>02585 {
<a name="l02586"></a>02586   {ospfGeneralGroup, -2, {1, 1}},
<a name="l02587"></a>02587   {ospfVirtNbrEntry, 3, {11, 1, OSPFVIRTNBRAREA}},
<a name="l02588"></a>02588   {ospfVirtNbrEntry, 3, {11, 1, OSPFVIRTNBRRTRID}},
<a name="l02589"></a>02589   {ospfVirtNbrEntry, 3, {11, 1, OSPFVIRTNBRSTATE}}
<a name="l02590"></a>02590 };
<a name="l02591"></a>02591 
<a name="l02592"></a>02592 <span class="keyword">struct </span><a class="code" href="structtrap__object.html">trap_object</a> ospfIfTrapList[] =
<a name="l02593"></a>02593 {
<a name="l02594"></a>02594   {ospfGeneralGroup, -2, {1, OSPFROUTERID}},
<a name="l02595"></a>02595   {ospfIfEntry, 3, {7, 1, OSPFIFIPADDRESS}},
<a name="l02596"></a>02596   {ospfIfEntry, 3, {7, 1, OSPFADDRESSLESSIF}},
<a name="l02597"></a>02597   {ospfIfEntry, 3, {7, 1, OSPFIFSTATE}}
<a name="l02598"></a>02598 };
<a name="l02599"></a>02599 
<a name="l02600"></a>02600 <span class="keyword">struct </span><a class="code" href="structtrap__object.html">trap_object</a> ospfVirtIfTrapList[] =
<a name="l02601"></a>02601 {
<a name="l02602"></a>02602   {ospfGeneralGroup, -2, {1, OSPFROUTERID}},
<a name="l02603"></a>02603   {ospfVirtIfEntry, 3, {9, 1, OSPFVIRTIFAREAID}},
<a name="l02604"></a>02604   {ospfVirtIfEntry, 3, {9, 1, OSPFVIRTIFNEIGHBOR}},
<a name="l02605"></a>02605   {ospfVirtIfEntry, 3, {9, 1, OSPFVIRTIFSTATE}}
<a name="l02606"></a>02606 };
<a name="l02607"></a>02607 
<a name="l02608"></a>02608 <span class="keywordtype">void</span>
<a name="l02609"></a>02609 <a class="code" href="ospf__snmp_8h.html#a90aca92ae6e6e864b2357f3b4059a9ff">ospfTrapNbrStateChange</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *on)
<a name="l02610"></a>02610 {
<a name="l02611"></a>02611   oid index[<span class="keyword">sizeof</span> (oid) * (<a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1)];
<a name="l02612"></a>02612   <span class="keywordtype">char</span> msgbuf[16];
<a name="l02613"></a>02613   
<a name="l02614"></a>02614   <a class="code" href="ospf__dump_8c.html#a225e3bd3765eb8a4dc118a945e7f4b74">ospf_nbr_state_message</a>(on, msgbuf, <span class="keyword">sizeof</span>(msgbuf));
<a name="l02615"></a>02615   <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_INFO, <span class="stringliteral">&quot;ospfTrapNbrStateChange trap sent: %s now %s&quot;</span>,
<a name="l02616"></a>02616     inet_ntoa(on-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), msgbuf);
<a name="l02617"></a>02617 
<a name="l02618"></a>02618   <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (index, &amp;(on-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l02619"></a>02619   index[<a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>] = 0;
<a name="l02620"></a>02620 
<a name="l02621"></a>02621   <a class="code" href="smux_8h.html#aaf0b9cc33d65afe3c172191a78c87985">smux_trap</a> (ospf_oid, <span class="keyword">sizeof</span> ospf_oid / <span class="keyword">sizeof</span> (oid),
<a name="l02622"></a>02622              index,  <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1,
<a name="l02623"></a>02623              ospfNbrTrapList, 
<a name="l02624"></a>02624              <span class="keyword">sizeof</span> ospfNbrTrapList / <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structtrap__object.html">trap_object</a>),
<a name="l02625"></a>02625              time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>), NBRSTATECHANGE);
<a name="l02626"></a>02626 }
<a name="l02627"></a>02627 
<a name="l02628"></a>02628 <span class="keywordtype">void</span>
<a name="l02629"></a>02629 <a class="code" href="ospf__snmp_8h.html#accf3b691f4461105fb861cb1e081de4e">ospfTrapVirtNbrStateChange</a> (<span class="keyword">struct</span> <a class="code" href="structospf__neighbor.html">ospf_neighbor</a> *on)
<a name="l02630"></a>02630 {
<a name="l02631"></a>02631   oid index[<span class="keyword">sizeof</span> (oid) * (<a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1)];
<a name="l02632"></a>02632   
<a name="l02633"></a>02633   <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_INFO, <span class="stringliteral">&quot;ospfTrapVirtNbrStateChange trap sent&quot;</span>);
<a name="l02634"></a>02634 
<a name="l02635"></a>02635   <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (index, &amp;(on-&gt;<a class="code" href="structospf__neighbor.html#a4be3cd4b416bc267a4e3b35b9e2b1102">address</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l02636"></a>02636   index[<a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>] = 0;
<a name="l02637"></a>02637 
<a name="l02638"></a>02638   <a class="code" href="smux_8h.html#aaf0b9cc33d65afe3c172191a78c87985">smux_trap</a> (ospf_oid, <span class="keyword">sizeof</span> ospf_oid / <span class="keyword">sizeof</span> (oid),
<a name="l02639"></a>02639              index,  <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1,
<a name="l02640"></a>02640              ospfVirtNbrTrapList, 
<a name="l02641"></a>02641              <span class="keyword">sizeof</span> ospfVirtNbrTrapList / <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structtrap__object.html">trap_object</a>),
<a name="l02642"></a>02642              time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>), VIRTNBRSTATECHANGE);
<a name="l02643"></a>02643 }
<a name="l02644"></a>02644 
<a name="l02645"></a>02645 <span class="keywordtype">void</span>
<a name="l02646"></a>02646 <a class="code" href="ospf__snmp_8h.html#a214b7d1fa78440c0bb5512d10e9510ad">ospfTrapIfStateChange</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l02647"></a>02647 {
<a name="l02648"></a>02648   oid index[<span class="keyword">sizeof</span> (oid) * (<a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1)];
<a name="l02649"></a>02649 
<a name="l02650"></a>02650   <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_INFO, <span class="stringliteral">&quot;ospfTrapIfStateChange trap sent: %s now %s&quot;</span>,
<a name="l02651"></a>02651     inet_ntoa(oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
<a name="l02652"></a>02652     <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a>(<a class="code" href="ospf__dump_8c.html#ae4c65baac757ab6ffaaf05421dd53b3a">ospf_ism_state_msg</a>, oi-&gt;<a class="code" href="structospf__interface.html#a26605b9cc792cdd3e26c0481d24f0f63">state</a>));
<a name="l02653"></a>02653   
<a name="l02654"></a>02654   <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (index, &amp;(oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l02655"></a>02655   index[<a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>] = 0;
<a name="l02656"></a>02656 
<a name="l02657"></a>02657   <a class="code" href="smux_8h.html#aaf0b9cc33d65afe3c172191a78c87985">smux_trap</a> (ospf_oid, <span class="keyword">sizeof</span> ospf_oid / <span class="keyword">sizeof</span> (oid),
<a name="l02658"></a>02658              index, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1,
<a name="l02659"></a>02659              ospfIfTrapList, 
<a name="l02660"></a>02660              <span class="keyword">sizeof</span> ospfIfTrapList / <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structtrap__object.html">trap_object</a>),
<a name="l02661"></a>02661              time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>), IFSTATECHANGE);
<a name="l02662"></a>02662 }
<a name="l02663"></a>02663 
<a name="l02664"></a>02664 <span class="keywordtype">void</span>
<a name="l02665"></a>02665 <a class="code" href="ospf__snmp_8h.html#a4500f13e4245e8170a07493e3fc76f16">ospfTrapVirtIfStateChange</a> (<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *oi)
<a name="l02666"></a>02666 {
<a name="l02667"></a>02667   oid index[<span class="keyword">sizeof</span> (oid) * (<a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1)];
<a name="l02668"></a>02668 
<a name="l02669"></a>02669   <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_INFO, <span class="stringliteral">&quot;ospfTrapVirtIfStateChange trap sent&quot;</span>);
<a name="l02670"></a>02670   
<a name="l02671"></a>02671   <a class="code" href="smux_8h.html#add26a84014415e99f576c71009174dc3">oid_copy_addr</a> (index, &amp;(oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>);
<a name="l02672"></a>02672   index[<a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a>] = 0;
<a name="l02673"></a>02673 
<a name="l02674"></a>02674   <a class="code" href="smux_8h.html#aaf0b9cc33d65afe3c172191a78c87985">smux_trap</a> (ospf_oid, <span class="keyword">sizeof</span> ospf_oid / <span class="keyword">sizeof</span> (oid),
<a name="l02675"></a>02675              index, <a class="code" href="smux_8h.html#a046c11781e182edbfc70aae1bba67876">IN_ADDR_SIZE</a> + 1,
<a name="l02676"></a>02676              ospfVirtIfTrapList,
<a name="l02677"></a>02677              <span class="keyword">sizeof</span> ospfVirtIfTrapList / <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structtrap__object.html">trap_object</a>),
<a name="l02678"></a>02678              time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>), VIRTIFSTATECHANGE);
<a name="l02679"></a>02679 }
<a name="l02680"></a>02680 <span class="comment">/* Register OSPF2-MIB. */</span>
<a name="l02681"></a>02681 <span class="keywordtype">void</span>
<a name="l02682"></a>02682 <a class="code" href="ospfd_8h.html#a22e93e94f248ef35d58b1aa8108eabc4">ospf_snmp_init</a> ()
<a name="l02683"></a>02683 {
<a name="l02684"></a>02684   ospf_snmp_iflist = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
<a name="l02685"></a>02685   ospf_snmp_vl_table = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
<a name="l02686"></a>02686   <a class="code" href="smux_8h.html#a430d09d1e58132210a142a580cb8e6a8">smux_init</a> (<a class="code" href="ospfd_8c.html#a00fd6054739908ab616f0bacdc6d0f64">om</a>-&gt;<a class="code" href="structospf__master.html#a39e64176c2082c5f5e5e3c324c1c5725">master</a>);
<a name="l02687"></a>02687   <a class="code" href="smux_8h.html#a41b4afdce9bd47a5d68ba0b0b966c8b0">REGISTER_MIB</a>(<span class="stringliteral">&quot;mibII/ospf&quot;</span>, ospf_variables, <a class="code" href="structvariable.html">variable</a>, ospf_oid);
<a name="l02688"></a>02688 }
<a name="l02689"></a>02689 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__snmp_8c.html">ospf_snmp.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:07 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
