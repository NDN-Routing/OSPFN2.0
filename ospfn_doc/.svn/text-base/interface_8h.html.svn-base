<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/interface.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('interface_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">zebra/interface.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="redistribute_8h_source.html">redistribute.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for interface.h:</div>
<div class="dyncontent">
<div class="center"><img src="interface_8h__incl.png" border="0" usemap="#zebra_2interface_8h" alt=""/></div>
<map name="zebra_2interface_8h" id="zebra_2interface_8h">
<area shape="rect" id="node3" href="redistribute_8h.html" title="redistribute.h" alt="" coords="42,80,144,107"/><area shape="rect" id="node5" href="table_8h.html" title="table.h" alt="" coords="17,155,81,181"/><area shape="rect" id="node7" href="zserv_8h.html" title="zserv.h" alt="" coords="106,155,171,181"/><area shape="rect" id="node9" href="rib_8h.html" title="rib.h" alt="" coords="35,229,83,256"/><area shape="rect" id="node15" href="if_8h.html" title="if.h" alt="" coords="119,229,159,256"/><area shape="rect" id="node19" href="workqueue_8h.html" title="workqueue.h" alt="" coords="183,229,283,256"/><area shape="rect" id="node11" href="prefix_8h.html" title="prefix.h" alt="" coords="18,304,85,331"/><area shape="rect" id="node13" href="sockunion_8h.html" title="sockunion.h" alt="" coords="5,379,99,405"/><area shape="rect" id="node17" href="linklist_8h.html" title="linklist.h" alt="" coords="110,304,180,331"/></map>
</div>
</div><div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="interface_8h__dep__incl.png" border="0" usemap="#zebra_2interface_8hdep" alt=""/></div>
<map name="zebra_2interface_8hdep" id="zebra_2interface_8hdep">
<area shape="rect" id="node3" href="connected_8c.html" title="zebra/connected.c" alt="" coords="5,80,139,107"/><area shape="rect" id="node5" href="if__ioctl_8c.html" title="zebra/if_ioctl.c" alt="" coords="164,80,273,107"/><area shape="rect" id="node7" href="if__ioctl__solaris_8c.html" title="zebra/if_ioctl_solaris.c" alt="" coords="297,80,452,107"/><area shape="rect" id="node9" href="if__proc_8c.html" title="zebra/if_proc.c" alt="" coords="477,80,587,107"/><area shape="rect" id="node11" href="interface_8c.html" title="zebra/interface.c" alt="" coords="467,155,589,181"/><area shape="rect" id="node13" href="ioctl_8c.html" title="zebra/ioctl.c" alt="" coords="890,80,984,107"/><area shape="rect" id="node15" href="ioctl__solaris_8c.html" title="zebra/ioctl_solaris.c" alt="" coords="1009,80,1151,107"/><area shape="rect" id="node17" href="kernel__socket_8c.html" title="zebra/kernel_socket.c" alt="" coords="1175,80,1328,107"/><area shape="rect" id="node19" href="misc__null_8c.html" title="zebra/misc_null.c" alt="" coords="614,155,737,181"/><area shape="rect" id="node21" href="rt__netlink_8c.html" title="zebra/rt_netlink.c" alt="" coords="1353,80,1476,107"/><area shape="rect" id="node23" href="rtadv_8c.html" title="zebra/rtadv.c" alt="" coords="883,155,983,181"/><area shape="rect" id="node25" href="rtadv_8h.html" title="zebra/rtadv.h" alt="" coords="714,80,813,107"/><area shape="rect" id="node32" href="test__main_8c.html" title="zebra/test_main.c" alt="" coords="1501,80,1629,107"/><area shape="rect" id="node28" href="zebra_2main_8c.html" title="zebra/main.c" alt="" coords="762,155,859,181"/></map>
</div>
</div>
<p><a href="interface_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structzebra__if.html">zebra_if</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#aa9cdb773988c8c6b2c8c7d8a746d4d8d">IF_ZEBRA_MULTICAST_UNSPEC</a>&#160;&#160;&#160;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#aafd9a879ae36da7868d1dd5585e3a751">IF_ZEBRA_MULTICAST_ON</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#a9981efdfe7464a819ed293abc7c22779">IF_ZEBRA_MULTICAST_OFF</a>&#160;&#160;&#160;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#a02647faf478b25f3b679ef3822411e91">IF_ZEBRA_SHUTDOWN_UNSPEC</a>&#160;&#160;&#160;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#ac95a79a343f90c544c63e4628526c395">IF_ZEBRA_SHUTDOWN_ON</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#aa9a4938b817db6cc4a46c6e5d02cadcf">IF_ZEBRA_SHUTDOWN_OFF</a>&#160;&#160;&#160;2</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#a5ca58fe2209f09a828330810fc5a7d71">if_delete_update</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#afc558d5fc9ef4b3b59af78576e079a28">if_add_update</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#aae83b0b6dfee677319c2d865fc0f861b">if_up</a> (struct <a class="el" href="structinterface.html">interface</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#a52e9db9ff229374ceb54323186b90fc9">if_down</a> (struct <a class="el" href="structinterface.html">interface</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#a0b86fd5423a1f868bef65ea9ebc76353">if_refresh</a> (struct <a class="el" href="structinterface.html">interface</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#a4cbc04f3854d664042400169ae079c2a">if_flags_update</a> (struct <a class="el" href="structinterface.html">interface</a> *, uint64_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#a25d33146bf84d689996b11e2999c4383">if_subnet_add</a> (struct <a class="el" href="structinterface.html">interface</a> *, struct <a class="el" href="structconnected.html">connected</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_8h.html#ab742b1574b30401dfcbe6b007844f81b">if_subnet_delete</a> (struct <a class="el" href="structinterface.html">interface</a> *, struct <a class="el" href="structconnected.html">connected</a> *)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a9981efdfe7464a819ed293abc7c22779"></a><!-- doxytag: member="interface.h::IF_ZEBRA_MULTICAST_OFF" ref="a9981efdfe7464a819ed293abc7c22779" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define IF_ZEBRA_MULTICAST_OFF&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8h_source.html#l00034">34</a> of file <a class="el" href="interface_8h_source.html">interface.h</a>.</p>

</div>
</div>
<a class="anchor" id="aafd9a879ae36da7868d1dd5585e3a751"></a><!-- doxytag: member="interface.h::IF_ZEBRA_MULTICAST_ON" ref="aafd9a879ae36da7868d1dd5585e3a751" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define IF_ZEBRA_MULTICAST_ON&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8h_source.html#l00033">33</a> of file <a class="el" href="interface_8h_source.html">interface.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa9cdb773988c8c6b2c8c7d8a746d4d8d"></a><!-- doxytag: member="interface.h::IF_ZEBRA_MULTICAST_UNSPEC" ref="aa9cdb773988c8c6b2c8c7d8a746d4d8d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define IF_ZEBRA_MULTICAST_UNSPEC&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8h_source.html#l00032">32</a> of file <a class="el" href="interface_8h_source.html">interface.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa9a4938b817db6cc4a46c6e5d02cadcf"></a><!-- doxytag: member="interface.h::IF_ZEBRA_SHUTDOWN_OFF" ref="aa9a4938b817db6cc4a46c6e5d02cadcf" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define IF_ZEBRA_SHUTDOWN_OFF&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8h_source.html#l00039">39</a> of file <a class="el" href="interface_8h_source.html">interface.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac95a79a343f90c544c63e4628526c395"></a><!-- doxytag: member="interface.h::IF_ZEBRA_SHUTDOWN_ON" ref="ac95a79a343f90c544c63e4628526c395" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define IF_ZEBRA_SHUTDOWN_ON&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8h_source.html#l00038">38</a> of file <a class="el" href="interface_8h_source.html">interface.h</a>.</p>

</div>
</div>
<a class="anchor" id="a02647faf478b25f3b679ef3822411e91"></a><!-- doxytag: member="interface.h::IF_ZEBRA_SHUTDOWN_UNSPEC" ref="a02647faf478b25f3b679ef3822411e91" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define IF_ZEBRA_SHUTDOWN_UNSPEC&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8h_source.html#l00037">37</a> of file <a class="el" href="interface_8h_source.html">interface.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="afc558d5fc9ef4b3b59af78576e079a28"></a><!-- doxytag: member="interface.h::if_add_update" ref="afc558d5fc9ef4b3b59af78576e079a28" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void if_add_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8c_source.html#l00347">347</a> of file <a class="el" href="interface_8c_source.html">interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *if_data;

  if_data = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
  <span class="keywordflow">if</span> (if_data-&gt;<a class="code" href="structzebra__if.html#a12752cdbf6d7e4b9743851e5654a0aa4">multicast</a> == <a class="code" href="interface_8h.html#aafd9a879ae36da7868d1dd5585e3a751">IF_ZEBRA_MULTICAST_ON</a>)
    <a class="code" href="ioctl_8c.html#a8d3286dd23c072fd28b523f0464b7b48">if_set_flags</a> (ifp, IFF_MULTICAST);
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (if_data-&gt;<a class="code" href="structzebra__if.html#a12752cdbf6d7e4b9743851e5654a0aa4">multicast</a> == <a class="code" href="interface_8h.html#a9981efdfe7464a819ed293abc7c22779">IF_ZEBRA_MULTICAST_OFF</a>)
    <a class="code" href="ioctl_8c.html#a502ff981598ecd81fae67f29ef3cc1b8">if_unset_flags</a> (ifp, IFF_MULTICAST);

  <a class="code" href="redistribute_8c.html#af54bdbe2a1b4fbecf503452673ac371f">zebra_interface_add_update</a> (ifp);

  <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifp-&gt;<a class="code" href="structinterface.html#ae145c01f63b3abaca8e3805f9e396c4a">status</a>, <a class="code" href="if_8h.html#a977548125c39a6ba021b2d0fde8f5a52">ZEBRA_INTERFACE_ACTIVE</a>))
    {
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (ifp-&gt;<a class="code" href="structinterface.html#ae145c01f63b3abaca8e3805f9e396c4a">status</a>, <a class="code" href="if_8h.html#a977548125c39a6ba021b2d0fde8f5a52">ZEBRA_INTERFACE_ACTIVE</a>);

      <a class="code" href="interface_8c.html#a223966d09f459415553aab0fe6a8a59b">if_addr_wakeup</a> (ifp);

      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;interface %s index %d becomes active.&quot;</span>, 
            ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;interface %s index %d is added.&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5ca58fe2209f09a828330810fc5a7d71"></a><!-- doxytag: member="interface.h::if_delete_update" ref="a5ca58fe2209f09a828330810fc5a7d71" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void if_delete_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8c_source.html#l00378">378</a> of file <a class="el" href="interface_8c_source.html">interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *<a class="code" href="structzebra__if.html">zebra_if</a>;

  zebra_if = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a>(ifp))
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;interface %s index %d is still up while being deleted.&quot;</span>,
        ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* Mark interface as inactive */</span>
  <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ifp-&gt;<a class="code" href="structinterface.html#ae145c01f63b3abaca8e3805f9e396c4a">status</a>, <a class="code" href="if_8h.html#a977548125c39a6ba021b2d0fde8f5a52">ZEBRA_INTERFACE_ACTIVE</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;interface %s index %d is now inactive.&quot;</span>,
           ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);

  <span class="comment">/* Delete connected routes from the kernel. */</span>
  <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
      <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *last = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      <span class="keywordflow">while</span> ((node = (last ? last-&gt;<a class="code" href="structlistnode.html#a13db6e09ac9e7200657130783e8e4131">next</a> : <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>))))
    {
      ifc = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (node);
      p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
      
      <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET
          &amp;&amp; (rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (zebra_if-&gt;<a class="code" href="structzebra__if.html#a412a56e0801125e7952e339c0543f308">ipv4_subnets</a>, p)))
        {
          <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *anode;
          <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="structlistnode.html#a13db6e09ac9e7200657130783e8e4131">next</a>;
          <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *first;
          <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *addr_list;
          
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
          addr_list = (<span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *) rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
          
          <span class="comment">/* Remove addresses, secondaries first. */</span>
          first = <a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (addr_list);
          <span class="keywordflow">for</span> (anode = first-&gt;<a class="code" href="structlistnode.html#a13db6e09ac9e7200657130783e8e4131">next</a>; anode || first; anode = next)
        {
          <span class="keywordflow">if</span> (!anode)
            {
              anode = first;
              first = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
            }
          next = anode-&gt;<a class="code" href="structlistnode.html#a13db6e09ac9e7200657130783e8e4131">next</a>;

          ifc = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (anode);
          p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;

          <a class="code" href="connected_8c.html#afe7cbd92c89db253135714c882edd102">connected_down_ipv4</a> (ifp, ifc);

          <a class="code" href="redistribute_8c.html#addd2b7659a8107bc9d2edcc026579bf9">zebra_interface_address_delete_update</a> (ifp, ifc);

          <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>);

          <span class="comment">/* Remove from subnet chain. */</span>
          <a class="code" href="linklist_8c.html#a44569d4d868c60e29b21409612a5df05">list_delete_node</a> (addr_list, anode);
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
          
          <span class="comment">/* Remove from interface address list (unconditionally). */</span>
          <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a4c3561e2d67366e175998d69dbc87874">ZEBRA_IFC_CONFIGURED</a>))
            {
              <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, ifc);
              <a class="code" href="if_8c.html#aefcfc40d0358af75f26135eb0a33903d">connected_free</a> (ifc);
                    }
                  <span class="keywordflow">else</span>
                    last = node;
        }

          <span class="comment">/* Free chain list and respective route node. */</span>
          <a class="code" href="linklist_8c.html#ab5fdf1a904264be077ce19a432b1b119">list_delete</a> (addr_list);
          rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
        }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
        {
          connected_down_ipv6 (ifp, ifc);

          <a class="code" href="redistribute_8c.html#addd2b7659a8107bc9d2edcc026579bf9">zebra_interface_address_delete_update</a> (ifp, ifc);

          <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>);

          <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a4c3561e2d67366e175998d69dbc87874">ZEBRA_IFC_CONFIGURED</a>))
        last = node;
          <span class="keywordflow">else</span>
        {
          <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, ifc);
          <a class="code" href="if_8c.html#aefcfc40d0358af75f26135eb0a33903d">connected_free</a> (ifc);
        }
        }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
      <span class="keywordflow">else</span>
        {
          last = node;
        }
    }
    }
  <a class="code" href="redistribute_8c.html#a35bb02fbe2159fbbc9d823c31497848e">zebra_interface_delete_update</a> (ifp);

  <span class="comment">/* Update ifindex after distributing the delete message.  This is in</span>
<span class="comment">     case any client needs to have the old value of ifindex available</span>
<span class="comment">     while processing the deletion.  Each client daemon is responsible</span>
<span class="comment">     for setting ifindex to IFINDEX_INTERNAL after processing the</span>
<span class="comment">     interface deletion message. */</span>
  ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = <a class="code" href="if_8h.html#a18949aeeb4a8fbe7e3be43e6bbe86527">IFINDEX_INTERNAL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a52e9db9ff229374ceb54323186b90fc9"></a><!-- doxytag: member="interface.h::if_down" ref="a52e9db9ff229374ceb54323186b90fc9" args="(struct interface *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void if_down </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8c_source.html#l00531">531</a> of file <a class="el" href="interface_8c_source.html">interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="structlistnode.html#a13db6e09ac9e7200657130783e8e4131">next</a>;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="comment">/* Notify to the protocol daemons. */</span>
  <a class="code" href="redistribute_8c.html#af292f17fef777ddd9aa9fa1a5b510c04">zebra_interface_down_update</a> (ifp);

  <span class="comment">/* Delete connected routes from the kernel. */</span>
  <span class="keywordflow">if</span> (ifp-&gt;connected)
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ifp-&gt;connected, node, next, ifc))
    {
      p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;

      <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
        <a class="code" href="connected_8c.html#afe7cbd92c89db253135714c882edd102">connected_down_ipv4</a> (ifp, ifc);
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
        connected_down_ipv6 (ifp, ifc);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    }
    }

  <span class="comment">/* Examine all static routes which direct to the interface. */</span>
  <a class="code" href="rib_8h.html#ab5320729fbebc97fbb79a214f5d370d8">rib_update</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4cbc04f3854d664042400169ae079c2a"></a><!-- doxytag: member="interface.h::if_flags_update" ref="a4cbc04f3854d664042400169ae079c2a" args="(struct interface *, uint64_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void if_flags_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8c_source.html#l00242">242</a> of file <a class="el" href="interface_8c_source.html">interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="interface_8c.html#a61a988d3db14846cee1274c00c75a6a3">if_flags_mangle</a> (ifp, &amp;newflags);
    
  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
    {
      <span class="comment">/* operative -&gt; inoperative? */</span>
      ifp-&gt;flags = newflags;
      <span class="keywordflow">if</span> (!<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
        <a class="code" href="interface_8c.html#a07c9e55f4e6b0072a7ccbf902b0b3035">if_down</a> (ifp);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* inoperative -&gt; operative? */</span>
      ifp-&gt;flags = newflags;
      <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
        <a class="code" href="interface_8c.html#a5ed3c13631e5c34358258aad230d5380">if_up</a> (ifp);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0b86fd5423a1f868bef65ea9ebc76353"></a><!-- doxytag: member="interface.h::if_refresh" ref="a0b86fd5423a1f868bef65ea9ebc76353" args="(struct interface *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void if_refresh </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8c_source.html#l00562">562</a> of file <a class="el" href="interface_8c_source.html">interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ioctl_8c.html#a2b50abdbb1df6e287a7aceda21bbc6c2">if_get_flags</a> (ifp);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a25d33146bf84d689996b11e2999c4383"></a><!-- doxytag: member="interface.h::if_subnet_add" ref="a25d33146bf84d689996b11e2999c4383" args="(struct interface *, struct connected *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int if_subnet_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8c_source.html#l00118">118</a> of file <a class="el" href="interface_8c_source.html">interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *<a class="code" href="structzebra__if.html">zebra_if</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> cp;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *addr_list;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ifp &amp;&amp; ifp-&gt;info &amp;&amp; ifc);
  zebra_if = ifp-&gt;info;

  <span class="comment">/* Get address derived subnet node and associated address list, while marking</span>
<span class="comment">     address secondary attribute appropriately. */</span>
  cp = *ifc-&gt;address;
  <a class="code" href="prefix_8c.html#a99265c5e11b1867552cf784a4cac8252">apply_mask</a> (&amp;cp);
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (zebra_if-&gt;<a class="code" href="structzebra__if.html#a412a56e0801125e7952e339c0543f308">ipv4_subnets</a>, &amp;cp);

  <span class="keywordflow">if</span> ((addr_list = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (ifc-&gt;flags, <a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">ZEBRA_IFA_SECONDARY</a>);
  <span class="keywordflow">else</span>
    {
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ifc-&gt;flags, <a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">ZEBRA_IFA_SECONDARY</a>);
      rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = addr_list = <a class="code" href="linklist_8c.html#af156f4ae343ef4a625f75b6c38845aef">list_new</a> ();
      <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (rn);
    }

  <span class="comment">/* Tie address at the tail of address list. */</span>
  <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (addr_list, ifc);
  
  <span class="comment">/* Return list element count. */</span>
  <span class="keywordflow">return</span> (addr_list-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab742b1574b30401dfcbe6b007844f81b"></a><!-- doxytag: member="interface.h::if_subnet_delete" ref="ab742b1574b30401dfcbe6b007844f81b" args="(struct interface *, struct connected *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int if_subnet_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8c_source.html#l00152">152</a> of file <a class="el" href="interface_8c_source.html">interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structzebra__if.html">zebra_if</a> *<a class="code" href="structzebra__if.html">zebra_if</a>;
  <span class="keyword">struct </span><a class="code" href="structlist.html">list</a> *addr_list;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ifp &amp;&amp; ifp-&gt;info &amp;&amp; ifc);
  zebra_if = ifp-&gt;info;

  <span class="comment">/* Get address derived subnet node. */</span>
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (zebra_if-&gt;<a class="code" href="structzebra__if.html#a412a56e0801125e7952e339c0543f308">ipv4_subnets</a>, ifc-&gt;address);
  <span class="keywordflow">if</span> (! (rn &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>))
    <span class="keywordflow">return</span> -1;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  
  <span class="comment">/* Untie address from subnet&#39;s address list. */</span>
  addr_list = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
  <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (addr_list, ifc);
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="comment">/* Return list element count, if not empty. */</span>
  <span class="keywordflow">if</span> (addr_list-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>)
    {
      <span class="comment">/* If deleted address is primary, mark subsequent one as such and distribute. */</span>
      <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;flags, <a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">ZEBRA_IFA_SECONDARY</a>))
    {
      ifc = <a class="code" href="linklist_8h.html#a574f1b7acbcea848771bd5ddc61e430a">listgetdata</a> (<a class="code" href="linklist_8h.html#a3d4492ca03b023aeecd4d6b0cdaa16fb">listhead</a> (addr_list));
      <a class="code" href="redistribute_8c.html#addd2b7659a8107bc9d2edcc026579bf9">zebra_interface_address_delete_update</a> (ifp, ifc);
      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ifc-&gt;flags, <a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">ZEBRA_IFA_SECONDARY</a>);
      <a class="code" href="redistribute_8c.html#a094cff05de325b272858866f09358058">zebra_interface_address_add_update</a> (ifp, ifc);
    }
      
      <span class="keywordflow">return</span> addr_list-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>;
    }
  
  <span class="comment">/* Otherwise, free list and route node. */</span>
  <a class="code" href="linklist_8c.html#a15aa9f8cf8424489adf1efd4d075aac6">list_free</a> (addr_list);
  rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aae83b0b6dfee677319c2d865fc0f861b"></a><!-- doxytag: member="interface.h::if_up" ref="aae83b0b6dfee677319c2d865fc0f861b" args="(struct interface *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void if_up </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="interface_8c_source.html#l00498">498</a> of file <a class="el" href="interface_8c_source.html">interface.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *<a class="code" href="structlistnode.html#a13db6e09ac9e7200657130783e8e4131">next</a>;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="comment">/* Notify the protocol daemons. */</span>
  <a class="code" href="redistribute_8c.html#a47e3eef746ea4c7dd28652d126b29908">zebra_interface_up_update</a> (ifp);

  <span class="comment">/* Install connected routes to the kernel. */</span>
  <span class="keywordflow">if</span> (ifp-&gt;connected)
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ifp-&gt;connected, node, next, ifc))
    {
      p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;

      <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
        <a class="code" href="connected_8c.html#a281f3e4ee7aa4eb5b74fc7d6205afbcb">connected_up_ipv4</a> (ifp, ifc);
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET6)
        connected_up_ipv6 (ifp, ifc);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
    }
    }

  <span class="comment">/* Examine all static routes. */</span>
  <a class="code" href="rib_8h.html#ab5320729fbebc97fbb79a214f5d370d8">rib_update</a> ();
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="interface_8h.html">interface.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:37 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
