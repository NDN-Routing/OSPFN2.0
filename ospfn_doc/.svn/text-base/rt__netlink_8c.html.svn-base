<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/rt_netlink.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('rt__netlink_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">zebra/rt_netlink.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="linklist_8h_source.html">linklist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="connected_8h_source.html">connected.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="rib_8h_source.html">rib.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="privs_8h_source.html">privs.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="zserv_8h_source.html">zebra/zserv.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="rt_8h_source.html">zebra/rt.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="redistribute_8h_source.html">zebra/redistribute.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="interface_8h_source.html">zebra/interface.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="debug_8h_source.html">zebra/debug.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for rt_netlink.c:</div>
<div class="dyncontent">
<div class="center"><img src="rt__netlink_8c__incl.png" border="0" usemap="#zebra_2rt__netlink_8c" alt=""/></div>
<map name="zebra_2rt__netlink_8c" id="zebra_2rt__netlink_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1567,80,1633,107"/><area shape="rect" id="node61" href="linklist_8h.html" title="linklist.h" alt="" coords="2859,379,2929,405"/><area shape="rect" id="node63" href="if_8h.html" title="if.h" alt="" coords="2909,304,2949,331"/><area shape="rect" id="node66" href="log_8h.html" title="log.h" alt="" coords="2763,80,2815,107"/><area shape="rect" id="node69" href="prefix_8h.html" title="prefix.h" alt="" coords="3159,379,3227,405"/><area shape="rect" id="node73" href="connected_8h.html" title="connected.h" alt="" coords="3397,80,3496,107"/><area shape="rect" id="node75" href="table_8h.html" title="table.h" alt="" coords="3192,229,3256,256"/><area shape="rect" id="node77" href="rib_8h.html" title="rib.h" alt="" coords="3169,304,3217,331"/><area shape="rect" id="node80" href="thread_8h.html" title="thread.h" alt="" coords="3520,80,3592,107"/><area shape="rect" id="node82" href="privs_8h.html" title="privs.h" alt="" coords="3617,80,3679,107"/><area shape="rect" id="node84" href="zserv_8h.html" title="zebra/zserv.h" alt="" coords="3051,229,3152,256"/><area shape="rect" id="node90" href="rt_8h.html" title="zebra/rt.h" alt="" coords="2947,229,3025,256"/><area shape="rect" id="node95" href="redistribute_8h.html" title="zebra/redistribute.h" alt="" coords="3065,155,3204,181"/><area shape="rect" id="node99" href="interface_8h.html" title="zebra/interface.h" alt="" coords="3099,80,3221,107"/><area shape="rect" id="node102" href="debug_8h.html" title="zebra/debug.h" alt="" coords="3703,80,3811,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="1765,155,1843,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="1867,155,1916,181"/><area shape="rect" id="node71" href="sockunion_8h.html" title="sockunion.h" alt="" coords="3147,453,3240,480"/><area shape="rect" id="node88" href="workqueue_8h.html" title="workqueue.h" alt="" coords="3045,304,3144,331"/></map>
</div>
</div>
<p><a href="rt__netlink_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structnlsock.html">nlsock</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a6a90f17f258e36353f09375263324f41">MSG_TRUNC</a>&#160;&#160;&#160;0x20</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a5c99605e6bb5d2d0dd874f4336734806">set_ifindex</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, unsigned int ifi_index)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a9d729425d97c0c5f1d2b293ba7c9a5a9">netlink_recvbuf</a> (struct <a class="el" href="structnlsock.html">nlsock</a> *nl, uint32_t newsize)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a1c6085b143dcd6789d63c133afa5a0a4">netlink_socket</a> (struct <a class="el" href="structnlsock.html">nlsock</a> *nl, unsigned long groups)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (int family, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, struct <a class="el" href="structnlsock.html">nlsock</a> *nl)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (int(*<a class="el" href="structfilter.html">filter</a>)(struct sockaddr_nl *, struct nlmsghdr *), struct <a class="el" href="structnlsock.html">nlsock</a> *nl)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (struct rtattr **tb, int max, struct rtattr *rta, int len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a9b6329fe421003715b72f100fb709b09">netlink_interface</a> (struct sockaddr_nl *snl, struct nlmsghdr *h)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">netlink_interface_addr</a> (struct sockaddr_nl *snl, struct nlmsghdr *h)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a9c04be98bf7c5f03642b435673c9bcd4">netlink_routing_table</a> (struct sockaddr_nl *snl, struct nlmsghdr *h)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#ac8f765ce015c72754da14933f147f318">netlink_route_change</a> (struct sockaddr_nl *snl, struct nlmsghdr *h)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a45fac153b6c1d7c0a77f619989fe4954">netlink_link_change</a> (struct sockaddr_nl *snl, struct nlmsghdr *h)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a37aed8052016d2d44f7d058d871d4b59">netlink_information_fetch</a> (struct sockaddr_nl *snl, struct nlmsghdr *h)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#aadaa9f17773804e3fbafba32b6cf9696">interface_lookup_netlink</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#ade2bbd0951e2dc56765b5651836c87ce">netlink_route_read</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (struct nlmsghdr *<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>, int maxlen, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, void *data, int alen)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">rta_addattr_l</a> (struct rtattr *rta, int maxlen, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, void *data, int alen)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (struct nlmsghdr *<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>, int maxlen, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a9bbcbae6235ca62292ec5f7f0a63ec8d">netlink_talk_filter</a> (struct sockaddr_nl *snl, struct nlmsghdr *h)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#ae6893dc7903dc8ac58967ebd1ecb9929">netlink_talk</a> (struct nlmsghdr *<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>, struct <a class="el" href="structnlsock.html">nlsock</a> *nl)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#af906bd1169159d6eea28f9438e4dbc23">netlink_route</a> (int cmd, int family, void *dest, int <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, void *gate, int index, int zebra_flags, int table)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a0e3c75709d3e9ee940e4162ba28716a5">netlink_route_multipath</a> (int cmd, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>, int family)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#afea56d96d08fd5aab1d8e506cd4b25c0">kernel_add_ipv4</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#af2913f44f44cac8461b82b362ebbe986">kernel_delete_ipv4</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structrib.html">rib</a> *<a class="el" href="structrib.html">rib</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a201c79d2e3c1eb272146e2e49391e524">netlink_address</a> (int cmd, int family, struct <a class="el" href="structinterface.html">interface</a> *ifp, struct <a class="el" href="structconnected.html">connected</a> *ifc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a597c594e7152b27e36d6be6cc3b80fb9">kernel_address_add_ipv4</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, struct <a class="el" href="structconnected.html">connected</a> *ifc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a1a6e7419a16cae0c86088a6e0d13f242">kernel_address_delete_ipv4</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp, struct <a class="el" href="structconnected.html">connected</a> *ifc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a1a57616537b4466f86de043316933986">kernel_read</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a79db799b8a7dcbbbdda00ee9b2c58953">netlink_install_filter</a> (int sock, __u32 <a class="el" href="zserv_8h.html#ae0d46a978d5cd6707411f276ad869b9c">pid</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a0dbe43a64cbf994bf9189e7767f93342">kernel_init</a> (void)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structnlsock.html">nlsock</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structnlsock.html">nlsock</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structmessage.html">message</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structzebra__t.html">zebra_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structzebra__privs__t.html">zebra_privs_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#aa4fe0a028fde5c45c4f236d47d591a80">nl_rcvbufsize</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structmessage.html">message</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#a3868f54f344479068c738714723ded02">rtproto_str</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rt__netlink_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a></td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a6a90f17f258e36353f09375263324f41"></a><!-- doxytag: member="rt_netlink.c::MSG_TRUNC" ref="a6a90f17f258e36353f09375263324f41" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MSG_TRUNC&#160;&#160;&#160;0x20</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00026">26</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a60f6fcd7edb654d5d9936ad5e5bd2150"></a><!-- doxytag: member="rt_netlink.c::addattr32" ref="a60f6fcd7edb654d5d9936ad5e5bd2150" args="(struct nlmsghdr *n, int maxlen, int type, int data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int addattr32 </td>
          <td>(</td>
          <td class="paramtype">struct nlmsghdr *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxlen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01147">1147</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> len;
  <span class="keyword">struct </span>rtattr *rta;

  len = RTA_LENGTH (4);

  <span class="keywordflow">if</span> (NLMSG_ALIGN (<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>-&gt;nlmsg_len) + len &gt; maxlen)
    <span class="keywordflow">return</span> -1;

  rta = (<span class="keyword">struct </span>rtattr *) (((<span class="keywordtype">char</span> *) <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>) + NLMSG_ALIGN (n-&gt;nlmsg_len));
  rta-&gt;rta_type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  rta-&gt;rta_len = len;
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (RTA_DATA (rta), &amp;<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>, 4);
  n-&gt;nlmsg_len = NLMSG_ALIGN (n-&gt;nlmsg_len) + len;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afdf48243d7a7aca0b31a0a8647460244"></a><!-- doxytag: member="rt_netlink.c::addattr_l" ref="afdf48243d7a7aca0b31a0a8647460244" args="(struct nlmsghdr *n, int maxlen, int type, void *data, int alen)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int addattr_l </td>
          <td>(</td>
          <td class="paramtype">struct nlmsghdr *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxlen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>alen</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01105">1105</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> len;
  <span class="keyword">struct </span>rtattr *rta;

  len = RTA_LENGTH (alen);

  <span class="keywordflow">if</span> (NLMSG_ALIGN (<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>-&gt;nlmsg_len) + len &gt; maxlen)
    <span class="keywordflow">return</span> -1;

  rta = (<span class="keyword">struct </span>rtattr *) (((<span class="keywordtype">char</span> *) <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>) + NLMSG_ALIGN (n-&gt;nlmsg_len));
  rta-&gt;rta_type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  rta-&gt;rta_len = len;
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (RTA_DATA (rta), <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>, alen);
  n-&gt;nlmsg_len = NLMSG_ALIGN (n-&gt;nlmsg_len) + len;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aadaa9f17773804e3fbafba32b6cf9696"></a><!-- doxytag: member="rt_netlink.c::interface_lookup_netlink" ref="aadaa9f17773804e3fbafba32b6cf9696" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int interface_lookup_netlink </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01041">1041</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;

  <span class="comment">/* Get interface information. */</span>
  ret = <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (AF_PACKET, RTM_GETLINK, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
  ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a9b6329fe421003715b72f100fb709b09">netlink_interface</a>, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;

  <span class="comment">/* Get IPv4 address of the interfaces. */</span>
  ret = <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (AF_INET, RTM_GETADDR, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
  ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">netlink_interface_addr</a>, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* Get IPv6 address of the interfaces. */</span>
  ret = <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (AF_INET6, RTM_GETADDR, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
  ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">netlink_interface_addr</a>, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afea56d96d08fd5aab1d8e506cd4b25c0"></a><!-- doxytag: member="rt_netlink.c::kernel_add_ipv4" ref="afea56d96d08fd5aab1d8e506cd4b25c0" args="(struct prefix *p, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int kernel_add_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01721">1721</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a0e3c75709d3e9ee940e4162ba28716a5">netlink_route_multipath</a> (RTM_NEWROUTE, p, rib, AF_INET);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a597c594e7152b27e36d6be6cc3b80fb9"></a><!-- doxytag: member="rt_netlink.c::kernel_address_add_ipv4" ref="a597c594e7152b27e36d6be6cc3b80fb9" args="(struct interface *ifp, struct connected *ifc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int kernel_address_add_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>ifc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01806">1806</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a201c79d2e3c1eb272146e2e49391e524">netlink_address</a> (RTM_NEWADDR, AF_INET, ifp, ifc);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1a6e7419a16cae0c86088a6e0d13f242"></a><!-- doxytag: member="rt_netlink.c::kernel_address_delete_ipv4" ref="a1a6e7419a16cae0c86088a6e0d13f242" args="(struct interface *ifp, struct connected *ifc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int kernel_address_delete_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>ifc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01812">1812</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a201c79d2e3c1eb272146e2e49391e524">netlink_address</a> (RTM_DELADDR, AF_INET, ifp, ifc);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af2913f44f44cac8461b82b362ebbe986"></a><!-- doxytag: member="rt_netlink.c::kernel_delete_ipv4" ref="af2913f44f44cac8461b82b362ebbe986" args="(struct prefix *p, struct rib *rib)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int kernel_delete_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01727">1727</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a0e3c75709d3e9ee940e4162ba28716a5">netlink_route_multipath</a> (RTM_DELROUTE, p, rib, AF_INET);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0dbe43a64cbf994bf9189e7767f93342"></a><!-- doxytag: member="rt_netlink.c::kernel_init" ref="a0dbe43a64cbf994bf9189e7767f93342" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void kernel_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01868">1868</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> groups;

  groups = RTMGRP_LINK | RTMGRP_IPV4_ROUTE | RTMGRP_IPV4_IFADDR;
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  groups |= RTMGRP_IPV6_ROUTE | RTMGRP_IPV6_IFADDR;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
  <a class="code" href="rt__netlink_8c.html#a1c6085b143dcd6789d63c133afa5a0a4">netlink_socket</a> (&amp;<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>, groups);
  <a class="code" href="rt__netlink_8c.html#a1c6085b143dcd6789d63c133afa5a0a4">netlink_socket</a> (&amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>, 0);

  <span class="comment">/* Register kernel socket. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a> &gt; 0)
    {
      <span class="comment">/* Only want non-blocking on the netlink event socket */</span>
      <span class="keywordflow">if</span> (fcntl (<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, F_SETFL, O_NONBLOCK) &lt; 0)
    <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t set %s socket flags: %s&quot;</span>, <a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
        <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));

      <span class="comment">/* Set receive buffer size if it&#39;s set from command line */</span>
      <span class="keywordflow">if</span> (nl_rcvbufsize)
    <a class="code" href="rt__netlink_8c.html#a9d729425d97c0c5f1d2b293ba7c9a5a9">netlink_recvbuf</a> (&amp;<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>, nl_rcvbufsize);

      <a class="code" href="rt__netlink_8c.html#a79db799b8a7dcbbbdda00ee9b2c58953">netlink_install_filter</a> (<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, <a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>.<a class="code" href="structnlsock.html#a52642791667f9fa96c7af22c991d30bd">snl</a>.nl_pid);
      <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, <a class="code" href="rt__netlink_8c.html#a1a57616537b4466f86de043316933986">kernel_read</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1a57616537b4466f86de043316933986"></a><!-- doxytag: member="rt_netlink.c::kernel_read" ref="a1a57616537b4466f86de043316933986" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int kernel_read </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01822">1822</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keywordtype">int</span> sock;

  sock = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (thread);
  ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a37aed8052016d2d44f7d058d871d4b59">netlink_information_fetch</a>, &amp;<a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>);
  <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a9755f929805f6555c6f86d085309f0e2">master</a>, <a class="code" href="rt__netlink_8c.html#a1a57616537b4466f86de043316933986">kernel_read</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a>.<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a201c79d2e3c1eb272146e2e49391e524"></a><!-- doxytag: member="rt_netlink.c::netlink_address" ref="a201c79d2e3c1eb272146e2e49391e524" args="(int cmd, int family, struct interface *ifp, struct connected *ifc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_address </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cmd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>family</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>ifc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01757">1757</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> bytelen;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="keyword">struct</span>
  {
    <span class="keyword">struct </span>nlmsghdr <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;
    <span class="keyword">struct </span>ifaddrmsg ifa;
    <span class="keywordtype">char</span> buf[1024];
  } req;

  p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
  memset (&amp;req, 0, <span class="keyword">sizeof</span> req);

  bytelen = (family == AF_INET ? 4 : 16);

  req.n.nlmsg_len = NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> ifaddrmsg));
  req.n.nlmsg_flags = NLM_F_REQUEST;
  req.n.nlmsg_type = cmd;
  req.ifa.ifa_family = family;

  req.ifa.ifa_index = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
  req.ifa.ifa_prefixlen = p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;

  <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, IFA_LOCAL, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, bytelen);

  <span class="keywordflow">if</span> (family == AF_INET &amp;&amp; cmd == RTM_NEWADDR)
    {
      <span class="keywordflow">if</span> (!<a class="code" href="if_8h.html#a2443297a4d8f44cc5d2ce38fcbf345f2">CONNECTED_PEER</a>(ifc) &amp;&amp; ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>)
        {
          p = ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>;
          <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, IFA_BROADCAST, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>,
                     bytelen);
        }
    }

  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>, <a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">ZEBRA_IFA_SECONDARY</a>))
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (req.ifa.ifa_flags, IFA_F_SECONDARY);

  <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#abf60adc50689971ec30b6161150ffd2c">label</a>)
    <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, IFA_LABEL, ifc-&gt;<a class="code" href="structconnected.html#abf60adc50689971ec30b6161150ffd2c">label</a>,
               strlen (ifc-&gt;<a class="code" href="structconnected.html#abf60adc50689971ec30b6161150ffd2c">label</a>) + 1);

  <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#ae6893dc7903dc8ac58967ebd1ecb9929">netlink_talk</a> (&amp;req.n, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a37aed8052016d2d44f7d058d871d4b59"></a><!-- doxytag: member="rt_netlink.c::netlink_information_fetch" ref="a37aed8052016d2d44f7d058d871d4b59" args="(struct sockaddr_nl *snl, struct nlmsghdr *h)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_information_fetch </td>
          <td>(</td>
          <td class="paramtype">struct sockaddr_nl *&#160;</td>
          <td class="paramname"><em>snl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct nlmsghdr *&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01003">1003</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* JF: Ignore messages that aren&#39;t from the kernel */</span>
  <span class="keywordflow">if</span> ( snl-&gt;nl_pid != 0 )
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> ( <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Ignoring message from pid %u&quot;</span>, snl-&gt;nl_pid );
      <span class="keywordflow">return</span> 0;
    }

  <span class="keywordflow">switch</span> (h-&gt;nlmsg_type)
    {
    <span class="keywordflow">case</span> RTM_NEWROUTE:
      <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#ac8f765ce015c72754da14933f147f318">netlink_route_change</a> (snl, h);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> RTM_DELROUTE:
      <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#ac8f765ce015c72754da14933f147f318">netlink_route_change</a> (snl, h);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> RTM_NEWLINK:
      <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a45fac153b6c1d7c0a77f619989fe4954">netlink_link_change</a> (snl, h);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> RTM_DELLINK:
      <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a45fac153b6c1d7c0a77f619989fe4954">netlink_link_change</a> (snl, h);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> RTM_NEWADDR:
      <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">netlink_interface_addr</a> (snl, h);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> RTM_DELADDR:
      <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a012664fe29f2afdb3c0bf4c389d71b8b">netlink_interface_addr</a> (snl, h);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Unknown netlink nlmsg_type %d\n&quot;</span>, h-&gt;nlmsg_type);
      <span class="keywordflow">break</span>;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a79db799b8a7dcbbbdda00ee9b2c58953"></a><!-- doxytag: member="rt_netlink.c::netlink_install_filter" ref="a79db799b8a7dcbbbdda00ee9b2c58953" args="(int sock, __u32 pid)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void netlink_install_filter </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__u32&#160;</td>
          <td class="paramname"><em>pid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01837">1837</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>sock_filter <a class="code" href="structfilter.html">filter</a>[] = {
    <span class="comment">/* 0: ldh [4]             */</span>
    BPF_STMT(BPF_LD|BPF_ABS|BPF_H, offsetof(<span class="keyword">struct</span> nlmsghdr, nlmsg_type)),
    <span class="comment">/* 1: jeq 0x18 jt 3 jf 6  */</span>
    BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, htons(RTM_NEWROUTE), 1, 0),
    <span class="comment">/* 2: jeq 0x19 jt 3 jf 6  */</span>
    BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, htons(RTM_DELROUTE), 0, 3),
    <span class="comment">/* 3: ldw [12]        */</span>
    BPF_STMT(BPF_LD|BPF_ABS|BPF_W, offsetof(<span class="keyword">struct</span> nlmsghdr, nlmsg_pid)),
    <span class="comment">/* 4: jeq XX  jt 5 jf 6   */</span>
    BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, htonl(<a class="code" href="zebra_2main_8c.html#ae0d46a978d5cd6707411f276ad869b9c">pid</a>), 0, 1),
    <span class="comment">/* 5: ret 0    (skip)     */</span>
    BPF_STMT(BPF_RET|BPF_K, 0),
    <span class="comment">/* 6: ret 0xffff (keep)   */</span>
    BPF_STMT(BPF_RET|BPF_K, 0xffff),
  };

  <span class="keyword">struct </span>sock_fprog prog = {
    .len = <span class="keyword">sizeof</span>(filter) / <span class="keyword">sizeof</span>(filter[0]),
    .filter = filter,
  };

  <span class="keywordflow">if</span> (setsockopt(sock, SOL_SOCKET, SO_ATTACH_FILTER, &amp;prog, <span class="keyword">sizeof</span>(prog)) &lt; 0)
    <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t install socket filter: %s\n&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9b6329fe421003715b72f100fb709b09"></a><!-- doxytag: member="rt_netlink.c::netlink_interface" ref="a9b6329fe421003715b72f100fb709b09" args="(struct sockaddr_nl *snl, struct nlmsghdr *h)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_interface </td>
          <td>(</td>
          <td class="paramtype">struct sockaddr_nl *&#160;</td>
          <td class="paramname"><em>snl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct nlmsghdr *&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00432">432</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> len;
  <span class="keyword">struct </span>ifinfomsg *ifi;
  <span class="keyword">struct </span>rtattr *tb[IFLA_MAX + 1];
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  ifi = NLMSG_DATA (h);

  <span class="keywordflow">if</span> (h-&gt;nlmsg_type != RTM_NEWLINK)
    <span class="keywordflow">return</span> 0;

  len = h-&gt;nlmsg_len - NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> ifinfomsg));
  <span class="keywordflow">if</span> (len &lt; 0)
    <span class="keywordflow">return</span> -1;

  <span class="comment">/* Looking up interface name. */</span>
  memset (tb, 0, <span class="keyword">sizeof</span> tb);
  <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (tb, IFLA_MAX, IFLA_RTA (ifi), len);
  
<span class="preprocessor">#ifdef IFLA_WIRELESS</span>
<span class="preprocessor"></span>  <span class="comment">/* check for wireless messages to ignore */</span>
  <span class="keywordflow">if</span> ((tb[IFLA_WIRELESS] != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) &amp;&amp; (ifi-&gt;ifi_change == 0))
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ignoring IFLA_WIRELESS message&quot;</span>, __func__);
      <span class="keywordflow">return</span> 0;
    }
<span class="preprocessor">#endif </span><span class="comment">/* IFLA_WIRELESS */</span>

  <span class="keywordflow">if</span> (tb[IFLA_IFNAME] == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> -1;
  name = (<span class="keywordtype">char</span> *) RTA_DATA (tb[IFLA_IFNAME]);

  <span class="comment">/* Add interface. */</span>
  ifp = <a class="code" href="if_8c.html#ade08039f656683282d34ea210ea79447">if_get_by_name</a> (name);
  <a class="code" href="rt__netlink_8c.html#a5c99605e6bb5d2d0dd874f4336734806">set_ifindex</a>(ifp, ifi-&gt;ifi_index);
  ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> = ifi-&gt;ifi_flags &amp; 0x0000fffff;
  ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = *(uint32_t *) RTA_DATA (tb[IFLA_MTU]);
  ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = 1;

  <span class="comment">/* Hardware type and address. */</span>
  ifp-&gt;<a class="code" href="structinterface.html#ac17135561cfbdbe156036eead5da38c5">hw_type</a> = ifi-&gt;ifi_type;

  <span class="keywordflow">if</span> (tb[IFLA_ADDRESS])
    {
      <span class="keywordtype">int</span> <a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>;

      hw_addr_len = RTA_PAYLOAD (tb[IFLA_ADDRESS]);

      <span class="keywordflow">if</span> (hw_addr_len &gt; <a class="code" href="if_8h.html#ab832c2d3db56c12ab8e78f275ebc0c94">INTERFACE_HWADDR_MAX</a>)
        <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Hardware address is too large: %d&quot;</span>, hw_addr_len);
      <span class="keywordflow">else</span>
        {
          ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a> = <a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>;
          <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (ifp-&gt;<a class="code" href="structinterface.html#a6fe2f3c7e5be26c4e376b514d86f5c22">hw_addr</a>, RTA_DATA (tb[IFLA_ADDRESS]), hw_addr_len);

          <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>; i++)
            <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a6fe2f3c7e5be26c4e376b514d86f5c22">hw_addr</a>[i] != 0)
              <span class="keywordflow">break</span>;

          <span class="keywordflow">if</span> (i == hw_addr_len)
            ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a> = 0;
          <span class="keywordflow">else</span>
            ifp-&gt;<a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a> = <a class="code" href="structinterface.html#a6521c9be15367445abca01bbba9c2cb4">hw_addr_len</a>;
        }
    }

  <a class="code" href="interface_8c.html#afc558d5fc9ef4b3b59af78576e079a28">if_add_update</a> (ifp);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a012664fe29f2afdb3c0bf4c389d71b8b"></a><!-- doxytag: member="rt_netlink.c::netlink_interface_addr" ref="a012664fe29f2afdb3c0bf4c389d71b8b" args="(struct sockaddr_nl *snl, struct nlmsghdr *h)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_interface_addr </td>
          <td>(</td>
          <td class="paramtype">struct sockaddr_nl *&#160;</td>
          <td class="paramname"><em>snl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct nlmsghdr *&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00509">509</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> len;
  <span class="keyword">struct </span>ifaddrmsg *ifa;
  <span class="keyword">struct </span>rtattr *tb[IFA_MAX + 1];
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keywordtype">void</span> *addr;
  <span class="keywordtype">void</span> *broad;
  u_char <a class="code" href="structflags.html">flags</a> = 0;
  <span class="keywordtype">char</span> *label = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  ifa = NLMSG_DATA (h);

  <span class="keywordflow">if</span> (ifa-&gt;ifa_family != AF_INET
#ifdef HAVE_IPV6
      &amp;&amp; ifa-&gt;ifa_family != AF_INET6
#endif <span class="comment">/* HAVE_IPV6 */</span>
    )
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (h-&gt;nlmsg_type != RTM_NEWADDR &amp;&amp; h-&gt;nlmsg_type != RTM_DELADDR)
    <span class="keywordflow">return</span> 0;

  len = h-&gt;nlmsg_len - NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> ifaddrmsg));
  <span class="keywordflow">if</span> (len &lt; 0)
    <span class="keywordflow">return</span> -1;

  memset (tb, 0, <span class="keyword">sizeof</span> tb);
  <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (tb, IFA_MAX, IFA_RTA (ifa), len);

  ifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a> (ifa-&gt;ifa_index);
  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;netlink_interface_addr can&#39;t find interface by index %d&quot;</span>,
                ifa-&gt;ifa_index);
      <span class="keywordflow">return</span> -1;
    }

  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)    <span class="comment">/* remove this line to see initial ifcfg */</span>
    {
      <span class="keywordtype">char</span> buf[BUFSIZ];
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_interface_addr %s %s:&quot;</span>,
                 <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>, h-&gt;nlmsg_type), ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
      <span class="keywordflow">if</span> (tb[IFA_LOCAL])
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  IFA_LOCAL     %s/%d&quot;</span>,
            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (ifa-&gt;ifa_family, RTA_DATA (tb[IFA_LOCAL]),
                   buf, BUFSIZ), ifa-&gt;ifa_prefixlen);
      <span class="keywordflow">if</span> (tb[IFA_ADDRESS])
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  IFA_ADDRESS   %s/%d&quot;</span>,
            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (ifa-&gt;ifa_family, RTA_DATA (tb[IFA_ADDRESS]),
                               buf, BUFSIZ), ifa-&gt;ifa_prefixlen);
      <span class="keywordflow">if</span> (tb[IFA_BROADCAST])
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  IFA_BROADCAST %s/%d&quot;</span>,
            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (ifa-&gt;ifa_family, RTA_DATA (tb[IFA_BROADCAST]),
                   buf, BUFSIZ), ifa-&gt;ifa_prefixlen);
      <span class="keywordflow">if</span> (tb[IFA_LABEL] &amp;&amp; strcmp (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, RTA_DATA (tb[IFA_LABEL])))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  IFA_LABEL     %s&quot;</span>, (<span class="keywordtype">char</span> *)RTA_DATA (tb[IFA_LABEL]));
      
      <span class="keywordflow">if</span> (tb[IFA_CACHEINFO])
        {
          <span class="keyword">struct </span>ifa_cacheinfo *ci = RTA_DATA (tb[IFA_CACHEINFO]);
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  IFA_CACHEINFO pref %d, valid %d&quot;</span>,
                      ci-&gt;ifa_prefered, ci-&gt;ifa_valid);
        }
    }
  
  <span class="comment">/* logic copied from iproute2/ip/ipaddress.c:print_addrinfo() */</span>
  <span class="keywordflow">if</span> (tb[IFA_LOCAL] == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    tb[IFA_LOCAL] = tb[IFA_ADDRESS];
  <span class="keywordflow">if</span> (tb[IFA_ADDRESS] == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    tb[IFA_ADDRESS] = tb[IFA_LOCAL];
  
  <span class="comment">/* local interface address */</span>
  addr = (tb[IFA_LOCAL] ? RTA_DATA(tb[IFA_LOCAL]) : <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="comment">/* is there a peer address? */</span>
  <span class="keywordflow">if</span> (tb[IFA_ADDRESS] &amp;&amp;
      <a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a>(RTA_DATA(tb[IFA_ADDRESS]), RTA_DATA(tb[IFA_LOCAL]), RTA_PAYLOAD(tb[IFA_ADDRESS])))
    {
      broad = RTA_DATA(tb[IFA_ADDRESS]);
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="if_8h.html#aa84309c25e4cee681e361d14404618e9">ZEBRA_IFA_PEER</a>);
    }
  <span class="keywordflow">else</span>
    <span class="comment">/* seeking a broadcast address */</span>
    broad = (tb[IFA_BROADCAST] ? RTA_DATA(tb[IFA_BROADCAST]) : <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="comment">/* addr is primary key, SOL if we don&#39;t have one */</span>
  <span class="keywordflow">if</span> (addr == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: NULL address&quot;</span>, __func__);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Flags. */</span>
  <span class="keywordflow">if</span> (ifa-&gt;ifa_flags &amp; IFA_F_SECONDARY)
    <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (flags, <a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">ZEBRA_IFA_SECONDARY</a>);

  <span class="comment">/* Label */</span>
  <span class="keywordflow">if</span> (tb[IFA_LABEL])
    label = (<span class="keywordtype">char</span> *) RTA_DATA (tb[IFA_LABEL]);

  <span class="keywordflow">if</span> (ifp &amp;&amp; label &amp;&amp; strcmp (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, label) == 0)
    label = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Register interface address to the interface. */</span>
  <span class="keywordflow">if</span> (ifa-&gt;ifa_family == AF_INET)
    {
      <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWADDR)
        <a class="code" href="connected_8c.html#adfdf8a147f3057eebc9854c50f65d65b">connected_add_ipv4</a> (ifp, flags,
                            (<span class="keyword">struct</span> in_addr *) addr, ifa-&gt;ifa_prefixlen,
                            (<span class="keyword">struct</span> in_addr *) broad, label);
      <span class="keywordflow">else</span>
        <a class="code" href="connected_8c.html#a751e06dc0752d03ac5c08c34b99d83f7">connected_delete_ipv4</a> (ifp, flags,
                               (<span class="keyword">struct</span> in_addr *) addr, ifa-&gt;ifa_prefixlen,
                               (<span class="keyword">struct</span> in_addr *) broad);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (ifa-&gt;ifa_family == AF_INET6)
    {
      <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWADDR)
        connected_add_ipv6 (ifp, flags,
                            (<span class="keyword">struct</span> in6_addr *) addr, ifa-&gt;ifa_prefixlen,
                            (<span class="keyword">struct</span> in6_addr *) broad, label);
      <span class="keywordflow">else</span>
        connected_delete_ipv6 (ifp,
                               (<span class="keyword">struct</span> in6_addr *) addr, ifa-&gt;ifa_prefixlen,
                               (<span class="keyword">struct</span> in6_addr *) broad);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a45fac153b6c1d7c0a77f619989fe4954"></a><!-- doxytag: member="rt_netlink.c::netlink_link_change" ref="a45fac153b6c1d7c0a77f619989fe4954" args="(struct sockaddr_nl *snl, struct nlmsghdr *h)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_link_change </td>
          <td>(</td>
          <td class="paramtype">struct sockaddr_nl *&#160;</td>
          <td class="paramname"><em>snl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct nlmsghdr *&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00902">902</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> len;
  <span class="keyword">struct </span>ifinfomsg *ifi;
  <span class="keyword">struct </span>rtattr *tb[IFLA_MAX + 1];
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;

  ifi = NLMSG_DATA (h);

  <span class="keywordflow">if</span> (!(h-&gt;nlmsg_type == RTM_NEWLINK || h-&gt;nlmsg_type == RTM_DELLINK))
    {
      <span class="comment">/* If this is not link add/delete message so print warning. */</span>
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;netlink_link_change: wrong kernel message %d\n&quot;</span>,
                 h-&gt;nlmsg_type);
      <span class="keywordflow">return</span> 0;
    }

  len = h-&gt;nlmsg_len - NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> ifinfomsg));
  <span class="keywordflow">if</span> (len &lt; 0)
    <span class="keywordflow">return</span> -1;

  <span class="comment">/* Looking up interface name. */</span>
  memset (tb, 0, <span class="keyword">sizeof</span> tb);
  <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (tb, IFLA_MAX, IFLA_RTA (ifi), len);

<span class="preprocessor">#ifdef IFLA_WIRELESS</span>
<span class="preprocessor"></span>  <span class="comment">/* check for wireless messages to ignore */</span>
  <span class="keywordflow">if</span> ((tb[IFLA_WIRELESS] != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) &amp;&amp; (ifi-&gt;ifi_change == 0))
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ignoring IFLA_WIRELESS message&quot;</span>, __func__);
      <span class="keywordflow">return</span> 0;
    }
<span class="preprocessor">#endif </span><span class="comment">/* IFLA_WIRELESS */</span>
  
  <span class="keywordflow">if</span> (tb[IFLA_IFNAME] == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> -1;
  name = (<span class="keywordtype">char</span> *) RTA_DATA (tb[IFLA_IFNAME]);

  <span class="comment">/* Add interface. */</span>
  <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWLINK)
    {
      ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (name);

      <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifp-&gt;<a class="code" href="structinterface.html#ae145c01f63b3abaca8e3805f9e396c4a">status</a>, <a class="code" href="if_8h.html#a977548125c39a6ba021b2d0fde8f5a52">ZEBRA_INTERFACE_ACTIVE</a>))
        {
          <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
            ifp = <a class="code" href="if_8c.html#ade08039f656683282d34ea210ea79447">if_get_by_name</a> (name);

          <a class="code" href="rt__netlink_8c.html#a5c99605e6bb5d2d0dd874f4336734806">set_ifindex</a>(ifp, ifi-&gt;ifi_index);
          ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> = ifi-&gt;ifi_flags &amp; 0x0000fffff;
          ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = *(<span class="keywordtype">int</span> *) RTA_DATA (tb[IFLA_MTU]);
          ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = 1;

          <span class="comment">/* If new link is added. */</span>
          <a class="code" href="interface_8c.html#afc558d5fc9ef4b3b59af78576e079a28">if_add_update</a> (ifp);
        }
      <span class="keywordflow">else</span>
        {
          <span class="comment">/* Interface status change. */</span>
          <a class="code" href="rt__netlink_8c.html#a5c99605e6bb5d2d0dd874f4336734806">set_ifindex</a>(ifp, ifi-&gt;ifi_index);
          ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = *(<span class="keywordtype">int</span> *) RTA_DATA (tb[IFLA_MTU]);
          ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = 1;

          <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
            {
              ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> = ifi-&gt;ifi_flags &amp; 0x0000fffff;
              <span class="keywordflow">if</span> (!<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
                <a class="code" href="interface_8c.html#a07c9e55f4e6b0072a7ccbf902b0b3035">if_down</a> (ifp);
          <span class="keywordflow">else</span>
        <span class="comment">/* Must notify client daemons of new interface status. */</span>
            <a class="code" href="redistribute_8c.html#a47e3eef746ea4c7dd28652d126b29908">zebra_interface_up_update</a> (ifp);
            }
          <span class="keywordflow">else</span>
            {
              ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> = ifi-&gt;ifi_flags &amp; 0x0000fffff;
              <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
                <a class="code" href="interface_8c.html#a5ed3c13631e5c34358258aad230d5380">if_up</a> (ifp);
            }
        }
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* RTM_DELLINK. */</span>
      ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (name);

      <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
          <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_WARNING, <span class="stringliteral">&quot;interface %s is deleted but can&#39;t find&quot;</span>,
                name);
          <span class="keywordflow">return</span> 0;
        }

      <a class="code" href="interface_8c.html#a5ca58fe2209f09a828330810fc5a7d71">if_delete_update</a> (ifp);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a05c946cb96c4d4e3f828690ffb40058c"></a><!-- doxytag: member="rt_netlink.c::netlink_parse_info" ref="a05c946cb96c4d4e3f828690ffb40058c" args="(int(*filter)(struct sockaddr_nl *, struct nlmsghdr *), struct nlsock *nl)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_parse_info </td>
          <td>(</td>
          <td class="paramtype">int(*)(struct sockaddr_nl *, struct nlmsghdr *)&#160;</td>
          <td class="paramname"><em>filter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structnlsock.html">nlsock</a> *&#160;</td>
          <td class="paramname"><em>nl</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00274">274</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="structinterface.html#ae145c01f63b3abaca8e3805f9e396c4a">status</a>;
  <span class="keywordtype">int</span> ret = 0;
  <span class="keywordtype">int</span> error;

  <span class="keywordflow">while</span> (1)
    {
      <span class="keywordtype">char</span> buf[4096];
      <span class="keyword">struct </span>iovec iov = { buf, <span class="keyword">sizeof</span> buf };
      <span class="keyword">struct </span>sockaddr_nl snl;
      <span class="keyword">struct </span>msghdr <a class="code" href="structmsg.html">msg</a> = { (<span class="keywordtype">void</span> *) &amp;snl, <span class="keyword">sizeof</span> snl, &amp;iov, 1, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0 };
      <span class="keyword">struct </span>nlmsghdr *h;

      status = recvmsg (nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, &amp;msg, 0);
      <span class="keywordflow">if</span> (status &lt; 0)
        {
          <span class="keywordflow">if</span> (errno == EINTR)
            <span class="keywordflow">continue</span>;
          <span class="keywordflow">if</span> (errno == EWOULDBLOCK || errno == EAGAIN)
            <span class="keywordflow">break</span>;
          <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s recvmsg overrun: %s&quot;</span>,
        nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
          <span class="keywordflow">continue</span>;
        }

      <span class="keywordflow">if</span> (status == 0)
        {
          <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s EOF&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
          <span class="keywordflow">return</span> -1;
        }

      <span class="keywordflow">if</span> (msg.msg_namelen != <span class="keyword">sizeof</span> snl)
        {
          <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s sender address length error: length %d&quot;</span>,
                nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, msg.msg_namelen);
          <span class="keywordflow">return</span> -1;
        }
      
      <span class="keywordflow">for</span> (h = (<span class="keyword">struct</span> nlmsghdr *) buf; NLMSG_OK (h, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) status);
           h = NLMSG_NEXT (h, status))
        {
          <span class="comment">/* Finish of reading. */</span>
          <span class="keywordflow">if</span> (h-&gt;nlmsg_type == NLMSG_DONE)
            <span class="keywordflow">return</span> ret;

          <span class="comment">/* Error handling. */</span>
          <span class="keywordflow">if</span> (h-&gt;nlmsg_type == NLMSG_ERROR)
            {
              <span class="keyword">struct </span>nlmsgerr *err = (<span class="keyword">struct </span>nlmsgerr *) NLMSG_DATA (h);
          <span class="keywordtype">int</span> errnum = err-&gt;error;
          <span class="keywordtype">int</span> msg_type = err-&gt;msg.nlmsg_type;

              <span class="comment">/* If the error field is zero, then this is an ACK */</span>
              <span class="keywordflow">if</span> (err-&gt;error == 0)
                {
                  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
                    {
                      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s ACK: type=%s(%u), seq=%u, pid=%u&quot;</span>,
                                 __FUNCTION__, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
                                 <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>, err-&gt;msg.nlmsg_type),
                                 err-&gt;msg.nlmsg_type, err-&gt;msg.nlmsg_seq,
                                 err-&gt;msg.nlmsg_pid);
                    }

                  <span class="comment">/* return if not a multipart message, otherwise continue */</span>
                  <span class="keywordflow">if</span> (!(h-&gt;nlmsg_flags &amp; NLM_F_MULTI))
                    {
                      <span class="keywordflow">return</span> 0;
                    }
                  <span class="keywordflow">continue</span>;
                }

              <span class="keywordflow">if</span> (h-&gt;nlmsg_len &lt; NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> nlmsgerr)))
                {
                  <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s error: message truncated&quot;</span>,
                        nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
                  <span class="keywordflow">return</span> -1;
                }

              <span class="comment">/* Deal with errors that occur because of races in link handling */</span>
          <span class="keywordflow">if</span> (nl == &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>
          &amp;&amp; ((msg_type == RTM_DELROUTE &amp;&amp;
               (-errnum == ENODEV || -errnum == ESRCH))
              || (msg_type == RTM_NEWROUTE &amp;&amp; -errnum == EEXIST)))
        {
          <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: error: %s type=%s(%u), seq=%u, pid=%u&quot;</span>,
                nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (-errnum),
                <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>, msg_type),
                msg_type, err-&gt;msg.nlmsg_seq, err-&gt;msg.nlmsg_pid);
          <span class="keywordflow">return</span> 0;
        }

          <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s error: %s, type=%s(%u), seq=%u, pid=%u&quot;</span>,
            nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (-errnum),
            <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>, msg_type),
            msg_type, err-&gt;msg.nlmsg_seq, err-&gt;msg.nlmsg_pid);
              <span class="keywordflow">return</span> -1;
            }

          <span class="comment">/* OK we got netlink message. */</span>
          <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_parse_info: %s type %s(%u), seq=%u, pid=%u&quot;</span>,
                       nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
                       <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>, h-&gt;nlmsg_type), h-&gt;nlmsg_type,
                       h-&gt;nlmsg_seq, h-&gt;nlmsg_pid);

          <span class="comment">/* skip unsolicited messages originating from command socket */</span>
          <span class="keywordflow">if</span> (nl != &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a> &amp;&amp; h-&gt;nlmsg_pid == <a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>.<a class="code" href="structnlsock.html#a52642791667f9fa96c7af22c991d30bd">snl</a>.nl_pid)
            {
              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
                <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_parse_info: %s packet comes from %s&quot;</span>,
                            <a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>.<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
              <span class="keywordflow">continue</span>;
            }

          error = (*filter) (&amp;snl, h);
          <span class="keywordflow">if</span> (error &lt; 0)
            {
              <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s filter function error&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
              ret = error;
            }
        }

      <span class="comment">/* After error care. */</span>
      <span class="keywordflow">if</span> (msg.msg_flags &amp; <a class="code" href="rt__netlink_8c.html#a6a90f17f258e36353f09375263324f41">MSG_TRUNC</a>)
        {
          <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s error: message truncated&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
          <span class="keywordflow">continue</span>;
        }
      <span class="keywordflow">if</span> (status)
        {
          <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s error: data remnant size %d&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
                status);
          <span class="keywordflow">return</span> -1;
        }
    }
  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a983883b7ba265424c00f066796915bd0"></a><!-- doxytag: member="rt_netlink.c::netlink_parse_rtattr" ref="a983883b7ba265424c00f066796915bd0" args="(struct rtattr **tb, int max, struct rtattr *rta, int len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void netlink_parse_rtattr </td>
          <td>(</td>
          <td class="paramtype">struct rtattr **&#160;</td>
          <td class="paramname"><em>tb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct rtattr *&#160;</td>
          <td class="paramname"><em>rta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00418">418</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">while</span> (RTA_OK (rta, len))
    {
      <span class="keywordflow">if</span> (rta-&gt;rta_type &lt;= max)
        tb[rta-&gt;rta_type] = rta;
      rta = RTA_NEXT (rta, len);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9d729425d97c0c5f1d2b293ba7c9a5a9"></a><!-- doxytag: member="rt_netlink.c::netlink_recvbuf" ref="a9d729425d97c0c5f1d2b293ba7c9a5a9" args="(struct nlsock *nl, uint32_t newsize)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_recvbuf </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structnlsock.html">nlsock</a> *&#160;</td>
          <td class="paramname"><em>nl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>newsize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00116">116</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t oldsize;
  <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> newlen = <span class="keyword">sizeof</span>(newsize);
  <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> oldlen = <span class="keyword">sizeof</span>(oldsize);
  <span class="keywordtype">int</span> ret;

  ret = getsockopt(nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, SOL_SOCKET, SO_RCVBUF, &amp;oldsize, &amp;oldlen);
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t get %s receive buffer size: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
        <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      <span class="keywordflow">return</span> -1;
    }

  ret = setsockopt(nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, SOL_SOCKET, SO_RCVBUF, &amp;nl_rcvbufsize,
           <span class="keyword">sizeof</span>(nl_rcvbufsize));
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t set %s receive buffer size: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
        <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      <span class="keywordflow">return</span> -1;
    }

  ret = getsockopt(nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, SOL_SOCKET, SO_RCVBUF, &amp;newsize, &amp;newlen);
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t get %s receive buffer size: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
        <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      <span class="keywordflow">return</span> -1;
    }

  <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_INFO,
    <span class="stringliteral">&quot;Setting netlink socket receive buffer size: %u -&gt; %u&quot;</span>,
    oldsize, newsize);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a32cf277b5041d575e77cdad3f888a928"></a><!-- doxytag: member="rt_netlink.c::netlink_request" ref="a32cf277b5041d575e77cdad3f888a928" args="(int family, int type, struct nlsock *nl)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_request </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>family</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structnlsock.html">nlsock</a> *&#160;</td>
          <td class="paramname"><em>nl</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00214">214</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>sockaddr_nl snl;
  <span class="keywordtype">int</span> save_errno;

  <span class="keyword">struct</span>
  {
    <span class="keyword">struct </span>nlmsghdr nlh;
    <span class="keyword">struct </span>rtgenmsg <a class="code" href="bgp__route_8c.html#a7ffdcd98fe58cb9d89e7f6aa804288e1">g</a>;
  } req;


  <span class="comment">/* Check netlink socket. */</span>
  <span class="keywordflow">if</span> (nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a> &lt; 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s socket isn&#39;t active.&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>);
      <span class="keywordflow">return</span> -1;
    }

  memset (&amp;snl, 0, <span class="keyword">sizeof</span> snl);
  snl.nl_family = AF_NETLINK;

  memset (&amp;req, 0, <span class="keyword">sizeof</span> req);
  req.nlh.nlmsg_len = <span class="keyword">sizeof</span> req;
  req.nlh.nlmsg_type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  req.nlh.nlmsg_flags = NLM_F_ROOT | NLM_F_MATCH | NLM_F_REQUEST;
  req.nlh.nlmsg_pid = nl-&gt;<a class="code" href="structnlsock.html#a52642791667f9fa96c7af22c991d30bd">snl</a>.nl_pid;
  req.nlh.nlmsg_seq = ++nl-&gt;<a class="code" href="structnlsock.html#a45e4187569b7a314348d2f7bdcb3e76e">seq</a>;
  req.g.rtgen_family = family;

  <span class="comment">/* linux appears to check capabilities on every message </span>
<span class="comment">   * have to raise caps for every message sent</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
      <span class="keywordflow">return</span> -1;
    }

  ret = sendto (nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, (<span class="keywordtype">void</span> *) &amp;req, <span class="keyword">sizeof</span> req, 0,
                (<span class="keyword">struct</span> sockaddr *) &amp;snl, <span class="keyword">sizeof</span> snl);
  save_errno = errno;

  <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
    <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);

  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;%s sendto failed: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
            <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (save_errno));
      <span class="keywordflow">return</span> -1;
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af906bd1169159d6eea28f9438e4dbc23"></a><!-- doxytag: member="rt_netlink.c::netlink_route" ref="af906bd1169159d6eea28f9438e4dbc23" args="(int cmd, int family, void *dest, int length, void *gate, int index, int zebra_flags, int table)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_route </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cmd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>family</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>zebra_flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>table</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01221">1221</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keywordtype">int</span> bytelen;
  <span class="keyword">struct </span>sockaddr_nl snl;
  <span class="keywordtype">int</span> discard;

  <span class="keyword">struct</span>
  {
    <span class="keyword">struct </span>nlmsghdr <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;
    <span class="keyword">struct </span>rtmsg r;
    <span class="keywordtype">char</span> buf[1024];
  } req;

  memset (&amp;req, 0, <span class="keyword">sizeof</span> req);

  bytelen = (family == AF_INET ? 4 : 16);

  req.n.nlmsg_len = NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtmsg));
  req.n.nlmsg_flags = NLM_F_CREATE | NLM_F_REQUEST;
  req.n.nlmsg_type = cmd;
  req.r.rtm_family = family;
  req.r.rtm_table = table;
  req.r.rtm_dst_len = <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
  req.r.rtm_protocol = RTPROT_ZEBRA;
  req.r.rtm_scope = RT_SCOPE_UNIVERSE;

  <span class="keywordflow">if</span> ((zebra_flags &amp; <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>)
      || (zebra_flags &amp; <a class="code" href="zebra_8h.html#ade86fda8e343fab895b8996b27358ca0">ZEBRA_FLAG_REJECT</a>))
    discard = 1;
  <span class="keywordflow">else</span>
    discard = 0;

  <span class="keywordflow">if</span> (cmd == RTM_NEWROUTE)
    {
      <span class="keywordflow">if</span> (discard)
        {
          <span class="keywordflow">if</span> (zebra_flags &amp; ZEBRA_FLAG_BLACKHOLE)
            req.r.rtm_type = RTN_BLACKHOLE;
          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (zebra_flags &amp; ZEBRA_FLAG_REJECT)
            req.r.rtm_type = RTN_UNREACHABLE;
          <span class="keywordflow">else</span>
            <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (RTN_BLACKHOLE != RTN_UNREACHABLE);  <span class="comment">/* false */</span>
        }
      <span class="keywordflow">else</span>
        req.r.rtm_type = RTN_UNICAST;
    }

  <span class="keywordflow">if</span> (dest)
    <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_DST, dest, bytelen);

  <span class="keywordflow">if</span> (!discard)
    {
      <span class="keywordflow">if</span> (gate)
        <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_GATEWAY, gate, bytelen);
      <span class="keywordflow">if</span> (index &gt; 0)
        <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_OIF, index);
    }

  <span class="comment">/* Destination netlink address. */</span>
  memset (&amp;snl, 0, <span class="keyword">sizeof</span> snl);
  snl.nl_family = AF_NETLINK;

  <span class="comment">/* Talk to netlink socket. */</span>
  ret = <a class="code" href="rt__netlink_8c.html#ae6893dc7903dc8ac58967ebd1ecb9929">netlink_talk</a> (&amp;req.n, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> -1;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac8f765ce015c72754da14933f147f318"></a><!-- doxytag: member="rt_netlink.c::netlink_route_change" ref="ac8f765ce015c72754da14933f147f318" args="(struct sockaddr_nl *snl, struct nlmsghdr *h)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_route_change </td>
          <td>(</td>
          <td class="paramtype">struct sockaddr_nl *&#160;</td>
          <td class="paramname"><em>snl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct nlmsghdr *&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00761">761</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> len;
  <span class="keyword">struct </span>rtmsg *rtm;
  <span class="keyword">struct </span>rtattr *tb[RTA_MAX + 1];

  <span class="keywordtype">char</span> anyaddr[16] = { 0 };

  <span class="keywordtype">int</span> index;
  <span class="keywordtype">int</span> table;
  <span class="keywordtype">void</span> *dest;
  <span class="keywordtype">void</span> *gate;
  <span class="keywordtype">void</span> *src;

  rtm = NLMSG_DATA (h);

  <span class="keywordflow">if</span> (!(h-&gt;nlmsg_type == RTM_NEWROUTE || h-&gt;nlmsg_type == RTM_DELROUTE))
    {
      <span class="comment">/* If this is not route add/delete message print warning. */</span>
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Kernel message: %d\n&quot;</span>, h-&gt;nlmsg_type);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* Connected route. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s %s %s proto %s&quot;</span>,
               h-&gt;nlmsg_type ==
               RTM_NEWROUTE ? <span class="stringliteral">&quot;RTM_NEWROUTE&quot;</span> : <span class="stringliteral">&quot;RTM_DELROUTE&quot;</span>,
               rtm-&gt;rtm_family == AF_INET ? <span class="stringliteral">&quot;ipv4&quot;</span> : <span class="stringliteral">&quot;ipv6&quot;</span>,
               rtm-&gt;rtm_type == RTN_UNICAST ? <span class="stringliteral">&quot;unicast&quot;</span> : <span class="stringliteral">&quot;multicast&quot;</span>,
               <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#a3868f54f344479068c738714723ded02">rtproto_str</a>, rtm-&gt;rtm_protocol));

  <span class="keywordflow">if</span> (rtm-&gt;rtm_type != RTN_UNICAST)
    {
      <span class="keywordflow">return</span> 0;
    }

  table = rtm-&gt;rtm_table;
  <span class="keywordflow">if</span> (table != <a class="code" href="zebra_8h.html#a905cf7650e977e4fec30736f4984507a">RT_TABLE_MAIN</a> &amp;&amp; table != <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a5cde5668ed28c239047f536ad2b9d1c6">rtm_table_default</a>)
    {
      <span class="keywordflow">return</span> 0;
    }

  len = h-&gt;nlmsg_len - NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtmsg));
  <span class="keywordflow">if</span> (len &lt; 0)
    <span class="keywordflow">return</span> -1;

  memset (tb, 0, <span class="keyword">sizeof</span> tb);
  <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (tb, RTA_MAX, RTM_RTA (rtm), len);

  <span class="keywordflow">if</span> (rtm-&gt;rtm_flags &amp; RTM_F_CLONED)
    <span class="keywordflow">return</span> 0;
  <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_REDIRECT)
    <span class="keywordflow">return</span> 0;
  <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_KERNEL)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_ZEBRA &amp;&amp; h-&gt;nlmsg_type == RTM_NEWROUTE)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (rtm-&gt;rtm_src_len != 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;netlink_route_change(): no src len&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }

  index = 0;
  dest = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  gate = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  src = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (tb[RTA_OIF])
    index = *(<span class="keywordtype">int</span> *) RTA_DATA (tb[RTA_OIF]);

  <span class="keywordflow">if</span> (tb[RTA_DST])
    dest = RTA_DATA (tb[RTA_DST]);
  <span class="keywordflow">else</span>
    dest = anyaddr;

  <span class="keywordflow">if</span> (tb[RTA_GATEWAY])
    gate = RTA_DATA (tb[RTA_GATEWAY]);

  <span class="keywordflow">if</span> (tb[RTA_PREFSRC])
    src = RTA_DATA (tb[RTA_PREFSRC]);

  <span class="keywordflow">if</span> (rtm-&gt;rtm_family == AF_INET)
    {
      <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, dest, 4);
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = rtm-&gt;rtm_dst_len;

      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
        {
          <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWROUTE)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RTM_NEWROUTE %s/%d&quot;</span>,
                       inet_ntoa (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen);
          <span class="keywordflow">else</span>
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RTM_DELROUTE %s/%d&quot;</span>,
                       inet_ntoa (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen);
        }

      <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWROUTE)
        <a class="code" href="rib_8h.html#a9f8cbb8feedf49125b4da9b87c36fedb">rib_add_ipv4</a> (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, 0, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, gate, src, index, table, 0, 0);
      <span class="keywordflow">else</span>
        <a class="code" href="rib_8h.html#a71bb35924cbe7fc66195c1876c77bb44">rib_delete_ipv4</a> (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, 0, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, gate, index, table);
    }

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (rtm-&gt;rtm_family == AF_INET6)
    {
      <span class="keyword">struct </span>prefix_ipv6 <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
      <span class="keywordtype">char</span> buf[BUFSIZ];

      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET6;
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, dest, 16);
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = rtm-&gt;rtm_dst_len;

      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
        {
          <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWROUTE)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RTM_NEWROUTE %s/%d&quot;</span>,
                       <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, buf, BUFSIZ),
                       <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen);
          <span class="keywordflow">else</span>
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RTM_DELROUTE %s/%d&quot;</span>,
                       <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, buf, BUFSIZ),
                       <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen);
        }

      <span class="keywordflow">if</span> (h-&gt;nlmsg_type == RTM_NEWROUTE)
        rib_add_ipv6 (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, 0, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, gate, index, table, 0, 0);
      <span class="keywordflow">else</span>
        rib_delete_ipv6 (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, 0, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, gate, index, table);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0e3c75709d3e9ee940e4162ba28716a5"></a><!-- doxytag: member="rt_netlink.c::netlink_route_multipath" ref="a0e3c75709d3e9ee940e4162ba28716a5" args="(int cmd, struct prefix *p, struct rib *rib, int family)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_route_multipath </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cmd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"><em>rib</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>family</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01295">1295</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> bytelen;
  <span class="keyword">struct </span>sockaddr_nl snl;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keywordtype">int</span> nexthop_num = 0;
  <span class="keywordtype">int</span> discard;

  <span class="keyword">struct</span>
  {
    <span class="keyword">struct </span>nlmsghdr <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;
    <span class="keyword">struct </span>rtmsg r;
    <span class="keywordtype">char</span> buf[1024];
  } req;

  memset (&amp;req, 0, <span class="keyword">sizeof</span> req);

  bytelen = (family == AF_INET ? 4 : 16);

  req.n.nlmsg_len = NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtmsg));
  req.n.nlmsg_flags = NLM_F_CREATE | NLM_F_REQUEST;
  req.n.nlmsg_type = cmd;
  req.r.rtm_family = family;
  req.r.rtm_table = rib-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a>;
  req.r.rtm_dst_len = p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
  req.r.rtm_protocol = RTPROT_ZEBRA;
  req.r.rtm_scope = RT_SCOPE_UNIVERSE;

  <span class="keywordflow">if</span> ((rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> &amp; <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>) || (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> &amp; <a class="code" href="zebra_8h.html#ade86fda8e343fab895b8996b27358ca0">ZEBRA_FLAG_REJECT</a>))
    discard = 1;
  <span class="keywordflow">else</span>
    discard = 0;

  <span class="keywordflow">if</span> (cmd == RTM_NEWROUTE)
    {
      <span class="keywordflow">if</span> (discard)
        {
          <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> &amp; <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>)
            req.r.rtm_type = RTN_BLACKHOLE;
          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> &amp; <a class="code" href="zebra_8h.html#ade86fda8e343fab895b8996b27358ca0">ZEBRA_FLAG_REJECT</a>)
            req.r.rtm_type = RTN_UNREACHABLE;
          <span class="keywordflow">else</span>
            <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (RTN_BLACKHOLE != RTN_UNREACHABLE);  <span class="comment">/* false */</span>
        }
      <span class="keywordflow">else</span>
        req.r.rtm_type = RTN_UNICAST;
    }

  <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_DST, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, bytelen);

  <span class="comment">/* Metric. */</span>
  <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PRIORITY, rib-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a>);

  <span class="keywordflow">if</span> (discard)
    {
      <span class="keywordflow">if</span> (cmd == RTM_NEWROUTE)
        <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
          <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);
      <span class="keywordflow">goto</span> skip;
    }

  <span class="comment">/* Multipath case. */</span>
  <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#abe75551b41daecde649cb9864ef2dd01">nexthop_active_num</a> == 1 || MULTIPATH_NUM == 1)
    {
      <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
        {

          <span class="keywordflow">if</span> ((cmd == RTM_NEWROUTE
               &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>))
              || (cmd == RTM_DELROUTE
                  &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>)))
            {

              <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>))
                {
                  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
                    {
                      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
                        (<span class="stringliteral">&quot;netlink_route_multipath() (recursive, 1 hop): &quot;</span>
                         <span class="stringliteral">&quot;%s %s/%d, type %s&quot;</span>, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>, cmd),
#ifdef HAVE_IPV6
             (family == AF_INET) ? inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>) :
             inet6_ntoa (p-&gt;u.prefix6),
#<span class="keywordflow">else</span>
             inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
#endif <span class="comment">/* HAVE_IPV6 */</span>
             
             p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, <a class="code" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a>[nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a>]);
                    }

                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
            {
              <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_GATEWAY,
                 &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
                      <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
                  <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a>(&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PREFSRC,
                     &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
                   <span class="stringliteral">&quot;1 hop): nexthop via %s if %u&quot;</span>,
                   inet_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>),
                   nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
            }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>)
            {
              <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_GATEWAY,
                 &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.ipv6, bytelen);

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
                   <span class="stringliteral">&quot;1 hop): nexthop via %s if %u&quot;</span>,
                   inet6_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.ipv6),
                   nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
            }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>)
            {
              <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_OIF,
                 nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
                      <span class="keywordflow">if</span> ((nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>
                           || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>)
                          &amp;&amp; nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
                        <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PREFSRC,
                 &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
                   <span class="stringliteral">&quot;1 hop): nexthop via if %u&quot;</span>,
                   nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
            }
                }
              <span class="keywordflow">else</span>
                {
                  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
                    {
                      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
                        (<span class="stringliteral">&quot;netlink_route_multipath() (single hop): &quot;</span>
                         <span class="stringliteral">&quot;%s %s/%d, type %s&quot;</span>, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>, cmd),
#ifdef HAVE_IPV6
             (family == AF_INET) ? inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>) :
             inet6_ntoa (p-&gt;u.prefix6),
#<span class="keywordflow">else</span>
             inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
#endif <span class="comment">/* HAVE_IPV6 */</span>
             p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, <a class="code" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a>[nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>]);
                    }

                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
            {
              <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_GATEWAY,
                 &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
              <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
                        <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PREFSRC,
                 &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (single hop): &quot;</span>
                   <span class="stringliteral">&quot;nexthop via %s if %u&quot;</span>,
                   inet_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>),
                   nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
            }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>)
            {
              <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_GATEWAY,
                 &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6, bytelen);

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (single hop): &quot;</span>
                   <span class="stringliteral">&quot;nexthop via %s if %u&quot;</span>,
                   inet6_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6),
                   nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
            }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
            {
              <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_OIF, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);

              <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
                        <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PREFSRC,
                 &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (single hop): &quot;</span>
                   <span class="stringliteral">&quot;nexthop via if %u&quot;</span>, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
            }
                  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>)
            {
              <a class="code" href="rt__netlink_8c.html#a60f6fcd7edb654d5d9936ad5e5bd2150">addattr32</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_OIF, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (single hop): &quot;</span>
                   <span class="stringliteral">&quot;nexthop via if %u&quot;</span>, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
            }
                }

              <span class="keywordflow">if</span> (cmd == RTM_NEWROUTE)
                <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);

              nexthop_num++;
              <span class="keywordflow">break</span>;
            }
        }
    }
  <span class="keywordflow">else</span>
    {
      <span class="keywordtype">char</span> buf[1024];
      <span class="keyword">struct </span>rtattr *rta = (<span class="keywordtype">void</span> *) buf;
      <span class="keyword">struct </span>rtnexthop *rtnh;
      <span class="keyword">union </span><a class="code" href="uniong__addr.html">g_addr</a> *src = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

      rta-&gt;rta_type = RTA_MULTIPATH;
      rta-&gt;rta_len = RTA_LENGTH (0);
      rtnh = RTA_DATA (rta);

      nexthop_num = 0;
      <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>;
           nexthop &amp;&amp; (MULTIPATH_NUM == 0 || nexthop_num &lt; MULTIPATH_NUM);
           nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
        {
          <span class="keywordflow">if</span> ((cmd == RTM_NEWROUTE
               &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>))
              || (cmd == RTM_DELROUTE
                  &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>)))
            {
              nexthop_num++;

              rtnh-&gt;rtnh_len = <span class="keyword">sizeof</span> (*rtnh);
              rtnh-&gt;rtnh_flags = 0;
              rtnh-&gt;rtnh_hops = 0;
              rta-&gt;rta_len += rtnh-&gt;rtnh_len;

              <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>))
                {
                  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
                    {
                      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_route_multipath() &quot;</span>
                         <span class="stringliteral">&quot;(recursive, multihop): %s %s/%d type %s&quot;</span>,
             <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>, cmd),
#ifdef HAVE_IPV6
             (family == AF_INET) ? inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>) :
             inet6_ntoa (p-&gt;u.prefix6),
#<span class="keywordflow">else</span>
             inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
#endif <span class="comment">/* HAVE_IPV6 */</span>
                         p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, <a class="code" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a>[nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a>]);
                    }
                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
                    {
                      <a class="code" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">rta_addattr_l</a> (rta, 4096, RTA_GATEWAY,
                                     &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
                      rtnh-&gt;rtnh_len += <span class="keyword">sizeof</span> (<span class="keyword">struct </span>rtattr) + 4;

              <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
                        src = &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
                   <span class="stringliteral">&quot;multihop): nexthop via %s if %u&quot;</span>,
                   inet_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>),
                   nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
                    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>)
            {
              <a class="code" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">rta_addattr_l</a> (rta, 4096, RTA_GATEWAY,
                     &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.ipv6, bytelen);

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
                   <span class="stringliteral">&quot;multihop): nexthop via %s if %u&quot;</span>,
                   inet6_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.ipv6),
                   nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
            }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
                  <span class="comment">/* ifindex */</span>
                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>
              || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>)
            {
              rtnh-&gt;rtnh_ifindex = nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>;
                      <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
                        src = &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
                   <span class="stringliteral">&quot;multihop): nexthop via if %u&quot;</span>,
                   nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
            }
          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a50eb39bc450246638a981d46d3c4a579">rtype</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>)
            {
              rtnh-&gt;rtnh_ifindex = nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>;

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (recursive, &quot;</span>
                   <span class="stringliteral">&quot;multihop): nexthop via if %u&quot;</span>,
                   nexthop-&gt;<a class="code" href="structnexthop.html#ab5eb4b0612493a281e860228317ece0f">rifindex</a>);
            }
                  <span class="keywordflow">else</span>
            {
              rtnh-&gt;rtnh_ifindex = 0;
            }
                }
              <span class="keywordflow">else</span>
                {
                  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
                    {
                      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_route_multipath() (multihop): &quot;</span>
                         <span class="stringliteral">&quot;%s %s/%d, type %s&quot;</span>, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>, cmd),
#ifdef HAVE_IPV6
             (family == AF_INET) ? inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>) :
             inet6_ntoa (p-&gt;u.prefix6),
#<span class="keywordflow">else</span>
             inet_ntoa (p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
#endif <span class="comment">/* HAVE_IPV6 */</span>
             p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, <a class="code" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a>[nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a>]);
                    }
                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>)
                    {
              <a class="code" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">rta_addattr_l</a> (rta, 4096, RTA_GATEWAY,
                     &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);
              rtnh-&gt;rtnh_len += <span class="keyword">sizeof</span> (<span class="keyword">struct </span>rtattr) + 4;

              <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
                        src = &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;

                      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (multihop): &quot;</span>
                   <span class="stringliteral">&quot;nexthop via %s if %u&quot;</span>,
                   inet_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>),
                   nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
                    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>)
            { 
              <a class="code" href="rt__netlink_8c.html#af0f600eadb5f64096f48a229a717e698">rta_addattr_l</a> (rta, 4096, RTA_GATEWAY,
                     &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6, bytelen);

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (multihop): &quot;</span>
                   <span class="stringliteral">&quot;nexthop via %s if %u&quot;</span>,
                   inet6_ntoa (nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.ipv6),
                   nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
            }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
                  <span class="comment">/* ifindex */</span>
                  <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>
              || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>)
                    {
              rtnh-&gt;rtnh_ifindex = nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;
              <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr)
            src = &amp;nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;
              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (multihop): &quot;</span>
                   <span class="stringliteral">&quot;nexthop via if %u&quot;</span>, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
            }
                  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>
                      || nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>)
            {
              rtnh-&gt;rtnh_ifindex = nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;

              <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;netlink_route_multipath() (multihop): &quot;</span>
                   <span class="stringliteral">&quot;nexthop via if %u&quot;</span>, nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
            }
                  <span class="keywordflow">else</span>
            {
              rtnh-&gt;rtnh_ifindex = 0;
            }
                }
              rtnh = RTNH_NEXT (rtnh);

              <span class="keywordflow">if</span> (cmd == RTM_NEWROUTE)
                <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);
            }
        }
      <span class="keywordflow">if</span> (src)
        <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, <span class="keyword">sizeof</span> req, RTA_PREFSRC, &amp;src-&gt;<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, bytelen);

      <span class="keywordflow">if</span> (rta-&gt;rta_len &gt; RTA_LENGTH (0))
        <a class="code" href="rt__netlink_8c.html#afdf48243d7a7aca0b31a0a8647460244">addattr_l</a> (&amp;req.n, 1024, RTA_MULTIPATH, RTA_DATA (rta),
                   RTA_PAYLOAD (rta));
    }

  <span class="comment">/* If there is no useful nexthop then return. */</span>
  <span class="keywordflow">if</span> (nexthop_num == 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_route_multipath(): No useful nexthop.&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }

skip:

  <span class="comment">/* Destination netlink address. */</span>
  memset (&amp;snl, 0, <span class="keyword">sizeof</span> snl);
  snl.nl_family = AF_NETLINK;

  <span class="comment">/* Talk to netlink socket. */</span>
  <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#ae6893dc7903dc8ac58967ebd1ecb9929">netlink_talk</a> (&amp;req.n, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ade2bbd0951e2dc56765b5651836c87ce"></a><!-- doxytag: member="rt_netlink.c::netlink_route_read" ref="ade2bbd0951e2dc56765b5651836c87ce" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int netlink_route_read </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01077">1077</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;

  <span class="comment">/* Get IPv4 routing table. */</span>
  ret = <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (AF_INET, RTM_GETROUTE, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
  ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a9c04be98bf7c5f03642b435673c9bcd4">netlink_routing_table</a>, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;

<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="comment">/* Get IPv6 routing table. */</span>
  ret = <a class="code" href="rt__netlink_8c.html#a32cf277b5041d575e77cdad3f888a928">netlink_request</a> (AF_INET6, RTM_GETROUTE, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
  ret = <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a9c04be98bf7c5f03642b435673c9bcd4">netlink_routing_table</a>, &amp;<a class="code" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span> ret;
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9c04be98bf7c5f03642b435673c9bcd4"></a><!-- doxytag: member="rt_netlink.c::netlink_routing_table" ref="a9c04be98bf7c5f03642b435673c9bcd4" args="(struct sockaddr_nl *snl, struct nlmsghdr *h)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_routing_table </td>
          <td>(</td>
          <td class="paramtype">struct sockaddr_nl *&#160;</td>
          <td class="paramname"><em>snl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct nlmsghdr *&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00644">644</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> len;
  <span class="keyword">struct </span>rtmsg *rtm;
  <span class="keyword">struct </span>rtattr *tb[RTA_MAX + 1];
  u_char <a class="code" href="structflags.html">flags</a> = 0;

  <span class="keywordtype">char</span> anyaddr[16] = { 0 };

  <span class="keywordtype">int</span> index;
  <span class="keywordtype">int</span> table;
  <span class="keywordtype">int</span> <a class="code" href="structmetric.html">metric</a>;

  <span class="keywordtype">void</span> *dest;
  <span class="keywordtype">void</span> *gate;
  <span class="keywordtype">void</span> *src;

  rtm = NLMSG_DATA (h);

  <span class="keywordflow">if</span> (h-&gt;nlmsg_type != RTM_NEWROUTE)
    <span class="keywordflow">return</span> 0;
  <span class="keywordflow">if</span> (rtm-&gt;rtm_type != RTN_UNICAST)
    <span class="keywordflow">return</span> 0;

  table = rtm-&gt;rtm_table;
<span class="preprocessor">#if 0                           </span><span class="comment">/* we weed them out later in rib_weed_tables () */</span>
  <span class="keywordflow">if</span> (table != <a class="code" href="zebra_8h.html#a905cf7650e977e4fec30736f4984507a">RT_TABLE_MAIN</a> &amp;&amp; table != <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>.<a class="code" href="structzebra__t.html#a5cde5668ed28c239047f536ad2b9d1c6">rtm_table_default</a>)
    <span class="keywordflow">return</span> 0;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
  len = h-&gt;nlmsg_len - NLMSG_LENGTH (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> rtmsg));
  <span class="keywordflow">if</span> (len &lt; 0)
    <span class="keywordflow">return</span> -1;

  memset (tb, 0, <span class="keyword">sizeof</span> tb);
  <a class="code" href="rt__netlink_8c.html#a983883b7ba265424c00f066796915bd0">netlink_parse_rtattr</a> (tb, RTA_MAX, RTM_RTA (rtm), len);

  <span class="keywordflow">if</span> (rtm-&gt;rtm_flags &amp; RTM_F_CLONED)
    <span class="keywordflow">return</span> 0;
  <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_REDIRECT)
    <span class="keywordflow">return</span> 0;
  <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_KERNEL)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (rtm-&gt;rtm_src_len != 0)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Route which inserted by Zebra. */</span>
  <span class="keywordflow">if</span> (rtm-&gt;rtm_protocol == RTPROT_ZEBRA)
    flags |= <a class="code" href="zebra_8h.html#a31c75681286a8a6a7311c55d8db8409e">ZEBRA_FLAG_SELFROUTE</a>;

  index = 0;
  metric = 0;
  dest = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  gate = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  src = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (tb[RTA_OIF])
    index = *(<span class="keywordtype">int</span> *) RTA_DATA (tb[RTA_OIF]);

  <span class="keywordflow">if</span> (tb[RTA_DST])
    dest = RTA_DATA (tb[RTA_DST]);
  <span class="keywordflow">else</span>
    dest = anyaddr;

  <span class="keywordflow">if</span> (tb[RTA_PREFSRC])
    src = RTA_DATA (tb[RTA_PREFSRC]);

  <span class="comment">/* Multipath treatment is needed. */</span>
  <span class="keywordflow">if</span> (tb[RTA_GATEWAY])
    gate = RTA_DATA (tb[RTA_GATEWAY]);

  <span class="keywordflow">if</span> (tb[RTA_PRIORITY])
    metric = *(<span class="keywordtype">int</span> *) RTA_DATA(tb[RTA_PRIORITY]);

  <span class="keywordflow">if</span> (rtm-&gt;rtm_family == AF_INET)
    {
      <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, dest, 4);
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = rtm-&gt;rtm_dst_len;

      <a class="code" href="rib_8h.html#a9f8cbb8feedf49125b4da9b87c36fedb">rib_add_ipv4</a> (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, flags, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, gate, src, index, table, metric, 0);
    }
<span class="preprocessor">#ifdef HAVE_IPV6</span>
<span class="preprocessor"></span>  <span class="keywordflow">if</span> (rtm-&gt;rtm_family == AF_INET6)
    {
      <span class="keyword">struct </span>prefix_ipv6 <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET6;
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, dest, 16);
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = rtm-&gt;rtm_dst_len;

      rib_add_ipv6 (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>, flags, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, gate, index, table,
            metric, 0);
    }
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1c6085b143dcd6789d63c133afa5a0a4"></a><!-- doxytag: member="rt_netlink.c::netlink_socket" ref="a1c6085b143dcd6789d63c133afa5a0a4" args="(struct nlsock *nl, unsigned long groups)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_socket </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structnlsock.html">nlsock</a> *&#160;</td>
          <td class="paramname"><em>nl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>groups</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00156">156</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>sockaddr_nl snl;
  <span class="keywordtype">int</span> sock;
  <span class="keywordtype">int</span> namelen;
  <span class="keywordtype">int</span> save_errno;

  sock = socket (AF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
  <span class="keywordflow">if</span> (sock &lt; 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t open %s socket: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
            <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      <span class="keywordflow">return</span> -1;
    }

  memset (&amp;snl, 0, <span class="keyword">sizeof</span> snl);
  snl.nl_family = AF_NETLINK;
  snl.nl_groups = groups;

  <span class="comment">/* Bind the socket to the netlink structure for anything. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
      <span class="keywordflow">return</span> -1;
    }

  ret = bind (sock, (<span class="keyword">struct</span> sockaddr *) &amp;snl, <span class="keyword">sizeof</span> snl);
  save_errno = errno;
  <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
    <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);

  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t bind %s socket to group 0x%x: %s&quot;</span>,
            nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>, snl.nl_groups, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (save_errno));
      close (sock);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* multiple netlink sockets will have different nl_pid */</span>
  namelen = <span class="keyword">sizeof</span> snl;
  ret = getsockname (sock, (<span class="keyword">struct</span> sockaddr *) &amp;snl, (<a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> *) &amp;namelen);
  <span class="keywordflow">if</span> (ret &lt; 0 || namelen != <span class="keyword">sizeof</span> snl)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t get %s socket name: %s&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
            <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      close (sock);
      <span class="keywordflow">return</span> -1;
    }

  nl-&gt;<a class="code" href="structnlsock.html#a52642791667f9fa96c7af22c991d30bd">snl</a> = snl;
  nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a> = sock;
  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae6893dc7903dc8ac58967ebd1ecb9929"></a><!-- doxytag: member="rt_netlink.c::netlink_talk" ref="ae6893dc7903dc8ac58967ebd1ecb9929" args="(struct nlmsghdr *n, struct nlsock *nl)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_talk </td>
          <td>(</td>
          <td class="paramtype">struct nlmsghdr *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structnlsock.html">nlsock</a> *&#160;</td>
          <td class="paramname"><em>nl</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01175">1175</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> status;
  <span class="keyword">struct </span>sockaddr_nl snl;
  <span class="keyword">struct </span>iovec iov = { (<span class="keywordtype">void</span> *) <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>, <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>-&gt;nlmsg_len };
  <span class="keyword">struct </span>msghdr <a class="code" href="structmsg.html">msg</a> = { (<span class="keywordtype">void</span> *) &amp;snl, <span class="keyword">sizeof</span> snl, &amp;iov, 1, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0 };
  <span class="keywordtype">int</span> save_errno;

  memset (&amp;snl, 0, <span class="keyword">sizeof</span> snl);
  snl.nl_family = AF_NETLINK;

  <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>-&gt;nlmsg_seq = ++nl-&gt;<a class="code" href="structnlsock.html#a45e4187569b7a314348d2f7bdcb3e76e">seq</a>;

  <span class="comment">/* Request an acknowledgement by setting NLM_F_ACK */</span>
  <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>-&gt;nlmsg_flags |= NLM_F_ACK;

  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;netlink_talk: %s type %s(%u), seq=%u&quot;</span>, nl-&gt;<a class="code" href="structnlsock.html#aa3eed6e48e4deb3e0563b151bcdc5bf7">name</a>,
               <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>, <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>-&gt;nlmsg_type), <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>-&gt;nlmsg_type,
               <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>-&gt;nlmsg_seq);

  <span class="comment">/* Send message to netlink interface. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
    <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
  status = sendmsg (nl-&gt;<a class="code" href="structnlsock.html#aabb3e858e5654051aa3579db81236479">sock</a>, &amp;msg, 0);
  save_errno = errno;
  <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
    <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);

  <span class="keywordflow">if</span> (status &lt; 0)
    {
      <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;netlink_talk sendmsg() error: %s&quot;</span>,
            <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (save_errno));
      <span class="keywordflow">return</span> -1;
    }


  <span class="comment">/* </span>
<span class="comment">   * Get reply from netlink socket. </span>
<span class="comment">   * The reply should either be an acknowlegement or an error.</span>
<span class="comment">   */</span>
  <span class="keywordflow">return</span> <a class="code" href="rt__netlink_8c.html#a05c946cb96c4d4e3f828690ffb40058c">netlink_parse_info</a> (<a class="code" href="rt__netlink_8c.html#a9bbcbae6235ca62292ec5f7f0a63ec8d">netlink_talk_filter</a>, nl);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9bbcbae6235ca62292ec5f7f0a63ec8d"></a><!-- doxytag: member="rt_netlink.c::netlink_talk_filter" ref="a9bbcbae6235ca62292ec5f7f0a63ec8d" args="(struct sockaddr_nl *snl, struct nlmsghdr *h)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int netlink_talk_filter </td>
          <td>(</td>
          <td class="paramtype">struct sockaddr_nl *&#160;</td>
          <td class="paramname"><em>snl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct nlmsghdr *&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01167">1167</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;netlink_talk: ignoring message type 0x%04x&quot;</span>, h-&gt;nlmsg_type);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af0f600eadb5f64096f48a229a717e698"></a><!-- doxytag: member="rt_netlink.c::rta_addattr_l" ref="af0f600eadb5f64096f48a229a717e698" args="(struct rtattr *rta, int maxlen, int type, void *data, int alen)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rta_addattr_l </td>
          <td>(</td>
          <td class="paramtype">struct rtattr *&#160;</td>
          <td class="paramname"><em>rta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxlen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>alen</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l01125">1125</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> len;
  <span class="keyword">struct </span>rtattr *subrta;

  len = RTA_LENGTH (alen);

  <span class="keywordflow">if</span> (RTA_ALIGN (rta-&gt;rta_len) + len &gt; maxlen)
    <span class="keywordflow">return</span> -1;

  subrta = (<span class="keyword">struct </span>rtattr *) (((<span class="keywordtype">char</span> *) rta) + RTA_ALIGN (rta-&gt;rta_len));
  subrta-&gt;rta_type = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  subrta-&gt;rta_len = len;
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (RTA_DATA (subrta), <a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>, alen);
  rta-&gt;rta_len = NLMSG_ALIGN (rta-&gt;rta_len) + len;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5c99605e6bb5d2d0dd874f4336734806"></a><!-- doxytag: member="rt_netlink.c::set_ifindex" ref="a5c99605e6bb5d2d0dd874f4336734806" args="(struct interface *ifp, unsigned int ifi_index)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void set_ifindex </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifi_index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00091">91</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *oifp;

  <span class="keywordflow">if</span> (((oifp = <a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a>(ifi_index)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) &amp;&amp; (oifp != ifp))
    {
      <span class="keywordflow">if</span> (ifi_index == <a class="code" href="if_8h.html#a18949aeeb4a8fbe7e3be43e6bbe86527">IFINDEX_INTERNAL</a>)
        <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Netlink is setting interface %s ifindex to reserved &quot;</span>
         <span class="stringliteral">&quot;internal value %u&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifi_index);
      <span class="keywordflow">else</span>
        {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;interface index %d was renamed from %s to %s&quot;</span>,
                   ifi_index, oifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
      <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a>(oifp))
        <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;interface rename detected on up interface: index %d &quot;</span>
             <span class="stringliteral">&quot;was renamed from %s to %s, results are uncertain!&quot;</span>, 
                 ifi_index, oifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
      <a class="code" href="interface_8c.html#a5ca58fe2209f09a828330810fc5a7d71">if_delete_update</a>(oifp);
        }
    }
  ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = ifi_index;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="af7f9077bc08df049beb65a1c09cde5fa"></a><!-- doxytag: member="rt_netlink.c::master" ref="af7f9077bc08df049beb65a1c09cde5fa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread__master.html">thread_master</a>* <a class="el" href="test__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__main_8c_source.html#l00105">105</a> of file <a class="el" href="bgp__main_8c_source.html">bgp_main.c</a>.</p>

</div>
</div>
<a class="anchor" id="a86ee364776bdb7e97c159d9210de53e8"></a><!-- doxytag: member="rt_netlink.c::netlink" ref="a86ee364776bdb7e97c159d9210de53e8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnlsock.html">nlsock</a>  <a class="el" href="rt__netlink_8c.html#a86ee364776bdb7e97c159d9210de53e8">netlink</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6b7fd88e8a5ad5cefd26b58580a45c1d"></a><!-- doxytag: member="rt_netlink.c::netlink_cmd" ref="a6b7fd88e8a5ad5cefd26b58580a45c1d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnlsock.html">nlsock</a>
   <a class="el" href="rt__netlink_8c.html#a6b7fd88e8a5ad5cefd26b58580a45c1d">netlink_cmd</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a426bf10c000954013848a38798a7a0e0"></a><!-- doxytag: member="rt_netlink.c::nexthop_types_desc" ref="a426bf10c000954013848a38798a7a0e0" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="rt__netlink_8c.html#a426bf10c000954013848a38798a7a0e0">nexthop_types_desc</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
  <span class="stringliteral">&quot;none&quot;</span>,
  <span class="stringliteral">&quot;Directly connected&quot;</span>,
  <span class="stringliteral">&quot;Interface route&quot;</span>,
  <span class="stringliteral">&quot;IPv4 nexthop&quot;</span>,
  <span class="stringliteral">&quot;IPv4 nexthop with ifindex&quot;</span>,
  <span class="stringliteral">&quot;IPv4 nexthop with ifname&quot;</span>,
  <span class="stringliteral">&quot;IPv6 nexthop&quot;</span>,
  <span class="stringliteral">&quot;IPv6 nexthop with ifindex&quot;</span>,
  <span class="stringliteral">&quot;IPv6 nexthop with ifname&quot;</span>,
  <span class="stringliteral">&quot;Null0 nexthop&quot;</span>,
}
</pre></div>
<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00068">68</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>

</div>
</div>
<a class="anchor" id="aa4fe0a028fde5c45c4f236d47d591a80"></a><!-- doxytag: member="rt_netlink.c::nl_rcvbufsize" ref="aa4fe0a028fde5c45c4f236d47d591a80" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int32_t <a class="el" href="rt__netlink_8c.html#aa4fe0a028fde5c45c4f236d47d591a80">nl_rcvbufsize</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ae4878eed46e1d5ff65d641e2fc38f7de"></a><!-- doxytag: member="rt_netlink.c::nlmsg_str" ref="ae4878eed46e1d5ff65d641e2fc38f7de" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structmessage.html">message</a> <a class="el" href="rt__netlink_8c.html#ae4878eed46e1d5ff65d641e2fc38f7de">nlmsg_str</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
  {RTM_NEWROUTE, <span class="stringliteral">&quot;RTM_NEWROUTE&quot;</span>},
  {RTM_DELROUTE, <span class="stringliteral">&quot;RTM_DELROUTE&quot;</span>},
  {RTM_GETROUTE, <span class="stringliteral">&quot;RTM_GETROUTE&quot;</span>},
  {RTM_NEWLINK,  <span class="stringliteral">&quot;RTM_NEWLINK&quot;</span>},
  {RTM_DELLINK,  <span class="stringliteral">&quot;RTM_DELLINK&quot;</span>},
  {RTM_GETLINK,  <span class="stringliteral">&quot;RTM_GETLINK&quot;</span>},
  {RTM_NEWADDR,  <span class="stringliteral">&quot;RTM_NEWADDR&quot;</span>},
  {RTM_DELADDR,  <span class="stringliteral">&quot;RTM_DELADDR&quot;</span>},
  {RTM_GETADDR,  <span class="stringliteral">&quot;RTM_GETADDR&quot;</span>},
  {0, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>}
}
</pre></div>
<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00055">55</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>

</div>
</div>
<a class="anchor" id="a3868f54f344479068c738714723ded02"></a><!-- doxytag: member="rt_netlink.c::rtproto_str" ref="a3868f54f344479068c738714723ded02" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structmessage.html">message</a> <a class="el" href="rt__netlink_8c.html#a3868f54f344479068c738714723ded02">rtproto_str</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
  {RTPROT_REDIRECT, <span class="stringliteral">&quot;redirect&quot;</span>},
  {RTPROT_KERNEL,   <span class="stringliteral">&quot;kernel&quot;</span>},
  {RTPROT_BOOT,     <span class="stringliteral">&quot;boot&quot;</span>},
  {RTPROT_STATIC,   <span class="stringliteral">&quot;static&quot;</span>},
  {RTPROT_GATED,    <span class="stringliteral">&quot;GateD&quot;</span>},
  {RTPROT_RA,       <span class="stringliteral">&quot;router advertisement&quot;</span>},
  {RTPROT_MRT,      <span class="stringliteral">&quot;MRT&quot;</span>},
  {RTPROT_ZEBRA,    <span class="stringliteral">&quot;Zebra&quot;</span>},


 
  {0,               <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>}
}
</pre></div>
<p>Definition at line <a class="el" href="rt__netlink_8c_source.html#l00744">744</a> of file <a class="el" href="rt__netlink_8c_source.html">rt_netlink.c</a>.</p>

</div>
</div>
<a class="anchor" id="a5a844f9c9c891ff5dfe28610da9b56ce"></a><!-- doxytag: member="rt_netlink.c::zebrad" ref="a5a844f9c9c891ff5dfe28610da9b56ce" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structzebra__t.html">zebra_t</a> <a class="el" href="zserv_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra_2main_8c_source.html#l00044">44</a> of file <a class="el" href="zebra_2main_8c_source.html">main.c</a>.</p>

</div>
</div>
<a class="anchor" id="a10659da9c59441877a609c3cd916f3cf"></a><!-- doxytag: member="rt_netlink.c::zserv_privs" ref="a10659da9c59441877a609c3cd916f3cf" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="el" href="zserv_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra_2main_8c_source.html#l00096">96</a> of file <a class="el" href="zebra_2main_8c_source.html">main.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="rt__netlink_8c.html">rt_netlink.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:38 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
