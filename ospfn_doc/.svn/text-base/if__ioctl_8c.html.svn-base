<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/if_ioctl.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('if__ioctl_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">zebra/if_ioctl.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ioctl_8h_source.html">ioctl.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="connected_8h_source.html">connected.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="interface_8h_source.html">zebra/interface.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for if_ioctl.c:</div>
<div class="dyncontent">
<div class="center"><img src="if__ioctl_8c__incl.png" border="0" usemap="#zebra_2if__ioctl_8c" alt=""/></div>
<map name="zebra_2if__ioctl_8c" id="zebra_2if__ioctl_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1475,80,1541,107"/><area shape="rect" id="node61" href="if_8h.html" title="if.h" alt="" coords="2896,304,2936,331"/><area shape="rect" id="node65" href="sockunion_8h.html" title="sockunion.h" alt="" coords="2937,453,3031,480"/><area shape="rect" id="node67" href="prefix_8h.html" title="prefix.h" alt="" coords="3075,379,3143,405"/><area shape="rect" id="node70" href="ioctl_8h.html" title="ioctl.h" alt="" coords="3175,80,3233,107"/><area shape="rect" id="node72" href="connected_8h.html" title="connected.h" alt="" coords="3257,80,3356,107"/><area shape="rect" id="node74" href="memory_8h.html" title="memory.h" alt="" coords="3380,80,3463,107"/><area shape="rect" id="node78" href="log_8h.html" title="log.h" alt="" coords="2763,80,2815,107"/><area shape="rect" id="node81" href="interface_8h.html" title="zebra/interface.h" alt="" coords="2961,80,3084,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="2033,155,2111,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="2135,155,2184,181"/><area shape="rect" id="node63" href="linklist_8h.html" title="linklist.h" alt="" coords="2897,379,2967,405"/><area shape="rect" id="node76" href="memtypes_8h.html" title="lib/memtypes.h" alt="" coords="3364,155,3479,181"/><area shape="rect" id="node83" href="redistribute_8h.html" title="redistribute.h" alt="" coords="2971,155,3073,181"/><area shape="rect" id="node85" href="table_8h.html" title="table.h" alt="" coords="2953,229,3017,256"/><area shape="rect" id="node87" href="zserv_8h.html" title="zserv.h" alt="" coords="3042,229,3107,256"/><area shape="rect" id="node89" href="rib_8h.html" title="rib.h" alt="" coords="3085,304,3133,331"/><area shape="rect" id="node93" href="workqueue_8h.html" title="workqueue.h" alt="" coords="2961,304,3060,331"/></map>
</div>
</div>
<p><a href="if__ioctl_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl_8c.html#a7948dae760e5ffb4e8877e11983792ca">IFNUM_BASE</a>&#160;&#160;&#160;32</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl_8c.html#a56efe438b0d2dff3130f84d405b7e10d">interface_list_ioctl</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl_8c.html#a375dc8137779dbba18c8c627db43810d">if_get_index</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl_8c.html#a4ab9a3cd5b22b08ebce9585106cf604f">if_get_addr</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl_8c.html#ab927f8f103d7a0a3eedfe9e5b64e945a">interface_info_ioctl</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="if__ioctl_8c.html#a566ef48adbf48e92f6e0044e317b0d99">interface_list</a> ()</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a7948dae760e5ffb4e8877e11983792ca"></a><!-- doxytag: member="if_ioctl.c::IFNUM_BASE" ref="a7948dae760e5ffb4e8877e11983792ca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define IFNUM_BASE&#160;&#160;&#160;32</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a4ab9a3cd5b22b08ebce9585106cf604f"></a><!-- doxytag: member="if_ioctl.c::if_get_addr" ref="a4ab9a3cd5b22b08ebce9585106cf604f" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int if_get_addr </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl_8c_source.html#l00337">337</a> of file <a class="el" href="if__ioctl_8c_source.html">if_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>ifreq ifreq;
  <span class="keyword">struct </span>sockaddr_in addr;
  <span class="keyword">struct </span>sockaddr_in mask;
  <span class="keyword">struct </span>sockaddr_in dest;
  <span class="keyword">struct </span>in_addr *dest_pnt;
  u_char prefixlen;
  <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a> = 0;

  <span class="comment">/* Interface&#39;s name and address family. */</span>
  strncpy (ifreq.ifr_name, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, IFNAMSIZ);
  ifreq.ifr_addr.sa_family = AF_INET;

  <span class="comment">/* Interface&#39;s address. */</span>
  ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCGIFADDR, (caddr_t) &amp;ifreq);
  <span class="keywordflow">if</span> (ret &lt; 0) 
    {
      <span class="keywordflow">if</span> (errno != EADDRNOTAVAIL)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SIOCGIFADDR fail: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      <span class="keywordflow">return</span> ret;
    }
      <span class="keywordflow">return</span> 0;
    }
  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;addr, &amp;ifreq.ifr_addr, sizeof (<span class="keyword">struct</span> sockaddr_in));

  <span class="comment">/* Interface&#39;s network mask. */</span>
  ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCGIFNETMASK, (caddr_t) &amp;ifreq);
  <span class="keywordflow">if</span> (ret &lt; 0) 
    {
      <span class="keywordflow">if</span> (errno != EADDRNOTAVAIL) 
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SIOCGIFNETMASK fail: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      <span class="keywordflow">return</span> ret;
    }
      <span class="keywordflow">return</span> 0;
    }
<span class="preprocessor">#ifdef ifr_netmask</span>
<span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;mask, &amp;ifreq.ifr_netmask, sizeof (<span class="keyword">struct</span> sockaddr_in));
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;mask, &amp;ifreq.ifr_addr, sizeof (<span class="keyword">struct</span> sockaddr_in));
<span class="preprocessor">#endif </span><span class="comment">/* ifr_netmask */</span>
  prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (mask.sin_addr);

  <span class="comment">/* Point to point or borad cast address pointer init. */</span>
  dest_pnt = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCGIFDSTADDR, (caddr_t) &amp;ifreq);
  <span class="keywordflow">if</span> (ret &lt; 0) 
    {
      <span class="keywordflow">if</span> (errno != EADDRNOTAVAIL) 
    <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SIOCGIFDSTADDR fail: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(&amp;addr.sin_addr, &amp;ifreq.ifr_dstaddr.sin_addr))
    {
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;dest, &amp;ifreq.ifr_dstaddr, sizeof (<span class="keyword">struct</span> sockaddr_in));
      dest_pnt = &amp;dest.sin_addr;
      flags = <a class="code" href="if_8h.html#aa84309c25e4cee681e361d14404618e9">ZEBRA_IFA_PEER</a>;
    }
  <span class="keywordflow">if</span> (!dest_pnt)
    {
      ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCGIFBRDADDR, (caddr_t) &amp;ifreq);
      <span class="keywordflow">if</span> (ret &lt; 0) 
    {
      <span class="keywordflow">if</span> (errno != EADDRNOTAVAIL) 
        <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SIOCGIFBRDADDR fail: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
    }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(&amp;addr.sin_addr, &amp;ifreq.ifr_broadaddr.sin_addr))
        {
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;dest, &amp;ifreq.ifr_broadaddr, sizeof (<span class="keyword">struct</span> sockaddr_in));
      dest_pnt = &amp;dest.sin_addr;
        }
    }


  <span class="comment">/* Set address to the interface. */</span>
  <a class="code" href="connected_8c.html#adfdf8a147f3057eebc9854c50f65d65b">connected_add_ipv4</a> (ifp, flags, &amp;addr.sin_addr, prefixlen, dest_pnt, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a375dc8137779dbba18c8c627db43810d"></a><!-- doxytag: member="if_ioctl.c::if_get_index" ref="a375dc8137779dbba18c8c627db43810d" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int if_get_index </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl_8c_source.html#l00135">135</a> of file <a class="el" href="if__ioctl_8c_source.html">if_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="preprocessor">#if defined(HAVE_IF_NAMETOINDEX)</span>
<span class="preprocessor"></span>  <span class="comment">/* Modern systems should have if_nametoindex(3). */</span>
  ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = <a class="code" href="if_8c.html#a957921d44ba446eb52b305bb270ca2df">if_nametoindex</a>(ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<span class="preprocessor">#elif defined(SIOCGIFINDEX) &amp;&amp; !defined(HAVE_BROKEN_ALIASES)</span>
<span class="preprocessor"></span>  <span class="comment">/* Fall-back for older linuxes. */</span>
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span>ifreq ifreq;
  <span class="keyword">static</span> <span class="keywordtype">int</span> if_fake_index;

  <a class="code" href="ioctl_8c.html#a49ba64872baa72a69a5d2cacc7100c34">ifreq_set_name</a> (&amp;ifreq, ifp);

  ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCGIFINDEX, (caddr_t) &amp;ifreq);
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <span class="comment">/* Linux 2.0.X does not have interface index. */</span>
      ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = if_fake_index++;
      <span class="keywordflow">return</span> ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
    }

  <span class="comment">/* OK we got interface index. */</span>
<span class="preprocessor">#ifdef ifr_ifindex</span>
<span class="preprocessor"></span>  ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = ifreq.ifr_ifindex;
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>  ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = ifreq.ifr_index;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
<span class="preprocessor">#else</span>
<span class="preprocessor"></span><span class="comment">/* Linux 2.2.X does not provide individual interface index </span>
<span class="comment">   for aliases and we know it. For others issue a warning. */</span>
<span class="preprocessor">#if !defined(HAVE_BROKEN_ALIASES)</span>
<span class="preprocessor"></span><span class="preprocessor">#warning &quot;Using if_fake_index. You may want to add appropriate&quot;</span>
<span class="preprocessor"></span><span class="preprocessor">#warning &quot;mapping from ifname to ifindex for your system...&quot;</span>
<span class="preprocessor"></span><span class="preprocessor">#endif</span>
<span class="preprocessor"></span>  <span class="comment">/* This branch probably won&#39;t provide usable results, but anyway... */</span>
  <span class="keyword">static</span> <span class="keywordtype">int</span> if_fake_index = 1;
  ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = if_fake_index++;
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
  <span class="keywordflow">return</span> ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab927f8f103d7a0a3eedfe9e5b64e945a"></a><!-- doxytag: member="if_ioctl.c::interface_info_ioctl" ref="ab927f8f103d7a0a3eedfe9e5b64e945a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void interface_info_ioctl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl_8c_source.html#l00423">423</a> of file <a class="el" href="if__ioctl_8c_source.html">if_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, nnode, ifp))
    {
      <a class="code" href="if__ioctl_8c.html#a375dc8137779dbba18c8c627db43810d">if_get_index</a> (ifp);
<span class="preprocessor">#ifdef SIOCGIFHWADDR</span>
<span class="preprocessor"></span>      if_get_hwaddr (ifp);
<span class="preprocessor">#endif </span><span class="comment">/* SIOCGIFHWADDR */</span>
      <a class="code" href="ioctl_8c.html#a2b50abdbb1df6e287a7aceda21bbc6c2">if_get_flags</a> (ifp);
<span class="preprocessor">#ifndef HAVE_GETIFADDRS</span>
<span class="preprocessor"></span>      <a class="code" href="if__ioctl_8c.html#a4ab9a3cd5b22b08ebce9585106cf604f">if_get_addr</a> (ifp);
<span class="preprocessor">#endif </span><span class="comment">/* ! HAVE_GETIFADDRS */</span>
      <a class="code" href="ioctl_8c.html#a83308d9574f99bb07308ff0b2b1c2d30">if_get_mtu</a> (ifp);
      <a class="code" href="ioctl_8c.html#acf7b3ca021497cc49e695637f889f024">if_get_metric</a> (ifp);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a566ef48adbf48e92f6e0044e317b0d99"></a><!-- doxytag: member="if_ioctl.c::interface_list" ref="a566ef48adbf48e92f6e0044e317b0d99" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void interface_list </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl_8c_source.html#l00445">445</a> of file <a class="el" href="if__ioctl_8c_source.html">if_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Linux can do both proc &amp; ioctl, ioctl is the only way to get</span>
<span class="comment">     interface aliases in 2.2 series kernels. */</span>
<span class="preprocessor">#ifdef HAVE_PROC_NET_DEV</span>
<span class="preprocessor"></span>  <a class="code" href="if__proc_8c.html#ad73e87e9f5981e7c2aabcc2956667c37">interface_list_proc</a> ();
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_PROC_NET_DEV */</span>
  <a class="code" href="if__ioctl_8c.html#a56efe438b0d2dff3130f84d405b7e10d">interface_list_ioctl</a> ();

  <span class="comment">/* After listing is done, get index, address, flags and other</span>
<span class="comment">     interface&#39;s information. */</span>
  <a class="code" href="if__ioctl_8c.html#ab927f8f103d7a0a3eedfe9e5b64e945a">interface_info_ioctl</a> ();

<span class="preprocessor">#ifdef HAVE_GETIFADDRS</span>
<span class="preprocessor"></span>  if_getaddrs ();
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_GETIFADDRS */</span>

<span class="preprocessor">#if defined(HAVE_IPV6) &amp;&amp; defined(HAVE_PROC_NET_IF_INET6)</span>
<span class="preprocessor"></span>  <span class="comment">/* Linux provides interface&#39;s IPv6 address via</span>
<span class="comment">     /proc/net/if_inet6. */</span>
  ifaddr_proc_ipv6 ();
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 &amp;&amp; HAVE_PROC_NET_IF_INET6 */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a56efe438b0d2dff3130f84d405b7e10d"></a><!-- doxytag: member="if_ioctl.c::interface_list_ioctl" ref="a56efe438b0d2dff3130f84d405b7e10d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int interface_list_ioctl </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="if__ioctl_8c_source.html#l00037">37</a> of file <a class="el" href="if__ioctl_8c_source.html">if_ioctl.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keywordtype">int</span> sock;
<span class="preprocessor">#define IFNUM_BASE 32</span>
<span class="preprocessor"></span>  <span class="keywordtype">int</span> ifnum;
  <span class="keyword">struct </span>ifreq *ifreq;
  <span class="keyword">struct </span>ifconf ifconf;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>;
  <span class="keywordtype">int</span> lastlen;

  <span class="comment">/* Normally SIOCGIFCONF works with AF_INET socket. */</span>
  sock = socket (AF_INET, SOCK_DGRAM, 0);
  <span class="keywordflow">if</span> (sock &lt; 0) 
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t make AF_INET socket stream: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Set initial ifreq count.  This will be double when SIOCGIFCONF</span>
<span class="comment">     fail.  Solaris has SIOCGIFNUM. */</span>
<span class="preprocessor">#ifdef SIOCGIFNUM</span>
<span class="preprocessor"></span>  ret = ioctl (sock, SIOCGIFNUM, &amp;ifnum);
  <span class="keywordflow">if</span> (ret &lt; 0)
    ifnum = <a class="code" href="if__ioctl_8c.html#a7948dae760e5ffb4e8877e11983792ca">IFNUM_BASE</a>;
  <span class="keywordflow">else</span>
    ifnum++;
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>  ifnum = <a class="code" href="if__ioctl_8c.html#a7948dae760e5ffb4e8877e11983792ca">IFNUM_BASE</a>;
<span class="preprocessor">#endif </span><span class="comment">/* SIOCGIFNUM */</span>

  ifconf.ifc_buf = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  lastlen = 0;
  <span class="comment">/* Loop until SIOCGIFCONF success. */</span>
  <span class="keywordflow">for</span> (;;) 
    {
      ifconf.ifc_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>ifreq) * ifnum;
      ifconf.ifc_buf = <a class="code" href="memory_8h.html#ad9ab7c99da79ca966328c35e9185cc57">XREALLOC</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, ifconf.ifc_buf, ifconf.ifc_len);

      ret = ioctl(sock, SIOCGIFCONF, &amp;ifconf);

      <span class="keywordflow">if</span> (ret &lt; 0) 
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;SIOCGIFCONF: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
      <span class="keywordflow">goto</span> end;
    }
      <span class="comment">/* Repeatedly get info til buffer fails to grow. */</span>
      <span class="keywordflow">if</span> (ifconf.ifc_len &gt; lastlen)
    {
          lastlen = ifconf.ifc_len;
      ifnum += 10;
      <span class="keywordflow">continue</span>;
    }
      <span class="comment">/* Success. */</span>
      <span class="keywordflow">break</span>;
    }

  <span class="comment">/* Allocate interface. */</span>
  ifreq = ifconf.ifc_req;

<span class="preprocessor">#ifdef OPEN_BSD</span>
<span class="preprocessor"></span>  <span class="keywordflow">for</span> (n = 0; n &lt; ifconf.ifc_len; )
    {
      <span class="keywordtype">int</span> size;

      ifreq = (<span class="keyword">struct </span>ifreq *)((caddr_t) ifconf.ifc_req + <a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>);
      ifp = <a class="code" href="if_8c.html#a18fa51c3b90a3afa1f564e85a2f4c62b">if_get_by_name_len</a>(ifreq-&gt;ifr_name,
                   <a class="code" href="str_8c.html#afc92d2231e45d19988c7894aa2a07f0c">strnlen</a>(ifreq-&gt;ifr_name,
                       <span class="keyword">sizeof</span>(ifreq-&gt;ifr_name)));
      <a class="code" href="interface_8c.html#afc558d5fc9ef4b3b59af78576e079a28">if_add_update</a> (ifp);
      size = ifreq-&gt;ifr_addr.sa_len;
      <span class="keywordflow">if</span> (size &lt; <span class="keyword">sizeof</span> (ifreq-&gt;ifr_addr))
    size = <span class="keyword">sizeof</span> (ifreq-&gt;ifr_addr);
      size += <span class="keyword">sizeof</span> (ifreq-&gt;ifr_name);
      n += size;
    }
<span class="preprocessor">#else</span>
<span class="preprocessor"></span>  <span class="keywordflow">for</span> (n = 0; n &lt; ifconf.ifc_len; n += <span class="keyword">sizeof</span>(<span class="keyword">struct </span>ifreq))
    {
      ifp = <a class="code" href="if_8c.html#a18fa51c3b90a3afa1f564e85a2f4c62b">if_get_by_name_len</a>(ifreq-&gt;ifr_name,
                   <a class="code" href="str_8c.html#afc92d2231e45d19988c7894aa2a07f0c">strnlen</a>(ifreq-&gt;ifr_name,
                       <span class="keyword">sizeof</span>(ifreq-&gt;ifr_name)));
      <a class="code" href="interface_8c.html#afc558d5fc9ef4b3b59af78576e079a28">if_add_update</a> (ifp);
      ifreq++;
    }
<span class="preprocessor">#endif </span><span class="comment">/* OPEN_BSD */</span>

 end:
  close (sock);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, ifconf.ifc_buf);

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="if__ioctl_8c.html">if_ioctl.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:37 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
