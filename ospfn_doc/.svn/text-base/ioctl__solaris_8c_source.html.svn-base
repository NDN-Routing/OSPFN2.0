<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/ioctl_solaris.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ioctl__solaris_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">zebra/ioctl_solaris.c</div>  </div>
</div>
<div class="contents">
<a href="ioctl__solaris_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Common ioctl functions for Solaris.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1997, 98 Kunihiro Ishiguro</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="ioctl_8h.html">ioctl.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="privs_8h.html">privs.h</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="rib_8h.html">zebra/rib.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="rt_8h.html">zebra/rt.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="interface_8h.html">zebra/interface.h</a>&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="comment">/* clear and set interface name string */</span>
<a name="l00039"></a>00039 <span class="keywordtype">void</span>
<a name="l00040"></a><a class="code" href="ioctl__solaris_8c.html#a5dd3e8aae6032850ce6798d10a705a7c">00040</a> <a class="code" href="if__ioctl__solaris_8c.html#a722ec3cfa50be64cc83bf2006bca83a5">lifreq_set_name</a> (<span class="keyword">struct</span> lifreq *lifreq, <span class="keyword">const</span> <span class="keywordtype">char</span> *ifname)
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042   strncpy (lifreq-&gt;lifr_name, ifname, IFNAMSIZ);
<a name="l00043"></a>00043 }
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="comment">/* call ioctl system call */</span>
<a name="l00046"></a>00046 <span class="keywordtype">int</span>
<a name="l00047"></a><a class="code" href="ioctl__solaris_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">00047</a> <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (u_long request, caddr_t <a class="code" href="structbuffer.html">buffer</a>)
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049   <span class="keywordtype">int</span> sock;
<a name="l00050"></a>00050   <span class="keywordtype">int</span> ret;
<a name="l00051"></a>00051   <span class="keywordtype">int</span> err;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
<a name="l00054"></a>00054     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
<a name="l00055"></a>00055     
<a name="l00056"></a>00056   sock = socket (AF_INET, SOCK_DGRAM, 0);
<a name="l00057"></a>00057   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00058"></a>00058     {
<a name="l00059"></a>00059       <span class="keywordtype">int</span> save_errno = errno;
<a name="l00060"></a>00060       <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00061"></a>00061         <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l00062"></a>00062       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Cannot create UDP socket: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(save_errno));
<a name="l00063"></a>00063       <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l00064"></a>00064     }
<a name="l00065"></a>00065 
<a name="l00066"></a>00066   <span class="keywordflow">if</span> ((ret = ioctl (sock, request, buffer)) &lt; 0)
<a name="l00067"></a>00067     err = errno;
<a name="l00068"></a>00068   
<a name="l00069"></a>00069   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00070"></a>00070     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l00071"></a>00071 
<a name="l00072"></a>00072   close (sock);
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00075"></a>00075     {
<a name="l00076"></a>00076       errno = err;
<a name="l00077"></a>00077       <span class="keywordflow">return</span> ret;
<a name="l00078"></a>00078     }
<a name="l00079"></a>00079   <span class="keywordflow">return</span> 0;
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="keywordtype">int</span>
<a name="l00084"></a><a class="code" href="ioctl__solaris_8c.html#a16fa4dc87838cf17b20d2e45956a286a">00084</a> <a class="code" href="ioctl__solaris_8c.html#a16fa4dc87838cf17b20d2e45956a286a">if_ioctl_ipv6</a> (u_long request, caddr_t <a class="code" href="structbuffer.html">buffer</a>)
<a name="l00085"></a>00085 {
<a name="l00086"></a>00086 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>  <span class="keywordtype">int</span> sock;
<a name="l00088"></a>00088   <span class="keywordtype">int</span> ret;
<a name="l00089"></a>00089   <span class="keywordtype">int</span> err;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
<a name="l00092"></a>00092     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t raise privileges&quot;</span>);
<a name="l00093"></a>00093 
<a name="l00094"></a>00094   sock = socket (AF_INET6, SOCK_DGRAM, 0);
<a name="l00095"></a>00095   <span class="keywordflow">if</span> (sock &lt; 0)
<a name="l00096"></a>00096     {
<a name="l00097"></a>00097       <span class="keywordtype">int</span> save_errno = errno;
<a name="l00098"></a>00098       <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00099"></a>00099         <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l00100"></a>00100       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Cannot create IPv6 datagram socket: %s&quot;</span>,
<a name="l00101"></a>00101            <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(save_errno));
<a name="l00102"></a>00102       <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105   <span class="keywordflow">if</span> ((ret = ioctl (sock, request, buffer)) &lt; 0)
<a name="l00106"></a>00106     err = errno;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108   <span class="keywordflow">if</span> (<a class="code" href="if__ioctl__solaris_8c.html#a10659da9c59441877a609c3cd916f3cf">zserv_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a>(<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
<a name="l00109"></a>00109     <a class="code" href="structzlog.html">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_ERR, <span class="stringliteral">&quot;Can&#39;t lower privileges&quot;</span>);
<a name="l00110"></a>00110 
<a name="l00111"></a>00111   close (sock);
<a name="l00112"></a>00112 
<a name="l00113"></a>00113   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00114"></a>00114     {
<a name="l00115"></a>00115       errno = err;
<a name="l00116"></a>00116       <span class="keywordflow">return</span> ret;
<a name="l00117"></a>00117     }
<a name="l00118"></a>00118 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00119"></a>00119 
<a name="l00120"></a>00120   <span class="keywordflow">return</span> 0;
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 <span class="comment">/*</span>
<a name="l00124"></a>00124 <span class="comment"> * get interface metric</span>
<a name="l00125"></a>00125 <span class="comment"> *   -- if value is not avaliable set -1</span>
<a name="l00126"></a>00126 <span class="comment"> */</span>
<a name="l00127"></a>00127 <span class="keywordtype">void</span>
<a name="l00128"></a><a class="code" href="ioctl__solaris_8c.html#acf7b3ca021497cc49e695637f889f024">00128</a> <a class="code" href="ioctl_8c.html#acf7b3ca021497cc49e695637f889f024">if_get_metric</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00129"></a>00129 {
<a name="l00130"></a>00130   <span class="keyword">struct </span>lifreq lifreq;
<a name="l00131"></a>00131   <span class="keywordtype">int</span> ret;
<a name="l00132"></a>00132 
<a name="l00133"></a>00133   <a class="code" href="if__ioctl__solaris_8c.html#a722ec3cfa50be64cc83bf2006bca83a5">lifreq_set_name</a> (&amp;lifreq, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00134"></a>00134 
<a name="l00135"></a>00135   <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#a0e1cfe137faa1f83088d136373e22041">IFF_IPV4</a>)
<a name="l00136"></a>00136     ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (AF_INET, SIOCGLIFMETRIC, (caddr_t) &amp; lifreq);
<a name="l00137"></a>00137 <span class="preprocessor">#ifdef SOLARIS_IPV6</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#aea8814a8036af8b308ad5ea6d32eac4b">IFF_IPV6</a>)
<a name="l00139"></a>00139     ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (AF_INET6, SIOCGLIFMETRIC, (caddr_t) &amp; lifreq);
<a name="l00140"></a>00140 <span class="preprocessor">#endif </span><span class="comment">/* SOLARIS_IPV6 */</span>
<a name="l00141"></a>00141   <span class="keywordflow">else</span>
<a name="l00142"></a>00142     ret = -1;
<a name="l00143"></a>00143     
<a name="l00144"></a>00144   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00145"></a>00145     <span class="keywordflow">return</span>;
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = lifreq.lifr_metric;
<a name="l00148"></a>00148 
<a name="l00149"></a>00149   <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> == 0)
<a name="l00150"></a>00150     ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a> = 1;
<a name="l00151"></a>00151 }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 <span class="comment">/* get interface MTU */</span>
<a name="l00154"></a>00154 <span class="keywordtype">void</span>
<a name="l00155"></a><a class="code" href="ioctl__solaris_8c.html#a83308d9574f99bb07308ff0b2b1c2d30">00155</a> <a class="code" href="ioctl_8c.html#a83308d9574f99bb07308ff0b2b1c2d30">if_get_mtu</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00156"></a>00156 {
<a name="l00157"></a>00157   <span class="keyword">struct </span>lifreq lifreq;
<a name="l00158"></a>00158   <span class="keywordtype">int</span> ret;
<a name="l00159"></a>00159   u_char changed = 0;
<a name="l00160"></a>00160   
<a name="l00161"></a>00161   <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#a0e1cfe137faa1f83088d136373e22041">IFF_IPV4</a>)
<a name="l00162"></a>00162     {
<a name="l00163"></a>00163       <a class="code" href="if__ioctl__solaris_8c.html#a722ec3cfa50be64cc83bf2006bca83a5">lifreq_set_name</a> (&amp;lifreq, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00164"></a>00164       ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (AF_INET, SIOCGLIFMTU, (caddr_t) &amp; lifreq);
<a name="l00165"></a>00165       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00166"></a>00166         {
<a name="l00167"></a>00167           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Can&#39;t lookup mtu on %s by ioctl(SIOCGLIFMTU)&quot;</span>,
<a name="l00168"></a>00168                      ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00169"></a>00169           ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = -1;
<a name="l00170"></a>00170         }
<a name="l00171"></a>00171       <span class="keywordflow">else</span>
<a name="l00172"></a>00172         {
<a name="l00173"></a>00173           ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a> = lifreq.lifr_metric;
<a name="l00174"></a>00174           changed = 1;
<a name="l00175"></a>00175         }
<a name="l00176"></a>00176     }
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#aea8814a8036af8b308ad5ea6d32eac4b">IFF_IPV6</a>)
<a name="l00180"></a>00180   {
<a name="l00181"></a>00181     memset(&amp;lifreq, 0, <span class="keyword">sizeof</span>(lifreq));
<a name="l00182"></a>00182     <a class="code" href="if__ioctl__solaris_8c.html#a722ec3cfa50be64cc83bf2006bca83a5">lifreq_set_name</a> (&amp;lifreq, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00183"></a>00183 
<a name="l00184"></a>00184     ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (AF_INET6, SIOCGLIFMTU, (caddr_t) &amp; lifreq);
<a name="l00185"></a>00185     <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00186"></a>00186     {
<a name="l00187"></a>00187       <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Can&#39;t lookup mtu6 on %s by ioctl(SIOCGIFMTU)&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00188"></a>00188       ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = -1;
<a name="l00189"></a>00189     }
<a name="l00190"></a>00190     <span class="keywordflow">else</span>
<a name="l00191"></a>00191     {
<a name="l00192"></a>00192       ifp-&gt;<a class="code" href="structinterface.html#a75a892a4df0f60191a13ca07b6625cb1">mtu6</a> = lifreq.lifr_metric;
<a name="l00193"></a>00193       changed = 1;
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195   }
<a name="l00196"></a>00196 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00197"></a>00197 
<a name="l00198"></a>00198   <span class="keywordflow">if</span> (changed)
<a name="l00199"></a>00199     <a class="code" href="redistribute_8c.html#a47e3eef746ea4c7dd28652d126b29908">zebra_interface_up_update</a>(ifp);
<a name="l00200"></a>00200 }
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 <span class="comment">/* Set up interface&#39;s address, netmask (and broadcast? ).</span>
<a name="l00203"></a>00203 <span class="comment">   Solaris uses ifname:number semantics to set IP address aliases. */</span>
<a name="l00204"></a>00204 <span class="keywordtype">int</span>
<a name="l00205"></a><a class="code" href="ioctl__solaris_8c.html#a2f0adc914bae2da8bf160c18284ae06a">00205</a> <a class="code" href="ioctl_8c.html#a2f0adc914bae2da8bf160c18284ae06a">if_set_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00206"></a>00206 {
<a name="l00207"></a>00207   <span class="keywordtype">int</span> ret;
<a name="l00208"></a>00208   <span class="keyword">struct </span>ifreq ifreq;
<a name="l00209"></a>00209   <span class="keyword">struct </span>sockaddr_in addr;
<a name="l00210"></a>00210   <span class="keyword">struct </span>sockaddr_in broad;
<a name="l00211"></a>00211   <span class="keyword">struct </span>sockaddr_in mask;
<a name="l00212"></a>00212   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> ifaddr;
<a name="l00213"></a>00213   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00214"></a>00214 
<a name="l00215"></a>00215   p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00216"></a>00216 
<a name="l00217"></a>00217   ifaddr = *p;
<a name="l00218"></a>00218 
<a name="l00219"></a>00219   strncpy (ifreq.ifr_name, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, IFNAMSIZ);
<a name="l00220"></a>00220 
<a name="l00221"></a>00221   addr.sin_addr = p-&gt;prefix;
<a name="l00222"></a>00222   addr.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00223"></a>00223   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifreq.ifr_addr, &amp;addr, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCSIFADDR, (caddr_t) &amp; ifreq);
<a name="l00226"></a>00226 
<a name="l00227"></a>00227   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00228"></a>00228     <span class="keywordflow">return</span> ret;
<a name="l00229"></a>00229 
<a name="l00230"></a>00230   <span class="comment">/* We need mask for make broadcast addr. */</span>
<a name="l00231"></a>00231   <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;mask.sin_addr);
<a name="l00232"></a>00232 
<a name="l00233"></a>00233   <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a88f3bd141d217db7e4118a78b1db1b60">if_is_broadcast</a> (ifp))
<a name="l00234"></a>00234     {
<a name="l00235"></a>00235       <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;ifaddr);
<a name="l00236"></a>00236       addr.sin_addr = ifaddr.prefix;
<a name="l00237"></a>00237 
<a name="l00238"></a>00238       broad.sin_addr.s_addr = (addr.sin_addr.s_addr | ~mask.sin_addr.s_addr);
<a name="l00239"></a>00239       broad.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifreq.ifr_broadaddr, &amp;broad, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00242"></a>00242       ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCSIFBRDADDR, (caddr_t) &amp; ifreq);
<a name="l00243"></a>00243       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00244"></a>00244         <span class="keywordflow">return</span> ret;
<a name="l00245"></a>00245     }
<a name="l00246"></a>00246 
<a name="l00247"></a>00247   mask.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00248"></a>00248 <span class="preprocessor">#ifdef SUNOS_5</span>
<a name="l00249"></a>00249 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;mask, &amp;ifreq.ifr_addr, sizeof (mask));
<a name="l00250"></a>00250 <span class="preprocessor">#else</span>
<a name="l00251"></a>00251 <span class="preprocessor"></span>  <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifreq.ifr_netmask, &amp;mask, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00252"></a>00252 <span class="preprocessor">#endif </span><span class="comment">/* SUNOS_5 */</span>
<a name="l00253"></a>00253   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCSIFNETMASK, (caddr_t) &amp; ifreq);
<a name="l00254"></a>00254 
<a name="l00255"></a>00255   <span class="keywordflow">return</span> ((ret &lt; 0) ? ret : 0);
<a name="l00256"></a>00256 }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 <span class="comment">/* Set up interface&#39;s address, netmask (and broadcast).</span>
<a name="l00259"></a>00259 <span class="comment">   Solaris uses ifname:number semantics to set IP address aliases. */</span>
<a name="l00260"></a>00260 <span class="keywordtype">int</span>
<a name="l00261"></a><a class="code" href="ioctl__solaris_8c.html#a6394ee738ad4341863267bdde8e4158a">00261</a> <a class="code" href="ioctl_8c.html#a6394ee738ad4341863267bdde8e4158a">if_unset_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00262"></a>00262 {
<a name="l00263"></a>00263   <span class="keywordtype">int</span> ret;
<a name="l00264"></a>00264   <span class="keyword">struct </span>ifreq ifreq;
<a name="l00265"></a>00265   <span class="keyword">struct </span>sockaddr_in addr;
<a name="l00266"></a>00266   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;
<a name="l00269"></a>00269 
<a name="l00270"></a>00270   strncpy (ifreq.ifr_name, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, IFNAMSIZ);
<a name="l00271"></a>00271 
<a name="l00272"></a>00272   memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
<a name="l00273"></a>00273   addr.sin_family = p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a>;
<a name="l00274"></a>00274   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifreq.ifr_addr, &amp;addr, sizeof (<span class="keyword">struct</span> sockaddr_in));
<a name="l00275"></a>00275 
<a name="l00276"></a>00276   ret = <a class="code" href="ioctl_8c.html#a9fe1a7da4d5dc27548268b663bf2f96b">if_ioctl</a> (SIOCSIFADDR, (caddr_t) &amp; ifreq);
<a name="l00277"></a>00277   
<a name="l00278"></a>00278   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00279"></a>00279     <span class="keywordflow">return</span> ret;
<a name="l00280"></a>00280 
<a name="l00281"></a>00281   <span class="keywordflow">return</span> 0;
<a name="l00282"></a>00282 }
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="comment">/* Get just the flags for the given name.</span>
<a name="l00285"></a>00285 <span class="comment"> * Used by the normal &#39;if_get_flags&#39; function, as well</span>
<a name="l00286"></a>00286 <span class="comment"> * as the bootup interface-list code, which has to peek at per-address</span>
<a name="l00287"></a>00287 <span class="comment"> * flags in order to figure out which ones should be ignored..</span>
<a name="l00288"></a>00288 <span class="comment"> */</span>
<a name="l00289"></a>00289 <span class="keywordtype">int</span>
<a name="l00290"></a><a class="code" href="ioctl__solaris_8c.html#a8ad729f60f11e1b9e9cd5c6ebfcdd06d">00290</a> <a class="code" href="if__ioctl__solaris_8c.html#aef9745adb143d78a8b48446246d95219">if_get_flags_direct</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *ifname, uint64_t *<a class="code" href="structflags.html">flags</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> af)
<a name="l00291"></a>00291 {
<a name="l00292"></a>00292   <span class="keyword">struct </span>lifreq lifreq;
<a name="l00293"></a>00293   <span class="keywordtype">int</span> ret;
<a name="l00294"></a>00294     
<a name="l00295"></a>00295   <a class="code" href="if__ioctl__solaris_8c.html#a722ec3cfa50be64cc83bf2006bca83a5">lifreq_set_name</a> (&amp;lifreq, ifname);
<a name="l00296"></a>00296   
<a name="l00297"></a>00297   ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (af, SIOCGLIFFLAGS, (caddr_t) &amp;lifreq);
<a name="l00298"></a>00298   
<a name="l00299"></a>00299   <span class="keywordflow">if</span> (ret)
<a name="l00300"></a>00300     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: ifname %s, error %s (%d)&quot;</span>,
<a name="l00301"></a>00301                 __func__, ifname, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno), errno);
<a name="l00302"></a>00302   
<a name="l00303"></a>00303   *flags = lifreq.lifr_flags;
<a name="l00304"></a>00304   
<a name="l00305"></a>00305   <span class="keywordflow">return</span> ret;
<a name="l00306"></a>00306 }
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 <span class="comment">/* get interface flags */</span>
<a name="l00309"></a>00309 <span class="keywordtype">void</span>
<a name="l00310"></a><a class="code" href="ioctl__solaris_8c.html#a2b50abdbb1df6e287a7aceda21bbc6c2">00310</a> <a class="code" href="ioctl_8c.html#a2b50abdbb1df6e287a7aceda21bbc6c2">if_get_flags</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp)
<a name="l00311"></a>00311 {
<a name="l00312"></a>00312   <span class="keywordtype">int</span> ret4, ret6;
<a name="l00313"></a>00313   uint64_t newflags = 0;
<a name="l00314"></a>00314   uint64_t tmpflags;
<a name="l00315"></a>00315 
<a name="l00316"></a>00316   <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#a0e1cfe137faa1f83088d136373e22041">IFF_IPV4</a>)
<a name="l00317"></a>00317     {
<a name="l00318"></a>00318       ret4 = <a class="code" href="if__ioctl__solaris_8c.html#aef9745adb143d78a8b48446246d95219">if_get_flags_direct</a> (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, &amp;tmpflags, AF_INET);
<a name="l00319"></a>00319       
<a name="l00320"></a>00320       <span class="keywordflow">if</span> (!ret4)
<a name="l00321"></a>00321         newflags |= tmpflags;
<a name="l00322"></a>00322       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (errno == ENXIO)
<a name="l00323"></a>00323         {
<a name="l00324"></a>00324           <span class="comment">/* it&#39;s gone */</span>
<a name="l00325"></a>00325           <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>, IFF_UP);
<a name="l00326"></a>00326           <a class="code" href="interface_8c.html#ac290b836d2dd1082297e32356a1368fa">if_flags_update</a> (ifp, ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>);
<a name="l00327"></a>00327         }
<a name="l00328"></a>00328     }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330   <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#aea8814a8036af8b308ad5ea6d32eac4b">IFF_IPV6</a>)
<a name="l00331"></a>00331     {
<a name="l00332"></a>00332       ret6 = <a class="code" href="if__ioctl__solaris_8c.html#aef9745adb143d78a8b48446246d95219">if_get_flags_direct</a> (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, &amp;tmpflags, AF_INET6);
<a name="l00333"></a>00333       
<a name="l00334"></a>00334       <span class="keywordflow">if</span> (!ret6)
<a name="l00335"></a>00335         newflags |= tmpflags;
<a name="l00336"></a>00336       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (errno == ENXIO)
<a name="l00337"></a>00337         {
<a name="l00338"></a>00338           <span class="comment">/* it&#39;s gone */</span>
<a name="l00339"></a>00339           <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>, IFF_UP);
<a name="l00340"></a>00340           <a class="code" href="interface_8c.html#ac290b836d2dd1082297e32356a1368fa">if_flags_update</a> (ifp, ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>);
<a name="l00341"></a>00341         }
<a name="l00342"></a>00342     }
<a name="l00343"></a>00343   
<a name="l00344"></a>00344   <span class="comment">/* only update flags if one of above succeeded */</span>
<a name="l00345"></a>00345   <span class="keywordflow">if</span> ( !(ret4 &amp;&amp; ret6) )
<a name="l00346"></a>00346     <a class="code" href="interface_8c.html#ac290b836d2dd1082297e32356a1368fa">if_flags_update</a> (ifp, newflags);
<a name="l00347"></a>00347 }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 <span class="comment">/* Set interface flags */</span>
<a name="l00350"></a>00350 <span class="keywordtype">int</span>
<a name="l00351"></a><a class="code" href="ioctl__solaris_8c.html#a8d3286dd23c072fd28b523f0464b7b48">00351</a> <a class="code" href="ioctl_8c.html#a8d3286dd23c072fd28b523f0464b7b48">if_set_flags</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, uint64_t <a class="code" href="structflags.html">flags</a>)
<a name="l00352"></a>00352 {
<a name="l00353"></a>00353   <span class="keywordtype">int</span> ret;
<a name="l00354"></a>00354   <span class="keyword">struct </span>lifreq lifreq;
<a name="l00355"></a>00355 
<a name="l00356"></a>00356   <a class="code" href="if__ioctl__solaris_8c.html#a722ec3cfa50be64cc83bf2006bca83a5">lifreq_set_name</a> (&amp;lifreq, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00357"></a>00357 
<a name="l00358"></a>00358   lifreq.lifr_flags = ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>;
<a name="l00359"></a>00359   lifreq.lifr_flags |= flags;
<a name="l00360"></a>00360 
<a name="l00361"></a>00361   <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#a0e1cfe137faa1f83088d136373e22041">IFF_IPV4</a>)
<a name="l00362"></a>00362     ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (AF_INET, SIOCSLIFFLAGS, (caddr_t) &amp; lifreq);
<a name="l00363"></a>00363   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#aea8814a8036af8b308ad5ea6d32eac4b">IFF_IPV6</a>)
<a name="l00364"></a>00364     ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (AF_INET6, SIOCSLIFFLAGS, (caddr_t) &amp; lifreq);
<a name="l00365"></a>00365   <span class="keywordflow">else</span>
<a name="l00366"></a>00366     ret = -1;
<a name="l00367"></a>00367 
<a name="l00368"></a>00368   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00369"></a>00369     <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;can&#39;t set interface flags on %s: %s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
<a name="l00370"></a>00370                <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00371"></a>00371   <span class="keywordflow">else</span>
<a name="l00372"></a>00372     ret = 0;
<a name="l00373"></a>00373     
<a name="l00374"></a>00374   <span class="keywordflow">return</span> ret;
<a name="l00375"></a>00375 }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377 <span class="comment">/* Unset interface&#39;s flag. */</span>
<a name="l00378"></a>00378 <span class="keywordtype">int</span>
<a name="l00379"></a><a class="code" href="ioctl__solaris_8c.html#a502ff981598ecd81fae67f29ef3cc1b8">00379</a> <a class="code" href="ioctl_8c.html#a502ff981598ecd81fae67f29ef3cc1b8">if_unset_flags</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, uint64_t <a class="code" href="structflags.html">flags</a>)
<a name="l00380"></a>00380 {
<a name="l00381"></a>00381   <span class="keywordtype">int</span> ret;
<a name="l00382"></a>00382   <span class="keyword">struct </span>lifreq lifreq;
<a name="l00383"></a>00383 
<a name="l00384"></a>00384   <a class="code" href="if__ioctl__solaris_8c.html#a722ec3cfa50be64cc83bf2006bca83a5">lifreq_set_name</a> (&amp;lifreq, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00385"></a>00385 
<a name="l00386"></a>00386   lifreq.lifr_flags = ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>;
<a name="l00387"></a>00387   lifreq.lifr_flags &amp;= ~flags;
<a name="l00388"></a>00388 
<a name="l00389"></a>00389   <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#a0e1cfe137faa1f83088d136373e22041">IFF_IPV4</a>)
<a name="l00390"></a>00390     ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (AF_INET, SIOCSLIFFLAGS, (caddr_t) &amp; lifreq);
<a name="l00391"></a>00391   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a> &amp; <a class="code" href="if_8h.html#aea8814a8036af8b308ad5ea6d32eac4b">IFF_IPV6</a>)
<a name="l00392"></a>00392     ret = <a class="code" href="ioctl_8h.html#a7276c80bcea1b4c3720636f5bcf90d09">AF_IOCTL</a> (AF_INET6, SIOCSLIFFLAGS, (caddr_t) &amp; lifreq);
<a name="l00393"></a>00393   <span class="keywordflow">else</span>
<a name="l00394"></a>00394     ret = -1;
<a name="l00395"></a>00395 
<a name="l00396"></a>00396   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00397"></a>00397     <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;can&#39;t unset interface flags&quot;</span>);
<a name="l00398"></a>00398   <span class="keywordflow">else</span>
<a name="l00399"></a>00399     ret = 0;
<a name="l00400"></a>00400   
<a name="l00401"></a>00401   <span class="keywordflow">return</span> ret;
<a name="l00402"></a>00402 }
<a name="l00403"></a>00403 
<a name="l00404"></a>00404 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00405"></a>00405 <span class="preprocessor"></span>
<a name="l00406"></a>00406 <span class="comment">/* Interface&#39;s address add/delete functions. */</span>
<a name="l00407"></a>00407 <span class="keywordtype">int</span>
<a name="l00408"></a>00408 <a class="code" href="ioctl__null_8c.html#aed68ab78f914db76055d46853b0c58d5">if_prefix_add_ipv6</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00409"></a>00409 {
<a name="l00410"></a>00410   <span class="keywordtype">char</span> addrbuf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l00411"></a>00411 
<a name="l00412"></a>00412   <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;(((<span class="keyword">struct</span> prefix_ipv6 *) (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>))-&gt;prefix),
<a name="l00413"></a>00413              addrbuf, sizeof (addrbuf));
<a name="l00414"></a>00414   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t set %s on interface %s&quot;</span>, addrbuf, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00415"></a>00415 
<a name="l00416"></a>00416   <span class="keywordflow">return</span> 0;
<a name="l00417"></a>00417 
<a name="l00418"></a>00418 }
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 <span class="keywordtype">int</span>
<a name="l00421"></a>00421 if_prefix_delete_ipv6 (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00422"></a>00422 {
<a name="l00423"></a>00423   <span class="keywordtype">char</span> addrbuf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l00424"></a>00424 
<a name="l00425"></a>00425   <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET6, &amp;(((<span class="keyword">struct</span> prefix_ipv6 *) (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>))-&gt;prefix),
<a name="l00426"></a>00426              addrbuf, sizeof (addrbuf));
<a name="l00427"></a>00427   <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Can&#39;t delete %s on interface %s&quot;</span>, addrbuf, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00428"></a>00428 
<a name="l00429"></a>00429   <span class="keywordflow">return</span> 0;
<a name="l00430"></a>00430 
<a name="l00431"></a>00431 }
<a name="l00432"></a>00432 
<a name="l00433"></a>00433 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ioctl__solaris_8c.html">ioctl_solaris.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
