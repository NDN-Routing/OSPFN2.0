<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_packet.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__packet_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">bgpd/bgp_packet.c</div>  </div>
</div>
<div class="contents">
<a href="bgp__packet_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* BGP packet management routine.</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 1999 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="thread_8h.html">thread.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="network_8h.html">network.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>      <span class="comment">/* for inet_ntop () */</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="plist_8h.html">plist.h</a>&quot;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="bgpd_8h.html">bgpd/bgpd.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="bgp__table_8h.html">bgpd/bgp_table.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="bgp__dump_8h.html">bgpd/bgp_dump.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="bgp__attr_8h.html">bgpd/bgp_attr.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="bgp__debug_8h.html">bgpd/bgp_debug.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="bgp__fsm_8h.html">bgpd/bgp_fsm.h</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="bgp__route_8h.html">bgpd/bgp_route.h</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="bgp__packet_8h.html">bgpd/bgp_packet.h</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="bgp__open_8h.html">bgpd/bgp_open.h</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="bgp__aspath_8h.html">bgpd/bgp_aspath.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="bgp__community_8h.html">bgpd/bgp_community.h</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="bgp__ecommunity_8h.html">bgpd/bgp_ecommunity.h</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="bgp__network_8h.html">bgpd/bgp_network.h</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="bgp__mplsvpn_8h.html">bgpd/bgp_mplsvpn.h</a>&quot;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="bgp__advertise_8h.html">bgpd/bgp_advertise.h</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="bgp__vty_8h.html">bgpd/bgp_vty.h</a>&quot;</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="keywordtype">int</span> <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *);
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">/* Set up BGP packet marker and packet type. */</span>
<a name="l00054"></a>00054 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00055"></a><a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">00055</a> <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l00056"></a>00056 {
<a name="l00057"></a>00057   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00058"></a>00058 
<a name="l00059"></a>00059   <span class="comment">/* Fill in marker. */</span>
<a name="l00060"></a>00060   <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a>; i++)
<a name="l00061"></a>00061     <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0xff);
<a name="l00062"></a>00062 
<a name="l00063"></a>00063   <span class="comment">/* Dummy total length. This field is should be filled in later on. */</span>
<a name="l00064"></a>00064   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00065"></a>00065 
<a name="l00066"></a>00066   <span class="comment">/* BGP packet type. */</span>
<a name="l00067"></a>00067   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, type);
<a name="l00068"></a>00068 
<a name="l00069"></a>00069   <span class="comment">/* Return current stream size. */</span>
<a name="l00070"></a>00070   <span class="keywordflow">return</span> <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l00071"></a>00071 }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="comment">/* Set BGP packet header size entry.  If size is zero then use current</span>
<a name="l00074"></a>00074 <span class="comment">   stream size. */</span>
<a name="l00075"></a>00075 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00076"></a><a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">00076</a> <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
<a name="l00077"></a>00077 {
<a name="l00078"></a>00078   <span class="keywordtype">int</span> cp;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080   <span class="comment">/* Preserve current pointer. */</span>
<a name="l00081"></a>00081   cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l00082"></a>00082   <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a>, cp);
<a name="l00083"></a>00083 
<a name="l00084"></a>00084   <span class="keywordflow">return</span> cp;
<a name="l00085"></a>00085 }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 <span class="comment">/* Add new packet to the peer. */</span>
<a name="l00088"></a>00088 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00089"></a><a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">00089</a> <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)
<a name="l00090"></a>00090 {
<a name="l00091"></a>00091   <span class="comment">/* Add packet to the end of list. */</span>
<a name="l00092"></a>00092   <a class="code" href="stream_8c.html#a3aac13f498e678975277dd9017f912bd">stream_fifo_push</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>, s);
<a name="l00093"></a>00093 }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="comment">/* Free first packet. */</span>
<a name="l00096"></a>00096 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00097"></a><a class="code" href="bgp__packet_8c.html#aa529c538a0a9df61107f11602ca3c524">00097</a> <a class="code" href="bgp__packet_8c.html#aa529c538a0a9df61107f11602ca3c524">bgp_packet_delete</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00098"></a>00098 {
<a name="l00099"></a>00099   <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (<a class="code" href="stream_8c.html#aabd281e811fa716e5c22fe485acbb68e">stream_fifo_pop</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>));
<a name="l00100"></a>00100 }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 <span class="comment">/* Check file descriptor whether connect is established. */</span>
<a name="l00103"></a>00103 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00104"></a><a class="code" href="bgp__packet_8c.html#afa3f4ee76734007f952c560c6e6d3124">00104</a> <a class="code" href="bgp__packet_8c.html#afa3f4ee76734007f952c560c6e6d3124">bgp_connect_check</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00105"></a>00105 {
<a name="l00106"></a>00106   <span class="keywordtype">int</span> status;
<a name="l00107"></a>00107   <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> slen;
<a name="l00108"></a>00108   <span class="keywordtype">int</span> ret;
<a name="l00109"></a>00109 
<a name="l00110"></a>00110   <span class="comment">/* Anyway I have to reset read and write thread. */</span>
<a name="l00111"></a>00111   <a class="code" href="bgp__fsm_8h.html#abda2b4012d32bfc561f7c97e37263bbe">BGP_READ_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a>);
<a name="l00112"></a>00112   <a class="code" href="bgp__fsm_8h.html#a49884b788209354868be2e7e580584ce">BGP_WRITE_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>);
<a name="l00113"></a>00113 
<a name="l00114"></a>00114   <span class="comment">/* Check file descriptor. */</span>
<a name="l00115"></a>00115   slen = <span class="keyword">sizeof</span> (status);
<a name="l00116"></a>00116   ret = getsockopt(peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, SOL_SOCKET, SO_ERROR, (<span class="keywordtype">void</span> *) &amp;status, &amp;slen);
<a name="l00117"></a>00117 
<a name="l00118"></a>00118   <span class="comment">/* If getsockopt is fail, this is fatal error. */</span>
<a name="l00119"></a>00119   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_INFO, <span class="stringliteral">&quot;can&#39;t get sockopt for nonblocking connect&quot;</span>);
<a name="l00122"></a>00122       <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#ab37344e5380c17e5b2c9be898d63ca67">TCP_fatal_error</a>);
<a name="l00123"></a>00123       <span class="keywordflow">return</span>;
<a name="l00124"></a>00124     }      
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">/* When status is 0 then TCP connection is established. */</span>
<a name="l00127"></a>00127   <span class="keywordflow">if</span> (status == 0)
<a name="l00128"></a>00128     {
<a name="l00129"></a>00129       <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a752a14bd3217eb3b705dd20e50824eef">TCP_connection_open</a>);
<a name="l00130"></a>00130     }
<a name="l00131"></a>00131   <span class="keywordflow">else</span>
<a name="l00132"></a>00132     {
<a name="l00133"></a>00133       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l00134"></a>00134       <a class="code" href="log_8h.html#a901efa2487b25c3a74846a52de919565">plog_debug</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Event] Connect failed (%s)&quot;</span>,
<a name="l00135"></a>00135              peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l00136"></a>00136       <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a3e6d939d6f371d5d5d6c61299c40a870">TCP_connection_open_failed</a>);
<a name="l00137"></a>00137     }
<a name="l00138"></a>00138 }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="comment">/* Make BGP update packet.  */</span>
<a name="l00141"></a>00141 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *
<a name="l00142"></a><a class="code" href="bgp__packet_8c.html#a70551f4df0090523408c9f19d97b97b6">00142</a> <a class="code" href="bgp__packet_8c.html#a70551f4df0090523408c9f19d97b97b6">bgp_update_packet</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00143"></a>00143 {
<a name="l00144"></a>00144   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00145"></a>00145   <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj;
<a name="l00146"></a>00146   <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;
<a name="l00147"></a>00147   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
<a name="l00148"></a>00148   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00149"></a>00149   <span class="keyword">struct </span><a class="code" href="structbgp__info.html">bgp_info</a> *binfo = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00150"></a>00150   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total_attr_len = 0;
<a name="l00151"></a>00151   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pos;
<a name="l00152"></a>00152   <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l00153"></a>00153 
<a name="l00154"></a>00154   s = peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a>;
<a name="l00155"></a>00155   <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l00156"></a>00156 
<a name="l00157"></a>00157   adv = <a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>);
<a name="l00158"></a>00158 
<a name="l00159"></a>00159   <span class="keywordflow">while</span> (adv)
<a name="l00160"></a>00160     {
<a name="l00161"></a>00161       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>);
<a name="l00162"></a>00162       rn = adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>;
<a name="l00163"></a>00163       adj = adv-&gt;<a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>;
<a name="l00164"></a>00164       <span class="keywordflow">if</span> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>)
<a name="l00165"></a>00165         binfo = adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>;
<a name="l00166"></a>00166 
<a name="l00167"></a>00167       <span class="comment">/* When remaining space can&#39;t include NLRI and it&#39;s length.  */</span>
<a name="l00168"></a>00168       <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a4705f0b1797c4f896404ec1549c91017">STREAM_REMAIN</a> (s) &lt;= <a class="code" href="bgp__packet_8h.html#a0ea4158b5023b844b3ef24ae90760d18">BGP_NLRI_LENGTH</a> + <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>))
<a name="l00169"></a>00169     <span class="keywordflow">break</span>;
<a name="l00170"></a>00170 
<a name="l00171"></a>00171       <span class="comment">/* If packet is empty, set attribute. */</span>
<a name="l00172"></a>00172       <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ac6e5029f661be512743a4e9f8bc06787">stream_empty</a> (s))
<a name="l00173"></a>00173     {
<a name="l00174"></a>00174       <span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> *prd = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00175"></a>00175       u_char *tag = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00176"></a>00176       <span class="keyword">struct </span>peer *from = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00177"></a>00177       
<a name="l00178"></a>00178       <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>)
<a name="l00179"></a>00179         prd = (<span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> *) &amp;rn-&gt;<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
<a name="l00180"></a>00180           if (binfo &amp;&amp; binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>)
<a name="l00181"></a>00181             {
<a name="l00182"></a>00182               tag = binfo-&gt;<a class="code" href="structbgp__info.html#ae6a0a53b7a3f457c0f479f635c20ec76">extra</a>-&gt;<a class="code" href="structbgp__info__extra.html#ab5ce51bbce0f9dc8bb7a922f25e44da0">tag</a>;
<a name="l00183"></a>00183               from = binfo-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>;
<a name="l00184"></a>00184             }
<a name="l00185"></a>00185           
<a name="l00186"></a>00186       <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>);
<a name="l00187"></a>00187       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);       
<a name="l00188"></a>00188       pos = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l00189"></a>00189       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00190"></a>00190       total_attr_len = <a class="code" href="bgp__attr_8c.html#afa6f3d227d043fc17b75503ec1b840f6">bgp_packet_attribute</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, peer, s, 
<a name="l00191"></a>00191                                              adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a>-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>,
<a name="l00192"></a>00192                                              &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, afi, safi, 
<a name="l00193"></a>00193                                              from, prd, tag);
<a name="l00194"></a>00194       <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, pos, total_attr_len);
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197       <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l00198"></a>00198     <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>);
<a name="l00199"></a>00199       
<a name="l00200"></a>00200       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_OUT))
<a name="l00201"></a>00201     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s send UPDATE %s/%d&quot;</span>,
<a name="l00202"></a>00202           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l00203"></a>00203           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;(rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), buf, BUFSIZ),
<a name="l00204"></a>00204           rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00205"></a>00205 
<a name="l00206"></a>00206       <span class="comment">/* Synchnorize attribute.  */</span>
<a name="l00207"></a>00207       <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>)
<a name="l00208"></a>00208     <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>);
<a name="l00209"></a>00209       <span class="keywordflow">else</span>
<a name="l00210"></a>00210     peer-&gt;<a class="code" href="structpeer.html#a0f455af89f5e19b5ab2779df2e4218bb">scount</a>[afi][safi]++;
<a name="l00211"></a>00211 
<a name="l00212"></a>00212       adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a>-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>);
<a name="l00213"></a>00213 
<a name="l00214"></a>00214       adv = <a class="code" href="bgp__advertise_8c.html#ae3db721dd592035054c399b932338af0">bgp_advertise_clean</a> (peer, adj, afi, safi);
<a name="l00215"></a>00215 
<a name="l00216"></a>00216       <span class="keywordflow">if</span> (! (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>))
<a name="l00217"></a>00217     <span class="keywordflow">break</span>;
<a name="l00218"></a>00218     }
<a name="l00219"></a>00219      
<a name="l00220"></a>00220   <span class="keywordflow">if</span> (! <a class="code" href="stream_8c.html#ac6e5029f661be512743a4e9f8bc06787">stream_empty</a> (s))
<a name="l00221"></a>00221     {
<a name="l00222"></a>00222       <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
<a name="l00223"></a>00223       packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
<a name="l00224"></a>00224       <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);
<a name="l00225"></a>00225       <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l00226"></a>00226       <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l00227"></a>00227       <span class="keywordflow">return</span> packet;
<a name="l00228"></a>00228     }
<a name="l00229"></a>00229   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00230"></a>00230 }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *
<a name="l00233"></a><a class="code" href="bgp__packet_8c.html#a5fd59a2d80d58f55d06eaa5d015c893b">00233</a> <a class="code" href="bgp__packet_8c.html#a5fd59a2d80d58f55d06eaa5d015c893b">bgp_update_packet_eor</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00234"></a>00234 {
<a name="l00235"></a>00235   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00236"></a>00236   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
<a name="l00237"></a>00237 
<a name="l00238"></a>00238   <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
<a name="l00239"></a>00239     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00242"></a>00242     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;send End-of-RIB for %s to %s&quot;</span>, <a class="code" href="bgp__vty_8c.html#a12e00d9262b9e4efc00b5f1216541967">afi_safi_print</a> (afi, safi), peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l00243"></a>00243 
<a name="l00244"></a>00244   s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
<a name="l00245"></a>00245 
<a name="l00246"></a>00246   <span class="comment">/* Make BGP update packet. */</span>
<a name="l00247"></a>00247   <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>);
<a name="l00248"></a>00248 
<a name="l00249"></a>00249   <span class="comment">/* Unfeasible Routes Length */</span>
<a name="l00250"></a>00250   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00251"></a>00251 
<a name="l00252"></a>00252   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l00253"></a>00253     {
<a name="l00254"></a>00254       <span class="comment">/* Total Path Attribute Length */</span>
<a name="l00255"></a>00255       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00256"></a>00256     }
<a name="l00257"></a>00257   <span class="keywordflow">else</span>
<a name="l00258"></a>00258     {
<a name="l00259"></a>00259       <span class="comment">/* Total Path Attribute Length */</span>
<a name="l00260"></a>00260       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 6);
<a name="l00261"></a>00261       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__attr_8h.html#a31dfe8b17b4f54f98b933967532765d7">BGP_ATTR_FLAG_OPTIONAL</a>);
<a name="l00262"></a>00262       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a75e156b1375161f4b5587249f7703cdc">BGP_ATTR_MP_UNREACH_NLRI</a>);
<a name="l00263"></a>00263       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 3);
<a name="l00264"></a>00264       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, afi);
<a name="l00265"></a>00265       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);
<a name="l00266"></a>00266     }
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
<a name="l00269"></a>00269   packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
<a name="l00270"></a>00270   <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);
<a name="l00271"></a>00271   <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
<a name="l00272"></a>00272   <span class="keywordflow">return</span> packet;
<a name="l00273"></a>00273 }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="comment">/* Make BGP withdraw packet.  */</span>
<a name="l00276"></a>00276 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *
<a name="l00277"></a><a class="code" href="bgp__packet_8c.html#ae745068443230e6f96f4ea075c0ee8d6">00277</a> <a class="code" href="bgp__packet_8c.html#ae745068443230e6f96f4ea075c0ee8d6">bgp_withdraw_packet</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00278"></a>00278 {
<a name="l00279"></a>00279   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00280"></a>00280   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
<a name="l00281"></a>00281   <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj;
<a name="l00282"></a>00282   <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;
<a name="l00283"></a>00283   <span class="keyword">struct </span><a class="code" href="structbgp__node.html">bgp_node</a> *rn;
<a name="l00284"></a>00284   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pos;
<a name="l00285"></a>00285   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> unfeasible_len;
<a name="l00286"></a>00286   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total_attr_len;
<a name="l00287"></a>00287   <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l00288"></a>00288 
<a name="l00289"></a>00289   s = peer-&gt;<a class="code" href="structpeer.html#a5306384581e22c8d1678087a6ef8e3e4">work</a>;
<a name="l00290"></a>00290   <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l00291"></a>00291 
<a name="l00292"></a>00292   <span class="keywordflow">while</span> ((adv = <a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00293"></a>00293     {
<a name="l00294"></a>00294       <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>);
<a name="l00295"></a>00295       adj = adv-&gt;<a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>;
<a name="l00296"></a>00296       rn = adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298       <span class="keywordflow">if</span> (<a class="code" href="stream_8h.html#a4705f0b1797c4f896404ec1549c91017">STREAM_REMAIN</a> (s) 
<a name="l00299"></a>00299       &lt; (<a class="code" href="bgp__packet_8h.html#a0ea4158b5023b844b3ef24ae90760d18">BGP_NLRI_LENGTH</a> + <a class="code" href="bgp__packet_8h.html#ad6c5e016e5a245f6b2c271e930c632cf">BGP_TOTAL_ATTR_LEN</a> + <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)))
<a name="l00300"></a>00300     <span class="keywordflow">break</span>;
<a name="l00301"></a>00301 
<a name="l00302"></a>00302       <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ac6e5029f661be512743a4e9f8bc06787">stream_empty</a> (s))
<a name="l00303"></a>00303     {
<a name="l00304"></a>00304       <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>);
<a name="l00305"></a>00305       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00306"></a>00306     }
<a name="l00307"></a>00307 
<a name="l00308"></a>00308       <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l00309"></a>00309     <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>);
<a name="l00310"></a>00310       <span class="keywordflow">else</span>
<a name="l00311"></a>00311     {
<a name="l00312"></a>00312       <span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> *prd = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00313"></a>00313       
<a name="l00314"></a>00314       <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>)
<a name="l00315"></a>00315         prd = (<span class="keyword">struct </span><a class="code" href="structprefix__rd.html">prefix_rd</a> *) &amp;rn-&gt;<a class="code" href="structbgp__node.html#ae70689440c2ce67c611d4e645967b000">prn</a>-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>;
<a name="l00316"></a>00316       pos = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l00317"></a>00317       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00318"></a>00318       total_attr_len
<a name="l00319"></a>00319         = <a class="code" href="bgp__attr_8c.html#a307ab4e45f577239562b43a73ef8f3a3">bgp_packet_withdraw</a> (peer, s, &amp;rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>, afi, safi, prd, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00320"></a>00320       
<a name="l00321"></a>00321       <span class="comment">/* Set total path attribute length. */</span>
<a name="l00322"></a>00322       <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, pos, total_attr_len);
<a name="l00323"></a>00323     }
<a name="l00324"></a>00324 
<a name="l00325"></a>00325       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_OUT))
<a name="l00326"></a>00326     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s send UPDATE %s/%d -- unreachable&quot;</span>,
<a name="l00327"></a>00327           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l00328"></a>00328           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;(rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), buf, BUFSIZ),
<a name="l00329"></a>00329           rn-&gt;<a class="code" href="structbgp__node.html#a61c7e08de23a3c64f8dd738448567cde">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00330"></a>00330 
<a name="l00331"></a>00331       peer-&gt;<a class="code" href="structpeer.html#a0f455af89f5e19b5ab2779df2e4218bb">scount</a>[afi][safi]--;
<a name="l00332"></a>00332 
<a name="l00333"></a>00333       <a class="code" href="bgp__advertise_8c.html#a4f008d09b6f5c7288dc27f5a5fbf376f">bgp_adj_out_remove</a> (rn, adj, peer, afi, safi);
<a name="l00334"></a>00334       <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
<a name="l00335"></a>00335 
<a name="l00336"></a>00336       <span class="keywordflow">if</span> (! (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>))
<a name="l00337"></a>00337     <span class="keywordflow">break</span>;
<a name="l00338"></a>00338     }
<a name="l00339"></a>00339 
<a name="l00340"></a>00340   <span class="keywordflow">if</span> (! <a class="code" href="stream_8c.html#ac6e5029f661be512743a4e9f8bc06787">stream_empty</a> (s))
<a name="l00341"></a>00341     {
<a name="l00342"></a>00342       <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l00343"></a>00343     {
<a name="l00344"></a>00344       unfeasible_len 
<a name="l00345"></a>00345         = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a> - <a class="code" href="bgp__packet_8h.html#a5f87d076829c52f458d31bbd1b32bacf">BGP_UNFEASIBLE_LEN</a>;
<a name="l00346"></a>00346       <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>, unfeasible_len);
<a name="l00347"></a>00347       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00348"></a>00348     }
<a name="l00349"></a>00349       <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
<a name="l00350"></a>00350       packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
<a name="l00351"></a>00351       <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);
<a name="l00352"></a>00352       <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
<a name="l00353"></a>00353       <span class="keywordflow">return</span> packet;
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355 
<a name="l00356"></a>00356   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00357"></a>00357 }
<a name="l00358"></a>00358 
<a name="l00359"></a>00359 <span class="keywordtype">void</span>
<a name="l00360"></a><a class="code" href="bgp__packet_8h.html#a2b4a8721996b1474ea60e02670db19da">00360</a> <a class="code" href="bgp__packet_8c.html#abe0b30eef3af58da0c5ae5e870e91851">bgp_default_update_send</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <span class="keyword">struct</span> <a class="code" href="structattr.html">attr</a> *<a class="code" href="structattr.html">attr</a>,
<a name="l00361"></a>00361              <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, <span class="keyword">struct</span> peer *from)
<a name="l00362"></a>00362 {
<a name="l00363"></a>00363   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00364"></a>00364   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
<a name="l00365"></a>00365   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l00366"></a>00366   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pos;
<a name="l00367"></a>00367   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total_attr_len;
<a name="l00368"></a>00368   <span class="keywordtype">char</span> attrstr[BUFSIZ];
<a name="l00369"></a>00369   <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l00370"></a>00370 
<a name="l00371"></a>00371   <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
<a name="l00372"></a>00372     <span class="keywordflow">return</span>;
<a name="l00373"></a>00373 
<a name="l00374"></a>00374   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l00375"></a>00375     <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="stringliteral">&quot;0.0.0.0/0&quot;</span>, &amp;p);
<a name="l00376"></a>00376 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00377"></a>00377 <span class="preprocessor"></span>  <span class="keywordflow">else</span> 
<a name="l00378"></a>00378     <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="stringliteral">&quot;::/0&quot;</span>, &amp;p);
<a name="l00379"></a>00379 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00380"></a>00380 
<a name="l00381"></a>00381   <span class="comment">/* Logging the attribute. */</span>
<a name="l00382"></a>00382   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_OUT))
<a name="l00383"></a>00383     {
<a name="l00384"></a>00384       <a class="code" href="bgp__debug_8c.html#a32d8ae5f48b2bf76b0a7c13182b2943f">bgp_dump_attr</a> (peer, attr, attrstr, BUFSIZ);
<a name="l00385"></a>00385       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s send UPDATE %s/%d %s&quot;</span>,
<a name="l00386"></a>00386         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;(p.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), buf, BUFSIZ),
<a name="l00387"></a>00387         p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, attrstr);
<a name="l00388"></a>00388     }
<a name="l00389"></a>00389 
<a name="l00390"></a>00390   s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
<a name="l00391"></a>00391 
<a name="l00392"></a>00392   <span class="comment">/* Make BGP update packet. */</span>
<a name="l00393"></a>00393   <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>);
<a name="l00394"></a>00394 
<a name="l00395"></a>00395   <span class="comment">/* Unfeasible Routes Length. */</span>
<a name="l00396"></a>00396   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00397"></a>00397 
<a name="l00398"></a>00398   <span class="comment">/* Make place for total attribute length.  */</span>
<a name="l00399"></a>00399   pos = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l00400"></a>00400   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00401"></a>00401   total_attr_len = <a class="code" href="bgp__attr_8c.html#afa6f3d227d043fc17b75503ec1b840f6">bgp_packet_attribute</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, peer, s, attr, &amp;p, afi, safi, from, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00402"></a>00402 
<a name="l00403"></a>00403   <span class="comment">/* Set Total Path Attribute Length. */</span>
<a name="l00404"></a>00404   <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, pos, total_attr_len);
<a name="l00405"></a>00405 
<a name="l00406"></a>00406   <span class="comment">/* NLRI set. */</span>
<a name="l00407"></a>00407   <span class="keywordflow">if</span> (p.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l00408"></a>00408     <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, &amp;p);
<a name="l00409"></a>00409 
<a name="l00410"></a>00410   <span class="comment">/* Set size. */</span>
<a name="l00411"></a>00411   <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
<a name="l00412"></a>00412 
<a name="l00413"></a>00413   packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
<a name="l00414"></a>00414   <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
<a name="l00415"></a>00415 
<a name="l00416"></a>00416   <span class="comment">/* Dump packet if debug option is set. */</span>
<a name="l00417"></a>00417 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l00418"></a>00418 <span class="preprocessor"></span>  <span class="comment">/* bgp_packet_dump (packet); */</span>
<a name="l00419"></a>00419 <span class="preprocessor">#endif </span><span class="comment">/* DEBUG */</span>
<a name="l00420"></a>00420 
<a name="l00421"></a>00421   <span class="comment">/* Add packet to the peer. */</span>
<a name="l00422"></a>00422   <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);
<a name="l00423"></a>00423 
<a name="l00424"></a>00424   <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l00425"></a>00425 }
<a name="l00426"></a>00426 
<a name="l00427"></a>00427 <span class="keywordtype">void</span>
<a name="l00428"></a><a class="code" href="bgp__packet_8h.html#aed5ce3f1b8569b363df083eb01b3a961">00428</a> <a class="code" href="bgp__packet_8c.html#aa71da9143ef196d665fd6cb773885f61">bgp_default_withdraw_send</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)
<a name="l00429"></a>00429 {
<a name="l00430"></a>00430   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00431"></a>00431   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
<a name="l00432"></a>00432   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> p;
<a name="l00433"></a>00433   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pos;
<a name="l00434"></a>00434   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cp;
<a name="l00435"></a>00435   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> unfeasible_len;
<a name="l00436"></a>00436   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> total_attr_len;
<a name="l00437"></a>00437   <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l00438"></a>00438 
<a name="l00439"></a>00439   <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
<a name="l00440"></a>00440     <span class="keywordflow">return</span>;
<a name="l00441"></a>00441 
<a name="l00442"></a>00442   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l00443"></a>00443     <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="stringliteral">&quot;0.0.0.0/0&quot;</span>, &amp;p);
<a name="l00444"></a>00444 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00445"></a>00445 <span class="preprocessor"></span>  <span class="keywordflow">else</span> 
<a name="l00446"></a>00446     <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (<span class="stringliteral">&quot;::/0&quot;</span>, &amp;p);
<a name="l00447"></a>00447 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00448"></a>00448 
<a name="l00449"></a>00449   total_attr_len = 0;
<a name="l00450"></a>00450   pos = 0;
<a name="l00451"></a>00451 
<a name="l00452"></a>00452   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_OUT))
<a name="l00453"></a>00453     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s send UPDATE %s/%d -- unreachable&quot;</span>,
<a name="l00454"></a>00454           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(p.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;(p.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), buf, BUFSIZ),
<a name="l00455"></a>00455           p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00456"></a>00456 
<a name="l00457"></a>00457   s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
<a name="l00458"></a>00458 
<a name="l00459"></a>00459   <span class="comment">/* Make BGP update packet. */</span>
<a name="l00460"></a>00460   <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>);
<a name="l00461"></a>00461 
<a name="l00462"></a>00462   <span class="comment">/* Unfeasible Routes Length. */</span>;
<a name="l00463"></a>00463   cp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l00464"></a>00464   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00465"></a>00465 
<a name="l00466"></a>00466   <span class="comment">/* Withdrawn Routes. */</span>
<a name="l00467"></a>00467   <span class="keywordflow">if</span> (p.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET &amp;&amp; safi == <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>)
<a name="l00468"></a>00468     {
<a name="l00469"></a>00469       <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, &amp;p);
<a name="l00470"></a>00470 
<a name="l00471"></a>00471       unfeasible_len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - cp - 2;
<a name="l00472"></a>00472 
<a name="l00473"></a>00473       <span class="comment">/* Set unfeasible len.  */</span>
<a name="l00474"></a>00474       <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, cp, unfeasible_len);
<a name="l00475"></a>00475 
<a name="l00476"></a>00476       <span class="comment">/* Set total path attribute length. */</span>
<a name="l00477"></a>00477       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00478"></a>00478     }
<a name="l00479"></a>00479   <span class="keywordflow">else</span>
<a name="l00480"></a>00480     {
<a name="l00481"></a>00481       pos = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l00482"></a>00482       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00483"></a>00483       total_attr_len = <a class="code" href="bgp__attr_8c.html#a307ab4e45f577239562b43a73ef8f3a3">bgp_packet_withdraw</a> (peer, s, &amp;p, afi, safi, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00484"></a>00484 
<a name="l00485"></a>00485       <span class="comment">/* Set total path attribute length. */</span>
<a name="l00486"></a>00486       <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, pos, total_attr_len);
<a name="l00487"></a>00487     }
<a name="l00488"></a>00488 
<a name="l00489"></a>00489   <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
<a name="l00490"></a>00490 
<a name="l00491"></a>00491   packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
<a name="l00492"></a>00492   <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
<a name="l00493"></a>00493 
<a name="l00494"></a>00494   <span class="comment">/* Add packet to the peer. */</span>
<a name="l00495"></a>00495   <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);
<a name="l00496"></a>00496 
<a name="l00497"></a>00497   <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l00498"></a>00498 }
<a name="l00499"></a>00499 
<a name="l00500"></a>00500 <span class="comment">/* Get next packet to be written.  */</span>
<a name="l00501"></a>00501 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *
<a name="l00502"></a><a class="code" href="bgp__packet_8c.html#a379c7164298b8b6294eec50512466660">00502</a> <a class="code" href="bgp__packet_8c.html#a379c7164298b8b6294eec50512466660">bgp_write_packet</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00503"></a>00503 {
<a name="l00504"></a>00504   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l00505"></a>00505   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l00506"></a>00506   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00507"></a>00507   <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;
<a name="l00508"></a>00508 
<a name="l00509"></a>00509   s = <a class="code" href="stream_8c.html#a11eebf8ef20ce7257c51bc7efc6b17de">stream_fifo_head</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>);
<a name="l00510"></a>00510   <span class="keywordflow">if</span> (s)
<a name="l00511"></a>00511     <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00512"></a>00512 
<a name="l00513"></a>00513   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l00514"></a>00514     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l00515"></a>00515       {
<a name="l00516"></a>00516     adv = <a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>);
<a name="l00517"></a>00517     <span class="keywordflow">if</span> (adv)
<a name="l00518"></a>00518       {
<a name="l00519"></a>00519         s = <a class="code" href="bgp__packet_8c.html#ae745068443230e6f96f4ea075c0ee8d6">bgp_withdraw_packet</a> (peer, afi, safi);
<a name="l00520"></a>00520         <span class="keywordflow">if</span> (s)
<a name="l00521"></a>00521           <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00522"></a>00522       }
<a name="l00523"></a>00523       }
<a name="l00524"></a>00524     
<a name="l00525"></a>00525   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l00526"></a>00526     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l00527"></a>00527       {
<a name="l00528"></a>00528     adv = <a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>);
<a name="l00529"></a>00529     <span class="keywordflow">if</span> (adv)
<a name="l00530"></a>00530       {
<a name="l00531"></a>00531             <span class="keywordflow">if</span> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a> &amp;&amp; adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a> &lt; peer-&gt;<a class="code" href="structpeer.html#ac634a8cdc8e00d064d9d9fcdd324a950">synctime</a>)
<a name="l00532"></a>00532           {
<a name="l00533"></a>00533         <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#aab0e7899c7f4ffb2b280a37d9647a061">PEER_CAP_RESTART_RCV</a>)
<a name="l00534"></a>00534             &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a0676dbf05f735073d261e5a01b1c7dcb">PEER_CAP_RESTART_ADV</a>)
<a name="l00535"></a>00535             &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a7ae2579adaf8f2fae14dc9d5fc23e976">flags</a>, <a class="code" href="bgp__route_8h.html#a455eac0750f63b056c8c5aff39222927">BGP_INFO_STALE</a>)
<a name="l00536"></a>00536             &amp;&amp; safi != <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l00537"></a>00537           {
<a name="l00538"></a>00538             <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#a367917f671400c20f33e512fa2c435dc">peer</a>-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi],
<a name="l00539"></a>00539             <a class="code" href="bgpd_8h.html#a9644d56ec1353f125c50e97ae40ab71c">PEER_STATUS_EOR_RECEIVED</a>))
<a name="l00540"></a>00540               s = <a class="code" href="bgp__packet_8c.html#a70551f4df0090523408c9f19d97b97b6">bgp_update_packet</a> (peer, afi, safi);
<a name="l00541"></a>00541           }
<a name="l00542"></a>00542         <span class="keywordflow">else</span>
<a name="l00543"></a>00543           s = <a class="code" href="bgp__packet_8c.html#a70551f4df0090523408c9f19d97b97b6">bgp_update_packet</a> (peer, afi, safi);
<a name="l00544"></a>00544           }
<a name="l00545"></a>00545 
<a name="l00546"></a>00546         <span class="keywordflow">if</span> (s)
<a name="l00547"></a>00547           <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00548"></a>00548       }
<a name="l00549"></a>00549 
<a name="l00550"></a>00550     <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#aab0e7899c7f4ffb2b280a37d9647a061">PEER_CAP_RESTART_RCV</a>))
<a name="l00551"></a>00551       {
<a name="l00552"></a>00552         <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] &amp;&amp; peer-&gt;<a class="code" href="structpeer.html#ac634a8cdc8e00d064d9d9fcdd324a950">synctime</a>
<a name="l00553"></a>00553         &amp;&amp; ! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a0e4cbda72bcedfa25ea9216a5cf1bf11">PEER_STATUS_EOR_SEND</a>)
<a name="l00554"></a>00554         &amp;&amp; safi != <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l00555"></a>00555           {
<a name="l00556"></a>00556         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#a0e4cbda72bcedfa25ea9216a5cf1bf11">PEER_STATUS_EOR_SEND</a>);
<a name="l00557"></a>00557         <span class="keywordflow">return</span> <a class="code" href="bgp__packet_8c.html#a5fd59a2d80d58f55d06eaa5d015c893b">bgp_update_packet_eor</a> (peer, afi, safi);
<a name="l00558"></a>00558           }
<a name="l00559"></a>00559       }
<a name="l00560"></a>00560       }
<a name="l00561"></a>00561 
<a name="l00562"></a>00562   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00563"></a>00563 }
<a name="l00564"></a>00564 
<a name="l00565"></a>00565 <span class="comment">/* Is there partially written packet or updates we can send right</span>
<a name="l00566"></a>00566 <span class="comment">   now.  */</span>
<a name="l00567"></a>00567 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00568"></a><a class="code" href="bgp__packet_8c.html#a2f88d64d5a585237b317b5a98d9fdf29">00568</a> <a class="code" href="bgp__packet_8c.html#a2f88d64d5a585237b317b5a98d9fdf29">bgp_write_proceed</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00569"></a>00569 {
<a name="l00570"></a>00570   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l00571"></a>00571   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l00572"></a>00572   <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;
<a name="l00573"></a>00573 
<a name="l00574"></a>00574   <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#a11eebf8ef20ce7257c51bc7efc6b17de">stream_fifo_head</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>))
<a name="l00575"></a>00575     <span class="keywordflow">return</span> 1;
<a name="l00576"></a>00576 
<a name="l00577"></a>00577   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l00578"></a>00578     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l00579"></a>00579       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>))
<a name="l00580"></a>00580     <span class="keywordflow">return</span> 1;
<a name="l00581"></a>00581 
<a name="l00582"></a>00582   <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
<a name="l00583"></a>00583     <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
<a name="l00584"></a>00584       <span class="keywordflow">if</span> ((adv = <a class="code" href="zebra_8h.html#a91bc0b903eba506e5d7f5bfe15f9715e">FIFO_HEAD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00585"></a>00585     <span class="keywordflow">if</span> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>-&gt;<a class="code" href="structbgp__info.html#adb8b5aba2ea49640e700fa870b7f5426">uptime</a> &lt; peer-&gt;<a class="code" href="structpeer.html#ac634a8cdc8e00d064d9d9fcdd324a950">synctime</a>)
<a name="l00586"></a>00586       <span class="keywordflow">return</span> 1;
<a name="l00587"></a>00587 
<a name="l00588"></a>00588   <span class="keywordflow">return</span> 0;
<a name="l00589"></a>00589 }
<a name="l00590"></a>00590 
<a name="l00591"></a>00591 <span class="comment">/* Write packet to the peer. */</span>
<a name="l00592"></a>00592 <span class="keywordtype">int</span>
<a name="l00593"></a><a class="code" href="bgp__packet_8h.html#a013cbe8fe89b4ea4ec6c0712c66a6f8b">00593</a> <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l00594"></a>00594 {
<a name="l00595"></a>00595   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l00596"></a>00596   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00597"></a>00597   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>; 
<a name="l00598"></a>00598   <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>;
<a name="l00599"></a>00599   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a66e3fedede6aa372e5196e55e5e8d5c1">count</a> = 0;
<a name="l00600"></a>00600   <span class="keywordtype">int</span> write_errno;
<a name="l00601"></a>00601 
<a name="l00602"></a>00602   <span class="comment">/* Yes first of all get peer pointer. */</span>
<a name="l00603"></a>00603   peer = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l00604"></a>00604   peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00605"></a>00605 
<a name="l00606"></a>00606   <span class="comment">/* For non-blocking IO check. */</span>
<a name="l00607"></a>00607   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#a58672521fe155cead3bd1f0653be62ee">Connect</a>)
<a name="l00608"></a>00608     {
<a name="l00609"></a>00609       <a class="code" href="bgp__packet_8c.html#afa3f4ee76734007f952c560c6e6d3124">bgp_connect_check</a> (peer);
<a name="l00610"></a>00610       <span class="keywordflow">return</span> 0;
<a name="l00611"></a>00611     }
<a name="l00612"></a>00612 
<a name="l00613"></a>00613     <span class="comment">/* Nonblocking write until TCP output buffer is full.  */</span>
<a name="l00614"></a>00614   <span class="keywordflow">while</span> (1)
<a name="l00615"></a>00615     {
<a name="l00616"></a>00616       <span class="keywordtype">int</span> writenum;
<a name="l00617"></a>00617       <span class="keywordtype">int</span> <a class="code" href="prefix_8h.html#a43e03366be2dd9176e91229d76541ce9">val</a>;
<a name="l00618"></a>00618 
<a name="l00619"></a>00619       s = <a class="code" href="bgp__packet_8c.html#a379c7164298b8b6294eec50512466660">bgp_write_packet</a> (peer);
<a name="l00620"></a>00620       <span class="keywordflow">if</span> (! s)
<a name="l00621"></a>00621     <span class="keywordflow">return</span> 0;
<a name="l00622"></a>00622       
<a name="l00623"></a>00623       <span class="comment">/* XXX: FIXME, the socket should be NONBLOCK from the start</span>
<a name="l00624"></a>00624 <span class="comment">       * status shouldnt need to be toggled on each write</span>
<a name="l00625"></a>00625 <span class="comment">       */</span>
<a name="l00626"></a>00626       val = fcntl (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, F_GETFL, 0);
<a name="l00627"></a>00627       fcntl (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, F_SETFL, val|O_NONBLOCK);
<a name="l00628"></a>00628 
<a name="l00629"></a>00629       <span class="comment">/* Number of bytes to be sent.  */</span>
<a name="l00630"></a>00630       writenum = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - <a class="code" href="stream_8c.html#a717f15645000d42a15034f5ec83fc9a5">stream_get_getp</a> (s);
<a name="l00631"></a>00631 
<a name="l00632"></a>00632       <span class="comment">/* Call write() system call.  */</span>
<a name="l00633"></a>00633       num = write (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, <a class="code" href="stream_8h.html#a4bb95ef1391c2b8b7b97678a5ad87cb7">STREAM_PNT</a> (s), writenum);
<a name="l00634"></a>00634       write_errno = errno;
<a name="l00635"></a>00635       fcntl (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, F_SETFL, val);
<a name="l00636"></a>00636       <span class="keywordflow">if</span> (num &lt;= 0)
<a name="l00637"></a>00637     {
<a name="l00638"></a>00638       <span class="comment">/* Partial write. */</span>
<a name="l00639"></a>00639       <span class="keywordflow">if</span> (write_errno == EWOULDBLOCK || write_errno == EAGAIN)
<a name="l00640"></a>00640           <span class="keywordflow">break</span>;
<a name="l00641"></a>00641 
<a name="l00642"></a>00642       <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#ab37344e5380c17e5b2c9be898d63ca67">TCP_fatal_error</a>);
<a name="l00643"></a>00643       <span class="keywordflow">return</span> 0;
<a name="l00644"></a>00644     }
<a name="l00645"></a>00645       <span class="keywordflow">if</span> (num != writenum)
<a name="l00646"></a>00646     {
<a name="l00647"></a>00647       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, num);
<a name="l00648"></a>00648 
<a name="l00649"></a>00649       <span class="keywordflow">if</span> (write_errno == EAGAIN)
<a name="l00650"></a>00650         <span class="keywordflow">break</span>;
<a name="l00651"></a>00651 
<a name="l00652"></a>00652       <span class="keywordflow">continue</span>;
<a name="l00653"></a>00653     }
<a name="l00654"></a>00654 
<a name="l00655"></a>00655       <span class="comment">/* Retrieve BGP packet type. */</span>
<a name="l00656"></a>00656       <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (s, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a> + 2);
<a name="l00657"></a>00657       type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00658"></a>00658 
<a name="l00659"></a>00659       <span class="keywordflow">switch</span> (type)
<a name="l00660"></a>00660     {
<a name="l00661"></a>00661     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a>:
<a name="l00662"></a>00662       peer-&gt;<a class="code" href="structpeer.html#a6372a52ffefb71ae6e45658ba6961c48">open_out</a>++;
<a name="l00663"></a>00663       <span class="keywordflow">break</span>;
<a name="l00664"></a>00664     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>:
<a name="l00665"></a>00665       peer-&gt;<a class="code" href="structpeer.html#ae471ee06ab605d6101199ec38f06f3b6">update_out</a>++;
<a name="l00666"></a>00666       <span class="keywordflow">break</span>;
<a name="l00667"></a>00667     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a>:
<a name="l00668"></a>00668       peer-&gt;<a class="code" href="structpeer.html#a3c2d072c10be8fbf3d56dad221b799cc">notify_out</a>++;
<a name="l00669"></a>00669       <span class="comment">/* Double start timer. */</span>
<a name="l00670"></a>00670       peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> *= 2;
<a name="l00671"></a>00671 
<a name="l00672"></a>00672       <span class="comment">/* Overflow check. */</span>
<a name="l00673"></a>00673       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> &gt;= (60 * 2))
<a name="l00674"></a>00674         peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> = (60 * 2);
<a name="l00675"></a>00675 
<a name="l00676"></a>00676       <span class="comment">/* Flush any existing events */</span>
<a name="l00677"></a>00677       <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l00678"></a>00678       <span class="keywordflow">return</span> 0;
<a name="l00679"></a>00679     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a>:
<a name="l00680"></a>00680       peer-&gt;<a class="code" href="structpeer.html#af879557d041a38f1603e09a38834f241">keepalive_out</a>++;
<a name="l00681"></a>00681       <span class="keywordflow">break</span>;
<a name="l00682"></a>00682     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a>:
<a name="l00683"></a>00683     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a>:
<a name="l00684"></a>00684       peer-&gt;<a class="code" href="structpeer.html#abba30cc4402a799a43f4eb7bd04e4dfe">refresh_out</a>++;
<a name="l00685"></a>00685       <span class="keywordflow">break</span>;
<a name="l00686"></a>00686     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a>:
<a name="l00687"></a>00687       peer-&gt;<a class="code" href="structpeer.html#a787d4c08df4bb74dbd15d58f206f6768">dynamic_cap_out</a>++;
<a name="l00688"></a>00688       <span class="keywordflow">break</span>;
<a name="l00689"></a>00689     }
<a name="l00690"></a>00690 
<a name="l00691"></a>00691       <span class="comment">/* OK we send packet so delete it. */</span>
<a name="l00692"></a>00692       <a class="code" href="bgp__packet_8c.html#aa529c538a0a9df61107f11602ca3c524">bgp_packet_delete</a> (peer);
<a name="l00693"></a>00693 
<a name="l00694"></a>00694       <span class="keywordflow">if</span> (++count &gt;= <a class="code" href="bgp__packet_8h.html#a69f0a11991c18cd78e31d458dfb2ec33">BGP_WRITE_PACKET_MAX</a>)
<a name="l00695"></a>00695     <span class="keywordflow">break</span>;
<a name="l00696"></a>00696     }
<a name="l00697"></a>00697   
<a name="l00698"></a>00698   <span class="keywordflow">if</span> (<a class="code" href="bgp__packet_8c.html#a2f88d64d5a585237b317b5a98d9fdf29">bgp_write_proceed</a> (peer))
<a name="l00699"></a>00699     <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l00700"></a>00700   
<a name="l00701"></a>00701   <span class="keywordflow">return</span> 0;
<a name="l00702"></a>00702 }
<a name="l00703"></a>00703 
<a name="l00704"></a>00704 <span class="comment">/* This is only for sending NOTIFICATION message to neighbor. */</span>
<a name="l00705"></a>00705 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00706"></a><a class="code" href="bgp__packet_8c.html#aa850751bf6d2a251acac9e81a799d97a">00706</a> <a class="code" href="bgp__packet_8c.html#aa850751bf6d2a251acac9e81a799d97a">bgp_write_notify</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00707"></a>00707 {
<a name="l00708"></a>00708   <span class="keywordtype">int</span> ret;
<a name="l00709"></a>00709   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00710"></a>00710   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>; 
<a name="l00711"></a>00711 
<a name="l00712"></a>00712   <span class="comment">/* There should be at least one packet. */</span>
<a name="l00713"></a>00713   s = <a class="code" href="stream_8c.html#a11eebf8ef20ce7257c51bc7efc6b17de">stream_fifo_head</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>);
<a name="l00714"></a>00714   <span class="keywordflow">if</span> (!s)
<a name="l00715"></a>00715     <span class="keywordflow">return</span> 0;
<a name="l00716"></a>00716   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) &gt;= <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>);
<a name="l00717"></a>00717 
<a name="l00718"></a>00718   <span class="comment">/* I&#39;m not sure fd is writable. */</span>
<a name="l00719"></a>00719   ret = <a class="code" href="network_8c.html#ae7fc0505143ee1a9a30340c4863a6ea6">writen</a> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
<a name="l00720"></a>00720   <span class="keywordflow">if</span> (ret &lt;= 0)
<a name="l00721"></a>00721     {
<a name="l00722"></a>00722       <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#ab37344e5380c17e5b2c9be898d63ca67">TCP_fatal_error</a>);
<a name="l00723"></a>00723       <span class="keywordflow">return</span> 0;
<a name="l00724"></a>00724     }
<a name="l00725"></a>00725 
<a name="l00726"></a>00726   <span class="comment">/* Retrieve BGP packet type. */</span>
<a name="l00727"></a>00727   <a class="code" href="stream_8c.html#a5506a87bd79df66accb6ad8fbbd5857c">stream_set_getp</a> (s, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a> + 2);
<a name="l00728"></a>00728   type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l00729"></a>00729 
<a name="l00730"></a>00730   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (type == <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a>);
<a name="l00731"></a>00731 
<a name="l00732"></a>00732   <span class="comment">/* Type should be notify. */</span>
<a name="l00733"></a>00733   peer-&gt;<a class="code" href="structpeer.html#a3c2d072c10be8fbf3d56dad221b799cc">notify_out</a>++;
<a name="l00734"></a>00734 
<a name="l00735"></a>00735   <span class="comment">/* Double start timer. */</span>
<a name="l00736"></a>00736   peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> *= 2;
<a name="l00737"></a>00737 
<a name="l00738"></a>00738   <span class="comment">/* Overflow check. */</span>
<a name="l00739"></a>00739   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> &gt;= (60 * 2))
<a name="l00740"></a>00740     peer-&gt;<a class="code" href="structpeer.html#a82d93e09c2e715abdb362fa6b5059908">v_start</a> = (60 * 2);
<a name="l00741"></a>00741 
<a name="l00742"></a>00742   <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l00743"></a>00743 
<a name="l00744"></a>00744   <span class="keywordflow">return</span> 0;
<a name="l00745"></a>00745 }
<a name="l00746"></a>00746 
<a name="l00747"></a>00747 <span class="comment">/* Make keepalive packet and send it to the peer. */</span>
<a name="l00748"></a>00748 <span class="keywordtype">void</span>
<a name="l00749"></a><a class="code" href="bgp__packet_8h.html#a1883265fe49e8119b3ae22e199cf4e47">00749</a> <a class="code" href="bgp__packet_8c.html#a8b6e388946a87579949ef337af70d3b2">bgp_keepalive_send</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00750"></a>00750 {
<a name="l00751"></a>00751   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00752"></a>00752   <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00753"></a>00753 
<a name="l00754"></a>00754   s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
<a name="l00755"></a>00755 
<a name="l00756"></a>00756   <span class="comment">/* Make keepalive packet. */</span>
<a name="l00757"></a>00757   <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a>);
<a name="l00758"></a>00758 
<a name="l00759"></a>00759   <span class="comment">/* Set packet size. */</span>
<a name="l00760"></a>00760   length = <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
<a name="l00761"></a>00761 
<a name="l00762"></a>00762   <span class="comment">/* Dump packet if debug option is set. */</span>
<a name="l00763"></a>00763   <span class="comment">/* bgp_packet_dump (s); */</span>
<a name="l00764"></a>00764  
<a name="l00765"></a>00765   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (keepalive, KEEPALIVE))  
<a name="l00766"></a>00766     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending KEEPALIVE&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>); 
<a name="l00767"></a>00767   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00768"></a>00768     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s send message type %d, length (incl. header) %d&quot;</span>,
<a name="l00769"></a>00769                peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a>, length);
<a name="l00770"></a>00770 
<a name="l00771"></a>00771   <span class="comment">/* Add packet to the peer. */</span>
<a name="l00772"></a>00772   <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, s);
<a name="l00773"></a>00773 
<a name="l00774"></a>00774   <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l00775"></a>00775 }
<a name="l00776"></a>00776 
<a name="l00777"></a>00777 <span class="comment">/* Make open packet and send it to the peer. */</span>
<a name="l00778"></a>00778 <span class="keywordtype">void</span>
<a name="l00779"></a><a class="code" href="bgp__packet_8h.html#a326ef30c2b162a786eec36bdc4f95d1f">00779</a> <a class="code" href="bgp__packet_8c.html#ae1767b91e9e958ab92372f1e2af46c2b">bgp_open_send</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l00780"></a>00780 {
<a name="l00781"></a>00781   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00782"></a>00782   <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00783"></a>00783   u_int16_t send_holdtime;
<a name="l00784"></a>00784   <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> local_as;
<a name="l00785"></a>00785 
<a name="l00786"></a>00786   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>))
<a name="l00787"></a>00787     send_holdtime = peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>;
<a name="l00788"></a>00788   <span class="keywordflow">else</span>
<a name="l00789"></a>00789     send_holdtime = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a>;
<a name="l00790"></a>00790 
<a name="l00791"></a>00791   <span class="comment">/* local-as Change */</span>
<a name="l00792"></a>00792   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>)
<a name="l00793"></a>00793     local_as = peer-&gt;<a class="code" href="structpeer.html#ae70f6bd98dc2d9ddc6ad6343804789b6">change_local_as</a>; 
<a name="l00794"></a>00794   <span class="keywordflow">else</span>
<a name="l00795"></a>00795     local_as = peer-&gt;<a class="code" href="structpeer.html#a4d33d4449107287106341b423f5a7498">local_as</a>; 
<a name="l00796"></a>00796 
<a name="l00797"></a>00797   s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
<a name="l00798"></a>00798 
<a name="l00799"></a>00799   <span class="comment">/* Make open packet. */</span>
<a name="l00800"></a>00800   <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a>);
<a name="l00801"></a>00801 
<a name="l00802"></a>00802   <span class="comment">/* Set open packet values. */</span>
<a name="l00803"></a>00803   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgpd_8h.html#a9379703a2ec6cf40b147ec96a7777ef3">BGP_VERSION_4</a>);        <span class="comment">/* BGP version */</span>
<a name="l00804"></a>00804   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, (local_as &lt;= <a class="code" href="bgp__aspath_8h.html#a5a3365c8e7924ca85bd9675dc6597908">BGP_AS_MAX</a>) ? (u_int16_t) local_as 
<a name="l00805"></a>00805                                            : <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a>);
<a name="l00806"></a>00806   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, send_holdtime);        <span class="comment">/* Hold Time */</span>
<a name="l00807"></a>00807   <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>); <span class="comment">/* BGP Identifier */</span>
<a name="l00808"></a>00808 
<a name="l00809"></a>00809   <span class="comment">/* Set capability code. */</span>
<a name="l00810"></a>00810   <a class="code" href="bgp__open_8c.html#aa7660eff88133071e216cf984179877e">bgp_open_capability</a> (s, peer);
<a name="l00811"></a>00811 
<a name="l00812"></a>00812   <span class="comment">/* Set BGP packet length. */</span>
<a name="l00813"></a>00813   length = <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
<a name="l00814"></a>00814 
<a name="l00815"></a>00815   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00816"></a>00816     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending OPEN, version %d, my as %u, holdtime %d, id %s&quot;</span>, 
<a name="l00817"></a>00817            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgpd_8h.html#a9379703a2ec6cf40b147ec96a7777ef3">BGP_VERSION_4</a>, local_as,
<a name="l00818"></a>00818            send_holdtime, inet_ntoa (peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>));
<a name="l00819"></a>00819 
<a name="l00820"></a>00820   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00821"></a>00821     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s send message type %d, length (incl. header) %d&quot;</span>,
<a name="l00822"></a>00822            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a>, length);
<a name="l00823"></a>00823 
<a name="l00824"></a>00824   <span class="comment">/* Dump packet if debug option is set. */</span>
<a name="l00825"></a>00825   <span class="comment">/* bgp_packet_dump (s); */</span>
<a name="l00826"></a>00826 
<a name="l00827"></a>00827   <span class="comment">/* Add packet to the peer. */</span>
<a name="l00828"></a>00828   <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, s);
<a name="l00829"></a>00829 
<a name="l00830"></a>00830   <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l00831"></a>00831 }
<a name="l00832"></a>00832 
<a name="l00833"></a>00833 <span class="comment">/* Send BGP notify packet with data potion. */</span>
<a name="l00834"></a>00834 <span class="keywordtype">void</span>
<a name="l00835"></a><a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">00835</a> <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_char code, u_char sub_code,
<a name="l00836"></a>00836                u_char *<a class="code" href="dict_8c.html#a43a278d13284fb3412e9eee1db1d967e">data</a>, <span class="keywordtype">size_t</span> datalen)
<a name="l00837"></a>00837 {
<a name="l00838"></a>00838   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00839"></a>00839   <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00840"></a>00840 
<a name="l00841"></a>00841   <span class="comment">/* Allocate new stream. */</span>
<a name="l00842"></a>00842   s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
<a name="l00843"></a>00843 
<a name="l00844"></a>00844   <span class="comment">/* Make nitify packet. */</span>
<a name="l00845"></a>00845   <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a>);
<a name="l00846"></a>00846 
<a name="l00847"></a>00847   <span class="comment">/* Set notify packet values. */</span>
<a name="l00848"></a>00848   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, code);        <span class="comment">/* BGP notify code */</span>
<a name="l00849"></a>00849   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, sub_code);    <span class="comment">/* BGP notify sub_code */</span>
<a name="l00850"></a>00850 
<a name="l00851"></a>00851   <span class="comment">/* If notify data is present. */</span>
<a name="l00852"></a>00852   <span class="keywordflow">if</span> (data)
<a name="l00853"></a>00853     <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (s, data, datalen);
<a name="l00854"></a>00854   
<a name="l00855"></a>00855   <span class="comment">/* Set BGP packet length. */</span>
<a name="l00856"></a>00856   length = <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
<a name="l00857"></a>00857   
<a name="l00858"></a>00858   <span class="comment">/* Add packet to the peer. */</span>
<a name="l00859"></a>00859   <a class="code" href="stream_8c.html#a9e1a6e68edeeb87d009b54c7c2b22365">stream_fifo_clean</a> (peer-&gt;<a class="code" href="structpeer.html#a04997e74f9bfe73fb049633fa25cbbb7">obuf</a>);
<a name="l00860"></a>00860   <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, s);
<a name="l00861"></a>00861 
<a name="l00862"></a>00862   <span class="comment">/* For debug */</span>
<a name="l00863"></a>00863   {
<a name="l00864"></a>00864     <span class="keyword">struct </span><a class="code" href="structbgp__notify.html">bgp_notify</a> bgp_notify;
<a name="l00865"></a>00865     <span class="keywordtype">int</span> first = 0;
<a name="l00866"></a>00866     <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00867"></a>00867     <span class="keywordtype">char</span> c[4];
<a name="l00868"></a>00868 
<a name="l00869"></a>00869     bgp_notify.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a> = <a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a>;
<a name="l00870"></a>00870     bgp_notify.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a> = sub_code;
<a name="l00871"></a>00871     bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00872"></a>00872     bgp_notify.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> = length - <a class="code" href="bgpd_8h.html#a8ec4c7e03d72e64bccae551622d5b3b0">BGP_MSG_NOTIFY_MIN_SIZE</a>;
<a name="l00873"></a>00873     
<a name="l00874"></a>00874     <span class="keywordflow">if</span> (bgp_notify.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>)
<a name="l00875"></a>00875       {
<a name="l00876"></a>00876     bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, bgp_notify.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> * 3);
<a name="l00877"></a>00877     <span class="keywordflow">for</span> (i = 0; i &lt; bgp_notify.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>; i++)
<a name="l00878"></a>00878       <span class="keywordflow">if</span> (first)
<a name="l00879"></a>00879         {
<a name="l00880"></a>00880           sprintf (c, <span class="stringliteral">&quot; %02x&quot;</span>, data[i]);
<a name="l00881"></a>00881           strcat (bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>, c);
<a name="l00882"></a>00882         }
<a name="l00883"></a>00883       <span class="keywordflow">else</span>
<a name="l00884"></a>00884         {
<a name="l00885"></a>00885           first = 1;
<a name="l00886"></a>00886           sprintf (c, <span class="stringliteral">&quot;%02x&quot;</span>, data[i]);
<a name="l00887"></a>00887           strcpy (bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>, c);
<a name="l00888"></a>00888         }
<a name="l00889"></a>00889       }
<a name="l00890"></a>00890     <a class="code" href="bgp__debug_8c.html#a9f3092319ccb5c7d6f684dd7fda40c74">bgp_notify_print</a> (peer, &amp;bgp_notify, <span class="stringliteral">&quot;sending&quot;</span>);
<a name="l00891"></a>00891     <span class="keywordflow">if</span> (bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>)
<a name="l00892"></a>00892       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>);
<a name="l00893"></a>00893   }
<a name="l00894"></a>00894 
<a name="l00895"></a>00895   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00896"></a>00896     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s send message type %d, length (incl. header) %d&quot;</span>,
<a name="l00897"></a>00897            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a>, length);
<a name="l00898"></a>00898 
<a name="l00899"></a>00899   <span class="comment">/* peer reset cause */</span>
<a name="l00900"></a>00900   <span class="keywordflow">if</span> (sub_code != <a class="code" href="bgpd_8h.html#a4e29bf8da662691601bc94e5b9594633">BGP_NOTIFY_CEASE_CONFIG_CHANGE</a>)
<a name="l00901"></a>00901     {
<a name="l00902"></a>00902       <span class="keywordflow">if</span> (sub_code == <a class="code" href="bgpd_8h.html#ae1672a288d642f221bb61ab2cb63e354">BGP_NOTIFY_CEASE_ADMIN_RESET</a>)
<a name="l00903"></a>00903       peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#aabe57499083bfc468ad2e4136556f59f">PEER_DOWN_USER_RESET</a>;
<a name="l00904"></a>00904       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (sub_code == <a class="code" href="bgpd_8h.html#af9421e5cbfffb8ca7839d448d1b816b0">BGP_NOTIFY_CEASE_ADMIN_SHUTDOWN</a>)
<a name="l00905"></a>00905       peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a1526a96200c5cd901303b8652088d291">PEER_DOWN_USER_SHUTDOWN</a>;
<a name="l00906"></a>00906       <span class="keywordflow">else</span>
<a name="l00907"></a>00907       peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ab5d2095460394a99e752d6fe56cfa6c0">PEER_DOWN_NOTIFY_SEND</a>;
<a name="l00908"></a>00908     }
<a name="l00909"></a>00909 
<a name="l00910"></a>00910   <span class="comment">/* Call imidiately. */</span>
<a name="l00911"></a>00911   <a class="code" href="bgp__fsm_8h.html#a49884b788209354868be2e7e580584ce">BGP_WRITE_OFF</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>);
<a name="l00912"></a>00912 
<a name="l00913"></a>00913   <a class="code" href="bgp__packet_8c.html#aa850751bf6d2a251acac9e81a799d97a">bgp_write_notify</a> (peer);
<a name="l00914"></a>00914 }
<a name="l00915"></a>00915 
<a name="l00916"></a>00916 <span class="comment">/* Send BGP notify packet. */</span>
<a name="l00917"></a>00917 <span class="keywordtype">void</span>
<a name="l00918"></a><a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">00918</a> <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_char <a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a>, u_char sub_code)
<a name="l00919"></a>00919 {
<a name="l00920"></a>00920   <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, code, sub_code, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l00921"></a>00921 }
<a name="l00922"></a>00922 
<a name="l00923"></a>00923 <span class="comment">/* Send route refresh message to the peer. */</span>
<a name="l00924"></a>00924 <span class="keywordtype">void</span>
<a name="l00925"></a><a class="code" href="bgp__packet_8h.html#a870a5d11961cbf10e87da7aad659b956">00925</a> <a class="code" href="bgp__packet_8c.html#af79d4c999f0c6321ab65049fb47dc78d">bgp_route_refresh_send</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l00926"></a>00926             u_char orf_type, u_char when_to_refresh, <span class="keywordtype">int</span> <span class="keyword">remove</span>)
<a name="l00927"></a>00927 {
<a name="l00928"></a>00928   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00929"></a>00929   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
<a name="l00930"></a>00930   <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l00931"></a>00931   <span class="keyword">struct </span><a class="code" href="structbgp__filter.html">bgp_filter</a> *<a class="code" href="structfilter.html">filter</a>;
<a name="l00932"></a>00932   <span class="keywordtype">int</span> orf_refresh = 0;
<a name="l00933"></a>00933 
<a name="l00934"></a>00934   <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
<a name="l00935"></a>00935     <span class="keywordflow">return</span>;
<a name="l00936"></a>00936 
<a name="l00937"></a>00937   filter = &amp;peer-&gt;<a class="code" href="structpeer.html#a8ae54829ca91f5860216eb326f264727">filter</a>[afi][safi];
<a name="l00938"></a>00938 
<a name="l00939"></a>00939   <span class="comment">/* Adjust safi code. */</span>
<a name="l00940"></a>00940   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l00941"></a>00941     safi = <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>;
<a name="l00942"></a>00942   
<a name="l00943"></a>00943   s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
<a name="l00944"></a>00944 
<a name="l00945"></a>00945   <span class="comment">/* Make BGP update packet. */</span>
<a name="l00946"></a>00946   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ac1d6ee4b70cb694a4f70664fe966a014">PEER_CAP_REFRESH_NEW_RCV</a>))
<a name="l00947"></a>00947     <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a>);
<a name="l00948"></a>00948   <span class="keywordflow">else</span>
<a name="l00949"></a>00949     <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a>);
<a name="l00950"></a>00950 
<a name="l00951"></a>00951   <span class="comment">/* Encode Route Refresh message. */</span>
<a name="l00952"></a>00952   <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, afi);
<a name="l00953"></a>00953   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l00954"></a>00954   <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);
<a name="l00955"></a>00955  
<a name="l00956"></a>00956   <span class="keywordflow">if</span> (orf_type == <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>
<a name="l00957"></a>00957       || orf_type == <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>)
<a name="l00958"></a>00958     <span class="keywordflow">if</span> (<span class="keyword">remove</span> || filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>].plist)
<a name="l00959"></a>00959       {
<a name="l00960"></a>00960     u_int16_t orf_len;
<a name="l00961"></a>00961     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> orfp;
<a name="l00962"></a>00962 
<a name="l00963"></a>00963     orf_refresh = 1; 
<a name="l00964"></a>00964     <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, when_to_refresh);
<a name="l00965"></a>00965     <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, orf_type);
<a name="l00966"></a>00966     orfp = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s);
<a name="l00967"></a>00967     <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
<a name="l00968"></a>00968 
<a name="l00969"></a>00969     <span class="keywordflow">if</span> (<span class="keyword">remove</span>)
<a name="l00970"></a>00970       {
<a name="l00971"></a>00971         <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#ad1a4beaaf01dc6e5e251aebab1615a8a">PEER_STATUS_ORF_PREFIX_SEND</a>);
<a name="l00972"></a>00972         <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__packet_8h.html#aaa55ed31dd48f7faf00c0f0b83740c05">ORF_COMMON_PART_REMOVE_ALL</a>);
<a name="l00973"></a>00973         <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00974"></a>00974           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending REFRESH_REQ to remove ORF(%d) (%s) for afi/safi: %d/%d&quot;</span>, 
<a name="l00975"></a>00975              peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, orf_type,
<a name="l00976"></a>00976              (when_to_refresh == <a class="code" href="bgp__packet_8h.html#a4dc1e6799b406a23e99cfaf8e680df70">REFRESH_DEFER</a> ? <span class="stringliteral">&quot;defer&quot;</span> : <span class="stringliteral">&quot;immediate&quot;</span>),
<a name="l00977"></a>00977              afi, safi);
<a name="l00978"></a>00978       }
<a name="l00979"></a>00979     <span class="keywordflow">else</span>
<a name="l00980"></a>00980       {
<a name="l00981"></a>00981         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#ad1a4beaaf01dc6e5e251aebab1615a8a">PEER_STATUS_ORF_PREFIX_SEND</a>);
<a name="l00982"></a>00982         <a class="code" href="plist_8c.html#afc282a7288efb63da57b4d55d144fff7">prefix_bgp_orf_entry</a> (s, filter-&gt;<a class="code" href="structbgp__filter.html#aee2c2fc293d876506dc349b65d82278a">plist</a>[<a class="code" href="zebra_8h.html#a0e7bd0ab44045fec6bfba480babaf207">FILTER_IN</a>].plist,
<a name="l00983"></a>00983                   <a class="code" href="bgp__packet_8h.html#a739d323f7e1d604a5bc1777c99e3a663">ORF_COMMON_PART_ADD</a>, <a class="code" href="bgp__packet_8h.html#aa62477116e8caf3e21fb37a789cd03a9">ORF_COMMON_PART_PERMIT</a>,
<a name="l00984"></a>00984                   <a class="code" href="bgp__packet_8h.html#ad4dae47ed99f26afef0dbdbee312094e">ORF_COMMON_PART_DENY</a>);
<a name="l00985"></a>00985         <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l00986"></a>00986           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending REFRESH_REQ with pfxlist ORF(%d) (%s) for afi/safi: %d/%d&quot;</span>, 
<a name="l00987"></a>00987              peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, orf_type,
<a name="l00988"></a>00988              (when_to_refresh == <a class="code" href="bgp__packet_8h.html#a4dc1e6799b406a23e99cfaf8e680df70">REFRESH_DEFER</a> ? <span class="stringliteral">&quot;defer&quot;</span> : <span class="stringliteral">&quot;immediate&quot;</span>),
<a name="l00989"></a>00989              afi, safi);
<a name="l00990"></a>00990       }
<a name="l00991"></a>00991 
<a name="l00992"></a>00992     <span class="comment">/* Total ORF Entry Len. */</span>
<a name="l00993"></a>00993     orf_len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s) - orfp - 2;
<a name="l00994"></a>00994     <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, orfp, orf_len);
<a name="l00995"></a>00995       }
<a name="l00996"></a>00996 
<a name="l00997"></a>00997   <span class="comment">/* Set packet size. */</span>
<a name="l00998"></a>00998   length = <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
<a name="l00999"></a>00999 
<a name="l01000"></a>01000   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01001"></a>01001     {
<a name="l01002"></a>01002       <span class="keywordflow">if</span> (! orf_refresh)
<a name="l01003"></a>01003     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending REFRESH_REQ for afi/safi: %d/%d&quot;</span>, 
<a name="l01004"></a>01004            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
<a name="l01005"></a>01005       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s send message type %d, length (incl. header) %d&quot;</span>,
<a name="l01006"></a>01006          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#ac1d6ee4b70cb694a4f70664fe966a014">PEER_CAP_REFRESH_NEW_RCV</a>) ?
<a name="l01007"></a>01007          <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a> : <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a>, length);
<a name="l01008"></a>01008     }
<a name="l01009"></a>01009 
<a name="l01010"></a>01010   <span class="comment">/* Make real packet. */</span>
<a name="l01011"></a>01011   packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
<a name="l01012"></a>01012   <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
<a name="l01013"></a>01013 
<a name="l01014"></a>01014   <span class="comment">/* Add packet to the peer. */</span>
<a name="l01015"></a>01015   <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);
<a name="l01016"></a>01016 
<a name="l01017"></a>01017   <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l01018"></a>01018 }
<a name="l01019"></a>01019 
<a name="l01020"></a>01020 <span class="comment">/* Send capability message to the peer. */</span>
<a name="l01021"></a>01021 <span class="keywordtype">void</span>
<a name="l01022"></a><a class="code" href="bgp__packet_8h.html#aef3f231f3119b455ce617b22743365d3">01022</a> <a class="code" href="bgp__packet_8c.html#a132f1ba13128e1fa1837b9c01239dc85">bgp_capability_send</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi,
<a name="l01023"></a>01023              <span class="keywordtype">int</span> capability_code, <span class="keywordtype">int</span> action)
<a name="l01024"></a>01024 {
<a name="l01025"></a>01025   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l01026"></a>01026   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *packet;
<a name="l01027"></a>01027   <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l01028"></a>01028 
<a name="l01029"></a>01029   <span class="comment">/* Adjust safi code. */</span>
<a name="l01030"></a>01030   <span class="keywordflow">if</span> (safi == <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>)
<a name="l01031"></a>01031     safi = <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>;
<a name="l01032"></a>01032 
<a name="l01033"></a>01033   s = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (<a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>);
<a name="l01034"></a>01034 
<a name="l01035"></a>01035   <span class="comment">/* Make BGP update packet. */</span>
<a name="l01036"></a>01036   <a class="code" href="bgp__packet_8c.html#abd97bf221857a76aedb9e136d8271ad2">bgp_packet_set_marker</a> (s, <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a>);
<a name="l01037"></a>01037 
<a name="l01038"></a>01038   <span class="comment">/* Encode MP_EXT capability. */</span>
<a name="l01039"></a>01039   <span class="keywordflow">if</span> (capability_code == <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>)
<a name="l01040"></a>01040     {
<a name="l01041"></a>01041       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, action);
<a name="l01042"></a>01042       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>);
<a name="l01043"></a>01043       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="bgp__open_8h.html#ac7fce6558271318759ea5dff7971efcb">CAPABILITY_CODE_MP_LEN</a>);
<a name="l01044"></a>01044       <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, afi);
<a name="l01045"></a>01045       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 0);
<a name="l01046"></a>01046       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, safi);
<a name="l01047"></a>01047 
<a name="l01048"></a>01048       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01049"></a>01049         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s sending CAPABILITY has %s MP_EXT CAP for afi/safi: %d/%d&quot;</span>,
<a name="l01050"></a>01050            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, action == <a class="code" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a> ?
<a name="l01051"></a>01051            <span class="stringliteral">&quot;Advertising&quot;</span> : <span class="stringliteral">&quot;Removing&quot;</span>, afi, safi);
<a name="l01052"></a>01052     }
<a name="l01053"></a>01053 
<a name="l01054"></a>01054   <span class="comment">/* Set packet size. */</span>
<a name="l01055"></a>01055   length = <a class="code" href="bgp__packet_8c.html#a7e9932216f445778d1c21dd471a6ef3a">bgp_packet_set_size</a> (s);
<a name="l01056"></a>01056 
<a name="l01057"></a>01057   <span class="comment">/* Make real packet. */</span>
<a name="l01058"></a>01058   packet = <a class="code" href="stream_8c.html#ad4c81d1449a5c97aa37c0acb4a5c7815">stream_dup</a> (s);
<a name="l01059"></a>01059   <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (s);
<a name="l01060"></a>01060 
<a name="l01061"></a>01061   <span class="comment">/* Add packet to the peer. */</span>
<a name="l01062"></a>01062   <a class="code" href="bgp__packet_8c.html#ac1112a3a8cf02e203843a0beaa7b465f">bgp_packet_add</a> (peer, packet);
<a name="l01063"></a>01063 
<a name="l01064"></a>01064   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01065"></a>01065     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s send message type %d, length (incl. header) %d&quot;</span>,
<a name="l01066"></a>01066            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a>, length);
<a name="l01067"></a>01067 
<a name="l01068"></a>01068   <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l01069"></a>01069 }
<a name="l01070"></a>01070 
<a name="l01071"></a>01071 <span class="comment">/* RFC1771 6.8 Connection collision detection. */</span>
<a name="l01072"></a>01072 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01073"></a><a class="code" href="bgp__packet_8c.html#a811fe9db59d5e1f485a38f8509b5d6b1">01073</a> <a class="code" href="bgp__packet_8c.html#a811fe9db59d5e1f485a38f8509b5d6b1">bgp_collision_detect</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<span class="keyword">new</span>, <span class="keyword">struct</span> in_addr remote_id)
<a name="l01074"></a>01074 {
<a name="l01075"></a>01075   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l01076"></a>01076   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;
<a name="l01077"></a>01077   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l01078"></a>01078 
<a name="l01079"></a>01079   bgp = <a class="code" href="bgpd_8c.html#ae19787bc29126d524ac261d00bacc13d">bgp_get_default</a> ();
<a name="l01080"></a>01080   <span class="keywordflow">if</span> (! bgp)
<a name="l01081"></a>01081     <span class="keywordflow">return</span> 0;
<a name="l01082"></a>01082   
<a name="l01083"></a>01083   <span class="comment">/* Upon receipt of an OPEN message, the local system must examine</span>
<a name="l01084"></a>01084 <span class="comment">     all of its connections that are in the OpenConfirm state.  A BGP</span>
<a name="l01085"></a>01085 <span class="comment">     speaker may also examine connections in an OpenSent state if it</span>
<a name="l01086"></a>01086 <span class="comment">     knows the BGP Identifier of the peer by means outside of the</span>
<a name="l01087"></a>01087 <span class="comment">     protocol.  If among these connections there is a connection to a</span>
<a name="l01088"></a>01088 <span class="comment">     remote BGP speaker whose BGP Identifier equals the one in the</span>
<a name="l01089"></a>01089 <span class="comment">     OPEN message, then the local system performs the following</span>
<a name="l01090"></a>01090 <span class="comment">     collision resolution procedure: */</span>
<a name="l01091"></a>01091 
<a name="l01092"></a>01092   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (bgp-&gt;<a class="code" href="structbgp.html#a99704607de62cd6d36eb8674f921ba8a">peer</a>, node, nnode, peer))
<a name="l01093"></a>01093     {
<a name="l01094"></a>01094       <span class="comment">/* Under OpenConfirm status, local peer structure already hold</span>
<a name="l01095"></a>01095 <span class="comment">         remote router ID. */</span>
<a name="l01096"></a>01096 
<a name="l01097"></a>01097       <span class="keywordflow">if</span> (peer != <span class="keyword">new</span>
<a name="l01098"></a>01098       &amp;&amp; (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#a0bf5b4ab03c60ff4c23c94a1d683b0b9">OpenConfirm</a> || peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#a1873a46d77babce8de80c71ce1624718">OpenSent</a>)
<a name="l01099"></a>01099       &amp;&amp; <a class="code" href="sockunion_8c.html#afbcb327baabeb77f356791b1551e51b8">sockunion_same</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, &amp;new-&gt;su))
<a name="l01100"></a>01100     {
<a name="l01101"></a>01101       <span class="comment">/* 1. The BGP Identifier of the local system is compared to</span>
<a name="l01102"></a>01102 <span class="comment">         the BGP Identifier of the remote system (as specified in</span>
<a name="l01103"></a>01103 <span class="comment">         the OPEN message). */</span>
<a name="l01104"></a>01104 
<a name="l01105"></a>01105       <span class="keywordflow">if</span> (ntohl (peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>.s_addr) &lt; ntohl (remote_id.s_addr))
<a name="l01106"></a>01106         {
<a name="l01107"></a>01107           <span class="comment">/* 2. If the value of the local BGP Identifier is less</span>
<a name="l01108"></a>01108 <span class="comment">         than the remote one, the local system closes BGP</span>
<a name="l01109"></a>01109 <span class="comment">         connection that already exists (the one that is</span>
<a name="l01110"></a>01110 <span class="comment">         already in the OpenConfirm state), and accepts BGP</span>
<a name="l01111"></a>01111 <span class="comment">         connection initiated by the remote system. */</span>
<a name="l01112"></a>01112 
<a name="l01113"></a>01113           <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &gt;= 0)
<a name="l01114"></a>01114         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, <a class="code" href="bgpd_8h.html#a1a56da3ecfc587ca3c5ccc7ce1afc88d">BGP_NOTIFY_CEASE_COLLISION_RESOLUTION</a>);
<a name="l01115"></a>01115           <span class="keywordflow">return</span> 1;
<a name="l01116"></a>01116         }
<a name="l01117"></a>01117       <span class="keywordflow">else</span>
<a name="l01118"></a>01118         {
<a name="l01119"></a>01119           <span class="comment">/* 3. Otherwise, the local system closes newly created</span>
<a name="l01120"></a>01120 <span class="comment">         BGP connection (the one associated with the newly</span>
<a name="l01121"></a>01121 <span class="comment">         received OPEN message), and continues to use the</span>
<a name="l01122"></a>01122 <span class="comment">         existing one (the one that is already in the</span>
<a name="l01123"></a>01123 <span class="comment">         OpenConfirm state). */</span>
<a name="l01124"></a>01124 
<a name="l01125"></a>01125           <span class="keywordflow">if</span> (new-&gt;fd &gt;= 0)
<a name="l01126"></a>01126         <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (<span class="keyword">new</span>, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 
<a name="l01127"></a>01127                      <a class="code" href="bgpd_8h.html#a1a56da3ecfc587ca3c5ccc7ce1afc88d">BGP_NOTIFY_CEASE_COLLISION_RESOLUTION</a>);
<a name="l01128"></a>01128           <span class="keywordflow">return</span> -1;
<a name="l01129"></a>01129         }
<a name="l01130"></a>01130     }
<a name="l01131"></a>01131     }
<a name="l01132"></a>01132   <span class="keywordflow">return</span> 0;
<a name="l01133"></a>01133 }
<a name="l01134"></a>01134 
<a name="l01135"></a>01135 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01136"></a><a class="code" href="bgp__packet_8c.html#a97f0b0875f50fbbba10f0938e820075e">01136</a> <a class="code" href="bgp__packet_8c.html#a97f0b0875f50fbbba10f0938e820075e">bgp_open_receive</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)
<a name="l01137"></a>01137 {
<a name="l01138"></a>01138   <span class="keywordtype">int</span> ret;
<a name="l01139"></a>01139   u_char <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
<a name="l01140"></a>01140   u_char optlen;
<a name="l01141"></a>01141   u_int16_t <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>;
<a name="l01142"></a>01142   u_int16_t send_holdtime;
<a name="l01143"></a>01143   <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> remote_as;
<a name="l01144"></a>01144   <a class="code" href="bgpd_8h.html#ae54756b75cc699532543e4e2214c1c57">as_t</a> as4 = 0;
<a name="l01145"></a>01145   <span class="keyword">struct </span>peer *realpeer;
<a name="l01146"></a>01146   <span class="keyword">struct </span>in_addr remote_id;
<a name="l01147"></a>01147   <span class="keywordtype">int</span> capability;
<a name="l01148"></a>01148   u_int8_t notify_data_remote_as[2];
<a name="l01149"></a>01149   u_int8_t notify_data_remote_id[4];
<a name="l01150"></a>01150 
<a name="l01151"></a>01151   realpeer = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01152"></a>01152   
<a name="l01153"></a>01153   <span class="comment">/* Parse open packet. */</span>
<a name="l01154"></a>01154   version = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01155"></a>01155   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (notify_data_remote_as, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), 2);
<a name="l01156"></a>01156   remote_as  = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01157"></a>01157   holdtime = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01158"></a>01158   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (notify_data_remote_id, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), 4);
<a name="l01159"></a>01159   remote_id.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01160"></a>01160 
<a name="l01161"></a>01161   <span class="comment">/* Receive OPEN message log  */</span>
<a name="l01162"></a>01162   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01163"></a>01163     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcv OPEN, version %d, remote-as (in open) %u,&quot;</span>
<a name="l01164"></a>01164                 <span class="stringliteral">&quot; holdtime %d, id %s&quot;</span>,
<a name="l01165"></a>01165             peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, version, remote_as, holdtime,
<a name="l01166"></a>01166             inet_ntoa (remote_id));
<a name="l01167"></a>01167   
<a name="l01168"></a>01168   <span class="comment">/* BEGIN to read the capability here, but dont do it yet */</span>
<a name="l01169"></a>01169   capability = 0;
<a name="l01170"></a>01170   optlen = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01171"></a>01171   
<a name="l01172"></a>01172   <span class="keywordflow">if</span> (optlen != 0)
<a name="l01173"></a>01173     {
<a name="l01174"></a>01174       <span class="comment">/* We need the as4 capability value *right now* because</span>
<a name="l01175"></a>01175 <span class="comment">       * if it is there, we have not got the remote_as yet, and without</span>
<a name="l01176"></a>01176 <span class="comment">       * that we do not know which peer is connecting to us now.</span>
<a name="l01177"></a>01177 <span class="comment">       */</span> 
<a name="l01178"></a>01178       as4 = <a class="code" href="bgp__open_8c.html#aa94f4ded4a8074c681b0e153744fed37">peek_for_as4_capability</a> (peer, optlen);
<a name="l01179"></a>01179     }
<a name="l01180"></a>01180   
<a name="l01181"></a>01181   <span class="comment">/* Just in case we have a silly peer who sends AS4 capability set to 0 */</span>
<a name="l01182"></a>01182   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>) &amp;&amp; !as4)
<a name="l01183"></a>01183     {
<a name="l01184"></a>01184       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s bad OPEN, got AS4 capability, but AS4 set to 0&quot;</span>,
<a name="l01185"></a>01185                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01186"></a>01186       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>,
<a name="l01187"></a>01187                        <a class="code" href="bgpd_8h.html#a40bb6566865df4b899e2f4f271bb40f5">BGP_NOTIFY_OPEN_BAD_PEER_AS</a>);
<a name="l01188"></a>01188       <span class="keywordflow">return</span> -1;
<a name="l01189"></a>01189     }
<a name="l01190"></a>01190   
<a name="l01191"></a>01191   <span class="keywordflow">if</span> (remote_as == <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a>)
<a name="l01192"></a>01192     {
<a name="l01193"></a>01193       <span class="comment">/* Take the AS4 from the capability.  We must have received the</span>
<a name="l01194"></a>01194 <span class="comment">       * capability now!  Otherwise we have a asn16 peer who uses</span>
<a name="l01195"></a>01195 <span class="comment">       * BGP_AS_TRANS, for some unknown reason.</span>
<a name="l01196"></a>01196 <span class="comment">       */</span>
<a name="l01197"></a>01197       <span class="keywordflow">if</span> (as4 == <a class="code" href="bgp__aspath_8h.html#a9fab3268cc31ac1c5faeff01f7518ba6">BGP_AS_TRANS</a>)
<a name="l01198"></a>01198         {
<a name="l01199"></a>01199           <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s [AS4] NEW speaker using AS_TRANS for AS4, not allowed&quot;</span>,
<a name="l01200"></a>01200                     peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01201"></a>01201           <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>,
<a name="l01202"></a>01202                  <a class="code" href="bgpd_8h.html#a40bb6566865df4b899e2f4f271bb40f5">BGP_NOTIFY_OPEN_BAD_PEER_AS</a>);
<a name="l01203"></a>01203           <span class="keywordflow">return</span> -1;
<a name="l01204"></a>01204         }
<a name="l01205"></a>01205       
<a name="l01206"></a>01206       <span class="keywordflow">if</span> (!as4 &amp;&amp; <a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
<a name="l01207"></a>01207         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [AS4] OPEN remote_as is AS_TRANS, but no AS4.&quot;</span>
<a name="l01208"></a>01208                     <span class="stringliteral">&quot; Odd, but proceeding.&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01209"></a>01209       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (as4 &lt; <a class="code" href="bgp__aspath_8h.html#a5a3365c8e7924ca85bd9675dc6597908">BGP_AS_MAX</a> &amp;&amp; <a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (as4, AS4))
<a name="l01210"></a>01210         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [AS4] OPEN remote_as is AS_TRANS, but AS4 (%u) fits &quot;</span>
<a name="l01211"></a>01211                     <span class="stringliteral">&quot;in 2-bytes, very odd peer.&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, as4);
<a name="l01212"></a>01212       <span class="keywordflow">if</span> (as4)
<a name="l01213"></a>01213         remote_as = as4;
<a name="l01214"></a>01214     } 
<a name="l01215"></a>01215   <span class="keywordflow">else</span> 
<a name="l01216"></a>01216     {
<a name="l01217"></a>01217       <span class="comment">/* We may have a partner with AS4 who has an asno &lt; BGP_AS_MAX */</span>
<a name="l01218"></a>01218       <span class="comment">/* If we have got the capability, peer-&gt;as4cap must match remote_as */</span>
<a name="l01219"></a>01219       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a82052903fe3d209e1216d4ea86b84c6f">PEER_CAP_AS4_RCV</a>)
<a name="l01220"></a>01220           &amp;&amp; as4 != remote_as)
<a name="l01221"></a>01221         {
<a name="l01222"></a>01222       <span class="comment">/* raise error, log this, close session */</span>
<a name="l01223"></a>01223       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s bad OPEN, got AS4 capability, but remote_as %u&quot;</span>
<a name="l01224"></a>01224                 <span class="stringliteral">&quot; mismatch with 16bit &#39;myasn&#39; %u in open&quot;</span>,
<a name="l01225"></a>01225                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, as4, remote_as);
<a name="l01226"></a>01226       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>,
<a name="l01227"></a>01227                <a class="code" href="bgpd_8h.html#a40bb6566865df4b899e2f4f271bb40f5">BGP_NOTIFY_OPEN_BAD_PEER_AS</a>);
<a name="l01228"></a>01228       <span class="keywordflow">return</span> -1;
<a name="l01229"></a>01229     }
<a name="l01230"></a>01230     }
<a name="l01231"></a>01231 
<a name="l01232"></a>01232   <span class="comment">/* Lookup peer from Open packet. */</span>
<a name="l01233"></a>01233   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
<a name="l01234"></a>01234     {
<a name="l01235"></a>01235       <span class="keywordtype">int</span> as = 0;
<a name="l01236"></a>01236 
<a name="l01237"></a>01237       realpeer = <a class="code" href="bgpd_8c.html#a38fe2d829b66f299b42e47bd2d3d5a6c">peer_lookup_with_open</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#ab793b0acdca7d325f32edc25503b83b9">su</a>, remote_as, &amp;remote_id, &amp;as);
<a name="l01238"></a>01238 
<a name="l01239"></a>01239       <span class="keywordflow">if</span> (! realpeer)
<a name="l01240"></a>01240     {
<a name="l01241"></a>01241       <span class="comment">/* Peer&#39;s source IP address is check in bgp_accept(), so this</span>
<a name="l01242"></a>01242 <span class="comment">         must be AS number mismatch or remote-id configuration</span>
<a name="l01243"></a>01243 <span class="comment">         mismatch. */</span>
<a name="l01244"></a>01244       <span class="keywordflow">if</span> (as)
<a name="l01245"></a>01245         {
<a name="l01246"></a>01246           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01247"></a>01247         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s bad OPEN, wrong router identifier %s&quot;</span>,
<a name="l01248"></a>01248                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, inet_ntoa (remote_id));
<a name="l01249"></a>01249           <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l01250"></a>01250                      <a class="code" href="bgpd_8h.html#a523800f0ae18023edb46e21359fb2904">BGP_NOTIFY_OPEN_BAD_BGP_IDENT</a>,
<a name="l01251"></a>01251                      notify_data_remote_id, 4);
<a name="l01252"></a>01252         }
<a name="l01253"></a>01253       <span class="keywordflow">else</span>
<a name="l01254"></a>01254         {
<a name="l01255"></a>01255           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01256"></a>01256         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s bad OPEN, remote AS is %u, expected %u&quot;</span>,
<a name="l01257"></a>01257                 peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, remote_as, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
<a name="l01258"></a>01258           <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>,
<a name="l01259"></a>01259                      <a class="code" href="bgpd_8h.html#a40bb6566865df4b899e2f4f271bb40f5">BGP_NOTIFY_OPEN_BAD_PEER_AS</a>,
<a name="l01260"></a>01260                      notify_data_remote_as, 2);
<a name="l01261"></a>01261         }
<a name="l01262"></a>01262       <span class="keywordflow">return</span> -1;
<a name="l01263"></a>01263     }
<a name="l01264"></a>01264     }
<a name="l01265"></a>01265 
<a name="l01266"></a>01266   <span class="comment">/* When collision is detected and this peer is closed.  Retrun</span>
<a name="l01267"></a>01267 <span class="comment">     immidiately. */</span>
<a name="l01268"></a>01268   ret = <a class="code" href="bgp__packet_8c.html#a811fe9db59d5e1f485a38f8509b5d6b1">bgp_collision_detect</a> (peer, remote_id);
<a name="l01269"></a>01269   <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01270"></a>01270     <span class="keywordflow">return</span> ret;
<a name="l01271"></a>01271 
<a name="l01272"></a>01272   <span class="comment">/* Hack part. */</span>
<a name="l01273"></a>01273   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
<a name="l01274"></a>01274     {
<a name="l01275"></a>01275     <span class="keywordflow">if</span> (realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>
<a name="l01276"></a>01276         &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (realpeer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4ff62dffb922440e74de66efee6f8f42">PEER_STATUS_NSF_MODE</a>))
<a name="l01277"></a>01277     {
<a name="l01278"></a>01278       realpeer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6d8edd574001f795d4969c0f389364c0">PEER_DOWN_NSF_CLOSE_SESSION</a>;
<a name="l01279"></a>01279       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (realpeer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>);
<a name="l01280"></a>01280     }
<a name="l01281"></a>01281     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ret == 0 &amp;&amp; realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a3e4aba4f7d3a690fdce5d1fe31156421">Active</a>
<a name="l01282"></a>01282              &amp;&amp; realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a1873a46d77babce8de80c71ce1624718">OpenSent</a>
<a name="l01283"></a>01283          &amp;&amp; realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a0bf5b4ab03c60ff4c23c94a1d683b0b9">OpenConfirm</a>
<a name="l01284"></a>01284          &amp;&amp; realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#a58672521fe155cead3bd1f0653be62ee">Connect</a>)
<a name="l01285"></a>01285     {
<a name="l01286"></a>01286       <span class="comment">/* XXX: This is an awful problem.. </span>
<a name="l01287"></a>01287 <span class="comment">       *</span>
<a name="l01288"></a>01288 <span class="comment">       * According to the RFC we should just let this connection (of the</span>
<a name="l01289"></a>01289 <span class="comment">       * accepted &#39;peer&#39;) continue on to Established if the other</span>
<a name="l01290"></a>01290 <span class="comment">       * connection (the &#39;realpeer&#39; one) is in state Connect, and deal</span>
<a name="l01291"></a>01291 <span class="comment">       * with the more larval FSM as/when it gets far enough to receive</span>
<a name="l01292"></a>01292 <span class="comment">       * an Open. We don&#39;t do that though, we instead close the (more</span>
<a name="l01293"></a>01293 <span class="comment">       * developed) accepted connection.</span>
<a name="l01294"></a>01294 <span class="comment">       *</span>
<a name="l01295"></a>01295 <span class="comment">       * This means there&#39;s a race, which if hit, can loop:</span>
<a name="l01296"></a>01296 <span class="comment">       *</span>
<a name="l01297"></a>01297 <span class="comment">       *       FSM for A                        FSM for B</span>
<a name="l01298"></a>01298 <span class="comment">       *  realpeer     accept-peer       realpeer     accept-peer</span>
<a name="l01299"></a>01299 <span class="comment">       *</span>
<a name="l01300"></a>01300 <span class="comment">       *  Connect                        Connect</span>
<a name="l01301"></a>01301 <span class="comment">       *               Active</span>
<a name="l01302"></a>01302 <span class="comment">       *               OpenSent          OpenSent</span>
<a name="l01303"></a>01303 <span class="comment">       *               &lt;arrive here,</span>
<a name="l01304"></a>01304 <span class="comment">       *               Notify, delete&gt;   </span>
<a name="l01305"></a>01305 <span class="comment">       *                                 Idle         Active</span>
<a name="l01306"></a>01306 <span class="comment">       *   OpenSent                                   OpenSent</span>
<a name="l01307"></a>01307 <span class="comment">       *                                              &lt;arrive here,</span>
<a name="l01308"></a>01308 <span class="comment">       *                                              Notify, delete&gt;</span>
<a name="l01309"></a>01309 <span class="comment">       *   Idle</span>
<a name="l01310"></a>01310 <span class="comment">       *   &lt;wait&gt;                        &lt;wait&gt;</span>
<a name="l01311"></a>01311 <span class="comment">       *   Connect                       Connect</span>
<a name="l01312"></a>01312 <span class="comment">       *</span>
<a name="l01313"></a>01313 <span class="comment">           *</span>
<a name="l01314"></a>01314 <span class="comment">       * If both sides are Quagga, they&#39;re almost certain to wait for</span>
<a name="l01315"></a>01315 <span class="comment">       * the same amount of time of course (which doesn&#39;t preclude other</span>
<a name="l01316"></a>01316 <span class="comment">       * implementations also waiting for same time). The race is</span>
<a name="l01317"></a>01317 <span class="comment">       * exacerbated by high-latency (in bgpd and/or the network).</span>
<a name="l01318"></a>01318 <span class="comment">       *</span>
<a name="l01319"></a>01319 <span class="comment">       * The reason we do this is because our FSM is tied to our peer</span>
<a name="l01320"></a>01320 <span class="comment">       * structure, which carries our configuration information, etc. </span>
<a name="l01321"></a>01321 <span class="comment">       * I.e. we can&#39;t let the accepted-peer FSM continue on as it is,</span>
<a name="l01322"></a>01322 <span class="comment">       * cause it&#39;s not associated with any actual peer configuration -</span>
<a name="l01323"></a>01323 <span class="comment">       * it&#39;s just a dummy.</span>
<a name="l01324"></a>01324 <span class="comment">       *</span>
<a name="l01325"></a>01325 <span class="comment">       * It&#39;s possible we could hack-fix this by just bgp_stop&#39;ing the</span>
<a name="l01326"></a>01326 <span class="comment">       * realpeer and continueing on with the &#39;transfer FSM&#39; below. </span>
<a name="l01327"></a>01327 <span class="comment">       * Ideally, we need to seperate FSMs from struct peer.</span>
<a name="l01328"></a>01328 <span class="comment">       *</span>
<a name="l01329"></a>01329 <span class="comment">       * Setting one side to passive avoids the race, as a workaround.</span>
<a name="l01330"></a>01330 <span class="comment">       */</span>
<a name="l01331"></a>01331       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l01332"></a>01332         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s peer status is %s close connection&quot;</span>,
<a name="l01333"></a>01333             realpeer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>,
<a name="l01334"></a>01334             realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));
<a name="l01335"></a>01335       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>,
<a name="l01336"></a>01336                <a class="code" href="bgpd_8h.html#aca678413e6c438a242f9be167636c2eb">BGP_NOTIFY_CEASE_CONNECT_REJECT</a>);
<a name="l01337"></a>01337 
<a name="l01338"></a>01338       <span class="keywordflow">return</span> -1;
<a name="l01339"></a>01339     }
<a name="l01340"></a>01340 
<a name="l01341"></a>01341       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l01342"></a>01342     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [Event] Transfer accept BGP peer to real (state %s)&quot;</span>,
<a name="l01343"></a>01343            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, 
<a name="l01344"></a>01344            <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));
<a name="l01345"></a>01345 
<a name="l01346"></a>01346       <a class="code" href="bgp__fsm_8c.html#a70832c80e2f7e40a453d23689818d84a">bgp_stop</a> (realpeer);
<a name="l01347"></a>01347       
<a name="l01348"></a>01348       <span class="comment">/* Transfer file descriptor. */</span>
<a name="l01349"></a>01349       realpeer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> = peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>;
<a name="l01350"></a>01350       peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> = -1;
<a name="l01351"></a>01351 
<a name="l01352"></a>01352       <span class="comment">/* Transfer input buffer. */</span>
<a name="l01353"></a>01353       <a class="code" href="stream_8c.html#ac25ca0f9b32a76b4ea34ecb3c9d62481">stream_free</a> (realpeer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01354"></a>01354       realpeer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a> = peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>;
<a name="l01355"></a>01355       realpeer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a>;
<a name="l01356"></a>01356       peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01357"></a>01357 
<a name="l01358"></a>01358       <span class="comment">/* Transfer status. */</span>
<a name="l01359"></a>01359       realpeer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> = peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>;
<a name="l01360"></a>01360       <a class="code" href="bgp__fsm_8c.html#a70832c80e2f7e40a453d23689818d84a">bgp_stop</a> (peer);
<a name="l01361"></a>01361       
<a name="l01362"></a>01362       <span class="comment">/* peer pointer change. Open packet send to neighbor. */</span>
<a name="l01363"></a>01363       peer = realpeer;
<a name="l01364"></a>01364       <a class="code" href="bgp__packet_8c.html#ae1767b91e9e958ab92372f1e2af46c2b">bgp_open_send</a> (peer);
<a name="l01365"></a>01365       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &lt; 0)
<a name="l01366"></a>01366     {
<a name="l01367"></a>01367       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;bgp_open_receive peer&#39;s fd is negative value %d&quot;</span>,
<a name="l01368"></a>01368             peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l01369"></a>01369       <span class="keywordflow">return</span> -1;
<a name="l01370"></a>01370     }
<a name="l01371"></a>01371       <a class="code" href="bgp__fsm_8h.html#a62b5746c9e6a92bffde54f2dc61557d7">BGP_READ_ON</a> (peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a>, <a class="code" href="bgp__packet_8c.html#a3a37390260357b584d8fd7b3591b2058">bgp_read</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l01372"></a>01372     }
<a name="l01373"></a>01373 
<a name="l01374"></a>01374   <span class="comment">/* remote router-id check. */</span>
<a name="l01375"></a>01375   <span class="keywordflow">if</span> (remote_id.s_addr == 0
<a name="l01376"></a>01376       || ntohl (remote_id.s_addr) &gt;= 0xe0000000
<a name="l01377"></a>01377       || ntohl (peer-&gt;<a class="code" href="structpeer.html#a1c986a18124938ad666b58d06bf3254c">local_id</a>.s_addr) == ntohl (remote_id.s_addr))
<a name="l01378"></a>01378     {
<a name="l01379"></a>01379       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01380"></a>01380     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s bad OPEN, wrong router identifier %s&quot;</span>,
<a name="l01381"></a>01381            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, inet_ntoa (remote_id));
<a name="l01382"></a>01382       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l01383"></a>01383                  <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l01384"></a>01384                  <a class="code" href="bgpd_8h.html#a523800f0ae18023edb46e21359fb2904">BGP_NOTIFY_OPEN_BAD_BGP_IDENT</a>,
<a name="l01385"></a>01385                  notify_data_remote_id, 4);
<a name="l01386"></a>01386       <span class="keywordflow">return</span> -1;
<a name="l01387"></a>01387     }
<a name="l01388"></a>01388 
<a name="l01389"></a>01389   <span class="comment">/* Set remote router-id */</span>
<a name="l01390"></a>01390   peer-&gt;<a class="code" href="structpeer.html#ae620d85ff35b31ba9eb6073b81731b5b">remote_id</a> = remote_id;
<a name="l01391"></a>01391 
<a name="l01392"></a>01392   <span class="comment">/* Peer BGP version check. */</span>
<a name="l01393"></a>01393   <span class="keywordflow">if</span> (version != <a class="code" href="bgpd_8h.html#a9379703a2ec6cf40b147ec96a7777ef3">BGP_VERSION_4</a>)
<a name="l01394"></a>01394     {
<a name="l01395"></a>01395       u_int8_t maxver = <a class="code" href="bgpd_8h.html#a9379703a2ec6cf40b147ec96a7777ef3">BGP_VERSION_4</a>;
<a name="l01396"></a>01396       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01397"></a>01397     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s bad protocol version, remote requested %d, local request %d&quot;</span>,
<a name="l01398"></a>01398            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, version, <a class="code" href="bgpd_8h.html#a9379703a2ec6cf40b147ec96a7777ef3">BGP_VERSION_4</a>);
<a name="l01399"></a>01399       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l01400"></a>01400                  <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l01401"></a>01401                  <a class="code" href="bgpd_8h.html#ab7bf59c5dba1fe9d921cefa56b91688b">BGP_NOTIFY_OPEN_UNSUP_VERSION</a>,
<a name="l01402"></a>01402                  &amp;maxver, 1);
<a name="l01403"></a>01403       <span class="keywordflow">return</span> -1;
<a name="l01404"></a>01404     }
<a name="l01405"></a>01405 
<a name="l01406"></a>01406   <span class="comment">/* Check neighbor as number. */</span>
<a name="l01407"></a>01407   <span class="keywordflow">if</span> (remote_as != peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>)
<a name="l01408"></a>01408     {
<a name="l01409"></a>01409       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01410"></a>01410     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s bad OPEN, remote AS is %u, expected %u&quot;</span>,
<a name="l01411"></a>01411            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, remote_as, peer-&gt;<a class="code" href="structpeer.html#aa35fab1a77bb496d8377a62cad372314">as</a>);
<a name="l01412"></a>01412       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer, 
<a name="l01413"></a>01413                  <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l01414"></a>01414                  <a class="code" href="bgpd_8h.html#a40bb6566865df4b899e2f4f271bb40f5">BGP_NOTIFY_OPEN_BAD_PEER_AS</a>,
<a name="l01415"></a>01415                  notify_data_remote_as, 2);
<a name="l01416"></a>01416       <span class="keywordflow">return</span> -1;
<a name="l01417"></a>01417     }
<a name="l01418"></a>01418 
<a name="l01419"></a>01419   <span class="comment">/* From the rfc: Upon receipt of an OPEN message, a BGP speaker MUST</span>
<a name="l01420"></a>01420 <span class="comment">     calculate the value of the Hold Timer by using the smaller of its</span>
<a name="l01421"></a>01421 <span class="comment">     configured Hold Time and the Hold Time received in the OPEN message.</span>
<a name="l01422"></a>01422 <span class="comment">     The Hold Time MUST be either zero or at least three seconds.  An</span>
<a name="l01423"></a>01423 <span class="comment">     implementation may reject connections on the basis of the Hold Time. */</span>
<a name="l01424"></a>01424 
<a name="l01425"></a>01425   <span class="keywordflow">if</span> (holdtime &lt; 3 &amp;&amp; holdtime != 0)
<a name="l01426"></a>01426     {
<a name="l01427"></a>01427       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
<a name="l01428"></a>01428                <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a>, 
<a name="l01429"></a>01429                <a class="code" href="bgpd_8h.html#a57a9d1349581d9e93c50cc7796e31479">BGP_NOTIFY_OPEN_UNACEP_HOLDTIME</a>);
<a name="l01430"></a>01430       <span class="keywordflow">return</span> -1;
<a name="l01431"></a>01431     }
<a name="l01432"></a>01432     
<a name="l01433"></a>01433   <span class="comment">/* From the rfc: A reasonable maximum time between KEEPALIVE messages</span>
<a name="l01434"></a>01434 <span class="comment">     would be one third of the Hold Time interval.  KEEPALIVE messages</span>
<a name="l01435"></a>01435 <span class="comment">     MUST NOT be sent more frequently than one per second.  An</span>
<a name="l01436"></a>01436 <span class="comment">     implementation MAY adjust the rate at which it sends KEEPALIVE</span>
<a name="l01437"></a>01437 <span class="comment">     messages as a function of the Hold Time interval. */</span>
<a name="l01438"></a>01438 
<a name="l01439"></a>01439   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#add88f88547df15dd579f2001840a5ffe">config</a>, <a class="code" href="bgpd_8h.html#a0a38ee681fef67382b59bcacf7e71acc">PEER_CONFIG_TIMER</a>))
<a name="l01440"></a>01440     send_holdtime = peer-&gt;<a class="code" href="structpeer.html#a94b9ef3bd3f901c67be200f2b394c206">holdtime</a>;
<a name="l01441"></a>01441   <span class="keywordflow">else</span>
<a name="l01442"></a>01442     send_holdtime = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>-&gt;<a class="code" href="structbgp.html#a019cdc9f6a2587ee4d4a271e5add5db4">default_holdtime</a>;
<a name="l01443"></a>01443 
<a name="l01444"></a>01444   <span class="keywordflow">if</span> (holdtime &lt; send_holdtime)
<a name="l01445"></a>01445     peer-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> = <a class="code" href="isis__pdu_8h.html#a5db191893bc64b3fc0c30964196304c3">holdtime</a>;
<a name="l01446"></a>01446   <span class="keywordflow">else</span>
<a name="l01447"></a>01447     peer-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> = send_holdtime;
<a name="l01448"></a>01448 
<a name="l01449"></a>01449   peer-&gt;<a class="code" href="structpeer.html#a4683327b18d77b5888cc293b180f01ff">v_keepalive</a> = peer-&gt;<a class="code" href="structpeer.html#ade54caf4be91128837361d44f0239fa0">v_holdtime</a> / 3;
<a name="l01450"></a>01450 
<a name="l01451"></a>01451   <span class="comment">/* Open option part parse. */</span>
<a name="l01452"></a>01452   <span class="keywordflow">if</span> (optlen != 0) 
<a name="l01453"></a>01453     {
<a name="l01454"></a>01454       ret = <a class="code" href="bgp__open_8c.html#aec7b4d53e9f585305641d2561f7596f0">bgp_open_option_parse</a> (peer, optlen, &amp;capability);
<a name="l01455"></a>01455       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01456"></a>01456     <span class="keywordflow">return</span> ret;
<a name="l01457"></a>01457     }
<a name="l01458"></a>01458   <span class="keywordflow">else</span>
<a name="l01459"></a>01459     {
<a name="l01460"></a>01460       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01461"></a>01461     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd OPEN w/ OPTION parameter len: 0&quot;</span>,
<a name="l01462"></a>01462            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01463"></a>01463     }
<a name="l01464"></a>01464 
<a name="l01465"></a>01465   <span class="comment">/* Override capability. */</span>
<a name="l01466"></a>01466   <span class="keywordflow">if</span> (! capability || <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
<a name="l01467"></a>01467     {
<a name="l01468"></a>01468       peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>];
<a name="l01469"></a>01469       peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>];
<a name="l01470"></a>01470       peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>] = peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>];
<a name="l01471"></a>01471       peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>] = peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>];
<a name="l01472"></a>01472     }
<a name="l01473"></a>01473 
<a name="l01474"></a>01474   <span class="comment">/* Get sockname. */</span>
<a name="l01475"></a>01475   <a class="code" href="bgp__network_8c.html#a2079c55451759a453b0f416a16d75f86">bgp_getsockname</a> (peer);
<a name="l01476"></a>01476 
<a name="l01477"></a>01477   <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a7b910ae176dbd833e93c13b54d6d9969">Receive_OPEN_message</a>);
<a name="l01478"></a>01478 
<a name="l01479"></a>01479   peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = 0;
<a name="l01480"></a>01480   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>)
<a name="l01481"></a>01481     <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01482"></a>01482 
<a name="l01483"></a>01483   <span class="keywordflow">return</span> 0;
<a name="l01484"></a>01484 }
<a name="l01485"></a>01485 
<a name="l01486"></a>01486 <span class="comment">/* Parse BGP Update packet and make attribute object. */</span>
<a name="l01487"></a>01487 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01488"></a><a class="code" href="bgp__packet_8c.html#a43a9bbf186d894f26c76480c541ca436">01488</a> <a class="code" href="bgp__packet_8c.html#a43a9bbf186d894f26c76480c541ca436">bgp_update_receive</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)
<a name="l01489"></a>01489 {
<a name="l01490"></a>01490   <span class="keywordtype">int</span> ret;
<a name="l01491"></a>01491   u_char *end;
<a name="l01492"></a>01492   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l01493"></a>01493   <span class="keyword">struct </span><a class="code" href="structattr.html">attr</a> attr;
<a name="l01494"></a>01494   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> attribute_len;
<a name="l01495"></a>01495   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> update_len;
<a name="l01496"></a>01496   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> withdraw_len;
<a name="l01497"></a>01497   <span class="keyword">struct </span><a class="code" href="structbgp__nlri.html">bgp_nlri</a> update;
<a name="l01498"></a>01498   <span class="keyword">struct </span><a class="code" href="structbgp__nlri.html">bgp_nlri</a> withdraw;
<a name="l01499"></a>01499   <span class="keyword">struct </span><a class="code" href="structbgp__nlri.html">bgp_nlri</a> mp_update;
<a name="l01500"></a>01500   <span class="keyword">struct </span><a class="code" href="structbgp__nlri.html">bgp_nlri</a> mp_withdraw;
<a name="l01501"></a>01501   <span class="keywordtype">char</span> attrstr[BUFSIZ] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01502"></a>01502 
<a name="l01503"></a>01503   <span class="comment">/* Status must be Established. */</span>
<a name="l01504"></a>01504   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>) 
<a name="l01505"></a>01505     {
<a name="l01506"></a>01506       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s [FSM] Update packet received under status %s&quot;</span>,
<a name="l01507"></a>01507         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));
<a name="l01508"></a>01508       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#af56552e5c55a4c8733dfee55beddb2f8">BGP_NOTIFY_FSM_ERR</a>, 0);
<a name="l01509"></a>01509       <span class="keywordflow">return</span> -1;
<a name="l01510"></a>01510     }
<a name="l01511"></a>01511 
<a name="l01512"></a>01512   <span class="comment">/* Set initial values. */</span>
<a name="l01513"></a>01513   memset (&amp;attr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> attr));
<a name="l01514"></a>01514   memset (&amp;update, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a>));
<a name="l01515"></a>01515   memset (&amp;withdraw, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a>));
<a name="l01516"></a>01516   memset (&amp;mp_update, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a>));
<a name="l01517"></a>01517   memset (&amp;mp_withdraw, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__nlri.html">bgp_nlri</a>));
<a name="l01518"></a>01518 
<a name="l01519"></a>01519   s = peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>;
<a name="l01520"></a>01520   end = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + size;
<a name="l01521"></a>01521 
<a name="l01522"></a>01522   <span class="comment">/* RFC1771 6.3 If the Unfeasible Routes Length or Total Attribute</span>
<a name="l01523"></a>01523 <span class="comment">     Length is too large (i.e., if Unfeasible Routes Length + Total</span>
<a name="l01524"></a>01524 <span class="comment">     Attribute Length + 23 exceeds the message Length), then the Error</span>
<a name="l01525"></a>01525 <span class="comment">     Subcode is set to Malformed Attribute List.  */</span>
<a name="l01526"></a>01526   <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + 2 &gt; end)
<a name="l01527"></a>01527     {
<a name="l01528"></a>01528       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s [Error] Update packet error&quot;</span>
<a name="l01529"></a>01529         <span class="stringliteral">&quot; (packet length is short for unfeasible length)&quot;</span>,
<a name="l01530"></a>01530         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01531"></a>01531       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01532"></a>01532                <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
<a name="l01533"></a>01533       <span class="keywordflow">return</span> -1;
<a name="l01534"></a>01534     }
<a name="l01535"></a>01535 
<a name="l01536"></a>01536   <span class="comment">/* Unfeasible Route Length. */</span>
<a name="l01537"></a>01537   withdraw_len = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l01538"></a>01538 
<a name="l01539"></a>01539   <span class="comment">/* Unfeasible Route Length check. */</span>
<a name="l01540"></a>01540   <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + withdraw_len &gt; end)
<a name="l01541"></a>01541     {
<a name="l01542"></a>01542       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s [Error] Update packet error&quot;</span>
<a name="l01543"></a>01543         <span class="stringliteral">&quot; (packet unfeasible length overflow %d)&quot;</span>,
<a name="l01544"></a>01544         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, withdraw_len);
<a name="l01545"></a>01545       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01546"></a>01546                <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
<a name="l01547"></a>01547       <span class="keywordflow">return</span> -1;
<a name="l01548"></a>01548     }
<a name="l01549"></a>01549 
<a name="l01550"></a>01550   <span class="comment">/* Unfeasible Route packet format check. */</span>
<a name="l01551"></a>01551   <span class="keywordflow">if</span> (withdraw_len &gt; 0)
<a name="l01552"></a>01552     {
<a name="l01553"></a>01553       ret = <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s), withdraw_len);
<a name="l01554"></a>01554       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01555"></a>01555     <span class="keywordflow">return</span> -1;
<a name="l01556"></a>01556 
<a name="l01557"></a>01557       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (packet, PACKET_RECV))
<a name="l01558"></a>01558     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [Update:RECV] Unfeasible NLRI received&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01559"></a>01559 
<a name="l01560"></a>01560       withdraw.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>;
<a name="l01561"></a>01561       withdraw.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>;
<a name="l01562"></a>01562       withdraw.<a class="code" href="structbgp__nlri.html#ac43e135107260206f2a30593371aece1">nlri</a> = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
<a name="l01563"></a>01563       withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> = withdraw_len;
<a name="l01564"></a>01564       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, withdraw_len);
<a name="l01565"></a>01565     }
<a name="l01566"></a>01566   
<a name="l01567"></a>01567   <span class="comment">/* Attribute total length check. */</span>
<a name="l01568"></a>01568   <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + 2 &gt; end)
<a name="l01569"></a>01569     {
<a name="l01570"></a>01570       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s [Error] Packet Error&quot;</span>
<a name="l01571"></a>01571          <span class="stringliteral">&quot; (update packet is short for attribute length)&quot;</span>,
<a name="l01572"></a>01572          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01573"></a>01573       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01574"></a>01574                <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
<a name="l01575"></a>01575       <span class="keywordflow">return</span> -1;
<a name="l01576"></a>01576     }
<a name="l01577"></a>01577 
<a name="l01578"></a>01578   <span class="comment">/* Fetch attribute total length. */</span>
<a name="l01579"></a>01579   attribute_len = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l01580"></a>01580 
<a name="l01581"></a>01581   <span class="comment">/* Attribute length check. */</span>
<a name="l01582"></a>01582   <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + attribute_len &gt; end)
<a name="l01583"></a>01583     {
<a name="l01584"></a>01584       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s [Error] Packet Error&quot;</span>
<a name="l01585"></a>01585          <span class="stringliteral">&quot; (update packet attribute length overflow %d)&quot;</span>,
<a name="l01586"></a>01586          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, attribute_len);
<a name="l01587"></a>01587       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#aa66406351b4bf5ff750eda7a70dfdfcb">BGP_NOTIFY_UPDATE_ERR</a>, 
<a name="l01588"></a>01588                <a class="code" href="bgpd_8h.html#aaafff2a38a6edeb24d3a8a8032a39f86">BGP_NOTIFY_UPDATE_MAL_ATTR</a>);
<a name="l01589"></a>01589       <span class="keywordflow">return</span> -1;
<a name="l01590"></a>01590     }
<a name="l01591"></a>01591 
<a name="l01592"></a>01592   <span class="comment">/* Parse attribute when it exists. */</span>
<a name="l01593"></a>01593   <span class="keywordflow">if</span> (attribute_len)
<a name="l01594"></a>01594     {
<a name="l01595"></a>01595       ret = <a class="code" href="bgp__attr_8c.html#aa14660c4ba4237fe5afa5f0e7700479a">bgp_attr_parse</a> (peer, &amp;attr, attribute_len, 
<a name="l01596"></a>01596                 &amp;mp_update, &amp;mp_withdraw);
<a name="l01597"></a>01597       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01598"></a>01598     <span class="keywordflow">return</span> -1;
<a name="l01599"></a>01599     }
<a name="l01600"></a>01600 
<a name="l01601"></a>01601   <span class="comment">/* Logging the attribute. */</span>
<a name="l01602"></a>01602   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l01603"></a>01603     {
<a name="l01604"></a>01604       ret= <a class="code" href="bgp__debug_8c.html#a32d8ae5f48b2bf76b0a7c13182b2943f">bgp_dump_attr</a> (peer, &amp;attr, attrstr, BUFSIZ);
<a name="l01605"></a>01605 
<a name="l01606"></a>01606       <span class="keywordflow">if</span> (ret)
<a name="l01607"></a>01607     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;%s rcvd UPDATE w/ attr: %s&quot;</span>,
<a name="l01608"></a>01608           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, attrstr);
<a name="l01609"></a>01609     }
<a name="l01610"></a>01610 
<a name="l01611"></a>01611   <span class="comment">/* Network Layer Reachability Information. */</span>
<a name="l01612"></a>01612   update_len = end - <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
<a name="l01613"></a>01613 
<a name="l01614"></a>01614   <span class="keywordflow">if</span> (update_len)
<a name="l01615"></a>01615     {
<a name="l01616"></a>01616       <span class="comment">/* Check NLRI packet format and prefix length. */</span>
<a name="l01617"></a>01617       ret = <a class="code" href="bgp__route_8c.html#ae571d879d9e98f7737dc129b7b90b413">bgp_nlri_sanity_check</a> (peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, stream_pnt (s), update_len);
<a name="l01618"></a>01618       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01619"></a>01619     <span class="keywordflow">return</span> -1;
<a name="l01620"></a>01620 
<a name="l01621"></a>01621       <span class="comment">/* Set NLRI portion to structure. */</span>
<a name="l01622"></a>01622       update.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>;
<a name="l01623"></a>01623       update.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>;
<a name="l01624"></a>01624       update.<a class="code" href="structbgp__nlri.html#ac43e135107260206f2a30593371aece1">nlri</a> = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
<a name="l01625"></a>01625       update.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> = update_len;
<a name="l01626"></a>01626       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, update_len);
<a name="l01627"></a>01627     }
<a name="l01628"></a>01628 
<a name="l01629"></a>01629   <span class="comment">/* NLRI is processed only when the peer is configured specific</span>
<a name="l01630"></a>01630 <span class="comment">     Address Family and Subsequent Address Family. */</span>
<a name="l01631"></a>01631   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>])
<a name="l01632"></a>01632     {
<a name="l01633"></a>01633       <span class="keywordflow">if</span> (withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a>)
<a name="l01634"></a>01634     <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;withdraw);
<a name="l01635"></a>01635 
<a name="l01636"></a>01636       <span class="keywordflow">if</span> (update.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a>)
<a name="l01637"></a>01637     {
<a name="l01638"></a>01638       <span class="comment">/* We check well-known attribute only for IPv4 unicast</span>
<a name="l01639"></a>01639 <span class="comment">         update. */</span>
<a name="l01640"></a>01640       ret = <a class="code" href="bgp__attr_8c.html#a8a1ebdfc7d1986e7f14e9146c58915e4">bgp_attr_check</a> (peer, &amp;attr);
<a name="l01641"></a>01641       <span class="keywordflow">if</span> (ret &lt; 0)
<a name="l01642"></a>01642         <span class="keywordflow">return</span> -1;
<a name="l01643"></a>01643 
<a name="l01644"></a>01644       <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, &amp;attr, &amp;update);
<a name="l01645"></a>01645     }
<a name="l01646"></a>01646 
<a name="l01647"></a>01647       <span class="keywordflow">if</span> (mp_update.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a>
<a name="l01648"></a>01648       &amp;&amp; mp_update.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
<a name="l01649"></a>01649       &amp;&amp; mp_update.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_UNICAST)
<a name="l01650"></a>01650     <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, &amp;attr, &amp;mp_update);
<a name="l01651"></a>01651 
<a name="l01652"></a>01652       <span class="keywordflow">if</span> (mp_withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a>
<a name="l01653"></a>01653       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
<a name="l01654"></a>01654       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_UNICAST)
<a name="l01655"></a>01655     <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;mp_withdraw);
<a name="l01656"></a>01656 
<a name="l01657"></a>01657       <span class="keywordflow">if</span> (! attribute_len &amp;&amp; ! withdraw_len)
<a name="l01658"></a>01658     {
<a name="l01659"></a>01659       <span class="comment">/* End-of-RIB received */</span>
<a name="l01660"></a>01660       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST],
<a name="l01661"></a>01661             <a class="code" href="bgpd_8h.html#a9644d56ec1353f125c50e97ae40ab71c">PEER_STATUS_EOR_RECEIVED</a>);
<a name="l01662"></a>01662 
<a name="l01663"></a>01663       <span class="comment">/* NSF delete stale route */</span>
<a name="l01664"></a>01664       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_UNICAST])
<a name="l01665"></a>01665         <a class="code" href="bgp__route_8c.html#aa1dd948948425c7e30941a8816af5bb1">bgp_clear_stale_route</a> (peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_UNICAST);
<a name="l01666"></a>01666 
<a name="l01667"></a>01667       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01668"></a>01668         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;rcvd End-of-RIB for IPv4 Unicast from %s&quot;</span>,
<a name="l01669"></a>01669           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01670"></a>01670     }
<a name="l01671"></a>01671     }
<a name="l01672"></a>01672   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>])
<a name="l01673"></a>01673     {
<a name="l01674"></a>01674       <span class="keywordflow">if</span> (mp_update.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a>
<a name="l01675"></a>01675       &amp;&amp; mp_update.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
<a name="l01676"></a>01676       &amp;&amp; mp_update.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_MULTICAST)
<a name="l01677"></a>01677     <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, &amp;attr, &amp;mp_update);
<a name="l01678"></a>01678 
<a name="l01679"></a>01679       <span class="keywordflow">if</span> (mp_withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a>
<a name="l01680"></a>01680       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
<a name="l01681"></a>01681       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_MULTICAST)
<a name="l01682"></a>01682     <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;mp_withdraw);
<a name="l01683"></a>01683 
<a name="l01684"></a>01684       <span class="keywordflow">if</span> (! withdraw_len
<a name="l01685"></a>01685       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>
<a name="l01686"></a>01686       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_MULTICAST
<a name="l01687"></a>01687       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> == 0)
<a name="l01688"></a>01688     {
<a name="l01689"></a>01689       <span class="comment">/* End-of-RIB received */</span>
<a name="l01690"></a>01690       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_MULTICAST],
<a name="l01691"></a>01691             <a class="code" href="bgpd_8h.html#a9644d56ec1353f125c50e97ae40ab71c">PEER_STATUS_EOR_RECEIVED</a>);
<a name="l01692"></a>01692 
<a name="l01693"></a>01693       <span class="comment">/* NSF delete stale route */</span>
<a name="l01694"></a>01694       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][SAFI_MULTICAST])
<a name="l01695"></a>01695         <a class="code" href="bgp__route_8c.html#aa1dd948948425c7e30941a8816af5bb1">bgp_clear_stale_route</a> (peer, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, SAFI_MULTICAST);
<a name="l01696"></a>01696 
<a name="l01697"></a>01697       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01698"></a>01698         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;rcvd End-of-RIB for IPv4 Multicast from %s&quot;</span>,
<a name="l01699"></a>01699           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01700"></a>01700     }
<a name="l01701"></a>01701     }
<a name="l01702"></a>01702   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST])
<a name="l01703"></a>01703     {
<a name="l01704"></a>01704       <span class="keywordflow">if</span> (mp_update.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> 
<a name="l01705"></a>01705       &amp;&amp; mp_update.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> 
<a name="l01706"></a>01706       &amp;&amp; mp_update.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_UNICAST)
<a name="l01707"></a>01707     <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, &amp;attr, &amp;mp_update);
<a name="l01708"></a>01708 
<a name="l01709"></a>01709       <span class="keywordflow">if</span> (mp_withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> 
<a name="l01710"></a>01710       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> 
<a name="l01711"></a>01711       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_UNICAST)
<a name="l01712"></a>01712     <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;mp_withdraw);
<a name="l01713"></a>01713 
<a name="l01714"></a>01714       <span class="keywordflow">if</span> (! withdraw_len
<a name="l01715"></a>01715       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>
<a name="l01716"></a>01716       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_UNICAST
<a name="l01717"></a>01717       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> == 0)
<a name="l01718"></a>01718     {
<a name="l01719"></a>01719       <span class="comment">/* End-of-RIB received */</span>
<a name="l01720"></a>01720       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST], <a class="code" href="bgpd_8h.html#a9644d56ec1353f125c50e97ae40ab71c">PEER_STATUS_EOR_RECEIVED</a>);
<a name="l01721"></a>01721 
<a name="l01722"></a>01722       <span class="comment">/* NSF delete stale route */</span>
<a name="l01723"></a>01723       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_UNICAST])
<a name="l01724"></a>01724         <a class="code" href="bgp__route_8c.html#aa1dd948948425c7e30941a8816af5bb1">bgp_clear_stale_route</a> (peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_UNICAST);
<a name="l01725"></a>01725 
<a name="l01726"></a>01726       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01727"></a>01727         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;rcvd End-of-RIB for IPv6 Unicast from %s&quot;</span>,
<a name="l01728"></a>01728           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01729"></a>01729     }
<a name="l01730"></a>01730     }
<a name="l01731"></a>01731   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_MULTICAST])
<a name="l01732"></a>01732     {
<a name="l01733"></a>01733       <span class="keywordflow">if</span> (mp_update.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> 
<a name="l01734"></a>01734       &amp;&amp; mp_update.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> 
<a name="l01735"></a>01735       &amp;&amp; mp_update.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_MULTICAST)
<a name="l01736"></a>01736     <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, &amp;attr, &amp;mp_update);
<a name="l01737"></a>01737 
<a name="l01738"></a>01738       <span class="keywordflow">if</span> (mp_withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> 
<a name="l01739"></a>01739       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a> 
<a name="l01740"></a>01740       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_MULTICAST)
<a name="l01741"></a>01741     <a class="code" href="bgp__route_8c.html#a1d7233eea42c8d4eeb9470fe30e42fed">bgp_nlri_parse</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;mp_withdraw);
<a name="l01742"></a>01742 
<a name="l01743"></a>01743       <span class="keywordflow">if</span> (! withdraw_len
<a name="l01744"></a>01744       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>
<a name="l01745"></a>01745       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == SAFI_MULTICAST
<a name="l01746"></a>01746       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> == 0)
<a name="l01747"></a>01747     {
<a name="l01748"></a>01748       <span class="comment">/* End-of-RIB received */</span>
<a name="l01749"></a>01749 
<a name="l01750"></a>01750       <span class="comment">/* NSF delete stale route */</span>
<a name="l01751"></a>01751       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a36e9e912b00326f95bd69cb6afc11efd">nsf</a>[<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>][SAFI_MULTICAST])
<a name="l01752"></a>01752         <a class="code" href="bgp__route_8c.html#aa1dd948948425c7e30941a8816af5bb1">bgp_clear_stale_route</a> (peer, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, SAFI_MULTICAST);
<a name="l01753"></a>01753 
<a name="l01754"></a>01754       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l01755"></a>01755         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;rcvd End-of-RIB for IPv6 Multicast from %s&quot;</span>,
<a name="l01756"></a>01756           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01757"></a>01757     }
<a name="l01758"></a>01758     }
<a name="l01759"></a>01759   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>][<a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>])
<a name="l01760"></a>01760     {
<a name="l01761"></a>01761       <span class="keywordflow">if</span> (mp_update.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> 
<a name="l01762"></a>01762       &amp;&amp; mp_update.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
<a name="l01763"></a>01763       &amp;&amp; mp_update.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
<a name="l01764"></a>01764     <a class="code" href="bgp__mplsvpn_8c.html#a2e29628712bf37fc59b006b90d0aa909">bgp_nlri_parse_vpnv4</a> (peer, &amp;attr, &amp;mp_update);
<a name="l01765"></a>01765 
<a name="l01766"></a>01766       <span class="keywordflow">if</span> (mp_withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> 
<a name="l01767"></a>01767       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> 
<a name="l01768"></a>01768       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
<a name="l01769"></a>01769     <a class="code" href="bgp__mplsvpn_8c.html#a2e29628712bf37fc59b006b90d0aa909">bgp_nlri_parse_vpnv4</a> (peer, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, &amp;mp_withdraw);
<a name="l01770"></a>01770 
<a name="l01771"></a>01771       <span class="keywordflow">if</span> (! withdraw_len
<a name="l01772"></a>01772       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#aedf0c19c8fb1ee0a65829add11add119">afi</a> == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>
<a name="l01773"></a>01773       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#ae560c9d1471ea79e34fb7e4233afb64a">safi</a> == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>
<a name="l01774"></a>01774       &amp;&amp; mp_withdraw.<a class="code" href="structbgp__nlri.html#a662dc7e55e55b2e5be5ebd9ff15099d1">length</a> == 0)
<a name="l01775"></a>01775     {
<a name="l01776"></a>01776       <span class="comment">/* End-of-RIB received */</span>
<a name="l01777"></a>01777 
<a name="l01778"></a>01778       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (update, UPDATE_IN))
<a name="l01779"></a>01779         <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, LOG_DEBUG, <span class="stringliteral">&quot;rcvd End-of-RIB for VPNv4 Unicast from %s&quot;</span>,
<a name="l01780"></a>01780           peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01781"></a>01781     }
<a name="l01782"></a>01782     }
<a name="l01783"></a>01783 
<a name="l01784"></a>01784   <span class="comment">/* Everything is done.  We unintern temporary structures which</span>
<a name="l01785"></a>01785 <span class="comment">     interned in bgp_attr_parse(). */</span>
<a name="l01786"></a>01786   <span class="keywordflow">if</span> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>)
<a name="l01787"></a>01787     <a class="code" href="bgp__aspath_8c.html#a414aa289179196886d9f059bdd41e81c">aspath_unintern</a> (attr.<a class="code" href="structattr.html#a89311608450bb3b97bccc835e9b004f0">aspath</a>);
<a name="l01788"></a>01788   <span class="keywordflow">if</span> (attr.<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>)
<a name="l01789"></a>01789     <a class="code" href="bgp__community_8c.html#add62474cd8c7fed6877c64537b6c78a2">community_unintern</a> (attr.<a class="code" href="structattr.html#ac892e1f95a0c26d39a47eb12d021072b">community</a>);
<a name="l01790"></a>01790   <span class="keywordflow">if</span> (attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>)
<a name="l01791"></a>01791     {
<a name="l01792"></a>01792       <span class="keywordflow">if</span> (attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>)
<a name="l01793"></a>01793         <a class="code" href="bgp__ecommunity_8c.html#af18451af10079ec0c849b84cef248e7b">ecommunity_unintern</a> (attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#a406b2e10deaef8dadf35a1436d053244">ecommunity</a>);
<a name="l01794"></a>01794       <span class="keywordflow">if</span> (attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>)
<a name="l01795"></a>01795         <a class="code" href="bgp__attr_8c.html#a3ebf5b6e2c65cef7624b6b1e88e61bc6">cluster_unintern</a> (attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#af291cf1efc95b5ed084669b9049db919">cluster</a>);
<a name="l01796"></a>01796       <span class="keywordflow">if</span> (attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>)
<a name="l01797"></a>01797         <a class="code" href="bgp__attr_8c.html#a9b8a411861d16f67929a3359ef7c51a4">transit_unintern</a> (attr.<a class="code" href="structattr.html#a948ca8050af06bf4fda46519eb8ec179">extra</a>-&gt;<a class="code" href="structattr__extra.html#acc269b61aacb9ab5071eb36f87e970d0">transit</a>);
<a name="l01798"></a>01798       <a class="code" href="bgp__attr_8c.html#ad1dd9bb1bf877185bbf32226438a03b0">bgp_attr_extra_free</a> (&amp;attr);
<a name="l01799"></a>01799     }
<a name="l01800"></a>01800 
<a name="l01801"></a>01801   <span class="comment">/* If peering is stopped due to some reason, do not generate BGP</span>
<a name="l01802"></a>01802 <span class="comment">     event.  */</span>
<a name="l01803"></a>01803   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l01804"></a>01804     <span class="keywordflow">return</span> 0;
<a name="l01805"></a>01805 
<a name="l01806"></a>01806   <span class="comment">/* Increment packet counter. */</span>
<a name="l01807"></a>01807   peer-&gt;<a class="code" href="structpeer.html#ae48025e5febc2a1c549110d9326c589f">update_in</a>++;
<a name="l01808"></a>01808   peer-&gt;<a class="code" href="structpeer.html#a417a77217f3ecfb948016245a4eaf650">update_time</a> = <a class="code" href="bgpd_8c.html#a57400e51b671bd48e19b86df877be1e9">bgp_clock</a> ();
<a name="l01809"></a>01809 
<a name="l01810"></a>01810   <span class="comment">/* Generate BGP event. */</span>
<a name="l01811"></a>01811   <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a9530d4f98b88cc8cecfb892d3e6ab798">Receive_UPDATE_message</a>);
<a name="l01812"></a>01812 
<a name="l01813"></a>01813   <span class="keywordflow">return</span> 0;
<a name="l01814"></a>01814 }
<a name="l01815"></a>01815 
<a name="l01816"></a>01816 <span class="comment">/* Notify message treatment function. */</span>
<a name="l01817"></a>01817 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01818"></a><a class="code" href="bgp__packet_8c.html#a695a91d3e1f6a6ec619c0397c27c7e71">01818</a> <a class="code" href="bgp__packet_8c.html#a695a91d3e1f6a6ec619c0397c27c7e71">bgp_notify_receive</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)
<a name="l01819"></a>01819 {
<a name="l01820"></a>01820   <span class="keyword">struct </span><a class="code" href="structbgp__notify.html">bgp_notify</a> bgp_notify;
<a name="l01821"></a>01821 
<a name="l01822"></a>01822   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>)
<a name="l01823"></a>01823     {
<a name="l01824"></a>01824       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>);
<a name="l01825"></a>01825       peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01826"></a>01826       peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> = 0;
<a name="l01827"></a>01827     }
<a name="l01828"></a>01828 
<a name="l01829"></a>01829   bgp_notify.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01830"></a>01830   bgp_notify.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l01831"></a>01831   bgp_notify.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> = size - 2;
<a name="l01832"></a>01832   bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01833"></a>01833 
<a name="l01834"></a>01834   <span class="comment">/* Preserv notify code and sub code. */</span>
<a name="l01835"></a>01835   peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a> = bgp_notify.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a>;
<a name="l01836"></a>01836   peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a> = bgp_notify.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a>;
<a name="l01837"></a>01837   <span class="comment">/* For further diagnostic record returned Data. */</span>
<a name="l01838"></a>01838   <span class="keywordflow">if</span> (bgp_notify.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>)
<a name="l01839"></a>01839     {
<a name="l01840"></a>01840       peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> = size - 2;
<a name="l01841"></a>01841       peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, size - 2);
<a name="l01842"></a>01842       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (peer-&gt;<a class="code" href="structpeer.html#af794a3e8a439d6e3a44ccf9723049a23">notify</a>.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), size - 2);
<a name="l01843"></a>01843     }
<a name="l01844"></a>01844 
<a name="l01845"></a>01845   <span class="comment">/* For debug */</span>
<a name="l01846"></a>01846   {
<a name="l01847"></a>01847     <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l01848"></a>01848     <span class="keywordtype">int</span> first = 0;
<a name="l01849"></a>01849     <span class="keywordtype">char</span> c[4];
<a name="l01850"></a>01850 
<a name="l01851"></a>01851     <span class="keywordflow">if</span> (bgp_notify.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>)
<a name="l01852"></a>01852       {
<a name="l01853"></a>01853     bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a> = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, bgp_notify.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a> * 3);
<a name="l01854"></a>01854     <span class="keywordflow">for</span> (i = 0; i &lt; bgp_notify.<a class="code" href="structbgp__notify.html#a7697d00382add47039a53555c54b3835">length</a>; i++)
<a name="l01855"></a>01855       <span class="keywordflow">if</span> (first)
<a name="l01856"></a>01856         {
<a name="l01857"></a>01857           sprintf (c, <span class="stringliteral">&quot; %02x&quot;</span>, <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>));
<a name="l01858"></a>01858           strcat (bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>, c);
<a name="l01859"></a>01859         }
<a name="l01860"></a>01860       <span class="keywordflow">else</span>
<a name="l01861"></a>01861         {
<a name="l01862"></a>01862           first = 1;
<a name="l01863"></a>01863           sprintf (c, <span class="stringliteral">&quot;%02x&quot;</span>, <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>));
<a name="l01864"></a>01864           strcpy (bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>, c);
<a name="l01865"></a>01865         }
<a name="l01866"></a>01866       }
<a name="l01867"></a>01867 
<a name="l01868"></a>01868     <a class="code" href="bgp__debug_8c.html#a9f3092319ccb5c7d6f684dd7fda40c74">bgp_notify_print</a>(peer, &amp;bgp_notify, <span class="stringliteral">&quot;received&quot;</span>);
<a name="l01869"></a>01869     <span class="keywordflow">if</span> (bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>)
<a name="l01870"></a>01870       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, bgp_notify.<a class="code" href="structbgp__notify.html#aae5f1fab36e60b67e64aeea7146d2364">data</a>);
<a name="l01871"></a>01871   }
<a name="l01872"></a>01872 
<a name="l01873"></a>01873   <span class="comment">/* peer count update */</span>
<a name="l01874"></a>01874   peer-&gt;<a class="code" href="structpeer.html#ac87703f5a1621676779a0603453ff203">notify_in</a>++;
<a name="l01875"></a>01875 
<a name="l01876"></a>01876   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l01877"></a>01877     peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a4a7fae7dbb89c37cd471118e667f32f6">PEER_DOWN_NOTIFY_RECEIVED</a>;
<a name="l01878"></a>01878 
<a name="l01879"></a>01879   <span class="comment">/* We have to check for Notify with Unsupported Optional Parameter.</span>
<a name="l01880"></a>01880 <span class="comment">     in that case we fallback to open without the capability option.</span>
<a name="l01881"></a>01881 <span class="comment">     But this done in bgp_stop. We just mark it here to avoid changing</span>
<a name="l01882"></a>01882 <span class="comment">     the fsm tables.  */</span>
<a name="l01883"></a>01883   <span class="keywordflow">if</span> (bgp_notify.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a> == <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a> &amp;&amp;
<a name="l01884"></a>01884       bgp_notify.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a> == <a class="code" href="bgpd_8h.html#a2fddbc10056aaf1a667e79c2bdbeff15">BGP_NOTIFY_OPEN_UNSUP_PARAM</a> )
<a name="l01885"></a>01885     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a9a660ebeb4fec952cc45f6945a6f1722">PEER_STATUS_CAPABILITY_OPEN</a>);
<a name="l01886"></a>01886 
<a name="l01887"></a>01887   <span class="comment">/* Also apply to Unsupported Capability until remote router support</span>
<a name="l01888"></a>01888 <span class="comment">     capability. */</span>
<a name="l01889"></a>01889   <span class="keywordflow">if</span> (bgp_notify.<a class="code" href="structbgp__notify.html#ad627202af54280e7417636695f2e38b5">code</a> == <a class="code" href="bgpd_8h.html#abf82315c6bbb82ef5704c94a34cd038f">BGP_NOTIFY_OPEN_ERR</a> &amp;&amp;
<a name="l01890"></a>01890       bgp_notify.<a class="code" href="structbgp__notify.html#acbad94da20e4f492c1115dfc9181f463">subcode</a> == <a class="code" href="bgpd_8h.html#a3e65ad10d09af118ec4d892547aa3f7c">BGP_NOTIFY_OPEN_UNSUP_CAPBL</a>)
<a name="l01891"></a>01891     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a9a660ebeb4fec952cc45f6945a6f1722">PEER_STATUS_CAPABILITY_OPEN</a>);
<a name="l01892"></a>01892 
<a name="l01893"></a>01893   <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a4c82d87743108d19ecb5c21294ab1b91">Receive_NOTIFICATION_message</a>);
<a name="l01894"></a>01894 }
<a name="l01895"></a>01895 
<a name="l01896"></a>01896 <span class="comment">/* Keepalive treatment function -- get keepalive send keepalive */</span>
<a name="l01897"></a>01897 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01898"></a><a class="code" href="bgp__packet_8c.html#a7541e468418602cf15e6e5244f880ca5">01898</a> <a class="code" href="bgp__packet_8c.html#a7541e468418602cf15e6e5244f880ca5">bgp_keepalive_receive</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)
<a name="l01899"></a>01899 {
<a name="l01900"></a>01900   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (keepalive, KEEPALIVE))  
<a name="l01901"></a>01901     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s KEEPALIVE rcvd&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>); 
<a name="l01902"></a>01902   
<a name="l01903"></a>01903   <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#a1959236cb786947c607c5428d257a994">Receive_KEEPALIVE_message</a>);
<a name="l01904"></a>01904 }
<a name="l01905"></a>01905 
<a name="l01906"></a>01906 <span class="comment">/* Route refresh message is received. */</span>
<a name="l01907"></a>01907 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l01908"></a><a class="code" href="bgp__packet_8c.html#a74d7b10930867d6ff40854fba54736a3">01908</a> <a class="code" href="bgp__packet_8c.html#a74d7b10930867d6ff40854fba54736a3">bgp_route_refresh_receive</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)
<a name="l01909"></a>01909 {
<a name="l01910"></a>01910   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l01911"></a>01911   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l01912"></a>01912   u_char reserved;
<a name="l01913"></a>01913   <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l01914"></a>01914 
<a name="l01915"></a>01915   <span class="comment">/* If peer does not have the capability, send notification. */</span>
<a name="l01916"></a>01916   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a2794496f1536e05dd62d79c6cecb4cfe">PEER_CAP_REFRESH_ADV</a>))
<a name="l01917"></a>01917     {
<a name="l01918"></a>01918       <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Error] BGP route refresh is not enabled&quot;</span>,
<a name="l01919"></a>01919         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01920"></a>01920       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
<a name="l01921"></a>01921                <a class="code" href="bgpd_8h.html#a8a435e0e2033f183fcd82cfe4ed59443">BGP_NOTIFY_HEADER_ERR</a>,
<a name="l01922"></a>01922                <a class="code" href="bgpd_8h.html#a61d92861d20bda6984fa61f01a59fb16">BGP_NOTIFY_HEADER_BAD_MESTYPE</a>);
<a name="l01923"></a>01923       <span class="keywordflow">return</span>;
<a name="l01924"></a>01924     }
<a name="l01925"></a>01925 
<a name="l01926"></a>01926   <span class="comment">/* Status must be Established. */</span>
<a name="l01927"></a>01927   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>) 
<a name="l01928"></a>01928     {
<a name="l01929"></a>01929       <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
<a name="l01930"></a>01930         <span class="stringliteral">&quot;%s [Error] Route refresh packet received under status %s&quot;</span>,
<a name="l01931"></a>01931         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));
<a name="l01932"></a>01932       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#af56552e5c55a4c8733dfee55beddb2f8">BGP_NOTIFY_FSM_ERR</a>, 0);
<a name="l01933"></a>01933       <span class="keywordflow">return</span>;
<a name="l01934"></a>01934     }
<a name="l01935"></a>01935 
<a name="l01936"></a>01936   s = peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>;
<a name="l01937"></a>01937   
<a name="l01938"></a>01938   <span class="comment">/* Parse packet. */</span>
<a name="l01939"></a>01939   afi = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l01940"></a>01940   reserved = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l01941"></a>01941   safi = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l01942"></a>01942 
<a name="l01943"></a>01943   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01944"></a>01944     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd REFRESH_REQ for afi/safi: %d/%d&quot;</span>,
<a name="l01945"></a>01945            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
<a name="l01946"></a>01946 
<a name="l01947"></a>01947   <span class="comment">/* Check AFI and SAFI. */</span>
<a name="l01948"></a>01948   <span class="keywordflow">if</span> ((afi != <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> &amp;&amp; afi != <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l01949"></a>01949       || (safi != <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a> &amp;&amp; safi != <a class="code" href="zebra_8h.html#aea5323bab4aaf8f8737af8a8ea19c661">SAFI_MULTICAST</a>
<a name="l01950"></a>01950       &amp;&amp; safi != <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>))
<a name="l01951"></a>01951     {
<a name="l01952"></a>01952       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l01953"></a>01953     {
<a name="l01954"></a>01954       <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s REFRESH_REQ for unrecognized afi/safi: %d/%d - ignored&quot;</span>,
<a name="l01955"></a>01955              peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
<a name="l01956"></a>01956     }
<a name="l01957"></a>01957       <span class="keywordflow">return</span>;
<a name="l01958"></a>01958     }
<a name="l01959"></a>01959 
<a name="l01960"></a>01960   <span class="comment">/* Adjust safi code. */</span>
<a name="l01961"></a>01961   <span class="keywordflow">if</span> (safi == <a class="code" href="bgpd_8h.html#a597e9437c3d1c7d5551d8232a70e89ae">BGP_SAFI_VPNV4</a>)
<a name="l01962"></a>01962     safi = <a class="code" href="zebra_8h.html#aea6a248ae05b01f7ff8faf6d8c8c6c10">SAFI_MPLS_VPN</a>;
<a name="l01963"></a>01963 
<a name="l01964"></a>01964   <span class="keywordflow">if</span> (size != <a class="code" href="bgpd_8h.html#abbeda9e0f7ccb8484e9a3de2b83586bf">BGP_MSG_ROUTE_REFRESH_MIN_SIZE</a> - <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>)
<a name="l01965"></a>01965     {
<a name="l01966"></a>01966       u_char *end;
<a name="l01967"></a>01967       u_char when_to_refresh;
<a name="l01968"></a>01968       u_char orf_type;
<a name="l01969"></a>01969       u_int16_t orf_len;
<a name="l01970"></a>01970 
<a name="l01971"></a>01971       <span class="keywordflow">if</span> (size - (<a class="code" href="bgpd_8h.html#abbeda9e0f7ccb8484e9a3de2b83586bf">BGP_MSG_ROUTE_REFRESH_MIN_SIZE</a> - <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>) &lt; 5)
<a name="l01972"></a>01972         {
<a name="l01973"></a>01973           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s ORF route refresh length error&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l01974"></a>01974           <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
<a name="l01975"></a>01975           <span class="keywordflow">return</span>;
<a name="l01976"></a>01976         }
<a name="l01977"></a>01977 
<a name="l01978"></a>01978       when_to_refresh = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
<a name="l01979"></a>01979       end = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + (size - 5);
<a name="l01980"></a>01980 
<a name="l01981"></a>01981       <span class="keywordflow">while</span> ((<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + 2) &lt; end)
<a name="l01982"></a>01982     {
<a name="l01983"></a>01983       orf_type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s); 
<a name="l01984"></a>01984       orf_len = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (s);
<a name="l01985"></a>01985       
<a name="l01986"></a>01986       <span class="comment">/* orf_len in bounds? */</span>
<a name="l01987"></a>01987       <span class="keywordflow">if</span> ((<a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + orf_len) &gt; end)
<a name="l01988"></a>01988         <span class="keywordflow">break</span>; <span class="comment">/* XXX: Notify instead?? */</span>
<a name="l01989"></a>01989       <span class="keywordflow">if</span> (orf_type == <a class="code" href="bgp__open_8h.html#adc5dbdce1a3677ba56d250c98f0d56ff">ORF_TYPE_PREFIX</a>
<a name="l01990"></a>01990           || orf_type == <a class="code" href="bgp__open_8h.html#a08c45b6907c24b44c5db40587b4abb15">ORF_TYPE_PREFIX_OLD</a>)
<a name="l01991"></a>01991         {
<a name="l01992"></a>01992           u_char *p_pnt = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s);
<a name="l01993"></a>01993           u_char *p_end = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (s) + orf_len;
<a name="l01994"></a>01994           <span class="keyword">struct </span><a class="code" href="structorf__prefix.html">orf_prefix</a> orfp;
<a name="l01995"></a>01995           u_char common = 0;
<a name="l01996"></a>01996           u_int32_t <a class="code" href="structorf__prefix.html#a452fdaa3c1a2c63842fc6dc55c231f08">seq</a>;
<a name="l01997"></a>01997           <span class="keywordtype">int</span> psize;
<a name="l01998"></a>01998           <span class="keywordtype">char</span> <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>[BUFSIZ];
<a name="l01999"></a>01999           <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l02000"></a>02000           <span class="keywordtype">int</span> ret;
<a name="l02001"></a>02001 
<a name="l02002"></a>02002           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02003"></a>02003         {
<a name="l02004"></a>02004           <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd Prefixlist ORF(%d) length %d&quot;</span>,
<a name="l02005"></a>02005                  peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, orf_type, orf_len);
<a name="l02006"></a>02006         }
<a name="l02007"></a>02007 
<a name="l02008"></a>02008               <span class="comment">/* we&#39;re going to read at least 1 byte of common ORF header,</span>
<a name="l02009"></a>02009 <span class="comment">               * and 7 bytes of ORF Address-filter entry from the stream</span>
<a name="l02010"></a>02010 <span class="comment">               */</span>
<a name="l02011"></a>02011               <span class="keywordflow">if</span> (orf_len &lt; 7)
<a name="l02012"></a>02012                 <span class="keywordflow">break</span>; 
<a name="l02013"></a>02013                 
<a name="l02014"></a>02014           <span class="comment">/* ORF prefix-list name */</span>
<a name="l02015"></a>02015           sprintf (name, <span class="stringliteral">&quot;%s.%d.%d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
<a name="l02016"></a>02016 
<a name="l02017"></a>02017           <span class="keywordflow">while</span> (p_pnt &lt; p_end)
<a name="l02018"></a>02018         {
<a name="l02019"></a>02019                   <span class="comment">/* If the ORF entry is malformed, want to read as much of it</span>
<a name="l02020"></a>02020 <span class="comment">                   * as possible without going beyond the bounds of the entry,</span>
<a name="l02021"></a>02021 <span class="comment">                   * to maximise debug information.</span>
<a name="l02022"></a>02022 <span class="comment">                   */</span>
<a name="l02023"></a>02023           <span class="keywordtype">int</span> ok ;
<a name="l02024"></a>02024           memset (&amp;orfp, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structorf__prefix.html">orf_prefix</a>));
<a name="l02025"></a>02025           common = *p_pnt++;
<a name="l02026"></a>02026           <span class="comment">/* after ++: p_pnt &lt;= p_end */</span>
<a name="l02027"></a>02027           <span class="keywordflow">if</span> (common &amp; <a class="code" href="bgp__packet_8h.html#aaa55ed31dd48f7faf00c0f0b83740c05">ORF_COMMON_PART_REMOVE_ALL</a>)
<a name="l02028"></a>02028             {
<a name="l02029"></a>02029               <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02030"></a>02030             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd Remove-All pfxlist ORF request&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l02031"></a>02031               <a class="code" href="plist_8c.html#ab45c235a305a061e5ac9fceecfc90a55">prefix_bgp_orf_remove_all</a> (name);
<a name="l02032"></a>02032               <span class="keywordflow">break</span>;
<a name="l02033"></a>02033             }
<a name="l02034"></a>02034           ok = ((p_end - p_pnt) &gt;= <span class="keyword">sizeof</span>(u_int32_t)) ;
<a name="l02035"></a>02035           <span class="keywordflow">if</span> (ok)
<a name="l02036"></a>02036             {
<a name="l02037"></a>02037           <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;seq, p_pnt, <span class="keyword">sizeof</span> (u_int32_t));
<a name="l02038"></a>02038           p_pnt += <span class="keyword">sizeof</span> (u_int32_t);
<a name="l02039"></a>02039           orfp.<a class="code" href="structorf__prefix.html#a452fdaa3c1a2c63842fc6dc55c231f08">seq</a> = ntohl (seq);
<a name="l02040"></a>02040             }
<a name="l02041"></a>02041           <span class="keywordflow">else</span>
<a name="l02042"></a>02042             p_pnt = p_end ;
<a name="l02043"></a>02043 
<a name="l02044"></a>02044           <span class="keywordflow">if</span> ((ok = (p_pnt &lt; p_end)))
<a name="l02045"></a>02045             orfp.<a class="code" href="structorf__prefix.html#a2e1e710c6b4d1dbdef92b0ceaf1581ef">ge</a> = *p_pnt++ ;      <span class="comment">/* value checked in prefix_bgp_orf_set() */</span>
<a name="l02046"></a>02046           <span class="keywordflow">if</span> ((ok = (p_pnt &lt; p_end)))
<a name="l02047"></a>02047             orfp.<a class="code" href="structorf__prefix.html#a497407b453789947ab26bbce751c1947">le</a> = *p_pnt++ ;      <span class="comment">/* value checked in prefix_bgp_orf_set() */</span>
<a name="l02048"></a>02048           <span class="keywordflow">if</span> ((ok = (p_pnt &lt; p_end)))
<a name="l02049"></a>02049             orfp.<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> = *p_pnt++ ;
<a name="l02050"></a>02050           orfp.<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> = <a class="code" href="prefix_8c.html#a6d5ede437568763fc6ef7d9cc772b501">afi2family</a> (afi);   <span class="comment">/* afi checked already  */</span>
<a name="l02051"></a>02051 
<a name="l02052"></a>02052           psize = <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (orfp.<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);   <span class="comment">/* 0 if not ok          */</span>
<a name="l02053"></a>02053           <span class="keywordflow">if</span> (psize &gt; <a class="code" href="prefix_8c.html#ad076653f7c139acd0fdedb511542e915">prefix_blen</a>(&amp;orfp.<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>))   <span class="comment">/* valid for family ?   */</span>
<a name="l02054"></a>02054             {
<a name="l02055"></a>02055               ok = 0 ;
<a name="l02056"></a>02056               psize = <a class="code" href="prefix_8c.html#ad076653f7c139acd0fdedb511542e915">prefix_blen</a>(&amp;orfp.<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>) ;
<a name="l02057"></a>02057             }
<a name="l02058"></a>02058           <span class="keywordflow">if</span> (psize &gt; (p_end - p_pnt))        <span class="comment">/* valid for packet ?   */</span>
<a name="l02059"></a>02059             {
<a name="l02060"></a>02060               ok = 0 ;
<a name="l02061"></a>02061               psize = p_end - p_pnt ;
<a name="l02062"></a>02062             }
<a name="l02063"></a>02063 
<a name="l02064"></a>02064           <span class="keywordflow">if</span> (psize &gt; 0)
<a name="l02065"></a>02065             <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;orfp.<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, p_pnt, psize);
<a name="l02066"></a>02066           p_pnt += psize;
<a name="l02067"></a>02067 
<a name="l02068"></a>02068           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02069"></a>02069             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd %s %s seq %u %s/%d ge %d le %d%s&quot;</span>,
<a name="l02070"></a>02070                    peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02071"></a>02071                    (common &amp; <a class="code" href="bgp__packet_8h.html#a15d6c72a4ef5d887b537e19d100f516b">ORF_COMMON_PART_REMOVE</a> ? <span class="stringliteral">&quot;Remove&quot;</span> : <span class="stringliteral">&quot;Add&quot;</span>), 
<a name="l02072"></a>02072                    (common &amp; <a class="code" href="bgp__packet_8h.html#ad4dae47ed99f26afef0dbdbee312094e">ORF_COMMON_PART_DENY</a> ? <span class="stringliteral">&quot;deny&quot;</span> : <span class="stringliteral">&quot;permit&quot;</span>),
<a name="l02073"></a>02073                    orfp.<a class="code" href="structorf__prefix.html#a452fdaa3c1a2c63842fc6dc55c231f08">seq</a>, 
<a name="l02074"></a>02074                    <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (orfp.<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;orfp.<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>.u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, BUFSIZ),
<a name="l02075"></a>02075                    orfp.<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>, orfp.<a class="code" href="structorf__prefix.html#a2e1e710c6b4d1dbdef92b0ceaf1581ef">ge</a>, orfp.<a class="code" href="structorf__prefix.html#a497407b453789947ab26bbce751c1947">le</a>,
<a name="l02076"></a>02076                    ok ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot; MALFORMED&quot;</span>);
<a name="l02077"></a>02077 
<a name="l02078"></a>02078           <span class="keywordflow">if</span> (ok)
<a name="l02079"></a>02079           ret = <a class="code" href="plist_8c.html#a5e6f89d9e5bf6353d71df9ea21d732d0">prefix_bgp_orf_set</a> (name, afi, &amp;orfp,
<a name="l02080"></a>02080                  (common &amp; ORF_COMMON_PART_DENY ? 0 : 1 ),
<a name="l02081"></a>02081                  (common &amp; ORF_COMMON_PART_REMOVE ? 0 : 1));
<a name="l02082"></a>02082 
<a name="l02083"></a>02083           <span class="keywordflow">if</span> (!ok || (ret != <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>))
<a name="l02084"></a>02084             {
<a name="l02085"></a>02085               <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02086"></a>02086             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Received misformatted prefixlist ORF. Remove All pfxlist&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l02087"></a>02087               <a class="code" href="plist_8c.html#ab45c235a305a061e5ac9fceecfc90a55">prefix_bgp_orf_remove_all</a> (name);
<a name="l02088"></a>02088               <span class="keywordflow">break</span>;
<a name="l02089"></a>02089             }
<a name="l02090"></a>02090         }
<a name="l02091"></a>02091           peer-&gt;<a class="code" href="structpeer.html#a2473c352a18c1a1169cd01754dbfc993">orf_plist</a>[afi][safi] =
<a name="l02092"></a>02092              <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="plist_8h.html#aa217ec31c92f3842209d9991a42a675c">AFI_ORF_PREFIX</a>, name);
<a name="l02093"></a>02093         }
<a name="l02094"></a>02094       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (s, orf_len);
<a name="l02095"></a>02095     }
<a name="l02096"></a>02096       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02097"></a>02097     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcvd Refresh %s ORF request&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02098"></a>02098            when_to_refresh == <a class="code" href="bgp__packet_8h.html#a4dc1e6799b406a23e99cfaf8e680df70">REFRESH_DEFER</a> ? <span class="stringliteral">&quot;Defer&quot;</span> : <span class="stringliteral">&quot;Immediate&quot;</span>);
<a name="l02099"></a>02099       <span class="keywordflow">if</span> (when_to_refresh == <a class="code" href="bgp__packet_8h.html#a4dc1e6799b406a23e99cfaf8e680df70">REFRESH_DEFER</a>)
<a name="l02100"></a>02100     <span class="keywordflow">return</span>;
<a name="l02101"></a>02101     }
<a name="l02102"></a>02102 
<a name="l02103"></a>02103   <span class="comment">/* First update is deferred until ORF or ROUTE-REFRESH is received */</span>
<a name="l02104"></a>02104   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#af38b3d01fa7faa6698e76d7932ff717f">PEER_STATUS_ORF_WAIT_REFRESH</a>))
<a name="l02105"></a>02105     <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#ab49d7e30a6869bf9f0753afe25b17c6a">af_sflags</a>[afi][safi], <a class="code" href="bgpd_8h.html#af38b3d01fa7faa6698e76d7932ff717f">PEER_STATUS_ORF_WAIT_REFRESH</a>);
<a name="l02106"></a>02106 
<a name="l02107"></a>02107   <span class="comment">/* Perform route refreshment to the peer */</span>
<a name="l02108"></a>02108   <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);
<a name="l02109"></a>02109 }
<a name="l02110"></a>02110 
<a name="l02111"></a>02111 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02112"></a><a class="code" href="bgp__packet_8c.html#a82eb04635adbeab2d9def6dacd24f3b5">02112</a> <a class="code" href="bgp__packet_8c.html#a82eb04635adbeab2d9def6dacd24f3b5">bgp_capability_msg_parse</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, u_char *pnt, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)
<a name="l02113"></a>02113 {
<a name="l02114"></a>02114   u_char *end;
<a name="l02115"></a>02115   <span class="keyword">struct </span><a class="code" href="structcapability__mp__data.html">capability_mp_data</a> mpc;
<a name="l02116"></a>02116   <span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> *hdr;
<a name="l02117"></a>02117   u_char action;
<a name="l02118"></a>02118   <span class="keyword">struct </span><a class="code" href="structbgp.html">bgp</a> *<a class="code" href="bgp__capability__test_8c.html#a528a1146825f30f8df2ae2e9d61dd7be">bgp</a>;
<a name="l02119"></a>02119   <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
<a name="l02120"></a>02120   <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
<a name="l02121"></a>02121 
<a name="l02122"></a>02122   bgp = peer-&gt;<a class="code" href="structpeer.html#aaff7e2f66146a076913d2fe3217edf2c">bgp</a>;
<a name="l02123"></a>02123   end = pnt + <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>;
<a name="l02124"></a>02124 
<a name="l02125"></a>02125   <span class="keywordflow">while</span> (pnt &lt; end)
<a name="l02126"></a>02126     {      
<a name="l02127"></a>02127       <span class="comment">/* We need at least action, capability code and capability length. */</span>
<a name="l02128"></a>02128       <span class="keywordflow">if</span> (pnt + 3 &gt; end)
<a name="l02129"></a>02129         {
<a name="l02130"></a>02130           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Capability length error&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l02131"></a>02131           <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
<a name="l02132"></a>02132           <span class="keywordflow">return</span> -1;
<a name="l02133"></a>02133         }
<a name="l02134"></a>02134       action = *pnt;
<a name="l02135"></a>02135       hdr = (<span class="keyword">struct </span><a class="code" href="structcapability__header.html">capability_header</a> *)(pnt + 1);
<a name="l02136"></a>02136       
<a name="l02137"></a>02137       <span class="comment">/* Action value check.  */</span>
<a name="l02138"></a>02138       <span class="keywordflow">if</span> (action != <a class="code" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a>
<a name="l02139"></a>02139       &amp;&amp; action != <a class="code" href="bgp__open_8h.html#af5dd57265f518ffafc0fdb1957a7b706">CAPABILITY_ACTION_UNSET</a>)
<a name="l02140"></a>02140         {
<a name="l02141"></a>02141           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Capability Action Value error %d&quot;</span>,
<a name="l02142"></a>02142              peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, action);
<a name="l02143"></a>02143           <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
<a name="l02144"></a>02144           <span class="keywordflow">return</span> -1;
<a name="l02145"></a>02145         }
<a name="l02146"></a>02146 
<a name="l02147"></a>02147       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02148"></a>02148     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s CAPABILITY has action: %d, code: %u, length %u&quot;</span>,
<a name="l02149"></a>02149            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, action, hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>, hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a>);
<a name="l02150"></a>02150 
<a name="l02151"></a>02151       <span class="comment">/* Capability length check. */</span>
<a name="l02152"></a>02152       <span class="keywordflow">if</span> ((pnt + hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 3) &gt; end)
<a name="l02153"></a>02153         {
<a name="l02154"></a>02154           <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;%s Capability length error&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l02155"></a>02155           <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#a3c020cba1f9b12568599a3eb7c979b09">BGP_NOTIFY_CEASE</a>, 0);
<a name="l02156"></a>02156           <span class="keywordflow">return</span> -1;
<a name="l02157"></a>02157         }
<a name="l02158"></a>02158 
<a name="l02159"></a>02159       <span class="comment">/* Fetch structure to the byte stream. */</span>
<a name="l02160"></a>02160       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;mpc, pnt + 3, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structcapability__mp__data.html">capability_mp_data</a>));
<a name="l02161"></a>02161 
<a name="l02162"></a>02162       <span class="comment">/* We know MP Capability Code. */</span>
<a name="l02163"></a>02163       <span class="keywordflow">if</span> (hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a> == <a class="code" href="bgp__open_8h.html#af424a8035e635455eb7ca17c86506601">CAPABILITY_CODE_MP</a>)
<a name="l02164"></a>02164         {
<a name="l02165"></a>02165       afi = ntohs (mpc.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>);
<a name="l02166"></a>02166       safi = mpc.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>;
<a name="l02167"></a>02167 
<a name="l02168"></a>02168           <span class="comment">/* Ignore capability when override-capability is set. */</span>
<a name="l02169"></a>02169           <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a3f18e3da00909bb1ce53919fd7129b54">flags</a>, <a class="code" href="bgpd_8h.html#a5c73c48efc952f7c76e6ae75b905da54">PEER_FLAG_OVERRIDE_CAPABILITY</a>))
<a name="l02170"></a>02170         <span class="keywordflow">continue</span>;
<a name="l02171"></a>02171           
<a name="l02172"></a>02172           <span class="keywordflow">if</span> (!<a class="code" href="bgp__open_8c.html#aa9bd7a6fd45645368bfa07d3a9b4ea7b">bgp_afi_safi_valid_indices</a> (afi, &amp;safi))
<a name="l02173"></a>02173             {
<a name="l02174"></a>02174               <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02175"></a>02175                 <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s Dynamic Capability MP_EXT afi/safi invalid &quot;</span>
<a name="l02176"></a>02176                             <span class="stringliteral">&quot;(%u/%u)&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, afi, safi);
<a name="l02177"></a>02177               <span class="keywordflow">continue</span>;
<a name="l02178"></a>02178             }
<a name="l02179"></a>02179           
<a name="l02180"></a>02180       <span class="comment">/* Address family check.  */</span>
<a name="l02181"></a>02181           <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02182"></a>02182             <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s CAPABILITY has %s MP_EXT CAP for afi/safi: %u/%u&quot;</span>,
<a name="l02183"></a>02183                        peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>,
<a name="l02184"></a>02184                        action == <a class="code" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a> 
<a name="l02185"></a>02185                        ? <span class="stringliteral">&quot;Advertising&quot;</span> : <span class="stringliteral">&quot;Removing&quot;</span>,
<a name="l02186"></a>02186                        ntohs(mpc.<a class="code" href="structcapability__mp__data.html#adc30c1220664dd7969ebb7c1eaf725c0">afi</a>) , mpc.<a class="code" href="structcapability__mp__data.html#ae5b8c05145cfb96cea189f949cb3b42b">safi</a>);
<a name="l02187"></a>02187               
<a name="l02188"></a>02188           <span class="keywordflow">if</span> (action == <a class="code" href="bgp__open_8h.html#abd786897d5906606e48d7815943c8c54">CAPABILITY_ACTION_SET</a>)
<a name="l02189"></a>02189             {
<a name="l02190"></a>02190               peer-&gt;<a class="code" href="structpeer.html#a69bf8dd8a30764344085b68b398dd619">afc_recv</a>[afi][safi] = 1;
<a name="l02191"></a>02191               <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6a5fa9dc65cf8fa50e280638b8a0a491">afc</a>[afi][safi])
<a name="l02192"></a>02192                 {
<a name="l02193"></a>02193                   peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] = 1;
<a name="l02194"></a>02194                   <a class="code" href="bgp__route_8c.html#a034115d44bc2a9935df0a481d462aaf7">bgp_announce_route</a> (peer, afi, safi);
<a name="l02195"></a>02195                 }
<a name="l02196"></a>02196             }
<a name="l02197"></a>02197           <span class="keywordflow">else</span>
<a name="l02198"></a>02198             {
<a name="l02199"></a>02199               peer-&gt;<a class="code" href="structpeer.html#a69bf8dd8a30764344085b68b398dd619">afc_recv</a>[afi][safi] = 0;
<a name="l02200"></a>02200               peer-&gt;<a class="code" href="structpeer.html#a08da0f40c72c2016e659539e6af6dc2d">afc_nego</a>[afi][safi] = 0;
<a name="l02201"></a>02201 
<a name="l02202"></a>02202               <span class="keywordflow">if</span> (<a class="code" href="bgpd_8c.html#a21e9fbe5ad7e478f84d9e61379bbe9b2">peer_active_nego</a> (peer))
<a name="l02203"></a>02203                 <a class="code" href="bgp__route_8c.html#a6b07bcee214a0802a945370276bb213e">bgp_clear_route</a> (peer, afi, safi, <a class="code" href="bgp__route_8h.html#a6a68ec86881e2e24c1dfdd8a47267e81a362c076b1b729ff5b2c64125e029bb83">BGP_CLEAR_ROUTE_NORMAL</a>);
<a name="l02204"></a>02204               <span class="keywordflow">else</span>
<a name="l02205"></a>02205                 <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#afffcc626edea20680a6ba32cf6436cef">BGP_Stop</a>);
<a name="l02206"></a>02206             }
<a name="l02207"></a>02207         }
<a name="l02208"></a>02208       <span class="keywordflow">else</span>
<a name="l02209"></a>02209         {
<a name="l02210"></a>02210           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;%s unrecognized capability code: %d - ignored&quot;</span>,
<a name="l02211"></a>02211                      peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, hdr-&gt;<a class="code" href="structcapability__header.html#a3b80d785a4c2d8e4cae114348af0b3c7">code</a>);
<a name="l02212"></a>02212         }
<a name="l02213"></a>02213       pnt += hdr-&gt;<a class="code" href="structcapability__header.html#a2cd949b9f03dd756e93bfea3e1f7d6a2">length</a> + 3;
<a name="l02214"></a>02214     }
<a name="l02215"></a>02215   <span class="keywordflow">return</span> 0;
<a name="l02216"></a>02216 }
<a name="l02217"></a>02217 
<a name="l02218"></a>02218 <span class="comment">/* Dynamic Capability is received. </span>
<a name="l02219"></a>02219 <span class="comment"> *</span>
<a name="l02220"></a>02220 <span class="comment"> * This is exported for unit-test purposes</span>
<a name="l02221"></a>02221 <span class="comment"> */</span>
<a name="l02222"></a>02222 <span class="keywordtype">int</span>
<a name="l02223"></a><a class="code" href="bgp__packet_8h.html#a4415e92559b00c48e22ac0fe77bdce10">02223</a> <a class="code" href="bgp__packet_8c.html#ad9b67c079a9d84a3091831acc2a15e2f">bgp_capability_receive</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>, <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size)
<a name="l02224"></a>02224 {
<a name="l02225"></a>02225   u_char *pnt;
<a name="l02226"></a>02226 
<a name="l02227"></a>02227   <span class="comment">/* Fetch pointer. */</span>
<a name="l02228"></a>02228   pnt = <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l02229"></a>02229 
<a name="l02230"></a>02230   <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02231"></a>02231     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcv CAPABILITY&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l02232"></a>02232 
<a name="l02233"></a>02233   <span class="comment">/* If peer does not have the capability, send notification. */</span>
<a name="l02234"></a>02234   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a64eadd546a8c50dfe6a6dcb635c3822d">cap</a>, <a class="code" href="bgpd_8h.html#a3836f3a28c34e009bf7c06d7ea751686">PEER_CAP_DYNAMIC_ADV</a>))
<a name="l02235"></a>02235     {
<a name="l02236"></a>02236       <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Error] BGP dynamic capability is not enabled&quot;</span>,
<a name="l02237"></a>02237         peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l02238"></a>02238       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
<a name="l02239"></a>02239                <a class="code" href="bgpd_8h.html#a8a435e0e2033f183fcd82cfe4ed59443">BGP_NOTIFY_HEADER_ERR</a>,
<a name="l02240"></a>02240                <a class="code" href="bgpd_8h.html#a61d92861d20bda6984fa61f01a59fb16">BGP_NOTIFY_HEADER_BAD_MESTYPE</a>);
<a name="l02241"></a>02241       <span class="keywordflow">return</span> -1;
<a name="l02242"></a>02242     }
<a name="l02243"></a>02243 
<a name="l02244"></a>02244   <span class="comment">/* Status must be Established. */</span>
<a name="l02245"></a>02245   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> != <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>)
<a name="l02246"></a>02246     {
<a name="l02247"></a>02247       <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
<a name="l02248"></a>02248         <span class="stringliteral">&quot;%s [Error] Dynamic capability packet received under status %s&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8h.html#a3a4b1cad85aa6752f39580944e24a868">LOOKUP</a> (<a class="code" href="bgp__debug_8c.html#adfa19d3216f6254be62df3c23e338ad9">bgp_status_msg</a>, peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a>));
<a name="l02249"></a>02249       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer, <a class="code" href="bgpd_8h.html#af56552e5c55a4c8733dfee55beddb2f8">BGP_NOTIFY_FSM_ERR</a>, 0);
<a name="l02250"></a>02250       <span class="keywordflow">return</span> -1;
<a name="l02251"></a>02251     }
<a name="l02252"></a>02252 
<a name="l02253"></a>02253   <span class="comment">/* Parse packet. */</span>
<a name="l02254"></a>02254   <span class="keywordflow">return</span> <a class="code" href="bgp__packet_8c.html#a82eb04635adbeab2d9def6dacd24f3b5">bgp_capability_msg_parse</a> (peer, pnt, size);
<a name="l02255"></a>02255 }
<a name="l02256"></a>02256 
<a name="l02257"></a>02257 <span class="comment">/* BGP read utility function. */</span>
<a name="l02258"></a>02258 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02259"></a><a class="code" href="bgp__packet_8c.html#a88e8d1d76630adbf1345f4f64560e377">02259</a> <a class="code" href="bgp__packet_8c.html#a88e8d1d76630adbf1345f4f64560e377">bgp_read_packet</a> (<span class="keyword">struct</span> <a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>)
<a name="l02260"></a>02260 {
<a name="l02261"></a>02261   <span class="keywordtype">int</span> nbytes;
<a name="l02262"></a>02262   <span class="keywordtype">int</span> readsize;
<a name="l02263"></a>02263 
<a name="l02264"></a>02264   readsize = peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> - <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l02265"></a>02265 
<a name="l02266"></a>02266   <span class="comment">/* If size is zero then return. */</span>
<a name="l02267"></a>02267   <span class="keywordflow">if</span> (! readsize)
<a name="l02268"></a>02268     <span class="keywordflow">return</span> 0;
<a name="l02269"></a>02269 
<a name="l02270"></a>02270   <span class="comment">/* Read packet from fd. */</span>
<a name="l02271"></a>02271   nbytes = <a class="code" href="stream_8c.html#a35a37560b1d2d7a4ad50aa1538657902">stream_read_unblock</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>, readsize);
<a name="l02272"></a>02272 
<a name="l02273"></a>02273   <span class="comment">/* If read byte is smaller than zero then error occured. */</span>
<a name="l02274"></a>02274   <span class="keywordflow">if</span> (nbytes &lt; 0) 
<a name="l02275"></a>02275     {
<a name="l02276"></a>02276       <span class="keywordflow">if</span> (errno == EAGAIN)
<a name="l02277"></a>02277     <span class="keywordflow">return</span> -1;
<a name="l02278"></a>02278 
<a name="l02279"></a>02279       <a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Error] bgp_read_packet error: %s&quot;</span>,
<a name="l02280"></a>02280          peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
<a name="l02281"></a>02281 
<a name="l02282"></a>02282       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>) 
<a name="l02283"></a>02283     {
<a name="l02284"></a>02284       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4ff62dffb922440e74de66efee6f8f42">PEER_STATUS_NSF_MODE</a>))
<a name="l02285"></a>02285         {
<a name="l02286"></a>02286           peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6d8edd574001f795d4969c0f389364c0">PEER_DOWN_NSF_CLOSE_SESSION</a>;
<a name="l02287"></a>02287           <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>);
<a name="l02288"></a>02288         }
<a name="l02289"></a>02289       <span class="keywordflow">else</span>
<a name="l02290"></a>02290         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ab18345a3c7944036ed8ca8fd5dac475e">PEER_DOWN_CLOSE_SESSION</a>;
<a name="l02291"></a>02291     }
<a name="l02292"></a>02292 
<a name="l02293"></a>02293       <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#ab37344e5380c17e5b2c9be898d63ca67">TCP_fatal_error</a>);
<a name="l02294"></a>02294       <span class="keywordflow">return</span> -1;
<a name="l02295"></a>02295     }  
<a name="l02296"></a>02296 
<a name="l02297"></a>02297   <span class="comment">/* When read byte is zero : clear bgp peer and return */</span>
<a name="l02298"></a>02298   <span class="keywordflow">if</span> (nbytes == 0) 
<a name="l02299"></a>02299     {
<a name="l02300"></a>02300       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l02301"></a>02301     <a class="code" href="log_8h.html#a901efa2487b25c3a74846a52de919565">plog_debug</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>, <span class="stringliteral">&quot;%s [Event] BGP connection closed fd %d&quot;</span>,
<a name="l02302"></a>02302            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l02303"></a>02303 
<a name="l02304"></a>02304       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#aa87809ec7dea97b0e970e98ae6c181ea">Established</a>) 
<a name="l02305"></a>02305     {
<a name="l02306"></a>02306       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4ff62dffb922440e74de66efee6f8f42">PEER_STATUS_NSF_MODE</a>))
<a name="l02307"></a>02307         {
<a name="l02308"></a>02308           peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#a6d8edd574001f795d4969c0f389364c0">PEER_DOWN_NSF_CLOSE_SESSION</a>;
<a name="l02309"></a>02309           <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#aa97d7e86e0f1905a85364af66368896f">PEER_STATUS_NSF_WAIT</a>);
<a name="l02310"></a>02310         }
<a name="l02311"></a>02311       <span class="keywordflow">else</span>
<a name="l02312"></a>02312         peer-&gt;<a class="code" href="structpeer.html#a25ebf375ff5c70069097a7420a8061f9">last_reset</a> = <a class="code" href="bgpd_8h.html#ab18345a3c7944036ed8ca8fd5dac475e">PEER_DOWN_CLOSE_SESSION</a>;
<a name="l02313"></a>02313     }
<a name="l02314"></a>02314 
<a name="l02315"></a>02315       <a class="code" href="bgp__fsm_8h.html#a20f7fd10817508149783bf6729dd6727">BGP_EVENT_ADD</a> (peer, <a class="code" href="bgpd_8h.html#aea9f7889a35561c8eab9c607c1a0e56d">TCP_connection_closed</a>);
<a name="l02316"></a>02316       <span class="keywordflow">return</span> -1;
<a name="l02317"></a>02317     }
<a name="l02318"></a>02318 
<a name="l02319"></a>02319   <span class="comment">/* We read partial packet. */</span>
<a name="l02320"></a>02320   <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>) != peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a>)
<a name="l02321"></a>02321     <span class="keywordflow">return</span> -1;
<a name="l02322"></a>02322 
<a name="l02323"></a>02323   <span class="keywordflow">return</span> 0;
<a name="l02324"></a>02324 }
<a name="l02325"></a>02325 
<a name="l02326"></a>02326 <span class="comment">/* Marker check. */</span>
<a name="l02327"></a>02327 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02328"></a><a class="code" href="bgp__packet_8c.html#ae3982eb6a6b11aa51844ea259f63aa49">02328</a> <a class="code" href="bgp__packet_8c.html#ae3982eb6a6b11aa51844ea259f63aa49">bgp_marker_all_one</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)
<a name="l02329"></a>02329 {
<a name="l02330"></a>02330   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l02331"></a>02331 
<a name="l02332"></a>02332   <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>; i++)
<a name="l02333"></a>02333     <span class="keywordflow">if</span> (s-&gt;<a class="code" href="structstream.html#aa204feef08c4dcb72bf774680da7a864">data</a>[i] != 0xff)
<a name="l02334"></a>02334       <span class="keywordflow">return</span> 0;
<a name="l02335"></a>02335 
<a name="l02336"></a>02336   <span class="keywordflow">return</span> 1;
<a name="l02337"></a>02337 }
<a name="l02338"></a>02338 
<a name="l02339"></a>02339 <span class="comment">/* Starting point of packet process function. */</span>
<a name="l02340"></a>02340 <span class="keywordtype">int</span>
<a name="l02341"></a><a class="code" href="bgp__packet_8h.html#adbe52245bb6b37108b50cfc04ac7d5f7">02341</a> <a class="code" href="bgp__packet_8c.html#a3a37390260357b584d8fd7b3591b2058">bgp_read</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>)
<a name="l02342"></a>02342 {
<a name="l02343"></a>02343   <span class="keywordtype">int</span> ret;
<a name="l02344"></a>02344   u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
<a name="l02345"></a>02345   <span class="keyword">struct </span><a class="code" href="structpeer.html">peer</a> *<a class="code" href="structpeer.html">peer</a>;
<a name="l02346"></a>02346   <a class="code" href="bgpd_8h.html#ae2ac1a1db99d420f5a214c418552fd1e">bgp_size_t</a> size;
<a name="l02347"></a>02347   <span class="keywordtype">char</span> notify_data_length[2];
<a name="l02348"></a>02348 
<a name="l02349"></a>02349   <span class="comment">/* Yes first of all get peer pointer. */</span>
<a name="l02350"></a>02350   peer = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (thread);
<a name="l02351"></a>02351   peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02352"></a>02352 
<a name="l02353"></a>02353   <span class="comment">/* For non-blocking IO check. */</span>
<a name="l02354"></a>02354   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ae39d16f69d65fec0f4f1908b4a33e6c6">status</a> == <a class="code" href="bgpd_8h.html#a58672521fe155cead3bd1f0653be62ee">Connect</a>)
<a name="l02355"></a>02355     {
<a name="l02356"></a>02356       <a class="code" href="bgp__packet_8c.html#afa3f4ee76734007f952c560c6e6d3124">bgp_connect_check</a> (peer);
<a name="l02357"></a>02357       <span class="keywordflow">goto</span> done;
<a name="l02358"></a>02358     }
<a name="l02359"></a>02359   <span class="keywordflow">else</span>
<a name="l02360"></a>02360     {
<a name="l02361"></a>02361       <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a> &lt; 0)
<a name="l02362"></a>02362     {
<a name="l02363"></a>02363       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;bgp_read peer&#39;s fd is negative value %d&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l02364"></a>02364       <span class="keywordflow">return</span> -1;
<a name="l02365"></a>02365     }
<a name="l02366"></a>02366       <a class="code" href="bgp__fsm_8h.html#a62b5746c9e6a92bffde54f2dc61557d7">BGP_READ_ON</a> (peer-&gt;<a class="code" href="structpeer.html#a51f641e77c077e7e3355a65bd3e51dac">t_read</a>, <a class="code" href="bgp__packet_8c.html#a3a37390260357b584d8fd7b3591b2058">bgp_read</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
<a name="l02367"></a>02367     }
<a name="l02368"></a>02368 
<a name="l02369"></a>02369   <span class="comment">/* Read packet header to determine type of the packet */</span>
<a name="l02370"></a>02370   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> == 0)
<a name="l02371"></a>02371     peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>;
<a name="l02372"></a>02372 
<a name="l02373"></a>02373   <span class="keywordflow">if</span> (<a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>) &lt; <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>)
<a name="l02374"></a>02374     {
<a name="l02375"></a>02375       ret = <a class="code" href="bgp__packet_8c.html#a88e8d1d76630adbf1345f4f64560e377">bgp_read_packet</a> (peer);
<a name="l02376"></a>02376 
<a name="l02377"></a>02377       <span class="comment">/* Header read error or partial read packet. */</span>
<a name="l02378"></a>02378       <span class="keywordflow">if</span> (ret &lt; 0) 
<a name="l02379"></a>02379     <span class="keywordflow">goto</span> done;
<a name="l02380"></a>02380 
<a name="l02381"></a>02381       <span class="comment">/* Get size and type. */</span>
<a name="l02382"></a>02382       <a class="code" href="stream_8c.html#a1deb508ba8ee96eeea12f1b690373260">stream_forward_getp</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a>);
<a name="l02383"></a>02383       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (notify_data_length, <a class="code" href="stream_8c.html#ad176a69ba2571f53673903a3429da3b6">stream_pnt</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>), 2);
<a name="l02384"></a>02384       size = <a class="code" href="stream_8c.html#a66155fa63acd1f377a5b9e98aba7b888">stream_getw</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l02385"></a>02385       type = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l02386"></a>02386 
<a name="l02387"></a>02387       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL) &amp;&amp; type != 2 &amp;&amp; type != 0)
<a name="l02388"></a>02388     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s rcv message type %d, length (excl. header) %d&quot;</span>,
<a name="l02389"></a>02389            peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type, size - <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>);
<a name="l02390"></a>02390 
<a name="l02391"></a>02391       <span class="comment">/* Marker check */</span>
<a name="l02392"></a>02392       <span class="keywordflow">if</span> (((type == <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a>) || (type == <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a>))
<a name="l02393"></a>02393       &amp;&amp; ! <a class="code" href="bgp__packet_8c.html#ae3982eb6a6b11aa51844ea259f63aa49">bgp_marker_all_one</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a>))
<a name="l02394"></a>02394     {
<a name="l02395"></a>02395       <a class="code" href="bgp__packet_8c.html#ac17989ee6afabce09c9d326fbbf6607b">bgp_notify_send</a> (peer,
<a name="l02396"></a>02396                <a class="code" href="bgpd_8h.html#a8a435e0e2033f183fcd82cfe4ed59443">BGP_NOTIFY_HEADER_ERR</a>, 
<a name="l02397"></a>02397                <a class="code" href="bgpd_8h.html#a25225385b28d64a38e2ae07eceb4bf0d">BGP_NOTIFY_HEADER_NOT_SYNC</a>);
<a name="l02398"></a>02398       <span class="keywordflow">goto</span> done;
<a name="l02399"></a>02399     }
<a name="l02400"></a>02400 
<a name="l02401"></a>02401       <span class="comment">/* BGP type check. */</span>
<a name="l02402"></a>02402       <span class="keywordflow">if</span> (type != <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a> &amp;&amp; type != <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a> 
<a name="l02403"></a>02403       &amp;&amp; type != <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a> &amp;&amp; type != <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a> 
<a name="l02404"></a>02404       &amp;&amp; type != <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a>
<a name="l02405"></a>02405       &amp;&amp; type != <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a>
<a name="l02406"></a>02406       &amp;&amp; type != <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a>)
<a name="l02407"></a>02407     {
<a name="l02408"></a>02408       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02409"></a>02409         <a class="code" href="log_8h.html#a901efa2487b25c3a74846a52de919565">plog_debug</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
<a name="l02410"></a>02410               <span class="stringliteral">&quot;%s unknown message type 0x%02x&quot;</span>,
<a name="l02411"></a>02411               peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, type);
<a name="l02412"></a>02412       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer,
<a name="l02413"></a>02413                      <a class="code" href="bgpd_8h.html#a8a435e0e2033f183fcd82cfe4ed59443">BGP_NOTIFY_HEADER_ERR</a>,
<a name="l02414"></a>02414                      <a class="code" href="bgpd_8h.html#a61d92861d20bda6984fa61f01a59fb16">BGP_NOTIFY_HEADER_BAD_MESTYPE</a>,
<a name="l02415"></a>02415                      &amp;type, 1);
<a name="l02416"></a>02416       <span class="keywordflow">goto</span> done;
<a name="l02417"></a>02417     }
<a name="l02418"></a>02418       <span class="comment">/* Mimimum packet length check. */</span>
<a name="l02419"></a>02419       <span class="keywordflow">if</span> ((size &lt; <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>)
<a name="l02420"></a>02420       || (size &gt; <a class="code" href="bgpd_8h.html#a87f2b928735fc26743eecf3ff55c065f">BGP_MAX_PACKET_SIZE</a>)
<a name="l02421"></a>02421       || (type == <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#a4f6499d62f6a3b2f694149912d9c8988">BGP_MSG_OPEN_MIN_SIZE</a>)
<a name="l02422"></a>02422       || (type == <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#a0ef011551c8692b5c2fc86c9ab8abc11">BGP_MSG_UPDATE_MIN_SIZE</a>)
<a name="l02423"></a>02423       || (type == <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#a8ec4c7e03d72e64bccae551622d5b3b0">BGP_MSG_NOTIFY_MIN_SIZE</a>)
<a name="l02424"></a>02424       || (type == <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a> &amp;&amp; size != <a class="code" href="bgpd_8h.html#a797b79580c983a81b6b752afbf9e6506">BGP_MSG_KEEPALIVE_MIN_SIZE</a>)
<a name="l02425"></a>02425       || (type == <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#abbeda9e0f7ccb8484e9a3de2b83586bf">BGP_MSG_ROUTE_REFRESH_MIN_SIZE</a>)
<a name="l02426"></a>02426       || (type == <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#abbeda9e0f7ccb8484e9a3de2b83586bf">BGP_MSG_ROUTE_REFRESH_MIN_SIZE</a>)
<a name="l02427"></a>02427       || (type == <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a> &amp;&amp; size &lt; <a class="code" href="bgpd_8h.html#a832757f94a322ba227a4f2f386aeb046">BGP_MSG_CAPABILITY_MIN_SIZE</a>))
<a name="l02428"></a>02428     {
<a name="l02429"></a>02429       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (normal, NORMAL))
<a name="l02430"></a>02430         <a class="code" href="log_8h.html#a901efa2487b25c3a74846a52de919565">plog_debug</a> (peer-&gt;<a class="code" href="structpeer.html#a8042cd53718885196f47ee66b471ec3d">log</a>,
<a name="l02431"></a>02431               <span class="stringliteral">&quot;%s bad message length - %d for %s&quot;</span>,
<a name="l02432"></a>02432               peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>, size, 
<a name="l02433"></a>02433               type == 128 ? <span class="stringliteral">&quot;ROUTE-REFRESH&quot;</span> :
<a name="l02434"></a>02434               <a class="code" href="bgp__debug_8c.html#ab3ba22219d24863d590cda1738f6ec1b">bgp_type_str</a>[(<span class="keywordtype">int</span>) type]);
<a name="l02435"></a>02435       <a class="code" href="bgp__packet_8c.html#a451c099a790874d1bca55ccb2c4a4057">bgp_notify_send_with_data</a> (peer,
<a name="l02436"></a>02436                      <a class="code" href="bgpd_8h.html#a8a435e0e2033f183fcd82cfe4ed59443">BGP_NOTIFY_HEADER_ERR</a>,
<a name="l02437"></a>02437                      <a class="code" href="bgpd_8h.html#af913f37e5cd1375f2f3948a2946de262">BGP_NOTIFY_HEADER_BAD_MESLEN</a>,
<a name="l02438"></a>02438                      (u_char *) notify_data_length, 2);
<a name="l02439"></a>02439       <span class="keywordflow">goto</span> done;
<a name="l02440"></a>02440     }
<a name="l02441"></a>02441 
<a name="l02442"></a>02442       <span class="comment">/* Adjust size to message length. */</span>
<a name="l02443"></a>02443       peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = size;
<a name="l02444"></a>02444     }
<a name="l02445"></a>02445 
<a name="l02446"></a>02446   ret = <a class="code" href="bgp__packet_8c.html#a88e8d1d76630adbf1345f4f64560e377">bgp_read_packet</a> (peer);
<a name="l02447"></a>02447   <span class="keywordflow">if</span> (ret &lt; 0) 
<a name="l02448"></a>02448     <span class="keywordflow">goto</span> done;
<a name="l02449"></a>02449 
<a name="l02450"></a>02450   <span class="comment">/* Get size and type again. */</span>
<a name="l02451"></a>02451   size = <a class="code" href="stream_8c.html#ac14f5ef12c68d16e2a654e3922f7c03b">stream_getw_from</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a>);
<a name="l02452"></a>02452   type = <a class="code" href="stream_8c.html#af7a4ed58eb43625677649eb111f52feb">stream_getc_from</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>, <a class="code" href="bgpd_8h.html#a446cef03639f8fbcd85962258810a518">BGP_MARKER_SIZE</a> + 2);
<a name="l02453"></a>02453 
<a name="l02454"></a>02454   <span class="comment">/* BGP packet dump function. */</span>
<a name="l02455"></a>02455   <a class="code" href="bgp__dump_8c.html#aa97689fd779f7eaaaad6d74bb3ffc837">bgp_dump_packet</a> (peer, type, peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l02456"></a>02456   
<a name="l02457"></a>02457   size = (peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> - <a class="code" href="bgpd_8h.html#a68412752c6355f0f46f03966ba07142a">BGP_HEADER_SIZE</a>);
<a name="l02458"></a>02458 
<a name="l02459"></a>02459   <span class="comment">/* Read rest of the packet and call each sort of packet routine */</span>
<a name="l02460"></a>02460   <span class="keywordflow">switch</span> (type) 
<a name="l02461"></a>02461     {
<a name="l02462"></a>02462     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#afe744c7cfcd031af46264e8adc9a985e">BGP_MSG_OPEN</a>:
<a name="l02463"></a>02463       peer-&gt;<a class="code" href="structpeer.html#a76ca0a8b7f67bf4d7abab5609ec90aca">open_in</a>++;
<a name="l02464"></a>02464       <a class="code" href="bgp__packet_8c.html#a97f0b0875f50fbbba10f0938e820075e">bgp_open_receive</a> (peer, size); <span class="comment">/* XXX return value ignored! */</span>
<a name="l02465"></a>02465       <span class="keywordflow">break</span>;
<a name="l02466"></a>02466     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a295372f9038c0a36cb9622d5d7f5ff7e">BGP_MSG_UPDATE</a>:
<a name="l02467"></a>02467       peer-&gt;<a class="code" href="structpeer.html#a9006b32a7b8b2dbd8aa09c2b193efa57">readtime</a> = time(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);    <span class="comment">/* Last read timer reset */</span>
<a name="l02468"></a>02468       <a class="code" href="bgp__packet_8c.html#a43a9bbf186d894f26c76480c541ca436">bgp_update_receive</a> (peer, size);
<a name="l02469"></a>02469       <span class="keywordflow">break</span>;
<a name="l02470"></a>02470     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a0e3044d33a574fd401dd138ca43e0726">BGP_MSG_NOTIFY</a>:
<a name="l02471"></a>02471       <a class="code" href="bgp__packet_8c.html#a695a91d3e1f6a6ec619c0397c27c7e71">bgp_notify_receive</a> (peer, size);
<a name="l02472"></a>02472       <span class="keywordflow">break</span>;
<a name="l02473"></a>02473     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a08fb2d7ea18582e949c71c575ba06b76">BGP_MSG_KEEPALIVE</a>:
<a name="l02474"></a>02474       peer-&gt;<a class="code" href="structpeer.html#a9006b32a7b8b2dbd8aa09c2b193efa57">readtime</a> = time(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);    <span class="comment">/* Last read timer reset */</span>
<a name="l02475"></a>02475       <a class="code" href="bgp__packet_8c.html#a7541e468418602cf15e6e5244f880ca5">bgp_keepalive_receive</a> (peer, size);
<a name="l02476"></a>02476       <span class="keywordflow">break</span>;
<a name="l02477"></a>02477     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#ab658cfa8991a976023a4a50d00e7ada5">BGP_MSG_ROUTE_REFRESH_NEW</a>:
<a name="l02478"></a>02478     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#a6f8a3d1a9c4e630e9ddca1fbca3adfcd">BGP_MSG_ROUTE_REFRESH_OLD</a>:
<a name="l02479"></a>02479       peer-&gt;<a class="code" href="structpeer.html#a2d6e4e26d5cc36e86e0c35e992273035">refresh_in</a>++;
<a name="l02480"></a>02480       <a class="code" href="bgp__packet_8c.html#a74d7b10930867d6ff40854fba54736a3">bgp_route_refresh_receive</a> (peer, size);
<a name="l02481"></a>02481       <span class="keywordflow">break</span>;
<a name="l02482"></a>02482     <span class="keywordflow">case</span> <a class="code" href="bgpd_8h.html#af521d3eb65a5e825d4cfd69e1b558176">BGP_MSG_CAPABILITY</a>:
<a name="l02483"></a>02483       peer-&gt;<a class="code" href="structpeer.html#a0a23af24ef314346a4522804b82290e8">dynamic_cap_in</a>++;
<a name="l02484"></a>02484       <a class="code" href="bgp__packet_8c.html#ad9b67c079a9d84a3091831acc2a15e2f">bgp_capability_receive</a> (peer, size);
<a name="l02485"></a>02485       <span class="keywordflow">break</span>;
<a name="l02486"></a>02486     }
<a name="l02487"></a>02487 
<a name="l02488"></a>02488   <span class="comment">/* Clear input buffer. */</span>
<a name="l02489"></a>02489   peer-&gt;<a class="code" href="structpeer.html#a21bd941bc82fe85b016335eaf9ff8140">packet_size</a> = 0;
<a name="l02490"></a>02490   <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>)
<a name="l02491"></a>02491     <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (peer-&gt;<a class="code" href="structpeer.html#ad56414663c798719e3a10e6c62a37003">ibuf</a>);
<a name="l02492"></a>02492 
<a name="l02493"></a>02493  done:
<a name="l02494"></a>02494   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (peer-&gt;<a class="code" href="structpeer.html#a8dd1d16a0890967ee343e1bc70292e4f">sflags</a>, <a class="code" href="bgpd_8h.html#a4b52af7b570cb9bf7c57f3bd5ea71b73">PEER_STATUS_ACCEPT_PEER</a>))
<a name="l02495"></a>02495     {
<a name="l02496"></a>02496       <span class="keywordflow">if</span> (<a class="code" href="bgp__debug_8h.html#a3652951eb4451c498ae4be9890d4b7a4">BGP_DEBUG</a> (events, EVENTS))
<a name="l02497"></a>02497     <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s [Event] Accepting BGP peer delete&quot;</span>, peer-&gt;<a class="code" href="structpeer.html#ac3e4ca25642ebcc52b2d4b2143fa74fa">host</a>);
<a name="l02498"></a>02498       <a class="code" href="bgpd_8c.html#a3cf7aaaf69048554d000a576ecb0cc9c">peer_delete</a> (peer);
<a name="l02499"></a>02499     }
<a name="l02500"></a>02500   <span class="keywordflow">return</span> 0;
<a name="l02501"></a>02501 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__packet_8c.html">bgp_packet.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:02 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
