<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/log.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('log_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/log.c</div>  </div>
</div>
<div class="contents">
<a href="log_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * $Id$</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * Logging of zebra</span>
<a name="l00005"></a>00005 <span class="comment"> * Copyright (C) 1997, 1998, 1999 Kunihiro Ishiguro</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00008"></a>00008 <span class="comment"> *</span>
<a name="l00009"></a>00009 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00010"></a>00010 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00011"></a>00011 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00012"></a>00012 <span class="comment"> * later version.</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00015"></a>00015 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00017"></a>00017 <span class="comment"> * General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment"> *</span>
<a name="l00019"></a>00019 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00020"></a>00020 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00021"></a>00021 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00022"></a>00022 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00023"></a>00023 <span class="comment"> */</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#ifndef SUNOS_5</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#include &lt;sys/un.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span><span class="comment">/* for printstack on solaris */</span>
<a name="l00034"></a>00034 <span class="preprocessor">#ifdef HAVE_UCONTEXT_H</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">#include &lt;ucontext.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#endif</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span>
<a name="l00038"></a><a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">00038</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a> = -1; <span class="comment">/* Used in signal handler. */</span>
<a name="l00039"></a>00039 
<a name="l00040"></a><a class="code" href="log_8h.html#a69cba84b9cc9c438ad5f5b1379b702b5">00040</a> <span class="keyword">struct </span><a class="code" href="structzlog.html">zlog</a> *<a class="code" href="log_8c.html#a69cba84b9cc9c438ad5f5b1379b702b5">zlog_default</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00041"></a>00041 
<a name="l00042"></a><a class="code" href="log_8h.html#a104618d1dc8bb7b6b5c36f8969f2a49e">00042</a> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="log_8c.html#a104618d1dc8bb7b6b5c36f8969f2a49e">zlog_proto_names</a>[] = 
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044   <span class="stringliteral">&quot;NONE&quot;</span>,
<a name="l00045"></a>00045   <span class="stringliteral">&quot;DEFAULT&quot;</span>,
<a name="l00046"></a>00046   <span class="stringliteral">&quot;ZEBRA&quot;</span>,
<a name="l00047"></a>00047   <span class="stringliteral">&quot;RIP&quot;</span>,
<a name="l00048"></a>00048   <span class="stringliteral">&quot;BGP&quot;</span>,
<a name="l00049"></a>00049   <span class="stringliteral">&quot;OSPF&quot;</span>,
<a name="l00050"></a>00050   <span class="stringliteral">&quot;RIPNG&quot;</span>,
<a name="l00051"></a>00051   <span class="stringliteral">&quot;OSPF6&quot;</span>,
<a name="l00052"></a>00052   <span class="stringliteral">&quot;ISIS&quot;</span>,
<a name="l00053"></a>00053   <span class="stringliteral">&quot;MASC&quot;</span>,
<a name="l00054"></a>00054   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00055"></a>00055 };
<a name="l00056"></a>00056 
<a name="l00057"></a><a class="code" href="log_8h.html#ad3349b0c67f3067aeb5d83ef5c92b473">00057</a> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="log_8c.html#ad3349b0c67f3067aeb5d83ef5c92b473">zlog_priority</a>[] =
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059   <span class="stringliteral">&quot;emergencies&quot;</span>,
<a name="l00060"></a>00060   <span class="stringliteral">&quot;alerts&quot;</span>,
<a name="l00061"></a>00061   <span class="stringliteral">&quot;critical&quot;</span>,
<a name="l00062"></a>00062   <span class="stringliteral">&quot;errors&quot;</span>,
<a name="l00063"></a>00063   <span class="stringliteral">&quot;warnings&quot;</span>,
<a name="l00064"></a>00064   <span class="stringliteral">&quot;notifications&quot;</span>,
<a name="l00065"></a>00065   <span class="stringliteral">&quot;informational&quot;</span>,
<a name="l00066"></a>00066   <span class="stringliteral">&quot;debugging&quot;</span>,
<a name="l00067"></a>00067   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00068"></a>00068 };
<a name="l00069"></a>00069   
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="comment">/* For time string format. */</span>
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="keywordtype">size_t</span>
<a name="l00075"></a><a class="code" href="log_8h.html#aa70601e0152987332545566abf72b090">00075</a> <a class="code" href="log_8c.html#aa70601e0152987332545566abf72b090">quagga_timestamp</a>(<span class="keywordtype">int</span> <a class="code" href="structzlog.html#ae5eac9e70c5a60649771b68fcf3d9831">timestamp_precision</a>, <span class="keywordtype">char</span> *buf, <span class="keywordtype">size_t</span> buflen)
<a name="l00076"></a>00076 {
<a name="l00077"></a>00077   <span class="keyword">static</span> <span class="keyword">struct </span>{
<a name="l00078"></a>00078     time_t last;
<a name="l00079"></a>00079     <span class="keywordtype">size_t</span> len;
<a name="l00080"></a>00080     <span class="keywordtype">char</span> buf[28];
<a name="l00081"></a>00081   } cache;
<a name="l00082"></a>00082   <span class="keyword">struct </span>timeval clock;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084   <span class="comment">/* would it be sufficient to use global &#39;recent_time&#39; here?  I fear not... */</span>
<a name="l00085"></a>00085   gettimeofday(&amp;clock, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   <span class="comment">/* first, we update the cache if the time has changed */</span>
<a name="l00088"></a>00088   <span class="keywordflow">if</span> (cache.last != clock.tv_sec)
<a name="l00089"></a>00089     {
<a name="l00090"></a>00090       <span class="keyword">struct </span>tm *tm;
<a name="l00091"></a>00091       cache.last = clock.tv_sec;
<a name="l00092"></a>00092       tm = localtime(&amp;cache.last);
<a name="l00093"></a>00093       cache.len = strftime(cache.buf, <span class="keyword">sizeof</span>(cache.buf),
<a name="l00094"></a>00094                    <span class="stringliteral">&quot;%Y/%m/%d %H:%M:%S&quot;</span>, tm);
<a name="l00095"></a>00095     }
<a name="l00096"></a>00096   <span class="comment">/* note: it&#39;s not worth caching the subsecond part, because</span>
<a name="l00097"></a>00097 <span class="comment">     chances are that back-to-back calls are not sufficiently close together</span>
<a name="l00098"></a>00098 <span class="comment">     for the clock not to have ticked forward */</span>
<a name="l00099"></a>00099 
<a name="l00100"></a>00100   <span class="keywordflow">if</span> (buflen &gt; cache.len)
<a name="l00101"></a>00101     {
<a name="l00102"></a>00102       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(buf, cache.buf, cache.len);
<a name="l00103"></a>00103       <span class="keywordflow">if</span> ((timestamp_precision &gt; 0) &amp;&amp;
<a name="l00104"></a>00104       (buflen &gt; cache.len+1+timestamp_precision))
<a name="l00105"></a>00105     {
<a name="l00106"></a>00106       <span class="comment">/* should we worry about locale issues? */</span>
<a name="l00107"></a>00107       <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> divisor[] = {0, 100000, 10000, 1000, 100, 10, 1};
<a name="l00108"></a>00108       <span class="keywordtype">int</span> prec;
<a name="l00109"></a>00109       <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = buf+cache.len+1+(prec = timestamp_precision);
<a name="l00110"></a>00110       *p-- = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00111"></a>00111       <span class="keywordflow">while</span> (prec &gt; 6)
<a name="l00112"></a>00112         <span class="comment">/* this is unlikely to happen, but protect anyway */</span>
<a name="l00113"></a>00113         {
<a name="l00114"></a>00114           *p-- = <span class="charliteral">&#39;0&#39;</span>;
<a name="l00115"></a>00115           prec--;
<a name="l00116"></a>00116         }
<a name="l00117"></a>00117       clock.tv_usec /= divisor[prec];
<a name="l00118"></a>00118       <span class="keywordflow">do</span>
<a name="l00119"></a>00119         {
<a name="l00120"></a>00120           *p-- = <span class="charliteral">&#39;0&#39;</span>+(clock.tv_usec % 10);
<a name="l00121"></a>00121           clock.tv_usec /= 10;
<a name="l00122"></a>00122         }
<a name="l00123"></a>00123       <span class="keywordflow">while</span> (--prec &gt; 0);
<a name="l00124"></a>00124       *p = <span class="charliteral">&#39;.&#39;</span>;
<a name="l00125"></a>00125       <span class="keywordflow">return</span> cache.len+1+timestamp_precision;
<a name="l00126"></a>00126     }
<a name="l00127"></a>00127       buf[cache.len] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00128"></a>00128       <span class="keywordflow">return</span> cache.len;
<a name="l00129"></a>00129     }
<a name="l00130"></a>00130   <span class="keywordflow">if</span> (buflen &gt; 0)
<a name="l00131"></a>00131     buf[0] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00132"></a>00132   <span class="keywordflow">return</span> 0;
<a name="l00133"></a>00133 }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="comment">/* Utility routine for current time printing. */</span>
<a name="l00136"></a>00136 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00137"></a><a class="code" href="log_8c.html#a339ab8c8c5a7ca6d21e344fd3b6b4916">00137</a> <a class="code" href="log_8c.html#a339ab8c8c5a7ca6d21e344fd3b6b4916">time_print</a>(FILE *fp, <span class="keyword">struct</span> <a class="code" href="structtimestamp__control.html">timestamp_control</a> *ctl)
<a name="l00138"></a>00138 {
<a name="l00139"></a>00139   <span class="keywordflow">if</span> (!ctl-&gt;<a class="code" href="structtimestamp__control.html#a1691f5b39846bf86d4b5f36fdfdf935e">already_rendered</a>)
<a name="l00140"></a>00140     {
<a name="l00141"></a>00141       ctl-&gt;<a class="code" href="structtimestamp__control.html#a6b830b1c0ee6418d148039bfc1ddc8bc">len</a> = <a class="code" href="log_8c.html#aa70601e0152987332545566abf72b090">quagga_timestamp</a>(ctl-&gt;<a class="code" href="structtimestamp__control.html#a58aa149c5e76ec58ce892de831fd95e9">precision</a>, ctl-&gt;<a class="code" href="structtimestamp__control.html#aab2bcb84e3ac17da33c7ee1df865db6d">buf</a>, <span class="keyword">sizeof</span>(ctl-&gt;<a class="code" href="structtimestamp__control.html#aab2bcb84e3ac17da33c7ee1df865db6d">buf</a>));
<a name="l00142"></a>00142       ctl-&gt;<a class="code" href="structtimestamp__control.html#a1691f5b39846bf86d4b5f36fdfdf935e">already_rendered</a> = 1;
<a name="l00143"></a>00143     }
<a name="l00144"></a>00144   fprintf(fp, <span class="stringliteral">&quot;%s &quot;</span>, ctl-&gt;<a class="code" href="structtimestamp__control.html#aab2bcb84e3ac17da33c7ee1df865db6d">buf</a>);
<a name="l00145"></a>00145 }
<a name="l00146"></a>00146   
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="comment">/* va_list version of zlog. */</span>
<a name="l00149"></a>00149 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00150"></a><a class="code" href="log_8c.html#aae5bf6763e3e56f4118957374d4f1208">00150</a> <a class="code" href="log_8c.html#aae5bf6763e3e56f4118957374d4f1208">vzlog</a> (<span class="keyword">struct</span> <a class="code" href="structzlog.html">zlog</a> *zl, <span class="keywordtype">int</span> priority, <span class="keyword">const</span> <span class="keywordtype">char</span> *format, va_list <a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>)
<a name="l00151"></a>00151 {
<a name="l00152"></a>00152   <span class="keyword">struct </span><a class="code" href="structtimestamp__control.html">timestamp_control</a> tsctl;
<a name="l00153"></a>00153   tsctl.<a class="code" href="structtimestamp__control.html#a1691f5b39846bf86d4b5f36fdfdf935e">already_rendered</a> = 0;
<a name="l00154"></a>00154 
<a name="l00155"></a>00155   <span class="comment">/* If zlog is not specified, use default one. */</span>
<a name="l00156"></a>00156   <span class="keywordflow">if</span> (zl == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00157"></a>00157     zl = <a class="code" href="log_8c.html#a69cba84b9cc9c438ad5f5b1379b702b5">zlog_default</a>;
<a name="l00158"></a>00158 
<a name="l00159"></a>00159   <span class="comment">/* When zlog_default is also NULL, use stderr for logging. */</span>
<a name="l00160"></a>00160   <span class="keywordflow">if</span> (zl == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00161"></a>00161     {
<a name="l00162"></a>00162       tsctl.<a class="code" href="structtimestamp__control.html#a58aa149c5e76ec58ce892de831fd95e9">precision</a> = 0;
<a name="l00163"></a>00163       <a class="code" href="log_8c.html#a339ab8c8c5a7ca6d21e344fd3b6b4916">time_print</a>(stderr, &amp;tsctl);
<a name="l00164"></a>00164       fprintf (stderr, <span class="stringliteral">&quot;%s: &quot;</span>, <span class="stringliteral">&quot;unknown&quot;</span>);
<a name="l00165"></a>00165       vfprintf (stderr, format, args);
<a name="l00166"></a>00166       fprintf (stderr, <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00167"></a>00167       fflush (stderr);
<a name="l00168"></a>00168 
<a name="l00169"></a>00169       <span class="comment">/* In this case we return at here. */</span>
<a name="l00170"></a>00170       <span class="keywordflow">return</span>;
<a name="l00171"></a>00171     }
<a name="l00172"></a>00172   tsctl.<a class="code" href="structtimestamp__control.html#a58aa149c5e76ec58ce892de831fd95e9">precision</a> = zl-&gt;<a class="code" href="structzlog.html#ae5eac9e70c5a60649771b68fcf3d9831">timestamp_precision</a>;
<a name="l00173"></a>00173 
<a name="l00174"></a>00174   <span class="comment">/* Syslog output */</span>
<a name="l00175"></a>00175   <span class="keywordflow">if</span> (priority &lt;= zl-&gt;maxlvl[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa0b23cfb9b02e22f2606823361d397ef4">ZLOG_DEST_SYSLOG</a>])
<a name="l00176"></a>00176     {
<a name="l00177"></a>00177       va_list ac;
<a name="l00178"></a>00178       <a class="code" href="zebra_8h.html#a3a33fef6728dc26a7e3fd47ad35ad3ae">va_copy</a>(ac, args);
<a name="l00179"></a>00179       vsyslog (priority|zlog_default-&gt;<a class="code" href="structzlog.html#a3cd253b1e67519d82ef1564156271c6e">facility</a>, format, ac);
<a name="l00180"></a>00180       va_end(ac);
<a name="l00181"></a>00181     }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183   <span class="comment">/* File output. */</span>
<a name="l00184"></a>00184   <span class="keywordflow">if</span> ((priority &lt;= zl-&gt;maxlvl[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa36c69acd7ce2fd26be0604db878a17c9">ZLOG_DEST_FILE</a>]) &amp;&amp; zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>)
<a name="l00185"></a>00185     {
<a name="l00186"></a>00186       va_list ac;
<a name="l00187"></a>00187       <a class="code" href="log_8c.html#a339ab8c8c5a7ca6d21e344fd3b6b4916">time_print</a> (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>, &amp;tsctl);
<a name="l00188"></a>00188       <span class="keywordflow">if</span> (zl-&gt;<a class="code" href="structzlog.html#a9928a1757d99c07128ffd7f2f44cfe58">record_priority</a>)
<a name="l00189"></a>00189     fprintf (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>, <span class="stringliteral">&quot;%s: &quot;</span>, <a class="code" href="log_8c.html#ad3349b0c67f3067aeb5d83ef5c92b473">zlog_priority</a>[priority]);
<a name="l00190"></a>00190       fprintf (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>, <span class="stringliteral">&quot;%s: &quot;</span>, <a class="code" href="log_8c.html#a104618d1dc8bb7b6b5c36f8969f2a49e">zlog_proto_names</a>[zl-&gt;<a class="code" href="structzlog.html#acafcb64affec5374e8e4d61fded92812">protocol</a>]);
<a name="l00191"></a>00191       <a class="code" href="zebra_8h.html#a3a33fef6728dc26a7e3fd47ad35ad3ae">va_copy</a>(ac, args);
<a name="l00192"></a>00192       vfprintf (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>, format, ac);
<a name="l00193"></a>00193       va_end(ac);
<a name="l00194"></a>00194       fprintf (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>, <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00195"></a>00195       fflush (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>);
<a name="l00196"></a>00196     }
<a name="l00197"></a>00197 
<a name="l00198"></a>00198   <span class="comment">/* stdout output. */</span>
<a name="l00199"></a>00199   <span class="keywordflow">if</span> (priority &lt;= zl-&gt;maxlvl[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa1883db184dab41d65e03180c1fbed617">ZLOG_DEST_STDOUT</a>])
<a name="l00200"></a>00200     {
<a name="l00201"></a>00201       va_list ac;
<a name="l00202"></a>00202       <a class="code" href="log_8c.html#a339ab8c8c5a7ca6d21e344fd3b6b4916">time_print</a> (stdout, &amp;tsctl);
<a name="l00203"></a>00203       <span class="keywordflow">if</span> (zl-&gt;<a class="code" href="structzlog.html#a9928a1757d99c07128ffd7f2f44cfe58">record_priority</a>)
<a name="l00204"></a>00204     fprintf (stdout, <span class="stringliteral">&quot;%s: &quot;</span>, <a class="code" href="log_8c.html#ad3349b0c67f3067aeb5d83ef5c92b473">zlog_priority</a>[priority]);
<a name="l00205"></a>00205       fprintf (stdout, <span class="stringliteral">&quot;%s: &quot;</span>, <a class="code" href="log_8c.html#a104618d1dc8bb7b6b5c36f8969f2a49e">zlog_proto_names</a>[zl-&gt;<a class="code" href="structzlog.html#acafcb64affec5374e8e4d61fded92812">protocol</a>]);
<a name="l00206"></a>00206       <a class="code" href="zebra_8h.html#a3a33fef6728dc26a7e3fd47ad35ad3ae">va_copy</a>(ac, args);
<a name="l00207"></a>00207       vfprintf (stdout, format, ac);
<a name="l00208"></a>00208       va_end(ac);
<a name="l00209"></a>00209       fprintf (stdout, <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00210"></a>00210       fflush (stdout);
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213   <span class="comment">/* Terminal monitor. */</span>
<a name="l00214"></a>00214   <span class="keywordflow">if</span> (priority &lt;= zl-&gt;maxlvl[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afad7c519b6be9a085d26f764f00a6e3c72">ZLOG_DEST_MONITOR</a>])
<a name="l00215"></a>00215     <a class="code" href="vty_8c.html#adc0f09a34324734b4f87905ae873cc55">vty_log</a> ((zl-&gt;<a class="code" href="structzlog.html#a9928a1757d99c07128ffd7f2f44cfe58">record_priority</a> ? <a class="code" href="log_8c.html#ad3349b0c67f3067aeb5d83ef5c92b473">zlog_priority</a>[priority] : <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>),
<a name="l00216"></a>00216          <a class="code" href="log_8c.html#a104618d1dc8bb7b6b5c36f8969f2a49e">zlog_proto_names</a>[zl-&gt;<a class="code" href="structzlog.html#acafcb64affec5374e8e4d61fded92812">protocol</a>], format, &amp;tsctl, args);
<a name="l00217"></a>00217 }
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 <span class="keyword">static</span> <span class="keywordtype">char</span> *
<a name="l00220"></a><a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">00220</a> <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<span class="keywordtype">char</span> *dst, <span class="keywordtype">int</span> <a class="code" href="structtimestamp__control.html#a6b830b1c0ee6418d148039bfc1ddc8bc">len</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *src)
<a name="l00221"></a>00221 {
<a name="l00222"></a>00222   <span class="keywordflow">while</span> ((len-- &gt; 0) &amp;&amp; *src)
<a name="l00223"></a>00223     *dst++ = *src++;
<a name="l00224"></a>00224   <span class="keywordflow">return</span> dst;
<a name="l00225"></a>00225 }
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 <span class="keyword">static</span> <span class="keywordtype">char</span> *
<a name="l00228"></a><a class="code" href="log_8c.html#a80ef76ace680efc94420e6b41b8b87a9">00228</a> <a class="code" href="log_8c.html#a80ef76ace680efc94420e6b41b8b87a9">num_append</a>(<span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keywordtype">int</span> <a class="code" href="structtimestamp__control.html#a6b830b1c0ee6418d148039bfc1ddc8bc">len</a>, u_long <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>)
<a name="l00229"></a>00229 {
<a name="l00230"></a>00230   <span class="keywordtype">char</span> <a class="code" href="structtimestamp__control.html#aab2bcb84e3ac17da33c7ee1df865db6d">buf</a>[30];
<a name="l00231"></a>00231   <span class="keywordtype">char</span> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>;
<a name="l00232"></a>00232 
<a name="l00233"></a>00233   <span class="keywordflow">if</span> (!x)
<a name="l00234"></a>00234     <span class="keywordflow">return</span> <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(s,len,<span class="stringliteral">&quot;0&quot;</span>);
<a name="l00235"></a>00235   *(t = &amp;buf[<span class="keyword">sizeof</span>(<a class="code" href="structtimestamp__control.html#aab2bcb84e3ac17da33c7ee1df865db6d">buf</a>)-1]) = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00236"></a>00236   <span class="keywordflow">while</span> (x &amp;&amp; (t &gt; buf))
<a name="l00237"></a>00237     {
<a name="l00238"></a>00238       *--t = <span class="charliteral">&#39;0&#39;</span>+(x % 10);
<a name="l00239"></a>00239       x /= 10;
<a name="l00240"></a>00240     }
<a name="l00241"></a>00241   <span class="keywordflow">return</span> <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(s,len,t);
<a name="l00242"></a>00242 }
<a name="l00243"></a>00243 
<a name="l00244"></a>00244 <span class="preprocessor">#if defined(SA_SIGINFO) || defined(HAVE_STACK_TRACE)</span>
<a name="l00245"></a>00245 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">char</span> *
<a name="l00246"></a>00246 hex_append(<span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keywordtype">int</span> <a class="code" href="structtimestamp__control.html#a6b830b1c0ee6418d148039bfc1ddc8bc">len</a>, u_long <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>)
<a name="l00247"></a>00247 {
<a name="l00248"></a>00248   <span class="keywordtype">char</span> <a class="code" href="structtimestamp__control.html#aab2bcb84e3ac17da33c7ee1df865db6d">buf</a>[30];
<a name="l00249"></a>00249   <span class="keywordtype">char</span> *<a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>;
<a name="l00250"></a>00250 
<a name="l00251"></a>00251   <span class="keywordflow">if</span> (!x)
<a name="l00252"></a>00252     <span class="keywordflow">return</span> <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(s,len,<span class="stringliteral">&quot;0&quot;</span>);
<a name="l00253"></a>00253   *(t = &amp;buf[<span class="keyword">sizeof</span>(<a class="code" href="structtimestamp__control.html#aab2bcb84e3ac17da33c7ee1df865db6d">buf</a>)-1]) = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00254"></a>00254   <span class="keywordflow">while</span> (x &amp;&amp; (t &gt; buf))
<a name="l00255"></a>00255     {
<a name="l00256"></a>00256       u_int cc = (x % 16);
<a name="l00257"></a>00257       *--t = ((cc &lt; 10) ? (<span class="charliteral">&#39;0&#39;</span>+cc) : (<span class="charliteral">&#39;a&#39;</span>+cc-10));
<a name="l00258"></a>00258       x /= 16;
<a name="l00259"></a>00259     }
<a name="l00260"></a>00260   <span class="keywordflow">return</span> <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(s,len,t);
<a name="l00261"></a>00261 }
<a name="l00262"></a>00262 <span class="preprocessor">#endif</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span>
<a name="l00264"></a>00264 <span class="comment">/* Needs to be enhanced to support Solaris. */</span>
<a name="l00265"></a>00265 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00266"></a><a class="code" href="log_8c.html#ab2e057d52611ed04233ea01c68e871a5">00266</a> <a class="code" href="log_8c.html#ab2e057d52611ed04233ea01c68e871a5">syslog_connect</a>(<span class="keywordtype">void</span>)
<a name="l00267"></a>00267 {
<a name="l00268"></a>00268 <span class="preprocessor">#ifdef SUNOS_5</span>
<a name="l00269"></a>00269 <span class="preprocessor"></span>  <span class="keywordflow">return</span> -1;
<a name="l00270"></a>00270 <span class="preprocessor">#else</span>
<a name="l00271"></a>00271 <span class="preprocessor"></span>  <span class="keywordtype">int</span> fd;
<a name="l00272"></a>00272   <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00273"></a>00273   <span class="keyword">struct </span>sockaddr_un addr;
<a name="l00274"></a>00274 
<a name="l00275"></a>00275   <span class="keywordflow">if</span> ((fd = socket(AF_UNIX,SOCK_DGRAM,0)) &lt; 0)
<a name="l00276"></a>00276     <span class="keywordflow">return</span> -1;
<a name="l00277"></a>00277   addr.sun_family = AF_UNIX;
<a name="l00278"></a>00278 <span class="preprocessor">#ifdef _PATH_LOG</span>
<a name="l00279"></a>00279 <span class="preprocessor"></span><span class="preprocessor">#define SYSLOG_SOCKET_PATH _PATH_LOG</span>
<a name="l00280"></a>00280 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00281"></a>00281 <span class="preprocessor"></span><span class="preprocessor">#define SYSLOG_SOCKET_PATH &quot;/dev/log&quot;</span>
<a name="l00282"></a>00282 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00283"></a>00283 <span class="preprocessor"></span>  s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(addr.sun_path,<span class="keyword">sizeof</span>(addr.sun_path),<a class="code" href="log_8c.html#a16f89e1217106cdaf03d67a41645c081">SYSLOG_SOCKET_PATH</a>);
<a name="l00284"></a>00284 <span class="preprocessor">#undef SYSLOG_SOCKET_PATH</span>
<a name="l00285"></a>00285 <span class="preprocessor"></span>  *s = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00286"></a>00286   <span class="keywordflow">if</span> (connect(fd,(<span class="keyword">struct</span> sockaddr *)&amp;addr,<span class="keyword">sizeof</span>(addr)) &lt; 0)
<a name="l00287"></a>00287     {
<a name="l00288"></a>00288       close(fd);
<a name="l00289"></a>00289       <span class="keywordflow">return</span> -1;
<a name="l00290"></a>00290     }
<a name="l00291"></a>00291   <span class="keywordflow">return</span> fd;
<a name="l00292"></a>00292 <span class="preprocessor">#endif</span>
<a name="l00293"></a>00293 <span class="preprocessor"></span>}
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00296"></a><a class="code" href="log_8c.html#a8c4d4637d2c9e63aedb25da9000530de">00296</a> <a class="code" href="log_8c.html#a8c4d4637d2c9e63aedb25da9000530de">syslog_sigsafe</a>(<span class="keywordtype">int</span> priority, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structmsg.html">msg</a>, <span class="keywordtype">size_t</span> msglen)
<a name="l00297"></a>00297 {
<a name="l00298"></a>00298   <span class="keyword">static</span> <span class="keywordtype">int</span> syslog_fd = -1;
<a name="l00299"></a>00299   <span class="keywordtype">char</span> buf[<span class="keyword">sizeof</span>(<span class="stringliteral">&quot;&lt;1234567890&gt;ripngd[1234567890]: &quot;</span>)+msglen+50];
<a name="l00300"></a>00300   <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00301"></a>00301 
<a name="l00302"></a>00302   <span class="keywordflow">if</span> ((syslog_fd &lt; 0) &amp;&amp; ((syslog_fd = <a class="code" href="log_8c.html#ab2e057d52611ed04233ea01c68e871a5">syslog_connect</a>()) &lt; 0))
<a name="l00303"></a>00303     <span class="keywordflow">return</span>;
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 <span class="preprocessor">#define LOC s,buf+sizeof(buf)-s</span>
<a name="l00306"></a>00306 <span class="preprocessor"></span>  s = buf;
<a name="l00307"></a>00307   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;&lt;&quot;</span>);
<a name="l00308"></a>00308   s = <a class="code" href="log_8c.html#a80ef76ace680efc94420e6b41b8b87a9">num_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,priority);
<a name="l00309"></a>00309   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;&gt;&quot;</span>);
<a name="l00310"></a>00310   <span class="comment">/* forget about the timestamp, too difficult in a signal handler */</span>
<a name="l00311"></a>00311   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,zlog_default-&gt;<a class="code" href="structzlog.html#af1397d3fd2adbb85ebf9b6e16ed4d95b">ident</a>);
<a name="l00312"></a>00312   <span class="keywordflow">if</span> (zlog_default-&gt;<a class="code" href="structzlog.html#a955f566e2b7b08c5ec2f2952c14f32eb">syslog_options</a> &amp; LOG_PID)
<a name="l00313"></a>00313     {
<a name="l00314"></a>00314       s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;[&quot;</span>);
<a name="l00315"></a>00315       s = <a class="code" href="log_8c.html#a80ef76ace680efc94420e6b41b8b87a9">num_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,getpid());
<a name="l00316"></a>00316       s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;]&quot;</span>);
<a name="l00317"></a>00317     }
<a name="l00318"></a>00318   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;: &quot;</span>);
<a name="l00319"></a>00319   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,msg);
<a name="l00320"></a>00320   write(syslog_fd,buf,s-buf);
<a name="l00321"></a>00321 <span class="preprocessor">#undef LOC</span>
<a name="l00322"></a>00322 <span class="preprocessor"></span>}
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00325"></a><a class="code" href="log_8c.html#ae757d8997fecba3ff8772d26fd323792">00325</a> <a class="code" href="log_8c.html#ae757d8997fecba3ff8772d26fd323792">open_crashlog</a>(<span class="keywordtype">void</span>)
<a name="l00326"></a>00326 {
<a name="l00327"></a>00327 <span class="preprocessor">#define CRASHLOG_PREFIX &quot;/var/tmp/quagga.&quot;</span>
<a name="l00328"></a>00328 <span class="preprocessor"></span><span class="preprocessor">#define CRASHLOG_SUFFIX &quot;crashlog&quot;</span>
<a name="l00329"></a>00329 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (zlog_default &amp;&amp; zlog_default-&gt;<a class="code" href="structzlog.html#af1397d3fd2adbb85ebf9b6e16ed4d95b">ident</a>)
<a name="l00330"></a>00330     {
<a name="l00331"></a>00331       <span class="comment">/* Avoid strlen since it is not async-signal-safe. */</span>
<a name="l00332"></a>00332       <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00333"></a>00333       <span class="keywordtype">size_t</span> ilen;
<a name="l00334"></a>00334 
<a name="l00335"></a>00335       <span class="keywordflow">for</span> (p = zlog_default-&gt;<a class="code" href="structzlog.html#af1397d3fd2adbb85ebf9b6e16ed4d95b">ident</a>, ilen = 0; *p; p++)
<a name="l00336"></a>00336     ilen++;
<a name="l00337"></a>00337       {
<a name="l00338"></a>00338     <span class="keywordtype">char</span> buf[<span class="keyword">sizeof</span>(<a class="code" href="log_8c.html#a2a00b2d09c12519792fdbd61fb7ecd97">CRASHLOG_PREFIX</a>)+ilen+<span class="keyword">sizeof</span>(<a class="code" href="log_8c.html#a69fed7027b716a1b9ebcf865ec2e6851">CRASHLOG_SUFFIX</a>)+3];
<a name="l00339"></a>00339     <span class="keywordtype">char</span> *s = buf;
<a name="l00340"></a>00340 <span class="preprocessor">#define LOC s,buf+sizeof(buf)-s</span>
<a name="l00341"></a>00341 <span class="preprocessor"></span>    s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>, <a class="code" href="log_8c.html#a2a00b2d09c12519792fdbd61fb7ecd97">CRASHLOG_PREFIX</a>);
<a name="l00342"></a>00342     s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>, zlog_default-&gt;<a class="code" href="structzlog.html#af1397d3fd2adbb85ebf9b6e16ed4d95b">ident</a>);
<a name="l00343"></a>00343     s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>, <span class="stringliteral">&quot;.&quot;</span>);
<a name="l00344"></a>00344     s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>, <a class="code" href="log_8c.html#a69fed7027b716a1b9ebcf865ec2e6851">CRASHLOG_SUFFIX</a>);
<a name="l00345"></a>00345 <span class="preprocessor">#undef LOC</span>
<a name="l00346"></a>00346 <span class="preprocessor"></span>    *s = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00347"></a>00347     <span class="keywordflow">return</span> open(buf, O_WRONLY|O_CREAT|O_EXCL, LOGFILE_MASK);
<a name="l00348"></a>00348       }
<a name="l00349"></a>00349     }
<a name="l00350"></a>00350   <span class="keywordflow">return</span> open(<a class="code" href="log_8c.html#a2a00b2d09c12519792fdbd61fb7ecd97">CRASHLOG_PREFIX</a> <a class="code" href="log_8c.html#a69fed7027b716a1b9ebcf865ec2e6851">CRASHLOG_SUFFIX</a>, O_WRONLY|O_CREAT|O_EXCL,
<a name="l00351"></a>00351           LOGFILE_MASK);
<a name="l00352"></a>00352 <span class="preprocessor">#undef CRASHLOG_SUFFIX</span>
<a name="l00353"></a>00353 <span class="preprocessor"></span><span class="preprocessor">#undef CRASHLOG_PREFIX</span>
<a name="l00354"></a>00354 <span class="preprocessor"></span>}
<a name="l00355"></a>00355 
<a name="l00356"></a>00356 <span class="comment">/* Note: the goal here is to use only async-signal-safe functions. */</span>
<a name="l00357"></a>00357 <span class="keywordtype">void</span>
<a name="l00358"></a><a class="code" href="log_8h.html#a05e23c9c58b9b7834cb867da34ea2556">00358</a> <a class="code" href="log_8c.html#a05e23c9c58b9b7834cb867da34ea2556">zlog_signal</a>(<span class="keywordtype">int</span> signo, <span class="keyword">const</span> <span class="keywordtype">char</span> *action
<a name="l00359"></a>00359 #ifdef SA_SIGINFO
<a name="l00360"></a>00360         , siginfo_t *siginfo, <span class="keywordtype">void</span> *program_counter
<a name="l00361"></a>00361 #endif
<a name="l00362"></a>00362        )
<a name="l00363"></a>00363 {
<a name="l00364"></a>00364   time_t now;
<a name="l00365"></a>00365   <span class="keywordtype">char</span> buf[<span class="keyword">sizeof</span>(<span class="stringliteral">&quot;DEFAULT: Received signal S at T (si_addr 0xP, PC 0xP); aborting...&quot;</span>)+100];
<a name="l00366"></a>00366   <span class="keywordtype">char</span> *s = buf;
<a name="l00367"></a>00367   <span class="keywordtype">char</span> *msgstart = buf;
<a name="l00368"></a>00368 <span class="preprocessor">#define LOC s,buf+sizeof(buf)-s</span>
<a name="l00369"></a>00369 <span class="preprocessor"></span>
<a name="l00370"></a>00370   time(&amp;now);
<a name="l00371"></a>00371   <span class="keywordflow">if</span> (zlog_default)
<a name="l00372"></a>00372     {
<a name="l00373"></a>00373       s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<a class="code" href="log_8c.html#a104618d1dc8bb7b6b5c36f8969f2a49e">zlog_proto_names</a>[zlog_default-&gt;<a class="code" href="structzlog.html#acafcb64affec5374e8e4d61fded92812">protocol</a>]);
<a name="l00374"></a>00374       *s++ = <span class="charliteral">&#39;:&#39;</span>;
<a name="l00375"></a>00375       *s++ = <span class="charliteral">&#39; &#39;</span>;
<a name="l00376"></a>00376       msgstart = <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l00377"></a>00377     }
<a name="l00378"></a>00378   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;Received signal &quot;</span>);
<a name="l00379"></a>00379   s = <a class="code" href="log_8c.html#a80ef76ace680efc94420e6b41b8b87a9">num_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,signo);
<a name="l00380"></a>00380   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot; at &quot;</span>);
<a name="l00381"></a>00381   s = <a class="code" href="log_8c.html#a80ef76ace680efc94420e6b41b8b87a9">num_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,now);
<a name="l00382"></a>00382 <span class="preprocessor">#ifdef SA_SIGINFO</span>
<a name="l00383"></a>00383 <span class="preprocessor"></span>  s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot; (si_addr 0x&quot;</span>);
<a name="l00384"></a>00384   s = hex_append(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,(u_long)(siginfo-&gt;si_addr));
<a name="l00385"></a>00385   <span class="keywordflow">if</span> (program_counter)
<a name="l00386"></a>00386     {
<a name="l00387"></a>00387       s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;, PC 0x&quot;</span>);
<a name="l00388"></a>00388       s = hex_append(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,(u_long)program_counter);
<a name="l00389"></a>00389     }
<a name="l00390"></a>00390   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;); &quot;</span>);
<a name="l00391"></a>00391 <span class="preprocessor">#else </span><span class="comment">/* SA_SIGINFO */</span>
<a name="l00392"></a>00392   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;; &quot;</span>);
<a name="l00393"></a>00393 <span class="preprocessor">#endif </span><span class="comment">/* SA_SIGINFO */</span>
<a name="l00394"></a>00394   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,action);
<a name="l00395"></a>00395   <span class="keywordflow">if</span> (s &lt; buf+<span class="keyword">sizeof</span>(buf))
<a name="l00396"></a>00396     *s++ = <span class="charliteral">&#39;\n&#39;</span>;
<a name="l00397"></a>00397 
<a name="l00398"></a>00398   <span class="comment">/* N.B. implicit priority is most severe */</span>
<a name="l00399"></a>00399 <span class="preprocessor">#define PRI LOG_CRIT</span>
<a name="l00400"></a>00400 <span class="preprocessor"></span>
<a name="l00401"></a>00401 <span class="preprocessor">#define DUMP(FD) write(FD, buf, s-buf);</span>
<a name="l00402"></a>00402 <span class="preprocessor"></span>  <span class="comment">/* If no file logging configured, try to write to fallback log file. */</span>
<a name="l00403"></a>00403   <span class="keywordflow">if</span> ((<a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a> &gt;= 0) || ((<a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a> = <a class="code" href="log_8c.html#ae757d8997fecba3ff8772d26fd323792">open_crashlog</a>()) &gt;= 0))
<a name="l00404"></a>00404     <a class="code" href="log_8c.html#afd1a507af116f890f28297c0a5ed9e86">DUMP</a>(<a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a>)
<a name="l00405"></a>00405   <span class="keywordflow">if</span> (!zlog_default)
<a name="l00406"></a>00406     <a class="code" href="log_8c.html#afd1a507af116f890f28297c0a5ed9e86">DUMP</a>(STDERR_FILENO)
<a name="l00407"></a>00407   <span class="keywordflow">else</span>
<a name="l00408"></a>00408     {
<a name="l00409"></a>00409       <span class="keywordflow">if</span> (PRI &lt;= zlog_default-&gt;maxlvl[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa1883db184dab41d65e03180c1fbed617">ZLOG_DEST_STDOUT</a>])
<a name="l00410"></a>00410         <a class="code" href="log_8c.html#afd1a507af116f890f28297c0a5ed9e86">DUMP</a>(STDOUT_FILENO)
<a name="l00411"></a>00411       <span class="comment">/* Remove trailing &#39;\n&#39; for monitor and syslog */</span>
<a name="l00412"></a>00412       *--s = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00413"></a>00413       <span class="keywordflow">if</span> (PRI &lt;= zlog_default-&gt;maxlvl[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afad7c519b6be9a085d26f764f00a6e3c72">ZLOG_DEST_MONITOR</a>])
<a name="l00414"></a>00414         <a class="code" href="vty_8c.html#ac0b3f6add8b1af732eb0289a31c58f87">vty_log_fixed</a>(buf,s-buf);
<a name="l00415"></a>00415       <span class="keywordflow">if</span> (PRI &lt;= zlog_default-&gt;maxlvl[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa0b23cfb9b02e22f2606823361d397ef4">ZLOG_DEST_SYSLOG</a>])
<a name="l00416"></a>00416     <a class="code" href="log_8c.html#a8c4d4637d2c9e63aedb25da9000530de">syslog_sigsafe</a>(<a class="code" href="log_8c.html#ac21c270bfe049dfdd259c110b2793d32">PRI</a>|zlog_default-&gt;<a class="code" href="structzlog.html#a3cd253b1e67519d82ef1564156271c6e">facility</a>,msgstart,s-msgstart);
<a name="l00417"></a>00417     }
<a name="l00418"></a>00418 <span class="preprocessor">#undef DUMP</span>
<a name="l00419"></a>00419 <span class="preprocessor"></span>
<a name="l00420"></a>00420   <a class="code" href="log_8c.html#a6db992283a1d1e643121c8bde222e525">zlog_backtrace_sigsafe</a>(<a class="code" href="log_8c.html#ac21c270bfe049dfdd259c110b2793d32">PRI</a>,
<a name="l00421"></a>00421 #ifdef SA_SIGINFO
<a name="l00422"></a>00422              program_counter
<a name="l00423"></a>00423 #<span class="keywordflow">else</span>
<a name="l00424"></a>00424              <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
<a name="l00425"></a>00425 #endif
<a name="l00426"></a>00426             );
<a name="l00427"></a>00427 <span class="preprocessor">#undef PRI</span>
<a name="l00428"></a>00428 <span class="preprocessor"></span><span class="preprocessor">#undef LOC</span>
<a name="l00429"></a>00429 <span class="preprocessor"></span>}
<a name="l00430"></a>00430 
<a name="l00431"></a>00431 <span class="comment">/* Log a backtrace using only async-signal-safe functions.</span>
<a name="l00432"></a>00432 <span class="comment">   Needs to be enhanced to support syslog logging. */</span>
<a name="l00433"></a>00433 <span class="keywordtype">void</span>
<a name="l00434"></a><a class="code" href="log_8h.html#a6db992283a1d1e643121c8bde222e525">00434</a> <a class="code" href="log_8c.html#a6db992283a1d1e643121c8bde222e525">zlog_backtrace_sigsafe</a>(<span class="keywordtype">int</span> priority, <span class="keywordtype">void</span> *program_counter)
<a name="l00435"></a>00435 {
<a name="l00436"></a>00436 <span class="preprocessor">#ifdef HAVE_STACK_TRACE</span>
<a name="l00437"></a>00437 <span class="preprocessor"></span>  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> pclabel[] = <span class="stringliteral">&quot;Program counter: &quot;</span>;
<a name="l00438"></a>00438   <span class="keywordtype">void</span> *array[64];
<a name="l00439"></a>00439   <span class="keywordtype">int</span> size;
<a name="l00440"></a>00440   <span class="keywordtype">char</span> buf[100];
<a name="l00441"></a>00441   <span class="keywordtype">char</span> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, **bt = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00442"></a>00442 <span class="preprocessor">#define LOC s,buf+sizeof(buf)-s</span>
<a name="l00443"></a>00443 <span class="preprocessor"></span>
<a name="l00444"></a>00444 <span class="preprocessor">#ifdef HAVE_GLIBC_BACKTRACE</span>
<a name="l00445"></a>00445 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (((size = backtrace(array,<span class="keyword">sizeof</span>(array)/<span class="keyword">sizeof</span>(array[0]))) &lt;= 0) ||
<a name="l00446"></a>00446       ((<span class="keywordtype">size_t</span>)size &gt; <span class="keyword">sizeof</span>(array)/<span class="keyword">sizeof</span>(array[0])))
<a name="l00447"></a>00447     <span class="keywordflow">return</span>;
<a name="l00448"></a>00448 
<a name="l00449"></a>00449 <span class="preprocessor">#define DUMP(FD) { \</span>
<a name="l00450"></a>00450 <span class="preprocessor">  if (program_counter) \</span>
<a name="l00451"></a>00451 <span class="preprocessor">    { \</span>
<a name="l00452"></a>00452 <span class="preprocessor">      write(FD, pclabel, sizeof(pclabel)-1); \</span>
<a name="l00453"></a>00453 <span class="preprocessor">      backtrace_symbols_fd(&amp;program_counter, 1, FD); \</span>
<a name="l00454"></a>00454 <span class="preprocessor">    } \</span>
<a name="l00455"></a>00455 <span class="preprocessor">  write(FD, buf, s-buf);    \</span>
<a name="l00456"></a>00456 <span class="preprocessor">  backtrace_symbols_fd(array, size, FD); \</span>
<a name="l00457"></a>00457 <span class="preprocessor">}</span>
<a name="l00458"></a>00458 <span class="preprocessor"></span><span class="preprocessor">#elif defined(HAVE_PRINTSTACK)</span>
<a name="l00459"></a>00459 <span class="preprocessor"></span><span class="preprocessor">#define DUMP(FD) { \</span>
<a name="l00460"></a>00460 <span class="preprocessor">  if (program_counter) \</span>
<a name="l00461"></a>00461 <span class="preprocessor">    write((FD), pclabel, sizeof(pclabel)-1); \</span>
<a name="l00462"></a>00462 <span class="preprocessor">  write((FD), buf, s-buf); \</span>
<a name="l00463"></a>00463 <span class="preprocessor">  printstack((FD)); \</span>
<a name="l00464"></a>00464 <span class="preprocessor">}</span>
<a name="l00465"></a>00465 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* HAVE_GLIBC_BACKTRACE, HAVE_PRINTSTACK */</span>
<a name="l00466"></a>00466 
<a name="l00467"></a>00467   s = buf;
<a name="l00468"></a>00468   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;Backtrace for &quot;</span>);
<a name="l00469"></a>00469   s = <a class="code" href="log_8c.html#a80ef76ace680efc94420e6b41b8b87a9">num_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,size);
<a name="l00470"></a>00470   s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot; stack frames:\n&quot;</span>);
<a name="l00471"></a>00471 
<a name="l00472"></a>00472   <span class="keywordflow">if</span> ((<a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a> &gt;= 0) || ((<a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a> = <a class="code" href="log_8c.html#ae757d8997fecba3ff8772d26fd323792">open_crashlog</a>()) &gt;= 0))
<a name="l00473"></a>00473     <a class="code" href="log_8c.html#afd1a507af116f890f28297c0a5ed9e86">DUMP</a>(<a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a>)
<a name="l00474"></a>00474   <span class="keywordflow">if</span> (!zlog_default)
<a name="l00475"></a>00475     <a class="code" href="log_8c.html#afd1a507af116f890f28297c0a5ed9e86">DUMP</a>(STDERR_FILENO)
<a name="l00476"></a>00476   <span class="keywordflow">else</span>
<a name="l00477"></a>00477     {
<a name="l00478"></a>00478       <span class="keywordflow">if</span> (priority &lt;= zlog_default-&gt;maxlvl[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa1883db184dab41d65e03180c1fbed617">ZLOG_DEST_STDOUT</a>])
<a name="l00479"></a>00479     <a class="code" href="log_8c.html#afd1a507af116f890f28297c0a5ed9e86">DUMP</a>(STDOUT_FILENO)
<a name="l00480"></a>00480       <span class="comment">/* Remove trailing &#39;\n&#39; for monitor and syslog */</span>
<a name="l00481"></a>00481       *--s = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00482"></a>00482       <span class="keywordflow">if</span> (priority &lt;= zlog_default-&gt;maxlvl[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afad7c519b6be9a085d26f764f00a6e3c72">ZLOG_DEST_MONITOR</a>])
<a name="l00483"></a>00483     <a class="code" href="vty_8c.html#ac0b3f6add8b1af732eb0289a31c58f87">vty_log_fixed</a>(buf,s-buf);
<a name="l00484"></a>00484       <span class="keywordflow">if</span> (priority &lt;= zlog_default-&gt;maxlvl[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa0b23cfb9b02e22f2606823361d397ef4">ZLOG_DEST_SYSLOG</a>])
<a name="l00485"></a>00485     <a class="code" href="log_8c.html#a8c4d4637d2c9e63aedb25da9000530de">syslog_sigsafe</a>(priority|zlog_default-&gt;<a class="code" href="structzlog.html#a3cd253b1e67519d82ef1564156271c6e">facility</a>,buf,s-buf);
<a name="l00486"></a>00486       {
<a name="l00487"></a>00487     <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00488"></a>00488 <span class="preprocessor">#ifdef HAVE_GLIBC_BACKTRACE</span>
<a name="l00489"></a>00489 <span class="preprocessor"></span>        bt = backtrace_symbols(array, size);
<a name="l00490"></a>00490 <span class="preprocessor">#endif</span>
<a name="l00491"></a>00491 <span class="preprocessor"></span>    <span class="comment">/* Just print the function addresses. */</span>
<a name="l00492"></a>00492     <span class="keywordflow">for</span> (i = 0; i &lt; size; i++)
<a name="l00493"></a>00493       {
<a name="l00494"></a>00494         s = buf;
<a name="l00495"></a>00495         <span class="keywordflow">if</span> (bt) 
<a name="l00496"></a>00496           s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>, bt[i]);
<a name="l00497"></a>00497         <span class="keywordflow">else</span> {
<a name="l00498"></a>00498           s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;[bt &quot;</span>);
<a name="l00499"></a>00499           s = <a class="code" href="log_8c.html#a80ef76ace680efc94420e6b41b8b87a9">num_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,i);
<a name="l00500"></a>00500           s = <a class="code" href="log_8c.html#a221cb302510814b906897944d346cbc3">str_append</a>(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,<span class="stringliteral">&quot;] 0x&quot;</span>);
<a name="l00501"></a>00501           s = hex_append(<a class="code" href="log_8c.html#a0fee446a4a4ef6536664bc1ff47ff694">LOC</a>,(u_long)(array[i]));
<a name="l00502"></a>00502         }
<a name="l00503"></a>00503         *s = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00504"></a>00504         <span class="keywordflow">if</span> (priority &lt;= zlog_default-&gt;maxlvl[ZLOG_DEST_MONITOR])
<a name="l00505"></a>00505           <a class="code" href="vty_8c.html#ac0b3f6add8b1af732eb0289a31c58f87">vty_log_fixed</a>(buf,s-buf);
<a name="l00506"></a>00506         <span class="keywordflow">if</span> (priority &lt;= zlog_default-&gt;maxlvl[ZLOG_DEST_SYSLOG])
<a name="l00507"></a>00507           <a class="code" href="log_8c.html#a8c4d4637d2c9e63aedb25da9000530de">syslog_sigsafe</a>(priority|zlog_default-&gt;<a class="code" href="structzlog.html#a3cd253b1e67519d82ef1564156271c6e">facility</a>,buf,s-buf);
<a name="l00508"></a>00508       }
<a name="l00509"></a>00509       <span class="keywordflow">if</span> (bt)
<a name="l00510"></a>00510         free(bt);
<a name="l00511"></a>00511       }
<a name="l00512"></a>00512     }
<a name="l00513"></a>00513 <span class="preprocessor">#undef DUMP</span>
<a name="l00514"></a>00514 <span class="preprocessor"></span><span class="preprocessor">#undef LOC</span>
<a name="l00515"></a>00515 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRACK_TRACE */</span>
<a name="l00516"></a>00516 }
<a name="l00517"></a>00517 
<a name="l00518"></a>00518 <span class="keywordtype">void</span>
<a name="l00519"></a><a class="code" href="log_8h.html#a007e475475f7a96147bbb4315b58bb2e">00519</a> <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a>(<span class="keywordtype">int</span> priority)
<a name="l00520"></a>00520 {
<a name="l00521"></a>00521 <span class="preprocessor">#ifndef HAVE_GLIBC_BACKTRACE</span>
<a name="l00522"></a>00522 <span class="preprocessor"></span>  <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a>(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, priority, <span class="stringliteral">&quot;No backtrace available on this platform.&quot;</span>);
<a name="l00523"></a>00523 <span class="preprocessor">#else</span>
<a name="l00524"></a>00524 <span class="preprocessor"></span>  <span class="keywordtype">void</span> *array[20];
<a name="l00525"></a>00525   <span class="keywordtype">int</span> size, <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00526"></a>00526   <span class="keywordtype">char</span> **strings;
<a name="l00527"></a>00527 
<a name="l00528"></a>00528   <span class="keywordflow">if</span> (((size = backtrace(array,<span class="keyword">sizeof</span>(array)/<span class="keyword">sizeof</span>(array[0]))) &lt;= 0) ||
<a name="l00529"></a>00529       ((<span class="keywordtype">size_t</span>)size &gt; <span class="keyword">sizeof</span>(array)/<span class="keyword">sizeof</span>(array[0])))
<a name="l00530"></a>00530     {
<a name="l00531"></a>00531       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Cannot get backtrace, returned invalid # of frames %d &quot;</span>
<a name="l00532"></a>00532            <span class="stringliteral">&quot;(valid range is between 1 and %lu)&quot;</span>,
<a name="l00533"></a>00533            size, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)(<span class="keyword">sizeof</span>(array)/<span class="keyword">sizeof</span>(array[0])));
<a name="l00534"></a>00534       <span class="keywordflow">return</span>;
<a name="l00535"></a>00535     }
<a name="l00536"></a>00536   <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a>(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, priority, <span class="stringliteral">&quot;Backtrace for %d stack frames:&quot;</span>, size);
<a name="l00537"></a>00537   <span class="keywordflow">if</span> (!(strings = backtrace_symbols(array, size)))
<a name="l00538"></a>00538     {
<a name="l00539"></a>00539       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Cannot get backtrace symbols (out of memory?)&quot;</span>);
<a name="l00540"></a>00540       <span class="keywordflow">for</span> (i = 0; i &lt; size; i++)
<a name="l00541"></a>00541     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a>(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, priority, <span class="stringliteral">&quot;[bt %d] %p&quot;</span>,i,array[i]);
<a name="l00542"></a>00542     }
<a name="l00543"></a>00543   <span class="keywordflow">else</span>
<a name="l00544"></a>00544     {
<a name="l00545"></a>00545       <span class="keywordflow">for</span> (i = 0; i &lt; size; i++)
<a name="l00546"></a>00546     <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a>(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, priority, <span class="stringliteral">&quot;[bt %d] %s&quot;</span>,i,strings[i]);
<a name="l00547"></a>00547       free(strings);
<a name="l00548"></a>00548     }
<a name="l00549"></a>00549 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_GLIBC_BACKTRACE */</span>
<a name="l00550"></a>00550 }
<a name="l00551"></a>00551 
<a name="l00552"></a>00552 <span class="keywordtype">void</span>
<a name="l00553"></a><a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">00553</a> <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<span class="keyword">struct</span> <a class="code" href="structzlog.html">zlog</a> *zl, <span class="keywordtype">int</span> priority, <span class="keyword">const</span> <span class="keywordtype">char</span> *format, ...)
<a name="l00554"></a>00554 {
<a name="l00555"></a>00555   va_list <a class="code" href="spgrid_8c.html#a2c8d3fa6d7117d15dd5c2871ac548ec4">args</a>;
<a name="l00556"></a>00556 
<a name="l00557"></a>00557   va_start(args, format);
<a name="l00558"></a>00558   <a class="code" href="log_8c.html#aae5bf6763e3e56f4118957374d4f1208">vzlog</a> (zl, priority, format, args);
<a name="l00559"></a>00559   va_end (args);
<a name="l00560"></a>00560 }
<a name="l00561"></a>00561 
<a name="l00562"></a><a class="code" href="log_8c.html#afdbf30c4542bc30c76a5dba6269e9f09">00562</a> <span class="preprocessor">#define ZLOG_FUNC(FUNCNAME,PRIORITY) \</span>
<a name="l00563"></a>00563 <span class="preprocessor">void \</span>
<a name="l00564"></a>00564 <span class="preprocessor">FUNCNAME(const char *format, ...) \</span>
<a name="l00565"></a>00565 <span class="preprocessor">{ \</span>
<a name="l00566"></a>00566 <span class="preprocessor">  va_list args; \</span>
<a name="l00567"></a>00567 <span class="preprocessor">  va_start(args, format); \</span>
<a name="l00568"></a>00568 <span class="preprocessor">  vzlog (NULL, PRIORITY, format, args); \</span>
<a name="l00569"></a>00569 <span class="preprocessor">  va_end(args); \</span>
<a name="l00570"></a>00570 <span class="preprocessor">}</span>
<a name="l00571"></a>00571 <span class="preprocessor"></span>
<a name="l00572"></a>00572 <a class="code" href="log_8c.html#afdbf30c4542bc30c76a5dba6269e9f09">ZLOG_FUNC</a>(<a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>, LOG_ERR)
<a name="l00573"></a>00573 
<a name="l00574"></a>00574 <a class="code" href="log_8c.html#afdbf30c4542bc30c76a5dba6269e9f09">ZLOG_FUNC</a>(<a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>, LOG_WARNING)
<a name="l00575"></a>00575 
<a name="l00576"></a>00576 <a class="code" href="log_8c.html#afdbf30c4542bc30c76a5dba6269e9f09">ZLOG_FUNC</a>(<a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a>, LOG_INFO)
<a name="l00577"></a>00577 
<a name="l00578"></a>00578 <a class="code" href="log_8c.html#afdbf30c4542bc30c76a5dba6269e9f09">ZLOG_FUNC</a>(<a class="code" href="log_8h.html#a2fcbf88ea2e5eb71befdbdb4a3f1474f">zlog_notice</a>, LOG_NOTICE)
<a name="l00579"></a>00579 
<a name="l00580"></a>00580 <a class="code" href="log_8c.html#afdbf30c4542bc30c76a5dba6269e9f09">ZLOG_FUNC</a>(<a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>, LOG_DEBUG)
<a name="l00581"></a>00581 
<a name="l00582"></a>00582 <span class="preprocessor">#undef ZLOG_FUNC</span>
<a name="l00583"></a>00583 <span class="preprocessor"></span>
<a name="l00584"></a><a class="code" href="log_8c.html#a83e15b1ff37c036aa534ac1d135df988">00584</a> <span class="preprocessor">#define PLOG_FUNC(FUNCNAME,PRIORITY) \</span>
<a name="l00585"></a>00585 <span class="preprocessor">void \</span>
<a name="l00586"></a>00586 <span class="preprocessor">FUNCNAME(struct zlog *zl, const char *format, ...) \</span>
<a name="l00587"></a>00587 <span class="preprocessor">{ \</span>
<a name="l00588"></a>00588 <span class="preprocessor">  va_list args; \</span>
<a name="l00589"></a>00589 <span class="preprocessor">  va_start(args, format); \</span>
<a name="l00590"></a>00590 <span class="preprocessor">  vzlog (zl, PRIORITY, format, args); \</span>
<a name="l00591"></a>00591 <span class="preprocessor">  va_end(args); \</span>
<a name="l00592"></a>00592 <span class="preprocessor">}</span>
<a name="l00593"></a>00593 <span class="preprocessor"></span>
<a name="l00594"></a>00594 <a class="code" href="log_8c.html#a83e15b1ff37c036aa534ac1d135df988">PLOG_FUNC</a>(<a class="code" href="log_8h.html#a4dac9f1d742f56610c76fb86e160a28f">plog_err</a>, LOG_ERR)
<a name="l00595"></a>00595 
<a name="l00596"></a>00596 <a class="code" href="log_8c.html#a83e15b1ff37c036aa534ac1d135df988">PLOG_FUNC</a>(<a class="code" href="log_8h.html#af170599d58fb9b176145c7703d3d8748">plog_warn</a>, LOG_WARNING)
<a name="l00597"></a>00597 
<a name="l00598"></a>00598 <a class="code" href="log_8c.html#a83e15b1ff37c036aa534ac1d135df988">PLOG_FUNC</a>(<a class="code" href="log_8h.html#a251ed7e84a023ffe5732b26df6f28c9c">plog_info</a>, LOG_INFO)
<a name="l00599"></a>00599 
<a name="l00600"></a>00600 <a class="code" href="log_8c.html#a83e15b1ff37c036aa534ac1d135df988">PLOG_FUNC</a>(<a class="code" href="log_8h.html#ad1092cab9269bc05094308a3144f34a3">plog_notice</a>, LOG_NOTICE)
<a name="l00601"></a>00601 
<a name="l00602"></a>00602 <a class="code" href="log_8c.html#a83e15b1ff37c036aa534ac1d135df988">PLOG_FUNC</a>(<a class="code" href="log_8h.html#a901efa2487b25c3a74846a52de919565">plog_debug</a>, LOG_DEBUG)
<a name="l00603"></a>00603 
<a name="l00604"></a>00604 <span class="preprocessor">#undef PLOG_FUNC</span>
<a name="l00605"></a>00605 <span class="preprocessor"></span>
<a name="l00606"></a>00606 <span class="keywordtype">void</span>
<a name="l00607"></a><a class="code" href="zassert_8h.html#a9ef3c5961abea7e0291ecc721a202ebc">00607</a> <a class="code" href="log_8c.html#ac023d06de0fea9da9c539f1c93013c45">_zlog_assert_failed</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *assertion, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="command_8c.html#a26a9ef9f1cd2906dfd6438f0141f1f9a">file</a>,
<a name="l00608"></a>00608              <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keyword">function</span>)
<a name="l00609"></a>00609 {
<a name="l00610"></a>00610   <span class="comment">/* Force fallback file logging? */</span>
<a name="l00611"></a>00611   <span class="keywordflow">if</span> (zlog_default &amp;&amp; !zlog_default-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a> &amp;&amp;
<a name="l00612"></a>00612       ((<a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a> = <a class="code" href="log_8c.html#ae757d8997fecba3ff8772d26fd323792">open_crashlog</a>()) &gt;= 0) &amp;&amp;
<a name="l00613"></a>00613       ((zlog_default-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a> = fdopen(<a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a>, <span class="stringliteral">&quot;w&quot;</span>)) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>))
<a name="l00614"></a>00614     zlog_default-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa36c69acd7ce2fd26be0604db878a17c9">ZLOG_DEST_FILE</a>] = LOG_ERR;
<a name="l00615"></a>00615   <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a>(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, LOG_CRIT, <span class="stringliteral">&quot;Assertion `%s&#39; failed in file %s, line %u, function %s&quot;</span>,
<a name="l00616"></a>00616        assertion,file,line,(<span class="keyword">function</span> ? <span class="keyword">function</span> : <span class="stringliteral">&quot;?&quot;</span>));
<a name="l00617"></a>00617   <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a>(LOG_CRIT);
<a name="l00618"></a>00618   abort();
<a name="l00619"></a>00619 }
<a name="l00620"></a>00620 
<a name="l00621"></a>00621 
<a name="l00622"></a>00622 <span class="comment">/* Open log stream */</span>
<a name="l00623"></a>00623 <span class="keyword">struct </span><a class="code" href="structzlog.html">zlog</a> *
<a name="l00624"></a><a class="code" href="log_8h.html#a2b58a82e540af4e395241d03bec3da1c">00624</a> <a class="code" href="log_8c.html#a0e29a4e0e59d1fdbff2aab49e067b501">openzlog</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="isis__main_8c.html#ab9e1449fd00c98428516f0b41eddcb10">progname</a>, <a class="code" href="log_8h.html#a7191b9759b28b288102a2c6dd41e20a3">zlog_proto_t</a> <a class="code" href="structzlog.html#acafcb64affec5374e8e4d61fded92812">protocol</a>,
<a name="l00625"></a>00625       <span class="keywordtype">int</span> syslog_flags, <span class="keywordtype">int</span> syslog_facility)
<a name="l00626"></a>00626 {
<a name="l00627"></a>00627   <span class="keyword">struct </span><a class="code" href="structzlog.html">zlog</a> *zl;
<a name="l00628"></a>00628   u_int <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00629"></a>00629 
<a name="l00630"></a>00630   zl = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a>(<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baadacccb6d56b0f70c36004bb2f499c54">MTYPE_ZLOG</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structzlog.html">zlog</a>));
<a name="l00631"></a>00631 
<a name="l00632"></a>00632   zl-&gt;<a class="code" href="structzlog.html#af1397d3fd2adbb85ebf9b6e16ed4d95b">ident</a> = <a class="code" href="isis__main_8c.html#ab9e1449fd00c98428516f0b41eddcb10">progname</a>;
<a name="l00633"></a>00633   zl-&gt;<a class="code" href="structzlog.html#acafcb64affec5374e8e4d61fded92812">protocol</a> = <a class="code" href="structzlog.html#acafcb64affec5374e8e4d61fded92812">protocol</a>;
<a name="l00634"></a>00634   zl-&gt;<a class="code" href="structzlog.html#a3cd253b1e67519d82ef1564156271c6e">facility</a> = syslog_facility;
<a name="l00635"></a>00635   zl-&gt;<a class="code" href="structzlog.html#a955f566e2b7b08c5ec2f2952c14f32eb">syslog_options</a> = syslog_flags;
<a name="l00636"></a>00636 
<a name="l00637"></a>00637   <span class="comment">/* Set default logging levels. */</span>
<a name="l00638"></a>00638   <span class="keywordflow">for</span> (i = 0; i &lt; <span class="keyword">sizeof</span>(zl-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>)/<span class="keyword">sizeof</span>(zl-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>[0]); i++)
<a name="l00639"></a>00639     zl-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>[i] = <a class="code" href="log_8h.html#a4881df705c4665936da19cea6623685e">ZLOG_DISABLED</a>;
<a name="l00640"></a>00640   zl-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afad7c519b6be9a085d26f764f00a6e3c72">ZLOG_DEST_MONITOR</a>] = LOG_DEBUG;
<a name="l00641"></a>00641   zl-&gt;<a class="code" href="structzlog.html#a009207d014b1da839bc8bec7d679b0ad">default_lvl</a> = LOG_DEBUG;
<a name="l00642"></a>00642 
<a name="l00643"></a>00643   openlog (progname, syslog_flags, zl-&gt;<a class="code" href="structzlog.html#a3cd253b1e67519d82ef1564156271c6e">facility</a>);
<a name="l00644"></a>00644   
<a name="l00645"></a>00645   <span class="keywordflow">return</span> zl;
<a name="l00646"></a>00646 }
<a name="l00647"></a>00647 
<a name="l00648"></a>00648 <span class="keywordtype">void</span>
<a name="l00649"></a><a class="code" href="log_8h.html#aa896f30e9b15a99877e4d9b98fe92b49">00649</a> <a class="code" href="log_8c.html#aa896f30e9b15a99877e4d9b98fe92b49">closezlog</a> (<span class="keyword">struct</span> <a class="code" href="structzlog.html">zlog</a> *zl)
<a name="l00650"></a>00650 {
<a name="l00651"></a>00651   closelog();
<a name="l00652"></a>00652 
<a name="l00653"></a>00653   <span class="keywordflow">if</span> (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00654"></a>00654     fclose (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>);
<a name="l00655"></a>00655 
<a name="l00656"></a>00656   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baadacccb6d56b0f70c36004bb2f499c54">MTYPE_ZLOG</a>, zl);
<a name="l00657"></a>00657 }
<a name="l00658"></a>00658 
<a name="l00659"></a>00659 <span class="comment">/* Called from command.c. */</span>
<a name="l00660"></a>00660 <span class="keywordtype">void</span>
<a name="l00661"></a><a class="code" href="log_8h.html#aaf2f4ff621448299205986930ba25798">00661</a> <a class="code" href="log_8c.html#a8ef98c8a7cd8474e0570a342208b7cfb">zlog_set_level</a> (<span class="keyword">struct</span> <a class="code" href="structzlog.html">zlog</a> *zl, <a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37af">zlog_dest_t</a> dest, <span class="keywordtype">int</span> log_level)
<a name="l00662"></a>00662 {
<a name="l00663"></a>00663   <span class="keywordflow">if</span> (zl == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00664"></a>00664     zl = <a class="code" href="log_8c.html#a69cba84b9cc9c438ad5f5b1379b702b5">zlog_default</a>;
<a name="l00665"></a>00665 
<a name="l00666"></a>00666   zl-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>[dest] = log_level;
<a name="l00667"></a>00667 }
<a name="l00668"></a>00668 
<a name="l00669"></a>00669 <span class="keywordtype">int</span>
<a name="l00670"></a><a class="code" href="log_8h.html#aa33a9ebfbc135db71eebbee2297bd6b3">00670</a> <a class="code" href="log_8c.html#aa33a9ebfbc135db71eebbee2297bd6b3">zlog_set_file</a> (<span class="keyword">struct</span> <a class="code" href="structzlog.html">zlog</a> *zl, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structzlog.html#ab0a74ebdc3ef203d2cdeb436ffde15c9">filename</a>, <span class="keywordtype">int</span> log_level)
<a name="l00671"></a>00671 {
<a name="l00672"></a>00672   FILE *<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>;
<a name="l00673"></a>00673   mode_t oldumask;
<a name="l00674"></a>00674 
<a name="l00675"></a>00675   <span class="comment">/* There is opend file.  */</span>
<a name="l00676"></a>00676   <a class="code" href="log_8c.html#ac8de64ccb9c0c7785d895a7f8907f18e">zlog_reset_file</a> (zl);
<a name="l00677"></a>00677 
<a name="l00678"></a>00678   <span class="comment">/* Set default zl. */</span>
<a name="l00679"></a>00679   <span class="keywordflow">if</span> (zl == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00680"></a>00680     zl = <a class="code" href="log_8c.html#a69cba84b9cc9c438ad5f5b1379b702b5">zlog_default</a>;
<a name="l00681"></a>00681 
<a name="l00682"></a>00682   <span class="comment">/* Open file. */</span>
<a name="l00683"></a>00683   oldumask = umask (0777 &amp; ~LOGFILE_MASK);
<a name="l00684"></a>00684   fp = fopen (filename, <span class="stringliteral">&quot;a&quot;</span>);
<a name="l00685"></a>00685   umask(oldumask);
<a name="l00686"></a>00686   <span class="keywordflow">if</span> (fp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00687"></a>00687     <span class="keywordflow">return</span> 0;
<a name="l00688"></a>00688 
<a name="l00689"></a>00689   <span class="comment">/* Set flags. */</span>
<a name="l00690"></a>00690   zl-&gt;<a class="code" href="structzlog.html#ab0a74ebdc3ef203d2cdeb436ffde15c9">filename</a> = strdup (filename);
<a name="l00691"></a>00691   zl-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa36c69acd7ce2fd26be0604db878a17c9">ZLOG_DEST_FILE</a>] = log_level;
<a name="l00692"></a>00692   zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a> = <a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>;
<a name="l00693"></a>00693   <a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a> = fileno(fp);
<a name="l00694"></a>00694 
<a name="l00695"></a>00695   <span class="keywordflow">return</span> 1;
<a name="l00696"></a>00696 }
<a name="l00697"></a>00697 
<a name="l00698"></a>00698 <span class="comment">/* Reset opend file. */</span>
<a name="l00699"></a>00699 <span class="keywordtype">int</span>
<a name="l00700"></a><a class="code" href="log_8h.html#ac8de64ccb9c0c7785d895a7f8907f18e">00700</a> <a class="code" href="log_8c.html#ac8de64ccb9c0c7785d895a7f8907f18e">zlog_reset_file</a> (<span class="keyword">struct</span> <a class="code" href="structzlog.html">zlog</a> *zl)
<a name="l00701"></a>00701 {
<a name="l00702"></a>00702   <span class="keywordflow">if</span> (zl == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00703"></a>00703     zl = <a class="code" href="log_8c.html#a69cba84b9cc9c438ad5f5b1379b702b5">zlog_default</a>;
<a name="l00704"></a>00704 
<a name="l00705"></a>00705   <span class="keywordflow">if</span> (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>)
<a name="l00706"></a>00706     fclose (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>);
<a name="l00707"></a>00707   zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00708"></a>00708   <a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a> = -1;
<a name="l00709"></a>00709   zl-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa36c69acd7ce2fd26be0604db878a17c9">ZLOG_DEST_FILE</a>] = <a class="code" href="log_8h.html#a4881df705c4665936da19cea6623685e">ZLOG_DISABLED</a>;
<a name="l00710"></a>00710 
<a name="l00711"></a>00711   <span class="keywordflow">if</span> (zl-&gt;<a class="code" href="structzlog.html#ab0a74ebdc3ef203d2cdeb436ffde15c9">filename</a>)
<a name="l00712"></a>00712     free (zl-&gt;<a class="code" href="structzlog.html#ab0a74ebdc3ef203d2cdeb436ffde15c9">filename</a>);
<a name="l00713"></a>00713   zl-&gt;<a class="code" href="structzlog.html#ab0a74ebdc3ef203d2cdeb436ffde15c9">filename</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00714"></a>00714 
<a name="l00715"></a>00715   <span class="keywordflow">return</span> 1;
<a name="l00716"></a>00716 }
<a name="l00717"></a>00717 
<a name="l00718"></a>00718 <span class="comment">/* Reopen log file. */</span>
<a name="l00719"></a>00719 <span class="keywordtype">int</span>
<a name="l00720"></a><a class="code" href="log_8h.html#a873ed2ad6ff10b6a267c0eedafd1c3de">00720</a> <a class="code" href="log_8c.html#aa854a1d910778b80a95f6b711025faa5">zlog_rotate</a> (<span class="keyword">struct</span> <a class="code" href="structzlog.html">zlog</a> *zl)
<a name="l00721"></a>00721 {
<a name="l00722"></a>00722   <span class="keywordtype">int</span> level;
<a name="l00723"></a>00723 
<a name="l00724"></a>00724   <span class="keywordflow">if</span> (zl == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00725"></a>00725     zl = <a class="code" href="log_8c.html#a69cba84b9cc9c438ad5f5b1379b702b5">zlog_default</a>;
<a name="l00726"></a>00726 
<a name="l00727"></a>00727   <span class="keywordflow">if</span> (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>)
<a name="l00728"></a>00728     fclose (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>);
<a name="l00729"></a>00729   zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00730"></a>00730   <a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a> = -1;
<a name="l00731"></a>00731   level = zl-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa36c69acd7ce2fd26be0604db878a17c9">ZLOG_DEST_FILE</a>];
<a name="l00732"></a>00732   zl-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa36c69acd7ce2fd26be0604db878a17c9">ZLOG_DEST_FILE</a>] = <a class="code" href="log_8h.html#a4881df705c4665936da19cea6623685e">ZLOG_DISABLED</a>;
<a name="l00733"></a>00733 
<a name="l00734"></a>00734   <span class="keywordflow">if</span> (zl-&gt;<a class="code" href="structzlog.html#ab0a74ebdc3ef203d2cdeb436ffde15c9">filename</a>)
<a name="l00735"></a>00735     {
<a name="l00736"></a>00736       mode_t oldumask;
<a name="l00737"></a>00737       <span class="keywordtype">int</span> save_errno;
<a name="l00738"></a>00738 
<a name="l00739"></a>00739       oldumask = umask (0777 &amp; ~LOGFILE_MASK);
<a name="l00740"></a>00740       zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a> = fopen (zl-&gt;<a class="code" href="structzlog.html#ab0a74ebdc3ef203d2cdeb436ffde15c9">filename</a>, <span class="stringliteral">&quot;a&quot;</span>);
<a name="l00741"></a>00741       save_errno = errno;
<a name="l00742"></a>00742       umask(oldumask);
<a name="l00743"></a>00743       <span class="keywordflow">if</span> (zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00744"></a>00744         {
<a name="l00745"></a>00745       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Log rotate failed: cannot open file %s for append: %s&quot;</span>,
<a name="l00746"></a>00746            zl-&gt;<a class="code" href="structzlog.html#ab0a74ebdc3ef203d2cdeb436ffde15c9">filename</a>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(save_errno));
<a name="l00747"></a>00747       <span class="keywordflow">return</span> -1;
<a name="l00748"></a>00748         }   
<a name="l00749"></a>00749       <a class="code" href="log_8c.html#ad29d7c19f0a96be05166b8bd01f106bc">logfile_fd</a> = fileno(zl-&gt;<a class="code" href="structzlog.html#acc819039d10dfe584d07470c7b80856d">fp</a>);
<a name="l00750"></a>00750       zl-&gt;<a class="code" href="structzlog.html#a6b8c81652f703d5d813414834b7a5be2">maxlvl</a>[<a class="code" href="log_8h.html#a73f647b113a31234b2acdc6979aa37afa36c69acd7ce2fd26be0604db878a17c9">ZLOG_DEST_FILE</a>] = level;
<a name="l00751"></a>00751     }
<a name="l00752"></a>00752 
<a name="l00753"></a>00753   <span class="keywordflow">return</span> 1;
<a name="l00754"></a>00754 }
<a name="l00755"></a>00755 
<a name="l00756"></a>00756 <span class="comment">/* Message lookup function. */</span>
<a name="l00757"></a>00757 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00758"></a><a class="code" href="log_8h.html#a9f2e6b2a776fcee0c081b493ee261a48">00758</a> <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structmessage.html">message</a> *mes, <span class="keywordtype">int</span> <a class="code" href="structkey.html">key</a>)
<a name="l00759"></a>00759 {
<a name="l00760"></a>00760   <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> *pnt;
<a name="l00761"></a>00761 
<a name="l00762"></a>00762   <span class="keywordflow">for</span> (pnt = mes; pnt-&gt;<a class="code" href="structmessage.html#afa781a4221d69515e57c78628e0ed8e3">key</a> != 0; pnt++) 
<a name="l00763"></a>00763     <span class="keywordflow">if</span> (pnt-&gt;<a class="code" href="structmessage.html#afa781a4221d69515e57c78628e0ed8e3">key</a> == key) 
<a name="l00764"></a>00764       <span class="keywordflow">return</span> pnt-&gt;<a class="code" href="structmessage.html#afd25323d5a42a5d73ebb8c85c5f7bd6f">str</a>;
<a name="l00765"></a>00765 
<a name="l00766"></a>00766   <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;
<a name="l00767"></a>00767 }
<a name="l00768"></a>00768 
<a name="l00769"></a>00769 <span class="comment">/* Older/faster version of message lookup function, but requires caller to pass</span>
<a name="l00770"></a>00770 <span class="comment"> * in the array size (instead of relying on a 0 key to terminate the search). </span>
<a name="l00771"></a>00771 <span class="comment"> *</span>
<a name="l00772"></a>00772 <span class="comment"> * The return value is the message string if found, or the &#39;none&#39; pointer</span>
<a name="l00773"></a>00773 <span class="comment"> * provided otherwise.</span>
<a name="l00774"></a>00774 <span class="comment"> */</span>
<a name="l00775"></a>00775 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00776"></a><a class="code" href="log_8h.html#af3030139a3e1800bb387110f6e2f0f65">00776</a> <a class="code" href="log_8c.html#a484bc45abf0c12f3a4c356d331a792fc">mes_lookup</a> (<span class="keyword">const</span> <span class="keyword">struct</span> <a class="code" href="structmessage.html">message</a> *meslist, <span class="keywordtype">int</span> max, <span class="keywordtype">int</span> index, <span class="keyword">const</span> <span class="keywordtype">char</span> *none)
<a name="l00777"></a>00777 {
<a name="l00778"></a>00778   <span class="keywordtype">int</span> pos = index - meslist[0].<a class="code" href="structmessage.html#afa781a4221d69515e57c78628e0ed8e3">key</a>;
<a name="l00779"></a>00779   
<a name="l00780"></a>00780   <span class="comment">/* first check for best case: index is in range and matches the key</span>
<a name="l00781"></a>00781 <span class="comment">   * value in that slot.</span>
<a name="l00782"></a>00782 <span class="comment">   * NB: key numbering might be offset from 0. E.g. protocol constants</span>
<a name="l00783"></a>00783 <span class="comment">   * often start at 1.</span>
<a name="l00784"></a>00784 <span class="comment">   */</span>
<a name="l00785"></a>00785   <span class="keywordflow">if</span> ((pos &gt;= 0) &amp;&amp; (pos &lt; max)
<a name="l00786"></a>00786       &amp;&amp; (meslist[pos].<a class="code" href="structkey.html">key</a> == index))
<a name="l00787"></a>00787     <span class="keywordflow">return</span> meslist[pos].<a class="code" href="structmessage.html#afd25323d5a42a5d73ebb8c85c5f7bd6f">str</a>;
<a name="l00788"></a>00788 
<a name="l00789"></a>00789   <span class="comment">/* fall back to linear search */</span>
<a name="l00790"></a>00790   {
<a name="l00791"></a>00791     <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00792"></a>00792 
<a name="l00793"></a>00793     <span class="keywordflow">for</span> (i = 0; i &lt; max; i++, meslist++)
<a name="l00794"></a>00794       {
<a name="l00795"></a>00795     <span class="keywordflow">if</span> (meslist-&gt;<a class="code" href="structmessage.html#afa781a4221d69515e57c78628e0ed8e3">key</a> == index)
<a name="l00796"></a>00796       {
<a name="l00797"></a>00797         <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a> = (meslist-&gt;<a class="code" href="structmessage.html#afd25323d5a42a5d73ebb8c85c5f7bd6f">str</a> ? meslist-&gt;<a class="code" href="structmessage.html#afd25323d5a42a5d73ebb8c85c5f7bd6f">str</a> : none);
<a name="l00798"></a>00798         
<a name="l00799"></a>00799         <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;message index %d [%s] found in position %d (max is %d)&quot;</span>,
<a name="l00800"></a>00800               index, str, i, max);
<a name="l00801"></a>00801         <span class="keywordflow">return</span> <a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>;
<a name="l00802"></a>00802       }
<a name="l00803"></a>00803       }
<a name="l00804"></a>00804   }
<a name="l00805"></a>00805   <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;message index %d not found (max is %d)&quot;</span>, index, max);
<a name="l00806"></a>00806   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (none);
<a name="l00807"></a>00807   <span class="keywordflow">return</span> none;
<a name="l00808"></a>00808 }
<a name="l00809"></a>00809 
<a name="l00810"></a>00810 <span class="comment">/* Wrapper around strerror to handle case where it returns NULL. */</span>
<a name="l00811"></a>00811 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00812"></a><a class="code" href="log_8h.html#a5292a9aa20fcddbb3998241685e18279">00812</a> <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(<span class="keywordtype">int</span> errnum)
<a name="l00813"></a>00813 {
<a name="l00814"></a>00814   <span class="keyword">const</span> <span class="keywordtype">char</span> *s = strerror(errnum);
<a name="l00815"></a>00815   <span class="keywordflow">return</span> (s != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) ? s : <span class="stringliteral">&quot;Unknown error&quot;</span>;
<a name="l00816"></a>00816 }
<a name="l00817"></a>00817 
<a name="l00818"></a><a class="code" href="structzebra__desc__table.html">00818</a> <span class="keyword">struct </span><a class="code" href="structzebra__desc__table.html">zebra_desc_table</a>
<a name="l00819"></a>00819 {
<a name="l00820"></a><a class="code" href="structzebra__desc__table.html#a5b1e839bcd20e760ff4c08cad8bb7862">00820</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structzebra__desc__table.html#a5b1e839bcd20e760ff4c08cad8bb7862">type</a>;
<a name="l00821"></a><a class="code" href="structzebra__desc__table.html#a602efce5e9657bdb957ca79c2bfced25">00821</a>   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structzebra__desc__table.html#a602efce5e9657bdb957ca79c2bfced25">string</a>;
<a name="l00822"></a><a class="code" href="structzebra__desc__table.html#a0d45f07c57427d4c58cfead49d757e5e">00822</a>   <span class="keywordtype">char</span> <a class="code" href="structzebra__desc__table.html#a0d45f07c57427d4c58cfead49d757e5e">chr</a>;
<a name="l00823"></a>00823 };
<a name="l00824"></a>00824 
<a name="l00825"></a>00825 <span class="preprocessor">#define DESC_ENTRY(T,S,C) [(T)] = { (T), (S), (C) }</span>
<a name="l00826"></a><a class="code" href="log_8c.html#a1c81816d8c5a9e2c1916e0e25581f833">00826</a> <span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structzebra__desc__table.html">zebra_desc_table</a> <a class="code" href="log_8c.html#a1c81816d8c5a9e2c1916e0e25581f833">route_types</a>[] = {
<a name="l00827"></a>00827   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a650967617adbd419d14e5e05d9548108">ZEBRA_ROUTE_SYSTEM</a>,    <span class="stringliteral">&quot;system&quot;</span>,   <span class="charliteral">&#39;X&#39;</span> ),
<a name="l00828"></a>00828   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>,    <span class="stringliteral">&quot;kernel&quot;</span>,   <span class="charliteral">&#39;K&#39;</span> ),
<a name="l00829"></a>00829   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>,   <span class="stringliteral">&quot;connected&quot;</span>,    <span class="charliteral">&#39;C&#39;</span> ),
<a name="l00830"></a>00830   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a93a491d961eb8bf6f61efd8f68579a0b">ZEBRA_ROUTE_STATIC</a>,    <span class="stringliteral">&quot;static&quot;</span>,   <span class="charliteral">&#39;S&#39;</span> ),
<a name="l00831"></a>00831   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>,   <span class="stringliteral">&quot;rip&quot;</span>,      <span class="charliteral">&#39;R&#39;</span> ),
<a name="l00832"></a>00832   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#af2bdc951784ebaac4f1cec75e7b6313b">ZEBRA_ROUTE_RIPNG</a>, <span class="stringliteral">&quot;ripng&quot;</span>,    <span class="charliteral">&#39;R&#39;</span> ),
<a name="l00833"></a>00833   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>,  <span class="stringliteral">&quot;ospf&quot;</span>,     <span class="charliteral">&#39;O&#39;</span> ),
<a name="l00834"></a>00834   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#ae05c36542e3fb1c5c7fd440ac322331f">ZEBRA_ROUTE_OSPF6</a>, <span class="stringliteral">&quot;ospf6&quot;</span>,    <span class="charliteral">&#39;O&#39;</span> ),
<a name="l00835"></a>00835   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a87ef34bfb648351225e8dd877f073401">ZEBRA_ROUTE_ISIS</a>,  <span class="stringliteral">&quot;isis&quot;</span>,     <span class="charliteral">&#39;I&#39;</span> ),
<a name="l00836"></a>00836   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>,   <span class="stringliteral">&quot;bgp&quot;</span>,      <span class="charliteral">&#39;B&#39;</span> ),
<a name="l00837"></a>00837   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a511d4b8dcbf5a87a19c695e382165a4d">ZEBRA_ROUTE_HSLS</a>,  <span class="stringliteral">&quot;hsls&quot;</span>,     <span class="charliteral">&#39;H&#39;</span> ),
<a name="l00838"></a>00838 };
<a name="l00839"></a>00839 <span class="preprocessor">#undef DESC_ENTRY</span>
<a name="l00840"></a>00840 <span class="preprocessor"></span>
<a name="l00841"></a><a class="code" href="log_8c.html#aced7b84223ab1ebd657f0864aba6b371">00841</a> <span class="preprocessor">#define DESC_ENTRY(T) [(T)] = { (T), (#T), &#39;\0&#39; }</span>
<a name="l00842"></a><a class="code" href="log_8c.html#aadfba28e7b2451d6a86e173e738bdc51">00842</a> <span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structzebra__desc__table.html">zebra_desc_table</a> <a class="code" href="log_8c.html#aadfba28e7b2451d6a86e173e738bdc51">command_types</a>[] = {
<a name="l00843"></a>00843   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#af23bf4b28d6d856ed43995d31c253119">ZEBRA_INTERFACE_ADD</a>),
<a name="l00844"></a>00844   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#aa7ee6fa3df5b16d052e27ff18ae4ac39">ZEBRA_INTERFACE_DELETE</a>),
<a name="l00845"></a>00845   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#aea532f1b7734390e98af1be9c18b0964">ZEBRA_INTERFACE_ADDRESS_ADD</a>),
<a name="l00846"></a>00846   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a8965100a302cd587b7afa842473c8be2">ZEBRA_INTERFACE_ADDRESS_DELETE</a>),
<a name="l00847"></a>00847   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a4eeb48b035d0448e843e5a8370439081">ZEBRA_INTERFACE_UP</a>),
<a name="l00848"></a>00848   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a5c5043b21f4e172630cde3f025734a66">ZEBRA_INTERFACE_DOWN</a>),
<a name="l00849"></a>00849   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#aa2913a6b1e5fbc598479aa282343a5e1">ZEBRA_IPV4_ROUTE_ADD</a>),
<a name="l00850"></a>00850   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a0c9efcc3f61219a6697f5da18d8de992">ZEBRA_IPV4_ROUTE_DELETE</a>),
<a name="l00851"></a>00851   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a2d0f19502bde040501c7ad64bc955739">ZEBRA_IPV6_ROUTE_ADD</a>),
<a name="l00852"></a>00852   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#ad98414d027f7107e91cb040a329ad48a">ZEBRA_IPV6_ROUTE_DELETE</a>),
<a name="l00853"></a>00853   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#aaf00306d6060095dd258463ee7cb0cc1">ZEBRA_REDISTRIBUTE_ADD</a>),
<a name="l00854"></a>00854   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a1dce1941aae01a8a16dace7591398a0d">ZEBRA_REDISTRIBUTE_DELETE</a>),
<a name="l00855"></a>00855   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a6a54e4c8e5f637b9edb208de808a2ac6">ZEBRA_REDISTRIBUTE_DEFAULT_ADD</a>),
<a name="l00856"></a>00856   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a2fd9f5c25e3e2e28a03047807f20e246">ZEBRA_REDISTRIBUTE_DEFAULT_DELETE</a>),
<a name="l00857"></a>00857   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a7ed7741500eb4f178369418725aef502">ZEBRA_IPV4_NEXTHOP_LOOKUP</a>),
<a name="l00858"></a>00858   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#aa08e113e5a8c6e41bf4e89ee1100221d">ZEBRA_IPV6_NEXTHOP_LOOKUP</a>),
<a name="l00859"></a>00859   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#ae2f9ecf7e0fa5362e68e4853506695bf">ZEBRA_IPV4_IMPORT_LOOKUP</a>),
<a name="l00860"></a>00860   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a5e826697d2fbd73c914fafc2e1297c4b">ZEBRA_IPV6_IMPORT_LOOKUP</a>),
<a name="l00861"></a>00861   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#ac6f975e58a38eac71f015ffc597b3f4a">ZEBRA_INTERFACE_RENAME</a>),
<a name="l00862"></a>00862   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a7fe5b4bfc1b5074695d98c043a521a16">ZEBRA_ROUTER_ID_ADD</a>),
<a name="l00863"></a>00863   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#a977c768bd5d6565e7d620fe16e7d3239">ZEBRA_ROUTER_ID_DELETE</a>),
<a name="l00864"></a>00864   <a class="code" href="log_8c.html#aa355f169a6a781ae92eef3ab19c8fd65">DESC_ENTRY</a>    (<a class="code" href="zebra_8h.html#ab336e7f6f414c6b3fa62531d2912af48">ZEBRA_ROUTER_ID_UPDATE</a>),
<a name="l00865"></a>00865 };
<a name="l00866"></a>00866 <span class="preprocessor">#undef DESC_ENTRY</span>
<a name="l00867"></a>00867 <span class="preprocessor"></span>
<a name="l00868"></a><a class="code" href="log_8c.html#a788b2612999346d713a3fc7b8b2a3038">00868</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structzebra__desc__table.html">zebra_desc_table</a> <a class="code" href="log_8c.html#a788b2612999346d713a3fc7b8b2a3038">unknown</a> = { 0, <span class="stringliteral">&quot;unknown&quot;</span>, <span class="charliteral">&#39;?&#39;</span> };
<a name="l00869"></a>00869 
<a name="l00870"></a>00870 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structzebra__desc__table.html">zebra_desc_table</a> *
<a name="l00871"></a><a class="code" href="log_8c.html#a1b9acefae425e0f493211b22c66c4dd2">00871</a> <a class="code" href="log_8c.html#a1b9acefae425e0f493211b22c66c4dd2">zroute_lookup</a>(u_int zroute)
<a name="l00872"></a>00872 {
<a name="l00873"></a>00873   u_int <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00874"></a>00874 
<a name="l00875"></a>00875   <span class="keywordflow">if</span> (zroute &gt;= <span class="keyword">sizeof</span>(route_types)/<span class="keyword">sizeof</span>(route_types[0]))
<a name="l00876"></a>00876     {
<a name="l00877"></a>00877       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;unknown zebra route type: %u&quot;</span>, zroute);
<a name="l00878"></a>00878       <span class="keywordflow">return</span> &amp;<a class="code" href="log_8c.html#a788b2612999346d713a3fc7b8b2a3038">unknown</a>;
<a name="l00879"></a>00879     }
<a name="l00880"></a>00880   <span class="keywordflow">if</span> (zroute == route_types[zroute].<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l00881"></a>00881     <span class="keywordflow">return</span> &amp;route_types[zroute];
<a name="l00882"></a>00882   <span class="keywordflow">for</span> (i = 0; i &lt; <span class="keyword">sizeof</span>(<a class="code" href="log_8c.html#a1c81816d8c5a9e2c1916e0e25581f833">route_types</a>)/<span class="keyword">sizeof</span>(route_types[0]); i++)
<a name="l00883"></a>00883     {
<a name="l00884"></a>00884       <span class="keywordflow">if</span> (zroute == route_types[i].type)
<a name="l00885"></a>00885         {
<a name="l00886"></a>00886       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;internal error: route type table out of order &quot;</span>
<a name="l00887"></a>00887             <span class="stringliteral">&quot;while searching for %u, please notify developers&quot;</span>, zroute);
<a name="l00888"></a>00888       <span class="keywordflow">return</span> &amp;route_types[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>];
<a name="l00889"></a>00889         }
<a name="l00890"></a>00890     }
<a name="l00891"></a>00891   <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;internal error: cannot find route type %u in table!&quot;</span>, zroute);
<a name="l00892"></a>00892   <span class="keywordflow">return</span> &amp;<a class="code" href="log_8c.html#a788b2612999346d713a3fc7b8b2a3038">unknown</a>;
<a name="l00893"></a>00893 }
<a name="l00894"></a>00894 
<a name="l00895"></a>00895 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00896"></a><a class="code" href="log_8c.html#ae87aa85b5b05b120d376956ce5d13444">00896</a> <a class="code" href="log_8c.html#ae87aa85b5b05b120d376956ce5d13444">zebra_route_string</a>(u_int zroute)
<a name="l00897"></a>00897 {
<a name="l00898"></a>00898   <span class="keywordflow">return</span> <a class="code" href="log_8c.html#a1b9acefae425e0f493211b22c66c4dd2">zroute_lookup</a>(zroute)-&gt;<a class="code" href="structzebra__desc__table.html#a602efce5e9657bdb957ca79c2bfced25">string</a>;
<a name="l00899"></a>00899 }
<a name="l00900"></a>00900 
<a name="l00901"></a>00901 <span class="keywordtype">char</span>
<a name="l00902"></a><a class="code" href="log_8c.html#a615f2a96489398a58c693eb46d3aa184">00902</a> <a class="code" href="log_8c.html#a615f2a96489398a58c693eb46d3aa184">zebra_route_char</a>(u_int zroute)
<a name="l00903"></a>00903 {
<a name="l00904"></a>00904   <span class="keywordflow">return</span> <a class="code" href="log_8c.html#a1b9acefae425e0f493211b22c66c4dd2">zroute_lookup</a>(zroute)-&gt;<a class="code" href="structzebra__desc__table.html#a0d45f07c57427d4c58cfead49d757e5e">chr</a>;
<a name="l00905"></a>00905 }
<a name="l00906"></a>00906 
<a name="l00907"></a>00907 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00908"></a><a class="code" href="zebra_8h.html#aefa57637f4459f32822cd5eac929f039">00908</a> <a class="code" href="log_8c.html#aefa57637f4459f32822cd5eac929f039">zserv_command_string</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> command)
<a name="l00909"></a>00909 {
<a name="l00910"></a>00910   <span class="keywordflow">if</span> (command &gt;= <span class="keyword">sizeof</span>(command_types)/<span class="keyword">sizeof</span>(command_types[0]))
<a name="l00911"></a>00911     {
<a name="l00912"></a>00912       <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;unknown zserv command type: %u&quot;</span>, command);
<a name="l00913"></a>00913       <span class="keywordflow">return</span> unknown.<a class="code" href="structzebra__desc__table.html#a602efce5e9657bdb957ca79c2bfced25">string</a>;
<a name="l00914"></a>00914     }
<a name="l00915"></a>00915   <span class="keywordflow">return</span> command_types[command].<a class="code" href="structzebra__desc__table.html#a602efce5e9657bdb957ca79c2bfced25">string</a>;
<a name="l00916"></a>00916 }
<a name="l00917"></a>00917 
<a name="l00918"></a><a class="code" href="log_8c.html#ae656eed357dbab332c9579685e8be446">00918</a> <span class="preprocessor">#define RTSIZE  (sizeof(route_types)/sizeof(route_types[0]))</span>
<a name="l00919"></a>00919 <span class="preprocessor"></span>
<a name="l00920"></a>00920 <span class="keywordtype">int</span>
<a name="l00921"></a><a class="code" href="zebra_8h.html#a7353ebc994f47abdc4245bb4f6e46fea">00921</a> <a class="code" href="log_8c.html#a7353ebc994f47abdc4245bb4f6e46fea">proto_name2num</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s)
<a name="l00922"></a>00922 {
<a name="l00923"></a>00923    <span class="keywordtype">unsigned</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00924"></a>00924 
<a name="l00925"></a>00925    <span class="keywordflow">for</span> (i=0; i&lt;<a class="code" href="log_8c.html#ae656eed357dbab332c9579685e8be446">RTSIZE</a>; ++<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>)
<a name="l00926"></a>00926      <span class="keywordflow">if</span> (strcasecmp(s, route_types[i].<span class="keywordtype">string</span>) == 0)
<a name="l00927"></a>00927        <span class="keywordflow">return</span> route_types[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structzebra__desc__table.html#a5b1e839bcd20e760ff4c08cad8bb7862">type</a>;
<a name="l00928"></a>00928    <span class="keywordflow">return</span> -1;
<a name="l00929"></a>00929 }
<a name="l00930"></a>00930 <span class="preprocessor">#undef RTSIZE</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="log_8c.html">log.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
