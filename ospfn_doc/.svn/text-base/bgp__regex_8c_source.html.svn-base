<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_regex.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__regex_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">bgpd/bgp_regex.c</div>  </div>
</div>
<div class="contents">
<a href="bgp__regex_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* AS regular expression routine</span>
<a name="l00002"></a>00002 <span class="comment">   Copyright (C) 1999 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00007"></a>00007 <span class="comment">under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment">Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment">later version.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00018"></a>00018 <span class="comment">Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment">02111-1307, USA.  */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="bgpd_8h.html">bgpd.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="bgp__aspath_8h.html">bgp_aspath.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="bgp__regex_8h.html">bgp_regex.h</a>&quot;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">/* Character `_&#39; has special mean.  It represents [,{}() ] and the</span>
<a name="l00032"></a>00032 <span class="comment">   beginning of the line(^) and the end of the line ($).  </span>
<a name="l00033"></a>00033 <span class="comment"></span>
<a name="l00034"></a>00034 <span class="comment">   (^|[,{}() ]|$) */</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <a class="code" href="structre__pattern__buffer.html">regex_t</a> *
<a name="l00037"></a><a class="code" href="bgp__regex_8h.html#a60a68113b61ff9f1bb9e4cecdaa17667">00037</a> <a class="code" href="bgp__regex_8c.html#a316b90543d312729a458a7ae1cec7e42">bgp_regcomp</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *regstr)
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039   <span class="comment">/* Convert _ character to generic regular expression. */</span>
<a name="l00040"></a>00040   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>;
<a name="l00041"></a>00041   <span class="keywordtype">int</span> len;
<a name="l00042"></a>00042   <span class="keywordtype">int</span> magic = 0;
<a name="l00043"></a>00043   <span class="keywordtype">char</span> *magic_str;
<a name="l00044"></a>00044   <span class="keywordtype">char</span> magic_regexp[] = <span class="stringliteral">&quot;(^|[,{}() ]|$)&quot;</span>;
<a name="l00045"></a>00045   <span class="keywordtype">int</span> ret;
<a name="l00046"></a>00046   <a class="code" href="structre__pattern__buffer.html">regex_t</a> *regex;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048   len = strlen (regstr);
<a name="l00049"></a>00049   <span class="keywordflow">for</span> (i = 0; i &lt; len; i++)
<a name="l00050"></a>00050     <span class="keywordflow">if</span> (regstr[i] == <span class="charliteral">&#39;_&#39;</span>)
<a name="l00051"></a>00051       magic++;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053   magic_str = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, len + (14 * magic) + 1);
<a name="l00054"></a>00054   
<a name="l00055"></a>00055   <span class="keywordflow">for</span> (i = 0, j = 0; i &lt; len; i++)
<a name="l00056"></a>00056     {
<a name="l00057"></a>00057       <span class="keywordflow">if</span> (regstr[i] == <span class="charliteral">&#39;_&#39;</span>)
<a name="l00058"></a>00058     {
<a name="l00059"></a>00059       <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (magic_str + j, magic_regexp, strlen (magic_regexp));
<a name="l00060"></a>00060       j += strlen (magic_regexp);
<a name="l00061"></a>00061     }
<a name="l00062"></a>00062       <span class="keywordflow">else</span>
<a name="l00063"></a>00063     magic_str[j++] = regstr[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>];
<a name="l00064"></a>00064     }
<a name="l00065"></a>00065   magic_str[<a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a>] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00066"></a>00066 
<a name="l00067"></a>00067   regex = <a class="code" href="memory_8h.html#a6491adf46c1d769b529a8f2f7d75f2fe">XMALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9a458eb647f6b50d2df90dc6b5c3117b">MTYPE_BGP_REGEXP</a>, <span class="keyword">sizeof</span> (<a class="code" href="structre__pattern__buffer.html">regex_t</a>));
<a name="l00068"></a>00068 
<a name="l00069"></a>00069   ret = <a class="code" href="regex_8c.html#a38bbfba560a12468196f72aa88486406">regcomp</a> (regex, magic_str, <a class="code" href="regex-gnu_8h.html#a5fc31e6da9b77e09ea62b4544ac4767f">REG_EXTENDED</a>|<a class="code" href="regex-gnu_8h.html#abb835c7fe6f1673fc0efeff0064510ab">REG_NOSUB</a>);
<a name="l00070"></a>00070 
<a name="l00071"></a>00071   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, magic_str);
<a name="l00072"></a>00072 
<a name="l00073"></a>00073   <span class="keywordflow">if</span> (ret != 0)
<a name="l00074"></a>00074     {
<a name="l00075"></a>00075       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9a458eb647f6b50d2df90dc6b5c3117b">MTYPE_BGP_REGEXP</a>, regex);
<a name="l00076"></a>00076       <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00077"></a>00077     }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079   <span class="keywordflow">return</span> regex;
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="keywordtype">int</span>
<a name="l00083"></a><a class="code" href="bgp__regex_8h.html#a3f1a23affd7b4f99ad3f000b069801dc">00083</a> <a class="code" href="bgp__regex_8c.html#a3f1a23affd7b4f99ad3f000b069801dc">bgp_regexec</a> (<a class="code" href="structre__pattern__buffer.html">regex_t</a> *regex, <span class="keyword">struct</span> <a class="code" href="structaspath.html">aspath</a> *<a class="code" href="structaspath.html">aspath</a>)
<a name="l00084"></a>00084 {
<a name="l00085"></a>00085   <span class="keywordflow">return</span> <a class="code" href="regex_8c.html#a0298f60fae70832d70e8ec5d032472a8">regexec</a> (regex, aspath-&gt;<a class="code" href="structaspath.html#a3e9ddee46af67cdf22d10cfead37bdc5">str</a>, 0, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
<a name="l00086"></a>00086 }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="keywordtype">void</span>
<a name="l00089"></a><a class="code" href="bgp__regex_8h.html#a9a7260053c61ff8c6f58e5822d136b88">00089</a> <a class="code" href="bgp__regex_8c.html#a9a7260053c61ff8c6f58e5822d136b88">bgp_regex_free</a> (<a class="code" href="structre__pattern__buffer.html">regex_t</a> *regex)
<a name="l00090"></a>00090 {
<a name="l00091"></a>00091   <a class="code" href="regex_8c.html#ad94d0de532eaa4fd959b8adde4d64898">regfree</a> (regex);
<a name="l00092"></a>00092   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9a458eb647f6b50d2df90dc6b5c3117b">MTYPE_BGP_REGEXP</a>, regex);
<a name="l00093"></a>00093 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__regex_8c.html">bgp_regex.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:02 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
