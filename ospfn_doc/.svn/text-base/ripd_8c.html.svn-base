<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ripd/ripd.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ripd_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">ripd/ripd.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="if_8h_source.html">if.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="filter_8h_source.html">filter.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockunion_8h_source.html">sockunion.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="sockopt_8h_source.html">sockopt.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="routemap_8h_source.html">routemap.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="if__rmap_8h_source.html">if_rmap.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="plist_8h_source.html">plist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="distribute_8h_source.html">distribute.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="md5_8h_source.html">md5.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="keychain_8h_source.html">keychain.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="privs_8h_source.html">privs.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ripd_8h_source.html">ripd/ripd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="rip__debug_8h_source.html">ripd/rip_debug.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for ripd.c:</div>
<div class="dyncontent">
<div class="center"><img src="ripd_8c__incl.png" border="0" usemap="#ripd_2ripd_8c" alt=""/></div>
<map name="ripd_2ripd_8c" id="ripd_2ripd_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1419,80,1485,107"/><area shape="rect" id="node61" href="if_8h.html" title="if.h" alt="" coords="3289,155,3329,181"/><area shape="rect" id="node63" href="command_8h.html" title="command.h" alt="" coords="2769,80,2860,107"/><area shape="rect" id="node65" href="prefix_8h.html" title="prefix.h" alt="" coords="3473,155,3540,181"/><area shape="rect" id="node67" href="sockunion_8h.html" title="sockunion.h" alt="" coords="3385,229,3479,256"/><area shape="rect" id="node69" href="table_8h.html" title="table.h" alt="" coords="3077,80,3141,107"/><area shape="rect" id="node71" href="thread_8h.html" title="thread.h" alt="" coords="3165,80,3237,107"/><area shape="rect" id="node73" href="memory_8h.html" title="memory.h" alt="" coords="3261,80,3344,107"/><area shape="rect" id="node75" href="log_8h.html" title="log.h" alt="" coords="2693,80,2744,107"/><area shape="rect" id="node78" href="stream_8h.html" title="stream.h" alt="" coords="3469,80,3544,107"/><area shape="rect" id="node81" href="filter_8h.html" title="filter.h" alt="" coords="2993,80,3052,107"/><area shape="rect" id="node85" href="sockopt_8h.html" title="sockopt.h" alt="" coords="2885,80,2968,107"/><area shape="rect" id="node88" href="routemap_8h.html" title="routemap.h" alt="" coords="3619,80,3709,107"/><area shape="rect" id="node90" href="if__rmap_8h.html" title="if_rmap.h" alt="" coords="3733,80,3811,107"/><area shape="rect" id="node92" href="plist_8h.html" title="plist.h" alt="" coords="3835,80,3893,107"/><area shape="rect" id="node94" href="distribute_8h.html" title="distribute.h" alt="" coords="3917,80,4008,107"/><area shape="rect" id="node96" href="md5_8h.html" title="md5.h" alt="" coords="4032,80,4091,107"/><area shape="rect" id="node98" href="keychain_8h.html" title="keychain.h" alt="" coords="4115,80,4200,107"/><area shape="rect" id="node100" href="privs_8h.html" title="privs.h" alt="" coords="4225,80,4287,107"/><area shape="rect" id="node102" href="ripd_8h.html" title="ripd/ripd.h" alt="" coords="4312,80,4395,107"/><area shape="rect" id="node104" href="rip__debug_8h.html" title="ripd/rip_debug.h" alt="" coords="4419,80,4539,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="2117,155,2195,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="2219,155,2268,181"/></map>
</div>
</div>
<p><a href="ripd_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#abc1fc2f690463e7cf27850b0365c49b4">RIP_UDP_RCV_BUF</a>&#160;&#160;&#160;41600</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ac34ab37f5f69d07660e27a26e30ee861">ADDRESS_SIZE</a>&#160;&#160;&#160;20</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a12ff2e664dd62569e8d230755d29f23b">JITTER_BOUND</a>&#160;&#160;&#160;4</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a4a41ebcbcfbdc4cf71ac89967ae81aa8">TIME_BUF</a>&#160;&#160;&#160;25</td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a500d4c9125340f27abf4fa013f88dab6">rip_all_route</a>, 
<a class="el" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a875a9ec24e36cc0e1b6b6628dcfe5cdb">rip_changed_route</a>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a5b7ed8aa1514ebd1a72cfcd159566e12">rip_event</a> (enum <a class="el" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a>, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (struct <a class="el" href="structconnected.html">connected</a> *, struct sockaddr_in *, int, u_char)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a44a6353160beda1a7b670c61a67dd818">rip_triggered_update</a> (struct <a class="el" href="structthread.html">thread</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#adf7591fcda9ffc86ca850c74c268495d">rip_update_jitter</a> (unsigned long)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a1a4b51c3d8f41cf229c1e3475a188d55">sockopt_broadcast</a> (int sock)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#acfdc2cf7ec0359b1fabb24e48f5f0dee">rip_route_rte</a> (struct <a class="el" href="structrip__info.html">rip_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structrip__info.html">rip_info</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a3c9e3f9e1fee01f622533b045fa090aa">rip_info_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#adc7ff2705d42a1ee587b92bbfc256f86">rip_info_free</a> (struct <a class="el" href="structrip__info.html">rip_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">rip_garbage_collect</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ae748ef0c36c9479eb5ae09eb08fb3ee3">rip_timeout</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#aa150b740aca867d0d693c0caab1d6a1c">rip_timeout_update</a> (struct <a class="el" href="structrip__info.html">rip_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a1b2cdbd40854edbc3b13aae5ab587431">rip_incoming_filter</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structrip__interface.html">rip_interface</a> *ri)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#aefc4f415c4c80ce04efebb7798274245">rip_outgoing_filter</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structrip__interface.html">rip_interface</a> *ri)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#aa10550a1906f12d805d9c3ee5599ad4a">rip_nexthop_check</a> (struct in_addr *addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a0c793e931cf8a5d290cd9cd6b7105c2f">rip_rte_process</a> (struct <a class="el" href="structrte.html">rte</a> *<a class="el" href="structrte.html">rte</a>, struct sockaddr_in *from, struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a04c8759c650299a52379cfe00f257283">rip_packet_dump</a> (struct <a class="el" href="structrip__packet.html">rip_packet</a> *packet, int size, const char *sndrcv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a7b77dd9cb3d1dec4bcfd49dd7f69cf2d">rip_destination_check</a> (struct in_addr addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a2c3068b4df03ffa8845f74323ddfabcd">rip_auth_simple_password</a> (struct <a class="el" href="structrte.html">rte</a> *<a class="el" href="structrte.html">rte</a>, struct sockaddr_in *from, struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a6f2010a631def9499b1db67a697568a2">rip_auth_md5</a> (struct <a class="el" href="structrip__packet.html">rip_packet</a> *packet, struct sockaddr_in *from, int <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>, struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a2747a4f7653e3afdccb61a7412fe4555">rip_auth_prepare_str_send</a> (struct <a class="el" href="structrip__interface.html">rip_interface</a> *ri, struct <a class="el" href="structkey.html">key</a> *<a class="el" href="structkey.html">key</a>, char *auth_str, int len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a08c4416f33070c82500b7e5e0f05ee37">rip_auth_simple_write</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, char *auth_str, int len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a7d84f0f0f8b5dfab5862fff951a13eca">rip_auth_md5_ah_write</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structrip__interface.html">rip_interface</a> *ri, struct <a class="el" href="structkey.html">key</a> *<a class="el" href="structkey.html">key</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a72538cf9bcdaa839156ff1390c6cc2a0">rip_auth_header_write</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structrip__interface.html">rip_interface</a> *ri, struct <a class="el" href="structkey.html">key</a> *<a class="el" href="structkey.html">key</a>, char *auth_str, int len)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a4a48a7de91fb41ecbdfe8be6861c214d">rip_auth_md5_set</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structrip__interface.html">rip_interface</a> *ri, size_t doff, char *auth_str, int authlen)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a736ea390d3ed633046eb5c320ac21f30">rip_response_process</a> (struct <a class="el" href="structrip__packet.html">rip_packet</a> *packet, int size, struct sockaddr_in *from, struct <a class="el" href="structconnected.html">connected</a> *ifc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a7d120833f5e80143c6dee4123ad86a4a">rip_create_socket</a> (struct sockaddr_in *from)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> (u_char *buf, int size, struct sockaddr_in *to, struct <a class="el" href="structconnected.html">connected</a> *ifc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ae2c5c932284eca5a2ee4ca2dfdf248ac">rip_redistribute_add</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int sub_type, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, unsigned int ifindex, struct in_addr *<a class="el" href="structnexthop.html">nexthop</a>, unsigned int <a class="el" href="structmetric.html">metric</a>, unsigned char <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a33825a788df0587a784f9eb7d1d667d7">rip_redistribute_delete</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int sub_type, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, unsigned int ifindex)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a41f9224825b265801d88ca8dad67b8d2">rip_request_process</a> (struct <a class="el" href="structrip__packet.html">rip_packet</a> *packet, int size, struct sockaddr_in *from, struct <a class="el" href="structconnected.html">connected</a> *ifc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ad6a63ee8163b47ae9167b2220497cd19">rip_read</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ab360fa2e0affcbafc75309301e75b184">rip_write_rte</a> (int <a class="el" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>, struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, u_char <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>, struct <a class="el" href="structrip__info.html">rip_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a185280c44514e664f553ed0b784c8497">rip_update_interface</a> (struct <a class="el" href="structconnected.html">connected</a> *ifc, u_char <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>, int route_type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ad2f37edffd39b917a4dfa17213c9c457">rip_update_process</a> (int route_type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a5d503898e18cfcf45b7d0cecdae2d016">rip_update</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#aeadbc9dd74594957aecb8b7a479ab1b0">rip_clear_changed_flag</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a41d92c61a77de7fa2b7bcd9e9602c7a5">rip_triggered_interval</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a31999532d8eff8b34771b8c0d40379f1">rip_redistribute_withdraw</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a52d6b3652aacbdb7241535cb647d92b1">rip_create</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a5f5073229c1fb623b39ad4ce7cb97a6b">rip_request_send</a> (struct sockaddr_in *to, struct <a class="el" href="structinterface.html">interface</a> *ifp, u_char <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>, struct <a class="el" href="structconnected.html">connected</a> *<a class="el" href="structconnected.html">connected</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a3d9ad6abdd30a84aae70daba7e9ca130">DEFUN</a> (router_rip, router_rip_cmd,&quot;router <a class="el" href="structrip.html">rip</a>&quot;,&quot;Enable a routing process\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing Information Protocol (RIP)\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ad07bfcb42dde95e3098a5e219cf2f4a5">DEFUN</a> (no_router_rip, no_router_rip_cmd,&quot;no router <a class="el" href="structrip.html">rip</a>&quot;, NO_STR&quot;Enable a routing process\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing Information Protocol (RIP)\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a3601e71493ccbeee5f9e299c17e59ed3">DEFUN</a> (rip_version, rip_version_cmd,&quot;version &lt;1-2&gt;&quot;,&quot;Set routing protocol <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;<a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a107a4d5f2821d129666cf6a39685842c">DEFUN</a> (no_rip_version, no_rip_version_cmd,&quot;no <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>&quot;, NO_STR&quot;Set routing protocol <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#aae8323fddb4015d3852f98f14103cb8e">ALIAS</a> (no_rip_version, no_rip_version_val_cmd,&quot;no <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a> &lt;1-2&gt;&quot;, NO_STR&quot;Set routing protocol <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;<a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ae6d9cb04482c3fbb221680de3098c560">DEFUN</a> (no_rip_route, no_rip_route_cmd,&quot;no route A.B.C.D/M&quot;, NO_STR&quot;RIP static route configuration\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP <a class="el" href="structprefix.html">prefix</a> &lt;<a class="el" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;<a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>&gt;\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ac5c9549737f3886f2b6e7ad9a6996545">DEFUN</a> (rip_default_metric, rip_default_metric_cmd,&quot;default-<a class="el" href="structmetric.html">metric</a> &lt;1-16&gt;&quot;,&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a51e19222dd065b26b6fccd0f2ce838bb">DEFUN</a> (no_rip_default_metric, no_rip_default_metric_cmd,&quot;no default-<a class="el" href="structmetric.html">metric</a>&quot;, NO_STR&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ab29d6918b253b0329d26fd371ba802d8">ALIAS</a> (no_rip_default_metric, no_rip_default_metric_val_cmd,&quot;no default-<a class="el" href="structmetric.html">metric</a> &lt;1-16&gt;&quot;, NO_STR&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a80303a6724c67cfdba124a41a531c4d5">DEFUN</a> (no_rip_timers, no_rip_timers_cmd,&quot;no timers basic&quot;, NO_STR&quot;Adjust routing timers\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Basic routing protocol update timers\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a6ecfb46537864e21489f5cfc49b10eaa">ALIAS</a> (no_rip_timers, no_rip_timers_val_cmd,&quot;no timers basic &lt;0-65535&gt; &lt;0-65535&gt; &lt;0-65535&gt;&quot;, NO_STR&quot;Adjust routing timers\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Basic routing protocol update timers\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing table update timer value <a class="el" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> second. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 30.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing information timeout timer. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 180.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Garbage collection timer. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 120.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct rip_distance *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ae05c338bbc5bfbb22f15ae977364a5d0">rip_distance_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a9878e9ea0f0f8e734ba56881a78428c4">rip_distance_free</a> (struct rip_distance *rdistance)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#adbe5ab87c0bf797432fdaaaa3e21971a">rip_distance_set</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, const char *distance_str, const char *ip_str, const char *access_list_str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a49705d140b8c1c239daae1696f024f5a">rip_distance_unset</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, const char *distance_str, const char *ip_str, const char *access_list_str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a3d2210c2851480c4f92c76242b6bdc7f">rip_distance_reset</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (struct <a class="el" href="structrip__info.html">rip_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ad2f5853e20eaeccbca634c08d365a2e4">rip_distance_show</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ab8fc60a5fe8df1664e6fc77898293876">DEFUN</a> (rip_distance, rip_distance_cmd,&quot;distance &lt;1-255&gt;&quot;,&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a3d62d8d2f283401d2889a64d597b7157">DEFUN</a> (no_rip_distance, no_rip_distance_cmd,&quot;no <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> &lt;1-255&gt;&quot;, NO_STR&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a1e07b5c2ee7ccb28e2884241fc6be128">DEFUN</a> (rip_distance_source, rip_distance_source_cmd,&quot;distance &lt;1-255&gt; A.B.C.D/M&quot;,&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP <a class="el" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a> <a class="el" href="structprefix.html">prefix</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a23849c29875a7294969fc718fc3f9fbf">DEFUN</a> (no_rip_distance_source, no_rip_distance_source_cmd,&quot;no <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> &lt;1-255&gt; A.B.C.D/M&quot;, NO_STR&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP <a class="el" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a> <a class="el" href="structprefix.html">prefix</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#af102677a0e5e62ccd8256acdda5554a7">DEFUN</a> (rip_distance_source_access_list, rip_distance_source_access_list_cmd,&quot;distance &lt;1-255&gt; A.B.C.D/M <a class="el" href="bgp__route_8c.html#a1b8d8f33ec8896a62ab53afa7351c08b">WORD</a>&quot;,&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP <a class="el" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a> <a class="el" href="structprefix.html">prefix</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Access <a class="el" href="structlist.html">list</a> <a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a07b00b6664dac5ec13492d8299483962">DEFUN</a> (no_rip_distance_source_access_list, no_rip_distance_source_access_list_cmd,&quot;no <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> &lt;1-255&gt; A.B.C.D/M <a class="el" href="bgp__route_8c.html#a1b8d8f33ec8896a62ab53afa7351c08b">WORD</a>&quot;, NO_STR&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP <a class="el" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a> <a class="el" href="structprefix.html">prefix</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Access <a class="el" href="structlist.html">list</a> <a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a2d9126dfba66148cf4b72413a9c3c212">rip_vty_out_uptime</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structrip__info.html">rip_info</a> *rinfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ae664ed09eb4aebee1134eb4debeabc5e">rip_route_type_print</a> (int sub_type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ae52d54aa19950fe4e7e6288a2de0b776">DEFUN</a> (show_ip_rip, show_ip_rip_cmd,&quot;show <a class="el" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> <a class="el" href="structrip.html">rip</a>&quot;, SHOW_STR IP_STR&quot;Show RIP routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a737868c3af96812582cb95f15afc9b4b">DEFUN</a> (show_ip_rip_status, show_ip_rip_status_cmd,&quot;show <a class="el" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> <a class="el" href="structrip.html">rip</a> status&quot;, SHOW_STR IP_STR&quot;Show RIP routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP routing protocol process parameters and statistics\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a507082a56f1939c701904e4709688ada">config_write_rip</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#acb6750f53b179839ea4b25a942cd31a8">rip_distribute_update</a> (struct <a class="el" href="structdistribute.html">distribute</a> *dist)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a30f91d4920313b8bb6d62c95181ac81c">rip_distribute_update_interface</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a05dbfcc9f968f38818a374368e662270">rip_distribute_update_all</a> (struct <a class="el" href="structprefix__list.html">prefix_list</a> *notused)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a445d1c0ccf9a7fd28f755afd8384277c">rip_distribute_update_all_wrapper</a> (struct <a class="el" href="structaccess__list.html">access_list</a> *notused)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a3f9f2dc004fbc0fbcf1d61d4f360b692">rip_clean</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#ad0719c9e4912274a9a600527cb16925b">rip_reset</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a777afc491270764251b432a9de68796e">rip_if_rmap_update</a> (struct <a class="el" href="structif__rmap.html">if_rmap</a> *<a class="el" href="structif__rmap.html">if_rmap</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a91450861eb65ddb6afafd368b0735d55">rip_if_rmap_update_interface</a> (struct <a class="el" href="structinterface.html">interface</a> *ifp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#af24c30463f9298770f0459db6f413f92">rip_routemap_update_redistribute</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a7fe8e4382651057a9e2f123e8255e053">rip_routemap_update</a> (const char *notused)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a84babac9b2f652908bd391f8702540cc">rip_init</a> (void)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structzebra__privs__t.html">zebra_privs_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a86af5d820616c880d6fd680778713f3b">ripd_privs</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structrip.html">rip</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a678c9045be94160362e65c0e26e9e38b">rip</a> = NULL</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#aab861d5ec0475cd48794fd36d785f3fd">rip_neighbor_table</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#aee2f7ac8649bf74e5d65e6bb98e495cc">rip_global_route_changes</a> = 0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#acee583ab67011897c4887052fdb3645d">rip_global_queries</a> = 0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structmessage.html">message</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#acbf78a319ce7a605ba4ab6c76b6ac0f1">rip_msg</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structcmd__node.html">cmd_node</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ripd_8c.html#a85bd7b4a319ea721a2f61bd50e4d6a86">rip_node</a></td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="ac34ab37f5f69d07660e27a26e30ee861"></a><!-- doxytag: member="ripd.c::ADDRESS_SIZE" ref="ac34ab37f5f69d07660e27a26e30ee861" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ADDRESS_SIZE&#160;&#160;&#160;20</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a12ff2e664dd62569e8d230755d29f23b"></a><!-- doxytag: member="ripd.c::JITTER_BOUND" ref="a12ff2e664dd62569e8d230755d29f23b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define JITTER_BOUND&#160;&#160;&#160;4</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="abc1fc2f690463e7cf27850b0365c49b4"></a><!-- doxytag: member="ripd.c::RIP_UDP_RCV_BUF" ref="abc1fc2f690463e7cf27850b0365c49b4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define RIP_UDP_RCV_BUF&#160;&#160;&#160;41600</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00048">48</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>

</div>
</div>
<a class="anchor" id="a4a41ebcbcfbdc4cf71ac89967ae81aa8"></a><!-- doxytag: member="ripd.c::TIME_BUF" ref="a4a41ebcbcfbdc4cf71ac89967ae81aa8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define TIME_BUF&#160;&#160;&#160;25</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="aeb8e1c282570d629a6b603a94a4650d6"></a><!-- doxytag: member="ripd.c::@68" ref="aeb8e1c282570d629a6b603a94a4650d6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="aeb8e1c282570d629a6b603a94a4650d6a500d4c9125340f27abf4fa013f88dab6"></a><!-- doxytag: member="rip_all_route" ref="aeb8e1c282570d629a6b603a94a4650d6a500d4c9125340f27abf4fa013f88dab6" args="" -->rip_all_route</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="aeb8e1c282570d629a6b603a94a4650d6a875a9ec24e36cc0e1b6b6628dcfe5cdb"></a><!-- doxytag: member="rip_changed_route" ref="aeb8e1c282570d629a6b603a94a4650d6a875a9ec24e36cc0e1b6b6628dcfe5cdb" args="" -->rip_changed_route</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00072">72</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a500d4c9125340f27abf4fa013f88dab6">rip_all_route</a>,
  <a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a875a9ec24e36cc0e1b6b6628dcfe5cdb">rip_changed_route</a>
};
</pre></div>
</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="aae8323fddb4015d3852f98f14103cb8e"></a><!-- doxytag: member="ripd.c::ALIAS" ref="aae8323fddb4015d3852f98f14103cb8e" args="(no_rip_version, no_rip_version_val_cmd,&quot;no version &lt;1&#45;2&gt;&quot;, NO_STR&quot;Set routing protocol version\n&quot;&quot;version\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ALIAS </td>
          <td>(</td>
          <td class="paramtype">no_rip_version&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_rip_version_val_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a> &lt;1-2&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Set routing protocol <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;<a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02900">2900</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;

  ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (argv[0], &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Malformed address%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* For router rip configuration. */</span>
  node = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="keywordflow">if</span> (node-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;There is already same static route.%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (node);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  node-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = (<span class="keywordtype">char</span> *)<span class="stringliteral">&quot;static&quot;</span>;

  <a class="code" href="ripd_8c.html#ae2c5c932284eca5a2ee4ca2dfdf248ac">rip_redistribute_add</a> (<a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>, <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0, 0);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab29d6918b253b0329d26fd371ba802d8"></a><!-- doxytag: member="ripd.c::ALIAS" ref="ab29d6918b253b0329d26fd371ba802d8" args="(no_rip_default_metric, no_rip_default_metric_val_cmd,&quot;no default&#45;metric &lt;1&#45;16&gt;&quot;, NO_STR&quot;Set a metric of redistribute routes\n&quot;&quot;Default metric\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ALIAS </td>
          <td>(</td>
          <td class="paramtype">no_rip_default_metric&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_rip_default_metric_val_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no default-<a class="el" href="structmetric.html">metric</a> &lt;1-16&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03022">3022</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> update;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> timeout;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> garbage;
  <span class="keywordtype">char</span> *endptr = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> RIP_TIMER_MAX = 2147483647;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> RIP_TIMER_MIN = 5;

  update = strtoul (argv[0], &amp;endptr, 10);
  <span class="keywordflow">if</span> (update &gt; RIP_TIMER_MAX || update &lt; RIP_TIMER_MIN || *endptr != <span class="charliteral">&#39;\0&#39;</span>)  
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;update timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
  
  timeout = strtoul (argv[1], &amp;endptr, 10);
  <span class="keywordflow">if</span> (timeout &gt; RIP_TIMER_MAX || timeout &lt; RIP_TIMER_MIN || *endptr != <span class="charliteral">&#39;\0&#39;</span>) 
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;timeout timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
  
  garbage = strtoul (argv[2], &amp;endptr, 10);
  <span class="keywordflow">if</span> (garbage &gt; RIP_TIMER_MAX || garbage &lt; RIP_TIMER_MIN || *endptr != <span class="charliteral">&#39;\0&#39;</span>) 
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;garbage timer value error%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  <span class="comment">/* Set each timer value. */</span>
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a> = update;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a> = timeout;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a> = garbage;

  <span class="comment">/* Reset update timer thread. */</span>
  <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a5ae803ea0ff858bd14d792ac5b99dd95">RIP_UPDATE_EVENT</a>, 0);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6ecfb46537864e21489f5cfc49b10eaa"></a><!-- doxytag: member="ripd.c::ALIAS" ref="a6ecfb46537864e21489f5cfc49b10eaa" args="(no_rip_timers, no_rip_timers_val_cmd,&quot;no timers basic &lt;0&#45;65535&gt; &lt;0&#45;65535&gt; &lt;0&#45;65535&gt;&quot;, NO_STR&quot;Adjust routing timers\n&quot;&quot;Basic routing protocol update timers\n&quot;&quot;Routing table update timer value in second. Default is 30.\n&quot;&quot;Routing information timeout timer. Default is 180.\n&quot;&quot;Garbage collection timer. Default is 120.\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ALIAS </td>
          <td>(</td>
          <td class="paramtype">no_rip_timers&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_rip_timers_val_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no timers basic &lt;0-65535&gt; &lt;0-65535&gt; &lt;0-65535&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Adjust routing timers\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Basic routing protocol update timers\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing table update timer value <a class="el" href="spgrid_8c.html#a89e1c555af4b92f6ee8d6f112f47ed12">in</a> second. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 30.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing information timeout timer. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 180.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Garbage collection timer. Default <a class="el" href="spgrid_8c.html#adc625344c6d478c0e64f57f990674952">is</a> 120.\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03095">3095</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Distance value for the IP source prefix. */</span>
  u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;

  <span class="comment">/* Name of the access-list to be matched. */</span>
  <span class="keywordtype">char</span> *<a class="code" href="structaccess__list.html">access_list</a>;
};
</pre></div>
</div>
</div>
<a class="anchor" id="a507082a56f1939c701904e4709688ada"></a><!-- doxytag: member="ripd.c::config_write_rip" ref="a507082a56f1939c701904e4709688ada" args="(struct vty *vty)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int config_write_rip </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03607">3607</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> write = 0;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span>rip_distance *rdistance;

  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>)
    {
      <span class="comment">/* Router RIP statement. */</span>
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;router rip%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      write++;
  
      <span class="comment">/* RIP version statement.  Default is RIP version 2. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a> != <a class="code" href="ripd_8h.html#aa01e7530767b1b4f617405047b74cf49">RI_RIP_VERSION_2</a>
      || <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> != <a class="code" href="ripd_8h.html#abdca8506f74f9756b337c4c0c4cd2c43">RI_RIP_VERSION_1_AND_2</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; version %d%s&quot;</span>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
 
      <span class="comment">/* RIP timer configuration. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a> != <a class="code" href="ripd_8h.html#a4415e31f329179a7a1970783b0ae4816">RIP_UPDATE_TIMER_DEFAULT</a> 
      || <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a> != <a class="code" href="ripd_8h.html#a14745370fa257b7afb671b0594538dad">RIP_TIMEOUT_TIMER_DEFAULT</a> 
      || <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a> != <a class="code" href="ripd_8h.html#acdff5e9dbc2860fe30cf6ecbc779eb63">RIP_GARBAGE_TIMER_DEFAULT</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; timers basic %lu %lu %lu%s&quot;</span>,
         <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a>,
         <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a>,
         <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Default information configuration. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a487c10d0c3da11f8881dc3002817f3c6">default_information</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a77d5572a3adb44ab2bbec4c5d4c308b5">default_information_route_map</a>)
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; default-information originate route-map %s%s&quot;</span>,
             <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a77d5572a3adb44ab2bbec4c5d4c308b5">default_information_route_map</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; default-information originate%s&quot;</span>,
             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }

      <span class="comment">/* Redistribute configuration. */</span>
      <a class="code" href="rip__zebra_8c.html#a070e5ae1fa0ffe98107bc343cc34479b">config_write_rip_redistribute</a> (vty, 1);

      <span class="comment">/* RIP offset-list configuration. */</span>
      <a class="code" href="rip__offset_8c.html#ae78df962e796af0d4edb0583e31b4cab">config_write_rip_offset_list</a> (vty);

      <span class="comment">/* RIP enabled network and interface configuration. */</span>
      <a class="code" href="rip__interface_8c.html#abf5300e9e13f397e283a6321ae015ab9">config_write_rip_network</a> (vty, 1);
            
      <span class="comment">/* RIP default metric configuration */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a> != <a class="code" href="ripd_8h.html#ae60bba91e95dea222d0722cb7ee4820f">RIP_DEFAULT_METRIC_DEFAULT</a>)
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; default-metric %d%s&quot;</span>,
         <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* Distribute configuration. */</span>
      write += <a class="code" href="distribute_8c.html#ae7ad634081da77c96e38824bff4a566a">config_write_distribute</a> (vty);

      <span class="comment">/* Interface routemap configuration */</span>
      write += <a class="code" href="if__rmap_8h.html#a3499179f8d183d49527984f876e8b6fc">config_write_if_rmap</a> (vty);

      <span class="comment">/* Distance configuration. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; distance %d%s&quot;</span>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* RIP source IP prefix distance configuration. */</span>
      <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip_distance_table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; distance %d %s/%d %s%s&quot;</span>, rdistance-&gt;distance,
           inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
           rdistance-&gt;access_list ? rdistance-&gt;access_list : <span class="stringliteral">&quot;&quot;</span>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

      <span class="comment">/* RIP static route configuration. */</span>
      <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; route %s/%d%s&quot;</span>, 
           inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
           rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

    }
  <span class="keywordflow">return</span> write;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3d9ad6abdd30a84aae70daba7e9ca130"></a><!-- doxytag: member="ripd.c::DEFUN" ref="a3d9ad6abdd30a84aae70daba7e9ca130" args="(router_rip, router_rip_cmd,&quot;router rip&quot;,&quot;Enable a routing process\n&quot;&quot;Routing Information Protocol (RIP)\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">router_rip&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">router_rip_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;router <a class="el" href="structrip.html">rip</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Enable a routing process\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing Information Protocol (RIP)\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02830">2830</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;

  <span class="comment">/* If rip is not enabled before. */</span>
  <span class="keywordflow">if</span> (! <a class="code" href="structrip.html">rip</a>)
    {
      ret = <a class="code" href="ripd_8c.html#a52d6b3652aacbdb7241535cb647d92b1">rip_create</a> ();
      <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Can&#39;t create RIP&quot;</span>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
    }
  <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9ac72abb8e0411b52a9d91d1a11aeaff">node</a> = <a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>;
  <a class="code" href="structvty.html">vty</a>-&gt;<a class="code" href="structvty.html#a9179508dca757a3b7c345c86769b5b9a">index</a> = <a class="code" href="ripd_8c.html#a678c9045be94160362e65c0e26e9e38b">rip</a>;

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad07bfcb42dde95e3098a5e219cf2f4a5"></a><!-- doxytag: member="ripd.c::DEFUN" ref="ad07bfcb42dde95e3098a5e219cf2f4a5" args="(no_router_rip, no_router_rip_cmd,&quot;no router rip&quot;, NO_STR&quot;Enable a routing process\n&quot;&quot;Routing Information Protocol (RIP)\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_router_rip&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_router_rip_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no router <a class="el" href="structrip.html">rip</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Enable a routing process\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Routing Information Protocol (RIP)\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02854">2854</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>)
    <a class="code" href="ripd_8c.html#a3f9f2dc004fbc0fbcf1d61d4f360b692">rip_clean</a> ();
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3601e71493ccbeee5f9e299c17e59ed3"></a><!-- doxytag: member="ripd.c::DEFUN" ref="a3601e71493ccbeee5f9e299c17e59ed3" args="(rip_version, rip_version_cmd,&quot;version &lt;1&#45;2&gt;&quot;,&quot;Set routing protocol version\n&quot;&quot;version\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">rip_version&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rip_version_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;version &lt;1-2&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Set routing protocol <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;<a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02866">2866</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;

  version = atoi (argv[0]);
  <span class="keywordflow">if</span> (version != <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a> &amp;&amp; version != <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;invalid rip version %d%s&quot;</span>, version,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a> = <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> = <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
} 
</pre></div>
</div>
</div>
<a class="anchor" id="a107a4d5f2821d129666cf6a39685842c"></a><!-- doxytag: member="ripd.c::DEFUN" ref="a107a4d5f2821d129666cf6a39685842c" args="(no_rip_version, no_rip_version_cmd,&quot;no version&quot;, NO_STR&quot;Set routing protocol version\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_rip_version&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_rip_version_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Set routing protocol <a class="el" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02887">2887</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Set RIP version to the default. */</span>
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a> = <a class="code" href="ripd_8h.html#aa01e7530767b1b4f617405047b74cf49">RI_RIP_VERSION_2</a>;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> = <a class="code" href="ripd_8h.html#abdca8506f74f9756b337c4c0c4cd2c43">RI_RIP_VERSION_1_AND_2</a>;

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
} 
</pre></div>
</div>
</div>
<a class="anchor" id="ae6d9cb04482c3fbb221680de3098c560"></a><!-- doxytag: member="ripd.c::DEFUN" ref="ae6d9cb04482c3fbb221680de3098c560" args="(no_rip_route, no_rip_route_cmd,&quot;no route A.B.C.D/M&quot;, NO_STR&quot;RIP static route configuration\n&quot;&quot;IP prefix &lt;network&gt;/&lt;length&gt;\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_rip_route&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_rip_route_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no route A.B.C.D/M&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;RIP static route configuration\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP <a class="el" href="structprefix.html">prefix</a> &lt;<a class="el" href="command_8c.html#acec200f241e2d8f6b38bc83616c4c468">network</a>&gt;/&lt;<a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>&gt;\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02942">2942</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;

  ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (argv[0], &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Malformed address%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* For router rip configuration. */</span>
  node = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (! node)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Can&#39;t find route %s.%s&quot;</span>, argv[0],
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  <a class="code" href="ripd_8c.html#a33825a788df0587a784f9eb7d1d667d7">rip_redistribute_delete</a> (<a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>, <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0);
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (node);

  node-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (node);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac5c9549737f3886f2b6e7ad9a6996545"></a><!-- doxytag: member="ripd.c::DEFUN" ref="ac5c9549737f3886f2b6e7ad9a6996545" args="(rip_default_metric, rip_default_metric_cmd,&quot;default&#45;metric &lt;1&#45;16&gt;&quot;,&quot;Set a metric of redistribute routes\n&quot;&quot;Default metric\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">rip_default_metric&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rip_default_metric_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;default-<a class="el" href="structmetric.html">metric</a> &lt;1-16&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02993">2993</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>)
    {
      <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a> = atoi (argv[0]);
      <span class="comment">/* rip_update_default_metric (); */</span>
    }
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a51e19222dd065b26b6fccd0f2ce838bb"></a><!-- doxytag: member="ripd.c::DEFUN" ref="a51e19222dd065b26b6fccd0f2ce838bb" args="(no_rip_default_metric, no_rip_default_metric_cmd,&quot;no default&#45;metric&quot;, NO_STR&quot;Set a metric of redistribute routes\n&quot;&quot;Default metric\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_rip_default_metric&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_rip_default_metric_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no default-<a class="el" href="structmetric.html">metric</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Set a <a class="el" href="structmetric.html">metric</a> of redistribute routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Default <a class="el" href="structmetric.html">metric</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03007">3007</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>)
    {
      <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a> = <a class="code" href="ripd_8h.html#ae60bba91e95dea222d0722cb7ee4820f">RIP_DEFAULT_METRIC_DEFAULT</a>;
      <span class="comment">/* rip_update_default_metric (); */</span>
    }
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a80303a6724c67cfdba124a41a531c4d5"></a><!-- doxytag: member="ripd.c::DEFUN" ref="a80303a6724c67cfdba124a41a531c4d5" args="(no_rip_timers, no_rip_timers_cmd,&quot;no timers basic&quot;, NO_STR&quot;Adjust routing timers\n&quot;&quot;Basic routing protocol update timers\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_rip_timers&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_rip_timers_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no timers basic&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Adjust routing timers\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Basic routing protocol update timers\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03077">3077</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Set each timer value to the default. */</span>
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a> = <a class="code" href="ripd_8h.html#a4415e31f329179a7a1970783b0ae4816">RIP_UPDATE_TIMER_DEFAULT</a>;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a> = <a class="code" href="ripd_8h.html#a14745370fa257b7afb671b0594538dad">RIP_TIMEOUT_TIMER_DEFAULT</a>;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a> = <a class="code" href="ripd_8h.html#acdff5e9dbc2860fe30cf6ecbc779eb63">RIP_GARBAGE_TIMER_DEFAULT</a>;

  <span class="comment">/* Reset update timer thread. */</span>
  <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a5ae803ea0ff858bd14d792ac5b99dd95">RIP_UPDATE_EVENT</a>, 0);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab8fc60a5fe8df1664e6fc77898293876"></a><!-- doxytag: member="ripd.c::DEFUN" ref="ab8fc60a5fe8df1664e6fc77898293876" args="(rip_distance, rip_distance_cmd,&quot;distance &lt;1&#45;255&gt;&quot;,&quot;Administrative distance\n&quot;&quot;Distance value\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">rip_distance&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rip_distance_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;distance &lt;1-255&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03305">3305</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a> = atoi (argv[0]);
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3d62d8d2f283401d2889a64d597b7157"></a><!-- doxytag: member="ripd.c::DEFUN" ref="a3d62d8d2f283401d2889a64d597b7157" args="(no_rip_distance, no_rip_distance_cmd,&quot;no distance &lt;1&#45;255&gt;&quot;, NO_STR&quot;Administrative distance\n&quot;&quot;Distance value\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_rip_distance&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_rip_distance_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> &lt;1-255&gt;&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03315">3315</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a> = 0;
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1e07b5c2ee7ccb28e2884241fc6be128"></a><!-- doxytag: member="ripd.c::DEFUN" ref="a1e07b5c2ee7ccb28e2884241fc6be128" args="(rip_distance_source, rip_distance_source_cmd,&quot;distance &lt;1&#45;255&gt; A.B.C.D/M&quot;,&quot;Administrative distance\n&quot;&quot;Distance value\n&quot;&quot;IP source prefix\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">rip_distance_source&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rip_distance_source_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;distance &lt;1-255&gt; A.B.C.D/M&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP <a class="el" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a> <a class="el" href="structprefix.html">prefix</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03326">3326</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ripd_8c.html#adbe5ab87c0bf797432fdaaaa3e21971a">rip_distance_set</a> (<a class="code" href="structvty.html">vty</a>, argv[0], argv[1], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a23849c29875a7294969fc718fc3f9fbf"></a><!-- doxytag: member="ripd.c::DEFUN" ref="a23849c29875a7294969fc718fc3f9fbf" args="(no_rip_distance_source, no_rip_distance_source_cmd,&quot;no distance &lt;1&#45;255&gt; A.B.C.D/M&quot;, NO_STR&quot;Administrative distance\n&quot;&quot;Distance value\n&quot;&quot;IP source prefix\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_rip_distance_source&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_rip_distance_source_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> &lt;1-255&gt; A.B.C.D/M&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP <a class="el" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a> <a class="el" href="structprefix.html">prefix</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03337">3337</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ripd_8c.html#a49705d140b8c1c239daae1696f024f5a">rip_distance_unset</a> (<a class="code" href="structvty.html">vty</a>, argv[0], argv[1], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af102677a0e5e62ccd8256acdda5554a7"></a><!-- doxytag: member="ripd.c::DEFUN" ref="af102677a0e5e62ccd8256acdda5554a7" args="(rip_distance_source_access_list, rip_distance_source_access_list_cmd,&quot;distance &lt;1&#45;255&gt; A.B.C.D/M WORD&quot;,&quot;Administrative distance\n&quot;&quot;Distance value\n&quot;&quot;IP source prefix\n&quot;&quot;Access list name\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">rip_distance_source_access_list&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rip_distance_source_access_list_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;distance &lt;1-255&gt; A.B.C.D/M <a class="el" href="bgp__route_8c.html#a1b8d8f33ec8896a62ab53afa7351c08b">WORD</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP <a class="el" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a> <a class="el" href="structprefix.html">prefix</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Access <a class="el" href="structlist.html">list</a> <a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03349">3349</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ripd_8c.html#adbe5ab87c0bf797432fdaaaa3e21971a">rip_distance_set</a> (<a class="code" href="structvty.html">vty</a>, argv[0], argv[1], argv[2]);
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a07b00b6664dac5ec13492d8299483962"></a><!-- doxytag: member="ripd.c::DEFUN" ref="a07b00b6664dac5ec13492d8299483962" args="(no_rip_distance_source_access_list, no_rip_distance_source_access_list_cmd,&quot;no distance &lt;1&#45;255&gt; A.B.C.D/M WORD&quot;, NO_STR&quot;Administrative distance\n&quot;&quot;Distance value\n&quot;&quot;IP source prefix\n&quot;&quot;Access list name\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">no_rip_distance_source_access_list&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">no_rip_distance_source_access_list_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;no <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> &lt;1-255&gt; A.B.C.D/M <a class="el" href="bgp__route_8c.html#a1b8d8f33ec8896a62ab53afa7351c08b">WORD</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">NO_STR&quot;Administrative <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Distance value\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP <a class="el" href="spgrid_8c.html#acef278b54e17ed729da5acd28bda6daf">source</a> <a class="el" href="structprefix.html">prefix</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;Access <a class="el" href="structlist.html">list</a> <a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03361">3361</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="ripd_8c.html#a49705d140b8c1c239daae1696f024f5a">rip_distance_unset</a> (<a class="code" href="structvty.html">vty</a>, argv[0], argv[1], argv[2]);
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae52d54aa19950fe4e7e6288a2de0b776"></a><!-- doxytag: member="ripd.c::DEFUN" ref="ae52d54aa19950fe4e7e6288a2de0b776" args="(show_ip_rip, show_ip_rip_cmd,&quot;show ip rip&quot;, SHOW_STR IP_STR&quot;Show RIP routes\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">show_ip_rip&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">show_ip_rip_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;show <a class="el" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> <a class="el" href="structrip.html">rip</a>&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SHOW_STR IP_STR&quot;Show RIP routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03420">3420</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *<a class="code" href="spgrid_8c.html#a928495140935d9d6ce0a100550473140">np</a>;
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;

  <span class="keywordflow">if</span> (! <a class="code" href="structrip.html">rip</a>)
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Codes: R - RIP, C - connected, S - Static, O - OSPF, B - BGP%s&quot;</span>
       <span class="stringliteral">&quot;Sub-codes:%s&quot;</span>
           <span class="stringliteral">&quot;      (n) - normal, (s) - static, (d) - default, (r) - redistribute,%s&quot;</span>
       <span class="stringliteral">&quot;      (i) - interface%s%s&quot;</span>
       <span class="stringliteral">&quot;     Network            Next Hop         Metric From            Tag Time%s&quot;</span>,
       <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>,  <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  
  <span class="keywordflow">for</span> (np = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); np; np = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (np))
    <span class="keywordflow">if</span> ((rinfo = np-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <span class="keywordtype">int</span> len;

    len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%c(%s) %s/%d&quot;</span>,
               <span class="comment">/* np-&gt;lock, For debugging. */</span>
               <a class="code" href="log_8c.html#a615f2a96489398a58c693eb46d3aa184">zebra_route_char</a>(rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>),
               <a class="code" href="ripd_8c.html#ae664ed09eb4aebee1134eb4debeabc5e">rip_route_type_print</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a>),
               inet_ntoa (np-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), np-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
    
    len = 24 - len;

    <span class="keywordflow">if</span> (len &gt; 0)
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);

        <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>.s_addr) 
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%-20s %2d &quot;</span>, inet_ntoa (rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>),
           rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
        <span class="keywordflow">else</span>
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;0.0.0.0              %2d &quot;</span>, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);

    <span class="comment">/* Route which exist in kernel routing table. */</span>
    <span class="keywordflow">if</span> ((rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>) &amp;&amp; 
        (rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>))
      {
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%-15s &quot;</span>, inet_ntoa (rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>));
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%3d &quot;</span>, rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a>);
        <a class="code" href="ripd_8c.html#a2d9126dfba66148cf4b72413a9c3c212">rip_vty_out_uptime</a> (<a class="code" href="structvty.html">vty</a>, rinfo);
      }
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> == <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
      {
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;self            &quot;</span>);
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%3d &quot;</span>, rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a>);
        <a class="code" href="ripd_8c.html#a2d9126dfba66148cf4b72413a9c3c212">rip_vty_out_uptime</a> (<a class="code" href="structvty.html">vty</a>, rinfo);
      }
    <span class="keywordflow">else</span>
      {
        <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#a6c396a30341482a9f1d3e242293ec516">external_metric</a>)
          {
            len = <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;self (%s:%d)&quot;</span>, 
                   <a class="code" href="log_8c.html#ae87aa85b5b05b120d376956ce5d13444">zebra_route_string</a>(rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>),
                           rinfo-&gt;<a class="code" href="structrip__info.html#a6c396a30341482a9f1d3e242293ec516">external_metric</a>);
            len = 16 - len;
            <span class="keywordflow">if</span> (len &gt; 0)
              <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%*s&quot;</span>, len, <span class="stringliteral">&quot; &quot;</span>);
          }
        <span class="keywordflow">else</span>
          <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;self            &quot;</span>);
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%3d&quot;</span>, rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a>);
      }

    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      }
  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a737868c3af96812582cb95f15afc9b4b"></a><!-- doxytag: member="ripd.c::DEFUN" ref="a737868c3af96812582cb95f15afc9b4b" args="(show_ip_rip_status, show_ip_rip_status_cmd,&quot;show ip rip status&quot;, SHOW_STR IP_STR&quot;Show RIP routes\n&quot;&quot;IP routing protocol process parameters and statistics\n&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DEFUN </td>
          <td>(</td>
          <td class="paramtype">show_ip_rip_status&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">show_ip_rip_status_cmd&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;show <a class="el" href="spgrid_8c.html#addd335afdb9230f431842ebb6cbbce62">ip</a> <a class="el" href="structrip.html">rip</a> status&quot;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">SHOW_STR IP_STR&quot;Show RIP routes\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&quot;IP routing protocol process parameters and statistics\<a class="el" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03498">3498</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
  <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="rip__interface_8c.html#ac6a8f8d0e12dd5047543763e63a48781">ri_version_msg</a>[];
  <span class="keyword">const</span> <span class="keywordtype">char</span> *send_version;
  <span class="keyword">const</span> <span class="keywordtype">char</span> *receive_version;

  <span class="keywordflow">if</span> (! <a class="code" href="structrip.html">rip</a>)
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;Routing Protocol is \&quot;rip\&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Sending updates every %ld seconds with +/-50%%,&quot;</span>,
       <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; next due in %lu seconds%s&quot;</span>, 
       <a class="code" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a>(<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a>),
       <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Timeout after %ld seconds,&quot;</span>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; garbage collect after %ld seconds%s&quot;</span>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>,
       <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* Filtering status show. */</span>
  <a class="code" href="distribute_8h.html#a42498c1a381dd986ae3cc5bb7a6a03f0">config_show_distribute</a> (<a class="code" href="structvty.html">vty</a>);
         
  <span class="comment">/* Default metric information. */</span>
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Default redistribution metric is %d%s&quot;</span>,
       <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="comment">/* Redistribute information. */</span>
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Redistributing:&quot;</span>);
  <a class="code" href="rip__zebra_8c.html#a070e5ae1fa0ffe98107bc343cc34479b">config_write_rip_redistribute</a> (<a class="code" href="structvty.html">vty</a>, 0);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Default version control: send version %s,&quot;</span>,
       <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a>(<a class="code" href="rip__interface_8c.html#ac6a8f8d0e12dd5047543763e63a48781">ri_version_msg</a>,<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a>));
  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> == <a class="code" href="ripd_8h.html#abdca8506f74f9756b337c4c0c4cd2c43">RI_RIP_VERSION_1_AND_2</a>)
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; receive any version %s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <span class="keywordflow">else</span>
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot; receive version %s %s&quot;</span>,
         <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a>(<a class="code" href="rip__interface_8c.html#ac6a8f8d0e12dd5047543763e63a48781">ri_version_msg</a>,<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a>), <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    Interface        Send  Recv   Key-chain%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
    {
      ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

      <span class="keywordflow">if</span> (!ri-&gt;<a class="code" href="structrip__interface.html#a29f1e7ea828dc3950b72ea63bc7068a4">running</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#ae026532d0f89cd29ad5185fb0421ad1e">enable_network</a> || ri-&gt;<a class="code" href="structrip__interface.html#a20e65aa5132738f8d31704e03e01289c">enable_interface</a>)
    {
      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a2b4602c504a60bac12c372581abd1159">ri_send</a> == <a class="code" href="ripd_8h.html#acaf07e083e328ebe0df4c436655a4d66">RI_RIP_UNSPEC</a>)
        send_version = <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rip__interface_8c.html#ac6a8f8d0e12dd5047543763e63a48781">ri_version_msg</a>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a>);
      <span class="keywordflow">else</span>
        send_version = <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rip__interface_8c.html#ac6a8f8d0e12dd5047543763e63a48781">ri_version_msg</a>, ri-&gt;<a class="code" href="structrip__interface.html#a2b4602c504a60bac12c372581abd1159">ri_send</a>);

      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0e1c83b8a992c8dd3d861dc9a90fc105">ri_receive</a> == <a class="code" href="ripd_8h.html#acaf07e083e328ebe0df4c436655a4d66">RI_RIP_UNSPEC</a>)
        receive_version = <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rip__interface_8c.html#ac6a8f8d0e12dd5047543763e63a48781">ri_version_msg</a>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a>);
      <span class="keywordflow">else</span>
        receive_version = <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="rip__interface_8c.html#ac6a8f8d0e12dd5047543763e63a48781">ri_version_msg</a>, ri-&gt;<a class="code" href="structrip__interface.html#a0e1c83b8a992c8dd3d861dc9a90fc105">ri_receive</a>);
    
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    %-17s%-3s   %-3s    %s%s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
           send_version,
           receive_version,
           ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a> ? ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a> : <span class="stringliteral">&quot;&quot;</span>,
           <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
    }
    }

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Routing for Networks:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="rip__interface_8c.html#abf5300e9e13f397e283a6321ae015ab9">config_write_rip_network</a> (<a class="code" href="structvty.html">vty</a>, 0);  

  {
    <span class="keywordtype">int</span> found_passive = 0;
    <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
      {
    ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

    <span class="keywordflow">if</span> ((ri-&gt;<a class="code" href="structrip__interface.html#ae026532d0f89cd29ad5185fb0421ad1e">enable_network</a> || ri-&gt;<a class="code" href="structrip__interface.html#a20e65aa5132738f8d31704e03e01289c">enable_interface</a>) &amp;&amp; ri-&gt;<a class="code" href="structrip__interface.html#aa624d6a89ab2dcd614cc0fb89e08febf">passive</a>)
      {
        <span class="keywordflow">if</span> (!found_passive)
          {
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Passive Interface(s):%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
        found_passive = 1;
          }
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    %s%s&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      }
      }
  }

  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;  Routing Information Sources:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (<a class="code" href="structvty.html">vty</a>, <span class="stringliteral">&quot;    Gateway          BadPackets BadRoutes  Distance Last Update%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
  <a class="code" href="rip__peer_8c.html#a02aaa1aaecb272b7e12d9bf99b7e690e">rip_peer_display</a> (<a class="code" href="structvty.html">vty</a>);

  <a class="code" href="ripd_8c.html#ad2f5853e20eaeccbca634c08d365a2e4">rip_distance_show</a> (<a class="code" href="structvty.html">vty</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a72538cf9bcdaa839156ff1390c6cc2a0"></a><!-- doxytag: member="ripd.c::rip_auth_header_write" ref="a72538cf9bcdaa839156ff1390c6cc2a0" args="(struct stream *s, struct rip_interface *ri, struct key *key, char *auth_str, int len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static size_t rip_auth_header_write </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrip__interface.html">rip_interface</a> *&#160;</td>
          <td class="paramname"><em>ri</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structkey.html">key</a> *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>auth_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l01040">1040</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a>);
  
  <span class="keywordflow">switch</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a>)
    {
      <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>:
        <a class="code" href="ripd_8c.html#a2747a4f7653e3afdccb61a7412fe4555">rip_auth_prepare_str_send</a> (ri, key, auth_str, len);
        <a class="code" href="ripd_8c.html#a08c4416f33070c82500b7e5e0f05ee37">rip_auth_simple_write</a> (s, auth_str, len);
        <span class="keywordflow">return</span> 0;
      <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>:
        <span class="keywordflow">return</span> <a class="code" href="ripd_8c.html#a7d84f0f0f8b5dfab5862fff951a13eca">rip_auth_md5_ah_write</a> (s, ri, key);
    }
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (1);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6f2010a631def9499b1db67a697568a2"></a><!-- doxytag: member="ripd.c::rip_auth_md5" ref="a6f2010a631def9499b1db67a697568a2" args="(struct rip_packet *packet, struct sockaddr_in *from, int length, struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_auth_md5 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrip__packet.html">rip_packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00857">857</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
  <span class="keyword">struct </span><a class="code" href="structrip__md5__info.html">rip_md5_info</a> *md5;
  <span class="keyword">struct </span><a class="code" href="structrip__md5__data.html">rip_md5_data</a> *md5data;
  <span class="keyword">struct </span><a class="code" href="structkeychain.html">keychain</a> *<a class="code" href="structkeychain.html">keychain</a>;
  <span class="keyword">struct </span><a class="code" href="structkey.html">key</a> *<a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;
  <a class="code" href="md5_8h.html#a71b7c53816d90dc180b03df889aacd18">MD5_CTX</a> ctx;
  u_char digest[<a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>];
  u_int16_t packet_len;
  <span class="keywordtype">char</span> auth_str[<a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>];
  
  <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 MD5 authentication from %s&quot;</span>,
               inet_ntoa (from-&gt;sin_addr));

  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
  md5 = (<span class="keyword">struct </span><a class="code" href="structrip__md5__info.html">rip_md5_info</a> *) &amp;packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;

  <span class="comment">/* Check auth type. */</span>
  if (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a> || md5-&gt;<a class="code" href="structrip__md5__info.html#a82b1691dcaf7b0532d0a88d5caba79b6">type</a> != htons(<a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* If the authentication length is less than 16, then it must be wrong for</span>
<span class="comment">   * any interpretation of rfc2082. Some implementations also interpret</span>
<span class="comment">   * this as RIP_HEADER_SIZE+ RIP_AUTH_MD5_SIZE, aka RIP_AUTH_MD5_COMPAT_SIZE.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> ( !((md5-&gt;<a class="code" href="structrip__md5__info.html#a84616a46d0f48097b0c36dc20cbe7b4b">auth_len</a> == <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>)
         || (md5-&gt;<a class="code" href="structrip__md5__info.html#a84616a46d0f48097b0c36dc20cbe7b4b">auth_len</a> == <a class="code" href="ripd_8h.html#a0c555d4d776823081ff9e4edef277657">RIP_AUTH_MD5_COMPAT_SIZE</a>)))
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 MD5 authentication, strange authentication &quot;</span>
                   <span class="stringliteral">&quot;length field %d&quot;</span>, md5-&gt;<a class="code" href="structrip__md5__info.html#a84616a46d0f48097b0c36dc20cbe7b4b">auth_len</a>);
    <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* grab and verify check packet length */</span>
  packet_len = ntohs (md5-&gt;<a class="code" href="structrip__md5__info.html#abfcfa2b126c679e644267b084322f9cc">packet_len</a>);

  <span class="keywordflow">if</span> (packet_len &gt; (<a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a> - <a class="code" href="ripd_8h.html#a2b406f37d407dde3db724ee3d24d94a4">RIP_HEADER_SIZE</a> - <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 MD5 authentication, packet length field %d &quot;</span>
                   <span class="stringliteral">&quot;greater than received length %d!&quot;</span>,
                   md5-&gt;<a class="code" href="structrip__md5__info.html#abfcfa2b126c679e644267b084322f9cc">packet_len</a>, <a class="code" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* retrieve authentication data */</span>
  md5data = (<span class="keyword">struct </span><a class="code" href="structrip__md5__data.html">rip_md5_data</a> *) (((u_char *) packet) + packet_len);
  
  memset (auth_str, 0, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);

  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>)
    {
      keychain = <a class="code" href="keychain_8c.html#a0d83c9f26473a5d9ab10051f72471278">keychain_lookup</a> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>);
      <span class="keywordflow">if</span> (keychain == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

      key = <a class="code" href="keychain_8c.html#a60a0d8f69165cc362b08b1ff56bb3762">key_lookup_for_accept</a> (keychain, md5-&gt;<a class="code" href="structrip__md5__info.html#a5ca9121c92c6ab7c43f339ce2dd5307c">keyid</a>);
      <span class="keywordflow">if</span> (key == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

      strncpy (auth_str, key-&gt;<a class="code" href="structkey.html#ab82f6af1953da7203884ced78d668fd0">string</a>, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>)
    strncpy (auth_str, ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);

  <span class="keywordflow">if</span> (auth_str[0] == 0)
    <span class="keywordflow">return</span> 0;
  
  <span class="comment">/* MD5 digest authentication. */</span>
  memset (&amp;ctx, 0, <span class="keyword">sizeof</span>(ctx));
  <a class="code" href="md5_8h.html#a3651aa5847a3d8ca5141aa25086cc146">MD5Init</a>(&amp;ctx);
  <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, packet, packet_len + <a class="code" href="ripd_8h.html#a2b406f37d407dde3db724ee3d24d94a4">RIP_HEADER_SIZE</a>);
  <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, auth_str, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);
  <a class="code" href="md5_8h.html#ae653f59a8022a8e4b0a6beccec24452d">MD5Final</a>(digest, &amp;ctx);
  
  <span class="keywordflow">if</span> (<a class="code" href="regex_8c.html#a98d0dff0c7366f08562d8e8583df9bb9">memcmp</a> (md5data-&gt;<a class="code" href="structrip__md5__data.html#adfb4b6fd27f910b953b470eb258cefe5">digest</a>, digest, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>) == 0)
    <span class="keywordflow">return</span> packet_len;
  <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7d84f0f0f8b5dfab5862fff951a13eca"></a><!-- doxytag: member="ripd.c::rip_auth_md5_ah_write" ref="a7d84f0f0f8b5dfab5862fff951a13eca" args="(struct stream *s, struct rip_interface *ri, struct key *key)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static size_t rip_auth_md5_ah_write </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrip__interface.html">rip_interface</a> *&#160;</td>
          <td class="paramname"><em>ri</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structkey.html">key</a> *&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00991">991</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">size_t</span> doff = 0;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (s &amp;&amp; ri &amp;&amp; ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>);

  <span class="comment">/* MD5 authentication. */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>);

  <span class="comment">/* MD5 AH digest offset field.</span>
<span class="comment">   *</span>
<span class="comment">   * Set to placeholder value here, to true value when RIP-2 Packet length</span>
<span class="comment">   * is known.  Actual value is set in .....().</span>
<span class="comment">   */</span>
  doff = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(s);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);

  <span class="comment">/* Key ID. */</span>
  <span class="keywordflow">if</span> (key)
    <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, key-&gt;<a class="code" href="structkey.html#a40b597137701dbab70d6cc8833c5e88f">index</a> % 256);
  <span class="keywordflow">else</span>
    <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, 1);

  <span class="comment">/* Auth Data Len.  Set 16 for MD5 authentication data. Older ripds </span>
<span class="comment">   * however expect RIP_HEADER_SIZE + RIP_AUTH_MD5_SIZE so we allow for this</span>
<span class="comment">   * to be configurable. </span>
<span class="comment">   */</span>
  <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, ri-&gt;<a class="code" href="structrip__interface.html#a7853c3b761c4029aa4eebec5132c1286">md5_auth_len</a>);

  <span class="comment">/* Sequence Number (non-decreasing). */</span>
  <span class="comment">/* RFC2080: The value used in the sequence number is</span>
<span class="comment">     arbitrary, but two suggestions are the time of the</span>
<span class="comment">     message&#39;s creation or a simple message counter. */</span>
  <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>));
          
  <span class="comment">/* Reserved field must be zero. */</span>
  <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, 0);
  <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, 0);

  <span class="keywordflow">return</span> doff;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4a48a7de91fb41ecbdfe8be6861c214d"></a><!-- doxytag: member="ripd.c::rip_auth_md5_set" ref="a4a48a7de91fb41ecbdfe8be6861c214d" args="(struct stream *s, struct rip_interface *ri, size_t doff, char *auth_str, int authlen)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_auth_md5_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrip__interface.html">rip_interface</a> *&#160;</td>
          <td class="paramname"><em>ri</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>doff</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>auth_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>authlen</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l01060">1060</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> len;
  <a class="code" href="md5_8h.html#a71b7c53816d90dc180b03df889aacd18">MD5_CTX</a> ctx;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="structrip__md5__data.html#adfb4b6fd27f910b953b470eb258cefe5">digest</a>[<a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>];

  <span class="comment">/* Make it sure this interface is configured as MD5</span>
<span class="comment">     authentication. */</span>
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> ((ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>) &amp;&amp; (authlen == <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>));
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (doff &gt; 0);
  
  <span class="comment">/* Get packet length. */</span>
  len = <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(s);

  <span class="comment">/* Check packet length. */</span>
  <span class="keywordflow">if</span> (len &lt; (<a class="code" href="ripd_8h.html#a2b406f37d407dde3db724ee3d24d94a4">RIP_HEADER_SIZE</a> + <a class="code" href="ripd_8h.html#a6bcabfdfe4b1b9865cb6c04bb6713497">RIP_RTE_SIZE</a>))
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rip_auth_md5_set(): packet length %ld is less than minimum length.&quot;</span>, len);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* Set the digest offset length in the header */</span>
  <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, doff, len);
  
  <span class="comment">/* Set authentication data. */</span>
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#aba0b4d86f4a1404f2ffa900d4ba2880d">RIP_AUTH_DATA</a>);

  <span class="comment">/* Generate a digest for the RIP packet. */</span>
  memset(&amp;ctx, 0, <span class="keyword">sizeof</span>(ctx));
  <a class="code" href="md5_8h.html#a3651aa5847a3d8ca5141aa25086cc146">MD5Init</a>(&amp;ctx);
  <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, <a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));
  <a class="code" href="md5_8h.html#a1716d4c4fd33e8d8ab3f6054cd73d02d">MD5Update</a>(&amp;ctx, auth_str, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);
  <a class="code" href="md5_8h.html#ae653f59a8022a8e4b0a6beccec24452d">MD5Final</a>(digest, &amp;ctx);

  <span class="comment">/* Copy the digest to the packet. */</span>
  <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (s, digest, <a class="code" href="ripd_8h.html#a52b0ff20d71ca2ceb7c217a77473d6f8">RIP_AUTH_MD5_SIZE</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2747a4f7653e3afdccb61a7412fe4555"></a><!-- doxytag: member="ripd.c::rip_auth_prepare_str_send" ref="a2747a4f7653e3afdccb61a7412fe4555" args="(struct rip_interface *ri, struct key *key, char *auth_str, int len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_auth_prepare_str_send </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrip__interface.html">rip_interface</a> *&#160;</td>
          <td class="paramname"><em>ri</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structkey.html">key</a> *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>auth_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00951">951</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ri || key);

  memset (auth_str, 0, len);
  <span class="keywordflow">if</span> (key &amp;&amp; key-&gt;<a class="code" href="structkey.html#ab82f6af1953da7203884ced78d668fd0">string</a>)
    strncpy (auth_str, key-&gt;<a class="code" href="structkey.html#ab82f6af1953da7203884ced78d668fd0">string</a>, len);
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>)
    strncpy (auth_str, ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>, len);

  <span class="keywordflow">return</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2c3068b4df03ffa8845f74323ddfabcd"></a><!-- doxytag: member="ripd.c::rip_auth_simple_password" ref="a2c3068b4df03ffa8845f74323ddfabcd" args="(struct rte *rte, struct sockaddr_in *from, struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_auth_simple_password </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrte.html">rte</a> *&#160;</td>
          <td class="paramname"><em>rte</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00815">815</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
  <span class="keywordtype">char</span> *<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>;

  <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 simple password authentication from %s&quot;</span>,
           inet_ntoa (from-&gt;sin_addr));

  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>
      || rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a> != htons(<a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Simple password authentication. */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>)
    {
      auth_str = (<span class="keywordtype">char</span> *) &amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>;
      
      if (strncmp (auth_str, ri-&gt;<a class="code" href="structrip__interface.html#a0be9a6b0c20f5bf69dd4f14aaedf84f0">auth_str</a>, 16) == 0)
    <span class="keywordflow">return</span> 1;
    }
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>)
    {
      <span class="keyword">struct </span><a class="code" href="structkeychain.html">keychain</a> *<a class="code" href="structkeychain.html">keychain</a>;
      <span class="keyword">struct </span><a class="code" href="structkey.html">key</a> *<a class="code" href="zebra__rib_8c.html#a35af0be900467fedbb610bd6ea65ed78">key</a>;

      keychain = <a class="code" href="keychain_8c.html#a0d83c9f26473a5d9ab10051f72471278">keychain_lookup</a> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>);
      <span class="keywordflow">if</span> (keychain == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

      key = <a class="code" href="keychain_8c.html#a847f99d89fd7c5aecbf63fb9dd0e5e97">key_match_for_accept</a> (keychain, (<span class="keywordtype">char</span> *) &amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>);
      <span class="keywordflow">if</span> (key)
    <span class="keywordflow">return</span> 1;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a08c4416f33070c82500b7e5e0f05ee37"></a><!-- doxytag: member="ripd.c::rip_auth_simple_write" ref="a08c4416f33070c82500b7e5e0f05ee37" args="(struct stream *s, char *auth_str, int len)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_auth_simple_write </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>auth_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00971">971</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (s &amp;&amp; len == <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);
  
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>);
  <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, <a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>);
  <a class="code" href="stream_8c.html#a2f540a71efdf46e8c3a923f73e9f3b73">stream_put</a> (s, auth_str, <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);
  
  <span class="keywordflow">return</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3f9f2dc004fbc0fbcf1d61d4f360b692"></a><!-- doxytag: member="ripd.c::rip_clean" ref="a3f9f2dc004fbc0fbcf1d61d4f360b692" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rip_clean </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03791">3791</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;

  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>)
    {
      <span class="comment">/* Clear RIP routes */</span>
      <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
        <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> &amp;&amp;
        rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>)
          <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>,
                     &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
    
        <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
        <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>);

        rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);

        <a class="code" href="ripd_8c.html#adc7ff2705d42a1ee587b92bbfc256f86">rip_info_free</a> (rinfo);
      }

      <span class="comment">/* Cancel RIP related timers. */</span>
      <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a>);
      <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2bf3b2f0ae9c888e4941a929315f86c2">t_triggered_update</a>);
      <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>);

      <span class="comment">/* Cancel read thread. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a73ff0450da2dfc1332af7a4b64c1e678">t_read</a>)
    {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a73ff0450da2dfc1332af7a4b64c1e678">t_read</a>);
      <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a73ff0450da2dfc1332af7a4b64c1e678">t_read</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

      <span class="comment">/* Close RIP socket. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a> &gt;= 0)
    {
      close (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a>);
      <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a> = -1;
    }

      <span class="comment">/* Static RIP route configuration. */</span>
      <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
      {
        rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
      }

      <span class="comment">/* RIP neighbor configuration. */</span>
      <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a5361d5a9259aa9a07ba942b32376eda7">neighbor</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
      {
        rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
      }

      <span class="comment">/* Redistribute related clear. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a77d5572a3adb44ab2bbec4c5d4c308b5">default_information_route_map</a>)
    free (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a77d5572a3adb44ab2bbec4c5d4c308b5">default_information_route_map</a>);

      <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; i++)
    <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[i].<a class="code" href="structrip.html#a77a65f4af78afdc1861f3f59ce91fb66">name</a>)
      free (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[i].<a class="code" href="structrip.html#a77a65f4af78afdc1861f3f59ce91fb66">name</a>);

      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>);
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a>);
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba27328f215d57f8800a0ec495235b1c01">MTYPE_ROUTE_TABLE</a>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a5361d5a9259aa9a07ba942b32376eda7">neighbor</a>);
      
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c7cad00ee9cdeede92c0c380ebbd8ef">MTYPE_RIP</a>, <a class="code" href="structrip.html">rip</a>);
      <a class="code" href="structrip.html">rip</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }

  <a class="code" href="rip__interface_8c.html#a625e2bc2de85b1bc92e4747708b1f92b">rip_clean_network</a> ();
  <a class="code" href="rip__interface_8c.html#a154576be5e4bebec5849daafba38d362">rip_passive_nondefault_clean</a> ();
  <a class="code" href="rip__offset_8c.html#a011c4e6148f408ac629f14dbfb8b44ff">rip_offset_clean</a> ();
  <a class="code" href="rip__interface_8c.html#a6ae6979fff0457b13c74bec21eb8e9e1">rip_interface_clean</a> ();
  <a class="code" href="ripd_8c.html#a3d2210c2851480c4f92c76242b6bdc7f">rip_distance_reset</a> ();
  <a class="code" href="rip__zebra_8c.html#a1a65323d964e8319e2547170a478eb40">rip_redistribute_clean</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="aeadbc9dd74594957aecb8b7a479ab1b0"></a><!-- doxytag: member="ripd.c::rip_clear_changed_flag" ref="aeadbc9dd74594957aecb8b7a479ab1b0" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_clear_changed_flag </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02591">2591</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;

  <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> &amp; <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>)
    rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> &amp;= ~<a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a52d6b3652aacbdb7241535cb647d92b1"></a><!-- doxytag: member="ripd.c::rip_create" ref="a52d6b3652aacbdb7241535cb647d92b1" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_create </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02697">2697</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="structrip.html">rip</a> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba2c7cad00ee9cdeede92c0c380ebbd8ef">MTYPE_RIP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structrip.html">rip</a>));

  <span class="comment">/* Set initial value. */</span>
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a> = <a class="code" href="ripd_8h.html#aa01e7530767b1b4f617405047b74cf49">RI_RIP_VERSION_2</a>;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> = <a class="code" href="ripd_8h.html#abdca8506f74f9756b337c4c0c4cd2c43">RI_RIP_VERSION_1_AND_2</a>;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a> = <a class="code" href="ripd_8h.html#a4415e31f329179a7a1970783b0ae4816">RIP_UPDATE_TIMER_DEFAULT</a>;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a> = <a class="code" href="ripd_8h.html#a14745370fa257b7afb671b0594538dad">RIP_TIMEOUT_TIMER_DEFAULT</a>;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a> = <a class="code" href="ripd_8h.html#acdff5e9dbc2860fe30cf6ecbc779eb63">RIP_GARBAGE_TIMER_DEFAULT</a>;
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a> = <a class="code" href="ripd_8h.html#ae60bba91e95dea222d0722cb7ee4820f">RIP_DEFAULT_METRIC_DEFAULT</a>;

  <span class="comment">/* Initialize RIP routig table. */</span>
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aef6c6042d82910a3357407dea3b2ebee">route</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a5361d5a9259aa9a07ba942b32376eda7">neighbor</a> = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();

  <span class="comment">/* Make output stream. */</span>
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0816f2eee75543e57cad83a492541a14">obuf</a> = <a class="code" href="stream_8c.html#a7117cdad9fa5e5ae633e0cf08d047459">stream_new</a> (1500);

  <span class="comment">/* Make socket. */</span>
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a> = <a class="code" href="ripd_8c.html#a7d120833f5e80143c6dee4123ad86a4a">rip_create_socket</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a> &lt; 0)
    <span class="keywordflow">return</span> <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a>;

  <span class="comment">/* Create read and timer thread. */</span>
  <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67af36c3620e53d2176ba96ad1c7632b0ea">RIP_READ</a>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a>);
  <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a5ae803ea0ff858bd14d792ac5b99dd95">RIP_UPDATE_EVENT</a>, 1);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7d120833f5e80143c6dee4123ad86a4a"></a><!-- doxytag: member="ripd.c::rip_create_socket" ref="a7d120833f5e80143c6dee4123ad86a4a" args="(struct sockaddr_in *from)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_create_socket </td>
          <td>(</td>
          <td class="paramtype">struct sockaddr_in *&#160;</td>
          <td class="paramname"><em>from</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l01339">1339</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keywordtype">int</span> sock;
  <span class="keyword">struct </span>sockaddr_in addr;
  
  memset (&amp;addr, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
  
  <span class="keywordflow">if</span> (!from)
    {
      addr.sin_family = AF_INET;
      addr.sin_addr.s_addr = INADDR_ANY;
<span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<span class="preprocessor"></span>      addr.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
    } <span class="keywordflow">else</span> {
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a>(&amp;addr, from, <span class="keyword">sizeof</span>(addr));
    }
  
  <span class="comment">/* sending port must always be the RIP port */</span>
  addr.sin_port = htons (<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>);
  
  <span class="comment">/* Make datagram socket. */</span>
  sock = socket (AF_INET, SOCK_DGRAM, 0);
  <span class="keywordflow">if</span> (sock &lt; 0) 
    {
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;Cannot create UDP socket: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
      <a class="code" href="vtysh_8c.html#afa5f6ba5518772e1487b961507e2a570">exit</a> (1);
    }

  <a class="code" href="ripd_8c.html#a1a4b51c3d8f41cf229c1e3475a188d55">sockopt_broadcast</a> (sock);
  <a class="code" href="sockunion_8c.html#aa177c0a1e91bd7ac7af8d703768a56bc">sockopt_reuseaddr</a> (sock);
  <a class="code" href="sockunion_8c.html#a1910bb0d088e8c63fcf2d1441a0ad4e4">sockopt_reuseport</a> (sock);
<span class="preprocessor">#ifdef RIP_RECVMSG</span>
<span class="preprocessor"></span>  setsockopt_pktinfo (sock);
<span class="preprocessor">#endif </span><span class="comment">/* RIP_RECVMSG */</span>
<span class="preprocessor">#ifdef IPTOS_PREC_INTERNETCONTROL</span>
<span class="preprocessor"></span>  <a class="code" href="sockopt_8c.html#a3ea00b83444773c5162871266744a286">setsockopt_ipv4_tos</a> (sock, <a class="code" href="ospfd_8h.html#aad2536be3b05d82e79158c07c0d26142">IPTOS_PREC_INTERNETCONTROL</a>);
<span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
  <span class="keywordflow">if</span> (<a class="code" href="rip__interface_8c.html#a86af5d820616c880d6fd680778713f3b">ripd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a5395269196ee9bd07257f8b2b35c25fa">ZPRIVS_RAISE</a>))
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rip_create_socket: could not raise privs&quot;</span>);
  <a class="code" href="sockopt_8c.html#abdfd124bd2b3b787be44b3e78e99bc37">setsockopt_so_recvbuf</a> (sock, <a class="code" href="ripd_8c.html#abc1fc2f690463e7cf27850b0365c49b4">RIP_UDP_RCV_BUF</a>);
  <span class="keywordflow">if</span> ( (ret = bind (sock, (<span class="keyword">struct</span> sockaddr *) &amp; addr, <span class="keyword">sizeof</span> (addr))) &lt; 0)
  
    {
      <span class="keywordtype">int</span> save_errno = errno;
      <span class="keywordflow">if</span> (<a class="code" href="rip__interface_8c.html#a86af5d820616c880d6fd680778713f3b">ripd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
        <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rip_create_socket: could not lower privs&quot;</span>);
      
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a>(<span class="stringliteral">&quot;%s: Can&#39;t bind socket %d to %s port %d: %s&quot;</span>, __func__,
           sock, inet_ntoa(addr.sin_addr), 
           (<span class="keywordtype">int</span>) ntohs(addr.sin_port), 
           <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(save_errno));
      
      close (sock);
      <span class="keywordflow">return</span> ret;
    }
  
  <span class="keywordflow">if</span> (<a class="code" href="rip__interface_8c.html#a86af5d820616c880d6fd680778713f3b">ripd_privs</a>.<a class="code" href="structzebra__privs__t.html#a0c59dbc0ec6187b60a824ec421cc34c1">change</a> (<a class="code" href="privs_8h.html#aae029fe88e2d02bee4d46a2f458bd3e5a7da2c6956cf712f8adc04ff2b0f072c5">ZPRIVS_LOWER</a>))
      <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;rip_create_socket: could not lower privs&quot;</span>);
      
  <span class="keywordflow">return</span> sock;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7b77dd9cb3d1dec4bcfd49dd7f69cf2d"></a><!-- doxytag: member="ripd.c::rip_destination_check" ref="a7b77dd9cb3d1dec4bcfd49dd7f69cf2d" args="(struct in_addr addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_destination_check </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"><em>addr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00788">788</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int32_t destination;

  <span class="comment">/* Convert to host byte order. */</span>
  destination = ntohl (addr.s_addr);

  <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a255d6e4fa5cfaf4cd252266a0bd4dfda">IPV4_NET127</a> (destination))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Net 0 may match to the default route. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a3864bb8a4b7cb6bff9e5c1d9ace8c215">IPV4_NET0</a> (destination) &amp;&amp; destination != 0)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Unicast address must belong to class A, B, C. */</span>
  <span class="keywordflow">if</span> (IN_CLASSA (destination))
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">if</span> (IN_CLASSB (destination))
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">if</span> (IN_CLASSC (destination))
    <span class="keywordflow">return</span> 1;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a04cf925731eef2a46d72cb38bb97db38"></a><!-- doxytag: member="ripd.c::rip_distance_apply" ref="a04cf925731eef2a46d72cb38bb97db38" args="(struct rip_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_char rip_distance_apply </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrip__info.html">rip_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03234">3234</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span>rip_distance *rdistance;
  <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;

  <span class="keywordflow">if</span> (! <a class="code" href="structrip.html">rip</a>)
    <span class="keywordflow">return</span> 0;

  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;

  <span class="comment">/* Check source address. */</span>
  rn = <a class="code" href="table_8c.html#a948f4335026cd8417c7424e85156ae55">route_node_match</a> (rip_distance_table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (rn)
    {
      rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

      <span class="keywordflow">if</span> (rdistance-&gt;access_list)
    {
      alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, rdistance-&gt;access_list);
      <span class="keywordflow">if</span> (alist == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <span class="keywordflow">return</span> 0;
      <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (alist, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
        <span class="keywordflow">return</span> 0;

      <span class="keywordflow">return</span> rdistance-&gt;distance;
    }
      <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> rdistance-&gt;distance;
    }

  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a>)
    <span class="keywordflow">return</span> <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9878e9ea0f0f8e734ba56881a78428c4"></a><!-- doxytag: member="ripd.c::rip_distance_free" ref="a9878e9ea0f0f8e734ba56881a78428c4" args="(struct rip_distance *rdistance)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_distance_free </td>
          <td>(</td>
          <td class="paramtype">struct rip_distance *&#160;</td>
          <td class="paramname"><em>rdistance</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03124">3124</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bac531d01a8db74aeca63b3b67343d6167">MTYPE_RIP_DISTANCE</a>, rdistance);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae05c338bbc5bfbb22f15ae977364a5d0"></a><!-- doxytag: member="ripd.c::rip_distance_new" ref="ae05c338bbc5bfbb22f15ae977364a5d0" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct rip_distance* rip_distance_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03118">3118</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bac531d01a8db74aeca63b3b67343d6167">MTYPE_RIP_DISTANCE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> rip_distance));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3d2210c2851480c4f92c76242b6bdc7f"></a><!-- doxytag: member="ripd.c::rip_distance_reset" ref="a3d2210c2851480c4f92c76242b6bdc7f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_distance_reset </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03216">3216</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span>rip_distance *rdistance;

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip_distance_table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <span class="keywordflow">if</span> (rdistance-&gt;access_list)
      free (rdistance-&gt;access_list);
    <a class="code" href="ripd_8c.html#a9878e9ea0f0f8e734ba56881a78428c4">rip_distance_free</a> (rdistance);
    rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="adbe5ab87c0bf797432fdaaaa3e21971a"></a><!-- doxytag: member="ripd.c::rip_distance_set" ref="adbe5ab87c0bf797432fdaaaa3e21971a" args="(struct vty *vty, const char *distance_str, const char *ip_str, const char *access_list_str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_distance_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>distance_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ip_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>access_list_str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03130">3130</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span>rip_distance *rdistance;

  ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (ip_str, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (ret == 0)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  distance = atoi (distance_str);

  <span class="comment">/* Get RIP distance node. */</span>
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (rip_distance_table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    {
      rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
    }
  <span class="keywordflow">else</span>
    {
      rdistance = <a class="code" href="ripd_8c.html#ae05c338bbc5bfbb22f15ae977364a5d0">rip_distance_new</a> ();
      rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rdistance;
    }

  <span class="comment">/* Set distance value. */</span>
  rdistance-&gt;distance = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;

  <span class="comment">/* Reset access-list configuration. */</span>
  <span class="keywordflow">if</span> (rdistance-&gt;access_list)
    {
      free (rdistance-&gt;access_list);
      rdistance-&gt;access_list = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">if</span> (access_list_str)
    rdistance-&gt;access_list = strdup (access_list_str);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad2f5853e20eaeccbca634c08d365a2e4"></a><!-- doxytag: member="ripd.c::rip_distance_show" ref="ad2f5853e20eaeccbca634c08d365a2e4" args="(struct vty *vty)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_distance_show </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03277">3277</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span>rip_distance *rdistance;
  <span class="keywordtype">int</span> header = 1;
  <span class="keywordtype">char</span> buf[BUFSIZ];
  
  <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Distance: (default is %d)%s&quot;</span>,
       <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a> ? <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a7e150826719b2c48dc0c75ae602c57ad">distance</a> :<a class="code" href="zebra_8h.html#a59b508b9cafa2524d610279687c68ed3">ZEBRA_RIP_DISTANCE_DEFAULT</a>,
       <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rip_distance_table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <span class="keywordflow">if</span> (header)
      {
        <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;    Address           Distance  List%s&quot;</span>,
             <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
        header = 0;
      }
    sprintf (buf, <span class="stringliteral">&quot;%s/%d&quot;</span>, inet_ntoa (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
    <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;    %-20s  %4d  %s%s&quot;</span>,
         buf, rdistance-&gt;distance,
         rdistance-&gt;access_list ? rdistance-&gt;access_list : <span class="stringliteral">&quot;&quot;</span>,
         <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a49705d140b8c1c239daae1696f024f5a"></a><!-- doxytag: member="ripd.c::rip_distance_unset" ref="a49705d140b8c1c239daae1696f024f5a" args="(struct vty *vty, const char *distance_str, const char *ip_str, const char *access_list_str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_distance_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>distance_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ip_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>access_list_str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03177">3177</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span>rip_distance *rdistance;

  ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (ip_str, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (ret == 0)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  distance = atoi (distance_str);

  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (rip_distance_table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (! rn)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find specified prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  rdistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

  <span class="keywordflow">if</span> (rdistance-&gt;access_list)
    free (rdistance-&gt;access_list);
  <a class="code" href="ripd_8c.html#a9878e9ea0f0f8e734ba56881a78428c4">rip_distance_free</a> (rdistance);

  rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acb6750f53b179839ea4b25a942cd31a8"></a><!-- doxytag: member="ripd.c::rip_distribute_update" ref="acb6750f53b179839ea4b25a942cd31a8" args="(struct distribute *dist)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_distribute_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structdistribute.html">distribute</a> *&#160;</td>
          <td class="paramname"><em>dist</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03700">3700</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
  <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
  <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;

  <span class="keywordflow">if</span> (! dist-&gt;<a class="code" href="structdistribute.html#a1b3c9fd2ba22e347deab90590b76f06d">ifname</a>)
    <span class="keywordflow">return</span>;

  ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (dist-&gt;<a class="code" href="structdistribute.html#a1b3c9fd2ba22e347deab90590b76f06d">ifname</a>);
  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

  <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
    {
      alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
      <span class="keywordflow">if</span> (alist)
    ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = alist;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
    {
      alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
      <span class="keywordflow">if</span> (alist)
    ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = alist;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
    {
      plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
      <span class="keywordflow">if</span> (plist)
    ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = plist;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
    {
      plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
      <span class="keywordflow">if</span> (plist)
    ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = plist;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a05dbfcc9f968f38818a374368e662270"></a><!-- doxytag: member="ripd.c::rip_distribute_update_all" ref="a05dbfcc9f968f38818a374368e662270" args="(struct prefix_list *notused)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_distribute_update_all </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__list.html">prefix_list</a> *&#160;</td>
          <td class="paramname"><em>notused</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03774">3774</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, nnode, ifp))
    <a class="code" href="ripd_8c.html#a30f91d4920313b8bb6d62c95181ac81c">rip_distribute_update_interface</a> (ifp);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a445d1c0ccf9a7fd28f755afd8384277c"></a><!-- doxytag: member="ripd.c::rip_distribute_update_all_wrapper" ref="a445d1c0ccf9a7fd28f755afd8384277c" args="(struct access_list *notused)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_distribute_update_all_wrapper </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structaccess__list.html">access_list</a> *&#160;</td>
          <td class="paramname"><em>notused</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03784">3784</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
        <a class="code" href="ripd_8c.html#a05dbfcc9f968f38818a374368e662270">rip_distribute_update_all</a>(<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a30f91d4920313b8bb6d62c95181ac81c"></a><!-- doxytag: member="ripd.c::rip_distribute_update_interface" ref="a30f91d4920313b8bb6d62c95181ac81c" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rip_distribute_update_interface </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03762">3762</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structdistribute.html">distribute</a> *dist;

  dist = <a class="code" href="distribute_8c.html#ad9181c39aaaf02fa3d608dc7b03aecca">distribute_lookup</a> (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
  <span class="keywordflow">if</span> (dist)
    <a class="code" href="ripd_8c.html#acb6750f53b179839ea4b25a942cd31a8">rip_distribute_update</a> (dist);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5b7ed8aa1514ebd1a72cfcd159566e12"></a><!-- doxytag: member="ripd.c::rip_event" ref="a5b7ed8aa1514ebd1a72cfcd159566e12" args="(enum rip_event, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> </td>
          <td>(</td>
          <td class="paramtype">enum <a class="el" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a>&#160;</td>
          <td class="paramname"><em>event</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sock</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02798">2798</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> jitter = 0;

  <span class="keywordflow">switch</span> (<a class="code" href="vty_8c.html#a3b65133bb9997cd1ccf311af0927fc9e">event</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67af36c3620e53d2176ba96ad1c7632b0ea">RIP_READ</a>:
      <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a73ff0450da2dfc1332af7a4b64c1e678">t_read</a> = <a class="code" href="thread_8h.html#abd1714f11834a150c84b040c0c69b620">thread_add_read</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripd_8c.html#ad6a63ee8163b47ae9167b2220497cd19">rip_read</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, sock);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a5ae803ea0ff858bd14d792ac5b99dd95">RIP_UPDATE_EVENT</a>:
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a>)
    {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a>);
      <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
      jitter = <a class="code" href="ripd_8c.html#adf7591fcda9ffc86ca850c74c268495d">rip_update_jitter</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a>);
      <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a> = 
    <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripd_8c.html#a5d503898e18cfcf45b7d0cecdae2d016">rip_update</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 
              sock ? 2 : <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ad3137f7fd67d0fb972aeb32777e2a855">update_time</a> + jitter);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>:
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>)
    <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af9cf461470f2054bbb4bf43607a95660">trigger</a> = 1;
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (! <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2bf3b2f0ae9c888e4941a929315f86c2">t_triggered_update</a>)
    <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2bf3b2f0ae9c888e4941a929315f86c2">t_triggered_update</a> = 
      <a class="code" href="thread_8h.html#a1067157ad59ad46f29bf87158dffc3de">thread_add_event</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripd_8c.html#a44a6353160beda1a7b670c61a67dd818">rip_triggered_update</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 0);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <span class="keywordflow">break</span>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1536c3f4978c8480c3a55e444ebb817e"></a><!-- doxytag: member="ripd.c::rip_garbage_collect" ref="a1536c3f4978c8480c3a55e444ebb817e" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_garbage_collect </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00126">126</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;

  rinfo = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Off timeout timer. */</span>
  <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
  
  <span class="comment">/* Get route_node pointer. */</span>
  rp = rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;

  <span class="comment">/* Unlock route_node. */</span>
  rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);

  <span class="comment">/* Free RIP routing information. */</span>
  <a class="code" href="ripd_8c.html#adc7ff2705d42a1ee587b92bbfc256f86">rip_info_free</a> (rinfo);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a777afc491270764251b432a9de68796e"></a><!-- doxytag: member="ripd.c::rip_if_rmap_update" ref="a777afc491270764251b432a9de68796e" args="(struct if_rmap *if_rmap)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_if_rmap_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structif__rmap.html">if_rmap</a> *&#160;</td>
          <td class="paramname"><em>if_rmap</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03902">3902</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
  <span class="keyword">struct </span><a class="code" href="structroute__map.html">route_map</a> *<a class="code" href="structrmap.html">rmap</a>;

  ifp = <a class="code" href="if_8c.html#ac124a74c213f25a0417e3a8d338606f4">if_lookup_by_name</a> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a50262f0070b0fdf5635807d44d74d888">ifname</a>);
  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

  <span class="keywordflow">if</span> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>])
    {
      rmap = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>]);
      <span class="keywordflow">if</span> (rmap)
    ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>] = rmap;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda3ff0fd7e5f7b91e24ea8c0582fdb1a1e">IF_RMAP_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>])
    {
      rmap = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (if_rmap-&gt;<a class="code" href="structif__rmap.html#a819d05cdf97dee8b73c52fa3f50337dd">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>]);
      <span class="keywordflow">if</span> (rmap)
    ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>] = rmap;
      <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="if__rmap_8h.html#a0c6e4fc98612f8d9030b7e4d4f04e9dda4db65e82ab9d617ec4b4ebe16038947e">IF_RMAP_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">else</span>
    ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a91450861eb65ddb6afafd368b0735d55"></a><!-- doxytag: member="ripd.c::rip_if_rmap_update_interface" ref="a91450861eb65ddb6afafd368b0735d55" args="(struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rip_if_rmap_update_interface </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03938">3938</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structif__rmap.html">if_rmap</a> *<a class="code" href="structif__rmap.html">if_rmap</a>;

  if_rmap = <a class="code" href="if__rmap_8c.html#ac6203bfe7b017bdcf8c4cb23c9eb7e6d">if_rmap_lookup</a> (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
  <span class="keywordflow">if</span> (if_rmap)
    <a class="code" href="ripd_8c.html#a777afc491270764251b432a9de68796e">rip_if_rmap_update</a> (if_rmap);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1b2cdbd40854edbc3b13aae5ab587431"></a><!-- doxytag: member="ripd.c::rip_incoming_filter" ref="a1b2cdbd40854edbc3b13aae5ab587431" args="(struct prefix_ipv4 *p, struct rip_interface *ri)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_incoming_filter </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrip__interface.html">rip_interface</a> *&#160;</td>
          <td class="paramname"><em>ri</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00194">194</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structdistribute.html">distribute</a> *dist;
  <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
  <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;

  <span class="comment">/* Input distribute-list filtering. */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>])
    {
      <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>], 
                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by distribute in&quot;</span>,
               inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      <span class="keywordflow">return</span> -1;
    }
    }
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>])
    {
      <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>], 
                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by prefix-list in&quot;</span>,
               inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* All interface filter check. */</span>
  dist = <a class="code" href="distribute_8c.html#ad9181c39aaaf02fa3d608dc7b03aecca">distribute_lookup</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <span class="keywordflow">if</span> (dist)
    {
      <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
    {
      alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
        
      <span class="keywordflow">if</span> (alist)
        {
          <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (alist,
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by distribute in&quot;</span>,
                   inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
          <span class="keywordflow">return</span> -1;
        }
        }
    }
      <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>])
    {
      plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47a68442e4b689f5012c35729e2bc04525a">DISTRIBUTE_IN</a>]);
      
      <span class="keywordflow">if</span> (plist)
        {
          <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (plist,
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by prefix-list in&quot;</span>,
                   inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
          <span class="keywordflow">return</span> -1;
        }
        }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="adc7ff2705d42a1ee587b92bbfc256f86"></a><!-- doxytag: member="ripd.c::rip_info_free" ref="adc7ff2705d42a1ee587b92bbfc256f86" args="(struct rip_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rip_info_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrip__info.html">rip_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00119">119</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf0f7221055fe1dd5a198b56bd913850a">MTYPE_RIP_INFO</a>, rinfo);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3c9e3f9e1fee01f622533b045fa090aa"></a><!-- doxytag: member="ripd.c::rip_info_new" ref="a3c9e3f9e1fee01f622533b045fa090aa" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structrip__info.html">rip_info</a>* rip_info_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00113">113</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf0f7221055fe1dd5a198b56bd913850a">MTYPE_RIP_INFO</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structrip__info.html">rip_info</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a84babac9b2f652908bd391f8702540cc"></a><!-- doxytag: member="ripd.c::rip_init" ref="a84babac9b2f652908bd391f8702540cc" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rip_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03978">3978</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Randomize for triggered update random(). */</span>
  srand (time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>));

  <span class="comment">/* Install top nodes. */</span>
  <a class="code" href="command_8c.html#a7ee8a7c258e1e5a6e3ff6173dd1658e3">install_node</a> (&amp;<a class="code" href="ripd_8c.html#a85bd7b4a319ea721a2f61bd50e4d6a86">rip_node</a>, <a class="code" href="ripd_8c.html#a507082a56f1939c701904e4709688ada">config_write_rip</a>);

  <span class="comment">/* Install rip commands. */</span>
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_rip_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_rip_status_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_rip_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_rip_status_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;router_rip_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_router_rip_cmd);

  <a class="code" href="command_8h.html#affb2f399c88b8a225b2719bbe928e4de">install_default</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_version_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_version_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_version_val_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_default_metric_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_default_metric_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_default_metric_val_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_timers_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_timers_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_timers_val_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_route_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_route_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_distance_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_distance_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_distance_source_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_distance_source_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;rip_distance_source_access_list_cmd);
  <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>, &amp;no_rip_distance_source_access_list_cmd);

  <span class="comment">/* Debug related init. */</span>
  <a class="code" href="rip__debug_8c.html#a32ecbeac264ca27597a3360fd65398be">rip_debug_init</a> ();

  <span class="comment">/* SNMP init. */</span>
<span class="preprocessor">#ifdef HAVE_SNMP</span>
<span class="preprocessor"></span>  <a class="code" href="ripd_8h.html#afb57a7520721579affb3f01ddf67e560">rip_snmp_init</a> ();
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>

  <span class="comment">/* Access list install. */</span>
  <a class="code" href="filter_8c.html#a7794dbb70ed7bbd7a248853d572fa38c">access_list_init</a> ();
  <a class="code" href="filter_8c.html#afc932e79e55881b9a1c1e700ec1e0cb4">access_list_add_hook</a> (<a class="code" href="ripd_8c.html#a445d1c0ccf9a7fd28f755afd8384277c">rip_distribute_update_all_wrapper</a>);
  <a class="code" href="filter_8c.html#a7696ba96f8b2cf3a96dbfb2e161d6752">access_list_delete_hook</a> (<a class="code" href="ripd_8c.html#a445d1c0ccf9a7fd28f755afd8384277c">rip_distribute_update_all_wrapper</a>);

  <span class="comment">/* Prefix list initialize.*/</span>
  <a class="code" href="plist_8c.html#a198373358b94c257a9a0cb6d02cf8eac">prefix_list_init</a> ();
  <a class="code" href="plist_8c.html#add7d0c6cd7985233eb409608b9bf248b">prefix_list_add_hook</a> (<a class="code" href="ripd_8c.html#a05dbfcc9f968f38818a374368e662270">rip_distribute_update_all</a>);
  <a class="code" href="plist_8c.html#a28384c5c606bb185263f9d8f7ad4fa98">prefix_list_delete_hook</a> (<a class="code" href="ripd_8c.html#a05dbfcc9f968f38818a374368e662270">rip_distribute_update_all</a>);

  <span class="comment">/* Distribute list install. */</span>
  <a class="code" href="distribute_8c.html#a6abacd35439f8cdfeec69c5da166d95c">distribute_list_init</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>);
  <a class="code" href="distribute_8c.html#a22701b77da78b46771dc146fca555dae">distribute_list_add_hook</a> (<a class="code" href="ripd_8c.html#acb6750f53b179839ea4b25a942cd31a8">rip_distribute_update</a>);
  <a class="code" href="distribute_8c.html#a392e0d894cc65ce8667b8133ced5a0bb">distribute_list_delete_hook</a> (<a class="code" href="ripd_8c.html#acb6750f53b179839ea4b25a942cd31a8">rip_distribute_update</a>);

  <span class="comment">/* Route-map */</span>
  <a class="code" href="rip__routemap_8c.html#a41f8a4911f2bc592607a2b83408b9040">rip_route_map_init</a> ();
  <a class="code" href="rip__offset_8c.html#a9fea3b1fd33fd831fab8284811db6cab">rip_offset_init</a> ();

  <a class="code" href="routemap_8c.html#afd64a010c9f8f9cf35788b065f540eea">route_map_add_hook</a> (<a class="code" href="ripd_8c.html#a7fe8e4382651057a9e2f123e8255e053">rip_routemap_update</a>);
  <a class="code" href="routemap_8c.html#a60b69b789fa511ded8504c5b20fb63d4">route_map_delete_hook</a> (<a class="code" href="ripd_8c.html#a7fe8e4382651057a9e2f123e8255e053">rip_routemap_update</a>);

  <a class="code" href="if__rmap_8c.html#acb2b07615aac7f6416f0fa6f4717a4ec">if_rmap_init</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>);
  <a class="code" href="if__rmap_8c.html#a58763bcdfc9073a6e505c1597acc5304">if_rmap_hook_add</a> (<a class="code" href="ripd_8c.html#a777afc491270764251b432a9de68796e">rip_if_rmap_update</a>);
  <a class="code" href="if__rmap_8c.html#acc9bf1191edf4196d213b658034938e6">if_rmap_hook_delete</a> (<a class="code" href="ripd_8c.html#a777afc491270764251b432a9de68796e">rip_if_rmap_update</a>);

  <span class="comment">/* Distance control. */</span>
  rip_distance_table = <a class="code" href="table_8c.html#a9b1d6d715d752d224b322da32d425046">route_table_init</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa10550a1906f12d805d9c3ee5599ad4a"></a><!-- doxytag: member="ripd.c::rip_nexthop_check" ref="aa10550a1906f12d805d9c3ee5599ad4a" args="(struct in_addr *addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_nexthop_check </td>
          <td>(</td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>addr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00336">336</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *cnode;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="comment">/* If nexthop address matches local configured address then it is</span>
<span class="comment">     invalid nexthop. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
    {
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, cnode, ifc))
    {       
      p = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;

      <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET
          &amp;&amp; <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;p-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>, addr))
        <span class="keywordflow">return</span> -1;
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aefc4f415c4c80ce04efebb7798274245"></a><!-- doxytag: member="ripd.c::rip_outgoing_filter" ref="aefc4f415c4c80ce04efebb7798274245" args="(struct prefix_ipv4 *p, struct rip_interface *ri)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_outgoing_filter </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrip__interface.html">rip_interface</a> *&#160;</td>
          <td class="paramname"><em>ri</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00265">265</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structdistribute.html">distribute</a> *dist;
  <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *alist;
  <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;

  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>])
    {
      <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#a83b5e3ef059c0e7db5174e244484224a">list</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>],
                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d is filtered by distribute out&quot;</span>,
               inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      <span class="keywordflow">return</span> -1;
    }
    }
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>])
    {
      <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#ad1cbcc6a615661751602b5c89d73e3cc">prefix</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>],
                 (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d is filtered by prefix-list out&quot;</span>,
               inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      <span class="keywordflow">return</span> -1;
    }
    }

  <span class="comment">/* All interface filter check. */</span>
  dist = <a class="code" href="distribute_8c.html#ad9181c39aaaf02fa3d608dc7b03aecca">distribute_lookup</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  <span class="keywordflow">if</span> (dist)
    {
      <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
    {
      alist = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#ae700fe421ad0a7ec2a039a7d95b94f88">list</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
        
      <span class="keywordflow">if</span> (alist)
        {
          <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (alist,
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by distribute out&quot;</span>,
                   inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
          <span class="keywordflow">return</span> -1;
        }
        }
    }
      <span class="keywordflow">if</span> (dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>])
    {
      plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, dist-&gt;<a class="code" href="structdistribute.html#a54a1f165146de6036335780661bcba89">prefix</a>[<a class="code" href="distribute_8h.html#a1c0e792c3a3f7fbb843cd4f1a3771b47aa34d81eff0dbfb4b601611cb69ffd894">DISTRIBUTE_OUT</a>]);
      
      <span class="keywordflow">if</span> (plist)
        {
          <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (plist,
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p) == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d filtered by prefix-list out&quot;</span>,
                   inet_ntoa (p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>), p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
          <span class="keywordflow">return</span> -1;
        }
        }
    }
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2cdf75c689e315e86c690dd0ae78cd83"></a><!-- doxytag: member="ripd.c::rip_output_process" ref="a2cdf75c689e315e86c690dd0ae78cd83" args="(struct connected *, struct sockaddr_in *, int, u_char)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rip_output_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>ifc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in *&#160;</td>
          <td class="paramname"><em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>route_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>version</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02135">2135</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
  <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> classfull;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> ifaddrclass;
  <span class="keyword">struct </span><a class="code" href="structkey.html">key</a> *<a class="code" href="structkey.html">key</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="comment">/* this might need to made dynamic if RIP ever supported auth methods</span>
<span class="comment">     with larger key string sizes */</span>
  <span class="keywordtype">char</span> auth_str[<a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>];
  <span class="keywordtype">size_t</span> doff = 0; <span class="comment">/* offset of digest offset field */</span>
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a> = 0;
  <span class="keywordtype">int</span> rtemax;
  <span class="keywordtype">int</span> subnetted = 0;

  <span class="comment">/* Logging output event. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
    {
      <span class="keywordflow">if</span> (to)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;update routes to neighbor %s&quot;</span>, inet_ntoa (to-&gt;sin_addr));
      <span class="keywordflow">else</span>
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;update routes on interface %s ifindex %d&quot;</span>,
           ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);
    }

  <span class="comment">/* Set output stream. */</span>
  s = <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0816f2eee75543e57cad83a492541a14">obuf</a>;

  <span class="comment">/* Reset stream and RTE counter. */</span>
  <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
  rtemax = (<a class="code" href="ripd_8h.html#aa54db4e9d7f1bc562bf9054f5502283f">RIP_PACKET_MAXSIZ</a> - 4) / 20;

  <span class="comment">/* Get RIP interface. */</span>
  ri = ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
    
  <span class="comment">/* If output interface is in simple password authentication mode, we</span>
<span class="comment">     need space for authentication data.  */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>)
    rtemax -= 1;

  <span class="comment">/* If output interface is in MD5 authentication mode, we need space</span>
<span class="comment">     for authentication header and data. */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>)
    rtemax -= 2;

  <span class="comment">/* If output interface is in simple password authentication mode</span>
<span class="comment">     and string or keychain is specified we need space for auth. data */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a>)
    {
      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>)
       {
         <span class="keyword">struct </span><a class="code" href="structkeychain.html">keychain</a> *<a class="code" href="structkeychain.html">keychain</a>;

         keychain = <a class="code" href="keychain_8c.html#a0d83c9f26473a5d9ab10051f72471278">keychain_lookup</a> (ri-&gt;<a class="code" href="structrip__interface.html#a7f7f63e0fca1bd718e00e37c59a6c9f5">key_chain</a>);
         <span class="keywordflow">if</span> (keychain)
           key = <a class="code" href="keychain_8c.html#a5a3794a38267952b3be26725ee2bf41e">key_lookup_for_send</a> (keychain);
       }
      <span class="comment">/* to be passed to auth functions later */</span>
      <a class="code" href="ripd_8c.html#a2747a4f7653e3afdccb61a7412fe4555">rip_auth_prepare_str_send</a> (ri, key, auth_str, <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);
    }

  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>)
    {
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifaddrclass, ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>, sizeof (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
      <a class="code" href="prefix_8c.html#a00e9cb624cf0d2526fbc5a48b340d046">apply_classful_mask_ipv4</a> (&amp;ifaddrclass);
      subnetted = 0;
      <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &gt; ifaddrclass.prefixlen)
        subnetted = 1;
    }

  <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <span class="comment">/* For RIPv1, if we are subnetted, output subnets in our network    */</span>
    <span class="comment">/* that have the same mask as the output &quot;interface&quot;. For other     */</span>
    <span class="comment">/* networks, only the classfull version is output.                  */</span>
    
    <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>)
      {
        p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;

        if (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;RIPv1 mask check, %s/%d considered for output&quot;</span>,
            inet_ntoa (rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);

        <span class="keywordflow">if</span> (subnetted &amp;&amp;
        <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;ifaddrclass, &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>))
          {
        <span class="keywordflow">if</span> ((ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> != rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>) &amp;&amp;
            (rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> != 32))
          <span class="keywordflow">continue</span>;
          }
        <span class="keywordflow">else</span>
          {
        <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;classfull, &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
        <a class="code" href="prefix_8c.html#a00e9cb624cf0d2526fbc5a48b340d046">apply_classful_mask_ipv4</a>(&amp;classfull);
        <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr != 0 &amp;&amp;
            classfull.prefixlen != rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
          <span class="keywordflow">continue</span>;
          }
        <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;RIPv1 mask check, %s/%d made it through&quot;</span>,
            inet_ntoa (rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>), rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      }
    <span class="keywordflow">else</span> 
      p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;

    <span class="comment">/* Apply output filters. */</span>
    ret = <a class="code" href="ripd_8c.html#aefc4f415c4c80ce04efebb7798274245">rip_outgoing_filter</a> (p, ri);
    <span class="keywordflow">if</span> (ret &lt; 0)
      <span class="keywordflow">continue</span>;

    <span class="comment">/* Changed route only output. */</span>
    <span class="keywordflow">if</span> (route_type == <a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a875a9ec24e36cc0e1b6b6628dcfe5cdb">rip_changed_route</a> &amp;&amp;
        (! (rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> &amp; <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>)))
      <span class="keywordflow">continue</span>;

    <span class="comment">/* Split horizon. */</span>
    <span class="comment">/* if (split_horizon == rip_split_horizon) */</span>
    <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a916987553fb253517dbba8a1cf4f46e4">split_horizon</a> == <a class="code" href="ripd_8h.html#afbda8c496aa1c117b3d787e59a537311a8d03c9787477893076a75b9af032eeb2">RIP_SPLIT_HORIZON</a>)
      {
        <span class="comment">/* </span>
<span class="comment">         * We perform split horizon for RIP and connected route. </span>
<span class="comment">         * For rip routes, we want to suppress the route if we would</span>
<span class="comment">             * end up sending the route back on the interface that we</span>
<span class="comment">             * learned it from, with a higher metric. For connected routes,</span>
<span class="comment">             * we suppress the route if the prefix is a subset of the</span>
<span class="comment">             * source address that we are going to use for the packet </span>
<span class="comment">             * (in order to handle the case when multiple subnets are</span>
<span class="comment">             * configured on the same interface).</span>
<span class="comment">             */</span>
        <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>  &amp;&amp;
                 rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> == ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>) 
          <span class="keywordflow">continue</span>;
        <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a> &amp;&amp;
                 <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a>((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)p, ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>))
          <span class="keywordflow">continue</span>;
      }

    <span class="comment">/* Preparation for route-map. */</span>
    rinfo-&gt;<a class="code" href="structrip__info.html#a820b94411a405e5f5b7bd69e2afbeafb">metric_set</a> = 0;
    rinfo-&gt;<a class="code" href="structrip__info.html#aa36603c28bc184f689e674ec0bcc84bc">nexthop_out</a>.s_addr = 0;
    rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>;
    rinfo-&gt;<a class="code" href="structrip__info.html#aa73d70cc27289940aeab90f33c16cf77">tag_out</a> = rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a>;
    rinfo-&gt;<a class="code" href="structrip__info.html#ad352959ffc9d687fc8b5b0c8ca6fee93">ifindex_out</a> = ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;

    <span class="comment">/* In order to avoid some local loops,</span>
<span class="comment">     * if the RIP route has a nexthop via this interface, keep the nexthop,</span>
<span class="comment">     * otherwise set it to 0. The nexthop should not be propagated</span>
<span class="comment">     * beyond the local broadcast/multicast area in order</span>
<span class="comment">     * to avoid an IGP multi-level recursive look-up.</span>
<span class="comment">     * see (4.4)</span>
<span class="comment">     */</span>
    <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> == ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>)
      rinfo-&gt;<a class="code" href="structrip__info.html#aa36603c28bc184f689e674ec0bcc84bc">nexthop_out</a> = rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>;

    <span class="comment">/* Interface route-map */</span>
    <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>])
      {
        ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#a8044848cc9edd24265d956b1f92c99da">RIP_FILTER_OUT</a>], 
                     (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370acea1c1ac711770ac85bef02d97449004">RMAP_RIP</a>, 
                     rinfo);

        <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
          {
            <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
              <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIP %s/%d is filtered by route-map out&quot;</span>,
                 inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
          <span class="keywordflow">continue</span>;
          }
      }
           
    <span class="comment">/* Apply redistribute route map - continue, if deny */</span>
    <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>].<a class="code" href="structrip.html#a77a65f4af78afdc1861f3f59ce91fb66">name</a>
        &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> != <a class="code" href="ripd_8h.html#a9dca6cb74820d2f885ed8c71bfd403b9">RIP_ROUTE_INTERFACE</a>)
      {
        ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>].<a class="code" href="structrip.html#af7561ddaf524e0a589d1d67322736460">map</a>,
                   (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)p, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370acea1c1ac711770ac85bef02d97449004">RMAP_RIP</a>, rinfo);

        <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>) 
          {
        <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s/%d is filtered by route-map&quot;</span>,
                 inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
        <span class="keywordflow">continue</span>;
          }
      }

    <span class="comment">/* When route-map does not set metric. */</span>
    <span class="keywordflow">if</span> (! rinfo-&gt;<a class="code" href="structrip__info.html#a820b94411a405e5f5b7bd69e2afbeafb">metric_set</a>)
      {
        <span class="comment">/* If redistribute metric is set. */</span>
        <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>].<a class="code" href="structrip.html#a8ef10c6659dafa9d8912fb31e3c32f12">metric_config</a>
        &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
          {
        rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a>].<a class="code" href="structrip.html#ac0b1115c5dc500cd379f80f17df49f09">metric</a>;
          }
        <span class="keywordflow">else</span>
          {
        <span class="comment">/* If the route is not connected or localy generated</span>
<span class="comment">           one, use default-metric value*/</span>
        <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> != <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> 
            &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>
            &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
          rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#aae8d267db5f4395095062c853bdc1941">default_metric</a>;
          }
      }

    <span class="comment">/* Apply offset-list */</span>
    <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
      <a class="code" href="rip__offset_8c.html#a3dae79279069c2f5ff8cbd0b6fa11e98">rip_offset_list_apply_out</a> (p, ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a>);

    <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> &gt; <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
      rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;

    <span class="comment">/* Perform split-horizon with poisoned reverse </span>
<span class="comment">     * for RIP and connected routes.</span>
<span class="comment">     **/</span>
    <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a916987553fb253517dbba8a1cf4f46e4">split_horizon</a> == <a class="code" href="ripd_8h.html#afbda8c496aa1c117b3d787e59a537311a3173dbae8e62bbbc008f70fac252023b">RIP_SPLIT_HORIZON_POISONED_REVERSE</a>) {
        <span class="comment">/* </span>
<span class="comment">         * We perform split horizon for RIP and connected route. </span>
<span class="comment">         * For rip routes, we want to suppress the route if we would</span>
<span class="comment">             * end up sending the route back on the interface that we</span>
<span class="comment">             * learned it from, with a higher metric. For connected routes,</span>
<span class="comment">             * we suppress the route if the prefix is a subset of the</span>
<span class="comment">             * source address that we are going to use for the packet </span>
<span class="comment">             * (in order to handle the case when multiple subnets are</span>
<span class="comment">             * configured on the same interface).</span>
<span class="comment">             */</span>
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>  &amp;&amp;
           rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> == ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>)
           rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a> &amp;&amp;
              <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a>((<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *)p, ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>))
           rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
    }
    
    <span class="comment">/* Prepare preamble, auth headers, if needs be */</span>
    <span class="keywordflow">if</span> (num == 0)
      {
        <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="ripd_8h.html#abbe6ab2f9449480e4c580b8b5e6d73a4">RIP_RESPONSE</a>);
        <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>);
        <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
        
        <span class="comment">/* auth header for !v1 &amp;&amp; !no_auth */</span>
            <span class="keywordflow">if</span> ( (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a>) &amp;&amp; (<a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a> != <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>) )
              doff = <a class="code" href="ripd_8c.html#a72538cf9bcdaa839156ff1390c6cc2a0">rip_auth_header_write</a> (s, ri, key, auth_str, 
                                              <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);
          }
        
    <span class="comment">/* Write RTE to the stream. */</span>
    num = <a class="code" href="ripd_8c.html#ab360fa2e0affcbafc75309301e75b184">rip_write_rte</a> (num, s, p, <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>, rinfo);
    <span class="keywordflow">if</span> (num == rtemax)
      {
        <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> &amp;&amp; ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>)
              <a class="code" href="ripd_8c.html#a4a48a7de91fb41ecbdfe8be6861c214d">rip_auth_md5_set</a> (s, ri, doff, auth_str, <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);

        ret = <a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> (<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s),
                   to, ifc);

        <span class="keywordflow">if</span> (ret &gt;= 0 &amp;&amp; <a class="code" href="rip__debug_8h.html#a09db8cb831d1c4cc37113a5845391502">IS_RIP_DEBUG_SEND</a>)
          <a class="code" href="ripd_8c.html#a04c8759c650299a52379cfe00f257283">rip_packet_dump</a> ((<span class="keyword">struct</span> <a class="code" href="structrip__packet.html">rip_packet</a> *)<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s),
                   <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a>(s), <span class="stringliteral">&quot;SEND&quot;</span>);
        num = 0;
        <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
      }
      }

  <span class="comment">/* Flush unwritten RTE. */</span>
  <span class="keywordflow">if</span> (num != 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> &amp;&amp; ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>)
        <a class="code" href="ripd_8c.html#a4a48a7de91fb41ecbdfe8be6861c214d">rip_auth_md5_set</a> (s, ri, doff, auth_str, <a class="code" href="ripd_8h.html#a416c1b060f12c63e9d6c80a2e7082272">RIP_AUTH_SIMPLE_SIZE</a>);

      ret = <a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> (<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s), <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s), to, ifc);

      <span class="keywordflow">if</span> (ret &gt;= 0 &amp;&amp; <a class="code" href="rip__debug_8h.html#a09db8cb831d1c4cc37113a5845391502">IS_RIP_DEBUG_SEND</a>)
    <a class="code" href="ripd_8c.html#a04c8759c650299a52379cfe00f257283">rip_packet_dump</a> ((<span class="keyword">struct</span> <a class="code" href="structrip__packet.html">rip_packet</a> *)<a class="code" href="stream_8h.html#afde5f5db208a43da6faf7b830f26d7fc">STREAM_DATA</a> (s),
             <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s), <span class="stringliteral">&quot;SEND&quot;</span>);
      num = 0;
      <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);
    }

  <span class="comment">/* Statistics updates. */</span>
  ri-&gt;<a class="code" href="structrip__interface.html#a8ae4cd2483c6bd6b83d0b43d42dfcc89">sent_updates</a>++;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a04c8759c650299a52379cfe00f257283"></a><!-- doxytag: member="ripd.c::rip_packet_dump" ref="a04c8759c650299a52379cfe00f257283" args="(struct rip_packet *packet, int size, const char *sndrcv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_packet_dump </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrip__packet.html">rip_packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>sndrcv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00697">697</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  caddr_t lim;
  <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
  <span class="keyword">const</span> <span class="keywordtype">char</span> *command_str;
  <span class="keywordtype">char</span> pbuf[BUFSIZ], nbuf[BUFSIZ];
  u_char netmask = 0;
  u_char *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="comment">/* Set command string. */</span>
  <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a> &gt; 0 &amp;&amp; packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a> &lt; <a class="code" href="ripd_8h.html#acba959b48de4cab194205e2bbce22edb">RIP_COMMAND_MAX</a>)
    command_str = <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="ripd_8c.html#acbf78a319ce7a605ba4ab6c76b6ac0f1">rip_msg</a>, packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>);
  <span class="keywordflow">else</span>
    command_str = <span class="stringliteral">&quot;unknown&quot;</span>;

  <span class="comment">/* Dump packet header. */</span>
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s %s version %d packet size %d&quot;</span>,
         sndrcv, command_str, packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>, size);

  <span class="comment">/* Dump each routing table entry. */</span>
  rte = packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;
  
  <span class="keywordflow">for</span> (lim = (caddr_t) packet + size; (caddr_t) rte &lt; lim; rte++)
    {
      <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>)
    {
      netmask = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);

          <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a> == htons (<a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>))
            {
              <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a> == htons (<a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>))
        {
          p = (u_char *)&amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>;

          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  family 0x%X type %d auth string: %s&quot;</span>,
                 ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>), ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
        }
              <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a> == htons (<a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>))
        {
          <span class="keyword">struct </span><a class="code" href="structrip__md5__info.html">rip_md5_info</a> *md5;

          md5 = (<span class="keyword">struct </span><a class="code" href="structrip__md5__info.html">rip_md5_info</a> *) &amp;packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;

          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  family 0x%X type %d (MD5 authentication)&quot;</span>,
                 ntohs (md5-&gt;<a class="code" href="structrip__md5__info.html#a70289921e83ac982f7890a8a18f184d9">family</a>), ntohs (md5-&gt;<a class="code" href="structrip__md5__info.html#a82b1691dcaf7b0532d0a88d5caba79b6">type</a>));
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    RIP-2 packet len %d Key ID %d&quot;</span>
                             <span class="stringliteral">&quot; Auth Data len %d&quot;</span>,
                             ntohs (md5-&gt;<a class="code" href="structrip__md5__info.html#abfcfa2b126c679e644267b084322f9cc">packet_len</a>), md5-&gt;<a class="code" href="structrip__md5__info.html#a5ca9121c92c6ab7c43f339ce2dd5307c">keyid</a>,
                             md5-&gt;<a class="code" href="structrip__md5__info.html#a84616a46d0f48097b0c36dc20cbe7b4b">auth_len</a>);
                  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    Sequence Number %ld&quot;</span>,
                             (u_long) ntohl (md5-&gt;<a class="code" href="structrip__md5__info.html#abf8a2a3c0b0e80e0a5b92a2c705fcbaa">sequence</a>));
        }
              <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a> == htons (<a class="code" href="ripd_8h.html#aba0b4d86f4a1404f2ffa900d4ba2880d">RIP_AUTH_DATA</a>))
        {
          p = (u_char *)&amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>;

          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  family 0x%X type %d (MD5 data)&quot;</span>,
                 ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>), ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>));
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;    MD5: %02X%02X%02X%02X%02X%02X%02X%02X&quot;</span>
                 <span class="stringliteral">&quot;%02X%02X%02X%02X%02X%02X%02X&quot;</span>,
                             p[0], p[1], p[2], p[3], p[4], p[5], p[6],
                             p[7], p[9], p[10], p[11], p[12], p[13],
                             p[14], p[15]);
        }
          <span class="keywordflow">else</span>
        {
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  family 0x%X type %d (Unknown auth type)&quot;</span>,
                 ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>), ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>));
        }
            }
      <span class="keywordflow">else</span>
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  %s/%d -&gt; %s family %d tag %d metric %ld&quot;</span>,
                       <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>, pbuf, BUFSIZ),
                       netmask, <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>, nbuf,
                                           BUFSIZ), ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>),
                       ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>), (u_long) ntohl (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>));
    }
      <span class="keywordflow">else</span>
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  %s family %d tag %d metric %ld&quot;</span>, 
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>, pbuf, BUFSIZ),
             ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>), ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>),
             (u_long)ntohl (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>));
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad6a63ee8163b47ae9167b2220497cd19"></a><!-- doxytag: member="ripd.c::rip_read" ref="ad6a63ee8163b47ae9167b2220497cd19" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_read </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l01811">1811</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> sock;
  <span class="keywordtype">int</span> ret;
  <span class="keywordtype">int</span> rtenum;
  <span class="keyword">union </span><a class="code" href="unionrip__buf.html">rip_buf</a> <a class="code" href="unionrip__buf.html">rip_buf</a>;
  <span class="keyword">struct </span><a class="code" href="structrip__packet.html">rip_packet</a> *packet;
  <span class="keyword">struct </span>sockaddr_in from;
  <span class="keywordtype">int</span> len;
  <span class="keywordtype">int</span> vrecv;
  <a class="code" href="zebra_8h.html#a6b82106923cc13b3a9734520ecc29514">socklen_t</a> fromlen;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
  <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;

  <span class="comment">/* Fetch socket then register myself. */</span>
  sock = <a class="code" href="thread_8h.html#a89bd56f991717646441f9dffc010d4f5">THREAD_FD</a> (t);
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a73ff0450da2dfc1332af7a4b64c1e678">t_read</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Add myself to tne next event */</span>
  <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67af36c3620e53d2176ba96ad1c7632b0ea">RIP_READ</a>, sock);

  <span class="comment">/* RIPd manages only IPv4. */</span>
  memset (&amp;from, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
  fromlen = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);

  len = recvfrom (sock, (<span class="keywordtype">char</span> *)&amp;<a class="code" href="unionrip__buf.html">rip_buf</a>.<a class="code" href="unionrip__buf.html#a08f6622618e7fec36eb60777bafa9113">buf</a>, sizeof (<a class="code" href="unionrip__buf.html">rip_buf</a>.<a class="code" href="unionrip__buf.html#a08f6622618e7fec36eb60777bafa9113">buf</a>), 0, 
          (<span class="keyword">struct</span> sockaddr *) &amp;from, &amp;fromlen);
  <span class="keywordflow">if</span> (len &lt; 0) 
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;recvfrom failed: %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));
      <span class="keywordflow">return</span> len;
    }

  <span class="comment">/* Check is this packet comming from myself? */</span>
  <span class="keywordflow">if</span> (<a class="code" href="rip__interface_8c.html#a11597bd242b65713ee3095d1f62747f6">if_check_address</a> (from.sin_addr)) 
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;ignore packet comes from myself&quot;</span>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Which interface is this packet comes from. */</span>
  ifp = <a class="code" href="if_8c.html#a84f550f6181fac06214b71b6408fc8db">if_lookup_address</a> (from.sin_addr);
  
  <span class="comment">/* RIP packet received */</span>
  <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RECV packet from %s port %d on %s&quot;</span>,
           inet_ntoa (from.sin_addr), ntohs (from.sin_port),
           ifp ? ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a> : <span class="stringliteral">&quot;unknown&quot;</span>);

  <span class="comment">/* If this packet come from unknown interface, ignore it. */</span>
  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;rip_read: cannot find interface for packet from %s port %d&quot;</span>,
         inet_ntoa(from.sin_addr), ntohs (from.sin_port));
      <span class="keywordflow">return</span> -1;
    }
  
  ifc = <a class="code" href="if_8c.html#a7cea5b88a9e4c0abf48f9951090e5fad">connected_lookup_address</a> (ifp, from.sin_addr);
  
  <span class="keywordflow">if</span> (ifc == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;rip_read: cannot find connected address for packet from %s &quot;</span>
         <span class="stringliteral">&quot;port %d on interface %s&quot;</span>,
         inet_ntoa(from.sin_addr), ntohs (from.sin_port), ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Packet length check. */</span>
  <span class="keywordflow">if</span> (len &lt; <a class="code" href="ripd_8h.html#a4bce9a98acde5e1336e168acee777611">RIP_PACKET_MINSIZ</a>)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;packet size %d is smaller than minimum size %d&quot;</span>,
         len, <a class="code" href="ripd_8h.html#a4bce9a98acde5e1336e168acee777611">RIP_PACKET_MINSIZ</a>);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> len;
    }
  <span class="keywordflow">if</span> (len &gt; <a class="code" href="ripd_8h.html#aa54db4e9d7f1bc562bf9054f5502283f">RIP_PACKET_MAXSIZ</a>)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;packet size %d is larger than max size %d&quot;</span>,
         len, <a class="code" href="ripd_8h.html#aa54db4e9d7f1bc562bf9054f5502283f">RIP_PACKET_MAXSIZ</a>);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> len;
    }

  <span class="comment">/* Packet alignment check. */</span>
  <span class="keywordflow">if</span> ((len - <a class="code" href="ripd_8h.html#a4bce9a98acde5e1336e168acee777611">RIP_PACKET_MINSIZ</a>) % 20)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;packet size %d is wrong for RIP packet alignment&quot;</span>, len);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> len;
    }

  <span class="comment">/* Set RTE number. */</span>
  rtenum = ((len - <a class="code" href="ripd_8h.html#a4bce9a98acde5e1336e168acee777611">RIP_PACKET_MINSIZ</a>) / 20);

  <span class="comment">/* For easy to handle. */</span>
  packet = &amp;<a class="code" href="unionrip__buf.html">rip_buf</a>.<a class="code" href="unionrip__buf.html#aaed1e67902409b16f0e828be9253fa40">rip_packet</a>;

  <span class="comment">/* RIP version check. */</span>
  <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == 0)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;version 0 with command %d received.&quot;</span>, packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* Dump RIP packet. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#a7d78e8576999bfd218cd4e507cb28b13">IS_RIP_DEBUG_RECV</a>)
    <a class="code" href="ripd_8c.html#a04c8759c650299a52379cfe00f257283">rip_packet_dump</a> (packet, len, <span class="stringliteral">&quot;RECV&quot;</span>);

  <span class="comment">/* RIP version adjust.  This code should rethink now.  RFC1058 says</span>
<span class="comment">     that &quot;Version 1 implementations are to ignore this extra data and</span>
<span class="comment">     process only the fields specified in this document.&quot;. So RIPv3</span>
<span class="comment">     packet should be treated as RIPv1 ignoring must be zero field. */</span>
  <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> &gt; <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>)
    packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> = <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>;

  <span class="comment">/* Is RIP running or is this RIP neighbor ?*/</span>
  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
  <span class="keywordflow">if</span> (! ri-&gt;<a class="code" href="structrip__interface.html#a29f1e7ea828dc3950b72ea63bc7068a4">running</a> &amp;&amp; ! <a class="code" href="rip__interface_8c.html#aecc9390988d294a78325bd067e4315b1">rip_neighbor_lookup</a> (&amp;from))
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIP is not enabled on interface %s.&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> -1;
    }

  <span class="comment">/* RIP Version check. RFC2453, 4.6 and 5.1 */</span>
  vrecv = ((ri-&gt;<a class="code" href="structrip__interface.html#a0e1c83b8a992c8dd3d861dc9a90fc105">ri_receive</a> == <a class="code" href="ripd_8h.html#acaf07e083e328ebe0df4c436655a4d66">RI_RIP_UNSPEC</a>) ?
           <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af256b2bcd5e3ed76265b8b7b52cba19d">version_recv</a> : ri-&gt;<a class="code" href="structrip__interface.html#a0e1c83b8a992c8dd3d861dc9a90fc105">ri_receive</a>);
  <span class="keywordflow">if</span> ((packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>) &amp;&amp; !(vrecv &amp; <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  packet&#39;s v%d doesn&#39;t fit to if version spec&quot;</span>, 
                   packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> -1;
    }
  <span class="keywordflow">if</span> ((packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>) &amp;&amp; !(vrecv &amp; <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>))
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;  packet&#39;s v%d doesn&#39;t fit to if version spec&quot;</span>, 
                   packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> -1;
    }
  
  <span class="comment">/* RFC2453 5.2 If the router is not configured to authenticate RIP-2</span>
<span class="comment">     messages, then RIP-1 and unauthenticated RIP-2 messages will be</span>
<span class="comment">     accepted; authenticated RIP-2 messages shall be discarded.  */</span>
  <span class="keywordflow">if</span> ((ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> == <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a>) 
      &amp;&amp; rtenum 
      &amp;&amp; (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == RIPv2) 
      &amp;&amp; (packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a> == htons(<a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>)))
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;packet RIPv%d is dropped because authentication disabled&quot;</span>, 
           packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> -1;
    }
  
  <span class="comment">/* RFC:</span>
<span class="comment">     If the router is configured to authenticate RIP-2 messages, then</span>
<span class="comment">     RIP-1 messages and RIP-2 messages which pass authentication</span>
<span class="comment">     testing shall be accepted; unauthenticated and failed</span>
<span class="comment">     authentication RIP-2 messages shall be discarded.  For maximum</span>
<span class="comment">     security, RIP-1 messages should be ignored when authentication is</span>
<span class="comment">     in use (see section 4.1); otherwise, the routing information from</span>
<span class="comment">     authenticated messages will be propagated by RIP-1 routers in an</span>
<span class="comment">     unauthenticated manner. </span>
<span class="comment">  */</span>
  <span class="comment">/* We make an exception for RIPv1 REQUEST packets, to which we&#39;ll</span>
<span class="comment">   * always reply regardless of authentication settings, because:</span>
<span class="comment">   *</span>
<span class="comment">   * - if there other authorised routers on-link, the REQUESTor can</span>
<span class="comment">   *   passively obtain the routing updates anyway</span>
<span class="comment">   * - if there are no other authorised routers on-link, RIP can</span>
<span class="comment">   *   easily be disabled for the link to prevent giving out information</span>
<span class="comment">   *   on state of this routers RIP routing table..</span>
<span class="comment">   *</span>
<span class="comment">   * I.e. if RIPv1 has any place anymore these days, it&#39;s as a very</span>
<span class="comment">   * simple way to distribute routing information (e.g. to embedded</span>
<span class="comment">   * hosts / appliances) and the ability to give out RIPv1</span>
<span class="comment">   * routing-information freely, while still requiring RIPv2</span>
<span class="comment">   * authentication for any RESPONSEs might be vaguely useful.</span>
<span class="comment">   */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a> 
      &amp;&amp; packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>)
    {
      <span class="comment">/* Discard RIPv1 messages other than REQUESTs */</span>
      <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a> != <a class="code" href="ripd_8h.html#ac4d0419fac5cd68dfee1bb1920e9689e">RIP_REQUEST</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv1&quot;</span> <span class="stringliteral">&quot; dropped because authentication enabled&quot;</span>);
          <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
          <span class="keywordflow">return</span> -1;
        }
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a0257a8ee9c1b13cc61cfa757198f368b">auth_type</a> != <a class="code" href="ripd_8h.html#a1aa482a016c7508b8859e9f844a26745">RIP_NO_AUTH</a>)
    {
      <span class="keyword">const</span> <span class="keywordtype">char</span> *auth_desc;
      
      <span class="keywordflow">if</span> (rtenum == 0)
        {
          <span class="comment">/* There definitely is no authentication in the packet. */</span>
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 authentication failed: no auth RTE in packet&quot;</span>);
          <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
          <span class="keywordflow">return</span> -1;
        }
      
      <span class="comment">/* First RTE must be an Authentication Family RTE */</span>
      <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a> != htons(<a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>))
        {
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2&quot;</span> <span class="stringliteral">&quot; dropped because authentication enabled&quot;</span>);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">return</span> -1;
        }
      
      <span class="comment">/* Check RIPv2 authentication. */</span>
      <span class="keywordflow">switch</span> (ntohs(packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>))
        {
          <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a86813edeae29aec9fd09225ec2ffce06">RIP_AUTH_SIMPLE_PASSWORD</a>:
            auth_desc = <span class="stringliteral">&quot;simple&quot;</span>;
            ret = <a class="code" href="ripd_8c.html#a2c3068b4df03ffa8845f74323ddfabcd">rip_auth_simple_password</a> (packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>, &amp;from, ifp);
            <span class="keywordflow">break</span>;
          
          <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#ab61c9a8dabe199762ba1879d9e48a12b">RIP_AUTH_MD5</a>:
            auth_desc = <span class="stringliteral">&quot;MD5&quot;</span>;
            ret = <a class="code" href="ripd_8c.html#a6f2010a631def9499b1db67a697568a2">rip_auth_md5</a> (packet, &amp;from, len, ifp);
            <span class="comment">/* Reset RIP packet length to trim MD5 data. */</span>
            len = ret;
            <span class="keywordflow">break</span>;
          
          <span class="keywordflow">default</span>:
            ret = 0;
            auth_desc = <span class="stringliteral">&quot;unknown type&quot;</span>;
            <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
              <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 Unknown authentication type %d&quot;</span>,
                          ntohs (packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>));
        }
      
      <span class="keywordflow">if</span> (ret)
        {
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 %s authentication success&quot;</span>, auth_desc);
        }
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIPv2 %s authentication failure&quot;</span>, auth_desc);
          <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
          <span class="keywordflow">return</span> -1;
        }
    }
  
  <span class="comment">/* Process each command. */</span>
  <span class="keywordflow">switch</span> (packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>)
    {
    <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#abbe6ab2f9449480e4c580b8b5e6d73a4">RIP_RESPONSE</a>:
      <a class="code" href="ripd_8c.html#a736ea390d3ed633046eb5c320ac21f30">rip_response_process</a> (packet, len, &amp;from, ifc);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#ac4d0419fac5cd68dfee1bb1920e9689e">RIP_REQUEST</a>:
    <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a8f9db168b5c1d9e7b229df2919976f1b">RIP_POLL</a>:
      <a class="code" href="ripd_8c.html#a41f9224825b265801d88ca8dad67b8d2">rip_request_process</a> (packet, len, &amp;from, ifc);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a6a7ceb19e2a34e38de55d31b0bcf4e60">RIP_TRACEON</a>:
    <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a3b1ad5694c2b14ab3dd843178e03c878">RIP_TRACEOFF</a>:
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Obsolete command %s received, please sent it to routed&quot;</span>, 
         <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="ripd_8c.html#acbf78a319ce7a605ba4ab6c76b6ac0f1">rip_msg</a>, packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>));
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a2a1e079e9594db598a6ed6e25e1564d9">RIP_POLL_ENTRY</a>:
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Obsolete command %s received&quot;</span>, 
         <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (<a class="code" href="ripd_8c.html#acbf78a319ce7a605ba4ab6c76b6ac0f1">rip_msg</a>, packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>));
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Unknown RIP command %d received&quot;</span>, packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a>);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (&amp;from);
      <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">return</span> len;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae2c5c932284eca5a2ee4ca2dfdf248ac"></a><!-- doxytag: member="ripd.c::rip_redistribute_add" ref="ae2c5c932284eca5a2ee4ca2dfdf248ac" args="(int type, int sub_type, struct prefix_ipv4 *p, unsigned int ifindex, struct in_addr *nexthop, unsigned int metric, unsigned char distance)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rip_redistribute_add </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sub_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>nexthop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>metric</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>distance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l01516">1516</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;

  <span class="comment">/* Redistribute route  */</span>
  ret = <a class="code" href="ripd_8c.html#a7b77dd9cb3d1dec4bcfd49dd7f69cf2d">rip_destination_check</a> (p-&gt;prefix);
  <span class="keywordflow">if</span> (! ret)
    <span class="keywordflow">return</span>;

  rp = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);

  rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

  <span class="keywordflow">if</span> (rinfo)
    {
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a> 
      &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a9dca6cb74820d2f885ed8c71bfd403b9">RIP_ROUTE_INTERFACE</a>
      &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
      <span class="keywordflow">return</span>;
    }

      <span class="comment">/* Manually configured RIP route check. */</span>
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> 
      &amp;&amp; ((rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>) ||
          (rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#aebaf1d3e550cd8b70cf9ed9f435e72af">RIP_ROUTE_DEFAULT</a>)) )
    {
      <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> != <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> || ((<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> != <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>) &amp;&amp;
                                      (<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> != <a class="code" href="ripd_8h.html#aebaf1d3e550cd8b70cf9ed9f435e72af">RIP_ROUTE_DEFAULT</a>)))
        {
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
          <span class="keywordflow">return</span>;
        }
    }

      <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
      <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>);

      <span class="keywordflow">if</span> (<a class="code" href="ripd_8c.html#acfdc2cf7ec0359b1fabb24e48f5f0dee">rip_route_rte</a> (rinfo))
    <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>,
                   rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
      rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      <a class="code" href="ripd_8c.html#adc7ff2705d42a1ee587b92bbfc256f86">rip_info_free</a> (rinfo);
      
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);      
    }

  rinfo = <a class="code" href="ripd_8c.html#a3c9e3f9e1fee01f622533b045fa090aa">rip_info_new</a> ();
    
  rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> = <a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a>;
  rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> = <a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a>;
  rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = 1;
  rinfo-&gt;<a class="code" href="structrip__info.html#a6c396a30341482a9f1d3e242293ec516">external_metric</a> = <a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>;
  rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a> = <a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html">nexthop</a>)
    rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a> = *<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>;

  rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;
  rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rinfo;

  rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;

  <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>) {
    <span class="keywordflow">if</span> (!<a class="code" href="structnexthop.html">nexthop</a>)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute new prefix %s/%d on the interface %s&quot;</span>,
                 inet_ntoa(p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
                 <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a>));
    <span class="keywordflow">else</span>
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute new prefix %s/%d with nexthop %s on the interface %s&quot;</span>,
                 inet_ntoa(p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, inet_ntoa(rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>),
                 <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a>));
  }


  <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a33825a788df0587a784f9eb7d1d667d7"></a><!-- doxytag: member="ripd.c::rip_redistribute_delete" ref="a33825a788df0587a784f9eb7d1d667d7" args="(int type, int sub_type, struct prefix_ipv4 *p, unsigned int ifindex)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rip_redistribute_delete </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sub_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l01603">1603</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;

  ret = <a class="code" href="ripd_8c.html#a7b77dd9cb3d1dec4bcfd49dd7f69cf2d">rip_destination_check</a> (p-&gt;prefix);
  <span class="keywordflow">if</span> (! ret)
    <span class="keywordflow">return</span>;

  rp = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);
  <span class="keywordflow">if</span> (rp)
    {
      rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

      <span class="keywordflow">if</span> (rinfo != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>
      &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> 
      &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> 
      &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> == <a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a>)
    {
      <span class="comment">/* Perform poisoned reverse. */</span>
      rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
      <a class="code" href="ripd_8h.html#ac82fe6284825b1b8ac9e1323196e96c4">RIP_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>, 
            <a class="code" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">rip_garbage_collect</a>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>);
      <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
      rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;

          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Poisone %s/%d on the interface %s with an infinity metric [delete]&quot;</span>,
                       inet_ntoa(p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
                       <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a>));

      <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a31999532d8eff8b34771b8c0d40379f1"></a><!-- doxytag: member="ripd.c::rip_redistribute_withdraw" ref="a31999532d8eff8b34771b8c0d40379f1" args="(int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rip_redistribute_withdraw </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02661">2661</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;

  <span class="keywordflow">if</span> (!<a class="code" href="structrip.html">rip</a>)
    <span class="keywordflow">return</span>;

  <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> ((rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>
        &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> != <a class="code" href="ripd_8h.html#a9dca6cb74820d2f885ed8c71bfd403b9">RIP_ROUTE_INTERFACE</a>)
      {
        <span class="comment">/* Perform poisoned reverse. */</span>
        rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
        <a class="code" href="ripd_8h.html#ac82fe6284825b1b8ac9e1323196e96c4">RIP_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>, 
              <a class="code" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">rip_garbage_collect</a>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>);
        <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
        rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;

        <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>) {
              <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;

              <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Poisone %s/%d on the interface %s with an infinity metric [withdraw]&quot;</span>,
                         inet_ntoa(p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
                         <a class="code" href="if_8c.html#a788f6c1b52cee08e687d34b9f8230960">ifindex2ifname</a>(rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a>));
        }

        <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);
      }
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a41f9224825b265801d88ca8dad67b8d2"></a><!-- doxytag: member="ripd.c::rip_request_process" ref="a41f9224825b265801d88ca8dad67b8d2" args="(struct rip_packet *packet, int size, struct sockaddr_in *from, struct connected *ifc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_request_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrip__packet.html">rip_packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>ifc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l01643">1643</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  caddr_t lim;
  <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
  <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;

  <span class="comment">/* Does not reponse to the requests on the loopback interfaces */</span>
  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>))
    <span class="keywordflow">return</span>;

  <span class="comment">/* Check RIP process is enabled on this interface. */</span>
  ri = ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;
  <span class="keywordflow">if</span> (! ri-&gt;<a class="code" href="structrip__interface.html#a29f1e7ea828dc3950b72ea63bc7068a4">running</a>)
    <span class="keywordflow">return</span>;

  <span class="comment">/* When passive interface is specified, suppress responses */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#aa624d6a89ab2dcd614cc0fb89e08febf">passive</a>)
    <span class="keywordflow">return</span>;
  
  <span class="comment">/* RIP peer update. */</span>
  <a class="code" href="rip__peer_8c.html#aa7cc288ea45c0c2961f86ee2aff648ad">rip_peer_update</a> (from, packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);

  lim = ((caddr_t) packet) + size;
  rte = packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;

  <span class="comment">/* The Request is processed entry by entry.  If there are no</span>
<span class="comment">     entries, no response is given. */</span>
  <span class="keywordflow">if</span> (lim == (caddr_t) rte)
    <span class="keywordflow">return</span>;

  <span class="comment">/* There is one special case.  If there is exactly one entry in the</span>
<span class="comment">     request, and it has an address family identifier of zero and a</span>
<span class="comment">     metric of infinity (i.e., 16), then this is a request to send the</span>
<span class="comment">     entire routing table. */</span>
  <span class="keywordflow">if</span> (lim == ((caddr_t) (rte + 1)) &amp;&amp;
      ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>) == 0 &amp;&amp;
      ntohl (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>) == <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
    {   
      <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> saddr;

      <span class="comment">/* saddr will be used for determining which routes to split-horizon.</span>
<span class="comment">         Since the source address we&#39;ll pick will be on the same subnet as the</span>
<span class="comment">         destination, for the purpose of split-horizoning, we&#39;ll</span>
<span class="comment">         pretend that &quot;from&quot; is our source address.  */</span>
      saddr.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
      saddr.prefixlen = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
      saddr.prefix = from-&gt;sin_addr;

      <span class="comment">/* All route with split horizon */</span>
      <a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (ifc, from, <a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a500d4c9125340f27abf4fa013f88dab6">rip_all_route</a>, packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* Examine the list of RTEs in the Request one by one.  For each</span>
<span class="comment">     entry, look up the destination in the router&#39;s routing</span>
<span class="comment">     database and, if there is a route, put that route&#39;s metric in</span>
<span class="comment">     the metric field of the RTE.  If there is no explicit route</span>
<span class="comment">     to the specified destination, put infinity in the metric</span>
<span class="comment">     field.  Once all the entries have been filled in, change the</span>
<span class="comment">     command from Request to Response and send the datagram back</span>
<span class="comment">     to the requestor. */</span>
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;

      <span class="keywordflow">for</span> (; ((caddr_t) rte) &lt; lim; rte++)
    {
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>;
      <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
      <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
      
      rp = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
      <span class="keywordflow">if</span> (rp)
        {
          rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
          rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = htonl (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
        }
      <span class="keywordflow">else</span>
        rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = htonl (<a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>);
    }
      packet-&gt;<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a> = <a class="code" href="ripd_8h.html#abbe6ab2f9449480e4c580b8b5e6d73a4">RIP_RESPONSE</a>;

      <a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> ((u_char *)packet, size, from, ifc);
    }
  <a class="code" href="ripd_8c.html#acee583ab67011897c4887052fdb3645d">rip_global_queries</a>++;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5f5073229c1fb623b39ad4ce7cb97a6b"></a><!-- doxytag: member="ripd.c::rip_request_send" ref="a5f5073229c1fb623b39ad4ce7cb97a6b" args="(struct sockaddr_in *to, struct interface *ifp, u_char version, struct connected *connected)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rip_request_send </td>
          <td>(</td>
          <td class="paramtype">struct sockaddr_in *&#160;</td>
          <td class="paramname"><em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>version</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>connected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02731">2731</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
  <span class="keyword">struct </span><a class="code" href="structrip__packet.html">rip_packet</a> <a class="code" href="structrip__packet.html">rip_packet</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  memset (&amp;<a class="code" href="structrip__packet.html">rip_packet</a>, 0, <span class="keyword">sizeof</span> (<a class="code" href="structrip__packet.html">rip_packet</a>));

  <a class="code" href="structrip__packet.html">rip_packet</a>.<a class="code" href="structrip__packet.html#a11022275cd2fb2aac2f0efac0a1e95d7">command</a> = <a class="code" href="ripd_8h.html#ac4d0419fac5cd68dfee1bb1920e9689e">RIP_REQUEST</a>;
  <a class="code" href="structrip__packet.html">rip_packet</a>.<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> = <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>;
  rte = <a class="code" href="structrip__packet.html">rip_packet</a>.<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;
  rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = htonl (<a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>);

  <span class="keywordflow">if</span> (connected) 
    {
      <span class="comment">/* </span>
<span class="comment">       * connected is only sent for ripv1 case, or when</span>
<span class="comment">       * interface does not support multicast.  Caller loops</span>
<span class="comment">       * over each connected address for this case.</span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> ((u_char *) &amp;<a class="code" href="structrip__packet.html">rip_packet</a>, <span class="keyword">sizeof</span> (rip_packet), 
                            to, connected) != <span class="keyword">sizeof</span> (rip_packet))
        <span class="keywordflow">return</span> -1;
      <span class="keywordflow">else</span>
        <span class="keywordflow">return</span> <span class="keyword">sizeof</span> (rip_packet);
    }
    
  <span class="comment">/* send request on each connected network */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node, nnode, connected))
    {
      <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

      p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) connected-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>;

      if (p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> != AF_INET)
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (<a class="code" href="ripd_8c.html#a9cff59eb2b945f909867abf10c0e44ac">rip_send_packet</a> ((u_char *) &amp;rip_packet, <span class="keyword">sizeof</span> (rip_packet), 
                            to, connected) != <span class="keyword">sizeof</span> (rip_packet))
        <span class="keywordflow">return</span> -1;
    }
  <span class="keywordflow">return</span> <span class="keyword">sizeof</span> (rip_packet);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad0719c9e4912274a9a600527cb16925b"></a><!-- doxytag: member="ripd.c::rip_reset" ref="ad0719c9e4912274a9a600527cb16925b" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rip_reset </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03878">3878</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Reset global counters. */</span>
  <a class="code" href="ripd_8c.html#aee2f7ac8649bf74e5d65e6bb98e495cc">rip_global_route_changes</a> = 0;
  <a class="code" href="ripd_8c.html#acee583ab67011897c4887052fdb3645d">rip_global_queries</a> = 0;

  <span class="comment">/* Call ripd related reset functions. */</span>
  <a class="code" href="rip__debug_8c.html#aff9125716ba999485b737a20e13318cf">rip_debug_reset</a> ();
  <a class="code" href="ripd_8h.html#a9de464d4463f1399091a4c99cdd26c33">rip_route_map_reset</a> ();

  <span class="comment">/* Call library reset functions. */</span>
  <a class="code" href="vty_8c.html#a637ad9b0152e5e5559bc0c05db07318e">vty_reset</a> ();
  <a class="code" href="filter_8c.html#a6d46b3b0526d8e0e8dbed60d7f6a695d">access_list_reset</a> ();
  <a class="code" href="plist_8c.html#a6d3ae1194d033d0d7cf9c3b54a7542ac">prefix_list_reset</a> ();

  <a class="code" href="distribute_8c.html#a58b49387fef55775ead5abc2e2c8d22a">distribute_list_reset</a> ();

  <a class="code" href="rip__interface_8c.html#a0931e33846558aa5bb25576a64e5236a">rip_interface_reset</a> ();
  <a class="code" href="ripd_8c.html#a3d2210c2851480c4f92c76242b6bdc7f">rip_distance_reset</a> ();

  <a class="code" href="rip__zebra_8c.html#a5791dae6dd88616ca369075b1154481b">rip_zclient_reset</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a736ea390d3ed633046eb5c320ac21f30"></a><!-- doxytag: member="ripd.c::rip_response_process" ref="a736ea390d3ed633046eb5c320ac21f30" args="(struct rip_packet *packet, int size, struct sockaddr_in *from, struct connected *ifc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_response_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrip__packet.html">rip_packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>ifc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l01102">1102</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  caddr_t lim;
  <span class="keyword">struct </span><a class="code" href="structrte.html">rte</a> *<a class="code" href="structrte.html">rte</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> ifaddr;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> ifaddrclass;
  <span class="keywordtype">int</span> subnetted;
      
  <span class="comment">/* We don&#39;t know yet. */</span>
  subnetted = -1;

  <span class="comment">/* The Response must be ignored if it is not from the RIP</span>
<span class="comment">     port. (RFC2453 - Sec. 3.9.2)*/</span>
  <span class="keywordflow">if</span> (from-&gt;sin_port != htons(<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>))
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;response doesn&#39;t come from RIP port: %d&quot;</span>,
         from-&gt;sin_port);
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (from);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* The datagram&#39;s IPv4 source address should be checked to see</span>
<span class="comment">     whether the datagram is from a valid neighbor; the source of the</span>
<span class="comment">     datagram must be on a directly connected network (RFC2453 - Sec. 3.9.2) */</span>
  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a84f550f6181fac06214b71b6408fc8db">if_lookup_address</a>(from-&gt;sin_addr) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) 
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;This datagram doesn&#39;t came from a valid neighbor: %s&quot;</span>,
         inet_ntoa (from-&gt;sin_addr));
      <a class="code" href="rip__peer_8c.html#a295ee2311f834371d030633e9cc0b2f5">rip_peer_bad_packet</a> (from);
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* It is also worth checking to see whether the response is from one</span>
<span class="comment">     of the router&#39;s own addresses. */</span>

  ; <span class="comment">/* Alredy done in rip_read () */</span>

  <span class="comment">/* Update RIP peer. */</span>
  <a class="code" href="rip__peer_8c.html#aa7cc288ea45c0c2961f86ee2aff648ad">rip_peer_update</a> (from, packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a>);

  <span class="comment">/* Set RTE pointer. */</span>
  rte = packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a>;

  <span class="keywordflow">for</span> (lim = (caddr_t) packet + size; (caddr_t) rte &lt; lim; rte++)
    {
      <span class="comment">/* RIPv2 authentication check. */</span>
      <span class="comment">/* If the Address Family Identifier of the first (and only the</span>
<span class="comment">     first) entry in the message is 0xFFFF, then the remainder of</span>
<span class="comment">     the entry contains the authentication. */</span>
      <span class="comment">/* If the packet gets here it means authentication enabled */</span>
      <span class="comment">/* Check is done in rip_read(). So, just skipping it */</span>
      <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> &amp;&amp;
      rte == packet-&gt;<a class="code" href="structrip__packet.html#a6f50603dfe4c82e445382e13d0e95460">rte</a> &amp;&amp;
      rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a> == htons(<a class="code" href="ripd_8h.html#a8a1072bf2166bd2c9924765f44e8c5a4">RIP_FAMILY_AUTH</a>))
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a> != htons(AF_INET))
    {
      <span class="comment">/* Address family check.  RIP only supports AF_INET. */</span>
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Unsupported family %d from %s.&quot;</span>,
             ntohs (rte-&gt;<a class="code" href="structrte.html#a39c8873ab24aecf8037a56bb94b8b2a1">family</a>), inet_ntoa (from-&gt;sin_addr));
      <span class="keywordflow">continue</span>;
    }

      <span class="comment">/* - is the destination address valid (e.g., unicast; not net 0</span>
<span class="comment">         or 127) */</span>
      <span class="keywordflow">if</span> (! <a class="code" href="ripd_8c.html#a7b77dd9cb3d1dec4bcfd49dd7f69cf2d">rip_destination_check</a> (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>))
        {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Network is net 0 or net 127 or it is not unicast network&quot;</span>);
      <a class="code" href="rip__peer_8c.html#a6a38f0b9d042a51ce833b0810eb97dc8">rip_peer_bad_route</a> (from);
      <span class="keywordflow">continue</span>;
    } 

      <span class="comment">/* Convert metric value to host byte order. */</span>
      rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = ntohl (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>);

      <span class="comment">/* - is the metric valid (i.e., between 1 and 16, inclusive) */</span>
      <span class="keywordflow">if</span> (! (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &gt;= 1 &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &lt;= 16))
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Route&#39;s metric is not in the 1-16 range.&quot;</span>);
      <a class="code" href="rip__peer_8c.html#a6a38f0b9d042a51ce833b0810eb97dc8">rip_peer_bad_route</a> (from);
      <span class="keywordflow">continue</span>;
    }

      <span class="comment">/* RIPv1 does not have nexthop value. */</span>
      <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a> &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr != 0)
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;RIPv1 packet with nexthop value %s&quot;</span>,
             inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>));
      <a class="code" href="rip__peer_8c.html#a6a38f0b9d042a51ce833b0810eb97dc8">rip_peer_bad_route</a> (from);
      <span class="keywordflow">continue</span>;
    }

      <span class="comment">/* That is, if the provided information is ignored, a possibly</span>
<span class="comment">     sub-optimal, but absolutely valid, route may be taken.  If</span>
<span class="comment">     the received Next Hop is not directly reachable, it should be</span>
<span class="comment">     treated as 0.0.0.0. */</span>
      <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr != 0)
    {
      u_int32_t addrval;

      <span class="comment">/* Multicast address check. */</span>
      addrval = ntohl (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr);
      <span class="keywordflow">if</span> (IN_CLASSD (addrval))
        {
          <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Nexthop %s is multicast address, skip this rte&quot;</span>,
             inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>));
          <span class="keywordflow">continue</span>;
        }

      <span class="keywordflow">if</span> (! <a class="code" href="if_8c.html#a84f550f6181fac06214b71b6408fc8db">if_lookup_address</a> (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>))
        {
          <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
          <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;

          rn = <a class="code" href="table_8c.html#a9c0fd90aeeed01fb5b5301c98f642a95">route_node_match_ipv4</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>, &amp;rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>);

          <span class="keywordflow">if</span> (rn)
        {
          rinfo = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

          <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>
              &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>)
            {
              <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Next hop %s is on RIP network.  Set nexthop to the packet&#39;s originator&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>));
              rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a> = rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>;
            }
          <span class="keywordflow">else</span>
            {
              <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Next hop %s is not directly reachable. Treat it as 0.0.0.0&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>));
              rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr = 0;
            }

          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
        }
          <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Next hop %s is not directly reachable. Treat it as 0.0.0.0&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>));
          rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr = 0;
        }

        }
    }

     <span class="comment">/* For RIPv1, there won&#39;t be a valid netmask.  </span>
<span class="comment"></span>
<span class="comment">    This is a best guess at the masks.  If everyone was using old</span>
<span class="comment">    Ciscos before the &#39;ip subnet zero&#39; option, it would be almost</span>
<span class="comment">    right too :-)</span>
<span class="comment">      </span>
<span class="comment">    Cisco summarize ripv1 advertisments to the classful boundary</span>
<span class="comment">    (/16 for class B&#39;s) except when the RIP packet does to inside</span>
<span class="comment">    the classful network in question.  */</span>

      <span class="keywordflow">if</span> ((packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a> &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr != 0) 
      || (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> 
          &amp;&amp; (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr != 0 &amp;&amp; rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr == 0)))
    {
      u_int32_t destination;

      <span class="keywordflow">if</span> (subnetted == -1)
            {
              <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifaddr, ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>, sizeof (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
              <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;ifaddrclass, &amp;ifaddr, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
              <a class="code" href="prefix_8c.html#a00e9cb624cf0d2526fbc5a48b340d046">apply_classful_mask_ipv4</a> (&amp;ifaddrclass);
              subnetted = 0;
              <span class="keywordflow">if</span> (ifaddr.prefixlen &gt; ifaddrclass.prefixlen)
                subnetted = 1;
            }

      destination = ntohl (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr);

      <span class="keywordflow">if</span> (IN_CLASSA (destination))
          <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (8, &amp;rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IN_CLASSB (destination))
          <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (16, &amp;rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IN_CLASSC (destination))
          <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (24, &amp;rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);

      <span class="keywordflow">if</span> (subnetted == 1)
        <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (ifaddrclass.prefixlen,
            (<span class="keyword">struct</span> in_addr *) &amp;destination);
      <span class="keywordflow">if</span> ((subnetted == 1) &amp;&amp; ((rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr &amp; destination) ==
          ifaddrclass.prefix.s_addr))
        {
          <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (ifaddr.prefixlen, &amp;rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
          <span class="keywordflow">if</span> ((rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr &amp; rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr) != rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr)
        <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (32, &amp;rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Subnetted route %s&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>));
        }
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> ((rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr &amp; rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr) != rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr)
        <span class="keywordflow">continue</span>;
        }

      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
        {
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Resultant route %s&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>));
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Resultant mask %s&quot;</span>, inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>));
        }
    }

      <span class="comment">/* In case of RIPv2, if prefix in RTE is not netmask applied one</span>
<span class="comment">         ignore the entry.  */</span>
      <span class="keywordflow">if</span> ((packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>) 
      &amp;&amp; (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr != 0) 
      &amp;&amp; ((rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr &amp; rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr) != rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr))
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;RIPv2 address %s is not mask /%d applied one&quot;</span>,
             inet_ntoa (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>), <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>));
      <a class="code" href="rip__peer_8c.html#a6a38f0b9d042a51ce833b0810eb97dc8">rip_peer_bad_route</a> (<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>);
      <span class="keywordflow">continue</span>;
    }

      <span class="comment">/* Default route&#39;s netmask is ignored. */</span>
      <span class="keywordflow">if</span> (packet-&gt;<a class="code" href="structrip__packet.html#a5e148757df119148ba3e058659558b01">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>
      &amp;&amp; (rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>.s_addr == 0)
      &amp;&amp; (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr != 0))
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Default route with non-zero netmask.  Set zero to netmask&quot;</span>);
      rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>.s_addr = 0;
    }
      
      <span class="comment">/* Routing table updates. */</span>
      <a class="code" href="ripd_8c.html#a0c793e931cf8a5d290cd9cd6b7105c2f">rip_rte_process</a> (rte, <a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="acfdc2cf7ec0359b1fabb24e48f5f0dee"></a><!-- doxytag: member="ripd.c::rip_route_rte" ref="acfdc2cf7ec0359b1fabb24e48f5f0dee" args="(struct rip_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_route_rte </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrip__info.html">rip_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00107">107</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a> &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae664ed09eb4aebee1134eb4debeabc5e"></a><!-- doxytag: member="ripd.c::rip_route_type_print" ref="ae664ed09eb4aebee1134eb4debeabc5e" args="(int sub_type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static const char* rip_route_type_print </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sub_type</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03401">3401</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">switch</span> (<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a>)
    {
      <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>:
    <span class="keywordflow">return</span> <span class="stringliteral">&quot;n&quot;</span>;
      <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>:
    <span class="keywordflow">return</span> <span class="stringliteral">&quot;s&quot;</span>;
      <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#aebaf1d3e550cd8b70cf9ed9f435e72af">RIP_ROUTE_DEFAULT</a>:
    <span class="keywordflow">return</span> <span class="stringliteral">&quot;d&quot;</span>;
      <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a43118d7389e3d91f271c7390469f1d91">RIP_ROUTE_REDISTRIBUTE</a>:
    <span class="keywordflow">return</span> <span class="stringliteral">&quot;r&quot;</span>;
      <span class="keywordflow">case</span> <a class="code" href="ripd_8h.html#a9dca6cb74820d2f885ed8c71bfd403b9">RIP_ROUTE_INTERFACE</a>:
    <span class="keywordflow">return</span> <span class="stringliteral">&quot;i&quot;</span>;
      <span class="keywordflow">default</span>:
    <span class="keywordflow">return</span> <span class="stringliteral">&quot;?&quot;</span>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7fe8e4382651057a9e2f123e8255e053"></a><!-- doxytag: member="ripd.c::rip_routemap_update" ref="a7fe8e4382651057a9e2f123e8255e053" args="(const char *notused)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_routemap_update </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>notused</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03965">3965</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, nnode, ifp))
    <a class="code" href="ripd_8c.html#a91450861eb65ddb6afafd368b0735d55">rip_if_rmap_update_interface</a> (ifp);

  <a class="code" href="ripd_8c.html#af24c30463f9298770f0459db6f413f92">rip_routemap_update_redistribute</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="af24c30463f9298770f0459db6f413f92"></a><!-- doxytag: member="ripd.c::rip_routemap_update_redistribute" ref="af24c30463f9298770f0459db6f413f92" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_routemap_update_redistribute </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03948">3948</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>)
    {
      <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; i++) 
    {
      <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[i].<a class="code" href="structrip.html#a77a65f4af78afdc1861f3f59ce91fb66">name</a>)
        <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>].<a class="code" href="structrip.html#af7561ddaf524e0a589d1d67322736460">map</a> = 
          <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a8596ef85639ad4db7e9b3da5f2a42714">route_map</a>[i].<a class="code" href="structrip.html#a77a65f4af78afdc1861f3f59ce91fb66">name</a>);
    }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0c793e931cf8a5d290cd9cd6b7105c2f"></a><!-- doxytag: member="ripd.c::rip_rte_process" ref="a0c793e931cf8a5d290cd9cd6b7105c2f" args="(struct rte *rte, struct sockaddr_in *from, struct interface *ifp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_rte_process </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrte.html">rte</a> *&#160;</td>
          <td class="paramname"><em>rte</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structinterface.html">interface</a> *&#160;</td>
          <td class="paramname"><em>ifp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00362">362</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo, rinfotmp;
  <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
  <span class="keyword">struct </span>in_addr *<a class="code" href="structnexthop.html">nexthop</a>;
  u_char oldmetric;
  <span class="keywordtype">int</span> same = 0;
  <span class="keywordtype">int</span> route_reuse = 0;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> old_dist, new_dist;

  <span class="comment">/* Make prefix structure. */</span>
  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = rte-&gt;<a class="code" href="structrte.html#a7da5366b1b53dafc354214cd81a6efdc">prefix</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8c.html#ab83ffad6b766ddd0ef87e4da228c322d">ip_masklen</a> (rte-&gt;<a class="code" href="structrte.html#a87018558d79458e4473bd752af95e5ed">mask</a>);

  <span class="comment">/* Make sure mask is applied. */</span>
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* Apply input filters. */</span>
  ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

  ret = <a class="code" href="ripd_8c.html#a1b2cdbd40854edbc3b13aae5ab587431">rip_incoming_filter</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, ri);
  <span class="keywordflow">if</span> (ret &lt; 0)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Modify entry according to the interface routemap. */</span>
  <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>])
    {
      <span class="keywordtype">int</span> ret;
      <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> newinfo;

      memset (&amp;newinfo, 0, <span class="keyword">sizeof</span> (newinfo));
      newinfo.type = <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>;
      newinfo.sub_type = <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>;
      newinfo.nexthop = rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>;
      newinfo.from = <a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>-&gt;sin_addr;
      newinfo.ifindex = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
      newinfo.metric = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>;
      newinfo.metric_out = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>; <span class="comment">/* XXX */</span>
      newinfo.tag = ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>);   <span class="comment">/* XXX */</span>

      <span class="comment">/* The object should be of the type of rip_info */</span>
      ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (ri-&gt;<a class="code" href="structrip__interface.html#a3df2f5dd8dcbf49060da3e6be5a5a6ee">routemap</a>[<a class="code" href="ripd_8h.html#ac32c755b7b0080004d0c7c165054b1f3">RIP_FILTER_IN</a>],
                             (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370acea1c1ac711770ac85bef02d97449004">RMAP_RIP</a>, &amp;newinfo);

      <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;RIP %s/%d is filtered by route-map in&quot;</span>,
                       inet_ntoa (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix), <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen);
          <span class="keywordflow">return</span>;
        }

      <span class="comment">/* Get back the object */</span>
      rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a> = newinfo.nexthop_out;
      rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a> = htons (newinfo.tag_out);       <span class="comment">/* XXX */</span>
      rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = newinfo.metric_out; <span class="comment">/* XXX: the routemap uses the metric_out field */</span>
    }

  <span class="comment">/* Once the entry has been validated, update the metric by</span>
<span class="comment">     adding the cost of the network on wich the message</span>
<span class="comment">     arrived. If the result is greater than infinity, use infinity</span>
<span class="comment">     (RFC2453 Sec. 3.9.2) */</span>
  <span class="comment">/* Zebra ripd can handle offset-list in. */</span>
  ret = <a class="code" href="rip__offset_8c.html#a5691a4f42bb1f8a03304d60a26c89a6d">rip_offset_list_apply_in</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, ifp, &amp;rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>);

  <span class="comment">/* If offset-list does not modify the metric use interface&#39;s</span>
<span class="comment">     metric. */</span>
  <span class="keywordflow">if</span> (!ret)
    rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> += ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a>;

  <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &gt; <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
    rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;

  <span class="comment">/* Set nexthop pointer. */</span>
  <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>.s_addr == 0)
    nexthop = &amp;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>-&gt;sin_addr;
  <span class="keywordflow">else</span>
    nexthop = &amp;rte-&gt;<a class="code" href="structrte.html#a3ab56677510f37d5f9c654121cd9d7d2">nexthop</a>;

  <span class="comment">/* Check if nexthop address is myself, then do nothing. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ripd_8c.html#aa10550a1906f12d805d9c3ee5599ad4a">rip_nexthop_check</a> (nexthop) &lt; 0)
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Nexthop address %s is myself&quot;</span>, inet_ntoa (*nexthop));
      <span class="keywordflow">return</span>;
    }

  <span class="comment">/* Get index for the prefix. */</span>
  rp = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a966b80612d859a0e6729dc9873a993e8">table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* Check to see whether there is already RIP route on the table. */</span>
  rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

  <span class="keywordflow">if</span> (rinfo)
    {
      <span class="comment">/* Local static route. */</span>
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> == <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>
          &amp;&amp; ((rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#a32d6abb8fd9b7e22683d361eff4105f0">RIP_ROUTE_STATIC</a>) ||
              (rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> == <a class="code" href="ripd_8h.html#aebaf1d3e550cd8b70cf9ed9f435e72af">RIP_ROUTE_DEFAULT</a>))
          &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
        {
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
          <span class="keywordflow">return</span>;
        }

      <span class="comment">/* Redistributed route check. */</span>
      <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> != <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>
          &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
        {
          <span class="comment">/* Fill in a minimaly temporary rip_info structure, for a future</span>
<span class="comment">             rip_distance_apply() use) */</span>
          memset (&amp;rinfotmp, 0, <span class="keyword">sizeof</span> (rinfotmp));
          <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfotmp.<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, &amp;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>-&gt;sin_addr);
          rinfotmp.<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a> = rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;
          new_dist = <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (&amp;rinfotmp);
          new_dist = new_dist ? new_dist : <a class="code" href="zebra_8h.html#a59b508b9cafa2524d610279687c68ed3">ZEBRA_RIP_DISTANCE_DEFAULT</a>;
          old_dist = rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a>;
          <span class="comment">/* Only connected routes may have a valid NULL distance */</span>
          <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
            old_dist = old_dist ? old_dist : <a class="code" href="zebra_8h.html#a59b508b9cafa2524d610279687c68ed3">ZEBRA_RIP_DISTANCE_DEFAULT</a>;
          <span class="comment">/* If imported route does not have STRICT precedence, </span>
<span class="comment">             mark it as a ghost */</span>
          <span class="keywordflow">if</span> (new_dist &gt; old_dist 
              || rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> == <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
            {
              <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
              <span class="keywordflow">return</span>;
            }
          <span class="keywordflow">else</span>
            {
              <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
              <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>);
                                                                                
              rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
              <span class="keywordflow">if</span> (<a class="code" href="ripd_8c.html#acfdc2cf7ec0359b1fabb24e48f5f0dee">rip_route_rte</a> (rinfo))
                <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, 
                                        &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
              <a class="code" href="ripd_8c.html#adc7ff2705d42a1ee587b92bbfc256f86">rip_info_free</a> (rinfo);
              rinfo = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
              route_reuse = 1;
            }
        }
    }

  <span class="keywordflow">if</span> (!rinfo)
    {
      <span class="comment">/* Now, check to see whether there is already an explicit route</span>
<span class="comment">         for the destination prefix.  If there is no such route, add</span>
<span class="comment">         this route to the routing table, unless the metric is</span>
<span class="comment">         infinity (there is no point in adding a route which</span>
<span class="comment">         unusable). */</span>
      <span class="keywordflow">if</span> (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
        {
          rinfo = <a class="code" href="ripd_8c.html#a3c9e3f9e1fee01f622533b045fa090aa">rip_info_new</a> ();

          <span class="comment">/* - Setting the destination prefix and length to those in</span>
<span class="comment">             the RTE. */</span>
          rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a> = <a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;

          <span class="comment">/* - Setting the metric to the newly calculated metric (as</span>
<span class="comment">             described above). */</span>
          rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>;
          rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a> = ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>);

          <span class="comment">/* - Set the next hop address to be the address of the router</span>
<span class="comment">             from which the datagram came or the next hop address</span>
<span class="comment">             specified by a next hop RTE. */</span>
          <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, nexthop);
          <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, &amp;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>-&gt;sin_addr);
          rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;

          <span class="comment">/* - Initialize the timeout for the route.  If the</span>
<span class="comment">             garbage-collection timer is running for this route, stop it</span>
<span class="comment">             (see section 2.3 for a discussion of the timers). */</span>
          <a class="code" href="ripd_8c.html#aa150b740aca867d0d693c0caab1d6a1c">rip_timeout_update</a> (rinfo);

          <span class="comment">/* - Set the route change flag. */</span>
          rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;

          <span class="comment">/* - Signal the output process to trigger an update (see section</span>
<span class="comment">             2.5). */</span>
          <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);

          <span class="comment">/* Finally, route goes into the kernel. */</span>
          rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> = <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>;
          rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> = <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>;

          <span class="comment">/* Set distance value. */</span>
          rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a> = <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (rinfo);

          rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = rinfo;
          <a class="code" href="rip__zebra_8c.html#a460a3829f5b473e965b8534e7576ba58">rip_zebra_ipv4_add</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>,
                              rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a>);
          rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;
        }

      <span class="comment">/* Unlock temporary lock, i.e. same behaviour */</span>
      <span class="keywordflow">if</span> (route_reuse)
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* Route is there but we are not sure the route is RIP or not. */</span>
      rinfo = rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

      <span class="comment">/* If there is an existing route, compare the next hop address</span>
<span class="comment">         to the address of the router from which the datagram came.</span>
<span class="comment">         If this datagram is from the same router as the existing</span>
<span class="comment">         route, reinitialize the timeout.  */</span>
      same = (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, &amp;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>-&gt;sin_addr)
              &amp;&amp; (rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> == ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>));

      <span class="keywordflow">if</span> (same)
        <a class="code" href="ripd_8c.html#aa150b740aca867d0d693c0caab1d6a1c">rip_timeout_update</a> (rinfo);


      <span class="comment">/* Fill in a minimaly temporary rip_info structure, for a future</span>
<span class="comment">         rip_distance_apply() use) */</span>
      memset (&amp;rinfotmp, 0, <span class="keyword">sizeof</span> (rinfotmp));
      <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfotmp.<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, &amp;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>-&gt;sin_addr);
      rinfotmp.<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a> = rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;


      <span class="comment">/* Next, compare the metrics.  If the datagram is from the same</span>
<span class="comment">         router as the existing route, and the new metric is different</span>
<span class="comment">         than the old one; or, if the new metric is lower than the old</span>
<span class="comment">         one, or if the tag has been changed; or if there is a route</span>
<span class="comment">         with a lower administrave distance; or an update of the</span>
<span class="comment">         distance on the actual route; do the following actions: */</span>
      <span class="keywordflow">if</span> ((same &amp;&amp; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>)
          || (rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a> &lt; rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>)
          || ((same)
              &amp;&amp; (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> == rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>)
              &amp;&amp; ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>) != rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a>)
          || (rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a> &gt; <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (&amp;rinfotmp))
          || ((rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a> != <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (rinfo)) &amp;&amp; same))
        {
          <span class="comment">/* - Adopt the route from the datagram.  That is, put the</span>
<span class="comment">             new metric in, and adjust the next hop address (if</span>
<span class="comment">             necessary). */</span>
          oldmetric = rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>;
          rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = rte-&gt;<a class="code" href="structrte.html#a264e64ce9125408ab73a12963da0d5fa">metric</a>;
          rinfo-&gt;<a class="code" href="structrip__info.html#a36a444baf6382b29ccc3007a4c35eb4c">tag</a> = ntohs (rte-&gt;<a class="code" href="structrte.html#a0f0867462e39eed64e518342fbe6abe0">tag</a>);
          <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>, &amp;<a class="code" href="structrip__info.html#a0cd4b034c64ff7c0503f065d0f7ba54f">from</a>-&gt;sin_addr);
          rinfo-&gt;<a class="code" href="structrip__info.html#a454fed15ffbc59c1463d4f4ec35def23">ifindex</a> = ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>;
          rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a> = <a class="code" href="ripd_8c.html#a04cf925731eef2a46d72cb38bb97db38">rip_distance_apply</a> (rinfo);

          <span class="comment">/* Should a new route to this network be established</span>
<span class="comment">             while the garbage-collection timer is running, the</span>
<span class="comment">             new route will replace the one that is about to be</span>
<span class="comment">             deleted.  In this case the garbage-collection timer</span>
<span class="comment">             must be cleared. */</span>

          <span class="keywordflow">if</span> (oldmetric == <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a> &amp;&amp;
              rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> &lt; <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
            {
              rinfo-&gt;<a class="code" href="structrip__info.html#addedca4278020120b45d74358074695f">type</a> = <a class="code" href="zebra_8h.html#a2bbecb9ceffe9e03927c535f41ba56fb">ZEBRA_ROUTE_RIP</a>;
              rinfo-&gt;<a class="code" href="structrip__info.html#a4e2941277297ed618f14bf4501bdfa60">sub_type</a> = <a class="code" href="ripd_8h.html#a9ba7dafcf5f58d4326b6e91e35b29f95">RIP_ROUTE_RTE</a>;

              <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>);

              <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, nexthop))
                <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, nexthop);

              <a class="code" href="rip__zebra_8c.html#a460a3829f5b473e965b8534e7576ba58">rip_zebra_ipv4_add</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, nexthop, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>,
                                  rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a>);
              rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;
            }

          <span class="comment">/* Update nexthop and/or metric value.  */</span>
          <span class="keywordflow">if</span> (oldmetric != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
            {
              <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, oldmetric);
              <a class="code" href="rip__zebra_8c.html#a460a3829f5b473e965b8534e7576ba58">rip_zebra_ipv4_add</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, nexthop, rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>,
                                  rinfo-&gt;<a class="code" href="structrip__info.html#a7a49ac693b0a35d38142a04a3a69e844">distance</a>);
              rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;

              <span class="keywordflow">if</span> (!<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, nexthop))
                <a class="code" href="prefix_8h.html#a039bf23d5fa90bc3a9f97173253e14bc">IPV4_ADDR_COPY</a> (&amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, nexthop);
            }

          <span class="comment">/* - Set the route change flag and signal the output process</span>
<span class="comment">             to trigger an update. */</span>
          rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;
          <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);

          <span class="comment">/* - If the new metric is infinity, start the deletion</span>
<span class="comment">             process (described above); */</span>
          <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> == <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
            {
              <span class="comment">/* If the new metric is infinity, the deletion process</span>
<span class="comment">                 begins for the route, which is no longer used for</span>
<span class="comment">                 routing packets.  Note that the deletion process is</span>
<span class="comment">                 started only when the metric is first set to</span>
<span class="comment">                 infinity.  If the metric was already infinity, then a</span>
<span class="comment">                 new deletion process is not started. */</span>
              <span class="keywordflow">if</span> (oldmetric != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
                {
                  <span class="comment">/* - The garbage-collection timer is set for 120 seconds. */</span>
                  <a class="code" href="ripd_8h.html#ac82fe6284825b1b8ac9e1323196e96c4">RIP_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>,
                                <a class="code" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">rip_garbage_collect</a>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>);
                  <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);

                  <span class="comment">/* - The metric for the route is set to 16</span>
<span class="comment">                     (infinity).  This causes the route to be removed</span>
<span class="comment">                     from service. */</span>
                  <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>, oldmetric);
                  rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> &amp;= ~<a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;

                  <span class="comment">/* - The route change flag is to indicate that this</span>
<span class="comment">                     entry has been changed. */</span>
                  <span class="comment">/* - The output process is signalled to trigger a</span>
<span class="comment">                     response. */</span>
                  ;             <span class="comment">/* Above processes are already done previously. */</span>
                }
            }
          <span class="keywordflow">else</span>
            {
              <span class="comment">/* otherwise, re-initialize the timeout. */</span>
              <a class="code" href="ripd_8c.html#aa150b740aca867d0d693c0caab1d6a1c">rip_timeout_update</a> (rinfo);
            }
        }
      <span class="comment">/* Unlock tempolary lock of the route. */</span>
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rp);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9cff59eb2b945f909867abf10c0e44ac"></a><!-- doxytag: member="ripd.c::rip_send_packet" ref="a9cff59eb2b945f909867abf10c0e44ac" args="(u_char *buf, int size, struct sockaddr_in *to, struct connected *ifc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_send_packet </td>
          <td>(</td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct sockaddr_in *&#160;</td>
          <td class="paramname"><em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>ifc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l01409">1409</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret, send_sock;
  <span class="keyword">struct </span>sockaddr_in sin;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ifc != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  
  <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
    {
<span class="preprocessor">#define ADDRESS_SIZE 20</span>
<span class="preprocessor"></span>      <span class="keywordtype">char</span> dst[<a class="code" href="ripd_8c.html#ac34ab37f5f69d07660e27a26e30ee861">ADDRESS_SIZE</a>];
      dst[<a class="code" href="ripd_8c.html#ac34ab37f5f69d07660e27a26e30ee861">ADDRESS_SIZE</a> - 1] = <span class="charliteral">&#39;\0&#39;</span>;
      
      <span class="keywordflow">if</span> (to)
        {
          strncpy (dst, inet_ntoa(to-&gt;sin_addr), ADDRESS_SIZE - 1);
        }
      <span class="keywordflow">else</span>
        {
          sin.sin_addr.s_addr = htonl (<a class="code" href="ripd_8h.html#a44583b015fb87161d1b2359ffe5fdc96">INADDR_RIP_GROUP</a>);
          strncpy (dst, inet_ntoa(sin.sin_addr), ADDRESS_SIZE - 1);
        }
<span class="preprocessor">#undef ADDRESS_SIZE</span>
<span class="preprocessor"></span>      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;rip_send_packet %s &gt; %s (%s)&quot;</span>,
                inet_ntoa(ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>),
                dst, ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
    }
  
  <span class="keywordflow">if</span> ( <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>, <a class="code" href="if_8h.html#a87a060af9e9971eefeb1584beaceecf6">ZEBRA_IFA_SECONDARY</a>) )
    {
      <span class="comment">/*</span>
<span class="comment">       * ZEBRA_IFA_SECONDARY is set on linux when an interface is configured</span>
<span class="comment">       * with multiple addresses on the same subnet: the first address</span>
<span class="comment">       * on the subnet is configured &quot;primary&quot;, and all subsequent addresses</span>
<span class="comment">       * on that subnet are treated as &quot;secondary&quot; addresses. </span>
<span class="comment">       * In order to avoid routing-table bloat on other rip listeners, </span>
<span class="comment">       * we do not send out RIP packets with ZEBRA_IFA_SECONDARY source addrs.</span>
<span class="comment">       * XXX Since Linux is the only system for which the ZEBRA_IFA_SECONDARY</span>
<span class="comment">       * flag is set, we would end up sending a packet for a &quot;secondary&quot;</span>
<span class="comment">       * source address on non-linux systems.  </span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ab0c84b3e594cf7b7992c9b38d0bb8199">IS_RIP_DEBUG_PACKET</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;duplicate dropped&quot;</span>);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* Make destination address. */</span>
  memset (&amp;sin, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
  sin.sin_family = AF_INET;
<span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<span class="preprocessor"></span>  sin.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>

  <span class="comment">/* When destination is specified, use it&#39;s port and address. */</span>
  <span class="keywordflow">if</span> (to)
    {
      sin.sin_port = to-&gt;sin_port;
      sin.sin_addr = to-&gt;sin_addr;
      send_sock = <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#abe9fea35ec9eae4d4c960f2f1105560b">sock</a>;
    }
  <span class="keywordflow">else</span>
    {
      <span class="keyword">struct </span>sockaddr_in from;
      
      sin.sin_port = htons (<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>);
      sin.sin_addr.s_addr = htonl (<a class="code" href="ripd_8h.html#a44583b015fb87161d1b2359ffe5fdc96">INADDR_RIP_GROUP</a>);
      
      <span class="comment">/* multicast send should bind to local interface address */</span>
      from.sin_family = AF_INET;
      from.sin_port = htons (<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>);
      from.sin_addr = ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
<span class="preprocessor">#ifdef HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span>
<span class="preprocessor"></span>      from.sin_len = <span class="keyword">sizeof</span> (<span class="keyword">struct </span>sockaddr_in);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span>
      
      <span class="comment">/*</span>
<span class="comment">       * we have to open a new socket for each packet because this</span>
<span class="comment">       * is the most portable way to bind to a different source</span>
<span class="comment">       * ipv4 address for each packet. </span>
<span class="comment">       */</span>
      <span class="keywordflow">if</span> ( (send_sock = <a class="code" href="ripd_8c.html#a7d120833f5e80143c6dee4123ad86a4a">rip_create_socket</a> (&amp;from)) &lt; 0)
        {
          <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;rip_send_packet could not create socket.&quot;</span>);
          <span class="keywordflow">return</span> -1;
        }
      <a class="code" href="rip__interface_8c.html#ac25af326e5d51d1e8acf4f05c405ee0e">rip_interface_multicast_set</a> (send_sock, ifc);
    }

  ret = sendto (send_sock, buf, size, 0, (<span class="keyword">struct</span> sockaddr *)&amp;sin,
        <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));

  <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;SEND to  %s.%d&quot;</span>, inet_ntoa(sin.sin_addr), 
                  ntohs (sin.sin_port));

  <span class="keywordflow">if</span> (ret &lt; 0)
    <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t send packet : %s&quot;</span>, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a> (errno));

  <span class="keywordflow">if</span> (!to)
    close(send_sock);

  <span class="keywordflow">return</span> ret;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae748ef0c36c9479eb5ae09eb08fb3ee3"></a><!-- doxytag: member="ripd.c::rip_timeout" ref="ae748ef0c36c9479eb5ae09eb08fb3ee3" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_timeout </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00152">152</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrip__info.html">rip_info</a> *rinfo;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;

  rinfo = <a class="code" href="thread_8h.html#a78f2ae47a7a334f7f74bfed7fda48e5a">THREAD_ARG</a> (t);
  rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  rn = rinfo-&gt;<a class="code" href="structrip__info.html#a6b3b955f8a0947fdc9f3d55e611bb443">rp</a>;

  <span class="comment">/* - The garbage-collection timer is set for 120 seconds. */</span>
  <a class="code" href="ripd_8h.html#ac82fe6284825b1b8ac9e1323196e96c4">RIP_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>, <a class="code" href="ripd_8c.html#a1536c3f4978c8480c3a55e444ebb817e">rip_garbage_collect</a>, 
        <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a50c1185a0dc6821c20b43df22e58147b">garbage_time</a>);

  <a class="code" href="rip__zebra_8c.html#af7f46189661f875392807d263c8a12e1">rip_zebra_ipv4_delete</a> ((<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, &amp;rinfo-&gt;<a class="code" href="structrip__info.html#a382373cf01247ed46f57d930f41cbcc3">nexthop</a>,
             rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a>);
  <span class="comment">/* - The metric for the route is set to 16 (infinity).  This causes</span>
<span class="comment">     the route to be removed from service. */</span>
  rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> = <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>;
  rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> &amp;= ~<a class="code" href="ripd_8h.html#a35c6ad51f3d821e9b7127eb490e5a3ba">RIP_RTF_FIB</a>;

  <span class="comment">/* - The route change flag is to indicate that this entry has been</span>
<span class="comment">     changed. */</span>
  rinfo-&gt;<a class="code" href="structrip__info.html#afccd5f65ce51bd8c695e066637ffeaf2">flags</a> |= <a class="code" href="ripd_8h.html#a579ee372e6ec0344b6e49b5d19a2404f">RIP_RTF_CHANGED</a>;

  <span class="comment">/* - The output process is signalled to trigger a response. */</span>
  <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a9b0660a48724f8c76b0ba1f1dc9666e1">RIP_TRIGGERED_UPDATE</a>, 0);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa150b740aca867d0d693c0caab1d6a1c"></a><!-- doxytag: member="ripd.c::rip_timeout_update" ref="aa150b740aca867d0d693c0caab1d6a1c" args="(struct rip_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_timeout_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrip__info.html">rip_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00184">184</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (rinfo-&gt;<a class="code" href="structrip__info.html#abba1d9e9e42d61055816c997e9074af8">metric</a> != <a class="code" href="ripd_8h.html#a4bf17ee4e90b2de1d7291a1b44814aca">RIP_METRIC_INFINITY</a>)
    {
      <a class="code" href="ripd_8h.html#ab2098699110853cc08829d7ec19a37e0">RIP_TIMER_OFF</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>);
      <a class="code" href="ripd_8h.html#ac82fe6284825b1b8ac9e1323196e96c4">RIP_TIMER_ON</a> (rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>, <a class="code" href="ripd_8c.html#ae748ef0c36c9479eb5ae09eb08fb3ee3">rip_timeout</a>, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2d1e5f4ed15eb6647f5b22eb63fe6e15">timeout_time</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a41d92c61a77de7fa2b7bcd9e9602c7a5"></a><!-- doxytag: member="ripd.c::rip_triggered_interval" ref="a41d92c61a77de7fa2b7bcd9e9602c7a5" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_triggered_interval </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02604">2604</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="ripd_8c.html#a44a6353160beda1a7b670c61a67dd818">rip_triggered_update</a> (<span class="keyword">struct</span> <a class="code" href="structthread.html">thread</a> *);

  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af9cf461470f2054bbb4bf43607a95660">trigger</a>)
    {
      <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af9cf461470f2054bbb4bf43607a95660">trigger</a> = 0;
      <a class="code" href="ripd_8c.html#a44a6353160beda1a7b670c61a67dd818">rip_triggered_update</a> (t);
    }
  <span class="keywordflow">return</span> 0;
}     
</pre></div>
</div>
</div>
<a class="anchor" id="a44a6353160beda1a7b670c61a67dd818"></a><!-- doxytag: member="ripd.c::rip_triggered_update" ref="a44a6353160beda1a7b670c61a67dd818" args="(struct thread *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_triggered_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02620">2620</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> <a class="code" href="isis__circuit_8c.html#a900b5f9651c07bafd5d81cc876b93885">interval</a>;

  <span class="comment">/* Clear thred pointer. */</span>
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a2bf3b2f0ae9c888e4941a929315f86c2">t_triggered_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Cancel interval timer. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>)
    {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>);
      <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af9cf461470f2054bbb4bf43607a95660">trigger</a> = 0;

  <span class="comment">/* Logging triggered update. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;triggered update!&quot;</span>);

  <span class="comment">/* Split Horizon processing is done when generating triggered</span>
<span class="comment">     updates as well as normal updates (see section 2.6). */</span>
  <a class="code" href="ripd_8c.html#ad2f37edffd39b917a4dfa17213c9c457">rip_update_process</a> (<a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a875a9ec24e36cc0e1b6b6628dcfe5cdb">rip_changed_route</a>);

  <span class="comment">/* Once all of the triggered updates have been generated, the route</span>
<span class="comment">     change flags should be cleared. */</span>
  <a class="code" href="ripd_8c.html#aeadbc9dd74594957aecb8b7a479ab1b0">rip_clear_changed_flag</a> ();

  <span class="comment">/* After a triggered update is sent, a timer should be set for a</span>
<span class="comment">   random interval between 1 and 5 seconds.  If other changes that</span>
<span class="comment">   would trigger updates occur before the timer expires, a single</span>
<span class="comment">   update is triggered when the timer expires. */</span>
  interval = (random () % 5) + 1;

  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a> = 
    <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ripd_8c.html#a41d92c61a77de7fa2b7bcd9e9602c7a5">rip_triggered_interval</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, interval);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5d503898e18cfcf45b7d0cecdae2d016"></a><!-- doxytag: member="ripd.c::rip_update" ref="a5d503898e18cfcf45b7d0cecdae2d016" args="(struct thread *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02563">2563</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Clear timer pointer. */</span>
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#ab26b01e3456770e7cb44821302054063">t_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;update timer fire!&quot;</span>);

  <span class="comment">/* Process update output. */</span>
  <a class="code" href="ripd_8c.html#ad2f37edffd39b917a4dfa17213c9c457">rip_update_process</a> (<a class="code" href="ripd_8c.html#aeb8e1c282570d629a6b603a94a4650d6a500d4c9125340f27abf4fa013f88dab6">rip_all_route</a>);

  <span class="comment">/* Triggered updates may be suppressed if a regular update is due by</span>
<span class="comment">     the time the triggered update would be sent. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>)
    {
      <a class="code" href="thread_8c.html#aceb89c1157b6a1d8bb3afa5021f1ab6d">thread_cancel</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a>);
      <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a0334b5df8ebfa3abb22ab45b4d9f3647">t_triggered_interval</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#af9cf461470f2054bbb4bf43607a95660">trigger</a> = 0;

  <span class="comment">/* Register myself. */</span>
  <a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67">rip_event</a> (<a class="code" href="ripd_8h.html#a2c41340fbe3790bd83a6e8607885fd67a5ae803ea0ff858bd14d792ac5b99dd95">RIP_UPDATE_EVENT</a>, 0);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a185280c44514e664f553ed0b784c8497"></a><!-- doxytag: member="ripd.c::rip_update_interface" ref="a185280c44514e664f553ed0b784c8497" args="(struct connected *ifc, u_char version, int route_type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_update_interface </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structconnected.html">connected</a> *&#160;</td>
          <td class="paramname"><em>ifc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>version</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>route_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02429">2429</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>sockaddr_in to;

  <span class="comment">/* When RIP version is 2 and multicast enable interface. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a> == <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a> &amp;&amp; <a class="code" href="if_8c.html#a0bdd794de28c265aec55d740ed3c5ddc">if_is_multicast</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>)) 
    {
      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;multicast announce on %s &quot;</span>, ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

      <a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (ifc, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, route_type, <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>);
      <span class="keywordflow">return</span>;
    }
  
  <span class="comment">/* If we can&#39;t send multicast packet, send it with unicast. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a88f3bd141d217db7e4118a78b1db1b60">if_is_broadcast</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>) || <a class="code" href="if_8c.html#a61aed2ccc7ec47d6822546664ea77f0c">if_is_pointopoint</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>))
    {
      <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
        {
          <span class="comment">/* Destination address and port setting. */</span>
          memset (&amp;to, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
          <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>)
            <span class="comment">/* use specified broadcast or peer destination addr */</span>
            to.sin_addr = ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>;
          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt; <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>)
            <span class="comment">/* calculate the appropriate broadcast address */</span>
            to.sin_addr.s_addr =
              <a class="code" href="prefix_8c.html#a0416c71ab42c828a9ee8ee82ddda6a77">ipv4_broadcast_addr</a>(ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;u.<a class="code" href="structprefix.html#ab37b8922554b41b7dc2417d8f37e7829">prefix4</a>.s_addr,
                                  ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
      <span class="keywordflow">else</span>
        <span class="comment">/* do not know where to send the packet */</span>
        <span class="keywordflow">return</span>;
          to.sin_port = htons (<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>);

          <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>)
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;%s announce to %s on %s&quot;</span>,
               <a class="code" href="if_8h.html#a2443297a4d8f44cc5d2ce38fcbf345f2">CONNECTED_PEER</a>(ifc) ? <span class="stringliteral">&quot;unicast&quot;</span> : <span class="stringliteral">&quot;broadcast&quot;</span>,
               inet_ntoa (to.sin_addr), ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

          <a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (ifc, &amp;to, route_type, <a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a>);
        }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="adf7591fcda9ffc86ca850c74c268495d"></a><!-- doxytag: member="ripd.c::rip_update_jitter" ref="adf7591fcda9ffc86ca850c74c268495d" args="(unsigned long)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_update_jitter </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>time</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02777">2777</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="preprocessor">#define JITTER_BOUND 4</span>
<span class="preprocessor"></span>  <span class="comment">/* We want to get the jitter to +/- 1/JITTER_BOUND the interval.</span>
<span class="comment">     Given that, we cannot let time be less than JITTER_BOUND seconds.</span>
<span class="comment">     The RIPv2 RFC says jitter should be small compared to</span>
<span class="comment">     update_time.  We consider 1/JITTER_BOUND to be small.</span>
<span class="comment">  */</span>
  
  <span class="keywordtype">int</span> jitter_input = time;
  <span class="keywordtype">int</span> jitter;
  
  <span class="keywordflow">if</span> (jitter_input &lt; JITTER_BOUND)
    jitter_input = <a class="code" href="ripd_8c.html#a12ff2e664dd62569e8d230755d29f23b">JITTER_BOUND</a>;
  
  jitter = (((rand () % ((jitter_input * 2) + 1)) - jitter_input));  

  <span class="keywordflow">return</span> jitter/<a class="code" href="ripd_8c.html#a12ff2e664dd62569e8d230755d29f23b">JITTER_BOUND</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad2f37edffd39b917a4dfa17213c9c457"></a><!-- doxytag: member="ripd.c::rip_update_process" ref="ad2f37edffd39b917a4dfa17213c9c457" args="(int route_type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_update_process </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>route_type</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02475">2475</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *ifnode, *ifnnode;
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *<a class="code" href="structconnected.html">connected</a>;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structrip__interface.html">rip_interface</a> *ri;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rp;
  <span class="keyword">struct </span>sockaddr_in to;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="comment">/* Send RIP update to each interface. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (<a class="code" href="if_8c.html#a45ef98e2f5776142773b95ec60bc294f">iflist</a>, node, ifp))
    {
      <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a8c30d3c9709c67544befed76b7260267">if_is_loopback</a> (ifp))
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (! <a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
    <span class="keywordflow">continue</span>;

      <span class="comment">/* Fetch RIP interface information. */</span>
      ri = ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>;

      <span class="comment">/* When passive interface is specified, suppress announce to the</span>
<span class="comment">         interface. */</span>
      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#aa624d6a89ab2dcd614cc0fb89e08febf">passive</a>)
    <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (ri-&gt;<a class="code" href="structrip__interface.html#a29f1e7ea828dc3950b72ea63bc7068a4">running</a>)
    {
      <span class="comment">/* </span>
<span class="comment">       * If there is no version configuration in the interface,</span>
<span class="comment">       * use rip&#39;s version setting. </span>
<span class="comment">       */</span>
      <span class="keywordtype">int</span> vsend = ((ri-&gt;<a class="code" href="structrip__interface.html#a2b4602c504a60bac12c372581abd1159">ri_send</a> == <a class="code" href="ripd_8h.html#acaf07e083e328ebe0df4c436655a4d66">RI_RIP_UNSPEC</a>) ?
               <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a> : ri-&gt;<a class="code" href="structrip__interface.html#a2b4602c504a60bac12c372581abd1159">ri_send</a>);

      <span class="keywordflow">if</span> (<a class="code" href="rip__debug_8h.html#ac93cb9c86bfe7532e6ef10a83a271897">IS_RIP_DEBUG_EVENT</a>) 
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;SEND UPDATE to %s ifindex %d&quot;</span>,
               (ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a> ? ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a> : <span class="stringliteral">&quot;_unknown_&quot;</span>), ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>);

          <span class="comment">/* send update on each connected network */</span>
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, ifnode, ifnnode, connected))
        {
          <span class="keywordflow">if</span> (connected-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
            {
          <span class="keywordflow">if</span> (vsend &amp; <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>)
            <a class="code" href="ripd_8c.html#a185280c44514e664f553ed0b784c8497">rip_update_interface</a> (connected, RIPv1, route_type);
          <span class="keywordflow">if</span> ((vsend &amp; <a class="code" href="ripd_8h.html#a7b62950e24fef7d26e3564a7f29343fc">RIPv2</a>) &amp;&amp; <a class="code" href="if_8c.html#a0bdd794de28c265aec55d740ed3c5ddc">if_is_multicast</a>(ifp))
            <a class="code" href="ripd_8c.html#a185280c44514e664f553ed0b784c8497">rip_update_interface</a> (connected, RIPv2, route_type);
        }
        }
    }
    }

  <span class="comment">/* RIP send updates to each neighbor. */</span>
  <span class="keywordflow">for</span> (rp = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a5361d5a9259aa9a07ba942b32376eda7">neighbor</a>); rp; rp = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rp))
    <span class="keywordflow">if</span> (rp-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
    p = (<span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;rp-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>;

    ifp = <a class="code" href="if_8c.html#a84f550f6181fac06214b71b6408fc8db">if_lookup_address</a> (p-&gt;prefix);
    <span class="keywordflow">if</span> (! ifp)
      {
        <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Neighbor %s doesnt have connected interface!&quot;</span>,
               inet_ntoa (p-&gt;prefix));
        <span class="keywordflow">continue</span>;
      }
        
        <span class="keywordflow">if</span> ( (connected = <a class="code" href="if_8c.html#a7cea5b88a9e4c0abf48f9951090e5fad">connected_lookup_address</a> (ifp, p-&gt;prefix)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
          {
            <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Neighbor %s doesnt have connected network&quot;</span>,
                       inet_ntoa (p-&gt;prefix));
            <span class="keywordflow">continue</span>;
          }
        
    <span class="comment">/* Set destination address and port */</span>
    memset (&amp;to, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr_in));
    to.sin_addr = p-&gt;prefix;
    to.sin_port = htons (<a class="code" href="ripd_8h.html#a2c83c3d0f0e73ff0dfea33b0fd8a890e">RIP_PORT_DEFAULT</a>);

    <span class="comment">/* RIP version is rip&#39;s configuration. */</span>
    <a class="code" href="ripd_8c.html#a2cdf75c689e315e86c690dd0ae78cd83">rip_output_process</a> (connected, &amp;to, route_type, <a class="code" href="structrip.html">rip</a>-&gt;<a class="code" href="structrip.html#a1f46be7d9c1ea2deddd1f9e33971f21d">version_send</a>);
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2d9126dfba66148cf4b72413a9c3c212"></a><!-- doxytag: member="ripd.c::rip_vty_out_uptime" ref="a2d9126dfba66148cf4b72413a9c3c212" args="(struct vty *vty, struct rip_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void rip_vty_out_uptime </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrip__info.html">rip_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l03376">3376</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  time_t clock;
  <span class="keyword">struct </span>tm *tm;
<span class="preprocessor">#define TIME_BUF 25</span>
<span class="preprocessor"></span>  <span class="keywordtype">char</span> timebuf [<a class="code" href="ripd_8c.html#a4a41ebcbcfbdc4cf71ac89967ae81aa8">TIME_BUF</a>];
  <span class="keyword">struct </span><a class="code" href="structthread.html">thread</a> *<a class="code" href="structthread.html">thread</a>;

  <span class="keywordflow">if</span> ((thread = rinfo-&gt;<a class="code" href="structrip__info.html#ac8fd7798702cf9e0d32c13f7fef165d8">t_timeout</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      clock = <a class="code" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a> (thread);
      tm = gmtime (&amp;clock);
      strftime (timebuf, TIME_BUF, <span class="stringliteral">&quot;%M:%S&quot;</span>, tm);
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%5s&quot;</span>, timebuf);
    }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((thread = rinfo-&gt;<a class="code" href="structrip__info.html#a4ed4b5c70b679a4ffe8db220357f7645">t_garbage_collect</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    {
      clock = <a class="code" href="thread_8c.html#a945cdaf798bf660e0aebacfabfb27d16">thread_timer_remain_second</a> (thread);
      tm = gmtime (&amp;clock);
      strftime (timebuf, TIME_BUF, <span class="stringliteral">&quot;%M:%S&quot;</span>, tm);
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%5s&quot;</span>, timebuf);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab360fa2e0affcbafc75309301e75b184"></a><!-- doxytag: member="ripd.c::rip_write_rte" ref="ab360fa2e0affcbafc75309301e75b184" args="(int num, struct stream *s, struct prefix_ipv4 *p, u_char version, struct rip_info *rinfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int rip_write_rte </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>version</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrip__info.html">rip_info</a> *&#160;</td>
          <td class="paramname"><em>rinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l02103">2103</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span>in_addr mask;

  <span class="comment">/* Write routing table entry. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="isis__pdu_8h.html#ac477ee30f0ed8c0b09a6f3387287191f">version</a> == <a class="code" href="ripd_8h.html#a8085c4a83b91e09c48891bf8ed00d48c">RIPv1</a>)
    {
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, AF_INET);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, 0);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, p-&gt;prefix.s_addr);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, 0);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, 0);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a>);
    }
  <span class="keywordflow">else</span>
    {
      <a class="code" href="prefix_8c.html#ac618f277d6ed0ebc56781ec26e508157">masklen2ip</a> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, &amp;mask);

      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, AF_INET);
      <a class="code" href="stream_8c.html#a03459a9331e0333d2b396636eca3c2e4">stream_putw</a> (s, rinfo-&gt;<a class="code" href="structrip__info.html#aa73d70cc27289940aeab90f33c16cf77">tag_out</a>);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, p-&gt;prefix.s_addr);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, mask.s_addr);
      <a class="code" href="stream_8c.html#a7dfe54cb7321c21924b040017477b9b0">stream_put_ipv4</a> (s, rinfo-&gt;<a class="code" href="structrip__info.html#aa36603c28bc184f689e674ec0bcc84bc">nexthop_out</a>.s_addr);
      <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, rinfo-&gt;<a class="code" href="structrip__info.html#aa40cd79f7bcad5126c40adf922065ea2">metric_out</a>);
    }

  <span class="keywordflow">return</span> ++<a class="code" href="bgp__open_8h.html#ab4570498c4316aa5f7b4852c778b3320">num</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1a4b51c3d8f41cf229c1e3475a188d55"></a><!-- doxytag: member="ripd.c::sockopt_broadcast" ref="a1a4b51c3d8f41cf229c1e3475a188d55" args="(int sock)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int sockopt_broadcast </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sock</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00092">92</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keywordtype">int</span> on = 1;

  ret = setsockopt (sock, SOL_SOCKET, SO_BROADCAST, (<span class="keywordtype">char</span> *) &amp;on, <span class="keyword">sizeof</span> on);
  <span class="keywordflow">if</span> (ret &lt; 0)
    {
      <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;can&#39;t set sockopt SO_BROADCAST to socket %d&quot;</span>, sock);
      <span class="keywordflow">return</span> -1;
    }
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a678c9045be94160362e65c0e26e9e38b"></a><!-- doxytag: member="ripd.c::rip" ref="a678c9045be94160362e65c0e26e9e38b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structrip.html">rip</a>* <a class="el" href="structrip.html">rip</a> = NULL</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00054">54</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>

</div>
</div>
<a class="anchor" id="acee583ab67011897c4887052fdb3645d"></a><!-- doxytag: member="ripd.c::rip_global_queries" ref="acee583ab67011897c4887052fdb3645d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long <a class="el" href="ripd_8h.html#acee583ab67011897c4887052fdb3645d">rip_global_queries</a> = 0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00063">63</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>

</div>
</div>
<a class="anchor" id="aee2f7ac8649bf74e5d65e6bb98e495cc"></a><!-- doxytag: member="ripd.c::rip_global_route_changes" ref="aee2f7ac8649bf74e5d65e6bb98e495cc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long <a class="el" href="ripd_8h.html#aee2f7ac8649bf74e5d65e6bb98e495cc">rip_global_route_changes</a> = 0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00060">60</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>

</div>
</div>
<a class="anchor" id="acbf78a319ce7a605ba4ab6c76b6ac0f1"></a><!-- doxytag: member="ripd.c::rip_msg" ref="acbf78a319ce7a605ba4ab6c76b6ac0f1" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structmessage.html">message</a> <a class="el" href="ripd_8c.html#acbf78a319ce7a605ba4ab6c76b6ac0f1">rip_msg</a>[]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
  {<a class="code" href="ripd_8h.html#ac4d0419fac5cd68dfee1bb1920e9689e">RIP_REQUEST</a>,    <span class="stringliteral">&quot;REQUEST&quot;</span>},
  {<a class="code" href="ripd_8h.html#abbe6ab2f9449480e4c580b8b5e6d73a4">RIP_RESPONSE</a>,   <span class="stringliteral">&quot;RESPONSE&quot;</span>},
  {<a class="code" href="ripd_8h.html#a6a7ceb19e2a34e38de55d31b0bcf4e60">RIP_TRACEON</a>,    <span class="stringliteral">&quot;TRACEON&quot;</span>},
  {<a class="code" href="ripd_8h.html#a3b1ad5694c2b14ab3dd843178e03c878">RIP_TRACEOFF</a>,   <span class="stringliteral">&quot;TRACEOFF&quot;</span>},
  {<a class="code" href="ripd_8h.html#a8f9db168b5c1d9e7b229df2919976f1b">RIP_POLL</a>,       <span class="stringliteral">&quot;POLL&quot;</span>},
  {<a class="code" href="ripd_8h.html#a2a1e079e9594db598a6ed6e25e1564d9">RIP_POLL_ENTRY</a>, <span class="stringliteral">&quot;POLL ENTRY&quot;</span>},
  {0, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>},
}
</pre></div>
<p>Definition at line <a class="el" href="ripd_8c_source.html#l00079">79</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>

</div>
</div>
<a class="anchor" id="aab861d5ec0475cd48794fd36d785f3fd"></a><!-- doxytag: member="ripd.c::rip_neighbor_table" ref="aab861d5ec0475cd48794fd36d785f3fd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__table.html">route_table</a>* <a class="el" href="ripd_8c.html#aab861d5ec0475cd48794fd36d785f3fd">rip_neighbor_table</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ripd_8c_source.html#l00057">57</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>

</div>
</div>
<a class="anchor" id="a85bd7b4a319ea721a2f61bd50e4d6a86"></a><!-- doxytag: member="ripd.c::rip_node" ref="a85bd7b4a319ea721a2f61bd50e4d6a86" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structcmd__node.html">cmd_node</a> <a class="el" href="vtysh_8c.html#a85bd7b4a319ea721a2f61bd50e4d6a86">rip_node</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
{
  <a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aba91035637d2e661aaea111ea200751a">RIP_NODE</a>,
  <span class="stringliteral">&quot;%s(config-router)# &quot;</span>,
  1
}
</pre></div>
<p>Definition at line <a class="el" href="ripd_8c_source.html#l03691">3691</a> of file <a class="el" href="ripd_8c_source.html">ripd.c</a>.</p>

</div>
</div>
<a class="anchor" id="a86af5d820616c880d6fd680778713f3b"></a><!-- doxytag: member="ripd.c::ripd_privs" ref="a86af5d820616c880d6fd680778713f3b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structzebra__privs__t.html">zebra_privs_t</a> <a class="el" href="ripd_8c.html#a86af5d820616c880d6fd680778713f3b">ripd_privs</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rip__main_8c_source.html#l00062">62</a> of file <a class="el" href="rip__main_8c_source.html">rip_main.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ripd_8c.html">ripd.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:35 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
