<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: ospfd/ospf_zebra.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ospf__zebra_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">ospfd/ospf_zebra.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="network_8h_source.html">network.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="routemap_8h_source.html">routemap.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="table_8h_source.html">table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="stream_8h_source.html">stream.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="zclient_8h_source.html">zclient.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="filter_8h_source.html">filter.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="plist_8h_source.html">plist.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="log_8h_source.html">log.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospfd_8h_source.html">ospfd/ospfd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__interface_8h_source.html">ospfd/ospf_interface.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__ism_8h_source.html">ospfd/ospf_ism.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__asbr_8h_source.html">ospfd/ospf_asbr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__abr_8h_source.html">ospfd/ospf_abr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__lsa_8h_source.html">ospfd/ospf_lsa.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__dump_8h_source.html">ospfd/ospf_dump.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__route_8h_source.html">ospfd/ospf_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ospf__zebra_8h_source.html">ospfd/ospf_zebra.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for ospf_zebra.c:</div>
<div class="dyncontent">
<div class="center"><img src="ospf__zebra_8c__incl.png" border="0" usemap="#ospfd_2ospf__zebra_8c" alt=""/></div>
<map name="ospfd_2ospf__zebra_8c" id="ospfd_2ospf__zebra_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1475,155,1541,181"/><area shape="rect" id="node59" href="thread_8h.html" title="thread.h" alt="" coords="2275,80,2347,107"/><area shape="rect" id="node61" href="command_8h.html" title="command.h" alt="" coords="2371,80,2463,107"/><area shape="rect" id="node63" href="network_8h.html" title="network.h" alt="" coords="2488,80,2571,107"/><area shape="rect" id="node65" href="prefix_8h.html" title="prefix.h" alt="" coords="2771,229,2839,256"/><area shape="rect" id="node67" href="routemap_8h.html" title="routemap.h" alt="" coords="2843,80,2933,107"/><area shape="rect" id="node69" href="table_8h.html" title="table.h" alt="" coords="2957,80,3021,107"/><area shape="rect" id="node71" href="stream_8h.html" title="stream.h" alt="" coords="2669,155,2744,181"/><area shape="rect" id="node74" href="memory_8h.html" title="memory.h" alt="" coords="3045,80,3128,107"/><area shape="rect" id="node76" href="zclient_8h.html" title="zclient.h" alt="" coords="3152,80,3224,107"/><area shape="rect" id="node78" href="filter_8h.html" title="filter.h" alt="" coords="2207,155,2267,181"/><area shape="rect" id="node80" href="plist_8h.html" title="plist.h" alt="" coords="3248,80,3307,107"/><area shape="rect" id="node82" href="log_8h.html" title="log.h" alt="" coords="2131,155,2183,181"/><area shape="rect" id="node85" href="ospfd_8h.html" title="ospfd/ospfd.h" alt="" coords="2043,80,2149,107"/><area shape="rect" id="node90" href="ospf__interface_8h.html" title="ospfd/ospf_interface.h" alt="" coords="3331,80,3489,107"/><area shape="rect" id="node92" href="ospf__ism_8h.html" title="ospfd/ospf_ism.h" alt="" coords="3514,80,3640,107"/><area shape="rect" id="node94" href="ospf__asbr_8h.html" title="ospfd/ospf_asbr.h" alt="" coords="3665,80,3796,107"/><area shape="rect" id="node96" href="ospf__abr_8h.html" title="ospfd/ospf_abr.h" alt="" coords="3821,80,3944,107"/><area shape="rect" id="node98" href="ospf__lsa_8h.html" title="ospfd/ospf_lsa.h" alt="" coords="2645,80,2768,107"/><area shape="rect" id="node101" href="ospf__dump_8h.html" title="ospfd/ospf_dump.h" alt="" coords="3969,80,4108,107"/><area shape="rect" id="node103" href="ospf__route_8h.html" title="ospfd/ospf_route.h" alt="" coords="4133,80,4269,107"/><area shape="rect" id="node105" href="ospf__zebra_8h.html" title="ospfd/ospf_zebra.h" alt="" coords="4295,80,4433,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="2033,229,2111,256"/></map>
</div>
</div>
<p><a href="ospf__zebra_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a84eeafdde68ec75e1f387fed8d8032cc">OSPF_DISTRIBUTE_UPDATE_DELAY</a>&#160;&#160;&#160;5</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#ac766e7564bdf5781398b1b1723b7d078">ospf_router_id_update_zebra</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#affcb29b33003244d9d1464bc907eda20">ospf_interface_add</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#afbcd5a399d377db72f8e11faa2b84b59">ospf_interface_delete</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structinterface.html">interface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a5b145abf4342f5655667f9359ced89d0">zebra_interface_if_lookup</a> (struct <a class="el" href="structstream.html">stream</a> *<a class="el" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#ac5a236e0c7105013a377deda755a3a9f">ospf_interface_state_up</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a8d0747b0991dedc055bf79a824a25834">ospf_interface_state_down</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#ab73bf4f6f734469a4d35cd112c74265a">ospf_interface_address_add</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#aef874b4b32cf37d7176a9f929de61d21">ospf_interface_address_delete</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a8045c2db458b9ad1e679863cf369e5be">ospf_zebra_add</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structospf__route.html">ospf_route</a> *or)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a083ae682548f0d7eb0761a2469c8d3f3">ospf_zebra_delete</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structospf__route.html">ospf_route</a> *or)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a49ea785a614ca3ddf8878814cd58681a">ospf_zebra_add_discard</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#aa80b8cdd0a2f3e0273c456de9bd553e2">ospf_zebra_delete_discard</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a0b61d95e6baf19bdd9d8a7705788a226">ospf_is_type_redistributed</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a0748b5b07dfb6ba653a5cb0e62fefef1">ospf_redistribute_set</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int mtype, int mvalue)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#ad4e2f81ba398e7d54e102e7f8b8715be">ospf_redistribute_unset</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a8b96216df94c4c5b348d2ef747f93473">ospf_redistribute_default_set</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, int originate, int mtype, int mvalue)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#aed80a1c3db7d07002fce735375188fb5">ospf_redistribute_default_unset</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a104b0443520d077cb0f1626f2bf6e735">ospf_external_lsa_originate_check</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structexternal__info.html">external_info</a> *ei)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a92dcc57e677b842ee7ce321d7cbae5e3">ospf_distribute_check_connected</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structexternal__info.html">external_info</a> *ei)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a7568b2d6ccc3687ad4a001cd142c4f6d">ospf_redistribute_check</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, struct <a class="el" href="structexternal__info.html">external_info</a> *ei, int *changed)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#aeab30313d326fbb9a7bea8fbaaedc269">ospf_routemap_set</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a43f47b8284073d5a9b54b2f12c57c2dd">ospf_routemap_unset</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#aa094f27792bcac11e8b637c65199e0fa">ospf_zebra_read_ipv4</a> (int command, struct <a class="el" href="structzclient.html">zclient</a> *<a class="el" href="structzclient.html">zclient</a>, <a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a> <a class="el" href="isis__pdu_8h.html#a64ed70bbcb4536e2af22a1aaf5209d18">length</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a22ecb4de553f038a26adf0f2e20a2791">ospf_distribute_list_out_set</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#ad2fba700f6fbd0ba66cbb0b3969fefc2">ospf_distribute_list_out_unset</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, const char *<a class="el" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a5c74ee744958cec76bc871c5beee7e00">ospf_distribute_list_update_timer</a> (struct <a class="el" href="structthread.html">thread</a> *<a class="el" href="structthread.html">thread</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a52f98f2caaa07486833cfaad5888fdaa">ospf_distribute_list_update</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a4a532c457c6791580c8b595aa044db28">ospf_filter_update</a> (struct <a class="el" href="structaccess__list.html">access_list</a> *access)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a490e15816e8166995cd3c9c4b7e0cc95">ospf_prefix_list_update</a> (struct <a class="el" href="structprefix__list.html">prefix_list</a> *plist)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structospf__distance.html">ospf_distance</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a3cb2e7f39c68713a806a1d08643bb4b7">ospf_distance_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#ad7de1ef8610fe7846b43f26dd906c2d5">ospf_distance_free</a> (struct <a class="el" href="structospf__distance.html">ospf_distance</a> *odistance)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a23e0b3598c30c6bafaaa10fa441a969f">ospf_distance_set</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, const char *distance_str, const char *ip_str, const char *access_list_str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a375a75203f161c2de60c77435b4b17c5">ospf_distance_unset</a> (struct <a class="el" href="structvty.html">vty</a> *<a class="el" href="structvty.html">vty</a>, struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>, const char *distance_str, const char *ip_str, char const *access_list_str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#ae662051107e9412269a5868e5c1085d7">ospf_distance_reset</a> (struct <a class="el" href="structospf.html">ospf</a> *<a class="el" href="structospf.html">ospf</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a41cbdfc85156d98b745b25d652cb35a3">ospf_distance_apply</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structospf__route.html">ospf_route</a> *or)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#ab1c4318a2b05df85bdda75f3355aa25c">ospf_zebra_init</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#abe1502972ba9aa40adc080e419c496bf">zclient</a> = NULL</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structthread__master.html">thread_master</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct in_addr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ospf__zebra_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a></td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a84eeafdde68ec75e1f387fed8d8032cc"></a><!-- doxytag: member="ospf_zebra.c::OSPF_DISTRIBUTE_UPDATE_DELAY" ref="a84eeafdde68ec75e1f387fed8d8032cc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OSPF_DISTRIBUTE_UPDATE_DELAY&#160;&#160;&#160;5</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00965">965</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a41cbdfc85156d98b745b25d652cb35a3"></a><!-- doxytag: member="ospf_zebra.c::ospf_distance_apply" ref="a41cbdfc85156d98b745b25d652cb35a3" args="(struct prefix_ipv4 *p, struct ospf_route *or)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_char ospf_distance_apply </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname"><em>or</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l01233">1233</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;

  ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
  <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#ab87aa14246f5c62f4d866ad725c5f268">distance_intra</a>)
    <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#abc7a6177d1cdfac4e8a93ddd4235b08c">OSPF_PATH_INTRA_AREA</a>)
      <span class="keywordflow">return</span> ospf-&gt;<a class="code" href="structospf.html#ab87aa14246f5c62f4d866ad725c5f268">distance_intra</a>;

  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#aa35f81a36f5ec5e3cf7541303a9ef668">distance_inter</a>)
    <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#a1db558d26de4f9320c77c0d783d7b2b3">OSPF_PATH_INTER_AREA</a>)
      <span class="keywordflow">return</span> ospf-&gt;<a class="code" href="structospf.html#aa35f81a36f5ec5e3cf7541303a9ef668">distance_inter</a>;

  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a293d2cb6ad232413308d29b40de93ad2">distance_external</a>)
    <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#a15dab014460164847059902ea4535834">OSPF_PATH_TYPE1_EXTERNAL</a>
        || or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#aa9752c4570157da8a3258dc4cdf23ce5">OSPF_PATH_TYPE2_EXTERNAL</a>)
      <span class="keywordflow">return</span> ospf-&gt;<a class="code" href="structospf.html#a293d2cb6ad232413308d29b40de93ad2">distance_external</a>;

  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a57b00cc3a2a5e6771e9b21ff5d7d3ff3">distance_all</a>)
    <span class="keywordflow">return</span> ospf-&gt;<a class="code" href="structospf.html#a57b00cc3a2a5e6771e9b21ff5d7d3ff3">distance_all</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad7de1ef8610fe7846b43f26dd906c2d5"></a><!-- doxytag: member="ospf_zebra.c::ospf_distance_free" ref="ad7de1ef8610fe7846b43f26dd906c2d5" args="(struct ospf_distance *odistance)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_distance_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf__distance.html">ospf_distance</a> *&#160;</td>
          <td class="paramname"><em>odistance</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l01120">1120</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad6bee78f12efadf451900d73648ac5f6">MTYPE_OSPF_DISTANCE</a>, odistance);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3cb2e7f39c68713a806a1d08643bb4b7"></a><!-- doxytag: member="ospf_zebra.c::ospf_distance_new" ref="a3cb2e7f39c68713a806a1d08643bb4b7" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structospf__distance.html">ospf_distance</a>* ospf_distance_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l01114">1114</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bad6bee78f12efadf451900d73648ac5f6">MTYPE_OSPF_DISTANCE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structospf__distance.html">ospf_distance</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae662051107e9412269a5868e5c1085d7"></a><!-- doxytag: member="ospf_zebra.c::ospf_distance_reset" ref="ae662051107e9412269a5868e5c1085d7" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_distance_reset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l01216">1216</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__distance.html">ospf_distance</a> *odistance;

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (ospf-&gt;<a class="code" href="structospf.html#aa0bcd2b2f2d571c795617a6ddcd0faa7">distance_table</a>); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((odistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
        <span class="keywordflow">if</span> (odistance-&gt;<a class="code" href="structospf__distance.html#ab75a7f5e896a82a39cd9b3ee32e9a9a1">access_list</a>)
          free (odistance-&gt;<a class="code" href="structospf__distance.html#ab75a7f5e896a82a39cd9b3ee32e9a9a1">access_list</a>);
        <a class="code" href="ospf__zebra_8c.html#ad7de1ef8610fe7846b43f26dd906c2d5">ospf_distance_free</a> (odistance);
        rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a23e0b3598c30c6bafaaa10fa441a969f"></a><!-- doxytag: member="ospf_zebra.c::ospf_distance_set" ref="a23e0b3598c30c6bafaaa10fa441a969f" args="(struct vty *vty, struct ospf *ospf, const char *distance_str, const char *ip_str, const char *access_list_str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_distance_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>distance_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ip_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>access_list_str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l01126">1126</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__distance.html">ospf_distance</a> *odistance;

  ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (ip_str, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (ret == 0)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  distance = atoi (distance_str);

  <span class="comment">/* Get OSPF distance node. */</span>
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (ospf-&gt;<a class="code" href="structospf.html#aa0bcd2b2f2d571c795617a6ddcd0faa7">distance_table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
    {
      odistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
    }
  <span class="keywordflow">else</span>
    {
      odistance = <a class="code" href="ospf__zebra_8c.html#a3cb2e7f39c68713a806a1d08643bb4b7">ospf_distance_new</a> ();
      rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = odistance;
    }

  <span class="comment">/* Set distance value. */</span>
  odistance-&gt;<a class="code" href="structospf__distance.html#abfb569e1e6c80fda164304bf00250375">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;

  <span class="comment">/* Reset access-list configuration. */</span>
  <span class="keywordflow">if</span> (odistance-&gt;<a class="code" href="structospf__distance.html#ab75a7f5e896a82a39cd9b3ee32e9a9a1">access_list</a>)
    {
      free (odistance-&gt;<a class="code" href="structospf__distance.html#ab75a7f5e896a82a39cd9b3ee32e9a9a1">access_list</a>);
      odistance-&gt;<a class="code" href="structospf__distance.html#ab75a7f5e896a82a39cd9b3ee32e9a9a1">access_list</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    }
  <span class="keywordflow">if</span> (access_list_str)
    odistance-&gt;<a class="code" href="structospf__distance.html#ab75a7f5e896a82a39cd9b3ee32e9a9a1">access_list</a> = strdup (access_list_str);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a375a75203f161c2de60c77435b4b17c5"></a><!-- doxytag: member="ospf_zebra.c::ospf_distance_unset" ref="a375a75203f161c2de60c77435b4b17c5" args="(struct vty *vty, struct ospf *ospf, const char *distance_str, const char *ip_str, char const *access_list_str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_distance_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structvty.html">vty</a> *&#160;</td>
          <td class="paramname"><em>vty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>distance_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ip_str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char const *&#160;</td>
          <td class="paramname"><em>access_list_str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l01175">1175</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> ret;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structospf__distance.html">ospf_distance</a> *odistance;

  ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (ip_str, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (ret == 0)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Malformed prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  distance = atoi (distance_str);

  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (ospf-&gt;<a class="code" href="structospf.html#aa0bcd2b2f2d571c795617a6ddcd0faa7">distance_table</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (!rn)
    {
      <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Can&#39;t find specified prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
    }

  odistance = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

  <span class="keywordflow">if</span> (odistance-&gt;<a class="code" href="structospf__distance.html#ab75a7f5e896a82a39cd9b3ee32e9a9a1">access_list</a>)
    free (odistance-&gt;<a class="code" href="structospf__distance.html#ab75a7f5e896a82a39cd9b3ee32e9a9a1">access_list</a>);
  <a class="code" href="ospf__zebra_8c.html#ad7de1ef8610fe7846b43f26dd906c2d5">ospf_distance_free</a> (odistance);

  rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a92dcc57e677b842ee7ce321d7cbae5e3"></a><!-- doxytag: member="ospf_zebra.c::ospf_distribute_check_connected" ref="a92dcc57e677b842ee7ce321d7cbae5e3" args="(struct ospf *ospf, struct external_info *ei)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_distribute_check_connected </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structexternal__info.html">external_info</a> *&#160;</td>
          <td class="paramname"><em>ei</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00683">683</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;


  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a977d3608343fe5db7900ec646880cb6a">oiflist</a>, node, oi))
      <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (oi-&gt;<a class="code" href="structospf__interface.html#a43493bc2b5d951e3e38ace850332eca1">address</a>, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>))
          <span class="keywordflow">return</span> 0;
  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a22ecb4de553f038a26adf0f2e20a2791"></a><!-- doxytag: member="ospf_zebra.c::ospf_distribute_list_out_set" ref="a22ecb4de553f038a26adf0f2e20a2791" args="(struct ospf *ospf, int type, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_distribute_list_out_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00886">886</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Lookup access-list for distribute-list. */</span>
  <a class="code" href="ospfd_8h.html#a96719238490e0edd9331bdeae79c190f">DISTRIBUTE_LIST</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>) = <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="comment">/* Clear previous distribute-name. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a21d66b4ea7498172da5521cf0445110e">DISTRIBUTE_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>))
    free (<a class="code" href="ospfd_8h.html#a21d66b4ea7498172da5521cf0445110e">DISTRIBUTE_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>));

  <span class="comment">/* Set distribute-name. */</span>
  <a class="code" href="ospfd_8h.html#a21d66b4ea7498172da5521cf0445110e">DISTRIBUTE_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>) = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);

  <span class="comment">/* If access-list have been set, schedule update timer. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a96719238490e0edd9331bdeae79c190f">DISTRIBUTE_LIST</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>))
    <a class="code" href="ospf__zebra_8c.html#a52f98f2caaa07486833cfaad5888fdaa">ospf_distribute_list_update</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad2fba700f6fbd0ba66cbb0b3969fefc2"></a><!-- doxytag: member="ospf_zebra.c::ospf_distribute_list_out_unset" ref="ad2fba700f6fbd0ba66cbb0b3969fefc2" args="(struct ospf *ospf, int type, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_distribute_list_out_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00906">906</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Schedule update timer. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a96719238490e0edd9331bdeae79c190f">DISTRIBUTE_LIST</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>))
    <a class="code" href="ospf__zebra_8c.html#a52f98f2caaa07486833cfaad5888fdaa">ospf_distribute_list_update</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);

  <span class="comment">/* Unset distribute-list. */</span>
  <a class="code" href="ospfd_8h.html#a96719238490e0edd9331bdeae79c190f">DISTRIBUTE_LIST</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>) = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Clear distribute-name. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a21d66b4ea7498172da5521cf0445110e">DISTRIBUTE_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>))
    free (<a class="code" href="ospfd_8h.html#a21d66b4ea7498172da5521cf0445110e">DISTRIBUTE_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>));

  <a class="code" href="ospfd_8h.html#a21d66b4ea7498172da5521cf0445110e">DISTRIBUTE_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>) = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a52f98f2caaa07486833cfaad5888fdaa"></a><!-- doxytag: member="ospf_zebra.c::ospf_distribute_list_update" ref="a52f98f2caaa07486833cfaad5888fdaa" args="(struct ospf *ospf, int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_distribute_list_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00969">969</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *rt;

  <span class="comment">/* External info does not exist. */</span>
  <span class="keywordflow">if</span> (!(rt = <a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)))
    <span class="keywordflow">return</span>;

  <span class="comment">/* If exists previously invoked thread, then let it continue. */</span>
  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#abfa4d7a08ec475ecaa88449f363acd23">t_distribute_update</a>)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Set timer. */</span>
  ospf-&gt;<a class="code" href="structospf.html#abfa4d7a08ec475ecaa88449f363acd23">t_distribute_update</a> =
    <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__zebra_8c.html#a5c74ee744958cec76bc871c5beee7e00">ospf_distribute_list_update_timer</a>,
                      (<span class="keywordtype">void</span> *) <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <a class="code" href="ospf__zebra_8c.html#a84eeafdde68ec75e1f387fed8d8032cc">OSPF_DISTRIBUTE_UPDATE_DELAY</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5c74ee744958cec76bc871c5beee7e00"></a><!-- doxytag: member="ospf_zebra.c::ospf_distribute_list_update_timer" ref="a5c74ee744958cec76bc871c5beee7e00" args="(struct thread *thread)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_distribute_list_update_timer </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structthread.html">thread</a> *&#160;</td>
          <td class="paramname"><em>thread</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00926">926</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structexternal__info.html">external_info</a> *ei;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *rt;
  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *lsa;
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, default_refresh = 0;
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;

  ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
  <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  ospf-&gt;<a class="code" href="structospf.html#abfa4d7a08ec475ecaa88449f363acd23">t_distribute_update</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;Zebra[Redistribute]: distribute-list update timer fired!&quot;</span>);

  <span class="comment">/* foreach all external info. */</span>
  <span class="keywordflow">for</span> (type = 0; type &lt;= <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; type++)
    {
      rt = <a class="code" href="ospfd_8h.html#a9fa5e60f9244cb3ea41a0a96d3c9b85c">EXTERNAL_INFO</a> (type);
      <span class="keywordflow">if</span> (!rt)
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (rt); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> ((ei = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
      {
        <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> (&amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>))
          default_refresh = 1;
        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((lsa = <a class="code" href="ospf__asbr_8c.html#ad45c036a67747a7f65338b7ec6ff748d">ospf_external_info_find_lsa</a> (ospf, &amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>)))
          <a class="code" href="ospf__lsa_8c.html#a12f57ed226cea2cfd9499069dbde2f3c">ospf_external_lsa_refresh</a> (ospf, lsa, ei, <a class="code" href="ospf__lsa_8h.html#ac0488097cd4fde2b7a0c63001f958fda">LSA_REFRESH_IF_CHANGED</a>);
        <span class="keywordflow">else</span>
          <a class="code" href="ospf__lsa_8c.html#a96d24d54ba0ac3adc1ff557621ff2911">ospf_external_lsa_originate</a> (ospf, ei);
      }
    }
  <span class="keywordflow">if</span> (default_refresh)
    <a class="code" href="ospf__lsa_8c.html#a1be6376d9b23634a76f2a6a07833fe1e">ospf_external_lsa_refresh_default</a> (ospf);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a104b0443520d077cb0f1626f2bf6e735"></a><!-- doxytag: member="ospf_zebra.c::ospf_external_lsa_originate_check" ref="a104b0443520d077cb0f1626f2bf6e735" args="(struct ospf *ospf, struct external_info *ei)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_external_lsa_originate_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structexternal__info.html">external_info</a> *&#160;</td>
          <td class="paramname"><em>ei</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00658">658</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* If prefix is multicast, then do not originate LSA. */</span>
  <span class="keywordflow">if</span> (IN_MULTICAST (htonl (ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>.prefix.s_addr)))
    {
      <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;LSA[Type5:%s]: Not originate AS-external-LSA, &quot;</span>
                 <span class="stringliteral">&quot;Prefix belongs multicast&quot;</span>, inet_ntoa (ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>.prefix));
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* Take care of default-originate. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> (&amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>))
    <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#a1111f78d01dc9e8d522e639da7a2a36c">default_originate</a> == <a class="code" href="ospfd_8h.html#a2cb5991aff286dfe8d5b67d9730e0c81">DEFAULT_ORIGINATE_NONE</a>)
      {
        <a class="code" href="log_8h.html#a383184727341e7ad985deb9e4f2156c7">zlog_info</a> (<span class="stringliteral">&quot;LSA[Type5:0.0.0.0]: Not originate AS-exntenal-LSA &quot;</span>
                   <span class="stringliteral">&quot;for default&quot;</span>);
        <span class="keywordflow">return</span> 0;
      }

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4a532c457c6791580c8b595aa044db28"></a><!-- doxytag: member="ospf_zebra.c::ospf_filter_update" ref="a4a532c457c6791580c8b595aa044db28" args="(struct access_list *access)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ospf_filter_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structaccess__list.html">access_list</a> *&#160;</td>
          <td class="paramname"><em>access</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00989">989</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  <span class="keywordtype">int</span> abr_inv = 0;
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;

  <span class="comment">/* If OSPF instatnce does not exist, return right now. */</span>
  ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
  <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Update distribute-list, and apply filter. */</span>
  <span class="keywordflow">for</span> (type = 0; type &lt;= <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; type++)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#afdae06aa57f00f3f4e3fd12055ead548">ROUTEMAP</a> (ospf, type) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
          <span class="comment">/* if route-map is not NULL it may be using this access list */</span>
          <a class="code" href="ospf__zebra_8c.html#a52f98f2caaa07486833cfaad5888fdaa">ospf_distribute_list_update</a> (ospf, type);
          <span class="keywordflow">continue</span>;
        }

      <span class="comment">/* There is place for route-map for default-information (ZEBRA_ROUTE_MAX),</span>
<span class="comment">       * but no distribute list. */</span>
      <span class="keywordflow">if</span> (type == <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>)
    <span class="keywordflow">break</span>;

      <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a21d66b4ea7498172da5521cf0445110e">DISTRIBUTE_NAME</a> (ospf, type))
        {
          <span class="comment">/* Keep old access-list for distribute-list. */</span>
          <span class="keyword">struct </span><a class="code" href="structaccess__list.html">access_list</a> *old = <a class="code" href="ospfd_8h.html#a96719238490e0edd9331bdeae79c190f">DISTRIBUTE_LIST</a> (ospf, type);

          <span class="comment">/* Update access-list for distribute-list. */</span>
          <a class="code" href="ospfd_8h.html#a96719238490e0edd9331bdeae79c190f">DISTRIBUTE_LIST</a> (ospf, type) =
            <a class="code" href="filter_8c.html#a8cb65cd01015f6673c632cb5b8714b3e">access_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="ospfd_8h.html#a21d66b4ea7498172da5521cf0445110e">DISTRIBUTE_NAME</a> (ospf, type));

          <span class="comment">/* No update for this distribute type. */</span>
          <span class="keywordflow">if</span> (old == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; <a class="code" href="ospfd_8h.html#a96719238490e0edd9331bdeae79c190f">DISTRIBUTE_LIST</a> (ospf, type) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
            <span class="keywordflow">continue</span>;

          <span class="comment">/* Schedule distribute-list update timer. */</span>
          <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a96719238490e0edd9331bdeae79c190f">DISTRIBUTE_LIST</a> (ospf, type) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> ||
              strcmp (<a class="code" href="ospfd_8h.html#a21d66b4ea7498172da5521cf0445110e">DISTRIBUTE_NAME</a> (ospf, type), access-&gt;<a class="code" href="structaccess__list.html#afdafa2fa941dc9afe1ad8471420c655a">name</a>) == 0)
            <a class="code" href="ospf__zebra_8c.html#a52f98f2caaa07486833cfaad5888fdaa">ospf_distribute_list_update</a> (ospf, type);
        }
    }

  <span class="comment">/* Update Area access-list. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, area))
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospf6__area_8h.html#a4b149526dcc0d9c5de7086d581336dcb">EXPORT_NAME</a> (area))
        {
          <a class="code" href="ospf6__area_8h.html#a3b1e86d59d3641da3b6b9281a97c7927">EXPORT_LIST</a> (area) = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          abr_inv++;
        }

      <span class="keywordflow">if</span> (<a class="code" href="ospf6__area_8h.html#a8f03536971036c0537f7bda3fb525b14">IMPORT_NAME</a> (area))
        {
          <a class="code" href="ospf6__area_8h.html#a8bb9cd837b1e23c12864c27e469c9575">IMPORT_LIST</a> (area) = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
          abr_inv++;
        }
    }

  <span class="comment">/* Schedule ABR tasks -- this will be changed -- takada. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a66c6ce8df7e5b79426d9eca9f8ef6d27">IS_OSPF_ABR</a> (ospf) &amp;&amp; abr_inv)
    <a class="code" href="ospf__abr_8c.html#a1ff6c727604d00c49b9c4a26131e5462">ospf_schedule_abr_task</a> (ospf);
}
</pre></div>
</div>
</div>
<a class="anchor" id="affcb29b33003244d9d1464bc907eda20"></a><!-- doxytag: member="ospf_zebra.c::ospf_interface_add" ref="affcb29b33003244d9d1464bc907eda20" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_interface_add </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00087">87</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;

  ifp = <a class="code" href="zclient_8c.html#af2dbed49848c57eaae1185751ec18648">zebra_interface_add_read</a> (zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_INTERFACE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Zebra: interface add %s index %d flags %llx metric %d mtu %d&quot;</span>,
               ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>)ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>,
               ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a>, ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (ifp-&gt;<a class="code" href="structinterface.html#a580b288c96c34d57028bfecee2b912c8">info</a>);

  <span class="keywordflow">if</span> (!<a class="code" href="ospf__interface_8h.html#afe6a1e2fe03d1bd93a1deab41d6eb8e1">OSPF_IF_PARAM_CONFIGURED</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>))
    {
      <a class="code" href="ospf__interface_8h.html#abf54ad522ce6b3724bd2c7959e0a6d6a">SET_IF_PARAM</a> (<a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp), <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);
      <a class="code" href="ospf__interface_8h.html#aa0b2fa68b7fc94f71356893c7e03770a">IF_DEF_PARAMS</a> (ifp)-&gt;type = <a class="code" href="ospf__interface_8c.html#a492149baf1a156aaeb909b62384fc7ef">ospf_default_iftype</a>(ifp);
    }

  <a class="code" href="ospfd_8c.html#a9d40c9fe8a5fd9ec7add909556c5bd3f">ospf_if_update</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, ifp);

<span class="preprocessor">#ifdef HAVE_SNMP</span>
<span class="preprocessor"></span>  <a class="code" href="ospf__snmp_8h.html#ac794e2fa68a7229faab5403263339aa0">ospf_snmp_if_update</a> (ifp);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab73bf4f6f734469a4d35cd112c74265a"></a><!-- doxytag: member="ospf_zebra.c::ospf_interface_address_add" ref="ab73bf4f6f734469a4d35cd112c74265a" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_interface_address_add </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00253">253</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *c;

  c = <a class="code" href="zclient_8c.html#a361d54ec3dad267afc3335fe155367a2">zebra_interface_address_read</a> (command, zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>);

  <span class="keywordflow">if</span> (c == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_INTERFACE))
    {
      <span class="keywordtype">char</span> buf[128];
      <a class="code" href="prefix_8c.html#a8b848557695ae5694bd2282eba23e367">prefix2str</a>(c-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>, buf, <span class="keyword">sizeof</span>(buf));
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra: interface %s address add %s&quot;</span>, c-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, buf);
    }

  <a class="code" href="ospfd_8c.html#a9d40c9fe8a5fd9ec7add909556c5bd3f">ospf_if_update</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, c-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>);

<span class="preprocessor">#ifdef HAVE_SNMP</span>
<span class="preprocessor"></span>  <a class="code" href="ospf__snmp_8h.html#ac794e2fa68a7229faab5403263339aa0">ospf_snmp_if_update</a> (c-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aef874b4b32cf37d7176a9f929de61d21"></a><!-- doxytag: member="ospf_zebra.c::ospf_interface_address_delete" ref="aef874b4b32cf37d7176a9f929de61d21" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_interface_address_delete </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00280">280</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *c;
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  c = <a class="code" href="zclient_8c.html#a361d54ec3dad267afc3335fe155367a2">zebra_interface_address_read</a> (command, zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>);

  <span class="keywordflow">if</span> (c == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_INTERFACE))
    {
      <span class="keywordtype">char</span> buf[128];
      <a class="code" href="prefix_8c.html#a8b848557695ae5694bd2282eba23e367">prefix2str</a>(c-&gt;address, buf, <span class="keyword">sizeof</span>(buf));
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra: interface %s address delete %s&quot;</span>, c-&gt;ifp-&gt;name, buf);
    }

  ifp = c-&gt;ifp;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = *c-&gt;address;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;

  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp), &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
  <span class="keywordflow">if</span> (!rn)
    {
      <a class="code" href="if_8c.html#aefcfc40d0358af75f26135eb0a33903d">connected_free</a> (c);
      <span class="keywordflow">return</span> 0;
    }

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);
  oi = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>;

  <span class="comment">/* Call interface hook functions to clean up */</span>
  <a class="code" href="ospf__interface_8c.html#aa06699fd3d9034f239d51f2ea6098b3b">ospf_if_free</a> (oi);

<span class="preprocessor">#ifdef HAVE_SNMP</span>
<span class="preprocessor"></span>  <a class="code" href="ospf__snmp_8h.html#ac794e2fa68a7229faab5403263339aa0">ospf_snmp_if_update</a> (c-&gt;ifp);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>

  <a class="code" href="if_8c.html#aefcfc40d0358af75f26135eb0a33903d">connected_free</a> (c);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afbcd5a399d377db72f8e11faa2b84b59"></a><!-- doxytag: member="ospf_zebra.c::ospf_interface_delete" ref="afbcd5a399d377db72f8e11faa2b84b59" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_interface_delete </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00116">116</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;

  s = zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>;
  <span class="comment">/* zebra_interface_state_read() updates interface structure in iflist */</span>
  ifp = <a class="code" href="zclient_8c.html#a989f3e044d41b4e18463027a94b846e7">zebra_interface_state_read</a> (s);

  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#ade77fc67f30030f539906dad43c239ab">if_is_up</a> (ifp))
    <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;Zebra: got delete of %s, but interface is still up&quot;</span>,
               ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_INTERFACE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
      (<span class="stringliteral">&quot;Zebra: interface delete %s index %d flags %lld metric %d mtu %d&quot;</span>,
       ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>, ifp-&gt;<a class="code" href="structinterface.html#a09ed96b900f31d769a76a32b67217c8f">flags</a>, ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a>, ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);

<span class="preprocessor">#ifdef HAVE_SNMP</span>
<span class="preprocessor"></span>  <a class="code" href="ospf__snmp_8h.html#aba5a9cfd31a7e2217c91a3d5715e9523">ospf_snmp_if_delete</a> (ifp);
<span class="preprocessor">#endif </span><span class="comment">/* HAVE_SNMP */</span>

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
      <a class="code" href="ospf__interface_8c.html#aa06699fd3d9034f239d51f2ea6098b3b">ospf_if_free</a> ((<span class="keyword">struct</span> <a class="code" href="structospf__interface.html">ospf_interface</a> *) rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>);

  ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a> = <a class="code" href="if_8h.html#a18949aeeb4a8fbe7e3be43e6bbe86527">IFINDEX_INTERNAL</a>;
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8d0747b0991dedc055bf79a824a25834"></a><!-- doxytag: member="ospf_zebra.c::ospf_interface_state_down" ref="a8d0747b0991dedc055bf79a824a25834" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_interface_state_down </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00227">227</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *node;

  ifp = <a class="code" href="zclient_8c.html#a989f3e044d41b4e18463027a94b846e7">zebra_interface_state_read</a> (zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>);

  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_INTERFACE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Zebra: Interface[%s] state change to down.&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

  <span class="keywordflow">for</span> (node = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); node; node = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (node))
    {
      <span class="keywordflow">if</span> ((oi = node-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <span class="keywordflow">continue</span>;
      <a class="code" href="ospf__interface_8c.html#ac40adc9d92baa831a8ea1cde67defbb2">ospf_if_down</a> (oi);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac5a236e0c7105013a377deda755a3a9f"></a><!-- doxytag: member="ospf_zebra.c::ospf_interface_state_up" ref="ac5a236e0c7105013a377deda755a3a9f" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_interface_state_up </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00165">165</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> *ifp;
  <span class="keyword">struct </span><a class="code" href="structospf__interface.html">ospf_interface</a> *oi;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;

  ifp = <a class="code" href="ospf__zebra_8c.html#a5b145abf4342f5655667f9359ced89d0">zebra_interface_if_lookup</a> (zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>);

  <span class="keywordflow">if</span> (ifp == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Interface is already up. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a> (ifp))
    {
      <span class="comment">/* Temporarily keep ifp values. */</span>
      <span class="keyword">struct </span><a class="code" href="structinterface.html">interface</a> if_tmp;
      <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;if_tmp, ifp, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a>));

      <a class="code" href="zclient_8c.html#a2366afba487613909591ecadd8985f1a">zebra_interface_if_set_value</a> (zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>, ifp);

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_INTERFACE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Zebra: Interface[%s] state update.&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

      <span class="keywordflow">if</span> (if_tmp.bandwidth != ifp-&gt;<a class="code" href="structinterface.html#a324b6a80459775b1e5e254369649e075">bandwidth</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_INTERFACE))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Zebra: Interface[%s] bandwidth change %d -&gt; %d.&quot;</span>,
                       ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, if_tmp.bandwidth, ifp-&gt;<a class="code" href="structinterface.html#a324b6a80459775b1e5e254369649e075">bandwidth</a>);

          <a class="code" href="ospf__interface_8c.html#a7b1ed4ce1af4c1513f7bd6c6fcc817a3">ospf_if_recalculate_output_cost</a> (ifp);
        }

      <span class="keywordflow">if</span> (if_tmp.mtu != ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_INTERFACE))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Zebra: Interface[%s] MTU change %u -&gt; %u.&quot;</span>,
                       ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>, if_tmp.mtu, ifp-&gt;<a class="code" href="structinterface.html#aadd24df2d261a3bfcbdfe4797e639afb">mtu</a>);

      <span class="comment">/* Must reset the interface (simulate down/up) when MTU changes. */</span>
          <a class="code" href="ospf__interface_8c.html#ac5faa00cb6266621add9342300b4fdd8">ospf_if_reset</a>(ifp);
    }
      <span class="keywordflow">return</span> 0;
    }

  <a class="code" href="zclient_8c.html#a2366afba487613909591ecadd8985f1a">zebra_interface_if_set_value</a> (zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>, ifp);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_INTERFACE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Zebra: Interface[%s] state change to up.&quot;</span>, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);

  <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (<a class="code" href="ospf__interface_8h.html#ad330e5d357fd1cb85883ed422291a332">IF_OIFS</a> (ifp)); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
    {
      <span class="keywordflow">if</span> ((oi = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        <span class="keywordflow">continue</span>;

      <a class="code" href="ospf__interface_8c.html#a5a63d5d3af1629d69c380eb09f3e8b7b">ospf_if_up</a> (oi);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0b61d95e6baf19bdd9d8a7705788a226"></a><!-- doxytag: member="ospf_zebra.c::ospf_is_type_redistributed" ref="a0b61d95e6baf19bdd9d8a7705788a226" args="(int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_is_type_redistributed </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00522">522</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (<a class="code" href="ospf__zebra_8h.html#a3ccd23195e60a2a4007fafb6a54e1a4e">DEFAULT_ROUTE_TYPE</a> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)) ?
    <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a9d77c71b907f0f130f467edaefed93e9">default_information</a> : <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>];
}
</pre></div>
</div>
</div>
<a class="anchor" id="a490e15816e8166995cd3c9c4b7e0cc95"></a><!-- doxytag: member="ospf_zebra.c::ospf_prefix_list_update" ref="a490e15816e8166995cd3c9c4b7e0cc95" args="(struct prefix_list *plist)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_prefix_list_update </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__list.html">prefix_list</a> *&#160;</td>
          <td class="paramname"><em>plist</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l01060">1060</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;
  <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  <span class="keywordtype">int</span> abr_inv = 0;
  <span class="keyword">struct </span><a class="code" href="structospf__area.html">ospf_area</a> *<a class="code" href="ospf__vty_8c.html#a7030c85f46deeffac793079c664c14ce">area</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;

  <span class="comment">/* If OSPF instatnce does not exist, return right now. */</span>
  ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
  <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Update all route-maps which are used as redistribution filters.</span>
<span class="comment">   * They might use prefix-list.</span>
<span class="comment">   */</span>
  <span class="keywordflow">for</span> (type = 0; type &lt;= <a class="code" href="zebra_8h.html#aec97442680d773fd62f9af5c9426b842">ZEBRA_ROUTE_MAX</a>; type++)
    {
      <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#afdae06aa57f00f3f4e3fd12055ead548">ROUTEMAP</a> (ospf, type) != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
        {
          <span class="comment">/* If route-map is not NULL it may be using this prefix list */</span>
          <a class="code" href="ospf__zebra_8c.html#a52f98f2caaa07486833cfaad5888fdaa">ospf_distribute_list_update</a> (ospf, type);
          <span class="keywordflow">continue</span>;
        }
    }

  <span class="comment">/* Update area filter-lists. */</span>
  <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ospf-&gt;<a class="code" href="structospf.html#a3f6f2d3b6f2ae9f0ad87223301d92bcc">areas</a>, node, area))
    {
      <span class="comment">/* Update filter-list in. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf6__area_8h.html#abe51249890d05db475de4eed718656ea">PREFIX_NAME_IN</a> (area))
        <span class="keywordflow">if</span> (strcmp (<a class="code" href="ospf6__area_8h.html#abe51249890d05db475de4eed718656ea">PREFIX_NAME_IN</a> (area), plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>) == 0)
          {
            <a class="code" href="bgp__route_8h.html#ad143503066e23e446015fc61ba2e72ed">PREFIX_LIST_IN</a> (area) =
              <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="ospf6__area_8h.html#abe51249890d05db475de4eed718656ea">PREFIX_NAME_IN</a> (area));
            abr_inv++;
          }

      <span class="comment">/* Update filter-list out. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="ospf6__area_8h.html#a4ec3abaef7e217292ab5589e1b207957">PREFIX_NAME_OUT</a> (area))
        <span class="keywordflow">if</span> (strcmp (<a class="code" href="ospf6__area_8h.html#a4ec3abaef7e217292ab5589e1b207957">PREFIX_NAME_OUT</a> (area), plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>) == 0)
          {
            <a class="code" href="bgp__route_8h.html#ad143503066e23e446015fc61ba2e72ed">PREFIX_LIST_IN</a> (area) =
              <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="ospf6__area_8h.html#a4ec3abaef7e217292ab5589e1b207957">PREFIX_NAME_OUT</a> (area));
            abr_inv++;
          }
    }

  <span class="comment">/* Schedule ABR task. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a66c6ce8df7e5b79426d9eca9f8ef6d27">IS_OSPF_ABR</a> (ospf) &amp;&amp; abr_inv)
    <a class="code" href="ospf__abr_8c.html#a1ff6c727604d00c49b9c4a26131e5462">ospf_schedule_abr_task</a> (ospf);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7568b2d6ccc3687ad4a001cd142c4f6d"></a><!-- doxytag: member="ospf_zebra.c::ospf_redistribute_check" ref="a7568b2d6ccc3687ad4a001cd142c4f6d" args="(struct ospf *ospf, struct external_info *ei, int *changed)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_redistribute_check </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structexternal__info.html">external_info</a> *&#160;</td>
          <td class="paramname"><em>ei</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>changed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00697">697</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__map__set__values.html">route_map_set_values</a> save_values;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = &amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>;
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = <a class="code" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> (&amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>) ? <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a> : ei-&gt;<a class="code" href="structexternal__info.html#ad815e4322555ec84d18056c00745008f">type</a>;

  <span class="keywordflow">if</span> (changed)
    *changed = 0;

  <span class="keywordflow">if</span> (!<a class="code" href="ospf__zebra_8c.html#a104b0443520d077cb0f1626f2bf6e735">ospf_external_lsa_originate_check</a> (ospf, ei))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Take care connected route. */</span>
  <span class="keywordflow">if</span> (type == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a> &amp;&amp;
      !<a class="code" href="ospf__zebra_8c.html#a92dcc57e677b842ee7ce321d7cbae5e3">ospf_distribute_check_connected</a> (ospf, ei))
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (!<a class="code" href="ospf__zebra_8h.html#a3ccd23195e60a2a4007fafb6a54e1a4e">DEFAULT_ROUTE_TYPE</a> (type) &amp;&amp; <a class="code" href="ospfd_8h.html#a21d66b4ea7498172da5521cf0445110e">DISTRIBUTE_NAME</a> (ospf, type))
    <span class="comment">/* distirbute-list exists, but access-list may not? */</span>
    <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a96719238490e0edd9331bdeae79c190f">DISTRIBUTE_LIST</a> (ospf, type))
      <span class="keywordflow">if</span> (<a class="code" href="filter_8c.html#a5565f487c65e2bf0308c7fd529f121a0">access_list_apply</a> (<a class="code" href="ospfd_8h.html#a96719238490e0edd9331bdeae79c190f">DISTRIBUTE_LIST</a> (ospf, type), p) == <a class="code" href="filter_8h.html#ab3b7281956317556f846daaebf75de72a898abadf6cc2f9d27780782f09d3a3e3">FILTER_DENY</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute[%s]: %s/%d filtered by ditribute-list.&quot;</span>,
                       <a class="code" href="ospf__dump_8c.html#ac9f0bcaf160e328b6acb2c361dfa5002">ospf_redist_string</a>(type),
                       inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
          <span class="keywordflow">return</span> 0;
        }

  save_values = ei-&gt;<a class="code" href="structexternal__info.html#ab1eb40ea0eff4aa76fc3e0c815bb9839">route_map_set</a>;
  <a class="code" href="ospf__asbr_8c.html#aa4b664d1d2931e548f1e0803d00549ec">ospf_reset_route_map_set_values</a> (&amp;ei-&gt;<a class="code" href="structexternal__info.html#ab1eb40ea0eff4aa76fc3e0c815bb9839">route_map_set</a>);

  <span class="comment">/* apply route-map if needed */</span>
  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a5c462a148a6cd728dcf50a1d7cc18804">ROUTEMAP_NAME</a> (ospf, type))
    {
      <span class="keywordtype">int</span> ret;

      ret = <a class="code" href="routemap_8c.html#a3372553a024332702cfd603e1f4c08d6">route_map_apply</a> (<a class="code" href="ospfd_8h.html#afdae06aa57f00f3f4e3fd12055ead548">ROUTEMAP</a> (ospf, type), (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p,
                             <a class="code" href="routemap_8h.html#ae21439463f873ce0ce1556c9d6fa7370a4284b205cb07374b45edb0fa25b8b064">RMAP_OSPF</a>, ei);

      <span class="keywordflow">if</span> (ret == <a class="code" href="routemap_8h.html#afd7345bfd662f1e7c77f0be351cd1516aa0f40f0a91e43bfe7131839fe179ac64">RMAP_DENYMATCH</a>)
        {
          ei-&gt;<a class="code" href="structexternal__info.html#ab1eb40ea0eff4aa76fc3e0c815bb9839">route_map_set</a> = save_values;
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
            <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute[%s]: %s/%d filtered by route-map.&quot;</span>,
                       <a class="code" href="ospf__dump_8c.html#ac9f0bcaf160e328b6acb2c361dfa5002">ospf_redist_string</a>(type),
                       inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
          <span class="keywordflow">return</span> 0;
        }

      <span class="comment">/* check if &#39;route-map set&#39; changed something */</span>
      <span class="keywordflow">if</span> (changed)
        *changed = !<a class="code" href="ospf__asbr_8c.html#a09c629a907b15a7997bda76039ec73cd">ospf_route_map_set_compare</a> (&amp;ei-&gt;<a class="code" href="structexternal__info.html#ab1eb40ea0eff4aa76fc3e0c815bb9839">route_map_set</a>,
                                                &amp;save_values);
    }

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8b96216df94c4c5b348d2ef747f93473"></a><!-- doxytag: member="ospf_zebra.c::ospf_redistribute_default_set" ref="a8b96216df94c4c5b348d2ef747f93473" args="(struct ospf *ospf, int originate, int mtype, int mvalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_redistribute_default_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>originate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mtype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mvalue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00598">598</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  ospf-&gt;<a class="code" href="structospf.html#a1111f78d01dc9e8d522e639da7a2a36c">default_originate</a> = originate;
  ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>].<a class="code" href="structospf.html#adcc2e8439120b1f4144a6be8d702f638">type</a> = mtype;
  ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>].<a class="code" href="structospf.html#a2bd05e59ebe8b6b342e19562d55a8a10">value</a> = mvalue;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__zebra_8c.html#a0b61d95e6baf19bdd9d8a7705788a226">ospf_is_type_redistributed</a> (<a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>))
    {
      <span class="comment">/* if ospf-&gt;default_originate changes value, is calling</span>
<span class="comment">     ospf_external_lsa_refresh_default sufficient to implement</span>
<span class="comment">     the change? */</span>
      <a class="code" href="ospf__lsa_8c.html#a1be6376d9b23634a76f2a6a07833fe1e">ospf_external_lsa_refresh_default</a> (ospf);

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute[%s]: Refresh  Type[%d], Metric[%d]&quot;</span>,
                   <a class="code" href="ospf__dump_8c.html#ac9f0bcaf160e328b6acb2c361dfa5002">ospf_redist_string</a>(<a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>),
                   <a class="code" href="ospf__lsa_8c.html#a10781678cf0418caa60ce806cb18f7f1">metric_type</a> (ospf, <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>),
                   <a class="code" href="ospf__lsa_8c.html#aebf4067916a42ca176b32e7dbb15621d">metric_value</a> (ospf, <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>));
      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
    }

  <a class="code" href="zclient_8c.html#a2d2c4a009144e592b06b55055ab9c38e">zclient_redistribute_default</a> (<a class="code" href="zebra_8h.html#a6a54e4c8e5f637b9edb208de808a2ac6">ZEBRA_REDISTRIBUTE_DEFAULT_ADD</a>, <a class="code" href="structzclient.html">zclient</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute[DEFAULT]: Start  Type[%d], Metric[%d]&quot;</span>,
               <a class="code" href="ospf__lsa_8c.html#a10781678cf0418caa60ce806cb18f7f1">metric_type</a> (ospf, <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>),
               <a class="code" href="ospf__lsa_8c.html#aebf4067916a42ca176b32e7dbb15621d">metric_value</a> (ospf, <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>));

  <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>.s_addr == 0)
    ospf-&gt;<a class="code" href="structospf.html#a4e2d4fb95c750aeddee77669b7073e86">external_origin</a> |= (1 &lt;&lt; <a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>);
  <span class="keywordflow">else</span>
    <a class="code" href="thread_8h.html#aca77b3bbd166d3573de5ecd9756a590c">thread_add_timer</a> (<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <a class="code" href="ospf__lsa_8c.html#ab2bcb8bca8aa169076de0505e3ddad72">ospf_default_originate_timer</a>, ospf, 1);

  <a class="code" href="ospf__asbr_8c.html#a15ef7b9d7fd4f1120453e770c076160a">ospf_asbr_status_update</a> (ospf, ++ospf-&gt;<a class="code" href="structospf.html#a298631df5a443358670e6415175f2251">redistribute</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aed80a1c3db7d07002fce735375188fb5"></a><!-- doxytag: member="ospf_zebra.c::ospf_redistribute_default_unset" ref="aed80a1c3db7d07002fce735375188fb5" args="(struct ospf *ospf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_redistribute_default_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00638">638</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!<a class="code" href="ospf__zebra_8c.html#a0b61d95e6baf19bdd9d8a7705788a226">ospf_is_type_redistributed</a> (<a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>))
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;

  ospf-&gt;<a class="code" href="structospf.html#a1111f78d01dc9e8d522e639da7a2a36c">default_originate</a> = <a class="code" href="ospfd_8h.html#a2cb5991aff286dfe8d5b67d9730e0c81">DEFAULT_ORIGINATE_NONE</a>;
  ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>].<a class="code" href="structospf.html#adcc2e8439120b1f4144a6be8d702f638">type</a> = -1;
  ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="ospf__zebra_8h.html#a353195a6a59d18a6807885cbefaf0d24">DEFAULT_ROUTE</a>].<a class="code" href="structospf.html#a2bd05e59ebe8b6b342e19562d55a8a10">value</a> = -1;

  <a class="code" href="zclient_8c.html#a2d2c4a009144e592b06b55055ab9c38e">zclient_redistribute_default</a> (<a class="code" href="zebra_8h.html#a2fd9f5c25e3e2e28a03047807f20e246">ZEBRA_REDISTRIBUTE_DEFAULT_DELETE</a>, <a class="code" href="structzclient.html">zclient</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute[DEFAULT]: Stop&quot;</span>);

  <a class="code" href="ospf__asbr_8c.html#a15ef7b9d7fd4f1120453e770c076160a">ospf_asbr_status_update</a> (ospf, --ospf-&gt;<a class="code" href="structospf.html#a298631df5a443358670e6415175f2251">redistribute</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0748b5b07dfb6ba653a5cb0e62fefef1"></a><!-- doxytag: member="ospf_zebra.c::ospf_redistribute_set" ref="a0748b5b07dfb6ba653a5cb0e62fefef1" args="(struct ospf *ospf, int type, int mtype, int mvalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_redistribute_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mtype</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mvalue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00529">529</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> force = 0;

  <span class="keywordflow">if</span> (<a class="code" href="ospf__zebra_8c.html#a0b61d95e6baf19bdd9d8a7705788a226">ospf_is_type_redistributed</a> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>))
    {
      <span class="keywordflow">if</span> (mtype != ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structospf.html#adcc2e8439120b1f4144a6be8d702f638">type</a>)
        {
          ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structospf.html#adcc2e8439120b1f4144a6be8d702f638">type</a> = mtype;
          force = <a class="code" href="ospf__lsa_8h.html#a389234e05af4a29be76c63dc46576791">LSA_REFRESH_FORCE</a>;
        }
      <span class="keywordflow">if</span> (mvalue != ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structospf.html#a2bd05e59ebe8b6b342e19562d55a8a10">value</a>)
        {
          ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structospf.html#a2bd05e59ebe8b6b342e19562d55a8a10">value</a> = mvalue;
          force = <a class="code" href="ospf__lsa_8h.html#a389234e05af4a29be76c63dc46576791">LSA_REFRESH_FORCE</a>;
        }

      <a class="code" href="ospf__lsa_8c.html#aef94b25c2a2fad9088e82a85ee71f226">ospf_external_lsa_refresh_type</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, force);

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute[%s]: Refresh  Type[%d], Metric[%d]&quot;</span>,
                   <a class="code" href="ospf__dump_8c.html#ac9f0bcaf160e328b6acb2c361dfa5002">ospf_redist_string</a>(<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>),
                   <a class="code" href="ospf__lsa_8c.html#a10781678cf0418caa60ce806cb18f7f1">metric_type</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>), <a class="code" href="ospf__lsa_8c.html#aebf4067916a42ca176b32e7dbb15621d">metric_value</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>));

      <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
    }

  ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structospf.html#adcc2e8439120b1f4144a6be8d702f638">type</a> = mtype;
  ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structospf.html#a2bd05e59ebe8b6b342e19562d55a8a10">value</a> = mvalue;

  <a class="code" href="zclient_8c.html#a4381afa78256a1211fe7881394d7e666">zclient_redistribute</a> (<a class="code" href="zebra_8h.html#aaf00306d6060095dd258463ee7cb0cc1">ZEBRA_REDISTRIBUTE_ADD</a>, <a class="code" href="structzclient.html">zclient</a>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute[%s]: Start  Type[%d], Metric[%d]&quot;</span>,
               <a class="code" href="ospf__dump_8c.html#ac9f0bcaf160e328b6acb2c361dfa5002">ospf_redist_string</a>(<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>),
               <a class="code" href="ospf__lsa_8c.html#a10781678cf0418caa60ce806cb18f7f1">metric_type</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>), <a class="code" href="ospf__lsa_8c.html#aebf4067916a42ca176b32e7dbb15621d">metric_value</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>));

  <a class="code" href="ospf__asbr_8c.html#a15ef7b9d7fd4f1120453e770c076160a">ospf_asbr_status_update</a> (ospf, ++ospf-&gt;<a class="code" href="structospf.html#a298631df5a443358670e6415175f2251">redistribute</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad4e2f81ba398e7d54e102e7f8b8715be"></a><!-- doxytag: member="ospf_zebra.c::ospf_redistribute_unset" ref="ad4e2f81ba398e7d54e102e7f8b8715be" args="(struct ospf *ospf, int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ospf_redistribute_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00572">572</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c2ac97dd71c8f3a0db036c6c0216208">redist_default</a>)
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;

  <span class="keywordflow">if</span> (!<a class="code" href="ospf__zebra_8c.html#a0b61d95e6baf19bdd9d8a7705788a226">ospf_is_type_redistributed</a> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>))
    <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;

  <a class="code" href="zclient_8c.html#a4381afa78256a1211fe7881394d7e666">zclient_redistribute</a> (<a class="code" href="zebra_8h.html#a1dce1941aae01a8a16dace7591398a0d">ZEBRA_REDISTRIBUTE_DELETE</a>, <a class="code" href="structzclient.html">zclient</a>, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Redistribute[%s]: Stop&quot;</span>,
               <a class="code" href="ospf__dump_8c.html#ac9f0bcaf160e328b6acb2c361dfa5002">ospf_redist_string</a>(<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>));

  ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structospf.html#adcc2e8439120b1f4144a6be8d702f638">type</a> = -1;
  ospf-&gt;<a class="code" href="structospf.html#a469871fc51798a2de7e3b19ada21d8ce">dmetric</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].<a class="code" href="structospf.html#a2bd05e59ebe8b6b342e19562d55a8a10">value</a> = -1;

  <span class="comment">/* Remove the routes from OSPF table. */</span>
  <a class="code" href="ospf__asbr_8c.html#a2e66aff41931c30bba7072e26e34bf12">ospf_redistribute_withdraw</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);

  <a class="code" href="ospf__asbr_8c.html#a15ef7b9d7fd4f1120453e770c076160a">ospf_asbr_status_update</a> (ospf, --ospf-&gt;<a class="code" href="structospf.html#a298631df5a443358670e6415175f2251">redistribute</a>);

  <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aeab30313d326fbb9a7bea8fbaaedc269"></a><!-- doxytag: member="ospf_zebra.c::ospf_routemap_set" ref="aeab30313d326fbb9a7bea8fbaaedc269" args="(struct ospf *ospf, int type, const char *name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_routemap_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00759">759</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a5c462a148a6cd728dcf50a1d7cc18804">ROUTEMAP_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>))
    free (<a class="code" href="ospfd_8h.html#a5c462a148a6cd728dcf50a1d7cc18804">ROUTEMAP_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>));

  <a class="code" href="ospfd_8h.html#a5c462a148a6cd728dcf50a1d7cc18804">ROUTEMAP_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>) = strdup (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
  <a class="code" href="ospfd_8h.html#afdae06aa57f00f3f4e3fd12055ead548">ROUTEMAP</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>) = <a class="code" href="routemap_8c.html#a52006340e589dda4244d35cafc9f6f10">route_map_lookup_by_name</a> (<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a43f47b8284073d5a9b54b2f12c57c2dd"></a><!-- doxytag: member="ospf_zebra.c::ospf_routemap_unset" ref="a43f47b8284073d5a9b54b2f12c57c2dd" args="(struct ospf *ospf, int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_routemap_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structospf.html">ospf</a> *&#160;</td>
          <td class="paramname"><em>ospf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00769">769</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (<a class="code" href="ospfd_8h.html#a5c462a148a6cd728dcf50a1d7cc18804">ROUTEMAP_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>))
    free (<a class="code" href="ospfd_8h.html#a5c462a148a6cd728dcf50a1d7cc18804">ROUTEMAP_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>));

  <a class="code" href="ospfd_8h.html#a5c462a148a6cd728dcf50a1d7cc18804">ROUTEMAP_NAME</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>) = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <a class="code" href="ospfd_8h.html#afdae06aa57f00f3f4e3fd12055ead548">ROUTEMAP</a> (ospf, <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>) = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac766e7564bdf5781398b1b1723b7d078"></a><!-- doxytag: member="ospf_zebra.c::ospf_router_id_update_zebra" ref="ac766e7564bdf5781398b1b1723b7d078" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_router_id_update_zebra </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00061">61</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> router_id;
  <a class="code" href="zclient_8c.html#a6adcd87e46d205582c81673f669067f3">zebra_router_id_update_read</a>(zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>,&amp;router_id);

  <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_INTERFACE))
    {
      <span class="keywordtype">char</span> buf[128];
      <a class="code" href="prefix_8c.html#a8b848557695ae5694bd2282eba23e367">prefix2str</a>(&amp;router_id, buf, <span class="keyword">sizeof</span>(buf));
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra rcvd: router id update %s&quot;</span>, buf);
    }

  <a class="code" href="bgp__vty_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a> = router_id.u.prefix4;

  ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
  
  <span class="keywordflow">if</span> (ospf != <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <a class="code" href="ospfd_8c.html#a0d1cbe02041ecd44cfc37a94718ca69a">ospf_router_id_update</a> (ospf);
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8045c2db458b9ad1e679863cf369e5be"></a><!-- doxytag: member="ospf_zebra.c::ospf_zebra_add" ref="a8045c2db458b9ad1e679863cf369e5be" args="(struct prefix_ipv4 *p, struct ospf_route *or)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_zebra_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname"><em>or</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00328">328</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char <a class="code" href="structmessage.html">message</a>;
  u_char <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  u_char <a class="code" href="structflags.html">flags</a>;
  <span class="keywordtype">int</span> psize;
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;

  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>])
    {
      message = 0;
      flags = 0;

      <span class="comment">/* OSPF pass nexthop and metric */</span>
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>);

      <span class="comment">/* Distance value. */</span>
      distance = <a class="code" href="ospf__zebra_8c.html#a41cbdfc85156d98b745b25d652cb35a3">ospf_distance_apply</a> (p, or);
      <span class="keywordflow">if</span> (distance)
        <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (message, <a class="code" href="zclient_8h.html#abe498bb81bfbda17757173ef23e25179">ZAPI_MESSAGE_DISTANCE</a>);

      <span class="comment">/* Make packet. */</span>
      s = <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a6ad60dd1b329d25af807f1517634b71f">obuf</a>;
      <a class="code" href="stream_8c.html#aee8fd31485ebc2f0a556a6a5d5c2d1e6">stream_reset</a> (s);

      <span class="comment">/* Put command, type, flags, message. */</span>
      <a class="code" href="zclient_8c.html#a70fa712bf570d588ea3b3c464bc5156f">zclient_create_header</a> (s, <a class="code" href="zebra_8h.html#aa2913a6b1e5fbc598479aa282343a5e1">ZEBRA_IPV4_ROUTE_ADD</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, flags);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, message);

      <span class="comment">/* Put prefix information. */</span>
      psize = <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
      <a class="code" href="stream_8c.html#a39121b19ef0be09e9a5598a1ea1371c0">stream_write</a> (s, (u_char *) &amp; p-&gt;prefix, psize);

      <span class="comment">/* Nexthop count. */</span>
      <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>-&gt;<a class="code" href="structlist.html#ac9c4d4d7c65e726bd9ee0c8884b6349b">count</a>);

      <span class="comment">/* Nexthop, ifindex, distance and metric information. */</span>
      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, node, path))
        {
          <span class="keywordflow">if</span> (path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>.s_addr != INADDR_ANY)
            {
              <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="zebra_8h.html#ae603faed81a38b4507ffd9b6f9586b44">ZEBRA_NEXTHOP_IPV4</a>);
              <a class="code" href="stream_8c.html#a9019a5de70c1b6c2715cf24103109632">stream_put_in_addr</a> (s, &amp;path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>);
            }
          <span class="keywordflow">else</span>
            {
              <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, <a class="code" href="zebra_8h.html#a8b5777b74f2584912603090de989e564">ZEBRA_NEXTHOP_IFINDEX</a>);
              <span class="keywordflow">if</span> (path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>)
                <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>);
              <span class="keywordflow">else</span>
                <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, 0);
            }

          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
            {
          <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra: Route add %s/%d nexthop %s&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;p-&gt;prefix,
                   buf[0], <span class="keyword">sizeof</span>(buf[0])),
             p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>,
                   buf[1], <span class="keyword">sizeof</span>(buf[1])));
            }
        }

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (message, <a class="code" href="zclient_8h.html#abe498bb81bfbda17757173ef23e25179">ZAPI_MESSAGE_DISTANCE</a>))
        <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, distance);
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>))
        {
          <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#a15dab014460164847059902ea4535834">OSPF_PATH_TYPE1_EXTERNAL</a>)
            <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a> + or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a93319cd5451e479e19c4e1b3e7d33b54">type2_cost</a>);
          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (or-&gt;<a class="code" href="structospf__route.html#a599273b0e8bc1a908cbedd22dcd78bbd">path_type</a> == <a class="code" href="ospf__route_8h.html#aa9752c4570157da8a3258dc4cdf23ce5">OSPF_PATH_TYPE2_EXTERNAL</a>)
            <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, or-&gt;<a class="code" href="structospf__route.html#ab37ba617082e6dec95c8f67eb9b66d7a">u</a>.<a class="code" href="structospf__route.html#a1bf8ff97df95625684ecc9fda5ee8e52">ext</a>.<a class="code" href="structroute__external.html#a93319cd5451e479e19c4e1b3e7d33b54">type2_cost</a>);
          <span class="keywordflow">else</span>
            <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, or-&gt;<a class="code" href="structospf__route.html#a78ed87939e621a405c66aeb71fa1944d">cost</a>);
        }

      <a class="code" href="stream_8c.html#a41de70a7383bac6220b787d740c0b261">stream_putw_at</a> (s, 0, <a class="code" href="stream_8c.html#ac1d2c72755840ea194301a5447ff721a">stream_get_endp</a> (s));

      <a class="code" href="zclient_8c.html#ad395166e549bd33dcc253052ac0bbd7d">zclient_send_message</a>(<a class="code" href="structzclient.html">zclient</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a49ea785a614ca3ddf8878814cd58681a"></a><!-- doxytag: member="ospf_zebra.c::ospf_zebra_add_discard" ref="a49ea785a614ca3ddf8878814cd58681a" args="(struct prefix_ipv4 *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_zebra_add_discard </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00477">477</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structzapi__ipv4.html">zapi_ipv4</a> api;

  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>])
    {
      api.<a class="code" href="structzapi__ipv4.html#ae4c29fc6652367a6546104010802ac2f">type</a> = <a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>;
      api.flags = <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>;
      api.message = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      api.nexthop_num = 0;
      api.ifindex_num = 0;

      <a class="code" href="zclient_8c.html#ad9a398f43faa79a0bab620c985fb476a">zapi_ipv4_route</a> (<a class="code" href="zebra_8h.html#aa2913a6b1e5fbc598479aa282343a5e1">ZEBRA_IPV4_ROUTE_ADD</a>, <a class="code" href="structzclient.html">zclient</a>, p, &amp;api);

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Zebra: Route add discard %s/%d&quot;</span>,
                   inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a083ae682548f0d7eb0761a2469c8d3f3"></a><!-- doxytag: member="ospf_zebra.c::ospf_zebra_delete" ref="a083ae682548f0d7eb0761a2469c8d3f3" args="(struct prefix_ipv4 *p, struct ospf_route *or)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_zebra_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structospf__route.html">ospf_route</a> *&#160;</td>
          <td class="paramname"><em>or</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00418">418</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structzapi__ipv4.html">zapi_ipv4</a> api;
  <span class="keyword">struct </span><a class="code" href="structospf__path.html">ospf_path</a> *path;
  <span class="keyword">struct </span>in_addr *<a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node, *nnode;

  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>])
    {
      api.type = <a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>;
      api.flags = 0;
      api.message = 0;
      api.ifindex_num = 0;
      api.nexthop_num = 0;

      <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a71512a873b8f0e2b4c84d3c949a9bbaf">ALL_LIST_ELEMENTS</a> (or-&gt;<a class="code" href="structospf__route.html#af687c07f0e39d7c3a29813777032b075">paths</a>, node, nnode, path))
        {
          <span class="keywordflow">if</span> (path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>.s_addr != INADDR_ANY)
            {
              <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
              api.nexthop_num = 1;
              nexthop = &amp;path-&gt;<a class="code" href="structospf__path.html#a01fa8433844b50cd272e6e082114c257">nexthop</a>;
              api.nexthop = &amp;nexthop;
            }
          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a424dd1e971aee548383cca2b770e2859">if_lookup_by_index</a>(path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>))
            {
              <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
              api.ifindex_num = 1;
              api.ifindex = &amp;path-&gt;<a class="code" href="structospf__path.html#a7275881f3f46eace28604c8ebc0ed654">ifindex</a>;
            }
          <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( <a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a>(<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>,ZEBRA_REDISTRIBUTE) )
            {
              <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra: no ifp %s %d&quot;</span>,
                         inet_ntoa(p-&gt;prefix),
                         p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);
            }

          <a class="code" href="zclient_8c.html#ad9a398f43faa79a0bab620c985fb476a">zapi_ipv4_route</a> (<a class="code" href="zebra_8h.html#a0c9efcc3f61219a6697f5da18d8de992">ZEBRA_IPV4_ROUTE_DELETE</a>, <a class="code" href="structzclient.html">zclient</a>, p, &amp;api);

          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE) &amp;&amp; api.nexthop_num)
            {
          <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>(<span class="stringliteral">&quot;Zebra: Route delete %s/%d nexthop %s&quot;</span>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, &amp;p-&gt;prefix, buf[0], <span class="keyword">sizeof</span>(buf[0])),
             p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a>(AF_INET, *api.nexthop,
                   buf[1], <span class="keyword">sizeof</span>(buf[1])));
            }
          <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE) &amp;&amp; api.ifindex_num)
            {
              <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Zebra: Route delete %s/%d ifindex %d&quot;</span>,
                         inet_ntoa (p-&gt;prefix),
                         p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, *api.ifindex);
            }
        }
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa80b8cdd0a2f3e0273c456de9bd553e2"></a><!-- doxytag: member="ospf_zebra.c::ospf_zebra_delete_discard" ref="aa80b8cdd0a2f3e0273c456de9bd553e2" args="(struct prefix_ipv4 *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_zebra_delete_discard </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00499">499</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structzapi__ipv4.html">zapi_ipv4</a> api;

  <span class="keywordflow">if</span> (<a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a7c76c66fcb4fee1303f834ea9fea0fc5">redist</a>[<a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>])
    {
      api.<a class="code" href="structzapi__ipv4.html#ae4c29fc6652367a6546104010802ac2f">type</a> = <a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>;
      api.flags = <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>;
      api.message = 0;
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>);
      api.nexthop_num = 0;
      api.ifindex_num = 0;

      <a class="code" href="zclient_8c.html#ad9a398f43faa79a0bab620c985fb476a">zapi_ipv4_route</a> (<a class="code" href="zebra_8h.html#a0c9efcc3f61219a6697f5da18d8de992">ZEBRA_IPV4_ROUTE_DELETE</a>, <a class="code" href="structzclient.html">zclient</a>, p, &amp;api);

      <span class="keywordflow">if</span> (<a class="code" href="ospf__dump_8h.html#a065e478fcd8bd7a409804fc9e9e67e70">IS_DEBUG_OSPF</a> (<a class="code" href="bgp__debug_8c.html#aacd09dfe4b60fac4ec1c5e2895066f07">zebra</a>, ZEBRA_REDISTRIBUTE))
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;Zebra: Route delete discard %s/%d&quot;</span>,
                   inet_ntoa (p-&gt;prefix), p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>);

    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab1c4318a2b05df85bdda75f3355aa25c"></a><!-- doxytag: member="ospf_zebra.c::ospf_zebra_init" ref="ab1c4318a2b05df85bdda75f3355aa25c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ospf_zebra_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l01261">1261</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/* Allocate zebra structure. */</span>
  <a class="code" href="structzclient.html">zclient</a> = <a class="code" href="zclient_8c.html#aa521f2a71596b1dc50f76fcb57dff30b">zclient_new</a> ();
  <a class="code" href="zclient_8c.html#ac649a246f405850a3ade72de002745e3">zclient_init</a> (<a class="code" href="structzclient.html">zclient</a>, <a class="code" href="zebra_8h.html#a35ba23125eb2c360943b1bad51673ab0">ZEBRA_ROUTE_OSPF</a>);
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a91ae88d0aa9ff087af5b7567334197f6">router_id_update</a> = <a class="code" href="ospf__zebra_8c.html#ac766e7564bdf5781398b1b1723b7d078">ospf_router_id_update_zebra</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a42e63c358fc87552ca16a1eea8b69c4f">interface_add</a> = <a class="code" href="ospf__zebra_8c.html#affcb29b33003244d9d1464bc907eda20">ospf_interface_add</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a59d608db28363c236285c6323d5697ab">interface_delete</a> = <a class="code" href="ospf__zebra_8c.html#afbcd5a399d377db72f8e11faa2b84b59">ospf_interface_delete</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a45465702e655472187e9efc3c1734daa">interface_up</a> = <a class="code" href="ospf__zebra_8c.html#ac5a236e0c7105013a377deda755a3a9f">ospf_interface_state_up</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a426b5e0ec3b5ad8843eb42deaa4fe335">interface_down</a> = <a class="code" href="ospf__zebra_8c.html#a8d0747b0991dedc055bf79a824a25834">ospf_interface_state_down</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a75ee908bb229653f271356b982fa76e7">interface_address_add</a> = <a class="code" href="ospf__zebra_8c.html#ab73bf4f6f734469a4d35cd112c74265a">ospf_interface_address_add</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a3494b722f85fe14ff8c99ddae54bad94">interface_address_delete</a> = <a class="code" href="ospf__zebra_8c.html#aef874b4b32cf37d7176a9f929de61d21">ospf_interface_address_delete</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#ac2fe2ea5a7f820e1ac572f7629be997f">ipv4_route_add</a> = <a class="code" href="ospf__zebra_8c.html#aa094f27792bcac11e8b637c65199e0fa">ospf_zebra_read_ipv4</a>;
  <a class="code" href="structzclient.html">zclient</a>-&gt;<a class="code" href="structzclient.html#a2fa1fdde8885665490f46edc8c102d4a">ipv4_route_delete</a> = <a class="code" href="ospf__zebra_8c.html#aa094f27792bcac11e8b637c65199e0fa">ospf_zebra_read_ipv4</a>;

  <a class="code" href="filter_8c.html#afc932e79e55881b9a1c1e700ec1e0cb4">access_list_add_hook</a> (<a class="code" href="ospf__zebra_8c.html#a4a532c457c6791580c8b595aa044db28">ospf_filter_update</a>);
  <a class="code" href="filter_8c.html#a7696ba96f8b2cf3a96dbfb2e161d6752">access_list_delete_hook</a> (<a class="code" href="ospf__zebra_8c.html#a4a532c457c6791580c8b595aa044db28">ospf_filter_update</a>);
  <a class="code" href="plist_8c.html#add7d0c6cd7985233eb409608b9bf248b">prefix_list_add_hook</a> (<a class="code" href="ospf__zebra_8c.html#a490e15816e8166995cd3c9c4b7e0cc95">ospf_prefix_list_update</a>);
  <a class="code" href="plist_8c.html#a28384c5c606bb185263f9d8f7ad4fa98">prefix_list_delete_hook</a> (<a class="code" href="ospf__zebra_8c.html#a490e15816e8166995cd3c9c4b7e0cc95">ospf_prefix_list_update</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa094f27792bcac11e8b637c65199e0fa"></a><!-- doxytag: member="ospf_zebra.c::ospf_zebra_read_ipv4" ref="aa094f27792bcac11e8b637c65199e0fa" args="(int command, struct zclient *zclient, zebra_size_t length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int ospf_zebra_read_ipv4 </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structzclient.html">zclient</a> *&#160;</td>
          <td class="paramname"><em>zclient</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a6cbec281d30ae59db10d5b28b5d1cc03">zebra_size_t</a>&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00780">780</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
  <span class="keyword">struct </span><a class="code" href="structzapi__ipv4.html">zapi_ipv4</a> api;
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="structzapi__ipv4.html#a7043b2c08d10a58daa5e6e7800ff8a29">ifindex</a>;
  <span class="keyword">struct </span>in_addr <a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structexternal__info.html">external_info</a> *ei;
  <span class="keyword">struct </span><a class="code" href="structospf.html">ospf</a> *<a class="code" href="structospf.html">ospf</a>;

  s = zclient-&gt;<a class="code" href="structzclient.html#a1b9d2a1e869c1008c2bc70d14ce2bf49">ibuf</a>;
  ifindex = 0;
  <a class="code" href="structnexthop.html">nexthop</a>.s_addr = 0;

  <span class="comment">/* Type, flags, message. */</span>
  api.<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  api.flags = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  api.message = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);

  <span class="comment">/* IPv4 prefix. */</span>
  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix, s, <a class="code" href="bgpd_8h.html#a472145011d944606a257487e80cc3ace">PSIZE</a> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen));

  <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a255d6e4fa5cfaf4cd252266a0bd4dfda">IPV4_NET127</a>(ntohl(<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix.s_addr)))
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Nexthop, ifindex, distance, metric. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a321bbeaddad8bc9bffaf57f7ac6cf8fd">ZAPI_MESSAGE_NEXTHOP</a>))
    {
      api.nexthop_num = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      <a class="code" href="structnexthop.html">nexthop</a>.s_addr = <a class="code" href="stream_8c.html#a0d93aa3e961894e5215d343625488576">stream_get_ipv4</a> (s);
    }
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#ae8d1e48f6c2858ecda1c3aee4219a0e6">ZAPI_MESSAGE_IFINDEX</a>))
    {
      api.ifindex_num = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
      <span class="comment">/* XXX assert(api.ifindex_num == 1); */</span>
      ifindex = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);
    }
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#abe498bb81bfbda17757173ef23e25179">ZAPI_MESSAGE_DISTANCE</a>))
    api.distance = <a class="code" href="stream_8c.html#a7902a86d9a749707c535840654ded3f6">stream_getc</a> (s);
  <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (api.message, <a class="code" href="zclient_8h.html#a4a5d60df1ef02f794476ea1daa6ba024">ZAPI_MESSAGE_METRIC</a>))
    api.metric = <a class="code" href="stream_8c.html#af857bfab0cbe7d5681e9108b58f939f2">stream_getl</a> (s);

  ospf = <a class="code" href="ospfd_8c.html#a8ea0c935a4862c1469bc962e93fee74b">ospf_lookup</a> ();
  <span class="keywordflow">if</span> (ospf == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">if</span> (command == <a class="code" href="zebra_8h.html#aa2913a6b1e5fbc598479aa282343a5e1">ZEBRA_IPV4_ROUTE_ADD</a>)
    {
      <span class="comment">/* XXX|HACK|TODO|FIXME:</span>
<span class="comment">       * Maybe we should ignore reject/blackhole routes? Testing shows that</span>
<span class="comment">       * there is no problems though and this is only way to &quot;summarize&quot;</span>
<span class="comment">       * routes in ASBR at the moment. Maybe we need just a better generalised</span>
<span class="comment">       * solution for these types?</span>
<span class="comment">       *</span>
<span class="comment">       * if ( CHECK_FLAG (api.flags, ZEBRA_FLAG_BLACKHOLE)</span>
<span class="comment">       *     || CHECK_FLAG (api.flags, ZEBRA_FLAG_REJECT))</span>
<span class="comment">       * return 0;</span>
<span class="comment">       */</span>
        
      ei = <a class="code" href="ospf__asbr_8c.html#a6a90eaa85c3352db338f42b615933d9c">ospf_external_info_add</a> (api.type, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, ifindex, <a class="code" href="structnexthop.html">nexthop</a>);

      <span class="keywordflow">if</span> (ospf-&gt;<a class="code" href="structospf.html#acda9328f4f8627516f5c4942a45b4c25">router_id</a>.s_addr == 0)
        <span class="comment">/* Set flags to generate AS-external-LSA originate event</span>
<span class="comment">           for each redistributed protocols later. */</span>
        ospf-&gt;<a class="code" href="structospf.html#a4e2d4fb95c750aeddee77669b7073e86">external_origin</a> |= (1 &lt;&lt; api.type);
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">if</span> (ei)
            {
              <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>))
                <a class="code" href="ospf__lsa_8c.html#a1be6376d9b23634a76f2a6a07833fe1e">ospf_external_lsa_refresh_default</a> (ospf);
              <span class="keywordflow">else</span>
                {
                  <span class="keyword">struct </span><a class="code" href="structospf__lsa.html">ospf_lsa</a> *current;

                  current = <a class="code" href="ospf__asbr_8c.html#ad45c036a67747a7f65338b7ec6ff748d">ospf_external_info_find_lsa</a> (ospf, &amp;ei-&gt;<a class="code" href="structexternal__info.html#a15eb7ea975a1090a107d7d54b798822c">p</a>);
                  <span class="keywordflow">if</span> (!current)
                    <a class="code" href="ospf__lsa_8c.html#a96d24d54ba0ac3adc1ff557621ff2911">ospf_external_lsa_originate</a> (ospf, ei);
                  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8h.html#a29c1c83c9c5e24d75e33d7efd0d12b88">IS_LSA_MAXAGE</a> (current))
                    <a class="code" href="ospf__lsa_8c.html#a12f57ed226cea2cfd9499069dbde2f3c">ospf_external_lsa_refresh</a> (ospf, current,
                                               ei, <a class="code" href="ospf__lsa_8h.html#a389234e05af4a29be76c63dc46576791">LSA_REFRESH_FORCE</a>);
                  <span class="keywordflow">else</span>
                    <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a> (<span class="stringliteral">&quot;ospf_zebra_read_ipv4() : %s already exists&quot;</span>,
                               inet_ntoa (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix));
                }
            }
        }
    }
  <span class="keywordflow">else</span>                          <span class="comment">/* if (command == ZEBRA_IPV4_ROUTE_DELETE) */</span>
    {
      <a class="code" href="ospf__asbr_8c.html#ae91dd932332bc12e89b6cc7f9358146f">ospf_external_info_delete</a> (api.type, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
      <span class="keywordflow">if</span> (<a class="code" href="ospf__lsa_8c.html#ab361b6fb4bed2a417afb49ae46bae391">is_prefix_default</a> (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>))
        <a class="code" href="ospf__lsa_8c.html#a1be6376d9b23634a76f2a6a07833fe1e">ospf_external_lsa_refresh_default</a> (ospf);
      <span class="keywordflow">else</span>
        <a class="code" href="ospf__lsa_8c.html#ae6fd27bc0a44fb71638c23c3ea829905">ospf_external_lsa_flush</a> (ospf, api.<a class="code" href="structospf.html#adcc2e8439120b1f4144a6be8d702f638">type</a>, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, ifindex <span class="comment">/*, nexthop */</span>);
    }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5b145abf4342f5655667f9359ced89d0"></a><!-- doxytag: member="ospf_zebra.c::zebra_interface_if_lookup" ref="a5b145abf4342f5655667f9359ced89d0" args="(struct stream *s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structinterface.html">interface</a>* zebra_interface_if_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structstream.html">stream</a> *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00152">152</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">char</span> ifname_tmp[<a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a>];

  <span class="comment">/* Read interface name. */</span>
  <a class="code" href="stream_8c.html#ab7101e57ef0d9dc1a33e7f7e30c91b9a">stream_get</a> (ifname_tmp, s, <a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a>);

  <span class="comment">/* And look it up. */</span>
  <span class="keywordflow">return</span> <a class="code" href="if_8c.html#a8ae0929167c87a44b1933994a0254d29">if_lookup_by_name_len</a>(ifname_tmp,
                   <a class="code" href="str_8c.html#afc92d2231e45d19988c7894aa2a07f0c">strnlen</a>(ifname_tmp, <a class="code" href="if_8h.html#ab819b6f1f4d393be3e866af97297b9cb">INTERFACE_NAMSIZ</a>));
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="af7f9077bc08df049beb65a1c09cde5fa"></a><!-- doxytag: member="ospf_zebra.c::master" ref="af7f9077bc08df049beb65a1c09cde5fa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structthread__master.html">thread_master</a>* <a class="el" href="test__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__main_8c_source.html#l00105">105</a> of file <a class="el" href="bgp__main_8c_source.html">bgp_main.c</a>.</p>

</div>
</div>
<a class="anchor" id="a5ff73fe88ce576fe7fc3877984367add"></a><!-- doxytag: member="ospf_zebra.c::router_id_zebra" ref="a5ff73fe88ce576fe7fc3877984367add" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct in_addr <a class="el" href="ospfd_8c.html#a5ff73fe88ce576fe7fc3877984367add">router_id_zebra</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00057">57</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>

</div>
</div>
<a class="anchor" id="abe1502972ba9aa40adc080e419c496bf"></a><!-- doxytag: member="ospf_zebra.c::zclient" ref="abe1502972ba9aa40adc080e419c496bf" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structzclient.html">zclient</a>* <a class="el" href="structzclient.html">zclient</a> = NULL</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ospf__zebra_8c_source.html#l00053">53</a> of file <a class="el" href="ospf__zebra_8c_source.html">ospf_zebra.c</a>.</p>

</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ospf__zebra_8c.html">ospf_zebra.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:33 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
