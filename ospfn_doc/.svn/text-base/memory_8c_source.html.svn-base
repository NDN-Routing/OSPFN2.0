<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/memory.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('memory_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/memory.c</div>  </div>
</div>
<div class="contents">
<a href="memory_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Memory management routine</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1998 Kunihiro Ishiguro</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 <span class="comment">/* malloc.h is generally obsolete, however GNU Libc mallinfo wants it. */</span>
<a name="l00025"></a>00025 <span class="preprocessor">#if !defined(HAVE_STDLIB_H) || (defined(GNU_LINUX) &amp;&amp; defined(HAVE_MALLINFO))</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#include &lt;malloc.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#endif </span><span class="comment">/* !HAVE_STDLIB_H || HAVE_MALLINFO */</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="memory_8c.html#a7c71c5359794e1a3b72852f304680606">alloc_inc</a> (<span class="keywordtype">int</span>);
<a name="l00033"></a>00033 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="memory_8c.html#a1d8857f6747de5e55a3a2612867955be">alloc_dec</a> (<span class="keywordtype">int</span>);
<a name="l00034"></a>00034 <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="memory_8c.html#a76bf9e1b5850e2d7b9ed7b3f91713e98">log_memstats</a>(<span class="keywordtype">int</span> log_priority);
<a name="l00035"></a>00035 
<a name="l00036"></a><a class="code" href="memory_8c.html#abfa3fb775692421fc2bb7c44f651532f">00036</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structmessage.html">message</a> <a class="code" href="memory_8c.html#abfa3fb775692421fc2bb7c44f651532f">mstr</a> [] =
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038   { <a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6c39f6b5fde04725a8f8a9b0539cb6b7">MTYPE_THREAD</a>, <span class="stringliteral">&quot;thread&quot;</span> },
<a name="l00039"></a>00039   { <a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba6100532867b009792cd4bcee71cc3a9d">MTYPE_THREAD_MASTER</a>, <span class="stringliteral">&quot;thread_master&quot;</span> },
<a name="l00040"></a>00040   { <a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba268d61aa616c52052e41592387afa521">MTYPE_VECTOR</a>, <span class="stringliteral">&quot;vector&quot;</span> },
<a name="l00041"></a>00041   { <a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5315450a0fbff30828c13f506619aa38">MTYPE_VECTOR_INDEX</a>, <span class="stringliteral">&quot;vector_index&quot;</span> },
<a name="l00042"></a>00042   { <a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba62cc2aae4edfd4f0daa216644001a616">MTYPE_IF</a>, <span class="stringliteral">&quot;interface&quot;</span> },
<a name="l00043"></a>00043   { 0, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> },
<a name="l00044"></a>00044 };
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">/* Fatal memory allocation error occured. */</span>
<a name="l00047"></a><a class="code" href="memory_8c.html#a6ef9232020d41714cd5ec5b27d89b4e3">00047</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="zebra_8h.html#a9d373a9b65ff25b2db84c07394e1c212">__attribute__</a> ((noreturn))
<a name="l00048"></a>00048 zerror (<a class="code" href="getopt_8c.html#a2c212835823e3c54a8ab6d95c652660e">const</a> <span class="keywordtype">char</span> *fname, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">size_t</span> size)
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050   <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s : can&#39;t allocate memory for `%s&#39; size %d: %s\n&quot;</span>, 
<a name="l00051"></a>00051         fname, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (mstr, type), (<span class="keywordtype">int</span>) size, <a class="code" href="log_8c.html#a5292a9aa20fcddbb3998241685e18279">safe_strerror</a>(errno));
<a name="l00052"></a>00052   <a class="code" href="memory_8c.html#a76bf9e1b5850e2d7b9ed7b3f91713e98">log_memstats</a>(LOG_WARNING);
<a name="l00053"></a>00053   <span class="comment">/* N.B. It might be preferable to call zlog_backtrace_sigsafe here, since</span>
<a name="l00054"></a>00054 <span class="comment">     that function should definitely be safe in an OOM condition.  But</span>
<a name="l00055"></a>00055 <span class="comment">     unfortunately zlog_backtrace_sigsafe does not support syslog logging at</span>
<a name="l00056"></a>00056 <span class="comment">     this time... */</span>
<a name="l00057"></a>00057   <a class="code" href="log_8c.html#a007e475475f7a96147bbb4315b58bb2e">zlog_backtrace</a>(LOG_WARNING);
<a name="l00058"></a>00058   abort();
<a name="l00059"></a>00059 }
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="comment">/* Memory allocation. */</span>
<a name="l00062"></a>00062 <span class="keywordtype">void</span> *
<a name="l00063"></a><a class="code" href="memory_8h.html#ae9ef273b7d106df41a60841b39fa05ed">00063</a> <a class="code" href="memory_8c.html#ae9ef273b7d106df41a60841b39fa05ed">zmalloc</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">size_t</span> size)
<a name="l00064"></a>00064 {
<a name="l00065"></a>00065   <span class="keywordtype">void</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00066"></a>00066 
<a name="l00067"></a>00067   memory = <a class="code" href="regex_8c.html#ab7e36af3707843f77cc5b4e831c2fa6d">malloc</a> (size);
<a name="l00068"></a>00068 
<a name="l00069"></a>00069   <span class="keywordflow">if</span> (memory == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00070"></a>00070     zerror (<span class="stringliteral">&quot;malloc&quot;</span>, type, size);
<a name="l00071"></a>00071 
<a name="l00072"></a>00072   <a class="code" href="memory_8c.html#a7c71c5359794e1a3b72852f304680606">alloc_inc</a> (type);
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   <span class="keywordflow">return</span> <a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00075"></a>00075 }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="comment">/* Memory allocation with num * size with cleared. */</span>
<a name="l00078"></a>00078 <span class="keywordtype">void</span> *
<a name="l00079"></a><a class="code" href="memory_8h.html#a073aba15d97cebfdb6f92bc72e82ad8d">00079</a> <a class="code" href="memory_8c.html#a073aba15d97cebfdb6f92bc72e82ad8d">zcalloc</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">size_t</span> size)
<a name="l00080"></a>00080 {
<a name="l00081"></a>00081   <span class="keywordtype">void</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083   memory = calloc (1, size);
<a name="l00084"></a>00084 
<a name="l00085"></a>00085   <span class="keywordflow">if</span> (memory == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00086"></a>00086     zerror (<span class="stringliteral">&quot;calloc&quot;</span>, type, size);
<a name="l00087"></a>00087 
<a name="l00088"></a>00088   <a class="code" href="memory_8c.html#a7c71c5359794e1a3b72852f304680606">alloc_inc</a> (type);
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   <span class="keywordflow">return</span> <a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00091"></a>00091 }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="comment">/* Memory reallocation. */</span>
<a name="l00094"></a>00094 <span class="keywordtype">void</span> *
<a name="l00095"></a><a class="code" href="memory_8h.html#af1da103c3db99ab17c5cbf524d83ce85">00095</a> <a class="code" href="memory_8c.html#af1da103c3db99ab17c5cbf524d83ce85">zrealloc</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">void</span> *ptr, <span class="keywordtype">size_t</span> size)
<a name="l00096"></a>00096 {
<a name="l00097"></a>00097   <span class="keywordtype">void</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00098"></a>00098 
<a name="l00099"></a>00099   memory = <a class="code" href="regex_8c.html#a3d4d6185d412b00bc3def2b58b2898cc">realloc</a> (ptr, size);
<a name="l00100"></a>00100   <span class="keywordflow">if</span> (memory == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00101"></a>00101     zerror (<span class="stringliteral">&quot;realloc&quot;</span>, type, size);
<a name="l00102"></a>00102   <span class="keywordflow">return</span> <a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00103"></a>00103 }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="comment">/* Memory free. */</span>
<a name="l00106"></a>00106 <span class="keywordtype">void</span>
<a name="l00107"></a><a class="code" href="memory_8h.html#ac383faa9d2f7922fd0140725ec1ec231">00107</a> <a class="code" href="memory_8c.html#ac383faa9d2f7922fd0140725ec1ec231">zfree</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">void</span> *ptr)
<a name="l00108"></a>00108 {
<a name="l00109"></a>00109   <a class="code" href="memory_8c.html#a1d8857f6747de5e55a3a2612867955be">alloc_dec</a> (type);
<a name="l00110"></a>00110   free (ptr);
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 <span class="comment">/* String duplication. */</span>
<a name="l00114"></a>00114 <span class="keywordtype">char</span> *
<a name="l00115"></a><a class="code" href="memory_8h.html#ae1cf7d80fe0331451c22a9227525c82c">00115</a> <a class="code" href="memory_8c.html#ae1cf7d80fe0331451c22a9227525c82c">zstrdup</a> (<span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)
<a name="l00116"></a>00116 {
<a name="l00117"></a>00117   <span class="keywordtype">void</span> *dup;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119   dup = strdup (str);
<a name="l00120"></a>00120   <span class="keywordflow">if</span> (dup == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00121"></a>00121     zerror (<span class="stringliteral">&quot;strdup&quot;</span>, type, strlen (str));
<a name="l00122"></a>00122   <a class="code" href="memory_8c.html#a7c71c5359794e1a3b72852f304680606">alloc_inc</a> (type);
<a name="l00123"></a>00123   <span class="keywordflow">return</span> dup;
<a name="l00124"></a>00124 }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 <span class="preprocessor">#ifdef MEMORY_LOG</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">struct </span>
<a name="l00128"></a>00128 {
<a name="l00129"></a>00129   <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;
<a name="l00130"></a>00130   <span class="keywordtype">long</span> <a class="code" href="memory_8c.html#a51910e1e3307982e4cc99753bdfe83b7">alloc</a>;
<a name="l00131"></a>00131   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> t_malloc;
<a name="l00132"></a>00132   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> c_malloc;
<a name="l00133"></a>00133   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> t_calloc;
<a name="l00134"></a>00134   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> c_calloc;
<a name="l00135"></a>00135   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> t_realloc;
<a name="l00136"></a>00136   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> t_free;
<a name="l00137"></a>00137   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> c_strdup;
<a name="l00138"></a>00138 } <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a> [<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7ec0e1a00acefa1fb8a5c69f0a5a8e87">MTYPE_MAX</a>];
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00141"></a>00141 mtype_log (<span class="keywordtype">char</span> *<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <span class="keywordtype">void</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="command_8c.html#a26a9ef9f1cd2906dfd6438f0141f1f9a">file</a>, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l00142"></a>00142 {
<a name="l00143"></a>00143   <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: %s %p %s %d&quot;</span>, func, <a class="code" href="log_8c.html#a167ff2c0459de0db557c14c2171c9c76">lookup</a> (mstr, type), memory, file, line);
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 <span class="keywordtype">void</span> *
<a name="l00147"></a>00147 <a class="code" href="memory_8h.html#a1669707dff7c686d7a03716a50b7665d">mtype_zmalloc</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> type, <span class="keywordtype">size_t</span> size)
<a name="l00148"></a>00148 {
<a name="l00149"></a>00149   <span class="keywordtype">void</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00150"></a>00150 
<a name="l00151"></a>00151   <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].c_malloc++;
<a name="l00152"></a>00152   <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].t_malloc++;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154   memory = <a class="code" href="memory_8c.html#ae9ef273b7d106df41a60841b39fa05ed">zmalloc</a> (type, size);
<a name="l00155"></a>00155   mtype_log (<span class="stringliteral">&quot;zmalloc&quot;</span>, memory, file, line, type);
<a name="l00156"></a>00156 
<a name="l00157"></a>00157   <span class="keywordflow">return</span> <a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00158"></a>00158 }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 <span class="keywordtype">void</span> *
<a name="l00161"></a>00161 <a class="code" href="memory_8h.html#ac1323396c8d1aa2bd9eb71cbd8d6e659">mtype_zcalloc</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> type, <span class="keywordtype">size_t</span> size)
<a name="l00162"></a>00162 {
<a name="l00163"></a>00163   <span class="keywordtype">void</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00164"></a>00164 
<a name="l00165"></a>00165   <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].c_calloc++;
<a name="l00166"></a>00166   <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].t_calloc++;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   memory = <a class="code" href="memory_8c.html#a073aba15d97cebfdb6f92bc72e82ad8d">zcalloc</a> (type, size);
<a name="l00169"></a>00169   mtype_log (<span class="stringliteral">&quot;xcalloc&quot;</span>, memory, file, line, type);
<a name="l00170"></a>00170 
<a name="l00171"></a>00171   <span class="keywordflow">return</span> <a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00172"></a>00172 }
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 <span class="keywordtype">void</span> *
<a name="l00175"></a>00175 <a class="code" href="memory_8h.html#a86c386976d00dcd4c08826cde3cd0bd2">mtype_zrealloc</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> type, <span class="keywordtype">void</span> *ptr, <span class="keywordtype">size_t</span> size)
<a name="l00176"></a>00176 {
<a name="l00177"></a>00177   <span class="keywordtype">void</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00178"></a>00178 
<a name="l00179"></a>00179   <span class="comment">/* Realloc need before allocated pointer. */</span>
<a name="l00180"></a>00180   <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].t_realloc++;
<a name="l00181"></a>00181 
<a name="l00182"></a>00182   memory = <a class="code" href="memory_8c.html#af1da103c3db99ab17c5cbf524d83ce85">zrealloc</a> (type, ptr, size);
<a name="l00183"></a>00183 
<a name="l00184"></a>00184   mtype_log (<span class="stringliteral">&quot;xrealloc&quot;</span>, memory, file, line, type);
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   <span class="keywordflow">return</span> <a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00187"></a>00187 }
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 <span class="comment">/* Important function. */</span>
<a name="l00190"></a>00190 <span class="keywordtype">void</span> 
<a name="l00191"></a>00191 <a class="code" href="memory_8h.html#aa5dd6a3b0f02d62fc62acde85bb4d1e3">mtype_zfree</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> type, <span class="keywordtype">void</span> *ptr)
<a name="l00192"></a>00192 {
<a name="l00193"></a>00193   <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].t_free++;
<a name="l00194"></a>00194 
<a name="l00195"></a>00195   mtype_log (<span class="stringliteral">&quot;xfree&quot;</span>, ptr, file, line, type);
<a name="l00196"></a>00196 
<a name="l00197"></a>00197   <a class="code" href="memory_8c.html#ac383faa9d2f7922fd0140725ec1ec231">zfree</a> (type, ptr);
<a name="l00198"></a>00198 }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 <span class="keywordtype">char</span> *
<a name="l00201"></a>00201 <a class="code" href="memory_8h.html#ab67c1b6120c30a3f3fd0769c7ded870f">mtype_zstrdup</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> type, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="rip__zebra_8c.html#af25d6dc49269fa2003ac7c7fa6f13915">str</a>)
<a name="l00202"></a>00202 {
<a name="l00203"></a>00203   <span class="keywordtype">char</span> *<a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00204"></a>00204 
<a name="l00205"></a>00205   <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].c_strdup++;
<a name="l00206"></a>00206 
<a name="l00207"></a>00207   memory = <a class="code" href="memory_8c.html#ae1cf7d80fe0331451c22a9227525c82c">zstrdup</a> (type, str);
<a name="l00208"></a>00208   
<a name="l00209"></a>00209   mtype_log (<span class="stringliteral">&quot;xstrdup&quot;</span>, memory, file, line, type);
<a name="l00210"></a>00210 
<a name="l00211"></a>00211   <span class="keywordflow">return</span> <a class="code" href="command_8c.html#ab3b6b22f7fa8775522dcaa100befafad">memory</a>;
<a name="l00212"></a>00212 }
<a name="l00213"></a>00213 <span class="preprocessor">#else</span>
<a name="l00214"></a>00214 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">struct </span>
<a name="l00215"></a>00215 {
<a name="l00216"></a><a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">00216</a>   <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>;
<a name="l00217"></a><a class="code" href="memory_8c.html#a51910e1e3307982e4cc99753bdfe83b7">00217</a>   <span class="keywordtype">long</span> <a class="code" href="memory_8c.html#a51910e1e3307982e4cc99753bdfe83b7">alloc</a>;
<a name="l00218"></a>00218 } <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a> [<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba7ec0e1a00acefa1fb8a5c69f0a5a8e87">MTYPE_MAX</a>];
<a name="l00219"></a>00219 <span class="preprocessor">#endif </span><span class="comment">/* MEMORY_LOG */</span>
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 <span class="comment">/* Increment allocation counter. */</span>
<a name="l00222"></a>00222 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00223"></a><a class="code" href="memory_8c.html#a7c71c5359794e1a3b72852f304680606">00223</a> <a class="code" href="memory_8c.html#a7c71c5359794e1a3b72852f304680606">alloc_inc</a> (<span class="keywordtype">int</span> type)
<a name="l00224"></a>00224 {
<a name="l00225"></a>00225   <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].alloc++;
<a name="l00226"></a>00226 }
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 <span class="comment">/* Decrement allocation counter. */</span>
<a name="l00229"></a>00229 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00230"></a><a class="code" href="memory_8c.html#a1d8857f6747de5e55a3a2612867955be">00230</a> <a class="code" href="memory_8c.html#a1d8857f6747de5e55a3a2612867955be">alloc_dec</a> (<span class="keywordtype">int</span> type)
<a name="l00231"></a>00231 {
<a name="l00232"></a>00232   <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].alloc--;
<a name="l00233"></a>00233 }
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 <span class="comment">/* Looking up memory status from vty interface. */</span>
<a name="l00236"></a>00236 <span class="preprocessor">#include &quot;<a class="code" href="vector_8h.html">vector.h</a>&quot;</span>
<a name="l00237"></a>00237 <span class="preprocessor">#include &quot;<a class="code" href="vty_8h.html">vty.h</a>&quot;</span>
<a name="l00238"></a>00238 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00241"></a><a class="code" href="memory_8c.html#a76bf9e1b5850e2d7b9ed7b3f91713e98">00241</a> <a class="code" href="memory_8c.html#a76bf9e1b5850e2d7b9ed7b3f91713e98">log_memstats</a>(<span class="keywordtype">int</span> pri)
<a name="l00242"></a>00242 {
<a name="l00243"></a>00243   <span class="keyword">struct </span><a class="code" href="structmlist.html">mlist</a> *ml;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245   <span class="keywordflow">for</span> (ml = <a class="code" href="memory_8h.html#ad8486c18ebccfc422dff41b65019c764">mlists</a>; ml-&gt;<a class="code" href="structmlist.html#a9218339f87cd9d17ef7efd2acd710010">list</a>; ml++)
<a name="l00246"></a>00246     {
<a name="l00247"></a>00247       <span class="keyword">struct </span><a class="code" href="structmemory__list.html">memory_list</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
<a name="l00248"></a>00248 
<a name="l00249"></a>00249       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, pri, <span class="stringliteral">&quot;Memory utilization in module %s:&quot;</span>, ml-&gt;<a class="code" href="structmlist.html#a0228a09dd67fb303f0731f67e02f1910">name</a>);
<a name="l00250"></a>00250       <span class="keywordflow">for</span> (m = ml-&gt;<a class="code" href="structmlist.html#a9218339f87cd9d17ef7efd2acd710010">list</a>; m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a> &gt;= 0; m++)
<a name="l00251"></a>00251     <span class="keywordflow">if</span> (m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a> &amp;&amp; <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>].alloc)
<a name="l00252"></a>00252       <a class="code" href="log_8c.html#a34f80af784b8ec394e7a7154a7ec7364">zlog</a> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, pri, <span class="stringliteral">&quot;  %-30s: %10ld&quot;</span>, m-&gt;<a class="code" href="structmemory__list.html#ac090e1c7929d126c7cf10c8db345aeb6">format</a>, <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>].alloc);
<a name="l00253"></a>00253     }
<a name="l00254"></a>00254 }
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 <span class="keywordtype">void</span>
<a name="l00257"></a><a class="code" href="memory_8h.html#ab5e08c9af79cb32285fd8ac6e52ffa2c">00257</a> <a class="code" href="memory_8c.html#a135bc21220ef77fdd44df1da49313ac9">log_memstats_stderr</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix.html">prefix</a>)
<a name="l00258"></a>00258 {
<a name="l00259"></a>00259   <span class="keyword">struct </span><a class="code" href="structmlist.html">mlist</a> *ml;
<a name="l00260"></a>00260   <span class="keyword">struct </span><a class="code" href="structmemory__list.html">memory_list</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
<a name="l00261"></a>00261   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00262"></a>00262   <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a7113d77fc628f14d4e7d1262969c613e">j</a> = 0;
<a name="l00263"></a>00263 
<a name="l00264"></a>00264   <span class="keywordflow">for</span> (ml = <a class="code" href="memory_8h.html#ad8486c18ebccfc422dff41b65019c764">mlists</a>; ml-&gt;<a class="code" href="structmlist.html#a9218339f87cd9d17ef7efd2acd710010">list</a>; ml++)
<a name="l00265"></a>00265     {
<a name="l00266"></a>00266       i = 0;
<a name="l00267"></a>00267 
<a name="l00268"></a>00268       <span class="keywordflow">for</span> (m = ml-&gt;<a class="code" href="structmlist.html#a9218339f87cd9d17ef7efd2acd710010">list</a>; m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a> &gt;= 0; m++)
<a name="l00269"></a>00269         <span class="keywordflow">if</span> (m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a> &amp;&amp; <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>].alloc)
<a name="l00270"></a>00270           {
<a name="l00271"></a>00271             <span class="keywordflow">if</span> (!i)
<a name="l00272"></a>00272               fprintf (stderr,
<a name="l00273"></a>00273                        <span class="stringliteral">&quot;%s: memstats: Current memory utilization in module %s:\n&quot;</span>,
<a name="l00274"></a>00274                        prefix,
<a name="l00275"></a>00275                        ml-&gt;<a class="code" href="structmlist.html#a0228a09dd67fb303f0731f67e02f1910">name</a>);
<a name="l00276"></a>00276             fprintf (stderr,
<a name="l00277"></a>00277                      <span class="stringliteral">&quot;%s: memstats:  %-30s: %10ld%s\n&quot;</span>,
<a name="l00278"></a>00278                      prefix,
<a name="l00279"></a>00279                      m-&gt;<a class="code" href="structmemory__list.html#ac090e1c7929d126c7cf10c8db345aeb6">format</a>,
<a name="l00280"></a>00280                      <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>].alloc,
<a name="l00281"></a>00281                      <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>].alloc &lt; 0 ? <span class="stringliteral">&quot; (REPORT THIS BUG!)&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);
<a name="l00282"></a>00282             i = j = 1;
<a name="l00283"></a>00283           }
<a name="l00284"></a>00284     }
<a name="l00285"></a>00285 
<a name="l00286"></a>00286   <span class="keywordflow">if</span> (j)
<a name="l00287"></a>00287     fprintf (stderr,
<a name="l00288"></a>00288              <span class="stringliteral">&quot;%s: memstats: NOTE: If configuration exists, utilization may be &quot;</span>
<a name="l00289"></a>00289              <span class="stringliteral">&quot;expected.\n&quot;</span>,
<a name="l00290"></a>00290              prefix);
<a name="l00291"></a>00291   <span class="keywordflow">else</span>
<a name="l00292"></a>00292     fprintf (stderr,
<a name="l00293"></a>00293              <span class="stringliteral">&quot;%s: memstats: No remaining tracked memory utilization.\n&quot;</span>,
<a name="l00294"></a>00294              prefix);
<a name="l00295"></a>00295 }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00298"></a><a class="code" href="memory_8c.html#a30f62fb121b6a07cef50d6c1602f9fab">00298</a> <a class="code" href="memory_8c.html#a30f62fb121b6a07cef50d6c1602f9fab">show_separator</a>(<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l00299"></a>00299 {
<a name="l00300"></a>00300   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;-----------------------------\r\n&quot;</span>);
<a name="l00301"></a>00301 }
<a name="l00302"></a>00302 
<a name="l00303"></a>00303 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00304"></a><a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">00304</a> <a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">show_memory_vty</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">struct</span> <a class="code" href="structmemory__list.html">memory_list</a> *<a class="code" href="structlist.html">list</a>)
<a name="l00305"></a>00305 {
<a name="l00306"></a>00306   <span class="keyword">struct </span><a class="code" href="structmemory__list.html">memory_list</a> *<a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>;
<a name="l00307"></a>00307   <span class="keywordtype">int</span> needsep = 0;
<a name="l00308"></a>00308 
<a name="l00309"></a>00309   <span class="keywordflow">for</span> (m = list; m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a> &gt;= 0; m++)
<a name="l00310"></a>00310     <span class="keywordflow">if</span> (m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a> == 0)
<a name="l00311"></a>00311       {
<a name="l00312"></a>00312     <span class="keywordflow">if</span> (needsep)
<a name="l00313"></a>00313       {
<a name="l00314"></a>00314         <a class="code" href="memory_8c.html#a30f62fb121b6a07cef50d6c1602f9fab">show_separator</a> (vty);
<a name="l00315"></a>00315         needsep = 0;
<a name="l00316"></a>00316       }
<a name="l00317"></a>00317       }
<a name="l00318"></a>00318     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>].alloc)
<a name="l00319"></a>00319       {
<a name="l00320"></a>00320     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%-30s: %10ld\r\n&quot;</span>, m-&gt;<a class="code" href="structmemory__list.html#ac090e1c7929d126c7cf10c8db345aeb6">format</a>, <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[m-&gt;<a class="code" href="structmemory__list.html#aed8dd2d4481ead4ea111087061b63913">index</a>].alloc);
<a name="l00321"></a>00321     needsep = 1;
<a name="l00322"></a>00322       }
<a name="l00323"></a>00323   <span class="keywordflow">return</span> needsep;
<a name="l00324"></a>00324 }
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 <span class="preprocessor">#ifdef HAVE_MALLINFO</span>
<a name="l00327"></a>00327 <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00328"></a>00328 show_memory_mallinfo (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l00329"></a>00329 {
<a name="l00330"></a>00330   <span class="keyword">struct </span>mallinfo minfo = mallinfo();
<a name="l00331"></a>00331   <span class="keywordtype">char</span> buf[<a class="code" href="memory_8h.html#a1b8329be4ab9837147ad7f6d37194045">MTYPE_MEMSTR_LEN</a>];
<a name="l00332"></a>00332   
<a name="l00333"></a>00333   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;System allocator statistics:%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00334"></a>00334   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Total heap allocated:  %s%s&quot;</span>,
<a name="l00335"></a>00335            <a class="code" href="memory_8c.html#a2c899e5435aa69328ce3ad4449b08a68">mtype_memstr</a> (buf, <a class="code" href="memory_8h.html#a1b8329be4ab9837147ad7f6d37194045">MTYPE_MEMSTR_LEN</a>, minfo.arena),
<a name="l00336"></a>00336            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00337"></a>00337   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Holding block headers: %s%s&quot;</span>,
<a name="l00338"></a>00338            <a class="code" href="memory_8c.html#a2c899e5435aa69328ce3ad4449b08a68">mtype_memstr</a> (buf, <a class="code" href="memory_8h.html#a1b8329be4ab9837147ad7f6d37194045">MTYPE_MEMSTR_LEN</a>, minfo.hblkhd),
<a name="l00339"></a>00339            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00340"></a>00340   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Used small blocks:     %s%s&quot;</span>,
<a name="l00341"></a>00341            <a class="code" href="memory_8c.html#a2c899e5435aa69328ce3ad4449b08a68">mtype_memstr</a> (buf, <a class="code" href="memory_8h.html#a1b8329be4ab9837147ad7f6d37194045">MTYPE_MEMSTR_LEN</a>, minfo.usmblks),
<a name="l00342"></a>00342            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00343"></a>00343   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Used ordinary blocks:  %s%s&quot;</span>,
<a name="l00344"></a>00344            <a class="code" href="memory_8c.html#a2c899e5435aa69328ce3ad4449b08a68">mtype_memstr</a> (buf, <a class="code" href="memory_8h.html#a1b8329be4ab9837147ad7f6d37194045">MTYPE_MEMSTR_LEN</a>, minfo.uordblks),
<a name="l00345"></a>00345            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00346"></a>00346   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Free small blocks:     %s%s&quot;</span>,
<a name="l00347"></a>00347            <a class="code" href="memory_8c.html#a2c899e5435aa69328ce3ad4449b08a68">mtype_memstr</a> (buf, <a class="code" href="memory_8h.html#a1b8329be4ab9837147ad7f6d37194045">MTYPE_MEMSTR_LEN</a>, minfo.fsmblks),
<a name="l00348"></a>00348            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00349"></a>00349   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Free ordinary blocks:  %s%s&quot;</span>,
<a name="l00350"></a>00350            <a class="code" href="memory_8c.html#a2c899e5435aa69328ce3ad4449b08a68">mtype_memstr</a> (buf, <a class="code" href="memory_8h.html#a1b8329be4ab9837147ad7f6d37194045">MTYPE_MEMSTR_LEN</a>, minfo.fordblks),
<a name="l00351"></a>00351            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00352"></a>00352   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Ordinary blocks:       %ld%s&quot;</span>,
<a name="l00353"></a>00353            (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)minfo.ordblks,
<a name="l00354"></a>00354            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00355"></a>00355   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Small blocks:          %ld%s&quot;</span>,
<a name="l00356"></a>00356            (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)minfo.smblks,
<a name="l00357"></a>00357            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00358"></a>00358   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;  Holding blocks:        %ld%s&quot;</span>,
<a name="l00359"></a>00359            (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)minfo.hblks,
<a name="l00360"></a>00360            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00361"></a>00361   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;(see system documentation for &#39;mallinfo&#39; for meaning)%s&quot;</span>,
<a name="l00362"></a>00362            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00363"></a>00363   <span class="keywordflow">return</span> 1;
<a name="l00364"></a>00364 }
<a name="l00365"></a>00365 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_MALLINFO */</span>
<a name="l00366"></a>00366 
<a name="l00367"></a><a class="code" href="memory_8c.html#a35949af3dd85c49cd39accea916ac91a">00367</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_memory_all,
<a name="l00368"></a>00368        show_memory_all_cmd,
<a name="l00369"></a>00369        <span class="stringliteral">&quot;show memory all&quot;</span>,
<a name="l00370"></a>00370        <span class="stringliteral">&quot;Show running system information\n&quot;</span>
<a name="l00371"></a>00371        <span class="stringliteral">&quot;Memory statistics\n&quot;</span>
<a name="l00372"></a>00372        <span class="stringliteral">&quot;All memory statistics\n&quot;</span>)
<a name="l00373"></a>00373 {
<a name="l00374"></a>00374   <span class="keyword">struct </span><a class="code" href="structmlist.html">mlist</a> *ml;
<a name="l00375"></a>00375   <span class="keywordtype">int</span> needsep = 0;
<a name="l00376"></a>00376   
<a name="l00377"></a>00377 <span class="preprocessor">#ifdef HAVE_MALLINFO</span>
<a name="l00378"></a>00378 <span class="preprocessor"></span>  needsep = show_memory_mallinfo (vty);
<a name="l00379"></a>00379 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_MALLINFO */</span>
<a name="l00380"></a>00380   
<a name="l00381"></a>00381   <span class="keywordflow">for</span> (ml = <a class="code" href="memory_8h.html#ad8486c18ebccfc422dff41b65019c764">mlists</a>; ml-&gt;<a class="code" href="structmlist.html#a9218339f87cd9d17ef7efd2acd710010">list</a>; ml++)
<a name="l00382"></a>00382     {
<a name="l00383"></a>00383       <span class="keywordflow">if</span> (needsep)
<a name="l00384"></a>00384     <a class="code" href="memory_8c.html#a30f62fb121b6a07cef50d6c1602f9fab">show_separator</a> (vty);
<a name="l00385"></a>00385       needsep = <a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">show_memory_vty</a> (vty, ml-&gt;<a class="code" href="structmlist.html#a9218339f87cd9d17ef7efd2acd710010">list</a>);
<a name="l00386"></a>00386     }
<a name="l00387"></a>00387 
<a name="l00388"></a>00388   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00389"></a>00389 }
<a name="l00390"></a>00390 
<a name="l00391"></a><a class="code" href="memory_8c.html#a644cc72bc450b0eabccd93e65f491fc5">00391</a> <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (show_memory_all,
<a name="l00392"></a>00392        show_memory_cmd,
<a name="l00393"></a>00393        <span class="stringliteral">&quot;show memory&quot;</span>,
<a name="l00394"></a>00394        <span class="stringliteral">&quot;Show running system information\n&quot;</span>
<a name="l00395"></a>00395        <span class="stringliteral">&quot;Memory statistics\n&quot;</span>)
<a name="l00396"></a>00396 
<a name="l00397"></a>00397 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_memory_lib,
<a name="l00398"></a>00398        show_memory_lib_cmd,
<a name="l00399"></a>00399        &quot;show memory lib&quot;,
<a name="l00400"></a>00400        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l00401"></a>00401        &quot;Memory statistics\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;
<a name="l00402"></a>00402        &quot;Library memory\<a class="code" href="spgrid_8c.html#abe63e991a7bf5d666068b15c9064428d">n</a>&quot;)
<a name="l00403"></a>00403 {
<a name="l00404"></a>00404   <a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">show_memory_vty</a> (vty, <a class="code" href="memtypes_8c.html#ac30e0566d1ae29809eeffe50b86133b7">memory_list_lib</a>);
<a name="l00405"></a>00405   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00406"></a>00406 }
<a name="l00407"></a>00407 
<a name="l00408"></a><a class="code" href="memory_8c.html#ae5be502f37c61546881f1c4eefda407b">00408</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_memory_zebra,
<a name="l00409"></a>00409        show_memory_zebra_cmd,
<a name="l00410"></a>00410        <span class="stringliteral">&quot;show memory zebra&quot;</span>,
<a name="l00411"></a>00411        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l00412"></a>00412        <span class="stringliteral">&quot;Memory statistics\n&quot;</span>
<a name="l00413"></a>00413        <span class="stringliteral">&quot;Zebra memory\n&quot;</span>)
<a name="l00414"></a>00414 {
<a name="l00415"></a>00415   <a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">show_memory_vty</a> (vty, <a class="code" href="memtypes_8c.html#a8969e3ae611b78c86d2337ab8040e972">memory_list_zebra</a>);
<a name="l00416"></a>00416   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00417"></a>00417 }
<a name="l00418"></a>00418 
<a name="l00419"></a><a class="code" href="memory_8c.html#a227a4d23912a7e7064f1a1dd7ba0b5d1">00419</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_memory_rip,
<a name="l00420"></a>00420        show_memory_rip_cmd,
<a name="l00421"></a>00421        <span class="stringliteral">&quot;show memory rip&quot;</span>,
<a name="l00422"></a>00422        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l00423"></a>00423        <span class="stringliteral">&quot;Memory statistics\n&quot;</span>
<a name="l00424"></a>00424        <span class="stringliteral">&quot;RIP memory\n&quot;</span>)
<a name="l00425"></a>00425 {
<a name="l00426"></a>00426   <a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">show_memory_vty</a> (vty, <a class="code" href="memtypes_8c.html#ab241d5046a8b369d9fe3ee5fd3315e1b">memory_list_rip</a>);
<a name="l00427"></a>00427   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00428"></a>00428 }
<a name="l00429"></a>00429 
<a name="l00430"></a><a class="code" href="memory_8c.html#a06d0c88b405894a0b85461b77cbf5221">00430</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_memory_ripng,
<a name="l00431"></a>00431        show_memory_ripng_cmd,
<a name="l00432"></a>00432        <span class="stringliteral">&quot;show memory ripng&quot;</span>,
<a name="l00433"></a>00433        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l00434"></a>00434        <span class="stringliteral">&quot;Memory statistics\n&quot;</span>
<a name="l00435"></a>00435        <span class="stringliteral">&quot;RIPng memory\n&quot;</span>)
<a name="l00436"></a>00436 {
<a name="l00437"></a>00437   <a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">show_memory_vty</a> (vty, <a class="code" href="memtypes_8c.html#af654edf45a5ff50dbfbfff90f188a1d6">memory_list_ripng</a>);
<a name="l00438"></a>00438   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00439"></a>00439 }
<a name="l00440"></a>00440 
<a name="l00441"></a><a class="code" href="memory_8c.html#ab9bef0860454b9fd75915e2f0a894662">00441</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_memory_bgp,
<a name="l00442"></a>00442        show_memory_bgp_cmd,
<a name="l00443"></a>00443        <span class="stringliteral">&quot;show memory bgp&quot;</span>,
<a name="l00444"></a>00444        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l00445"></a>00445        <span class="stringliteral">&quot;Memory statistics\n&quot;</span>
<a name="l00446"></a>00446        <span class="stringliteral">&quot;BGP memory\n&quot;</span>)
<a name="l00447"></a>00447 {
<a name="l00448"></a>00448   <a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">show_memory_vty</a> (vty, <a class="code" href="memtypes_8c.html#a49a69b79cc450021f9484c85b2b3f07a">memory_list_bgp</a>);
<a name="l00449"></a>00449   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00450"></a>00450 }
<a name="l00451"></a>00451 
<a name="l00452"></a><a class="code" href="memory_8c.html#a3e718c17208d319ee93603b1e23ea7b0">00452</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_memory_ospf,
<a name="l00453"></a>00453        show_memory_ospf_cmd,
<a name="l00454"></a>00454        <span class="stringliteral">&quot;show memory ospf&quot;</span>,
<a name="l00455"></a>00455        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l00456"></a>00456        <span class="stringliteral">&quot;Memory statistics\n&quot;</span>
<a name="l00457"></a>00457        <span class="stringliteral">&quot;OSPF memory\n&quot;</span>)
<a name="l00458"></a>00458 {
<a name="l00459"></a>00459   <a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">show_memory_vty</a> (vty, <a class="code" href="memtypes_8c.html#ad796a2da28dad275942b82bc1ea119f4">memory_list_ospf</a>);
<a name="l00460"></a>00460   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00461"></a>00461 }
<a name="l00462"></a>00462 
<a name="l00463"></a><a class="code" href="memory_8c.html#a79f8b1385bb2b4c5cad7eb9516decddc">00463</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_memory_ospf6,
<a name="l00464"></a>00464        show_memory_ospf6_cmd,
<a name="l00465"></a>00465        <span class="stringliteral">&quot;show memory ospf6&quot;</span>,
<a name="l00466"></a>00466        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l00467"></a>00467        <span class="stringliteral">&quot;Memory statistics\n&quot;</span>
<a name="l00468"></a>00468        <span class="stringliteral">&quot;OSPF6 memory\n&quot;</span>)
<a name="l00469"></a>00469 {
<a name="l00470"></a>00470   <a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">show_memory_vty</a> (vty, <a class="code" href="memtypes_8c.html#ad13ddd9f633d50dc9238c1ca1697ba76">memory_list_ospf6</a>);
<a name="l00471"></a>00471   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00472"></a>00472 }
<a name="l00473"></a>00473 
<a name="l00474"></a><a class="code" href="memory_8c.html#ab91afc4a1a2def1e2cbcf12fd7b83b4b">00474</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_memory_isis,
<a name="l00475"></a>00475        show_memory_isis_cmd,
<a name="l00476"></a>00476        <span class="stringliteral">&quot;show memory isis&quot;</span>,
<a name="l00477"></a>00477        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l00478"></a>00478        <span class="stringliteral">&quot;Memory statistics\n&quot;</span>
<a name="l00479"></a>00479        <span class="stringliteral">&quot;ISIS memory\n&quot;</span>)
<a name="l00480"></a>00480 {
<a name="l00481"></a>00481   <a class="code" href="memory_8c.html#af7cf0dd216c576eb1e6d695e6c1f7435">show_memory_vty</a> (vty, <a class="code" href="memtypes_8c.html#a167ef5ceb5c27ccfd9b58cb8f2049a08">memory_list_isis</a>);
<a name="l00482"></a>00482   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00483"></a>00483 }
<a name="l00484"></a>00484 
<a name="l00485"></a>00485 <span class="keywordtype">void</span>
<a name="l00486"></a><a class="code" href="memory_8h.html#a34f25b1ca1556d0890274a971d46af10">00486</a> <a class="code" href="memory_8c.html#a34f25b1ca1556d0890274a971d46af10">memory_init</a> (<span class="keywordtype">void</span>)
<a name="l00487"></a>00487 {
<a name="l00488"></a>00488   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_cmd);
<a name="l00489"></a>00489   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_all_cmd);
<a name="l00490"></a>00490   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_lib_cmd);
<a name="l00491"></a>00491   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_rip_cmd);
<a name="l00492"></a>00492   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_ripng_cmd);
<a name="l00493"></a>00493   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_bgp_cmd);
<a name="l00494"></a>00494   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_ospf_cmd);
<a name="l00495"></a>00495   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_ospf6_cmd);
<a name="l00496"></a>00496   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acb0c5ada108352e3e869838b0ee04c3b">RESTRICTED_NODE</a>, &amp;show_memory_isis_cmd);
<a name="l00497"></a>00497 
<a name="l00498"></a>00498   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_cmd);
<a name="l00499"></a>00499   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_all_cmd);
<a name="l00500"></a>00500   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_lib_cmd);
<a name="l00501"></a>00501   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_rip_cmd);
<a name="l00502"></a>00502   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_ripng_cmd);
<a name="l00503"></a>00503   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_bgp_cmd);
<a name="l00504"></a>00504   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_ospf_cmd);
<a name="l00505"></a>00505   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_ospf6_cmd);
<a name="l00506"></a>00506   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_memory_isis_cmd);
<a name="l00507"></a>00507 
<a name="l00508"></a>00508   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_cmd);
<a name="l00509"></a>00509   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_all_cmd);
<a name="l00510"></a>00510   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_lib_cmd);
<a name="l00511"></a>00511   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_zebra_cmd);
<a name="l00512"></a>00512   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_rip_cmd);
<a name="l00513"></a>00513   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_ripng_cmd);
<a name="l00514"></a>00514   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_bgp_cmd);
<a name="l00515"></a>00515   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_ospf_cmd);
<a name="l00516"></a>00516   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_ospf6_cmd);
<a name="l00517"></a>00517   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_memory_isis_cmd);
<a name="l00518"></a>00518 }
<a name="l00519"></a>00519 
<a name="l00520"></a>00520 <span class="comment">/* Stats querying from users */</span>
<a name="l00521"></a>00521 <span class="comment">/* Return a pointer to a human friendly string describing</span>
<a name="l00522"></a>00522 <span class="comment"> * the byte count passed in. E.g:</span>
<a name="l00523"></a>00523 <span class="comment"> * &quot;0 bytes&quot;, &quot;2048 bytes&quot;, &quot;110kB&quot;, &quot;500MiB&quot;, &quot;11GiB&quot;, etc.</span>
<a name="l00524"></a>00524 <span class="comment"> * Up to 4 significant figures will be given.</span>
<a name="l00525"></a>00525 <span class="comment"> * The pointer returned may be NULL (indicating an error)</span>
<a name="l00526"></a>00526 <span class="comment"> * or point to the given buffer, or point to static storage.</span>
<a name="l00527"></a>00527 <span class="comment"> */</span>
<a name="l00528"></a>00528 <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00529"></a><a class="code" href="memory_8h.html#a4ec69871f9e3020752d61b275e0c33cf">00529</a> <a class="code" href="memory_8c.html#a2c899e5435aa69328ce3ad4449b08a68">mtype_memstr</a> (<span class="keywordtype">char</span> *buf, <span class="keywordtype">size_t</span> len, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> bytes)
<a name="l00530"></a>00530 {
<a name="l00531"></a>00531   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="test-sig_8c.html#ab4ed0bba3292270af8ad67b45a21280d">t</a>, <a class="code" href="bgp__route_8c.html#a7ffdcd98fe58cb9d89e7f6aa804288e1">g</a>, <a class="code" href="spgrid_8c.html#a5175b356eac1d83a42608b42a25d00b9">m</a>, <a class="code" href="spgrid_8c.html#a166d56cfd4c4c4d27db0bd3cd0fe81d9">k</a>;
<a name="l00532"></a>00532   
<a name="l00533"></a>00533   <span class="comment">/* easy cases */</span>
<a name="l00534"></a>00534   <span class="keywordflow">if</span> (!bytes)
<a name="l00535"></a>00535     <span class="keywordflow">return</span> <span class="stringliteral">&quot;0 bytes&quot;</span>;
<a name="l00536"></a>00536   <span class="keywordflow">if</span> (bytes == 1)
<a name="l00537"></a>00537     <span class="keywordflow">return</span> <span class="stringliteral">&quot;1 byte&quot;</span>;
<a name="l00538"></a>00538     
<a name="l00539"></a>00539   <span class="keywordflow">if</span> (<span class="keyword">sizeof</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) &gt;= 8)
<a name="l00540"></a>00540     <span class="comment">/* Hacked to make it not warn on ILP32 machines</span>
<a name="l00541"></a>00541 <span class="comment">     * Shift will always be 40 at runtime. See below too */</span>
<a name="l00542"></a>00542     t = bytes &gt;&gt; (<span class="keyword">sizeof</span> (<span class="keywordtype">unsigned</span> long) &gt;= 8 ? 40 : 0);
<a name="l00543"></a>00543   <span class="keywordflow">else</span>
<a name="l00544"></a>00544     t = 0;
<a name="l00545"></a>00545   g = bytes &gt;&gt; 30;
<a name="l00546"></a>00546   m = bytes &gt;&gt; 20;
<a name="l00547"></a>00547   k = bytes &gt;&gt; 10;
<a name="l00548"></a>00548   
<a name="l00549"></a>00549   <span class="keywordflow">if</span> (t &gt; 10)
<a name="l00550"></a>00550     {
<a name="l00551"></a>00551       <span class="comment">/* The shift will always be 39 at runtime.</span>
<a name="l00552"></a>00552 <span class="comment">       * Just hacked to make it not warn on &#39;smaller&#39; machines. </span>
<a name="l00553"></a>00553 <span class="comment">       * Static compiler analysis should mean no extra code</span>
<a name="l00554"></a>00554 <span class="comment">       */</span>
<a name="l00555"></a>00555       <span class="keywordflow">if</span> (bytes &amp; (1UL &lt;&lt; (<span class="keyword">sizeof</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) &gt;= 8 ? 39 : 0)))
<a name="l00556"></a>00556         t++;
<a name="l00557"></a>00557       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%4d TiB&quot;</span>, t);
<a name="l00558"></a>00558     }
<a name="l00559"></a>00559   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (g &gt; 10)
<a name="l00560"></a>00560     {
<a name="l00561"></a>00561       <span class="keywordflow">if</span> (bytes &amp; (1 &lt;&lt; 29))
<a name="l00562"></a>00562         g++;
<a name="l00563"></a>00563       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%d GiB&quot;</span>, g);
<a name="l00564"></a>00564     }
<a name="l00565"></a>00565   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m &gt; 10)
<a name="l00566"></a>00566     {
<a name="l00567"></a>00567       <span class="keywordflow">if</span> (bytes &amp; (1 &lt;&lt; 19))
<a name="l00568"></a>00568         m++;
<a name="l00569"></a>00569       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%d MiB&quot;</span>, m);
<a name="l00570"></a>00570     }
<a name="l00571"></a>00571   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (k &gt; 10)
<a name="l00572"></a>00572     {
<a name="l00573"></a>00573       <span class="keywordflow">if</span> (bytes &amp; (1 &lt;&lt; 9))
<a name="l00574"></a>00574         k++;
<a name="l00575"></a>00575       <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%d KiB&quot;</span>, k);
<a name="l00576"></a>00576     }
<a name="l00577"></a>00577   <span class="keywordflow">else</span>
<a name="l00578"></a>00578     <a class="code" href="str_8c.html#ad76145a6edfc98981ded8815a760e0cd">snprintf</a> (buf, len, <span class="stringliteral">&quot;%ld bytes&quot;</span>, bytes);
<a name="l00579"></a>00579   
<a name="l00580"></a>00580   <span class="keywordflow">return</span> buf;
<a name="l00581"></a>00581 }
<a name="l00582"></a>00582 
<a name="l00583"></a>00583 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>
<a name="l00584"></a><a class="code" href="memory_8h.html#a3ac17d2c59b3dbd0f140033d5ace467f">00584</a> <a class="code" href="memory_8c.html#a8f242036e581a1a447b79199d9a130ba">mtype_stats_alloc</a> (<span class="keywordtype">int</span> type)
<a name="l00585"></a>00585 {
<a name="l00586"></a>00586   <span class="keywordflow">return</span> <a class="code" href="memory_8c.html#a91ecd320151b8830ace9e15fa32089a3">mstat</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].alloc;
<a name="l00587"></a>00587 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="memory_8c.html">memory.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
