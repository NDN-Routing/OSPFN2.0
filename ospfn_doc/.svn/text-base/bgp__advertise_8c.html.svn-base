<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: bgpd/bgp_advertise.c File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('bgp__advertise_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">bgpd/bgp_advertise.c File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="zebra_8h_source.html">zebra.h</a>&gt;</code><br/>
<code>#include &quot;<a class="el" href="command_8h_source.html">command.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="memory_8h_source.html">memory.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="hash_8h_source.html">hash.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="thread_8h_source.html">thread.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgpd_8h_source.html">bgpd/bgpd.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__table_8h_source.html">bgpd/bgp_table.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__route_8h_source.html">bgpd/bgp_route.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__advertise_8h_source.html">bgpd/bgp_advertise.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__attr_8h_source.html">bgpd/bgp_attr.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__aspath_8h_source.html">bgpd/bgp_aspath.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__packet_8h_source.html">bgpd/bgp_packet.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__fsm_8h_source.html">bgpd/bgp_fsm.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="bgp__mplsvpn_8h_source.html">bgpd/bgp_mplsvpn.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for bgp_advertise.c:</div>
<div class="dyncontent">
<div class="center"><img src="bgp__advertise_8c__incl.png" border="0" usemap="#bgpd_2bgp__advertise_8c" alt=""/></div>
<map name="bgpd_2bgp__advertise_8c" id="bgpd_2bgp__advertise_8c">
<area shape="rect" id="node3" href="zebra_8h.html" title="zebra.h" alt="" coords="1345,80,1412,107"/><area shape="rect" id="node61" href="command_8h.html" title="command.h" alt="" coords="2931,80,3023,107"/><area shape="rect" id="node67" href="thread_8h.html" title="thread.h" alt="" coords="2991,229,3063,256"/><area shape="rect" id="node74" href="memory_8h.html" title="memory.h" alt="" coords="3171,80,3253,107"/><area shape="rect" id="node78" href="prefix_8h.html" title="prefix.h" alt="" coords="3278,80,3345,107"/><area shape="rect" id="node82" href="hash_8h.html" title="hash.h" alt="" coords="3371,80,3432,107"/><area shape="rect" id="node85" href="bgpd_8h.html" title="bgpd/bgpd.h" alt="" coords="3457,80,3556,107"/><area shape="rect" id="node88" href="bgp__table_8h.html" title="bgpd/bgp_table.h" alt="" coords="3567,155,3697,181"/><area shape="rect" id="node90" href="bgp__route_8h.html" title="bgpd/bgp_route.h" alt="" coords="3632,80,3763,107"/><area shape="rect" id="node93" href="bgp__advertise_8h.html" title="bgpd/bgp_advertise.h" alt="" coords="3787,80,3943,107"/><area shape="rect" id="node95" href="bgp__attr_8h.html" title="bgpd/bgp_attr.h" alt="" coords="3968,80,4088,107"/><area shape="rect" id="node97" href="bgp__aspath_8h.html" title="bgpd/bgp_aspath.h" alt="" coords="4113,80,4252,107"/><area shape="rect" id="node99" href="bgp__packet_8h.html" title="bgpd/bgp_packet.h" alt="" coords="4277,80,4416,107"/><area shape="rect" id="node101" href="bgp__fsm_8h.html" title="bgpd/bgp_fsm.h" alt="" coords="4441,80,4561,107"/><area shape="rect" id="node103" href="bgp__mplsvpn_8h.html" title="bgpd/bgp_mplsvpn.h" alt="" coords="4586,80,4736,107"/><area shape="rect" id="node57" href="zassert_8h.html" title="zassert.h" alt="" coords="2623,155,2700,181"/><area shape="rect" id="node59" href="str_8h.html" title="str.h" alt="" coords="2725,155,2773,181"/><area shape="rect" id="node63" href="vector_8h.html" title="vector.h" alt="" coords="2799,155,2871,181"/><area shape="rect" id="node65" href="vty_8h.html" title="vty.h" alt="" coords="2895,155,2947,181"/><area shape="rect" id="node72" href="route__types_8h.html" title="lib/route_types.h" alt="" coords="2971,155,3095,181"/><area shape="rect" id="node69" href="log_8h.html" title="log.h" alt="" coords="2258,229,2309,256"/><area shape="rect" id="node76" href="memtypes_8h.html" title="lib/memtypes.h" alt="" coords="3171,155,3285,181"/><area shape="rect" id="node80" href="sockunion_8h.html" title="sockunion.h" alt="" coords="3423,155,3516,181"/></map>
</div>
</div>
<p><a href="bgp__advertise_8c_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a7c19bf000480e3678ffbb11e69da0248">baa_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#ade280b01bedf74289f88e3aca4a750bc">baa_free</a> (struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *baa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a43f7c3f0c2ef8ed3045eebc2ecaa962d">baa_hash_alloc</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a024c3ed3c20c0c1e209cbfbd8ef5c4e3">baa_hash_key</a> (void *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#aa0647daa6f29a221e51c4637ff74a096">baa_hash_cmp</a> (const void *p1, const void *p2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a58ab65479e5f4991399f3e11e0aeb1ad">bgp_advertise_new</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#ad6043ca16a0ed903dbf1ab85282ec91d">bgp_advertise_free</a> (struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a> *adv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a6a9a2312c3fb09db5ec53fa34fb65639">bgp_advertise_add</a> (struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *baa, struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a> *adv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#aea49110d4a655058312d2ba26b61438b">bgp_advertise_delete</a> (struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *baa, struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a> *adv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a098f21cf257aa81d21cdae2be64b5f31">bgp_advertise_intern</a> (struct <a class="el" href="structhash.html">hash</a> *<a class="el" href="structhash.html">hash</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#af463f49af56e580001e83d7c420cd1af">bgp_advertise_unintern</a> (struct <a class="el" href="structhash.html">hash</a> *<a class="el" href="structhash.html">hash</a>, struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *baa)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a612a1cbbfc083422b77b1ee6c5b556fa">bgp_adj_out_free</a> (struct <a class="el" href="structbgp__adj__out.html">bgp_adj_out</a> *adj)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#aebf800b9e88b48d79843ec71e900996e">bgp_adj_out_lookup</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, struct <a class="el" href="structbgp__node.html">bgp_node</a> *rn)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#ae3db721dd592035054c399b932338af0">bgp_advertise_clean</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structbgp__adj__out.html">bgp_adj_out</a> *adj, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a3a40b0a670f7854055d71517f5ede018">bgp_adj_out_set</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *rn, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, struct <a class="el" href="structbgp__info.html">bgp_info</a> *binfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#adbc62e0dd99f941abbaf231f77930094">bgp_adj_out_unset</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *rn, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a4f008d09b6f5c7288dc27f5a5fbf376f">bgp_adj_out_remove</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *rn, struct <a class="el" href="structbgp__adj__out.html">bgp_adj_out</a> *adj, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, <a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a77bcda74262e0f3ac53d98898bc76a55">bgp_adj_in_set</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *rn, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>, struct <a class="el" href="structattr.html">attr</a> *<a class="el" href="structattr.html">attr</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a10c89147ee0e113b39318daa8cb5dc66">bgp_adj_in_remove</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *rn, struct <a class="el" href="structbgp__adj__in.html">bgp_adj_in</a> *bai)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a88b27370d0e6416445dc1f131053d9f1">bgp_adj_in_unset</a> (struct <a class="el" href="structbgp__node.html">bgp_node</a> *rn, struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#acc82ab213ba4b510000b2da360e1d347">bgp_sync_init</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="bgp__advertise_8c.html#a1a133356214b32e6d51aec071be79f1d">bgp_sync_delete</a> (struct <a class="el" href="structpeer.html">peer</a> *<a class="el" href="structpeer.html">peer</a>)</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ade280b01bedf74289f88e3aca4a750bc"></a><!-- doxytag: member="bgp_advertise.c::baa_free" ref="ade280b01bedf74289f88e3aca4a750bc" args="(struct bgp_advertise_attr *baa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void baa_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *&#160;</td>
          <td class="paramname"><em>baa</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00050">50</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf61676a40b14ec99a582487e9151a394">MTYPE_BGP_ADVERTISE_ATTR</a>, baa);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a43f7c3f0c2ef8ed3045eebc2ecaa962d"></a><!-- doxytag: member="bgp_advertise.c::baa_hash_alloc" ref="a43f7c3f0c2ef8ed3045eebc2ecaa962d" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void* baa_hash_alloc </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00056">56</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> * ref = (<span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *baa;

  baa = <a class="code" href="bgp__advertise_8c.html#a7c19bf000480e3678ffbb11e69da0248">baa_new</a> ();
  baa-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a> = ref-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>;
  <span class="keywordflow">return</span> baa;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa0647daa6f29a221e51c4637ff74a096"></a><!-- doxytag: member="bgp_advertise.c::baa_hash_cmp" ref="aa0647daa6f29a221e51c4637ff74a096" args="(const void *p1, const void *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int baa_hash_cmp </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00075">75</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> * baa1 = p1;
  <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> * baa2 = p2;

  <span class="keywordflow">return</span> <a class="code" href="bgp__attr_8c.html#a95c1ea9ce12032797eb35c31ad20180d">attrhash_cmp</a> (baa1-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>, baa2-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a024c3ed3c20c0c1e209cbfbd8ef5c4e3"></a><!-- doxytag: member="bgp_advertise.c::baa_hash_key" ref="a024c3ed3c20c0c1e209cbfbd8ef5c4e3" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int baa_hash_key </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00067">67</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> * baa = (<span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;

  <span class="keywordflow">return</span> <a class="code" href="bgp__attr_8c.html#aef00519644383d0b101d93d5c58287e5">attrhash_key_make</a> (baa-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7c19bf000480e3678ffbb11e69da0248"></a><!-- doxytag: member="bgp_advertise.c::baa_new" ref="a7c19bf000480e3678ffbb11e69da0248" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a>* baa_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00043">43</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *)
    <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf61676a40b14ec99a582487e9151a394">MTYPE_BGP_ADVERTISE_ATTR</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a10c89147ee0e113b39318daa8cb5dc66"></a><!-- doxytag: member="bgp_advertise.c::bgp_adj_in_remove" ref="a10c89147ee0e113b39318daa8cb5dc66" args="(struct bgp_node *rn, struct bgp_adj_in *bai)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_in_remove </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__adj__in.html">bgp_adj_in</a> *&#160;</td>
          <td class="paramname"><em>bai</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00356">356</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (bai-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a>);
  <a class="code" href="bgp__advertise_8h.html#aef9983ec96ae91af692b72e0624be49a">BGP_ADJ_IN_DEL</a> (rn, bai);
  <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (bai-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a>); <span class="comment">/* adj_in peer reference */</span>
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9fc13e93770678a7f72d3b87899ad9bc">MTYPE_BGP_ADJ_IN</a>, bai);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a77bcda74262e0f3ac53d98898bc76a55"></a><!-- doxytag: member="bgp_advertise.c::bgp_adj_in_set" ref="a77bcda74262e0f3ac53d98898bc76a55" args="(struct bgp_node *rn, struct peer *peer, struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_in_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00332">332</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *adj;

  <span class="keywordflow">for</span> (adj = rn-&gt;<a class="code" href="structbgp__node.html#a47213f2ff58ef9de9f5daf62b8f918be">adj_in</a>; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>)
    {
      <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> == peer)
    {
      <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a> != attr)
        {
          <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (adj-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a>);
          adj-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (attr);
        }
      <span class="keywordflow">return</span>;
    }
    }
  adj = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba9fc13e93770678a7f72d3b87899ad9bc">MTYPE_BGP_ADJ_IN</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__adj__in.html">bgp_adj_in</a>));
  adj-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* adj_in peer reference */</span>
  adj-&gt;<a class="code" href="structbgp__adj__in.html#af4ba3d9b17562310690d0ef0cd1e6ff8">attr</a> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (attr);
  <a class="code" href="bgp__advertise_8h.html#a1ce2af1fd81e9240bc4d6d784338cf75">BGP_ADJ_IN_ADD</a> (rn, adj);
  <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a88b27370d0e6416445dc1f131053d9f1"></a><!-- doxytag: member="bgp_advertise.c::bgp_adj_in_unset" ref="a88b27370d0e6416445dc1f131053d9f1" args="(struct bgp_node *rn, struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_in_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00365">365</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__in.html">bgp_adj_in</a> *adj;

  <span class="keywordflow">for</span> (adj = rn-&gt;<a class="code" href="structbgp__node.html#a47213f2ff58ef9de9f5daf62b8f918be">adj_in</a>; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__in.html#aaa2dc023411504da13bde05352687565">next</a>)
    <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__in.html#ab6bb20edc80c75c836662a675102301d">peer</a> == peer)
      <span class="keywordflow">break</span>;

  <span class="keywordflow">if</span> (! adj)
    <span class="keywordflow">return</span>;

  <a class="code" href="bgp__advertise_8c.html#a10c89147ee0e113b39318daa8cb5dc66">bgp_adj_in_remove</a> (rn, adj);
  <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a612a1cbbfc083422b77b1ee6c5b556fa"></a><!-- doxytag: member="bgp_advertise.c::bgp_adj_out_free" ref="a612a1cbbfc083422b77b1ee6c5b556fa" args="(struct bgp_adj_out *adj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_adj_out_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__adj__out.html">bgp_adj_out</a> *&#160;</td>
          <td class="paramname"><em>adj</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00157">157</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="bgpd_8c.html#a7c9a78413925372479b9c538daac6d1d">peer_unlock</a> (adj-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a>); <span class="comment">/* adj_out peer reference */</span>
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba40ea9ea629be7de14918430e19191584">MTYPE_BGP_ADJ_OUT</a>, adj);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aebf800b9e88b48d79843ec71e900996e"></a><!-- doxytag: member="bgp_advertise.c::bgp_adj_out_lookup" ref="aebf800b9e88b48d79843ec71e900996e" args="(struct peer *peer, struct prefix *p, afi_t afi, safi_t safi, struct bgp_node *rn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bgp_adj_out_lookup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00164">164</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj;

  <span class="keywordflow">for</span> (adj = rn-&gt;<a class="code" href="structbgp__node.html#a9bf05aaab10e96a03e4110e68fb658b3">adj_out</a>; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__out.html#ac948c3694180238ffaa4fdba9576b84b">next</a>)
    <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a> == peer)
      <span class="keywordflow">break</span>;

  <span class="keywordflow">if</span> (! adj)
    <span class="keywordflow">return</span> 0;

  <span class="keywordflow">return</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a> 
      ? (adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a> ? 1 : 0)
      : (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a> ? 1 : 0));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4f008d09b6f5c7288dc27f5a5fbf376f"></a><!-- doxytag: member="bgp_advertise.c::bgp_adj_out_remove" ref="a4f008d09b6f5c7288dc27f5a5fbf376f" args="(struct bgp_node *rn, struct bgp_adj_out *adj, struct peer *peer, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_out_remove </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__adj__out.html">bgp_adj_out</a> *&#160;</td>
          <td class="paramname"><em>adj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00318">318</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>)
    <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>);

  <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>)
    <a class="code" href="bgp__advertise_8c.html#ae3db721dd592035054c399b932338af0">bgp_advertise_clean</a> (peer, adj, afi, safi);

  <a class="code" href="bgp__advertise_8h.html#ae50f02c9dbfa3568f37d0c3eb4a93640">BGP_ADJ_OUT_DEL</a> (rn, adj);
  <a class="code" href="bgp__advertise_8c.html#a612a1cbbfc083422b77b1ee6c5b556fa">bgp_adj_out_free</a> (adj);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3a40b0a670f7854055d71517f5ede018"></a><!-- doxytag: member="bgp_advertise.c::bgp_adj_out_set" ref="a3a40b0a670f7854055d71517f5ede018" args="(struct bgp_node *rn, struct peer *peer, struct prefix *p, struct attr *attr, afi_t afi, safi_t safi, struct bgp_info *binfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_out_set </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__info.html">bgp_info</a> *&#160;</td>
          <td class="paramname"><em>binfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00216">216</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;

  <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Look for adjacency information. */</span>
  <span class="keywordflow">if</span> (rn)
    {
      <span class="keywordflow">for</span> (adj = rn-&gt;<a class="code" href="structbgp__node.html#a9bf05aaab10e96a03e4110e68fb658b3">adj_out</a>; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__out.html#ac948c3694180238ffaa4fdba9576b84b">next</a>)
    <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a> == peer)
      <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">if</span> (! adj)
    {
      adj = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba40ea9ea629be7de14918430e19191584">MTYPE_BGP_ADJ_OUT</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__adj__out.html">bgp_adj_out</a>));
      adj-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a> = <a class="code" href="bgpd_8c.html#a05008955933f8ba5f831e03862ca5b94">peer_lock</a> (peer); <span class="comment">/* adj_out peer reference */</span>
      
      <span class="keywordflow">if</span> (rn)
        {
          <a class="code" href="bgp__advertise_8h.html#aadafe41cc6e05191cb98c1beb10cc81a">BGP_ADJ_OUT_ADD</a> (rn, adj);
          <a class="code" href="bgp__table_8c.html#a8c629ca0214d269ce20f39268b9196d7">bgp_lock_node</a> (rn);
        }
    }

  <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>)
    <a class="code" href="bgp__advertise_8c.html#ae3db721dd592035054c399b932338af0">bgp_advertise_clean</a> (peer, adj, afi, safi);
  
  adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a> = <a class="code" href="bgp__advertise_8c.html#a58ab65479e5f4991399f3e11e0aeb1ad">bgp_advertise_new</a> ();

  adv = adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>;
  adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a> = <a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>;
  
  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
  adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a> = <a class="code" href="bgp__route_8c.html#a58d087602593301ee3256a1ffd1321b8">bgp_info_lock</a> (binfo); <span class="comment">/* bgp_info adj_out reference */</span>
  
  <span class="keywordflow">if</span> (attr)
    adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a> = <a class="code" href="bgp__advertise_8c.html#a098f21cf257aa81d21cdae2be64b5f31">bgp_advertise_intern</a> (peer-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi], attr);
  <span class="keywordflow">else</span>
    adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a> = <a class="code" href="bgp__advertise_8c.html#a7c19bf000480e3678ffbb11e69da0248">baa_new</a> ();
  adv-&gt;<a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a> = <a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>;

  <span class="comment">/* Add new advertisement to advertisement attribute list. */</span>
  <a class="code" href="bgp__advertise_8c.html#a6a9a2312c3fb09db5ec53fa34fb65639">bgp_advertise_add</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a>, adv);

  <a class="code" href="zebra_8h.html#acb0a99d14f01877ba438989e05d4970e">FIFO_ADD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>, &amp;adv-&gt;<a class="code" href="structbgp__advertise.html#aac8acd56d21ff32539a0a3e8658003e7">fifo</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="adbc62e0dd99f941abbaf231f77930094"></a><!-- doxytag: member="bgp_advertise.c::bgp_adj_out_unset" ref="adbc62e0dd99f941abbaf231f77930094" args="(struct bgp_node *rn, struct peer *peer, struct prefix *p, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_adj_out_unset </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__node.html">bgp_node</a> *&#160;</td>
          <td class="paramname"><em>rn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00270">270</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__adj__out.html">bgp_adj_out</a> *adj;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;

  <span class="keywordflow">if</span> (DISABLE_BGP_ANNOUNCE)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Lookup existing adjacency, if it is not there return immediately.  */</span>
  <span class="keywordflow">for</span> (adj = rn-&gt;<a class="code" href="structbgp__node.html#a9bf05aaab10e96a03e4110e68fb658b3">adj_out</a>; adj; adj = adj-&gt;<a class="code" href="structbgp__adj__out.html#ac948c3694180238ffaa4fdba9576b84b">next</a>)
    <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#ae1c9f9080494135b21825472a087d5b2">peer</a> == peer)
      <span class="keywordflow">break</span>;

  <span class="keywordflow">if</span> (! adj)
    <span class="keywordflow">return</span>;

  <span class="comment">/* Clearn up previous advertisement.  */</span>
  <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>)
    <a class="code" href="bgp__advertise_8c.html#ae3db721dd592035054c399b932338af0">bgp_advertise_clean</a> (peer, adj, afi, safi);

  <span class="keywordflow">if</span> (adj-&gt;<a class="code" href="structbgp__adj__out.html#aa217553736564dc871f7c7479884c7d7">attr</a>)
    {
      <span class="comment">/* We need advertisement structure.  */</span>
      adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a> = <a class="code" href="bgp__advertise_8c.html#a58ab65479e5f4991399f3e11e0aeb1ad">bgp_advertise_new</a> ();
      adv = adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>;
      adv-&gt;<a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a> = <a class="code" href="structbgp__advertise.html#a00eca158f1c9bc5fa592faac4f3d2b9f">rn</a>;
      adv-&gt;<a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a> = <a class="code" href="structbgp__advertise.html#af883bd4388e5b7e6a3db1cd92c013c50">adj</a>;

      <span class="comment">/* Add to synchronization entry for withdraw announcement.  */</span>
      <a class="code" href="zebra_8h.html#acb0a99d14f01877ba438989e05d4970e">FIFO_ADD</a> (&amp;peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]-&gt;<a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>, &amp;adv-&gt;<a class="code" href="structbgp__advertise.html#aac8acd56d21ff32539a0a3e8658003e7">fifo</a>);

      <span class="comment">/* Schedule packet write. */</span>
      <a class="code" href="bgp__fsm_8h.html#a441b8dfef999d79ac1c3e3b9573fe516">BGP_WRITE_ON</a> (peer-&gt;<a class="code" href="structpeer.html#af1b52e357fd1c6aa0bc8360cf57485e4">t_write</a>, <a class="code" href="bgp__packet_8c.html#ad43cdddbeb3aa17bb2aa199409455c1c">bgp_write</a>, peer-&gt;<a class="code" href="structpeer.html#a593c49b1167d88eb2d2900db47eb5d9d">fd</a>);
    }
  <span class="keywordflow">else</span>
    {
      <span class="comment">/* Remove myself from adjacency. */</span>
      <a class="code" href="bgp__advertise_8h.html#ae50f02c9dbfa3568f37d0c3eb4a93640">BGP_ADJ_OUT_DEL</a> (rn, adj);
      
      <span class="comment">/* Free allocated information.  */</span>
      <a class="code" href="bgp__advertise_8c.html#a612a1cbbfc083422b77b1ee6c5b556fa">bgp_adj_out_free</a> (adj);

      <a class="code" href="bgp__table_8c.html#a5f6b53d4f2cd155109c2eec1fcf80687">bgp_unlock_node</a> (rn);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6a9a2312c3fb09db5ec53fa34fb65639"></a><!-- doxytag: member="bgp_advertise.c::bgp_advertise_add" ref="a6a9a2312c3fb09db5ec53fa34fb65639" args="(struct bgp_advertise_attr *baa, struct bgp_advertise *adv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_advertise_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *&#160;</td>
          <td class="paramname"><em>baa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a> *&#160;</td>
          <td class="paramname"><em>adv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00102">102</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  adv-&gt;<a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a> = baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a8d6ce489199bacb90d0fc4088ce9cf56">adv</a>;
  <span class="keywordflow">if</span> (baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a8d6ce489199bacb90d0fc4088ce9cf56">adv</a>)
    baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a8d6ce489199bacb90d0fc4088ce9cf56">adv</a>-&gt;<a class="code" href="structbgp__advertise.html#a648f13eb336131fcc6f0fe9daf99130c">prev</a> = adv;
  baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a8d6ce489199bacb90d0fc4088ce9cf56">adv</a> = adv;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae3db721dd592035054c399b932338af0"></a><!-- doxytag: member="bgp_advertise.c::bgp_advertise_clean" ref="ae3db721dd592035054c399b932338af0" args="(struct peer *peer, struct bgp_adj_out *adj, afi_t afi, safi_t safi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a>* bgp_advertise_clean </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__adj__out.html">bgp_adj_out</a> *&#160;</td>
          <td class="paramname"><em>adj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00182">182</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *adv;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *baa;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise.html">bgp_advertise</a> *<a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a>;

  adv = adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>;
  baa = adv-&gt;<a class="code" href="structbgp__advertise.html#ac67caa494411d7947ec4891a0fb415a8">baa</a>;
  next = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (baa)
    {
      <span class="comment">/* Unlink myself from advertise attribute FIFO.  */</span>
      <a class="code" href="bgp__advertise_8c.html#aea49110d4a655058312d2ba26b61438b">bgp_advertise_delete</a> (baa, adv);

      <span class="comment">/* Fetch next advertise candidate. */</span>
      next = baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a8d6ce489199bacb90d0fc4088ce9cf56">adv</a>;

      <span class="comment">/* Unintern BGP advertise attribute.  */</span>
      <a class="code" href="bgp__advertise_8c.html#af463f49af56e580001e83d7c420cd1af">bgp_advertise_unintern</a> (peer-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi], baa);
    }

  <span class="comment">/* Unlink myself from advertisement FIFO.  */</span>
  <a class="code" href="zebra_8h.html#a255d1f51241b85eb6a898952de88c4a5">FIFO_DEL</a> (adv);

  <span class="comment">/* Free memory.  */</span>
  <a class="code" href="bgp__advertise_8c.html#ad6043ca16a0ed903dbf1ab85282ec91d">bgp_advertise_free</a> (adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a>);
  adj-&gt;<a class="code" href="structbgp__adj__out.html#a4edbebb0519756931a0c90df91c6490b">adv</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> <a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aea49110d4a655058312d2ba26b61438b"></a><!-- doxytag: member="bgp_advertise.c::bgp_advertise_delete" ref="aea49110d4a655058312d2ba26b61438b" args="(struct bgp_advertise_attr *baa, struct bgp_advertise *adv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_advertise_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *&#160;</td>
          <td class="paramname"><em>baa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a> *&#160;</td>
          <td class="paramname"><em>adv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00112">112</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (adv-&gt;<a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a>)
    adv-&gt;<a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a>-&gt;<a class="code" href="structbgp__advertise.html#a648f13eb336131fcc6f0fe9daf99130c">prev</a> = adv-&gt;<a class="code" href="structbgp__advertise.html#a648f13eb336131fcc6f0fe9daf99130c">prev</a>;
  <span class="keywordflow">if</span> (adv-&gt;<a class="code" href="structbgp__advertise.html#a648f13eb336131fcc6f0fe9daf99130c">prev</a>)
    adv-&gt;<a class="code" href="structbgp__advertise.html#a648f13eb336131fcc6f0fe9daf99130c">prev</a>-&gt;<a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a> = adv-&gt;<a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a>;
  <span class="keywordflow">else</span>
    baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a8d6ce489199bacb90d0fc4088ce9cf56">adv</a> = adv-&gt;<a class="code" href="structbgp__advertise.html#af25c91252c451e42cc99ac4cbd63d354">next</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad6043ca16a0ed903dbf1ab85282ec91d"></a><!-- doxytag: member="bgp_advertise.c::bgp_advertise_free" ref="ad6043ca16a0ed903dbf1ab85282ec91d" args="(struct bgp_advertise *adv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_advertise_free </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a> *&#160;</td>
          <td class="paramname"><em>adv</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00094">94</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>)
    <a class="code" href="bgp__route_8c.html#a3616cc85cfe85d5f7911aa6f10f03eea">bgp_info_unlock</a> (adv-&gt;<a class="code" href="structbgp__advertise.html#aa28cbc24e7b76e2e2790754d12041147">binfo</a>); <span class="comment">/* bgp_advertise bgp_info reference */</span>
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3a8dc930d60d562b83d7558c95e5de14">MTYPE_BGP_ADVERTISE</a>, adv);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a098f21cf257aa81d21cdae2be64b5f31"></a><!-- doxytag: member="bgp_advertise.c::bgp_advertise_intern" ref="a098f21cf257aa81d21cdae2be64b5f31" args="(struct hash *hash, struct attr *attr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a>* bgp_advertise_intern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structhash.html">hash</a> *&#160;</td>
          <td class="paramname"><em>hash</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structattr.html">attr</a> *&#160;</td>
          <td class="paramname"><em>attr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00124">124</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> ref;
  <span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *baa;

  ref.<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a> = <a class="code" href="bgp__attr_8c.html#a791a2194bc7791b769c6ce55ac37b387">bgp_attr_intern</a> (attr);
  baa = (<span class="keyword">struct </span><a class="code" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *) <a class="code" href="hash_8c.html#ab0bb31bd6c883d6563930341dccedd22">hash_get</a> (hash, &amp;ref, <a class="code" href="bgp__advertise_8c.html#a43f7c3f0c2ef8ed3045eebc2ecaa962d">baa_hash_alloc</a>);
  baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a6373178947eaa884d0183bf7bffdfd2a">refcnt</a>++;

  <span class="keywordflow">return</span> baa;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a58ab65479e5f4991399f3e11e0aeb1ad"></a><!-- doxytag: member="bgp_advertise.c::bgp_advertise_new" ref="a58ab65479e5f4991399f3e11e0aeb1ad" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static struct <a class="el" href="structbgp__advertise.html">bgp_advertise</a>* bgp_advertise_new </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00087">87</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__advertise.html">bgp_advertise</a> *) 
    <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba3a8dc930d60d562b83d7558c95e5de14">MTYPE_BGP_ADVERTISE</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__advertise.html">bgp_advertise</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="af463f49af56e580001e83d7c420cd1af"></a><!-- doxytag: member="bgp_advertise.c::bgp_advertise_unintern" ref="af463f49af56e580001e83d7c420cd1af" args="(struct hash *hash, struct bgp_advertise_attr *baa)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void bgp_advertise_unintern </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structhash.html">hash</a> *&#160;</td>
          <td class="paramname"><em>hash</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structbgp__advertise__attr.html">bgp_advertise_attr</a> *&#160;</td>
          <td class="paramname"><em>baa</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00137">137</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a6373178947eaa884d0183bf7bffdfd2a">refcnt</a>)
    baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a6373178947eaa884d0183bf7bffdfd2a">refcnt</a>--;

  <span class="keywordflow">if</span> (baa-&gt;<a class="code" href="structbgp__advertise__attr.html#a6373178947eaa884d0183bf7bffdfd2a">refcnt</a> &amp;&amp; baa-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>)
    <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (baa-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>);
  <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (baa-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>)
    {
      <a class="code" href="hash_8c.html#a67f4f46ccd66f0b0c2a047eeb130c19e">hash_release</a> (hash, baa);
      <a class="code" href="bgp__attr_8c.html#a6b097d8a087a66ad0f7497cb355ef864">bgp_attr_unintern</a> (baa-&gt;<a class="code" href="structbgp__advertise__attr.html#ad410c65c1cae81ef63d0bfab847f501b">attr</a>);
    }
      <a class="code" href="bgp__advertise_8c.html#ade280b01bedf74289f88e3aca4a750bc">baa_free</a> (baa);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1a133356214b32e6d51aec071be79f1d"></a><!-- doxytag: member="bgp_advertise.c::bgp_sync_delete" ref="a1a133356214b32e6d51aec071be79f1d" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_sync_delete </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00401">401</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;

  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      {
    <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi])
      <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf1405019a71b50bd9e2247d5b45c7fd1">MTYPE_BGP_SYNCHRONISE</a>, peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi]);
    peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
    
    <span class="keywordflow">if</span> (peer-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi])
      <a class="code" href="hash_8c.html#ad0d6074e4b7475f7c249212bb8e67de5">hash_free</a> (peer-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi]);
    peer-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi] = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
      }
}
</pre></div>
</div>
</div>
<a class="anchor" id="acc82ab213ba4b510000b2da360e1d347"></a><!-- doxytag: member="bgp_advertise.c::bgp_sync_init" ref="acc82ab213ba4b510000b2da360e1d347" args="(struct peer *peer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bgp_sync_init </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structpeer.html">peer</a> *&#160;</td>
          <td class="paramname"><em>peer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="bgp__advertise_8c_source.html#l00381">381</a> of file <a class="el" href="bgp__advertise_8c_source.html">bgp_advertise.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi;
  <a class="code" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi;
  <span class="keyword">struct </span><a class="code" href="structbgp__synchronize.html">bgp_synchronize</a> *sync;

  <span class="keywordflow">for</span> (afi = <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>; afi &lt; <a class="code" href="zebra_8h.html#abf129a17e985713a26a6181a198d5f1a">AFI_MAX</a>; afi++)
    <span class="keywordflow">for</span> (safi = <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>; safi &lt; <a class="code" href="zebra_8h.html#a82fe6f63e822f7bf9e4567873d809ed8">SAFI_MAX</a>; safi++)
      {
    sync = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167baf1405019a71b50bd9e2247d5b45c7fd1">MTYPE_BGP_SYNCHRONISE</a>, 
                    <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structbgp__synchronize.html">bgp_synchronize</a>));
    <a class="code" href="zebra_8h.html#a48431bda33e3b4aa79176c8024e69b45">FIFO_INIT</a> (&amp;sync-&gt;<a class="code" href="structbgp__synchronize.html#a4d72efed4ff648f7b9f681103318f5b2">update</a>);
    <a class="code" href="zebra_8h.html#a48431bda33e3b4aa79176c8024e69b45">FIFO_INIT</a> (&amp;sync-&gt;<a class="code" href="structbgp__synchronize.html#ae10cb18981e171ca7306fad64e830c26">withdraw</a>);
    <a class="code" href="zebra_8h.html#a48431bda33e3b4aa79176c8024e69b45">FIFO_INIT</a> (&amp;sync-&gt;<a class="code" href="structbgp__synchronize.html#a0d2b66173a0ee4567807124e92dc5c35">withdraw_low</a>);
    peer-&gt;<a class="code" href="structpeer.html#a0eabe48a5941fe6387aa29d24d8c35eb">sync</a>[afi][safi] = sync;
    peer-&gt;<a class="code" href="structpeer.html#a6089b27eb3dedd57f030c6c29f6b6cf0">hash</a>[afi][safi] = <a class="code" href="hash_8c.html#af8af448ae70e3d3b1fe45295b5e8fb78">hash_create</a> (<a class="code" href="bgp__advertise_8c.html#a024c3ed3c20c0c1e209cbfbd8ef5c4e3">baa_hash_key</a>, <a class="code" href="bgp__advertise_8c.html#aa0647daa6f29a221e51c4637ff74a096">baa_hash_cmp</a>);
      }
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="bgp__advertise_8c.html">bgp_advertise.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
