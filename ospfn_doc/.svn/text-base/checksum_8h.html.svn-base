<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/checksum.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('checksum_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">lib/checksum.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="checksum_8h__dep__incl.png" border="0" usemap="#lib_2checksum_8hdep" alt=""/></div>
<map name="lib_2checksum_8hdep" id="lib_2checksum_8hdep">
<area shape="rect" id="node3" href="isis__lsp_8c.html" title="isisd/isis_lsp.c" alt="" coords="5,80,115,107"/><area shape="rect" id="node5" href="isis__pdu_8c.html" title="isisd/isis_pdu.c" alt="" coords="139,80,253,107"/><area shape="rect" id="node7" href="iso__checksum_8c.html" title="isisd/iso_checksum.c" alt="" coords="277,80,427,107"/><area shape="rect" id="node9" href="checksum_8c.html" title="lib/checksum.c" alt="" coords="451,80,561,107"/><area shape="rect" id="node11" href="ospf__lsa_8c.html" title="ospfd/ospf_lsa.c" alt="" coords="587,80,709,107"/><area shape="rect" id="node13" href="ospf__packet_8c.html" title="ospfd/ospf_packet.c" alt="" coords="733,80,880,107"/><area shape="rect" id="node15" href="test-checksum_8c.html" title="tests/test&#45;checksum.c" alt="" coords="905,80,1063,107"/></map>
</div>
</div>
<p><a href="checksum_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="checksum_8h.html#a83dc5cd39bc430492ed285427b9c1718">in_cksum</a> (void *, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u_int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="checksum_8h.html#adb5c685152b2e30c115d145e4a7db265">fletcher_checksum</a> (u_char *, const size_t len, const uint16_t offset)</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="adb5c685152b2e30c115d145e4a7db265"></a><!-- doxytag: member="checksum.h::fletcher_checksum" ref="adb5c685152b2e30c115d145e4a7db265" args="(u_char *, const size_t len, const uint16_t offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u_int16_t fletcher_checksum </td>
          <td>(</td>
          <td class="paramtype">u_char *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="checksum_8c_source.html#l00055">55</a> of file <a class="el" href="checksum_8c_source.html">checksum.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_int8_t *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>, <a class="code" href="spgrid_8c.html#a04ee6b20e6d3476ab1f51397993cfeef">y</a>, <a class="code" href="test-checksum_8c.html#ac18b3d0edccb2b9062a09d00b0d8b83b">c0</a>, <a class="code" href="test-checksum_8c.html#a8f9aca421a560153a31ebb326da34216">c1</a>;
  u_int16_t <a class="code" href="isis__pdu_8h.html#ac478e851f3af12545631aadafc9932ed">checksum</a>;
  u_int16_t *csum;
  <span class="keywordtype">size_t</span> partial_len, <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>, <a class="code" href="dict_8c.html#a428f8207615465afdfcf1d31547ffef3">left</a> = len;
  
  checksum = 0;

  <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (offset &lt; len);

  <span class="comment">/*</span>
<span class="comment">   * Zero the csum in the packet.</span>
<span class="comment">   */</span>
  csum = (u_int16_t *) (<a class="code" href="structbuffer.html">buffer</a> + offset);
  *(csum) = 0;

  p = <a class="code" href="structbuffer.html">buffer</a>;
  c0 = 0;
  c1 = 0;

  <span class="keywordflow">while</span> (left != 0)
    {
      partial_len = <a class="code" href="regex_8c.html#a3acffbd305ee72dcd4593c0d8af64a4f">MIN</a>(left, <a class="code" href="checksum_8c.html#a11e929bea3766df0637b90580e8865fc">MODX</a>);

      <span class="keywordflow">for</span> (i = 0; i &lt; partial_len; i++)
    {
      c0 = c0 + *(p++);
      c1 += c0;
    }

      c0 = c0 % 255;
      c1 = c1 % 255;

      left -= partial_len;
    }
  
  <span class="comment">/* The cast is important, to ensure the mod is taken as a signed value. */</span>
  x = (int)((len - offset - 1) * c0 - c1) % 255;

  <span class="keywordflow">if</span> (x &lt;= 0)
    x += 255;
  y = 510 - c0 - <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>;
  <span class="keywordflow">if</span> (y &gt; 255)  
    y -= 255;
  
  <span class="comment">/*</span>
<span class="comment">   * Now we write this to the packet.</span>
<span class="comment">   * We could skip this step too, since the checksum returned would</span>
<span class="comment">   * be stored into the checksum field by the caller.</span>
<span class="comment">   */</span>
  <a class="code" href="structbuffer.html">buffer</a>[offset] = <a class="code" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>;
  <a class="code" href="structbuffer.html">buffer</a>[offset + 1] = <a class="code" href="spgrid_8c.html#a04ee6b20e6d3476ab1f51397993cfeef">y</a>;

  <span class="comment">/* Take care of the endian issue */</span>
  checksum = htons((x &lt;&lt; 8) | (y &amp; 0xFF));

  <span class="keywordflow">return</span> <a class="code" href="isis__pdu_8h.html#ac478e851f3af12545631aadafc9932ed">checksum</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a83dc5cd39bc430492ed285427b9c1718"></a><!-- doxytag: member="checksum.h::in_cksum" ref="a83dc5cd39bc430492ed285427b9c1718" args="(void *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int in_cksum </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="checksum_8c_source.html#l00013">13</a> of file <a class="el" href="checksum_8c_source.html">checksum.c</a>.</p>
<div class="fragment"><pre class="fragment">{
    u_short *ptr = parg;
    <span class="keyword">register</span> <span class="keywordtype">long</span>       sum;        <span class="comment">/* assumes long == 32 bits */</span>
    u_short         oddbyte;
    <span class="keyword">register</span> u_short    answer;     <span class="comment">/* assumes u_short == 16 bits */</span>

    <span class="comment">/*</span>
<span class="comment">     * Our algorithm is simple, using a 32-bit accumulator (sum),</span>
<span class="comment">     * we add sequential 16-bit words to it, and at the end, fold back</span>
<span class="comment">     * all the carry bits from the top 16 bits into the lower 16 bits.</span>
<span class="comment">     */</span>

    sum = 0;
    <span class="keywordflow">while</span> (nbytes &gt; 1)  {
        sum += *ptr++;
        nbytes -= 2;
    }

                <span class="comment">/* mop up an odd byte, if necessary */</span>
    <span class="keywordflow">if</span> (nbytes == 1) {
        oddbyte = 0;        <span class="comment">/* make sure top half is zero */</span>
        *((u_char *) &amp;oddbyte) = *(u_char *)ptr;   <span class="comment">/* one byte only */</span>
        sum += oddbyte;
    }

    <span class="comment">/*</span>
<span class="comment">     * Add back carry outs from top 16 bits to low 16 bits.</span>
<span class="comment">     */</span>

    sum  = (sum &gt;&gt; 16) + (sum &amp; 0xffff);    <span class="comment">/* add high-16 to low-16 */</span>
    sum += (sum &gt;&gt; 16);         <span class="comment">/* add carry */</span>
    answer = ~sum;      <span class="comment">/* ones-complement, then truncate to 16 bits */</span>
    <span class="keywordflow">return</span>(answer);
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="checksum_8h.html">checksum.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:21 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
