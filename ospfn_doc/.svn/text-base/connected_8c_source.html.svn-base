<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/connected.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('connected_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">zebra/connected.c</div>  </div>
</div>
<div class="contents">
<a href="connected_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Address linked list routine.</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 1997, 98 Kunihiro Ishiguro</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify it</span>
<a name="l00008"></a>00008 <span class="comment"> * under the terms of the GNU General Public License as published by the</span>
<a name="l00009"></a>00009 <span class="comment"> * Free Software Foundation; either version 2, or (at your option) any</span>
<a name="l00010"></a>00010 <span class="comment"> * later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment"> * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00020"></a>00020 <span class="comment"> * 02111-1307, USA.  </span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="linklist_8h.html">linklist.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="if_8h.html">if.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="rib_8h.html">rib.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="table_8h.html">table.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="zserv_8h.html">zebra/zserv.h</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="redistribute_8h.html">zebra/redistribute.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="interface_8h.html">zebra/interface.h</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="connected_8h.html">zebra/connected.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structzebra__t.html">zebra_t</a> <a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>;
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">/* withdraw a connected address */</span>
<a name="l00041"></a>00041 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00042"></a><a class="code" href="connected_8c.html#ade33cfec6cfd4fabdf634b4eabfbadae">00042</a> <a class="code" href="connected_8c.html#ade33cfec6cfd4fabdf634b4eabfbadae">connected_withdraw</a> (<span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044   <span class="keywordflow">if</span> (! ifc)
<a name="l00045"></a>00045     <span class="keywordflow">return</span>;
<a name="l00046"></a>00046 
<a name="l00047"></a>00047   <span class="comment">/* Update interface address information to protocol daemon. */</span>
<a name="l00048"></a>00048   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>))
<a name="l00049"></a>00049     {
<a name="l00050"></a>00050       <a class="code" href="redistribute_8c.html#addd2b7659a8107bc9d2edcc026579bf9">zebra_interface_address_delete_update</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>, ifc);
<a name="l00051"></a>00051 
<a name="l00052"></a>00052       <a class="code" href="interface_8c.html#a5a3e0e346081affe4ee0af2ebcaaa792">if_subnet_delete</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>, ifc);
<a name="l00053"></a>00053       
<a name="l00054"></a>00054       <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l00055"></a>00055         <a class="code" href="connected_8c.html#afe7cbd92c89db253135714c882edd102">connected_down_ipv4</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>, ifc);
<a name="l00056"></a>00056 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span>      <span class="keywordflow">else</span>
<a name="l00058"></a>00058         connected_down_ipv6 (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>, ifc);
<a name="l00059"></a>00059 <span class="preprocessor">#endif</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span>
<a name="l00061"></a>00061       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>);
<a name="l00062"></a>00062     }
<a name="l00063"></a>00063 
<a name="l00064"></a>00064   <span class="keywordflow">if</span> (!<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a4c3561e2d67366e175998d69dbc87874">ZEBRA_IFC_CONFIGURED</a>))
<a name="l00065"></a>00065     {
<a name="l00066"></a>00066       <a class="code" href="linklist_8c.html#a8cbdaa18db1ceacaadbc457a0c634e02">listnode_delete</a> (ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, ifc);
<a name="l00067"></a>00067       <a class="code" href="if_8c.html#aefcfc40d0358af75f26135eb0a33903d">connected_free</a> (ifc);
<a name="l00068"></a>00068     }
<a name="l00069"></a>00069 }
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00072"></a><a class="code" href="connected_8c.html#a2fb6a8b89c82be98496572aeda543605">00072</a> <a class="code" href="connected_8c.html#a2fb6a8b89c82be98496572aeda543605">connected_announce</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074   <span class="keywordflow">if</span> (!ifc)
<a name="l00075"></a>00075     <span class="keywordflow">return</span>;
<a name="l00076"></a>00076   
<a name="l00077"></a>00077   <a class="code" href="linklist_8c.html#adb2a0478aba995441aaf691d1f6fe5db">listnode_add</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, ifc);
<a name="l00078"></a>00078 
<a name="l00079"></a>00079   <span class="comment">/* Update interface address information to protocol daemon. */</span>
<a name="l00080"></a>00080   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>))
<a name="l00081"></a>00081     {
<a name="l00082"></a>00082       <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l00083"></a>00083         <a class="code" href="interface_8c.html#a3d8abd4dd5d153b9501fe5f132dcf2e9">if_subnet_add</a> (ifp, ifc);
<a name="l00084"></a>00084 
<a name="l00085"></a>00085       <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087       <a class="code" href="redistribute_8c.html#a094cff05de325b272858866f09358058">zebra_interface_address_add_update</a> (ifp, ifc);
<a name="l00088"></a>00088 
<a name="l00089"></a>00089       <span class="keywordflow">if</span> (<a class="code" href="if_8c.html#a96741fba2059f7591f57d18325664b7b">if_is_operative</a>(ifp))
<a name="l00090"></a>00090         {
<a name="l00091"></a>00091           <span class="keywordflow">if</span> (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a> == AF_INET)
<a name="l00092"></a>00092         <a class="code" href="connected_8c.html#a281f3e4ee7aa4eb5b74fc7d6205afbcb">connected_up_ipv4</a> (ifp, ifc);
<a name="l00093"></a>00093 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span>          <span class="keywordflow">else</span>
<a name="l00095"></a>00095             connected_up_ipv6 (ifp, ifc);
<a name="l00096"></a>00096 <span class="preprocessor">#endif</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span>        }
<a name="l00098"></a>00098     }
<a name="l00099"></a>00099 }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 <span class="comment">/* If same interface address is already exist... */</span>
<a name="l00102"></a>00102 <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *
<a name="l00103"></a><a class="code" href="connected_8h.html#a579a660baf543f84fc3abc5a99de1cee">00103</a> <a class="code" href="connected_8c.html#a579a660baf543f84fc3abc5a99de1cee">connected_check</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00104"></a>00104 {
<a name="l00105"></a>00105   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l00106"></a>00106   <span class="keyword">struct </span><a class="code" href="structlistnode.html">listnode</a> *node;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108   <span class="keywordflow">for</span> (<a class="code" href="linklist_8h.html#a80a3f4035be83abbb709d17412993226">ALL_LIST_ELEMENTS_RO</a> (ifp-&gt;<a class="code" href="structinterface.html#ac7c47b5cc1df81e51bf1ecea97b4d4b3">connected</a>, node, ifc))
<a name="l00109"></a>00109     <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>, p))
<a name="l00110"></a>00110       <span class="keywordflow">return</span> ifc;
<a name="l00111"></a>00111 
<a name="l00112"></a>00112   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00113"></a>00113 }
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 <span class="comment">/* Check if two ifc&#39;s describe the same address */</span>
<a name="l00116"></a>00116 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00117"></a><a class="code" href="connected_8c.html#ae1c3982d8ddbdf3cb130d2e94004a876">00117</a> <a class="code" href="connected_8c.html#ae1c3982d8ddbdf3cb130d2e94004a876">connected_same</a> (<span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc1, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc2)
<a name="l00118"></a>00118 {
<a name="l00119"></a>00119   <span class="keywordflow">if</span> (ifc1-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a> != ifc2-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>)
<a name="l00120"></a>00120     <span class="keywordflow">return</span> 0;
<a name="l00121"></a>00121   
<a name="l00122"></a>00122   <span class="keywordflow">if</span> (ifc1-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>)
<a name="l00123"></a>00123     <span class="keywordflow">if</span> (!ifc2-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>)
<a name="l00124"></a>00124       <span class="keywordflow">return</span> 0;
<a name="l00125"></a>00125   <span class="keywordflow">if</span> (ifc2-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>)
<a name="l00126"></a>00126     <span class="keywordflow">if</span> (!ifc1-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>)
<a name="l00127"></a>00127       <span class="keywordflow">return</span> 0;
<a name="l00128"></a>00128   
<a name="l00129"></a>00129   <span class="keywordflow">if</span> (ifc1-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a> &amp;&amp; ifc2-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>)
<a name="l00130"></a>00130     <span class="keywordflow">if</span> (!<a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (ifc1-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>, ifc2-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>))
<a name="l00131"></a>00131       <span class="keywordflow">return</span> 0;
<a name="l00132"></a>00132 
<a name="l00133"></a>00133   <span class="keywordflow">if</span> (ifc1-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a> != ifc2-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>)
<a name="l00134"></a>00134     <span class="keywordflow">return</span> 0;
<a name="l00135"></a>00135   
<a name="l00136"></a>00136   <span class="keywordflow">return</span> 1;
<a name="l00137"></a>00137 }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 <span class="comment">/* Handle implicit withdrawals of addresses, where a system ADDs an address</span>
<a name="l00140"></a>00140 <span class="comment"> * to an interface which already has the same address configured.</span>
<a name="l00141"></a>00141 <span class="comment"> *</span>
<a name="l00142"></a>00142 <span class="comment"> * Returns the struct connected which must be announced to clients,</span>
<a name="l00143"></a>00143 <span class="comment"> * or NULL if nothing to do.</span>
<a name="l00144"></a>00144 <span class="comment"> */</span>
<a name="l00145"></a>00145 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *
<a name="l00146"></a><a class="code" href="connected_8c.html#ab02e67f09f7b5d364947720842f4f32f">00146</a> <a class="code" href="connected_8c.html#ab02e67f09f7b5d364947720842f4f32f">connected_implicit_withdraw</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00147"></a>00147 {
<a name="l00148"></a>00148   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *current;
<a name="l00149"></a>00149   
<a name="l00150"></a>00150   <span class="comment">/* Check same connected route. */</span>
<a name="l00151"></a>00151   <span class="keywordflow">if</span> ((current = <a class="code" href="connected_8c.html#a579a660baf543f84fc3abc5a99de1cee">connected_check</a> (ifp, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a>)))
<a name="l00152"></a>00152     {
<a name="l00153"></a>00153       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(current-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a4c3561e2d67366e175998d69dbc87874">ZEBRA_IFC_CONFIGURED</a>))
<a name="l00154"></a>00154         <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a>(ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a4c3561e2d67366e175998d69dbc87874">ZEBRA_IFC_CONFIGURED</a>);
<a name="l00155"></a>00155     
<a name="l00156"></a>00156       <span class="comment">/* Avoid spurious withdraws, this might be just the kernel &#39;reflecting&#39;</span>
<a name="l00157"></a>00157 <span class="comment">       * back an address we have already added.</span>
<a name="l00158"></a>00158 <span class="comment">       */</span>
<a name="l00159"></a>00159       <span class="keywordflow">if</span> (<a class="code" href="connected_8c.html#ae1c3982d8ddbdf3cb130d2e94004a876">connected_same</a> (current, ifc) &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(current-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>))
<a name="l00160"></a>00160         {
<a name="l00161"></a>00161           <span class="comment">/* nothing to do */</span>
<a name="l00162"></a>00162           <a class="code" href="if_8c.html#aefcfc40d0358af75f26135eb0a33903d">connected_free</a> (ifc);
<a name="l00163"></a>00163           <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00164"></a>00164         }
<a name="l00165"></a>00165       
<a name="l00166"></a>00166       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a>(current-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a4c3561e2d67366e175998d69dbc87874">ZEBRA_IFC_CONFIGURED</a>);
<a name="l00167"></a>00167       <a class="code" href="connected_8c.html#ade33cfec6cfd4fabdf634b4eabfbadae">connected_withdraw</a> (current); <span class="comment">/* implicit withdraw - freebsd does this */</span>
<a name="l00168"></a>00168     }
<a name="l00169"></a>00169   <span class="keywordflow">return</span> ifc;
<a name="l00170"></a>00170 }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment">/* Called from if_up(). */</span>
<a name="l00173"></a>00173 <span class="keywordtype">void</span>
<a name="l00174"></a><a class="code" href="connected_8h.html#a60645a8b55980692e33ae6f382424d39">00174</a> <a class="code" href="connected_8c.html#a281f3e4ee7aa4eb5b74fc7d6205afbcb">connected_up_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00175"></a>00175 {
<a name="l00176"></a>00176   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00177"></a>00177 
<a name="l00178"></a>00178   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>))
<a name="l00179"></a>00179     <span class="keywordflow">return</span>;
<a name="l00180"></a>00180 
<a name="l00181"></a>00181   <a class="code" href="prefix_8h.html#acd8595e70861e22a9f8277bca3535aed">PREFIX_COPY_IPV4</a>(&amp;p, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
<a name="l00182"></a>00182 
<a name="l00183"></a>00183   <span class="comment">/* Apply mask to the network. */</span>
<a name="l00184"></a>00184   <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;p);
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   <span class="comment">/* In case of connected address is 0.0.0.0/0 we treat it tunnel</span>
<a name="l00187"></a>00187 <span class="comment">     address. */</span>
<a name="l00188"></a>00188   <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a042562296bf8a9715da2d77fb226ab25">prefix_ipv4_any</a> (&amp;p))
<a name="l00189"></a>00189     <span class="keywordflow">return</span>;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191   <a class="code" href="rib_8h.html#a9f8cbb8feedf49125b4da9b87c36fedb">rib_add_ipv4</a> (<a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>, 0, &amp;p, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>,
<a name="l00192"></a>00192     <a class="code" href="zebra_8h.html#a905cf7650e977e4fec30736f4984507a">RT_TABLE_MAIN</a>, ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a>, 0);
<a name="l00193"></a>00193 
<a name="l00194"></a>00194   <a class="code" href="rib_8h.html#ab5320729fbebc97fbb79a214f5d370d8">rib_update</a> ();
<a name="l00195"></a>00195 }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="comment">/* Add connected IPv4 route to the interface. */</span>
<a name="l00198"></a>00198 <span class="keywordtype">void</span>
<a name="l00199"></a><a class="code" href="connected_8h.html#adfdf8a147f3057eebc9854c50f65d65b">00199</a> <a class="code" href="connected_8c.html#adfdf8a147f3057eebc9854c50f65d65b">connected_add_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>, <span class="keyword">struct</span> in_addr *addr, 
<a name="l00200"></a>00200             u_char <a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, <span class="keyword">struct</span> in_addr *broad, 
<a name="l00201"></a>00201             <span class="keyword">const</span> <span class="keywordtype">char</span> *label)
<a name="l00202"></a>00202 {
<a name="l00203"></a>00203   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00204"></a>00204   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l00205"></a>00205 
<a name="l00206"></a>00206   <span class="comment">/* Make connected structure. */</span>
<a name="l00207"></a>00207   ifc = <a class="code" href="if_8c.html#a3f0f3d92c824863a40af915d7f540cc5">connected_new</a> ();
<a name="l00208"></a>00208   ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a> = <a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>;
<a name="l00209"></a>00209   ifc-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a> = <a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>;
<a name="l00210"></a>00210 
<a name="l00211"></a>00211   <span class="comment">/* Allocate new connected address. */</span>
<a name="l00212"></a>00212   p = <a class="code" href="prefix_8c.html#af674876d8d874e88225f559322d797ac">prefix_ipv4_new</a> ();
<a name="l00213"></a>00213   p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00214"></a>00214   p-&gt;prefix = *addr;
<a name="l00215"></a>00215   p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = prefixlen;
<a name="l00216"></a>00216   ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a> = (<span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *) p;
<a name="l00217"></a>00217   
<a name="l00218"></a>00218   <span class="comment">/* If there is broadcast or peer address. */</span>
<a name="l00219"></a>00219   <span class="keywordflow">if</span> (broad)
<a name="l00220"></a>00220     {
<a name="l00221"></a>00221       p = <a class="code" href="prefix_8c.html#af674876d8d874e88225f559322d797ac">prefix_ipv4_new</a> ();
<a name="l00222"></a>00222       p-&gt;<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00223"></a>00223       p-&gt;prefix = *broad;
<a name="l00224"></a>00224       p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = <a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l00225"></a>00225       ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a> = (<span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *) p;
<a name="l00226"></a>00226 
<a name="l00227"></a>00227       <span class="comment">/* validate the destination address */</span>
<a name="l00228"></a>00228       <span class="keywordflow">if</span> (<a class="code" href="if_8h.html#a2443297a4d8f44cc5d2ce38fcbf345f2">CONNECTED_PEER</a>(ifc))
<a name="l00229"></a>00229         {
<a name="l00230"></a>00230       <span class="keywordflow">if</span> (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a>(addr,broad))
<a name="l00231"></a>00231         <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;warning: interface %s has same local and peer &quot;</span>
<a name="l00232"></a>00232               <span class="stringliteral">&quot;address %s, routing protocols may malfunction&quot;</span>,
<a name="l00233"></a>00233               ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,inet_ntoa(*addr));
<a name="l00234"></a>00234         }
<a name="l00235"></a>00235       <span class="keywordflow">else</span>
<a name="l00236"></a>00236         {
<a name="l00237"></a>00237       <span class="keywordflow">if</span> (broad-&gt;s_addr != <a class="code" href="prefix_8c.html#a0416c71ab42c828a9ee8ee82ddda6a77">ipv4_broadcast_addr</a>(addr-&gt;s_addr,prefixlen))
<a name="l00238"></a>00238         {
<a name="l00239"></a>00239           <span class="keywordtype">char</span> buf[2][<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
<a name="l00240"></a>00240           <span class="keyword">struct </span>in_addr bcalc;
<a name="l00241"></a>00241           bcalc.s_addr = <a class="code" href="prefix_8c.html#a0416c71ab42c828a9ee8ee82ddda6a77">ipv4_broadcast_addr</a>(addr-&gt;s_addr,prefixlen);
<a name="l00242"></a>00242           <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;warning: interface %s broadcast addr %s/%d != &quot;</span>
<a name="l00243"></a>00243                 <span class="stringliteral">&quot;calculated %s, routing protocols may malfunction&quot;</span>,
<a name="l00244"></a>00244                 ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,
<a name="l00245"></a>00245             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, broad, buf[0], <span class="keyword">sizeof</span>(buf[0])),
<a name="l00246"></a>00246             prefixlen,
<a name="l00247"></a>00247             <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;bcalc, buf[1], <span class="keyword">sizeof</span>(buf[1])));
<a name="l00248"></a>00248         }
<a name="l00249"></a>00249         }
<a name="l00250"></a>00250 
<a name="l00251"></a>00251     }
<a name="l00252"></a>00252   <span class="keywordflow">else</span>
<a name="l00253"></a>00253     {
<a name="l00254"></a>00254       <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(ifc-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>, <a class="code" href="if_8h.html#aa84309c25e4cee681e361d14404618e9">ZEBRA_IFA_PEER</a>))
<a name="l00255"></a>00255         {
<a name="l00256"></a>00256       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;warning: %s called for interface %s &quot;</span>
<a name="l00257"></a>00257             <span class="stringliteral">&quot;with peer flag set, but no peer address supplied&quot;</span>,
<a name="l00258"></a>00258             __func__, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00259"></a>00259       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a>(ifc-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>, <a class="code" href="if_8h.html#aa84309c25e4cee681e361d14404618e9">ZEBRA_IFA_PEER</a>);
<a name="l00260"></a>00260     }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262       <span class="comment">/* no broadcast or destination address was supplied */</span>
<a name="l00263"></a>00263       <span class="keywordflow">if</span> ((prefixlen == <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>) &amp;&amp; <a class="code" href="if_8c.html#a61aed2ccc7ec47d6822546664ea77f0c">if_is_pointopoint</a>(ifp))
<a name="l00264"></a>00264     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;warning: PtP interface %s with addr %s/%d needs a &quot;</span>
<a name="l00265"></a>00265           <span class="stringliteral">&quot;peer address&quot;</span>,ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>,inet_ntoa(*addr),prefixlen);
<a name="l00266"></a>00266     }
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   <span class="comment">/* Label of this address. */</span>
<a name="l00269"></a>00269   <span class="keywordflow">if</span> (label)
<a name="l00270"></a>00270     ifc-&gt;<a class="code" href="structconnected.html#abf60adc50689971ec30b6161150ffd2c">label</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bac8ad972fdcb4d318c2a41f564e0ee1de">MTYPE_CONNECTED_LABEL</a>, label);
<a name="l00271"></a>00271 
<a name="l00272"></a>00272   <span class="comment">/* nothing to do? */</span>
<a name="l00273"></a>00273   <span class="keywordflow">if</span> ((ifc = <a class="code" href="connected_8c.html#ab02e67f09f7b5d364947720842f4f32f">connected_implicit_withdraw</a> (ifp, ifc)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00274"></a>00274     <span class="keywordflow">return</span>;
<a name="l00275"></a>00275   
<a name="l00276"></a>00276   <a class="code" href="connected_8c.html#a2fb6a8b89c82be98496572aeda543605">connected_announce</a> (ifp, ifc);
<a name="l00277"></a>00277 }
<a name="l00278"></a>00278 
<a name="l00279"></a>00279 <span class="keywordtype">void</span>
<a name="l00280"></a><a class="code" href="connected_8h.html#a10ffc9d144aa75891aafd7f7f5d78f7a">00280</a> <a class="code" href="connected_8c.html#afe7cbd92c89db253135714c882edd102">connected_down_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00281"></a>00281 {
<a name="l00282"></a>00282   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00283"></a>00283 
<a name="l00284"></a>00284   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>))
<a name="l00285"></a>00285     <span class="keywordflow">return</span>;
<a name="l00286"></a>00286 
<a name="l00287"></a>00287   <a class="code" href="prefix_8h.html#acd8595e70861e22a9f8277bca3535aed">PREFIX_COPY_IPV4</a>(&amp;p, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
<a name="l00288"></a>00288 
<a name="l00289"></a>00289   <span class="comment">/* Apply mask to the network. */</span>
<a name="l00290"></a>00290   <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (&amp;p);
<a name="l00291"></a>00291 
<a name="l00292"></a>00292   <span class="comment">/* In case of connected address is 0.0.0.0/0 we treat it tunnel</span>
<a name="l00293"></a>00293 <span class="comment">     address. */</span>
<a name="l00294"></a>00294   <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a042562296bf8a9715da2d77fb226ab25">prefix_ipv4_any</a> (&amp;p))
<a name="l00295"></a>00295     <span class="keywordflow">return</span>;
<a name="l00296"></a>00296 
<a name="l00297"></a>00297   <span class="comment">/* Same logic as for connected_up_ipv4(): push the changes into the head. */</span>
<a name="l00298"></a>00298   <a class="code" href="rib_8h.html#a71bb35924cbe7fc66195c1876c77bb44">rib_delete_ipv4</a> (<a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>, 0, &amp;p, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>, 0);
<a name="l00299"></a>00299 
<a name="l00300"></a>00300   <a class="code" href="rib_8h.html#ab5320729fbebc97fbb79a214f5d370d8">rib_update</a> ();
<a name="l00301"></a>00301 }
<a name="l00302"></a>00302 
<a name="l00303"></a>00303 <span class="comment">/* Delete connected IPv4 route to the interface. */</span>
<a name="l00304"></a>00304 <span class="keywordtype">void</span>
<a name="l00305"></a><a class="code" href="connected_8h.html#a751e06dc0752d03ac5c08c34b99d83f7">00305</a> <a class="code" href="connected_8c.html#a751e06dc0752d03ac5c08c34b99d83f7">connected_delete_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>, <span class="keyword">struct</span> in_addr *addr,
<a name="l00306"></a>00306                u_char <a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, <span class="keyword">struct</span> in_addr *broad)
<a name="l00307"></a>00307 {
<a name="l00308"></a>00308   <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> p;
<a name="l00309"></a>00309   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l00310"></a>00310 
<a name="l00311"></a>00311   memset (&amp;p, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
<a name="l00312"></a>00312   p.<a class="code" href="structprefix__ipv4.html#a3a879ea08458c4807130156f5f23dbc7">family</a> = AF_INET;
<a name="l00313"></a>00313   p.prefix = *addr;
<a name="l00314"></a>00314   p.<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a> = prefixlen;
<a name="l00315"></a>00315 
<a name="l00316"></a>00316   ifc = <a class="code" href="connected_8c.html#a579a660baf543f84fc3abc5a99de1cee">connected_check</a> (ifp, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00317"></a>00317   <span class="keywordflow">if</span> (! ifc)
<a name="l00318"></a>00318     <span class="keywordflow">return</span>;
<a name="l00319"></a>00319     
<a name="l00320"></a>00320   <a class="code" href="connected_8c.html#ade33cfec6cfd4fabdf634b4eabfbadae">connected_withdraw</a> (ifc);
<a name="l00321"></a>00321 
<a name="l00322"></a>00322   <a class="code" href="rib_8h.html#ab5320729fbebc97fbb79a214f5d370d8">rib_update</a>();
<a name="l00323"></a>00323 }
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00326"></a>00326 <span class="preprocessor"></span><span class="keywordtype">void</span>
<a name="l00327"></a>00327 connected_up_ipv6 (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00328"></a>00328 {
<a name="l00329"></a>00329   <span class="keyword">struct </span>prefix_ipv6 <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00330"></a>00330 
<a name="l00331"></a>00331   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>))
<a name="l00332"></a>00332     <span class="keywordflow">return</span>;
<a name="l00333"></a>00333 
<a name="l00334"></a>00334   PREFIX_COPY_IPV6(&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
<a name="l00335"></a>00335 
<a name="l00336"></a>00336   <span class="comment">/* Apply mask to the network. */</span>
<a name="l00337"></a>00337   apply_mask_ipv6 (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 <span class="preprocessor">#if ! defined (MUSICA) &amp;&amp; ! defined (LINUX)</span>
<a name="l00340"></a>00340 <span class="preprocessor"></span>  <span class="comment">/* XXX: It is already done by rib_bogus_ipv6 within rib_add_ipv6 */</span>
<a name="l00341"></a>00341   <span class="keywordflow">if</span> (IN6_IS_ADDR_UNSPECIFIED (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix))
<a name="l00342"></a>00342     <span class="keywordflow">return</span>;
<a name="l00343"></a>00343 <span class="preprocessor">#endif</span>
<a name="l00344"></a>00344 <span class="preprocessor"></span>
<a name="l00345"></a>00345   rib_add_ipv6 (<a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>, 0, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>, <a class="code" href="zebra_8h.html#a905cf7650e977e4fec30736f4984507a">RT_TABLE_MAIN</a>,
<a name="l00346"></a>00346                 ifp-&gt;<a class="code" href="structinterface.html#adbb7ad89b817a388e9442e85f1e72cc8">metric</a>, 0);
<a name="l00347"></a>00347 
<a name="l00348"></a>00348   <a class="code" href="rib_8h.html#ab5320729fbebc97fbb79a214f5d370d8">rib_update</a> ();
<a name="l00349"></a>00349 }
<a name="l00350"></a>00350 
<a name="l00351"></a>00351 <span class="comment">/* Add connected IPv6 route to the interface. */</span>
<a name="l00352"></a>00352 <span class="keywordtype">void</span>
<a name="l00353"></a>00353 connected_add_ipv6 (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keywordtype">int</span> <a class="code" href="structflags.html">flags</a>, <span class="keyword">struct</span> in6_addr *addr,
<a name="l00354"></a>00354             u_char prefixlen, <span class="keyword">struct</span> in6_addr *broad,
<a name="l00355"></a>00355             <span class="keyword">const</span> <span class="keywordtype">char</span> *label)
<a name="l00356"></a>00356 {
<a name="l00357"></a>00357   <span class="keyword">struct </span>prefix_ipv6 *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00358"></a>00358   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l00359"></a>00359 
<a name="l00360"></a>00360   <span class="comment">/* Make connected structure. */</span>
<a name="l00361"></a>00361   ifc = <a class="code" href="if_8c.html#a3f0f3d92c824863a40af915d7f540cc5">connected_new</a> ();
<a name="l00362"></a>00362   ifc-&gt;<a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a> = <a class="code" href="structconnected.html#a93c575385a71507f8c29ec26344d09d3">ifp</a>;
<a name="l00363"></a>00363   ifc-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a> = <a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>;
<a name="l00364"></a>00364 
<a name="l00365"></a>00365   <span class="comment">/* Allocate new connected address. */</span>
<a name="l00366"></a>00366   p = prefix_ipv6_new ();
<a name="l00367"></a>00367   p-&gt;family = AF_INET6;
<a name="l00368"></a>00368   <a class="code" href="prefix_8h.html#aea44c9c04fa7bd58457b572592d391a7">IPV6_ADDR_COPY</a> (&amp;p-&gt;prefix, addr);
<a name="l00369"></a>00369   p-&gt;prefixlen = prefixlen;
<a name="l00370"></a>00370   ifc-&gt;<a class="code" href="structconnected.html#a288d9248b21b8e3999e03ceaa9bb70db">address</a> = (<span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *) p;
<a name="l00371"></a>00371 
<a name="l00372"></a>00372   <span class="comment">/* If there is broadcast or peer address. */</span>
<a name="l00373"></a>00373   <span class="keywordflow">if</span> (broad)
<a name="l00374"></a>00374     {
<a name="l00375"></a>00375       <span class="keywordflow">if</span> (IN6_IS_ADDR_UNSPECIFIED(broad))
<a name="l00376"></a>00376     <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;warning: %s called for interface %s with unspecified &quot;</span>
<a name="l00377"></a>00377           <span class="stringliteral">&quot;destination address; ignoring!&quot;</span>, __func__, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00378"></a>00378       <span class="keywordflow">else</span>
<a name="l00379"></a>00379     {
<a name="l00380"></a>00380       p = prefix_ipv6_new ();
<a name="l00381"></a>00381       p-&gt;family = AF_INET6;
<a name="l00382"></a>00382       <a class="code" href="prefix_8h.html#aea44c9c04fa7bd58457b572592d391a7">IPV6_ADDR_COPY</a> (&amp;p-&gt;prefix, broad);
<a name="l00383"></a>00383       p-&gt;prefixlen = <a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>;
<a name="l00384"></a>00384       ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a> = (<span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *) p;
<a name="l00385"></a>00385     }
<a name="l00386"></a>00386     }
<a name="l00387"></a>00387   <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a>(ifc-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>, <a class="code" href="if_8h.html#aa84309c25e4cee681e361d14404618e9">ZEBRA_IFA_PEER</a>) &amp;&amp; !ifc-&gt;<a class="code" href="structconnected.html#ad13a382a19c45aaa4e5670e1422245ff">destination</a>)
<a name="l00388"></a>00388     {
<a name="l00389"></a>00389       <a class="code" href="log_8h.html#a4a2ed409bf1559d9ea3c664f70420df7">zlog_warn</a>(<span class="stringliteral">&quot;warning: %s called for interface %s &quot;</span>
<a name="l00390"></a>00390         <span class="stringliteral">&quot;with peer flag set, but no peer address supplied&quot;</span>,
<a name="l00391"></a>00391         __func__, ifp-&gt;<a class="code" href="structinterface.html#a98cadce768ec5aacb4c5fc4ca2c3eaa8">name</a>);
<a name="l00392"></a>00392       <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a>(ifc-&gt;<a class="code" href="structconnected.html#a5928e0378e95d422553fdd37c3d66519">flags</a>, <a class="code" href="if_8h.html#aa84309c25e4cee681e361d14404618e9">ZEBRA_IFA_PEER</a>);
<a name="l00393"></a>00393     }
<a name="l00394"></a>00394 
<a name="l00395"></a>00395   <span class="comment">/* Label of this address. */</span>
<a name="l00396"></a>00396   <span class="keywordflow">if</span> (label)
<a name="l00397"></a>00397     ifc-&gt;<a class="code" href="structconnected.html#abf60adc50689971ec30b6161150ffd2c">label</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bac8ad972fdcb4d318c2a41f564e0ee1de">MTYPE_CONNECTED_LABEL</a>, label);
<a name="l00398"></a>00398   
<a name="l00399"></a>00399   <span class="keywordflow">if</span> ((ifc = <a class="code" href="connected_8c.html#ab02e67f09f7b5d364947720842f4f32f">connected_implicit_withdraw</a> (ifp, ifc)) == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00400"></a>00400     <span class="keywordflow">return</span>;
<a name="l00401"></a>00401   
<a name="l00402"></a>00402   <a class="code" href="connected_8c.html#a2fb6a8b89c82be98496572aeda543605">connected_announce</a> (ifp, ifc);
<a name="l00403"></a>00403 }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 <span class="keywordtype">void</span>
<a name="l00406"></a>00406 connected_down_ipv6 (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> <a class="code" href="structconnected.html">connected</a> *ifc)
<a name="l00407"></a>00407 {
<a name="l00408"></a>00408   <span class="keyword">struct </span>prefix_ipv6 p;
<a name="l00409"></a>00409 
<a name="l00410"></a>00410   <span class="keywordflow">if</span> (! <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (ifc-&gt;<a class="code" href="structconnected.html#a5dce94fe72d07a6f2312b12a8a9f1312">conf</a>, <a class="code" href="if_8h.html#a56abda52e44cc999ccddf7b63bc14eca">ZEBRA_IFC_REAL</a>))
<a name="l00411"></a>00411     <span class="keywordflow">return</span>;
<a name="l00412"></a>00412 
<a name="l00413"></a>00413   PREFIX_COPY_IPV6(&amp;p, <a class="code" href="if_8h.html#aab0146ae87d1ab7ec3235003ad8ae4ff">CONNECTED_PREFIX</a>(ifc));
<a name="l00414"></a>00414 
<a name="l00415"></a>00415   apply_mask_ipv6 (&amp;p);
<a name="l00416"></a>00416 
<a name="l00417"></a>00417   <span class="keywordflow">if</span> (IN6_IS_ADDR_UNSPECIFIED (&amp;p.prefix))
<a name="l00418"></a>00418     <span class="keywordflow">return</span>;
<a name="l00419"></a>00419 
<a name="l00420"></a>00420   rib_delete_ipv6 (<a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>, 0, &amp;p, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, ifp-&gt;<a class="code" href="structinterface.html#ae4c4a0eca6642e37e29e1177a39872ea">ifindex</a>, 0);
<a name="l00421"></a>00421 
<a name="l00422"></a>00422   <a class="code" href="rib_8h.html#ab5320729fbebc97fbb79a214f5d370d8">rib_update</a> ();
<a name="l00423"></a>00423 }
<a name="l00424"></a>00424 
<a name="l00425"></a>00425 <span class="keywordtype">void</span>
<a name="l00426"></a>00426 connected_delete_ipv6 (<span class="keyword">struct</span> <a class="code" href="structinterface.html">interface</a> *ifp, <span class="keyword">struct</span> in6_addr *address,
<a name="l00427"></a>00427                u_char prefixlen, <span class="keyword">struct</span> in6_addr *broad)
<a name="l00428"></a>00428 {
<a name="l00429"></a>00429   <span class="keyword">struct </span>prefix_ipv6 p;
<a name="l00430"></a>00430   <span class="keyword">struct </span><a class="code" href="structconnected.html">connected</a> *ifc;
<a name="l00431"></a>00431   
<a name="l00432"></a>00432   memset (&amp;p, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> prefix_ipv6));
<a name="l00433"></a>00433   p.family = AF_INET6;
<a name="l00434"></a>00434   <a class="code" href="regex_8c.html#aed653b4838032a2c5ce8960421c8cfd7">memcpy</a> (&amp;p.prefix, address, sizeof (<span class="keyword">struct</span> in6_addr));
<a name="l00435"></a>00435   p.prefixlen = prefixlen;
<a name="l00436"></a>00436 
<a name="l00437"></a>00437   ifc = <a class="code" href="connected_8c.html#a579a660baf543f84fc3abc5a99de1cee">connected_check</a> (ifp, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;p);
<a name="l00438"></a>00438   <span class="keywordflow">if</span> (! ifc)
<a name="l00439"></a>00439     <span class="keywordflow">return</span>;
<a name="l00440"></a>00440 
<a name="l00441"></a>00441   <a class="code" href="connected_8c.html#ade33cfec6cfd4fabdf634b4eabfbadae">connected_withdraw</a> (ifc);
<a name="l00442"></a>00442 
<a name="l00443"></a>00443   <a class="code" href="rib_8h.html#ab5320729fbebc97fbb79a214f5d370d8">rib_update</a>();
<a name="l00444"></a>00444 }
<a name="l00445"></a>00445 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="connected_8c.html">connected.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:09 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
