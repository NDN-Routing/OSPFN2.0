<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: zebra/rib.h File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('rib_8h.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">zebra/rib.h File Reference</div>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="prefix_8h_source.html">prefix.h</a>&quot;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for rib.h:</div>
<div class="dyncontent">
<div class="center"><img src="rib_8h__incl.png" border="0" usemap="#zebra_2rib_8h" alt=""/></div>
<map name="zebra_2rib_8h" id="zebra_2rib_8h">
<area shape="rect" id="node3" href="prefix_8h.html" title="prefix.h" alt="" coords="18,80,85,107"/><area shape="rect" id="node5" href="sockunion_8h.html" title="sockunion.h" alt="" coords="5,155,99,181"/></map>
</div>
</div><div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><img src="rib_8h__dep__incl.png" border="0" usemap="#zebra_2rib_8hdep" alt=""/></div>
<map name="zebra_2rib_8hdep" id="zebra_2rib_8hdep">
<area shape="rect" id="node3" href="bgp__nexthop_8c.html" title="bgpd/bgp_nexthop.c" alt="" coords="1411,155,1561,181"/><area shape="rect" id="node5" href="connected_8c.html" title="zebra/connected.c" alt="" coords="2290,304,2424,331"/><area shape="rect" id="node7" href="interface_8c.html" title="zebra/interface.c" alt="" coords="1288,379,1411,405"/><area shape="rect" id="node9" href="zserv_8h.html" title="zebra/zserv.h" alt="" coords="1991,80,2092,107"/><area shape="rect" id="node28" href="ioctl_8c.html" title="zebra/ioctl.c" alt="" coords="454,304,548,331"/><area shape="rect" id="node30" href="ioctl__solaris_8c.html" title="zebra/ioctl_solaris.c" alt="" coords="288,304,429,331"/><area shape="rect" id="node32" href="kernel__socket_8c.html" title="zebra/kernel_socket.c" alt="" coords="2113,304,2265,331"/><area shape="rect" id="node36" href="rt__netlink_8c.html" title="zebra/rt_netlink.c" alt="" coords="1137,304,1260,331"/><area shape="rect" id="node38" href="rtadv_8c.html" title="zebra/rtadv.c" alt="" coords="2218,379,2317,405"/><area shape="rect" id="node43" href="zebra_2main_8c.html" title="zebra/main.c" alt="" coords="2730,379,2827,405"/><area shape="rect" id="node47" href="test__main_8c.html" title="zebra/test_main.c" alt="" coords="2611,304,2740,331"/><area shape="rect" id="node51" href="redistribute_8c.html" title="zebra/redistribute.c" alt="" coords="2500,229,2639,256"/><area shape="rect" id="node53" href="redistribute__null_8c.html" title="zebra/redistribute_null.c" alt="" coords="1937,229,2103,256"/><area shape="rect" id="node55" href="router-id_8c.html" title="zebra/router&#45;id.c" alt="" coords="2127,229,2248,256"/><area shape="rect" id="node58" href="zebra__rib_8c.html" title="zebra/zebra_rib.c" alt="" coords="885,229,1008,256"/><area shape="rect" id="node60" href="zserv_8c.html" title="zebra/zserv.c" alt="" coords="2273,229,2375,256"/><area shape="rect" id="node68" href="rt__ioctl_8c.html" title="zebra/rt_ioctl.c" alt="" coords="1113,155,1223,181"/><area shape="rect" id="node72" href="rtread__getmsg_8c.html" title="zebra/rtread_getmsg.c" alt="" coords="2409,155,2567,181"/><area shape="rect" id="node74" href="rtread__proc_8c.html" title="zebra/rtread_proc.c" alt="" coords="1248,155,1387,181"/><area shape="rect" id="node80" href="zebra__routemap_8c.html" title="zebra/zebra_routemap.c" alt="" coords="2591,155,2757,181"/><area shape="rect" id="node82" href="zebra__vty_8c.html" title="zebra/zebra_vty.c" alt="" coords="2783,155,2911,181"/><area shape="rect" id="node86" href="ioctl__null_8c.html" title="zebra/ioctl_null.c" alt="" coords="245,155,368,181"/><area shape="rect" id="node94" href="rt_8h.html" title="zebra/rt.h" alt="" coords="665,80,743,107"/><area shape="rect" id="node104" href="rt__socket_8c.html" title="zebra/rt_socket.c" alt="" coords="790,155,916,181"/><area shape="rect" id="node14" href="redistribute_8h.html" title="zebra/redistribute.h" alt="" coords="1840,155,1979,181"/><area shape="rect" id="node49" href="kernel__null_8c.html" title="zebra/kernel_null.c" alt="" coords="1379,229,1511,256"/><area shape="rect" id="node76" href="rtread__sysctl_8c.html" title="zebra/rtread_sysctl.c" alt="" coords="941,155,1088,181"/><area shape="rect" id="node18" href="interface_8h.html" title="zebra/interface.h" alt="" coords="1637,229,1760,256"/><area shape="rect" id="node21" href="if__ioctl_8c.html" title="zebra/if_ioctl.c" alt="" coords="1387,304,1496,331"/><area shape="rect" id="node23" href="if__ioctl__solaris_8c.html" title="zebra/if_ioctl_solaris.c" alt="" coords="1520,304,1675,331"/><area shape="rect" id="node25" href="if__proc_8c.html" title="zebra/if_proc.c" alt="" coords="1699,304,1809,331"/><area shape="rect" id="node34" href="misc__null_8c.html" title="zebra/misc_null.c" alt="" coords="1855,379,1979,405"/><area shape="rect" id="node40" href="rtadv_8h.html" title="zebra/rtadv.h" alt="" coords="1937,304,2036,331"/><area shape="rect" id="node96" href="if__sysctl_8c.html" title="zebra/if_sysctl.c" alt="" coords="595,155,713,181"/></map>
</div>
</div>
<p><a href="rib_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">union &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uniong__addr.html">g_addr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structrib.html">rib</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmeta__queue.html">meta_queue</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structstatic__ipv4.html">static_ipv4</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structnexthop.html">nexthop</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structvrf.html">vrf</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#af53fc226f7c81662b2e161657cb2dc00">DISTANCE_INFINITY</a>&#160;&#160;&#160;255</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#aea31606e81f9791653c985b725c53c87">RIB_ROUTE_QUEUED</a>(<a class="el" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>)&#160;&#160;&#160;(1 &lt;&lt; (<a class="el" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>))</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>&#160;&#160;&#160;(1 &lt;&lt; 0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a75e6d7c7e954860072172f01abb2212c">MQ_SIZE</a>&#160;&#160;&#160;5</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a80b1bbdc2394a381d4edbbad9b855157">STATIC_IPV4_IFNAME</a>&#160;&#160;&#160;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a77364d968fe135da7ecaa185e1c9f27f">STATIC_IPV4_BLACKHOLE</a>&#160;&#160;&#160;3</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>&#160;&#160;&#160;(1 &lt;&lt; 0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>&#160;&#160;&#160;(1 &lt;&lt; 1)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>&#160;&#160;&#160;(1 &lt;&lt; 2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a6e154a5f58f1f82beb1d5d4872f61176">ZEBRA_RIB_LOOKUP_ERROR</a>&#160;&#160;&#160;-1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a3a4f094d5db63d16353294cac5ce2939">ZEBRA_RIB_FOUND_EXACT</a>&#160;&#160;&#160;0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a7dca43fe20de4c7ec983e753a2770eca">ZEBRA_RIB_FOUND_NOGATE</a>&#160;&#160;&#160;1</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a290672d06c3ac72507581e01b0355f54">ZEBRA_RIB_FOUND_CONNECTED</a>&#160;&#160;&#160;2</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#ac8f2bdecdacfca74686e2c2be8c4d06c">ZEBRA_RIB_NOTFOUND</a>&#160;&#160;&#160;3</td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158">nexthop_types_t</a> { <br/>
&#160;&#160;<a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a> =  1, 
<a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>, 
<a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>, 
<a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>, 
<br/>
&#160;&#160;<a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ade3f7c373a6291ced38ce796b8a493c9">NEXTHOP_TYPE_IPV4_IFNAME</a>, 
<a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>, 
<a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>, 
<a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>, 
<br/>
&#160;&#160;<a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a51979bee7d8d924ca294821391134aea">NEXTHOP_TYPE_BLACKHOLE</a>
<br/>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a353881daf608ea5c55ea9282db8400a7">nexthop_ifindex_add</a> (struct <a class="el" href="structrib.html">rib</a> *, unsigned int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a1bd34e462c0b31150dd8b182ff88f29c">nexthop_ifname_add</a> (struct <a class="el" href="structrib.html">rib</a> *, char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#af0dfa3aee7ea3fbc982a713e3fe2bdca">nexthop_blackhole_add</a> (struct <a class="el" href="structrib.html">rib</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structnexthop.html">nexthop</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a66650034d36f49d2e5ca51bf9557fae5">nexthop_ipv4_add</a> (struct <a class="el" href="structrib.html">rib</a> *, struct in_addr *, struct in_addr *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#adc61871284bbff9f70de52e3b1399347">rib_lookup_and_dump</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#ac0c04ebf660391255470e731e17ed5e8">rib_lookup_and_pushup</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a4bc4f0dec614afac167a2be0cc3c24e1">rib_dump</a> (const char *, const struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *, const struct <a class="el" href="structrib.html">rib</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#adcea093692973a8a89f900090dd98efa">rib_lookup_ipv4_route</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *, union <a class="el" href="unionsockunion.html">sockunion</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structvrf.html">vrf</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a16a6947a4bdd7614efaae35900ebf07c">vrf_lookup</a> (u_int32_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structroute__table.html">route_table</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a9b4cfde2cd5b67f8c8b63f566352e2aa">vrf_static_table</a> (<a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a> safi, u_int32_t <a class="el" href="prefix_8h.html#a68c0ada54c6414ef00bca919465286ac">id</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a9f8cbb8feedf49125b4da9b87c36fedb">rib_add_ipv4</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int <a class="el" href="structflags.html">flags</a>, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct in_addr *gate, struct in_addr *src, unsigned int ifindex, u_int32_t vrf_id, u_int32_t, u_char)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a730ebabb9135b68be0a8bddb851244bb">rib_add_ipv4_multipath</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *, struct <a class="el" href="structrib.html">rib</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a71bb35924cbe7fc66195c1876c77bb44">rib_delete_ipv4</a> (int <a class="el" href="ripng__zebra_8c.html#ac765329451135abec74c45e1897abf26">type</a>, int <a class="el" href="structflags.html">flags</a>, struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct in_addr *gate, unsigned int ifindex, u_int32_t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structrib.html">rib</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#ad56c7b150bda5ea14d6252e5de7a97d1">rib_match_ipv4</a> (struct in_addr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structrib.html">rib</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a14646df48fa35374b0dfe2a303690626">rib_lookup_ipv4</a> (struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#ab5320729fbebc97fbb79a214f5d370d8">rib_update</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a6f66a4098fb6d18a02fa91e62e395169">rib_weed_tables</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a75571cb0f6ed48267739d55e20c6722f">rib_sweep_route</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a2017dc3c35367f4cf655b8d6ea238c3d">rib_close</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a986c298135d292e5c66e02a12a9419ae">rib_init</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a44bb955baa5782ba016fbc81c9810927">static_add_ipv4</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct in_addr *gate, const char *ifname, u_char <a class="el" href="structflags.html">flags</a>, u_char <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>, u_int32_t vrf_id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="rib_8h.html#a680270ecb5a14879953840c281d92fe8">static_delete_ipv4</a> (struct <a class="el" href="structprefix.html">prefix</a> *<a class="el" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, struct in_addr *gate, const char *ifname, u_char <a class="el" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>, u_int32_t vrf_id)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="af53fc226f7c81662b2e161657cb2dc00"></a><!-- doxytag: member="rib.h::DISTANCE_INFINITY" ref="af53fc226f7c81662b2e161657cb2dc00" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DISTANCE_INFINITY&#160;&#160;&#160;255</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00028">28</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a75e6d7c7e954860072172f01abb2212c"></a><!-- doxytag: member="rib.h::MQ_SIZE" ref="a75e6d7c7e954860072172f01abb2212c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MQ_SIZE&#160;&#160;&#160;5</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00093">93</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4c37713e2a4a901b74d72b0eaebc4881"></a><!-- doxytag: member="rib.h::NEXTHOP_FLAG_ACTIVE" ref="a4c37713e2a4a901b74d72b0eaebc4881" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define NEXTHOP_FLAG_ACTIVE&#160;&#160;&#160;(1 &lt;&lt; 0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00187">187</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7df095eb80d2cbf19093cbe09fcfcf77"></a><!-- doxytag: member="rib.h::NEXTHOP_FLAG_FIB" ref="a7df095eb80d2cbf19093cbe09fcfcf77" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define NEXTHOP_FLAG_FIB&#160;&#160;&#160;(1 &lt;&lt; 1)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00188">188</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a585dd0f97f24bb17e3994a720a5c7037"></a><!-- doxytag: member="rib.h::NEXTHOP_FLAG_RECURSIVE" ref="a585dd0f97f24bb17e3994a720a5c7037" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define NEXTHOP_FLAG_RECURSIVE&#160;&#160;&#160;(1 &lt;&lt; 2)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00189">189</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae89535688c62ebde01900966447c1738"></a><!-- doxytag: member="rib.h::RIB_ENTRY_REMOVED" ref="ae89535688c62ebde01900966447c1738" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define RIB_ENTRY_REMOVED&#160;&#160;&#160;(1 &lt;&lt; 0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00078">78</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="aea31606e81f9791653c985b725c53c87"></a><!-- doxytag: member="rib.h::RIB_ROUTE_QUEUED" ref="aea31606e81f9791653c985b725c53c87" args="(x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define RIB_ROUTE_QUEUED</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><a class="el" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a></td><td>)</td>
          <td>&#160;&#160;&#160;(1 &lt;&lt; (<a class="el" href="spgrid_8c.html#a3162ada50d1df39e0f0555ea3d60dea1">x</a>))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00043">43</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a77364d968fe135da7ecaa185e1c9f27f"></a><!-- doxytag: member="rib.h::STATIC_IPV4_BLACKHOLE" ref="a77364d968fe135da7ecaa185e1c9f27f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STATIC_IPV4_BLACKHOLE&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00114">114</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a214a388953e710152811e4933c9b4f57"></a><!-- doxytag: member="rib.h::STATIC_IPV4_GATEWAY" ref="a214a388953e710152811e4933c9b4f57" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STATIC_IPV4_GATEWAY&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00112">112</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a80b1bbdc2394a381d4edbbad9b855157"></a><!-- doxytag: member="rib.h::STATIC_IPV4_IFNAME" ref="a80b1bbdc2394a381d4edbbad9b855157" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define STATIC_IPV4_IFNAME&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00113">113</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a290672d06c3ac72507581e01b0355f54"></a><!-- doxytag: member="rib.h::ZEBRA_RIB_FOUND_CONNECTED" ref="a290672d06c3ac72507581e01b0355f54" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ZEBRA_RIB_FOUND_CONNECTED&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00235">235</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a3a4f094d5db63d16353294cac5ce2939"></a><!-- doxytag: member="rib.h::ZEBRA_RIB_FOUND_EXACT" ref="a3a4f094d5db63d16353294cac5ce2939" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ZEBRA_RIB_FOUND_EXACT&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00233">233</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7dca43fe20de4c7ec983e753a2770eca"></a><!-- doxytag: member="rib.h::ZEBRA_RIB_FOUND_NOGATE" ref="a7dca43fe20de4c7ec983e753a2770eca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ZEBRA_RIB_FOUND_NOGATE&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00234">234</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6e154a5f58f1f82beb1d5d4872f61176"></a><!-- doxytag: member="rib.h::ZEBRA_RIB_LOOKUP_ERROR" ref="a6e154a5f58f1f82beb1d5d4872f61176" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ZEBRA_RIB_LOOKUP_ERROR&#160;&#160;&#160;-1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00232">232</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac8f2bdecdacfca74686e2c2be8c4d06c"></a><!-- doxytag: member="rib.h::ZEBRA_RIB_NOTFOUND" ref="ac8f2bdecdacfca74686e2c2be8c4d06c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ZEBRA_RIB_NOTFOUND&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="rib_8h_source.html#l00236">236</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="a0db77aa28c8e805e8621931fd0385158"></a><!-- doxytag: member="rib.h::nexthop_types_t" ref="a0db77aa28c8e805e8621931fd0385158" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158">nexthop_types_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9"></a><!-- doxytag: member="NEXTHOP_TYPE_IFINDEX" ref="a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9" args="" -->NEXTHOP_TYPE_IFINDEX</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb"></a><!-- doxytag: member="NEXTHOP_TYPE_IFNAME" ref="a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb" args="" -->NEXTHOP_TYPE_IFNAME</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0"></a><!-- doxytag: member="NEXTHOP_TYPE_IPV4" ref="a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0" args="" -->NEXTHOP_TYPE_IPV4</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba"></a><!-- doxytag: member="NEXTHOP_TYPE_IPV4_IFINDEX" ref="a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba" args="" -->NEXTHOP_TYPE_IPV4_IFINDEX</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a0db77aa28c8e805e8621931fd0385158ade3f7c373a6291ced38ce796b8a493c9"></a><!-- doxytag: member="NEXTHOP_TYPE_IPV4_IFNAME" ref="a0db77aa28c8e805e8621931fd0385158ade3f7c373a6291ced38ce796b8a493c9" args="" -->NEXTHOP_TYPE_IPV4_IFNAME</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e"></a><!-- doxytag: member="NEXTHOP_TYPE_IPV6" ref="a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e" args="" -->NEXTHOP_TYPE_IPV6</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1"></a><!-- doxytag: member="NEXTHOP_TYPE_IPV6_IFINDEX" ref="a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1" args="" -->NEXTHOP_TYPE_IPV6_IFINDEX</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699"></a><!-- doxytag: member="NEXTHOP_TYPE_IPV6_IFNAME" ref="a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699" args="" -->NEXTHOP_TYPE_IPV6_IFNAME</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a0db77aa28c8e805e8621931fd0385158a51979bee7d8d924ca294821391134aea"></a><!-- doxytag: member="NEXTHOP_TYPE_BLACKHOLE" ref="a0db77aa28c8e805e8621931fd0385158a51979bee7d8d924ca294821391134aea" args="" -->NEXTHOP_TYPE_BLACKHOLE</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="rib_8h_source.html#l00161">161</a> of file <a class="el" href="rib_8h_source.html">rib.h</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a> = 1,      <span class="comment">/* Directly connected.  */</span>
  <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>,           <span class="comment">/* Interface route.  */</span>
  <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>,             <span class="comment">/* IPv4 nexthop.  */</span>
  <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a3147798b072558593867a8772925d9ba">NEXTHOP_TYPE_IPV4_IFINDEX</a>,     <span class="comment">/* IPv4 nexthop with ifindex.  */</span>
  <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ade3f7c373a6291ced38ce796b8a493c9">NEXTHOP_TYPE_IPV4_IFNAME</a>,      <span class="comment">/* IPv4 nexthop with ifname.  */</span>
  <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158ac5d9d9abcf5e9eb0342ca06bcfd3717e">NEXTHOP_TYPE_IPV6</a>,             <span class="comment">/* IPv6 nexthop.  */</span>
  <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9c94ccbc5fd921c831e5cb4758b225b1">NEXTHOP_TYPE_IPV6_IFINDEX</a>,     <span class="comment">/* IPv6 nexthop with ifindex.  */</span>
  <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a23e6cc72074db622f54c6756a87d3699">NEXTHOP_TYPE_IPV6_IFNAME</a>,      <span class="comment">/* IPv6 nexthop with ifname.  */</span>
  <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a51979bee7d8d924ca294821391134aea">NEXTHOP_TYPE_BLACKHOLE</a>,        <span class="comment">/* Null0 nexthop.  */</span>
};
</pre></div>
</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="af0dfa3aee7ea3fbc982a713e3fe2bdca"></a><!-- doxytag: member="rib.h::nexthop_blackhole_add" ref="af0dfa3aee7ea3fbc982a713e3fe2bdca" args="(struct rib *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnexthop.html">nexthop</a>* nexthop_blackhole_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00295">295</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
  nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a51979bee7d8d924ca294821391134aea">NEXTHOP_TYPE_BLACKHOLE</a>;
  <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (<a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#ab3b7a4bd090244ae1b882b9003810713">ZEBRA_FLAG_BLACKHOLE</a>);

  <a class="code" href="zebra__rib_8c.html#a99f2fc0d1d8343989db03b5d06072070">nexthop_add</a> (<a class="code" href="structrib.html">rib</a>, nexthop);

  <span class="keywordflow">return</span> nexthop;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a353881daf608ea5c55ea9282db8400a7"></a><!-- doxytag: member="rib.h::nexthop_ifindex_add" ref="a353881daf608ea5c55ea9282db8400a7" args="(struct rib *, unsigned int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnexthop.html">nexthop</a>* nexthop_ifindex_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00185">185</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
  nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a>;
  nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> = <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>;

  <a class="code" href="zebra__rib_8c.html#a99f2fc0d1d8343989db03b5d06072070">nexthop_add</a> (<a class="code" href="structrib.html">rib</a>, nexthop);

  <span class="keywordflow">return</span> nexthop;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1bd34e462c0b31150dd8b182ff88f29c"></a><!-- doxytag: member="rib.h::nexthop_ifname_add" ref="a1bd34e462c0b31150dd8b182ff88f29c" args="(struct rib *, char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnexthop.html">nexthop</a>* nexthop_ifname_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00199">199</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
  nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158aa12d01eb5d47a34e54792bb02c81dbcb">NEXTHOP_TYPE_IFNAME</a>;
  nexthop-&gt;<a class="code" href="structnexthop.html#a66af3f237417d5a411d4eb6fe6c8c23d">ifname</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (0, <a class="code" href="structnexthop.html#a66af3f237417d5a411d4eb6fe6c8c23d">ifname</a>);

  <a class="code" href="zebra__rib_8c.html#a99f2fc0d1d8343989db03b5d06072070">nexthop_add</a> (<a class="code" href="structrib.html">rib</a>, nexthop);

  <span class="keywordflow">return</span> nexthop;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a66650034d36f49d2e5ca51bf9557fae5"></a><!-- doxytag: member="rib.h::nexthop_ipv4_add" ref="a66650034d36f49d2e5ca51bf9557fae5" args="(struct rib *, struct in_addr *, struct in_addr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structnexthop.html">nexthop</a>* nexthop_ipv4_add </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00213">213</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  nexthop = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167bae1a512e3b11233998f3f836c4b882016">MTYPE_NEXTHOP</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> nexthop));
  nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> = <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a9909d19d3bd1cf79727d0c809424d1e0">NEXTHOP_TYPE_IPV4</a>;
  nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a> = *ipv4;
  <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>)
    nexthop-&gt;<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a> = *<a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>;

  <a class="code" href="zebra__rib_8c.html#a99f2fc0d1d8343989db03b5d06072070">nexthop_add</a> (<a class="code" href="structrib.html">rib</a>, nexthop);

  <span class="keywordflow">return</span> nexthop;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9f8cbb8feedf49125b4da9b87c36fedb"></a><!-- doxytag: member="rib.h::rib_add_ipv4" ref="a9f8cbb8feedf49125b4da9b87c36fedb" args="(int type, int flags, struct prefix_ipv4 *p, struct in_addr *gate, struct in_addr *src, unsigned int ifindex, u_int32_t vrf_id, u_int32_t, u_char)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rib_add_ipv4 </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>vrf_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01492">1492</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keyword">struct </span>rib *same = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Make it sure prefixlen is applied to the prefix. */</span>
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (p);

  <span class="comment">/* Set default distance by route type. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> == 0)
    {
      <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> = <a class="code" href="zebra__rib_8c.html#a2cb61c6ddc0de037d5a1fda1d8e55bd9">route_info</a>[<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>].distance;

      <span class="comment">/* iBGP distance is 200. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a> &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structflags.html">flags</a>, <a class="code" href="zebra_8h.html#a49dfa659951c25dc0784165a6083546b">ZEBRA_FLAG_IBGP</a>))
    <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> = 200;
    }

  <span class="comment">/* Lookup route node.*/</span>
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);

  <span class="comment">/* If same type of route are installed, treat it as a implicit</span>
<span class="comment">     withdraw. */</span>
  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;
      
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> != <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
        {
          same = rib;
          <span class="keywordflow">break</span>;
        }
      <span class="comment">/* Duplicate connected route comes in. */</span>
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>) &amp;&amp;
           nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a> &amp;&amp;
           nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> == <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> &amp;&amp;
           !<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
    {
      rib-&gt;<a class="code" href="structrib.html#ae1ce68ac123ad51159b7ca596a409991">refcnt</a>++;
      <span class="keywordflow">return</span> 0 ;
    }
    }

  <span class="comment">/* Allocate new rib structure. */</span>
  rib = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba0ef14e77de1f08268d0d2c19603d1d67">MTYPE_RIB</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> rib));
  rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  rib-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a> = <a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>;
  rib-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a> = <a class="code" href="structmetric.html">metric</a>;
  rib-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a> = vrf_id;
  rib-&gt;<a class="code" href="structrib.html#aa62ee3a10f0312f560d530c299953506">nexthop_num</a> = 0;
  rib-&gt;<a class="code" href="structrib.html#ac4bc4479d273ecf626dfee778825bc5b">uptime</a> = time (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);

  <span class="comment">/* Nexthop settings. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>)
    <a class="code" href="zebra__rib_8c.html#a5285f34431a774eac5345224a7899d17">nexthop_ipv4_ifindex_add</a> (rib, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>, <a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>, <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
      <span class="keywordflow">else</span>
    <a class="code" href="rib_8h.html#a66650034d36f49d2e5ca51bf9557fae5">nexthop_ipv4_add</a> (rib, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>, <a class="code" href="structnexthop.html#ac60200501fb60e37f0cf3ab7fa553f7c">src</a>);
    }
  <span class="keywordflow">else</span>
    <a class="code" href="rib_8h.html#a353881daf608ea5c55ea9282db8400a7">nexthop_ifindex_add</a> (rib, <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);

  <span class="comment">/* If this route is kernel route, set FIB flag to the route. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a> || <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
    <span class="keywordflow">for</span> (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);

  <span class="comment">/* Link new rib to node.*/</span>
  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: calling rib_addnode (%p, %p)&quot;</span>, __func__, rn, rib);
  <a class="code" href="zebra__rib_8c.html#aa75c775e24cbb0c37df92dad710aae70">rib_addnode</a> (rn, rib);
  
  <span class="comment">/* Free implicit route.*/</span>
  <span class="keywordflow">if</span> (same)
  {
    <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: calling rib_delnode (%p, %p)&quot;</span>, __func__, rn, rib);
    <a class="code" href="zebra__rib_8c.html#a3342004bfa0237318b3c7856b922c804">rib_delnode</a> (rn, same);
  }
  
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a730ebabb9135b68be0a8bddb851244bb"></a><!-- doxytag: member="rib.h::rib_add_ipv4_multipath" ref="a730ebabb9135b68be0a8bddb851244bb" args="(struct prefix_ipv4 *, struct rib *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rib_add_ipv4_multipath </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01750">1750</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *same;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
  
  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;
  <span class="comment">/* Make it sure prefixlen is applied to the prefix. */</span>
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* Set default distance by route type. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> == 0)
    {
      <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> = <a class="code" href="zebra__rib_8c.html#a2cb61c6ddc0de037d5a1fda1d8e55bd9">route_info</a>[<a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a>].distance;

      <span class="comment">/* iBGP distance is 200. */</span>
      <span class="keywordflow">if</span> (<a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a> 
      &amp;&amp; <a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (<a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a49dfa659951c25dc0784165a6083546b">ZEBRA_FLAG_IBGP</a>))
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a> = 200;
    }

  <span class="comment">/* Lookup route node.*/</span>
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* If same type of route are installed, treat it as a implicit</span>
<span class="comment">     withdraw. */</span>
  <span class="keywordflow">for</span> (same = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; same; same = same-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (same-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;
      
      <span class="keywordflow">if</span> (same-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> &amp;&amp; same-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a> == <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a>
      &amp;&amp; same-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> != <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
        <span class="keywordflow">break</span>;
    }
  
  <span class="comment">/* If this route is kernel route, set FIB flag to the route. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a> || <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
    <span class="keywordflow">for</span> (nexthop = <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
      <a class="code" href="zebra_8h.html#a7c593725d5bbf27a37a922ae84b02333">SET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);

  <span class="comment">/* Link new rib to node.*/</span>
  <a class="code" href="zebra__rib_8c.html#aa75c775e24cbb0c37df92dad710aae70">rib_addnode</a> (rn, <a class="code" href="structrib.html">rib</a>);
  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
  {
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: called rib_addnode (%p, %p) on new RIB entry&quot;</span>,
      __func__, rn, <a class="code" href="structrib.html">rib</a>);
    <a class="code" href="rib_8h.html#a4bc4f0dec614afac167a2be0cc3c24e1">rib_dump</a> (__func__, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, <a class="code" href="structrib.html">rib</a>);
  }

  <span class="comment">/* Free implicit route.*/</span>
  <span class="keywordflow">if</span> (same)
  {
    <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
    {
      <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: calling rib_delnode (%p, %p) on existing RIB entry&quot;</span>,
        __func__, rn, same);
      <a class="code" href="rib_8h.html#a4bc4f0dec614afac167a2be0cc3c24e1">rib_dump</a> (__func__, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, same);
    }
    <a class="code" href="zebra__rib_8c.html#a3342004bfa0237318b3c7856b922c804">rib_delnode</a> (rn, same);
  }
  
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2017dc3c35367f4cf655b8d6ea238c3d"></a><!-- doxytag: member="rib.h::rib_close" ref="a2017dc3c35367f4cf655b8d6ea238c3d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_close </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02900">2900</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra__rib_8c.html#acb47ec38e01628d3758e94836e68aba9">rib_close_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
  <a class="code" href="zebra__rib_8c.html#acb47ec38e01628d3758e94836e68aba9">rib_close_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a71bb35924cbe7fc66195c1876c77bb44"></a><!-- doxytag: member="rib.h::rib_delete_ipv4" ref="a71bb35924cbe7fc66195c1876c77bb44" args="(int type, int flags, struct prefix_ipv4 *p, struct in_addr *gate, unsigned int ifindex, u_int32_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rib_delete_ipv4 </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>ifindex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01822">1822</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keyword">struct </span>rib *fib = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span>rib *same = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;
  <span class="keywordtype">char</span> buf1[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
  <span class="keywordtype">char</span> buf2[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Apply mask. */</span>
  <a class="code" href="prefix_8c.html#a24093dc2a781bf7f05d8a410899de5c0">apply_mask_ipv4</a> (p);

  <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a> &amp;&amp; <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>)
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;rib_delete_ipv4(): route delete %s/%d via %s ifindex %d&quot;</span>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>, 
               inet_ntoa (*<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>), 
               <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);

  <span class="comment">/* Lookup route node. */</span>
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) p);
  <span class="keywordflow">if</span> (! rn)
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;route %s/%d via %s ifindex %d doesn&#39;t exist in rib&quot;</span>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>, buf2, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
      <span class="keywordflow">else</span>
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;route %s/%d ifindex %d doesn&#39;t exist in rib&quot;</span>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
               <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>);
    }
      <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a58dc80805c425ed7b6b46364b2d84fac">ZEBRA_ERR_RTNOEXIST</a>;
    }

  <span class="comment">/* Lookup same type route. */</span>
  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;

      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
    fib = rib;

      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> != <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a> &amp;&amp; (nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>) &amp;&amp;
      nexthop-&gt;<a class="code" href="structnexthop.html#a2945ec57f56526f142592f4f578b4522">type</a> == <a class="code" href="rib_8h.html#a0db77aa28c8e805e8621931fd0385158a6e00834b26663ce5eb68fb6f7068b5c9">NEXTHOP_TYPE_IFINDEX</a> &amp;&amp; nexthop-&gt;<a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a> == <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>)
    {
      <span class="keywordflow">if</span> (rib-&gt;<a class="code" href="structrib.html#ae1ce68ac123ad51159b7ca596a409991">refcnt</a>)
        {
          rib-&gt;<a class="code" href="structrib.html#ae1ce68ac123ad51159b7ca596a409991">refcnt</a>--;
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
          <span class="keywordflow">return</span> 0;
        }
      same = rib;
      <span class="keywordflow">break</span>;
    }
      <span class="comment">/* Make sure that the route found has the same gateway. */</span>
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> ||
           ((nexthop = rib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>) &amp;&amp;
            (<a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>) ||
         <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (&amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>)))) 
        {
      same = rib;
      <span class="keywordflow">break</span>;
    }
    }

  <span class="comment">/* If same type of route can&#39;t be found and this message is from</span>
<span class="comment">     kernel. */</span>
  <span class="keywordflow">if</span> (! same)
    {
      <span class="keywordflow">if</span> (fib &amp;&amp; <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> == <a class="code" href="zebra_8h.html#a742710c29f8b3e8dc06ce7a5965c097c">ZEBRA_ROUTE_KERNEL</a>)
    {
      <span class="comment">/* Unset flags. */</span>
      <span class="keywordflow">for</span> (nexthop = fib-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
        <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>);

      <a class="code" href="zebra_8h.html#ab1ec1b6701a70280e13876cf1f6ae51d">UNSET_FLAG</a> (fib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a33a806e67d434f56a9660b78ef2fd198">IS_ZEBRA_DEBUG_KERNEL</a>)
        {
          <span class="keywordflow">if</span> (<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>)
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;route %s/%d via %s ifindex %d type %d doesn&#39;t exist in rib&quot;</span>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, <a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>, buf2, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>,
               <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);
          <span class="keywordflow">else</span>
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;route %s/%d ifindex %d type %d doesn&#39;t exist in rib&quot;</span>,
               <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;p-&gt;prefix, buf1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>),
               p-&gt;<a class="code" href="structprefix__ipv4.html#ab96da4bf1eb37195bd564bcf1126a16a">prefixlen</a>,
               <a class="code" href="structnexthop.html#a4bc2f1e33f239d2d817c205460a24daa">ifindex</a>,
               <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>);
        }
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">return</span> <a class="code" href="zebra_8h.html#a58dc80805c425ed7b6b46364b2d84fac">ZEBRA_ERR_RTNOEXIST</a>;
    }
    }
  
  <span class="keywordflow">if</span> (same)
    <a class="code" href="zebra__rib_8c.html#a3342004bfa0237318b3c7856b922c804">rib_delnode</a> (rn, same);
  
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4bc4f0dec614afac167a2be0cc3c24e1"></a><!-- doxytag: member="rib.h::rib_dump" ref="a4bc4f0dec614afac167a2be0cc3c24e1" args="(const char *, const struct prefix_ipv4 *, const struct rib *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_dump </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const struct <a class="el" href="structrib.html">rib</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01597">1597</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">char</span> straddr1[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>], straddr2[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix, straddr1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: dumping RIB entry %p for %s/%d&quot;</span>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>, <a class="code" href="structrib.html">rib</a>, straddr1, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen);
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
  (
    <span class="stringliteral">&quot;%s: refcnt == %lu, uptime == %lu, type == %u, table == %d&quot;</span>,
    <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>,
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#ae1ce68ac123ad51159b7ca596a409991">refcnt</a>,
    (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#ac4bc4479d273ecf626dfee778825bc5b">uptime</a>,
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a>,
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a3926f371eddda6867a341360ed483c50">table</a>
  );
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
  (
    <span class="stringliteral">&quot;%s: metric == %u, distance == %u, flags == %u, status == %u&quot;</span>,
    <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>,
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a76469a0c207c22af7e4e2b298cbb84cf">metric</a>,
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a019148eb7d950ca4be25faec0041b6eb">distance</a>,
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>,
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>
  );
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
  (
    <span class="stringliteral">&quot;%s: nexthop_num == %u, nexthop_active_num == %u, nexthop_fib_num == %u&quot;</span>,
    <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>,
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#aa62ee3a10f0312f560d530c299953506">nexthop_num</a>,
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#abe75551b41daecde649cb9864ef2dd01">nexthop_active_num</a>,
    <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#ab756a619c83f5bba3d0ebb4a54685621">nexthop_fib_num</a>
  );
  <span class="keywordflow">for</span> (nexthop = <a class="code" href="structrib.html">rib</a>-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
  {
    <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr, straddr1, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
    <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr, straddr2, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
    (
      <span class="stringliteral">&quot;%s: NH %s (%s) with flags %s%s%s&quot;</span>,
      <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>,
      straddr1,
      straddr2,
      (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a4c37713e2a4a901b74d72b0eaebc4881">NEXTHOP_FLAG_ACTIVE</a>) ? <span class="stringliteral">&quot;ACTIVE &quot;</span> : <span class="stringliteral">&quot;&quot;</span>),
      (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>) ? <span class="stringliteral">&quot;FIB &quot;</span> : <span class="stringliteral">&quot;&quot;</span>),
      (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a585dd0f97f24bb17e3994a720a5c7037">NEXTHOP_FLAG_RECURSIVE</a>) ? <span class="stringliteral">&quot;RECURSIVE&quot;</span> : <span class="stringliteral">&quot;&quot;</span>)
    );
  }
  <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: dump complete&quot;</span>, <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a986c298135d292e5c66e02a12a9419ae"></a><!-- doxytag: member="rib.h::rib_init" ref="a986c298135d292e5c66e02a12a9419ae" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02908">2908</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra__rib_8c.html#a7b63a78591841b39e864a07e69aeadc2">rib_queue_init</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>);
  <span class="comment">/* VRF initialization.  */</span>
  <a class="code" href="zebra__rib_8c.html#a2d01ff33ddb6cea2d5535584ebacbee2">vrf_init</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="adc61871284bbff9f70de52e3b1399347"></a><!-- doxytag: member="rib.h::rib_lookup_and_dump" ref="adc61871284bbff9f70de52e3b1399347" args="(struct prefix_ipv4 *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_lookup_and_dump </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01652">1652</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keywordtype">char</span> prefix_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
  {
    <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: vrf_table() returned NULL&quot;</span>, __func__);
    <span class="keywordflow">return</span>;
  }

  <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefix.s_addr, prefix_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
  <span class="comment">/* Scan the RIB table for exactly matching RIB entry. */</span>
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* No route for this prefix. */</span>
  <span class="keywordflow">if</span> (! rn)
  {
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: lookup failed for %s/%d&quot;</span>, __func__, prefix_buf, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>-&gt;prefixlen);
    <span class="keywordflow">return</span>;
  }

  <span class="comment">/* Unlock node. */</span>
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="comment">/* let&#39;s go */</span>
  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
  {
    <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a>
    (
      <span class="stringliteral">&quot;%s: rn %p, rib %p: %s, %s&quot;</span>,
      __func__,
      rn,
      rib,
      (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>) ? <span class="stringliteral">&quot;removed&quot;</span> : <span class="stringliteral">&quot;NOT removed&quot;</span>),
      (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>) ? <span class="stringliteral">&quot;selected&quot;</span> : <span class="stringliteral">&quot;NOT selected&quot;</span>)
    );
    <a class="code" href="rib_8h.html#a4bc4f0dec614afac167a2be0cc3c24e1">rib_dump</a> (__func__, <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, rib);
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac0c04ebf660391255470e731e17ed5e8"></a><!-- doxytag: member="rib.h::rib_lookup_and_pushup" ref="ac0c04ebf660391255470e731e17ed5e8" args="(struct prefix_ipv4 *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_lookup_and_pushup </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l01702">1702</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *<a class="code" href="structrib.html">rib</a>;
  <span class="keywordtype">unsigned</span> changed = 0;

  <span class="keywordflow">if</span> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> == (table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0)))
  {
    <a class="code" href="log_8h.html#aaf50b52a949696adb9e77153b08545ad">zlog_err</a> (<span class="stringliteral">&quot;%s: vrf_table() returned NULL&quot;</span>, __func__);
    <span class="keywordflow">return</span>;
  }

  <span class="comment">/* No matches would be the simplest case. */</span>
  <span class="keywordflow">if</span> (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> == (rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)))
    <span class="keywordflow">return</span>;

  <span class="comment">/* Unlock node. */</span>
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="comment">/* Check all RIB entries. In case any changes have to be done, requeue</span>
<span class="comment">   * the RN into RIBQ head. If the routing message about the new connected</span>
<span class="comment">   * route (generated by the IP address we are going to assign very soon)</span>
<span class="comment">   * comes before the RIBQ is processed, the new RIB entry will join</span>
<span class="comment">   * RIBQ record already on head. This is necessary for proper revalidation</span>
<span class="comment">   * of the rest of the RIB.</span>
<span class="comment">   */</span>
  <span class="keywordflow">for</span> (rib = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; rib; rib = rib-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
  {
    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (rib-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>) &amp;&amp;
      ! <a class="code" href="zebra__rib_8c.html#ac5581c6a3603e9d6e8219549c0acf31e">RIB_SYSTEM_ROUTE</a> (rib))
    {
      changed = 1;
      <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
      {
        <span class="keywordtype">char</span> buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
        <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>.<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
        <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: freeing way for connected prefix %s/%d&quot;</span>, __func__, buf, p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
        <a class="code" href="rib_8h.html#a4bc4f0dec614afac167a2be0cc3c24e1">rib_dump</a> (__func__, (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *)&amp;rn-&gt;<a class="code" href="structroute__node.html#ae6d28f3985e8e2a761c8e22bae5767eb">p</a>, rib);
      }
      <a class="code" href="zebra__rib_8c.html#a77c7b21fcae7ee4ec9a07b09b6dd26cf">rib_uninstall</a> (rn, rib);
    }
  }
  <span class="keywordflow">if</span> (changed)
    <a class="code" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>, rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a14646df48fa35374b0dfe2a303690626"></a><!-- doxytag: member="rib.h::rib_lookup_ipv4" ref="a14646df48fa35374b0dfe2a303690626" args="(struct prefix_ipv4 *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structrib.html">rib</a>* rib_lookup_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00576">576</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *match;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;

  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* No route for this prefix. */</span>
  <span class="keywordflow">if</span> (! rn)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="comment">/* Unlock node. */</span>
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="keywordflow">for</span> (match = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; match; match = match-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
    <span class="keywordflow">break</span>;
    }

  <span class="keywordflow">if</span> (! match || match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
    <span class="keywordflow">return</span> match;
  
  <span class="keywordflow">for</span> (nexthop = match-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>))
      <span class="keywordflow">return</span> match;

  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="adcea093692973a8a89f900090dd98efa"></a><!-- doxytag: member="rib.h::rib_lookup_ipv4_route" ref="adcea093692973a8a89f900090dd98efa" args="(struct prefix_ipv4 *, union sockunion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rib_lookup_ipv4_route </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix__ipv4.html">prefix_ipv4</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">union <a class="el" href="unionsockunion.html">sockunion</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00631">631</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *match;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *<a class="code" href="structnexthop.html">nexthop</a>;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#a6e154a5f58f1f82beb1d5d4872f61176">ZEBRA_RIB_LOOKUP_ERROR</a>;

  <span class="comment">/* Scan the RIB table for exactly matching RIB entry. */</span>
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="comment">/* No route for this prefix. */</span>
  <span class="keywordflow">if</span> (! rn)
    <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#ac8f2bdecdacfca74686e2c2be8c4d06c">ZEBRA_RIB_NOTFOUND</a>;

  <span class="comment">/* Unlock node. */</span>
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="comment">/* Find out if a &quot;selected&quot; RR for the discovered RIB entry exists ever. */</span>
  <span class="keywordflow">for</span> (match = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; match; match = match-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
    <span class="keywordflow">break</span>;
    }

  <span class="comment">/* None such found :( */</span>
  <span class="keywordflow">if</span> (!match)
    <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#ac8f2bdecdacfca74686e2c2be8c4d06c">ZEBRA_RIB_NOTFOUND</a>;

  <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
    <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#a290672d06c3ac72507581e01b0355f54">ZEBRA_RIB_FOUND_CONNECTED</a>;
  
  <span class="comment">/* Ok, we have a cood candidate, let&#39;s check it&#39;s nexthop list... */</span>
  <span class="keywordflow">for</span> (nexthop = match-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; nexthop; nexthop = nexthop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
    <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (nexthop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>))
    {
      <span class="comment">/* We are happy with either direct or recursive hexthop */</span>
      <span class="keywordflow">if</span> (nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr == qgate-&gt;sin.sin_addr.s_addr ||
          nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr == qgate-&gt;sin.sin_addr.s_addr)
        <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#a3a4f094d5db63d16353294cac5ce2939">ZEBRA_RIB_FOUND_EXACT</a>;
      <span class="keywordflow">else</span>
      {
        <span class="keywordflow">if</span> (<a class="code" href="debug_8h.html#a5a02ca7cbeffc38327da8ae638a81c31">IS_ZEBRA_DEBUG_RIB</a>)
        {
          <span class="keywordtype">char</span> gate_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>], rgate_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>], qgate_buf[<a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>];
          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;nexthop-&gt;<a class="code" href="structnexthop.html#af19e05e5dd51b578246ff51322b6b6dd">gate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr, gate_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;nexthop-&gt;<a class="code" href="structnexthop.html#aa401c5819c47323f95f25287ab4b8f4b">rgate</a>.<a class="code" href="uniong__addr.html#a3120e936e9b15510a8775865868a61d3">ipv4</a>.s_addr, rgate_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
          <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (AF_INET, &amp;qgate-&gt;sin.sin_addr.s_addr, qgate_buf, <a class="code" href="prefix_8h.html#a93b37007689284fd9c4bde1a8f4b9199">INET_ADDRSTRLEN</a>);
          <a class="code" href="log_8h.html#af1f70c8ab8e089840180553abf361296">zlog_debug</a> (<span class="stringliteral">&quot;%s: qgate == %s, gate == %s, rgate == %s&quot;</span>, __func__, qgate_buf, gate_buf, rgate_buf);
        }
        <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#a7dca43fe20de4c7ec983e753a2770eca">ZEBRA_RIB_FOUND_NOGATE</a>;
      }
    }

  <span class="keywordflow">return</span> <a class="code" href="rib_8h.html#ac8f2bdecdacfca74686e2c2be8c4d06c">ZEBRA_RIB_NOTFOUND</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad56c7b150bda5ea14d6252e5de7a97d1"></a><!-- doxytag: member="rib.h::rib_match_ipv4" ref="ad56c7b150bda5ea14d6252e5de7a97d1" args="(struct in_addr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structrib.html">rib</a>* rib_match_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct in_addr&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00514">514</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structrib.html">rib</a> *match;
  <span class="keyword">struct </span><a class="code" href="structnexthop.html">nexthop</a> *newhop;

  <span class="comment">/* Lookup table.  */</span>
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (! table)
    <span class="keywordflow">return</span> 0;

  memset (&amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>, 0, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a>));
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.family = AF_INET;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefixlen = <a class="code" href="prefix_8h.html#ab98d836bf20a06de7a7358ab17832002">IPV4_MAX_PREFIXLEN</a>;
  <a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>.prefix = addr;

  rn = <a class="code" href="table_8c.html#a948f4335026cd8417c7424e85156ae55">route_node_match</a> (table, (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *) &amp;<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>);

  <span class="keywordflow">while</span> (rn)
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      
      <span class="comment">/* Pick up selected route. */</span>
      <span class="keywordflow">for</span> (match = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; match; match = match-&gt;<a class="code" href="structrib.html#a089025c6f9094d5c7bf85f5abe8b9aa1">next</a>)
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a46c23b441e1c603542f70b14a5e91c9a">status</a>, <a class="code" href="rib_8h.html#ae89535688c62ebde01900966447c1738">RIB_ENTRY_REMOVED</a>))
        <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (match-&gt;<a class="code" href="structrib.html#a2d6fadf111112f45163239c602f83034">flags</a>, <a class="code" href="zebra_8h.html#a47ec24049a3bbc036a5f10a9735d7d8d">ZEBRA_FLAG_SELECTED</a>))
        <span class="keywordflow">break</span>;
    }

      <span class="comment">/* If there is no selected route or matched route is EGP, go up</span>
<span class="comment">         tree. */</span>
      <span class="keywordflow">if</span> (! match 
      || match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#a1991829492a88a5df46712d8782240a0">ZEBRA_ROUTE_BGP</a>)
    {
      <span class="keywordflow">do</span> {
        rn = rn-&gt;<a class="code" href="structroute__node.html#a9938f9e9ccef81c6c4cc9bc904667410">parent</a>;
      } <span class="keywordflow">while</span> (rn &amp;&amp; rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
      <span class="keywordflow">if</span> (rn)
        <a class="code" href="table_8c.html#a5f018f727fe43d17553baabbf7fa6498">route_lock_node</a> (rn);
    }
      <span class="keywordflow">else</span>
    {
      <span class="keywordflow">if</span> (match-&gt;<a class="code" href="structrib.html#a851ad92c541e55a15bd833fa0f753ce6">type</a> == <a class="code" href="zebra_8h.html#aee45d53cdac2bd7fe4b2ce021c9d1b30">ZEBRA_ROUTE_CONNECT</a>)
        <span class="comment">/* Directly point connected route. */</span>
        <span class="keywordflow">return</span> match;
      <span class="keywordflow">else</span>
        {
          <span class="keywordflow">for</span> (newhop = match-&gt;<a class="code" href="structrib.html#a333c2eb7d1db1667de78cd2593aec089">nexthop</a>; newhop; newhop = newhop-&gt;<a class="code" href="structnexthop.html#a9c830710811182925d5222fee616bd83">next</a>)
        <span class="keywordflow">if</span> (<a class="code" href="zebra_8h.html#a9310812ac92febfb7d1eb10127aea1a8">CHECK_FLAG</a> (newhop-&gt;<a class="code" href="structnexthop.html#a9fe6fe2ff3e0fc1ddfabe888ee9d00ad">flags</a>, <a class="code" href="rib_8h.html#a7df095eb80d2cbf19093cbe09fcfcf77">NEXTHOP_FLAG_FIB</a>))
          <span class="keywordflow">return</span> match;
          <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
        }
    }
    }
  <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a75571cb0f6ed48267739d55e20c6722f"></a><!-- doxytag: member="rib.h::rib_sweep_route" ref="a75571cb0f6ed48267739d55e20c6722f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_sweep_route </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02875">2875</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra__rib_8c.html#aea35d63ca4a7a3244a35d571b406dd12">rib_sweep_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
  <a class="code" href="zebra__rib_8c.html#aea35d63ca4a7a3244a35d571b406dd12">rib_sweep_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab5320729fbebc97fbb79a214f5d370d8"></a><!-- doxytag: member="rib.h::rib_update" ref="ab5320729fbebc97fbb79a214f5d370d8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_update </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02795">2795</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *table;
  
  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (table)
    <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
        <a class="code" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>, rn);

  table = <a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0);
  <span class="keywordflow">if</span> (table)
    <span class="keywordflow">for</span> (rn = <a class="code" href="table_8c.html#aee1d06c531794df326d946bdac647fb2">route_top</a> (table); rn; rn = <a class="code" href="table_8c.html#ad2addc694ecf6cd0cce57cb3a7d96902">route_next</a> (rn))
      <span class="keywordflow">if</span> (rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>)
        <a class="code" href="zebra__rib_8c.html#a8db8e4d9932aa91e4cde4c6d2c25061a">rib_queue_add</a> (&amp;<a class="code" href="connected_8c.html#a5a844f9c9c891ff5dfe28610da9b56ce">zebrad</a>, rn);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6f66a4098fb6d18a02fa91e62e395169"></a><!-- doxytag: member="rib.h::rib_weed_tables" ref="a6f66a4098fb6d18a02fa91e62e395169" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rib_weed_tables </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02839">2839</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="zebra__rib_8c.html#a1f2ff3ce6a7ce144247b726a3c257507">rib_weed_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
  <a class="code" href="zebra__rib_8c.html#a1f2ff3ce6a7ce144247b726a3c257507">rib_weed_table</a> (<a class="code" href="rib_8h.html#a385088f166bf61154f646c86e6830c21">vrf_table</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, 0));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a44bb955baa5782ba016fbc81c9810927"></a><!-- doxytag: member="rib.h::static_add_ipv4" ref="a44bb955baa5782ba016fbc81c9810927" args="(struct prefix *p, struct in_addr *gate, const char *ifname, u_char flags, u_char distance, u_int32_t vrf_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int static_add_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ifname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>vrf_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02101">2101</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structstatic__ipv4.html">static_ipv4</a> *si;
  <span class="keyword">struct </span><a class="code" href="structstatic__ipv4.html">static_ipv4</a> *pp;
  <span class="keyword">struct </span><a class="code" href="structstatic__ipv4.html">static_ipv4</a> *cp;
  <span class="keyword">struct </span><a class="code" href="structstatic__ipv4.html">static_ipv4</a> *update = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *stable;

  <span class="comment">/* Lookup table.  */</span>
  stable = <a class="code" href="rib_8h.html#a9b4cfde2cd5b67f8c8b63f566352e2aa">vrf_static_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, vrf_id);
  <span class="keywordflow">if</span> (! stable)
    <span class="keywordflow">return</span> -1;
  
  <span class="comment">/* Lookup static route prefix. */</span>
  rn = <a class="code" href="table_8c.html#ac91fdff1a0b8dc3d60ebaf152caa0f80">route_node_get</a> (stable, p);

  <span class="comment">/* Make flags. */</span>
  <span class="keywordflow">if</span> (gate)
    type = <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a>;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifname)
    type = <a class="code" href="rib_8h.html#a80b1bbdc2394a381d4edbbad9b855157">STATIC_IPV4_IFNAME</a>;
  <span class="keywordflow">else</span>
    type = <a class="code" href="rib_8h.html#a77364d968fe135da7ecaa185e1c9f27f">STATIC_IPV4_BLACKHOLE</a>;

  <span class="comment">/* Do nothing if there is a same static route.  */</span>
  <span class="keywordflow">for</span> (si = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; si; si = si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>)
    {
      <span class="keywordflow">if</span> (type == si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a>
      &amp;&amp; (! gate || <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (gate, &amp;si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>))
      &amp;&amp; (! ifname || strcmp (ifname, si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a>) == 0))
    {
      <span class="keywordflow">if</span> (<a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a> == si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>)
        {
          <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
          <span class="keywordflow">return</span> 0;
        }
      <span class="keywordflow">else</span>
        update = si;
    }
    }

  <span class="comment">/* Distance changed.  */</span>
  <span class="keywordflow">if</span> (update)
    <a class="code" href="rib_8h.html#a680270ecb5a14879953840c281d92fe8">static_delete_ipv4</a> (p, gate, ifname, update-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>, vrf_id);

  <span class="comment">/* Make new static route structure. */</span>
  si = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5b3f3545ac186697f074b49624327e52">MTYPE_STATIC_IPV4</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structstatic__ipv4.html">static_ipv4</a>));

  si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
  si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a> = <a class="code" href="zebra__rib_8c.html#afb9412686cd344ad61757c1c19ba8a87">distance</a>;
  si-&gt;<a class="code" href="structstatic__ipv4.html#a60d70c2e23a2f895ad0a926f2573c6d6">flags</a> = <a class="code" href="structflags.html">flags</a>;

  <span class="keywordflow">if</span> (gate)
    si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a> = *gate;
  <span class="keywordflow">if</span> (ifname)
    si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (0, ifname);

  <span class="comment">/* Add new static route information to the tree with sort by</span>
<span class="comment">     distance value and gateway address. */</span>
  <span class="keywordflow">for</span> (pp = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, cp = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; cp; pp = cp, cp = cp-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>)
    {
      <span class="keywordflow">if</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a> &lt; cp-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>)
    <span class="keywordflow">break</span>;
      <span class="keywordflow">if</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a> &gt; cp-&gt;<a class="code" href="structstatic__ipv4.html#a5e42198114502dcb0fcc22b652bf22d6">distance</a>)
    <span class="keywordflow">continue</span>;
      <span class="keywordflow">if</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a> == <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a> &amp;&amp; cp-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a> == <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a>)
    {
      <span class="keywordflow">if</span> (ntohl (si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>.s_addr) &lt; ntohl (cp-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>.s_addr))
        <span class="keywordflow">break</span>;
      <span class="keywordflow">if</span> (ntohl (si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>.s_addr) &gt; ntohl (cp-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>.s_addr))
        <span class="keywordflow">continue</span>;
    }
    }

  <span class="comment">/* Make linked list. */</span>
  <span class="keywordflow">if</span> (pp)
    pp-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a> = si;
  <span class="keywordflow">else</span>
    rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = si;
  <span class="keywordflow">if</span> (cp)
    cp-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a> = si;
  si-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a> = pp;
  si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a> = cp;

  <span class="comment">/* Install into rib. */</span>
  <a class="code" href="zebra__rib_8c.html#ae02411f015001b6addfd7cbfead751d0">static_install_ipv4</a> (p, si);

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a680270ecb5a14879953840c281d92fe8"></a><!-- doxytag: member="rib.h::static_delete_ipv4" ref="a680270ecb5a14879953840c281d92fe8" args="(struct prefix *p, struct in_addr *gate, const char *ifname, u_char distance, u_int32_t vrf_id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int static_delete_ipv4 </td>
          <td>(</td>
          <td class="paramtype">struct <a class="el" href="structprefix.html">prefix</a> *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">struct in_addr *&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ifname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_char&#160;</td>
          <td class="paramname"><em>distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>vrf_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l02196">2196</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  u_char <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a> = 0;
  <span class="keyword">struct </span><a class="code" href="structroute__node.html">route_node</a> *rn;
  <span class="keyword">struct </span><a class="code" href="structstatic__ipv4.html">static_ipv4</a> *si;
  <span class="keyword">struct </span><a class="code" href="structroute__table.html">route_table</a> *stable;

  <span class="comment">/* Lookup table.  */</span>
  stable = <a class="code" href="rib_8h.html#a9b4cfde2cd5b67f8c8b63f566352e2aa">vrf_static_table</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="zebra_8h.html#afb8a63d76f4951ff8d73c32256b4a497">SAFI_UNICAST</a>, vrf_id);
  <span class="keywordflow">if</span> (! stable)
    <span class="keywordflow">return</span> -1;

  <span class="comment">/* Lookup static route prefix. */</span>
  rn = <a class="code" href="table_8c.html#ab99d86b40440c8f18d4f2b31b5b8f1c7">route_node_lookup</a> (stable, p);
  <span class="keywordflow">if</span> (! rn)
    <span class="keywordflow">return</span> 0;

  <span class="comment">/* Make flags. */</span>
  <span class="keywordflow">if</span> (gate)
    type = <a class="code" href="rib_8h.html#a214a388953e710152811e4933c9b4f57">STATIC_IPV4_GATEWAY</a>;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ifname)
    type = <a class="code" href="rib_8h.html#a80b1bbdc2394a381d4edbbad9b855157">STATIC_IPV4_IFNAME</a>;
  <span class="keywordflow">else</span>
    type = <a class="code" href="rib_8h.html#a77364d968fe135da7ecaa185e1c9f27f">STATIC_IPV4_BLACKHOLE</a>;

  <span class="comment">/* Find same static route is the tree */</span>
  <span class="keywordflow">for</span> (si = rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a>; si; si = si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>)
    <span class="keywordflow">if</span> (type == si-&gt;<a class="code" href="structstatic__ipv4.html#a363155cfa3f3763438cc1aba9494710f">type</a>
    &amp;&amp; (! gate || <a class="code" href="prefix_8h.html#a52a7c965d0b22ca60fe38fa6c404dbcc">IPV4_ADDR_SAME</a> (gate, &amp;si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#a961aa1a35d135ac8a5c3d038ab2b55aa">ipv4</a>))
    &amp;&amp; (! ifname || strcmp (ifname, si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a>) == 0))
      <span class="keywordflow">break</span>;

  <span class="comment">/* Can&#39;t find static route. */</span>
  <span class="keywordflow">if</span> (! si)
    {
      <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
      <span class="keywordflow">return</span> 0;
    }

  <span class="comment">/* Install into rib. */</span>
  <a class="code" href="zebra__rib_8c.html#a9965ea283d5bd9090e1fcecd6b7a2027">static_uninstall_ipv4</a> (p, si);

  <span class="comment">/* Unlink static route from linked list. */</span>
  <span class="keywordflow">if</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a>)
    si-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a>-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a> = si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>;
  <span class="keywordflow">else</span>
    rn-&gt;<a class="code" href="structroute__node.html#a20aabb1a6fbe9de363a1c57fe3124c87">info</a> = si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>;
  <span class="keywordflow">if</span> (si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>)
    si-&gt;<a class="code" href="structstatic__ipv4.html#a2ea0107f6860b092d4c546da6b33710a">next</a>-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a> = si-&gt;<a class="code" href="structstatic__ipv4.html#a704ed7b61c8e8fa6f628afd75b7bddd1">prev</a>;
  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);
  
  <span class="comment">/* Free static route configuration. */</span>
  <span class="keywordflow">if</span> (ifname)
    <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (0, si-&gt;<a class="code" href="structstatic__ipv4.html#a6016fbbb726d306c4afce046ef3e38a5">gate</a>.<a class="code" href="structstatic__ipv4.html#acb86de89450fb17b1acd3ddaf6444405">ifname</a>);
  <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba5b3f3545ac186697f074b49624327e52">MTYPE_STATIC_IPV4</a>, si);

  <a class="code" href="table_8c.html#a849965644708e01ef49c203a2e00afd4">route_unlock_node</a> (rn);

  <span class="keywordflow">return</span> 1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a16a6947a4bdd7614efaae35900ebf07c"></a><!-- doxytag: member="rib.h::vrf_lookup" ref="a16a6947a4bdd7614efaae35900ebf07c" args="(u_int32_t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structvrf.html">vrf</a>* vrf_lookup </td>
          <td>(</td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00098">98</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="vector_8c.html#a5308a959053a5b67010213f09ade8e20">vector_lookup</a> (<a class="code" href="zebra__rib_8c.html#afe4f2e3deedbf90284062376af11d6d3">vrf_vector</a>, <span class="keywordtype">id</span>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9b4cfde2cd5b67f8c8b63f566352e2aa"></a><!-- doxytag: member="rib.h::vrf_static_table" ref="a9b4cfde2cd5b67f8c8b63f566352e2aa" args="(afi_t afi, safi_t safi, u_int32_t id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__table.html">route_table</a>* vrf_static_table </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00134">134</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvrf.html">vrf</a> *<a class="code" href="structvrf.html">vrf</a>;

  vrf = <a class="code" href="rib_8h.html#a16a6947a4bdd7614efaae35900ebf07c">vrf_lookup</a> (<span class="keywordtype">id</span>);
  <span class="keywordflow">if</span> (! vrf)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> vrf-&gt;<a class="code" href="structvrf.html#a816cca07520c3c7d454f46fba9fa55f2">stable</a>[afi][safi];
}
</pre></div>
</div>
</div>
<a class="anchor" id="a385088f166bf61154f646c86e6830c21"></a><!-- doxytag: member="rib.h::vrf_table" ref="a385088f166bf61154f646c86e6830c21" args="(afi_t afi, safi_t safi, u_int32_t id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structroute__table.html">route_table</a>* vrf_table </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a>&#160;</td>
          <td class="paramname"><em>afi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="zebra_8h.html#a195af4129e055b63a1b67529674bb998">safi_t</a>&#160;</td>
          <td class="paramname"><em>safi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u_int32_t&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [read]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="zebra__rib_8c_source.html#l00121">121</a> of file <a class="el" href="zebra__rib_8c_source.html">zebra_rib.c</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keyword">struct </span><a class="code" href="structvrf.html">vrf</a> *<a class="code" href="structvrf.html">vrf</a>;

  vrf = <a class="code" href="rib_8h.html#a16a6947a4bdd7614efaae35900ebf07c">vrf_lookup</a> (<span class="keywordtype">id</span>);
  <span class="keywordflow">if</span> (! vrf)
    <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;

  <span class="keywordflow">return</span> vrf-&gt;<a class="code" href="structvrf.html#a4dc21a999c55d29f1495786a47926e3f">table</a>[afi][safi];
}
</pre></div>
</div>
</div>
</div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="rib_8h.html">rib.h</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:38 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
