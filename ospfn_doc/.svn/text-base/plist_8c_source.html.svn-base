<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>OSPFN: lib/plist.c Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">OSPFN
   &#160;<span id="projectnumber">1.1</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.5.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('plist_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">lib/plist.c</div>  </div>
</div>
<div class="contents">
<a href="plist_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Prefix list functions.</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 1999 Kunihiro Ishiguro</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of GNU Zebra.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * GNU Zebra is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published</span>
<a name="l00008"></a>00008 <span class="comment"> * by the Free Software Foundation; either version 2, or (at your</span>
<a name="l00009"></a>00009 <span class="comment"> * option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * GNU Zebra is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with GNU Zebra; see the file COPYING.  If not, write to the</span>
<a name="l00018"></a>00018 <span class="comment"> * Free Software Foundation, Inc., 59 Temple Place - Suite 330,</span>
<a name="l00019"></a>00019 <span class="comment"> * Boston, MA 02111-1307, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="zebra_8h.html">zebra.h</a>&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="prefix_8h.html">prefix.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="memory_8h.html">memory.h</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="plist_8h.html">plist.h</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="sockunion_8h.html">sockunion.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="buffer_8h.html">buffer.h</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="stream_8h.html">stream.h</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="log_8h.html">log.h</a>&quot;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">/* Each prefix-list&#39;s entry. */</span>
<a name="l00034"></a><a class="code" href="structprefix__list__entry.html">00034</a> <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a>
<a name="l00035"></a>00035 {
<a name="l00036"></a><a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">00036</a>   <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>;
<a name="l00037"></a>00037 
<a name="l00038"></a><a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">00038</a>   <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>;
<a name="l00039"></a><a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">00039</a>   <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>;
<a name="l00040"></a>00040 
<a name="l00041"></a><a class="code" href="structprefix__list__entry.html#a0fd0b49238c4282c6dc6c3f4dc7fa90b">00041</a>   <span class="keyword">enum</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9">prefix_list_type</a> <a class="code" href="structprefix__list__entry.html#a0fd0b49238c4282c6dc6c3f4dc7fa90b">type</a>;
<a name="l00042"></a>00042 
<a name="l00043"></a><a class="code" href="structprefix__list__entry.html#a57aeba7f4f09a2cefbca6f858ccc4409">00043</a>   <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#a57aeba7f4f09a2cefbca6f858ccc4409">any</a>;
<a name="l00044"></a><a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">00044</a>   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> <a class="code" href="structprefix.html">prefix</a>;
<a name="l00045"></a>00045 
<a name="l00046"></a><a class="code" href="structprefix__list__entry.html#a3ed052c80674ec74c1254d0d7bd3f5db">00046</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="structprefix__list__entry.html#a3ed052c80674ec74c1254d0d7bd3f5db">refcnt</a>;
<a name="l00047"></a><a class="code" href="structprefix__list__entry.html#a9b3fcb078ec13759da069c1349257b9c">00047</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="structprefix__list__entry.html#a9b3fcb078ec13759da069c1349257b9c">hitcnt</a>;
<a name="l00048"></a>00048 
<a name="l00049"></a><a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">00049</a>   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>;
<a name="l00050"></a><a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">00050</a>   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a>;
<a name="l00051"></a>00051 };
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">/* List of struct prefix_list. */</span>
<a name="l00054"></a><a class="code" href="structprefix__list__list.html">00054</a> <span class="keyword">struct </span><a class="code" href="structprefix__list__list.html">prefix_list_list</a>
<a name="l00055"></a>00055 {
<a name="l00056"></a><a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">00056</a>   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>;
<a name="l00057"></a><a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">00057</a>   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a>;
<a name="l00058"></a>00058 };
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">/* Master structure of prefix_list. */</span>
<a name="l00061"></a><a class="code" href="structprefix__master.html">00061</a> <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a>
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063   <span class="comment">/* List of prefix_list which name is number. */</span>
<a name="l00064"></a><a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">00064</a>   <span class="keyword">struct </span><a class="code" href="structprefix__list__list.html">prefix_list_list</a> <a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>;
<a name="l00065"></a>00065 
<a name="l00066"></a>00066   <span class="comment">/* List of prefix_list which name is string. */</span>
<a name="l00067"></a><a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">00067</a>   <span class="keyword">struct </span><a class="code" href="structprefix__list__list.html">prefix_list_list</a> <a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>;
<a name="l00068"></a>00068 
<a name="l00069"></a>00069   <span class="comment">/* Whether sequential number is used. */</span>
<a name="l00070"></a><a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">00070</a>   <span class="keywordtype">int</span> <a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a>;
<a name="l00071"></a>00071 
<a name="l00072"></a>00072   <span class="comment">/* The latest update. */</span>
<a name="l00073"></a><a class="code" href="structprefix__master.html#a5bc8b25011ca831bd90c798ae8b01d9c">00073</a>   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *<a class="code" href="structprefix__master.html#a5bc8b25011ca831bd90c798ae8b01d9c">recent</a>;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075   <span class="comment">/* Hook function which is executed when new prefix_list is added. */</span>
<a name="l00076"></a><a class="code" href="structprefix__master.html#a863565c86e74e7e82d860e9b9ab8ad51">00076</a>   void (*<a class="code" href="structprefix__master.html#a863565c86e74e7e82d860e9b9ab8ad51">add_hook</a>) (<span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *);
<a name="l00077"></a>00077 
<a name="l00078"></a>00078   <span class="comment">/* Hook function which is executed when prefix_list is deleted. */</span>
<a name="l00079"></a><a class="code" href="structprefix__master.html#a8fae6d56cf41c0dcb7dd6f7c52498c82">00079</a>   void (*<a class="code" href="structprefix__master.html#a8fae6d56cf41c0dcb7dd6f7c52498c82">delete_hook</a>) (<span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *);
<a name="l00080"></a>00080 };
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="comment">/* Static structure of IPv4 prefix_list&#39;s master. */</span>
<a name="l00083"></a><a class="code" href="plist_8c.html#adbb3c0958301828885c89ba220e84dd8">00083</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> <a class="code" href="plist_8c.html#adbb3c0958301828885c89ba220e84dd8">prefix_master_ipv4</a> = 
<a name="l00084"></a>00084 { 
<a name="l00085"></a>00085   {<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>},
<a name="l00086"></a>00086   {<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>},
<a name="l00087"></a>00087   1,
<a name="l00088"></a>00088   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00089"></a>00089   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00090"></a>00090 };
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span><span class="comment">/* Static structure of IPv6 prefix-list&#39;s master. */</span>
<a name="l00094"></a>00094 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> prefix_master_ipv6 = 
<a name="l00095"></a>00095 { 
<a name="l00096"></a>00096   {<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>},
<a name="l00097"></a>00097   {<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>},
<a name="l00098"></a>00098   1,
<a name="l00099"></a>00099   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00100"></a>00100   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00101"></a>00101 };
<a name="l00102"></a>00102 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6*/</span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="comment">/* Static structure of BGP ORF prefix_list&#39;s master. */</span>
<a name="l00105"></a><a class="code" href="plist_8c.html#a597a3deb5c8aa8f4748039656112b584">00105</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> <a class="code" href="plist_8c.html#a597a3deb5c8aa8f4748039656112b584">prefix_master_orf</a> = 
<a name="l00106"></a>00106 { 
<a name="l00107"></a>00107   {<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>},
<a name="l00108"></a>00108   {<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>},
<a name="l00109"></a>00109   1,
<a name="l00110"></a>00110   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00111"></a>00111   <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l00112"></a>00112 };
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> *
<a name="l00115"></a><a class="code" href="plist_8c.html#a1c6cce0123ce7ec82be06154b2bf458a">00115</a> <a class="code" href="plist_8c.html#a1c6cce0123ce7ec82be06154b2bf458a">prefix_master_get</a> (<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi)
<a name="l00116"></a>00116 {
<a name="l00117"></a>00117   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l00118"></a>00118     <span class="keywordflow">return</span> &amp;<a class="code" href="plist_8c.html#adbb3c0958301828885c89ba220e84dd8">prefix_master_ipv4</a>;
<a name="l00119"></a>00119 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00120"></a>00120 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l00121"></a>00121     <span class="keywordflow">return</span> &amp;prefix_master_ipv6;
<a name="l00122"></a>00122 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00123"></a>00123   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="plist_8h.html#aa217ec31c92f3842209d9991a42a675c">AFI_ORF_PREFIX</a>)
<a name="l00124"></a>00124     <span class="keywordflow">return</span> &amp;<a class="code" href="plist_8c.html#a597a3deb5c8aa8f4748039656112b584">prefix_master_orf</a>;
<a name="l00125"></a>00125   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00126"></a>00126 }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="comment">/* Lookup prefix_list from list of prefix_list by name. */</span>
<a name="l00129"></a>00129 <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *
<a name="l00130"></a><a class="code" href="plist_8h.html#a782db77144c7e53d2f70c5397fa01a37">00130</a> <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l00131"></a>00131 {
<a name="l00132"></a>00132   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l00133"></a>00133   <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l00134"></a>00134 
<a name="l00135"></a>00135   <span class="keywordflow">if</span> (name == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00136"></a>00136     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138   master = <a class="code" href="plist_8c.html#a1c6cce0123ce7ec82be06154b2bf458a">prefix_master_get</a> (afi);
<a name="l00139"></a>00139   <span class="keywordflow">if</span> (master == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00140"></a>00140     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l00143"></a>00143     <span class="keywordflow">if</span> (strcmp (plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, name) == 0)
<a name="l00144"></a>00144       <span class="keywordflow">return</span> plist;
<a name="l00145"></a>00145 
<a name="l00146"></a>00146   <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l00147"></a>00147     <span class="keywordflow">if</span> (strcmp (plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, name) == 0)
<a name="l00148"></a>00148       <span class="keywordflow">return</span> plist;
<a name="l00149"></a>00149 
<a name="l00150"></a>00150   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00151"></a>00151 }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *
<a name="l00154"></a><a class="code" href="plist_8c.html#a43a85697bdb4c382f53a8bdbccd1bc70">00154</a> <a class="code" href="plist_8c.html#a43a85697bdb4c382f53a8bdbccd1bc70">prefix_list_new</a> (<span class="keywordtype">void</span>)
<a name="l00155"></a>00155 {
<a name="l00156"></a>00156   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *<span class="keyword">new</span>;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8791e3689f7da2170d6f1d3d7be9be45">MTYPE_PREFIX_LIST</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a>));
<a name="l00159"></a>00159   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00160"></a>00160 }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00163"></a><a class="code" href="plist_8c.html#a909938882a693b5b3290faed9eb82716">00163</a> <a class="code" href="plist_8c.html#a909938882a693b5b3290faed9eb82716">prefix_list_free</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist)
<a name="l00164"></a>00164 {
<a name="l00165"></a>00165   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba8791e3689f7da2170d6f1d3d7be9be45">MTYPE_PREFIX_LIST</a>, plist);
<a name="l00166"></a>00166 }
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *
<a name="l00169"></a><a class="code" href="plist_8c.html#a32a162a8ae54c8f3c5035c8632958024">00169</a> <a class="code" href="plist_8c.html#a32a162a8ae54c8f3c5035c8632958024">prefix_list_entry_new</a> (<span class="keywordtype">void</span>)
<a name="l00170"></a>00170 {
<a name="l00171"></a>00171   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *<span class="keyword">new</span>;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173   <span class="keyword">new</span> = <a class="code" href="memory_8h.html#a7826e4ed1d152cad0666dcf43f11f663">XCALLOC</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba01fd28710afb002206f2f6e96a12afc2">MTYPE_PREFIX_LIST_ENTRY</a>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> <a class="code" href="structprefix__list__entry.html">prefix_list_entry</a>));
<a name="l00174"></a>00174   <span class="keywordflow">return</span> <span class="keyword">new</span>;
<a name="l00175"></a>00175 }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00178"></a><a class="code" href="plist_8c.html#a7b951b9596550f0a9fccca8549d27dcc">00178</a> <a class="code" href="plist_8c.html#a7b951b9596550f0a9fccca8549d27dcc">prefix_list_entry_free</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry)
<a name="l00179"></a>00179 {
<a name="l00180"></a>00180   <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba01fd28710afb002206f2f6e96a12afc2">MTYPE_PREFIX_LIST_ENTRY</a>, pentry);
<a name="l00181"></a>00181 }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 <span class="comment">/* Insert new prefix list to list of prefix_list.  Each prefix_list</span>
<a name="l00184"></a>00184 <span class="comment">   is sorted by the name. */</span>
<a name="l00185"></a>00185 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *
<a name="l00186"></a><a class="code" href="plist_8c.html#a5c428fd6c5731a8bfc04bf235e37a991">00186</a> <a class="code" href="plist_8c.html#a5c428fd6c5731a8bfc04bf235e37a991">prefix_list_insert</a> (<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l00187"></a>00187 {
<a name="l00188"></a>00188   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>;
<a name="l00189"></a>00189   <span class="keywordtype">long</span> number;
<a name="l00190"></a>00190   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l00191"></a>00191   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *point;
<a name="l00192"></a>00192   <span class="keyword">struct </span><a class="code" href="structprefix__list__list.html">prefix_list_list</a> *<a class="code" href="structlist.html">list</a>;
<a name="l00193"></a>00193   <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l00194"></a>00194 
<a name="l00195"></a>00195   master = <a class="code" href="plist_8c.html#a1c6cce0123ce7ec82be06154b2bf458a">prefix_master_get</a> (afi);
<a name="l00196"></a>00196   <span class="keywordflow">if</span> (master == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00197"></a>00197     <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00198"></a>00198 
<a name="l00199"></a>00199   <span class="comment">/* Allocate new prefix_list and copy given name. */</span>
<a name="l00200"></a>00200   plist = <a class="code" href="plist_8c.html#a43a85697bdb4c382f53a8bdbccd1bc70">prefix_list_new</a> ();
<a name="l00201"></a>00201   plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a> = <a class="code" href="memory_8h.html#aa7c561b5824edc16351f22b8df155c0e">XSTRDUP</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba770d10c594a76e3efd9885b3e047915e">MTYPE_PREFIX_LIST_STR</a>, name);
<a name="l00202"></a>00202   plist-&gt;<a class="code" href="structprefix__list.html#abc435f7afcbac9749f25b91857e20cd4">master</a> = <a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l00203"></a>00203 
<a name="l00204"></a>00204   <span class="comment">/* If name is made by all digit character.  We treat it as</span>
<a name="l00205"></a>00205 <span class="comment">     number. */</span>
<a name="l00206"></a>00206   <span class="keywordflow">for</span> (number = 0, i = 0; i &lt; strlen (name); i++)
<a name="l00207"></a>00207     {
<a name="l00208"></a>00208       <span class="keywordflow">if</span> (isdigit ((<span class="keywordtype">int</span>) name[i]))
<a name="l00209"></a>00209     number = (number * 10) + (name[<a class="code" href="spgrid_8c.html#a139066bd9e344a8daae82c5ca919fffe">i</a>] - <span class="charliteral">&#39;0&#39;</span>);
<a name="l00210"></a>00210       <span class="keywordflow">else</span>
<a name="l00211"></a>00211     <span class="keywordflow">break</span>;
<a name="l00212"></a>00212     }
<a name="l00213"></a>00213 
<a name="l00214"></a>00214   <span class="comment">/* In case of name is all digit character */</span>
<a name="l00215"></a>00215   <span class="keywordflow">if</span> (i == strlen (name))
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217       plist-&gt;<a class="code" href="structprefix__list.html#a4044e53fb4e2137d29228d2eccc60ffb">type</a> = <a class="code" href="plist_8h.html#a4ef9fb863a308e804e51b7aec6db5df2a8fd3746c7e18c43d9976364ddab599dc">PREFIX_TYPE_NUMBER</a>;
<a name="l00218"></a>00218 
<a name="l00219"></a>00219       <span class="comment">/* Set prefix_list to number list. */</span>
<a name="l00220"></a>00220       list = &amp;master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>;
<a name="l00221"></a>00221 
<a name="l00222"></a>00222       <span class="keywordflow">for</span> (point = list-&gt;<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; point; point = point-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l00223"></a>00223     <span class="keywordflow">if</span> (atol (point-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>) &gt;= number)
<a name="l00224"></a>00224       <span class="keywordflow">break</span>;
<a name="l00225"></a>00225     }
<a name="l00226"></a>00226   <span class="keywordflow">else</span>
<a name="l00227"></a>00227     {
<a name="l00228"></a>00228       plist-&gt;<a class="code" href="structprefix__list.html#a4044e53fb4e2137d29228d2eccc60ffb">type</a> = <a class="code" href="plist_8h.html#a4ef9fb863a308e804e51b7aec6db5df2a069243cdc8ea80886c40ff136525c298">PREFIX_TYPE_STRING</a>;
<a name="l00229"></a>00229 
<a name="l00230"></a>00230       <span class="comment">/* Set prefix_list to string list. */</span>
<a name="l00231"></a>00231       list = &amp;master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>;
<a name="l00232"></a>00232   
<a name="l00233"></a>00233       <span class="comment">/* Set point to insertion point. */</span>
<a name="l00234"></a>00234       <span class="keywordflow">for</span> (point = list-&gt;<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; point; point = point-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l00235"></a>00235     <span class="keywordflow">if</span> (strcmp (point-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, name) &gt;= 0)
<a name="l00236"></a>00236       <span class="keywordflow">break</span>;
<a name="l00237"></a>00237     }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239   <span class="comment">/* In case of this is the first element of master. */</span>
<a name="l00240"></a>00240   <span class="keywordflow">if</span> (list-&gt;<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00241"></a>00241     {
<a name="l00242"></a>00242       list-&gt;<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a> = list-&gt;<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a> = plist;
<a name="l00243"></a>00243       <span class="keywordflow">return</span> plist;
<a name="l00244"></a>00244     }
<a name="l00245"></a>00245 
<a name="l00246"></a>00246   <span class="comment">/* In case of insertion is made at the tail of access_list. */</span>
<a name="l00247"></a>00247   <span class="keywordflow">if</span> (point == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00248"></a>00248     {
<a name="l00249"></a>00249       plist-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a> = list-&gt;<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a>;
<a name="l00250"></a>00250       list-&gt;<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a>-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a> = plist;
<a name="l00251"></a>00251       list-&gt;<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a> = plist;
<a name="l00252"></a>00252       <span class="keywordflow">return</span> plist;
<a name="l00253"></a>00253     }
<a name="l00254"></a>00254 
<a name="l00255"></a>00255   <span class="comment">/* In case of insertion is made at the head of access_list. */</span>
<a name="l00256"></a>00256   <span class="keywordflow">if</span> (point == list-&gt;<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>)
<a name="l00257"></a>00257     {
<a name="l00258"></a>00258       plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a> = list-&gt;<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>;
<a name="l00259"></a>00259       list-&gt;<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a> = plist;
<a name="l00260"></a>00260       list-&gt;<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a> = plist;
<a name="l00261"></a>00261       <span class="keywordflow">return</span> plist;
<a name="l00262"></a>00262     }
<a name="l00263"></a>00263 
<a name="l00264"></a>00264   <span class="comment">/* Insertion is made at middle of the access_list. */</span>
<a name="l00265"></a>00265   plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a> = point;
<a name="l00266"></a>00266   plist-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a> = point-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a>;
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   <span class="keywordflow">if</span> (point-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a>)
<a name="l00269"></a>00269     point-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a>-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a> = plist;
<a name="l00270"></a>00270   point-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a> = plist;
<a name="l00271"></a>00271 
<a name="l00272"></a>00272   <span class="keywordflow">return</span> plist;
<a name="l00273"></a>00273 }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *
<a name="l00276"></a><a class="code" href="plist_8c.html#ae7b9515a190ca9184e5b84d69597409c">00276</a> <a class="code" href="plist_8c.html#ae7b9515a190ca9184e5b84d69597409c">prefix_list_get</a> (<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l00277"></a>00277 {
<a name="l00278"></a>00278   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l00279"></a>00279 
<a name="l00280"></a>00280   plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, name);
<a name="l00281"></a>00281 
<a name="l00282"></a>00282   <span class="keywordflow">if</span> (plist == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00283"></a>00283     plist = <a class="code" href="plist_8c.html#a5c428fd6c5731a8bfc04bf235e37a991">prefix_list_insert</a> (afi, name);
<a name="l00284"></a>00284   <span class="keywordflow">return</span> plist;
<a name="l00285"></a>00285 }
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 <span class="comment">/* Delete prefix-list from prefix_list_master and free it. */</span>
<a name="l00288"></a>00288 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00289"></a><a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">00289</a> <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist)
<a name="l00290"></a>00290 {
<a name="l00291"></a>00291   <span class="keyword">struct </span><a class="code" href="structprefix__list__list.html">prefix_list_list</a> *<a class="code" href="structlist.html">list</a>;
<a name="l00292"></a>00292   <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l00293"></a>00293   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00294"></a>00294   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>;
<a name="l00295"></a>00295 
<a name="l00296"></a>00296   <span class="comment">/* If prefix-list contain prefix_list_entry free all of it. */</span>
<a name="l00297"></a>00297   <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = next)
<a name="l00298"></a>00298     {
<a name="l00299"></a>00299       next = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>;
<a name="l00300"></a>00300       <a class="code" href="plist_8c.html#a7b951b9596550f0a9fccca8549d27dcc">prefix_list_entry_free</a> (pentry);
<a name="l00301"></a>00301       plist-&gt;<a class="code" href="structprefix__list.html#a5eb75f52779c50e8c1aff2d16c961aed">count</a>--;
<a name="l00302"></a>00302     }
<a name="l00303"></a>00303 
<a name="l00304"></a>00304   master = plist-&gt;<a class="code" href="structprefix__list.html#abc435f7afcbac9749f25b91857e20cd4">master</a>;
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a4044e53fb4e2137d29228d2eccc60ffb">type</a> == <a class="code" href="plist_8h.html#a4ef9fb863a308e804e51b7aec6db5df2a8fd3746c7e18c43d9976364ddab599dc">PREFIX_TYPE_NUMBER</a>)
<a name="l00307"></a>00307     list = &amp;master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>;
<a name="l00308"></a>00308   <span class="keywordflow">else</span>
<a name="l00309"></a>00309     list = &amp;master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>;
<a name="l00310"></a>00310 
<a name="l00311"></a>00311   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l00312"></a>00312     plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a> = plist-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a>;
<a name="l00313"></a>00313   <span class="keywordflow">else</span>
<a name="l00314"></a>00314     list-&gt;<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a> = plist-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a>;
<a name="l00315"></a>00315 
<a name="l00316"></a>00316   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a>)
<a name="l00317"></a>00317     plist-&gt;<a class="code" href="structprefix__list.html#aed5c6c7a52438f02b9e212a057d62045">prev</a>-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a> = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l00318"></a>00318   <span class="keywordflow">else</span>
<a name="l00319"></a>00319     list-&gt;<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a> = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l00320"></a>00320 
<a name="l00321"></a>00321   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>)
<a name="l00322"></a>00322     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>);
<a name="l00323"></a>00323 
<a name="l00324"></a>00324   <span class="comment">/* Make sure master&#39;s recent changed prefix-list information is</span>
<a name="l00325"></a>00325 <span class="comment">     cleared. */</span>
<a name="l00326"></a>00326   master-&gt;<a class="code" href="structprefix__master.html#a5bc8b25011ca831bd90c798ae8b01d9c">recent</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00327"></a>00327 
<a name="l00328"></a>00328   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>)
<a name="l00329"></a>00329     <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba770d10c594a76e3efd9885b3e047915e">MTYPE_PREFIX_LIST_STR</a>, plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l00330"></a>00330   
<a name="l00331"></a>00331   <a class="code" href="plist_8c.html#a909938882a693b5b3290faed9eb82716">prefix_list_free</a> (plist);
<a name="l00332"></a>00332   
<a name="l00333"></a>00333   <span class="keywordflow">if</span> (master-&gt;<a class="code" href="structprefix__master.html#a8fae6d56cf41c0dcb7dd6f7c52498c82">delete_hook</a>)
<a name="l00334"></a>00334     (*master-&gt;<a class="code" href="structprefix__master.html#a8fae6d56cf41c0dcb7dd6f7c52498c82">delete_hook</a>) (<a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l00335"></a>00335 }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *
<a name="l00338"></a><a class="code" href="plist_8c.html#a11688eb24d1194d7d1b754d8261dfe9a">00338</a> <a class="code" href="plist_8c.html#a11688eb24d1194d7d1b754d8261dfe9a">prefix_list_entry_make</a> (<span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="structprefix.html">prefix</a>, <span class="keyword">enum</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9">prefix_list_type</a> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>,
<a name="l00339"></a>00339             <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>, <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>, <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>, <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#a57aeba7f4f09a2cefbca6f858ccc4409">any</a>)
<a name="l00340"></a>00340 {
<a name="l00341"></a>00341   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343   pentry = <a class="code" href="plist_8c.html#a32a162a8ae54c8f3c5035c8632958024">prefix_list_entry_new</a> ();
<a name="l00344"></a>00344 
<a name="l00345"></a>00345   <span class="keywordflow">if</span> (any)
<a name="l00346"></a>00346     pentry-&gt;<a class="code" href="structprefix__list__entry.html#a57aeba7f4f09a2cefbca6f858ccc4409">any</a> = 1;
<a name="l00347"></a>00347 
<a name="l00348"></a>00348   <a class="code" href="prefix_8c.html#abaad44d47b408d45484fdd729ab501b2">prefix_copy</a> (&amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>, prefix);
<a name="l00349"></a>00349   pentry-&gt;<a class="code" href="structprefix__list__entry.html#a0fd0b49238c4282c6dc6c3f4dc7fa90b">type</a> = <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00350"></a>00350   pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> = <a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>;
<a name="l00351"></a>00351   pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a> = <a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>;
<a name="l00352"></a>00352   pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a> = <a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>;
<a name="l00353"></a>00353 
<a name="l00354"></a>00354   <span class="keywordflow">return</span> pentry;
<a name="l00355"></a>00355 }
<a name="l00356"></a>00356 
<a name="l00357"></a>00357 <span class="comment">/* Add hook function. */</span>
<a name="l00358"></a>00358 <span class="keywordtype">void</span>
<a name="l00359"></a><a class="code" href="plist_8c.html#add7d0c6cd7985233eb409608b9bf248b">00359</a> <a class="code" href="plist_8c.html#add7d0c6cd7985233eb409608b9bf248b">prefix_list_add_hook</a> (<span class="keywordtype">void</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist))
<a name="l00360"></a>00360 {
<a name="l00361"></a>00361   prefix_master_ipv4.<a class="code" href="structprefix__master.html#a863565c86e74e7e82d860e9b9ab8ad51">add_hook</a> = <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>;
<a name="l00362"></a>00362 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00363"></a>00363 <span class="preprocessor"></span>  prefix_master_ipv6.<a class="code" href="structprefix__master.html#a863565c86e74e7e82d860e9b9ab8ad51">add_hook</a> = <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>;
<a name="l00364"></a>00364 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00365"></a>00365 }
<a name="l00366"></a>00366 
<a name="l00367"></a>00367 <span class="comment">/* Delete hook function. */</span>
<a name="l00368"></a>00368 <span class="keywordtype">void</span>
<a name="l00369"></a><a class="code" href="plist_8c.html#a28384c5c606bb185263f9d8f7ad4fa98">00369</a> <a class="code" href="plist_8c.html#a28384c5c606bb185263f9d8f7ad4fa98">prefix_list_delete_hook</a> (<span class="keywordtype">void</span> (*<a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>) (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist))
<a name="l00370"></a>00370 {
<a name="l00371"></a>00371   prefix_master_ipv4.<a class="code" href="structprefix__master.html#a8fae6d56cf41c0dcb7dd6f7c52498c82">delete_hook</a> = <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>;
<a name="l00372"></a>00372 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00373"></a>00373 <span class="preprocessor"></span>  prefix_master_ipv6.<a class="code" href="structprefix__master.html#a8fae6d56cf41c0dcb7dd6f7c52498c82">delete_hook</a> = <a class="code" href="bgp__fsm_8c.html#aad6d5d0fbfe60193366eaab88413f7af">func</a>;
<a name="l00374"></a>00374 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPVt6 */</span>
<a name="l00375"></a>00375 }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377 <span class="comment">/* Calculate new sequential number. */</span>
<a name="l00378"></a>00378 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00379"></a><a class="code" href="plist_8c.html#a904d825ec3eda59e9643219ca7975224">00379</a> <a class="code" href="plist_8c.html#a904d825ec3eda59e9643219ca7975224">prefix_new_seq_get</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist)
<a name="l00380"></a>00380 {
<a name="l00381"></a>00381   <span class="keywordtype">int</span> maxseq;
<a name="l00382"></a>00382   <span class="keywordtype">int</span> newseq;
<a name="l00383"></a>00383   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00384"></a>00384 
<a name="l00385"></a>00385   maxseq = newseq = 0;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387   <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l00388"></a>00388     {
<a name="l00389"></a>00389       <span class="keywordflow">if</span> (maxseq &lt; pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>)
<a name="l00390"></a>00390     maxseq = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>;
<a name="l00391"></a>00391     }
<a name="l00392"></a>00392 
<a name="l00393"></a>00393   newseq = ((maxseq / 5) * 5) + 5;
<a name="l00394"></a>00394   
<a name="l00395"></a>00395   <span class="keywordflow">return</span> newseq;
<a name="l00396"></a>00396 }
<a name="l00397"></a>00397 
<a name="l00398"></a>00398 <span class="comment">/* Return prefix list entry which has same seq number. */</span>
<a name="l00399"></a>00399 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *
<a name="l00400"></a><a class="code" href="plist_8c.html#a3391f1e2d34d34267e7d1f140733b323">00400</a> <a class="code" href="plist_8c.html#a3391f1e2d34d34267e7d1f140733b323">prefix_seq_check</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist, <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>)
<a name="l00401"></a>00401 {
<a name="l00402"></a>00402   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00403"></a>00403 
<a name="l00404"></a>00404   <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l00405"></a>00405     <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> == seq)
<a name="l00406"></a>00406       <span class="keywordflow">return</span> pentry;
<a name="l00407"></a>00407   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00408"></a>00408 }
<a name="l00409"></a>00409 
<a name="l00410"></a>00410 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *
<a name="l00411"></a><a class="code" href="plist_8c.html#a12fa199b8801b68dff14355b02ea8d68">00411</a> <a class="code" href="plist_8c.html#a12fa199b8801b68dff14355b02ea8d68">prefix_list_entry_lookup</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="structprefix.html">prefix</a>,
<a name="l00412"></a>00412               <span class="keyword">enum</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9">prefix_list_type</a> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>, <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>, <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>, <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>)
<a name="l00413"></a>00413 {
<a name="l00414"></a>00414   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00415"></a>00415 
<a name="l00416"></a>00416   <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l00417"></a>00417     <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (&amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>, prefix) &amp;&amp; pentry-&gt;<a class="code" href="structprefix__list__entry.html#a0fd0b49238c4282c6dc6c3f4dc7fa90b">type</a> == type)
<a name="l00418"></a>00418       {
<a name="l00419"></a>00419     <span class="keywordflow">if</span> (seq &gt;= 0 &amp;&amp; pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> != seq)
<a name="l00420"></a>00420       <span class="keywordflow">continue</span>;
<a name="l00421"></a>00421 
<a name="l00422"></a>00422     <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a> != le)
<a name="l00423"></a>00423       <span class="keywordflow">continue</span>;
<a name="l00424"></a>00424     <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a> != ge)
<a name="l00425"></a>00425       <span class="keywordflow">continue</span>;
<a name="l00426"></a>00426 
<a name="l00427"></a>00427     <span class="keywordflow">return</span> pentry;
<a name="l00428"></a>00428       }
<a name="l00429"></a>00429 
<a name="l00430"></a>00430   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00431"></a>00431 }
<a name="l00432"></a>00432 
<a name="l00433"></a>00433 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00434"></a><a class="code" href="plist_8c.html#a83dd197123948964d7442e70b9659049">00434</a> <a class="code" href="plist_8c.html#a83dd197123948964d7442e70b9659049">prefix_list_entry_delete</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist, 
<a name="l00435"></a>00435               <span class="keyword">struct</span> <a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry,
<a name="l00436"></a>00436               <span class="keywordtype">int</span> update_list)
<a name="l00437"></a>00437 {
<a name="l00438"></a>00438   <span class="keywordflow">if</span> (plist == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> || pentry == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00439"></a>00439     <span class="keywordflow">return</span>;
<a name="l00440"></a>00440   <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a>)
<a name="l00441"></a>00441     pentry-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a>-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a> = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>;
<a name="l00442"></a>00442   <span class="keywordflow">else</span>
<a name="l00443"></a>00443     plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a> = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>;
<a name="l00444"></a>00444   <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l00445"></a>00445     pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a> = pentry-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a>;
<a name="l00446"></a>00446   <span class="keywordflow">else</span>
<a name="l00447"></a>00447     plist-&gt;<a class="code" href="structprefix__list.html#a4590b1ea140ac135b0bf913208c1ca76">tail</a> = pentry-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a>;
<a name="l00448"></a>00448 
<a name="l00449"></a>00449   <a class="code" href="plist_8c.html#a7b951b9596550f0a9fccca8549d27dcc">prefix_list_entry_free</a> (pentry);
<a name="l00450"></a>00450 
<a name="l00451"></a>00451   plist-&gt;<a class="code" href="structprefix__list.html#a5eb75f52779c50e8c1aff2d16c961aed">count</a>--;
<a name="l00452"></a>00452 
<a name="l00453"></a>00453   <span class="keywordflow">if</span> (update_list)
<a name="l00454"></a>00454     {
<a name="l00455"></a>00455       <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#abc435f7afcbac9749f25b91857e20cd4">master</a>-&gt;<a class="code" href="structprefix__master.html#a8fae6d56cf41c0dcb7dd6f7c52498c82">delete_hook</a>)
<a name="l00456"></a>00456     (*plist-&gt;<a class="code" href="structprefix__list.html#abc435f7afcbac9749f25b91857e20cd4">master</a>-&gt;<a class="code" href="structprefix__master.html#a8fae6d56cf41c0dcb7dd6f7c52498c82">delete_hook</a>) (plist);
<a name="l00457"></a>00457 
<a name="l00458"></a>00458       <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; plist-&gt;<a class="code" href="structprefix__list.html#a4590b1ea140ac135b0bf913208c1ca76">tail</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00459"></a>00459     <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (plist);
<a name="l00460"></a>00460       <span class="keywordflow">else</span>
<a name="l00461"></a>00461     plist-&gt;<a class="code" href="structprefix__list.html#abc435f7afcbac9749f25b91857e20cd4">master</a>-&gt;<a class="code" href="structprefix__master.html#a5bc8b25011ca831bd90c798ae8b01d9c">recent</a> = plist;
<a name="l00462"></a>00462     }
<a name="l00463"></a>00463 }
<a name="l00464"></a>00464 
<a name="l00465"></a>00465 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00466"></a><a class="code" href="plist_8c.html#a8905f1c3e46af09014ca59e95c124402">00466</a> <a class="code" href="plist_8c.html#a8905f1c3e46af09014ca59e95c124402">prefix_list_entry_add</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist,
<a name="l00467"></a>00467                <span class="keyword">struct</span> <a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry)
<a name="l00468"></a>00468 {
<a name="l00469"></a>00469   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *replace;
<a name="l00470"></a>00470   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *point;
<a name="l00471"></a>00471 
<a name="l00472"></a>00472   <span class="comment">/* Automatic asignment of seq no. */</span>
<a name="l00473"></a>00473   <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> == -1)
<a name="l00474"></a>00474     pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> = <a class="code" href="plist_8c.html#a904d825ec3eda59e9643219ca7975224">prefix_new_seq_get</a> (plist);
<a name="l00475"></a>00475 
<a name="l00476"></a>00476   <span class="comment">/* Is there any same seq prefix list entry? */</span>
<a name="l00477"></a>00477   replace = <a class="code" href="plist_8c.html#a3391f1e2d34d34267e7d1f140733b323">prefix_seq_check</a> (plist, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>);
<a name="l00478"></a>00478   <span class="keywordflow">if</span> (replace)
<a name="l00479"></a>00479     <a class="code" href="plist_8c.html#a83dd197123948964d7442e70b9659049">prefix_list_entry_delete</a> (plist, replace, 0);
<a name="l00480"></a>00480 
<a name="l00481"></a>00481   <span class="comment">/* Check insert point. */</span>
<a name="l00482"></a>00482   <span class="keywordflow">for</span> (point = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; point; point = point-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l00483"></a>00483     <span class="keywordflow">if</span> (point-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> &gt;= pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>)
<a name="l00484"></a>00484       <span class="keywordflow">break</span>;
<a name="l00485"></a>00485 
<a name="l00486"></a>00486   <span class="comment">/* In case of this is the first element of the list. */</span>
<a name="l00487"></a>00487   pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a> = point;
<a name="l00488"></a>00488 
<a name="l00489"></a>00489   <span class="keywordflow">if</span> (point)
<a name="l00490"></a>00490     {
<a name="l00491"></a>00491       <span class="keywordflow">if</span> (point-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a>)
<a name="l00492"></a>00492     point-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a>-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a> = pentry;
<a name="l00493"></a>00493       <span class="keywordflow">else</span>
<a name="l00494"></a>00494     plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a> = pentry;
<a name="l00495"></a>00495 
<a name="l00496"></a>00496       pentry-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a> = point-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a>;
<a name="l00497"></a>00497       point-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a> = pentry;
<a name="l00498"></a>00498     }
<a name="l00499"></a>00499   <span class="keywordflow">else</span>
<a name="l00500"></a>00500     {
<a name="l00501"></a>00501       <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a4590b1ea140ac135b0bf913208c1ca76">tail</a>)
<a name="l00502"></a>00502     plist-&gt;<a class="code" href="structprefix__list.html#a4590b1ea140ac135b0bf913208c1ca76">tail</a>-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a> = pentry;
<a name="l00503"></a>00503       <span class="keywordflow">else</span>
<a name="l00504"></a>00504     plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a> = pentry;
<a name="l00505"></a>00505 
<a name="l00506"></a>00506       pentry-&gt;<a class="code" href="structprefix__list__entry.html#ab14322762f5c7cc409c27bbddbe8c68b">prev</a> = plist-&gt;<a class="code" href="structprefix__list.html#a4590b1ea140ac135b0bf913208c1ca76">tail</a>;
<a name="l00507"></a>00507       plist-&gt;<a class="code" href="structprefix__list.html#a4590b1ea140ac135b0bf913208c1ca76">tail</a> = pentry;
<a name="l00508"></a>00508     }
<a name="l00509"></a>00509 
<a name="l00510"></a>00510   <span class="comment">/* Increment count. */</span>
<a name="l00511"></a>00511   plist-&gt;<a class="code" href="structprefix__list.html#a5eb75f52779c50e8c1aff2d16c961aed">count</a>++;
<a name="l00512"></a>00512 
<a name="l00513"></a>00513   <span class="comment">/* Run hook function. */</span>
<a name="l00514"></a>00514   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#abc435f7afcbac9749f25b91857e20cd4">master</a>-&gt;<a class="code" href="structprefix__master.html#a863565c86e74e7e82d860e9b9ab8ad51">add_hook</a>)
<a name="l00515"></a>00515     (*plist-&gt;<a class="code" href="structprefix__list.html#abc435f7afcbac9749f25b91857e20cd4">master</a>-&gt;<a class="code" href="structprefix__master.html#a863565c86e74e7e82d860e9b9ab8ad51">add_hook</a>) (plist);
<a name="l00516"></a>00516 
<a name="l00517"></a>00517   plist-&gt;<a class="code" href="structprefix__list.html#abc435f7afcbac9749f25b91857e20cd4">master</a>-&gt;<a class="code" href="structprefix__master.html#a5bc8b25011ca831bd90c798ae8b01d9c">recent</a> = plist;
<a name="l00518"></a>00518 }
<a name="l00519"></a>00519 
<a name="l00520"></a>00520 <span class="comment">/* Return string of prefix_list_type. */</span>
<a name="l00521"></a>00521 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *
<a name="l00522"></a><a class="code" href="plist_8c.html#a4427a251943c1308e6a58494a4239619">00522</a> <a class="code" href="plist_8c.html#a4427a251943c1308e6a58494a4239619">prefix_list_type_str</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry)
<a name="l00523"></a>00523 {
<a name="l00524"></a>00524   <span class="keywordflow">switch</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a0fd0b49238c4282c6dc6c3f4dc7fa90b">type</a>)
<a name="l00525"></a>00525     {
<a name="l00526"></a>00526     <span class="keywordflow">case</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a6dd95e4ac6d2a01c478cd44b9bc2427a">PREFIX_PERMIT</a>:
<a name="l00527"></a>00527       <span class="keywordflow">return</span> <span class="stringliteral">&quot;permit&quot;</span>;
<a name="l00528"></a>00528     <span class="keywordflow">case</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>:
<a name="l00529"></a>00529       <span class="keywordflow">return</span> <span class="stringliteral">&quot;deny&quot;</span>;
<a name="l00530"></a>00530     <span class="keywordflow">default</span>:
<a name="l00531"></a>00531       <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;
<a name="l00532"></a>00532     }
<a name="l00533"></a>00533 }
<a name="l00534"></a>00534 
<a name="l00535"></a>00535 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00536"></a><a class="code" href="plist_8c.html#a7238b024a8127022cbb84a44aeec6a0c">00536</a> <a class="code" href="plist_8c.html#a7238b024a8127022cbb84a44aeec6a0c">prefix_list_entry_match</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry, <span class="keyword">struct</span> <a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>)
<a name="l00537"></a>00537 {
<a name="l00538"></a>00538   <span class="keywordtype">int</span> ret;
<a name="l00539"></a>00539 
<a name="l00540"></a>00540   ret = <a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (&amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>, p);
<a name="l00541"></a>00541   <span class="keywordflow">if</span> (! ret)
<a name="l00542"></a>00542     <span class="keywordflow">return</span> 0;
<a name="l00543"></a>00543   
<a name="l00544"></a>00544   <span class="comment">/* In case of le nor ge is specified, exact match is performed. */</span>
<a name="l00545"></a>00545   <span class="keywordflow">if</span> (! pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a> &amp;&amp; ! pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>)
<a name="l00546"></a>00546     {
<a name="l00547"></a>00547       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> != p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l00548"></a>00548     <span class="keywordflow">return</span> 0;
<a name="l00549"></a>00549     }
<a name="l00550"></a>00550   <span class="keywordflow">else</span>
<a name="l00551"></a>00551     {  
<a name="l00552"></a>00552       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>)
<a name="l00553"></a>00553     <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &gt; pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>)
<a name="l00554"></a>00554       <span class="keywordflow">return</span> 0;
<a name="l00555"></a>00555 
<a name="l00556"></a>00556       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>)
<a name="l00557"></a>00557     <span class="keywordflow">if</span> (p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a> &lt; pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>)
<a name="l00558"></a>00558       <span class="keywordflow">return</span> 0;
<a name="l00559"></a>00559     }
<a name="l00560"></a>00560   <span class="keywordflow">return</span> 1;
<a name="l00561"></a>00561 }
<a name="l00562"></a>00562 
<a name="l00563"></a>00563 <span class="keyword">enum</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9">prefix_list_type</a>
<a name="l00564"></a><a class="code" href="plist_8h.html#a4fd744336aa5f5f86241192d32dd6f67">00564</a> <a class="code" href="plist_8c.html#a6fd9bac08d2cb3d2e315d88af146a7f0">prefix_list_apply</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist, <span class="keywordtype">void</span> *<span class="keywordtype">object</span>)
<a name="l00565"></a>00565 {
<a name="l00566"></a>00566   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00567"></a>00567   <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00568"></a>00568 
<a name="l00569"></a>00569   p = (<span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *) <span class="keywordtype">object</span>;
<a name="l00570"></a>00570 
<a name="l00571"></a>00571   <span class="keywordflow">if</span> (plist == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00572"></a>00572     <span class="keywordflow">return</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>;
<a name="l00573"></a>00573 
<a name="l00574"></a>00574   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a5eb75f52779c50e8c1aff2d16c961aed">count</a> == 0)
<a name="l00575"></a>00575     <span class="keywordflow">return</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a6dd95e4ac6d2a01c478cd44b9bc2427a">PREFIX_PERMIT</a>;
<a name="l00576"></a>00576 
<a name="l00577"></a>00577   <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l00578"></a>00578     {
<a name="l00579"></a>00579       pentry-&gt;<a class="code" href="structprefix__list__entry.html#a3ed052c80674ec74c1254d0d7bd3f5db">refcnt</a>++;
<a name="l00580"></a>00580       <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a7238b024a8127022cbb84a44aeec6a0c">prefix_list_entry_match</a> (pentry, p))
<a name="l00581"></a>00581     {
<a name="l00582"></a>00582       pentry-&gt;<a class="code" href="structprefix__list__entry.html#a9b3fcb078ec13759da069c1349257b9c">hitcnt</a>++;
<a name="l00583"></a>00583       <span class="keywordflow">return</span> pentry-&gt;<a class="code" href="structprefix__list__entry.html#a0fd0b49238c4282c6dc6c3f4dc7fa90b">type</a>;
<a name="l00584"></a>00584     }
<a name="l00585"></a>00585     }
<a name="l00586"></a>00586 
<a name="l00587"></a>00587   <span class="keywordflow">return</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>;
<a name="l00588"></a>00588 }
<a name="l00589"></a>00589 
<a name="l00590"></a><a class="code" href="plist_8c.html#a43c4623c2553d09a59385aabe971d75d">00590</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="zebra_8h.html#a9d373a9b65ff25b2db84c07394e1c212">__attribute__</a> ((unused))
<a name="l00591"></a>00591 prefix_list_print (struct <a class="code" href="structprefix__list.html">prefix_list</a> *plist)
<a name="l00592"></a>00592 {
<a name="l00593"></a>00593   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00594"></a>00594 
<a name="l00595"></a>00595   <span class="keywordflow">if</span> (plist == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00596"></a>00596     <span class="keywordflow">return</span>;
<a name="l00597"></a>00597 
<a name="l00598"></a>00598   printf (<span class="stringliteral">&quot;ip prefix-list %s: %d entries\n&quot;</span>, plist-&gt;name, plist-&gt;count);
<a name="l00599"></a>00599 
<a name="l00600"></a>00600   <span class="keywordflow">for</span> (pentry = plist-&gt;head; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l00601"></a>00601     {
<a name="l00602"></a>00602       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a57aeba7f4f09a2cefbca6f858ccc4409">any</a>)
<a name="l00603"></a>00603     printf (<span class="stringliteral">&quot;any %s\n&quot;</span>, <a class="code" href="plist_8c.html#a4427a251943c1308e6a58494a4239619">prefix_list_type_str</a> (pentry));
<a name="l00604"></a>00604       <span class="keywordflow">else</span>
<a name="l00605"></a>00605     {
<a name="l00606"></a>00606       <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a>;
<a name="l00607"></a>00607       <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l00608"></a>00608       
<a name="l00609"></a>00609       p = &amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>;
<a name="l00610"></a>00610       
<a name="l00611"></a>00611       printf (<span class="stringliteral">&quot;  seq %d %s %s/%d&quot;</span>, 
<a name="l00612"></a>00612           pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>,
<a name="l00613"></a>00613           <a class="code" href="plist_8c.html#a4427a251943c1308e6a58494a4239619">prefix_list_type_str</a> (pentry),
<a name="l00614"></a>00614           <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, BUFSIZ),
<a name="l00615"></a>00615           p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00616"></a>00616       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>)
<a name="l00617"></a>00617         printf (<span class="stringliteral">&quot; ge %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>);
<a name="l00618"></a>00618       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>)
<a name="l00619"></a>00619         printf (<span class="stringliteral">&quot; le %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>);
<a name="l00620"></a>00620       printf (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00621"></a>00621     }
<a name="l00622"></a>00622     }
<a name="l00623"></a>00623 }
<a name="l00624"></a>00624 
<a name="l00625"></a>00625 <span class="comment">/* Retrun 1 when plist already include pentry policy. */</span>
<a name="l00626"></a>00626 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *
<a name="l00627"></a><a class="code" href="plist_8c.html#a0ba5060c373d3aaa0c858e70e427a1e3">00627</a> <a class="code" href="plist_8c.html#a0ba5060c373d3aaa0c858e70e427a1e3">prefix_entry_dup_check</a> (<span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist,
<a name="l00628"></a>00628             <span class="keyword">struct</span> <a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *<span class="keyword">new</span>)
<a name="l00629"></a>00629 {
<a name="l00630"></a>00630   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00631"></a>00631   <span class="keywordtype">int</span> <a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> = 0;
<a name="l00632"></a>00632 
<a name="l00633"></a>00633   <span class="keywordflow">if</span> (new-&gt;seq == -1)
<a name="l00634"></a>00634     seq = <a class="code" href="plist_8c.html#a904d825ec3eda59e9643219ca7975224">prefix_new_seq_get</a> (plist);
<a name="l00635"></a>00635   <span class="keywordflow">else</span>
<a name="l00636"></a>00636     seq = <span class="keyword">new</span>-&gt;seq;
<a name="l00637"></a>00637 
<a name="l00638"></a>00638   <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l00639"></a>00639     {
<a name="l00640"></a>00640       <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (&amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>, &amp;new-&gt;<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>)
<a name="l00641"></a>00641       &amp;&amp; pentry-&gt;<a class="code" href="structprefix__list__entry.html#a0fd0b49238c4282c6dc6c3f4dc7fa90b">type</a> == new-&gt;type
<a name="l00642"></a>00642       &amp;&amp; pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a> == new-&gt;le
<a name="l00643"></a>00643       &amp;&amp; pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a> == new-&gt;ge
<a name="l00644"></a>00644       &amp;&amp; pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> != seq)
<a name="l00645"></a>00645     <span class="keywordflow">return</span> pentry;
<a name="l00646"></a>00646     }
<a name="l00647"></a>00647   <span class="keywordflow">return</span> <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00648"></a>00648 }
<a name="l00649"></a>00649 
<a name="l00650"></a>00650 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00651"></a><a class="code" href="plist_8c.html#aa91435129369f151dfe2b2a3d242e65c">00651</a> <a class="code" href="plist_8c.html#aa91435129369f151dfe2b2a3d242e65c">vty_invalid_prefix_range</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix.html">prefix</a>)
<a name="l00652"></a>00652 {
<a name="l00653"></a>00653   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Invalid prefix range for %s, make sure: len &lt; ge-value &lt;= le-value%s&quot;</span>,
<a name="l00654"></a>00654            prefix, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00655"></a>00655   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00656"></a>00656 }
<a name="l00657"></a>00657 
<a name="l00658"></a>00658 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00659"></a><a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">00659</a> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, 
<a name="l00660"></a>00660                          <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *typestr,
<a name="l00661"></a>00661              <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix.html">prefix</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>)
<a name="l00662"></a>00662 {
<a name="l00663"></a>00663   <span class="keywordtype">int</span> ret;
<a name="l00664"></a>00664   <span class="keyword">enum</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9">prefix_list_type</a> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00665"></a>00665   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l00666"></a>00666   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00667"></a>00667   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *dup;
<a name="l00668"></a>00668   <span class="keyword">struct </span>prefix p;
<a name="l00669"></a>00669   <span class="keywordtype">int</span> any = 0;
<a name="l00670"></a>00670   <span class="keywordtype">int</span> seqnum = -1;
<a name="l00671"></a>00671   <span class="keywordtype">int</span> lenum = 0;
<a name="l00672"></a>00672   <span class="keywordtype">int</span> genum = 0;
<a name="l00673"></a>00673 
<a name="l00674"></a>00674   <span class="comment">/* Sequential number. */</span>
<a name="l00675"></a>00675   <span class="keywordflow">if</span> (seq)
<a name="l00676"></a>00676     seqnum = atoi (seq);
<a name="l00677"></a>00677 
<a name="l00678"></a>00678   <span class="comment">/* ge and le number */</span>
<a name="l00679"></a>00679   <span class="keywordflow">if</span> (ge)
<a name="l00680"></a>00680     genum = atoi (ge);
<a name="l00681"></a>00681   <span class="keywordflow">if</span> (le)
<a name="l00682"></a>00682     lenum = atoi (le);
<a name="l00683"></a>00683 
<a name="l00684"></a>00684   <span class="comment">/* Check filter type. */</span>
<a name="l00685"></a>00685   <span class="keywordflow">if</span> (strncmp (<span class="stringliteral">&quot;permit&quot;</span>, typestr, 1) == 0)
<a name="l00686"></a>00686     type = <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a6dd95e4ac6d2a01c478cd44b9bc2427a">PREFIX_PERMIT</a>;
<a name="l00687"></a>00687   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strncmp (<span class="stringliteral">&quot;deny&quot;</span>, typestr, 1) == 0)
<a name="l00688"></a>00688     type = <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>;
<a name="l00689"></a>00689   <span class="keywordflow">else</span>
<a name="l00690"></a>00690     {
<a name="l00691"></a>00691       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% prefix type must be permit or deny%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00692"></a>00692       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00693"></a>00693     }
<a name="l00694"></a>00694 
<a name="l00695"></a>00695   <span class="comment">/* &quot;any&quot; is special token for matching any IPv4 addresses.  */</span>
<a name="l00696"></a>00696   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l00697"></a>00697     {
<a name="l00698"></a>00698       <span class="keywordflow">if</span> (strncmp (<span class="stringliteral">&quot;any&quot;</span>, prefix, strlen (prefix)) == 0)
<a name="l00699"></a>00699     {
<a name="l00700"></a>00700       ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (<span class="stringliteral">&quot;0.0.0.0/0&quot;</span>, (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;p);
<a name="l00701"></a>00701       genum = 0;
<a name="l00702"></a>00702       lenum = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l00703"></a>00703       any = 1;
<a name="l00704"></a>00704     }
<a name="l00705"></a>00705       <span class="keywordflow">else</span>
<a name="l00706"></a>00706     ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (prefix, (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;p);
<a name="l00707"></a>00707 
<a name="l00708"></a>00708       <span class="keywordflow">if</span> (ret &lt;= 0)
<a name="l00709"></a>00709     {
<a name="l00710"></a>00710       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed IPv4 prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00711"></a>00711       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00712"></a>00712     }
<a name="l00713"></a>00713     }
<a name="l00714"></a>00714 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00715"></a>00715 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l00716"></a>00716     {
<a name="l00717"></a>00717       <span class="keywordflow">if</span> (strncmp (<span class="stringliteral">&quot;any&quot;</span>, prefix, strlen (prefix)) == 0)
<a name="l00718"></a>00718     {
<a name="l00719"></a>00719       ret = str2prefix_ipv6 (<span class="stringliteral">&quot;::/0&quot;</span>, (<span class="keyword">struct</span> prefix_ipv6 *) &amp;p);
<a name="l00720"></a>00720       genum = 0;
<a name="l00721"></a>00721       lenum = <a class="code" href="prefix_8h.html#a05e4b561a81bb5a6f28ac69717d25dbb">IPV6_MAX_BITLEN</a>;
<a name="l00722"></a>00722       any = 1;
<a name="l00723"></a>00723     }
<a name="l00724"></a>00724       <span class="keywordflow">else</span>
<a name="l00725"></a>00725     ret = str2prefix_ipv6 (prefix, (<span class="keyword">struct</span> prefix_ipv6 *) &amp;p);
<a name="l00726"></a>00726 
<a name="l00727"></a>00727       <span class="keywordflow">if</span> (ret &lt;= 0)
<a name="l00728"></a>00728     {
<a name="l00729"></a>00729       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed IPv6 prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00730"></a>00730       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00731"></a>00731     }
<a name="l00732"></a>00732     }
<a name="l00733"></a>00733 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00734"></a>00734 
<a name="l00735"></a>00735   <span class="comment">/* ge and le check. */</span>
<a name="l00736"></a>00736   <span class="keywordflow">if</span> (genum &amp;&amp; genum &lt;= p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l00737"></a>00737     <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#aa91435129369f151dfe2b2a3d242e65c">vty_invalid_prefix_range</a> (vty, prefix);
<a name="l00738"></a>00738 
<a name="l00739"></a>00739   <span class="keywordflow">if</span> (lenum &amp;&amp; lenum &lt;= p.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l00740"></a>00740     <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#aa91435129369f151dfe2b2a3d242e65c">vty_invalid_prefix_range</a> (vty, prefix);
<a name="l00741"></a>00741 
<a name="l00742"></a>00742   <span class="keywordflow">if</span> (lenum &amp;&amp; genum &gt; lenum)
<a name="l00743"></a>00743     <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#aa91435129369f151dfe2b2a3d242e65c">vty_invalid_prefix_range</a> (vty, prefix);
<a name="l00744"></a>00744 
<a name="l00745"></a>00745   <span class="keywordflow">if</span> (genum &amp;&amp; lenum == (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ? 32 : 128))
<a name="l00746"></a>00746     lenum = 0;
<a name="l00747"></a>00747 
<a name="l00748"></a>00748   <span class="comment">/* Get prefix_list with name. */</span>
<a name="l00749"></a>00749   plist = <a class="code" href="plist_8c.html#ae7b9515a190ca9184e5b84d69597409c">prefix_list_get</a> (afi, name);
<a name="l00750"></a>00750 
<a name="l00751"></a>00751   <span class="comment">/* Make prefix entry. */</span>
<a name="l00752"></a>00752   pentry = <a class="code" href="plist_8c.html#a11688eb24d1194d7d1b754d8261dfe9a">prefix_list_entry_make</a> (&amp;p, type, seqnum, lenum, genum, any);
<a name="l00753"></a>00753     
<a name="l00754"></a>00754   <span class="comment">/* Check same policy. */</span>
<a name="l00755"></a>00755   dup = <a class="code" href="plist_8c.html#a0ba5060c373d3aaa0c858e70e427a1e3">prefix_entry_dup_check</a> (plist, pentry);
<a name="l00756"></a>00756 
<a name="l00757"></a>00757   <span class="keywordflow">if</span> (dup)
<a name="l00758"></a>00758     {
<a name="l00759"></a>00759       <a class="code" href="plist_8c.html#a7b951b9596550f0a9fccca8549d27dcc">prefix_list_entry_free</a> (pentry);
<a name="l00760"></a>00760       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Insertion failed - prefix-list entry exists:%s&quot;</span>,
<a name="l00761"></a>00761            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00762"></a>00762       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;   seq %d %s %s&quot;</span>, dup-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>, typestr, prefix);
<a name="l00763"></a>00763       <span class="keywordflow">if</span> (! any &amp;&amp; genum)
<a name="l00764"></a>00764     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ge %d&quot;</span>, genum);
<a name="l00765"></a>00765       <span class="keywordflow">if</span> (! any &amp;&amp; lenum)
<a name="l00766"></a>00766     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; le %d&quot;</span>, lenum);
<a name="l00767"></a>00767       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00768"></a>00768       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00769"></a>00769     }
<a name="l00770"></a>00770 
<a name="l00771"></a>00771   <span class="comment">/* Install new filter to the access_list. */</span>
<a name="l00772"></a>00772   <a class="code" href="plist_8c.html#a8905f1c3e46af09014ca59e95c124402">prefix_list_entry_add</a> (plist, pentry);
<a name="l00773"></a>00773 
<a name="l00774"></a>00774   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00775"></a>00775 }
<a name="l00776"></a>00776 
<a name="l00777"></a>00777 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00778"></a><a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">00778</a> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, 
<a name="l00779"></a>00779                            <span class="keyword">const</span> <span class="keywordtype">char</span> *seq, <span class="keyword">const</span> <span class="keywordtype">char</span> *typestr,
<a name="l00780"></a>00780                <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix.html">prefix</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *ge, <span class="keyword">const</span> <span class="keywordtype">char</span> *le)
<a name="l00781"></a>00781 {
<a name="l00782"></a>00782   <span class="keywordtype">int</span> ret;
<a name="l00783"></a>00783   <span class="keyword">enum</span> <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9">prefix_list_type</a> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>;
<a name="l00784"></a>00784   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l00785"></a>00785   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00786"></a>00786   <span class="keyword">struct </span>prefix p;
<a name="l00787"></a>00787   <span class="keywordtype">int</span> seqnum = -1;
<a name="l00788"></a>00788   <span class="keywordtype">int</span> lenum = 0;
<a name="l00789"></a>00789   <span class="keywordtype">int</span> genum = 0;
<a name="l00790"></a>00790 
<a name="l00791"></a>00791   <span class="comment">/* Check prefix list name. */</span>
<a name="l00792"></a>00792   plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, name);
<a name="l00793"></a>00793   <span class="keywordflow">if</span> (! plist)
<a name="l00794"></a>00794     {
<a name="l00795"></a>00795       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Can&#39;t find specified prefix-list%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00796"></a>00796       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00797"></a>00797     }
<a name="l00798"></a>00798 
<a name="l00799"></a>00799   <span class="comment">/* Only prefix-list name specified, delete the entire prefix-list. */</span>
<a name="l00800"></a>00800   <span class="keywordflow">if</span> (seq == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; typestr == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; prefix == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; 
<a name="l00801"></a>00801       ge == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; le == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00802"></a>00802     {
<a name="l00803"></a>00803       <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (plist);
<a name="l00804"></a>00804       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00805"></a>00805     }
<a name="l00806"></a>00806 
<a name="l00807"></a>00807   <span class="comment">/* We must have, at a minimum, both the type and prefix here */</span>
<a name="l00808"></a>00808   <span class="keywordflow">if</span> ((typestr == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>) || (prefix == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>))
<a name="l00809"></a>00809     {
<a name="l00810"></a>00810       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Both prefix and type required%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00811"></a>00811       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00812"></a>00812     }
<a name="l00813"></a>00813 
<a name="l00814"></a>00814   <span class="comment">/* Check sequence number. */</span>
<a name="l00815"></a>00815   <span class="keywordflow">if</span> (seq)
<a name="l00816"></a>00816     seqnum = atoi (seq);
<a name="l00817"></a>00817 
<a name="l00818"></a>00818   <span class="comment">/* ge and le number */</span>
<a name="l00819"></a>00819   <span class="keywordflow">if</span> (ge)
<a name="l00820"></a>00820     genum = atoi (ge);
<a name="l00821"></a>00821   <span class="keywordflow">if</span> (le)
<a name="l00822"></a>00822     lenum = atoi (le);
<a name="l00823"></a>00823 
<a name="l00824"></a>00824   <span class="comment">/* Check of filter type. */</span>
<a name="l00825"></a>00825   <span class="keywordflow">if</span> (strncmp (<span class="stringliteral">&quot;permit&quot;</span>, typestr, 1) == 0)
<a name="l00826"></a>00826     type = <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a6dd95e4ac6d2a01c478cd44b9bc2427a">PREFIX_PERMIT</a>;
<a name="l00827"></a>00827   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (strncmp (<span class="stringliteral">&quot;deny&quot;</span>, typestr, 1) == 0)
<a name="l00828"></a>00828     type = <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>;
<a name="l00829"></a>00829   <span class="keywordflow">else</span>
<a name="l00830"></a>00830     {
<a name="l00831"></a>00831       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% prefix type must be permit or deny%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00832"></a>00832       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00833"></a>00833     }
<a name="l00834"></a>00834 
<a name="l00835"></a>00835   <span class="comment">/* &quot;any&quot; is special token for matching any IPv4 addresses.  */</span>
<a name="l00836"></a>00836   <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>)
<a name="l00837"></a>00837     {
<a name="l00838"></a>00838       <span class="keywordflow">if</span> (strncmp (<span class="stringliteral">&quot;any&quot;</span>, prefix, strlen (prefix)) == 0)
<a name="l00839"></a>00839     {
<a name="l00840"></a>00840       ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (<span class="stringliteral">&quot;0.0.0.0/0&quot;</span>, (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;p);
<a name="l00841"></a>00841       genum = 0;
<a name="l00842"></a>00842       lenum = <a class="code" href="prefix_8h.html#a9bd48f210d9f91d189e70196918f82c6">IPV4_MAX_BITLEN</a>;
<a name="l00843"></a>00843     }
<a name="l00844"></a>00844       <span class="keywordflow">else</span>
<a name="l00845"></a>00845     ret = <a class="code" href="prefix_8c.html#aae422250092661b36915d1769df957f7">str2prefix_ipv4</a> (prefix, (<span class="keyword">struct</span> <a class="code" href="structprefix__ipv4.html">prefix_ipv4</a> *) &amp;p);
<a name="l00846"></a>00846 
<a name="l00847"></a>00847       <span class="keywordflow">if</span> (ret &lt;= 0)
<a name="l00848"></a>00848     {
<a name="l00849"></a>00849       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed IPv4 prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00850"></a>00850       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00851"></a>00851     }
<a name="l00852"></a>00852     }
<a name="l00853"></a>00853 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l00854"></a>00854 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (afi == <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>)
<a name="l00855"></a>00855     {
<a name="l00856"></a>00856       <span class="keywordflow">if</span> (strncmp (<span class="stringliteral">&quot;any&quot;</span>, prefix, strlen (prefix)) == 0)
<a name="l00857"></a>00857     {
<a name="l00858"></a>00858       ret = str2prefix_ipv6 (<span class="stringliteral">&quot;::/0&quot;</span>, (<span class="keyword">struct</span> prefix_ipv6 *) &amp;p);
<a name="l00859"></a>00859       genum = 0;
<a name="l00860"></a>00860       lenum = <a class="code" href="prefix_8h.html#a05e4b561a81bb5a6f28ac69717d25dbb">IPV6_MAX_BITLEN</a>;
<a name="l00861"></a>00861     }
<a name="l00862"></a>00862       <span class="keywordflow">else</span>
<a name="l00863"></a>00863     ret = str2prefix_ipv6 (prefix, (<span class="keyword">struct</span> prefix_ipv6 *) &amp;p);
<a name="l00864"></a>00864 
<a name="l00865"></a>00865       <span class="keywordflow">if</span> (ret &lt;= 0)
<a name="l00866"></a>00866     {
<a name="l00867"></a>00867       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Malformed IPv6 prefix%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00868"></a>00868       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00869"></a>00869     }
<a name="l00870"></a>00870     }
<a name="l00871"></a>00871 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l00872"></a>00872 
<a name="l00873"></a>00873   <span class="comment">/* Lookup prefix entry. */</span>
<a name="l00874"></a>00874   pentry = <a class="code" href="plist_8c.html#a12fa199b8801b68dff14355b02ea8d68">prefix_list_entry_lookup</a>(plist, &amp;p, type, seqnum, lenum, genum);
<a name="l00875"></a>00875 
<a name="l00876"></a>00876   <span class="keywordflow">if</span> (pentry == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00877"></a>00877     {
<a name="l00878"></a>00878       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Can&#39;t find specified prefix-list%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00879"></a>00879       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00880"></a>00880     }
<a name="l00881"></a>00881 
<a name="l00882"></a>00882   <span class="comment">/* Install new filter to the access_list. */</span>
<a name="l00883"></a>00883   <a class="code" href="plist_8c.html#a83dd197123948964d7442e70b9659049">prefix_list_entry_delete</a> (plist, pentry, 1);
<a name="l00884"></a>00884 
<a name="l00885"></a>00885   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00886"></a>00886 }
<a name="l00887"></a>00887 
<a name="l00888"></a>00888 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00889"></a><a class="code" href="plist_8c.html#a967d4bfce3abaf7ff731f83916865769">00889</a> <a class="code" href="plist_8c.html#a967d4bfce3abaf7ff731f83916865769">vty_prefix_list_desc_unset</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l00890"></a>00890 {
<a name="l00891"></a>00891   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l00892"></a>00892 
<a name="l00893"></a>00893   plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, name);
<a name="l00894"></a>00894   <span class="keywordflow">if</span> (! plist)
<a name="l00895"></a>00895     {
<a name="l00896"></a>00896       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Can&#39;t find specified prefix-list%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00897"></a>00897       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l00898"></a>00898     }
<a name="l00899"></a>00899 
<a name="l00900"></a>00900   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>)
<a name="l00901"></a>00901     {
<a name="l00902"></a>00902       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>);
<a name="l00903"></a>00903       plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l00904"></a>00904     }
<a name="l00905"></a>00905 
<a name="l00906"></a>00906   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; plist-&gt;<a class="code" href="structprefix__list.html#a4590b1ea140ac135b0bf913208c1ca76">tail</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l00907"></a>00907     <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (plist);
<a name="l00908"></a>00908 
<a name="l00909"></a>00909   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l00910"></a>00910 }
<a name="l00911"></a>00911 
<a name="l00912"></a><a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9da">00912</a> <span class="keyword">enum</span> <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9da">display_type</a>
<a name="l00913"></a>00913 {
<a name="l00914"></a><a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">00914</a>   <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">normal_display</a>,
<a name="l00915"></a><a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa4f73a8a3374db92e774557a8fbebf464">00915</a>   <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa4f73a8a3374db92e774557a8fbebf464">summary_display</a>,
<a name="l00916"></a><a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daadf476e9d7ac7a27be212c355eaba5289">00916</a>   <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daadf476e9d7ac7a27be212c355eaba5289">detail_display</a>,
<a name="l00917"></a><a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daafaf34fbb84ff2f9c3d86bfdd95808973">00917</a>   <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daafaf34fbb84ff2f9c3d86bfdd95808973">sequential_display</a>,
<a name="l00918"></a><a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daaec00d791d6317f12d38aa0d34341814f">00918</a>   <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daaec00d791d6317f12d38aa0d34341814f">longer_display</a>,
<a name="l00919"></a><a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa7e1c04a1b88f32fbdaedaab215c95578">00919</a>   <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa7e1c04a1b88f32fbdaedaab215c95578">first_match_display</a>
<a name="l00920"></a>00920 };
<a name="l00921"></a>00921 
<a name="l00922"></a>00922 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00923"></a><a class="code" href="plist_8c.html#af7f863c48d252daafe63a994bf5576b9">00923</a> <a class="code" href="plist_8c.html#af7f863c48d252daafe63a994bf5576b9">vty_show_prefix_entry</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist,
<a name="l00924"></a>00924                <span class="keyword">struct</span> <a class="code" href="structprefix__master.html">prefix_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>, <span class="keyword">enum</span> <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9da">display_type</a> dtype,
<a name="l00925"></a>00925                <span class="keywordtype">int</span> seqnum)
<a name="l00926"></a>00926 {
<a name="l00927"></a>00927   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l00928"></a>00928 
<a name="l00929"></a>00929   <span class="comment">/* Print the name of the protocol */</span>
<a name="l00930"></a>00930   <span class="keywordflow">if</span> (<a class="code" href="log_8c.html#a69cba84b9cc9c438ad5f5b1379b702b5">zlog_default</a>)
<a name="l00931"></a>00931       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s: &quot;</span>, <a class="code" href="log_8c.html#a104618d1dc8bb7b6b5c36f8969f2a49e">zlog_proto_names</a>[<a class="code" href="log_8c.html#a69cba84b9cc9c438ad5f5b1379b702b5">zlog_default</a>-&gt;<a class="code" href="structzlog.html#acafcb64affec5374e8e4d61fded92812">protocol</a>]);
<a name="l00932"></a>00932                                                                            
<a name="l00933"></a>00933   <span class="keywordflow">if</span> (dtype == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">normal_display</a>)
<a name="l00934"></a>00934     {
<a name="l00935"></a>00935       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ip%s prefix-list %s: %d entries%s&quot;</span>,
<a name="l00936"></a>00936            afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;v6&quot;</span>,
<a name="l00937"></a>00937            plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, plist-&gt;<a class="code" href="structprefix__list.html#a5eb75f52779c50e8c1aff2d16c961aed">count</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00938"></a>00938       <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>)
<a name="l00939"></a>00939     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;   Description: %s%s&quot;</span>, plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00940"></a>00940     }
<a name="l00941"></a>00941   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (dtype == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa4f73a8a3374db92e774557a8fbebf464">summary_display</a> || dtype == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daadf476e9d7ac7a27be212c355eaba5289">detail_display</a>)
<a name="l00942"></a>00942     {
<a name="l00943"></a>00943       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ip%s prefix-list %s:%s&quot;</span>,
<a name="l00944"></a>00944            afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;v6&quot;</span>, plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00945"></a>00945 
<a name="l00946"></a>00946       <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>)
<a name="l00947"></a>00947     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;   Description: %s%s&quot;</span>, plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00948"></a>00948 
<a name="l00949"></a>00949       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;   count: %d, range entries: %d, sequences: %d - %d%s&quot;</span>,
<a name="l00950"></a>00950            plist-&gt;<a class="code" href="structprefix__list.html#a5eb75f52779c50e8c1aff2d16c961aed">count</a>, plist-&gt;<a class="code" href="structprefix__list.html#aa86b17f452c1528f83dae31f0c753e58">rangecount</a>, 
<a name="l00951"></a>00951            plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a> ? plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> : 0, 
<a name="l00952"></a>00952            plist-&gt;<a class="code" href="structprefix__list.html#a4590b1ea140ac135b0bf913208c1ca76">tail</a> ? plist-&gt;<a class="code" href="structprefix__list.html#a4590b1ea140ac135b0bf913208c1ca76">tail</a>-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> : 0,
<a name="l00953"></a>00953            <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00954"></a>00954     }
<a name="l00955"></a>00955 
<a name="l00956"></a>00956   <span class="keywordflow">if</span> (dtype != <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa4f73a8a3374db92e774557a8fbebf464">summary_display</a>)
<a name="l00957"></a>00957     {
<a name="l00958"></a>00958       <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l00959"></a>00959     {
<a name="l00960"></a>00960       <span class="keywordflow">if</span> (dtype == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daafaf34fbb84ff2f9c3d86bfdd95808973">sequential_display</a> &amp;&amp; pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a> != seqnum)
<a name="l00961"></a>00961         <span class="keywordflow">continue</span>;
<a name="l00962"></a>00962         
<a name="l00963"></a>00963       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;   &quot;</span>);
<a name="l00964"></a>00964 
<a name="l00965"></a>00965       <span class="keywordflow">if</span> (master-&gt;<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a>)
<a name="l00966"></a>00966         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;seq %d &quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>);
<a name="l00967"></a>00967 
<a name="l00968"></a>00968       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s &quot;</span>, <a class="code" href="plist_8c.html#a4427a251943c1308e6a58494a4239619">prefix_list_type_str</a> (pentry));
<a name="l00969"></a>00969 
<a name="l00970"></a>00970       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a57aeba7f4f09a2cefbca6f858ccc4409">any</a>)
<a name="l00971"></a>00971         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;any&quot;</span>);
<a name="l00972"></a>00972       <span class="keywordflow">else</span>
<a name="l00973"></a>00973         {
<a name="l00974"></a>00974           <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = &amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>;
<a name="l00975"></a>00975           <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l00976"></a>00976 
<a name="l00977"></a>00977           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s/%d&quot;</span>,
<a name="l00978"></a>00978                <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, BUFSIZ),
<a name="l00979"></a>00979                p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l00980"></a>00980 
<a name="l00981"></a>00981           <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>)
<a name="l00982"></a>00982         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ge %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>);
<a name="l00983"></a>00983           <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>)
<a name="l00984"></a>00984         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; le %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>);
<a name="l00985"></a>00985         }
<a name="l00986"></a>00986 
<a name="l00987"></a>00987       <span class="keywordflow">if</span> (dtype == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daadf476e9d7ac7a27be212c355eaba5289">detail_display</a> || dtype == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daafaf34fbb84ff2f9c3d86bfdd95808973">sequential_display</a>)
<a name="l00988"></a>00988         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; (hit count: %ld, refcount: %ld)&quot;</span>, 
<a name="l00989"></a>00989              pentry-&gt;<a class="code" href="structprefix__list__entry.html#a9b3fcb078ec13759da069c1349257b9c">hitcnt</a>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a3ed052c80674ec74c1254d0d7bd3f5db">refcnt</a>);
<a name="l00990"></a>00990       
<a name="l00991"></a>00991       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l00992"></a>00992     }
<a name="l00993"></a>00993     }
<a name="l00994"></a>00994 }
<a name="l00995"></a>00995 
<a name="l00996"></a>00996 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l00997"></a><a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">00997</a> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>,
<a name="l00998"></a>00998               <span class="keyword">const</span> <span class="keywordtype">char</span> *seq, <span class="keyword">enum</span> <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9da">display_type</a> dtype)
<a name="l00999"></a>00999 {
<a name="l01000"></a>01000   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l01001"></a>01001   <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l01002"></a>01002   <span class="keywordtype">int</span> <a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a> = 0;
<a name="l01003"></a>01003 
<a name="l01004"></a>01004   master = <a class="code" href="plist_8c.html#a1c6cce0123ce7ec82be06154b2bf458a">prefix_master_get</a> (afi);
<a name="l01005"></a>01005   <span class="keywordflow">if</span> (master == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01006"></a>01006     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01007"></a>01007 
<a name="l01008"></a>01008   <span class="keywordflow">if</span> (seq)
<a name="l01009"></a>01009     seqnum = atoi (seq);
<a name="l01010"></a>01010 
<a name="l01011"></a>01011   <span class="keywordflow">if</span> (name)
<a name="l01012"></a>01012     {
<a name="l01013"></a>01013       plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, name);
<a name="l01014"></a>01014       <span class="keywordflow">if</span> (! plist)
<a name="l01015"></a>01015     {
<a name="l01016"></a>01016       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Can&#39;t find specified prefix-list%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01017"></a>01017       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01018"></a>01018     }
<a name="l01019"></a>01019       <a class="code" href="plist_8c.html#af7f863c48d252daafe63a994bf5576b9">vty_show_prefix_entry</a> (vty, afi, plist, master, dtype, seqnum);
<a name="l01020"></a>01020     }
<a name="l01021"></a>01021   <span class="keywordflow">else</span>
<a name="l01022"></a>01022     {
<a name="l01023"></a>01023       <span class="keywordflow">if</span> (dtype == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daadf476e9d7ac7a27be212c355eaba5289">detail_display</a> || dtype == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa4f73a8a3374db92e774557a8fbebf464">summary_display</a>)
<a name="l01024"></a>01024     {
<a name="l01025"></a>01025       <span class="keywordflow">if</span> (master-&gt;<a class="code" href="structprefix__master.html#a5bc8b25011ca831bd90c798ae8b01d9c">recent</a>)
<a name="l01026"></a>01026         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;Prefix-list with the last deletion/insertion: %s%s&quot;</span>,
<a name="l01027"></a>01027              master-&gt;<a class="code" href="structprefix__master.html#a5bc8b25011ca831bd90c798ae8b01d9c">recent</a>-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01028"></a>01028     }
<a name="l01029"></a>01029 
<a name="l01030"></a>01030       <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l01031"></a>01031     <a class="code" href="plist_8c.html#af7f863c48d252daafe63a994bf5576b9">vty_show_prefix_entry</a> (vty, afi, plist, master, dtype, seqnum);
<a name="l01032"></a>01032 
<a name="l01033"></a>01033       <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l01034"></a>01034     <a class="code" href="plist_8c.html#af7f863c48d252daafe63a994bf5576b9">vty_show_prefix_entry</a> (vty, afi, plist, master, dtype, seqnum);
<a name="l01035"></a>01035     }
<a name="l01036"></a>01036 
<a name="l01037"></a>01037   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01038"></a>01038 }
<a name="l01039"></a>01039 
<a name="l01040"></a>01040 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01041"></a><a class="code" href="plist_8c.html#af89e4f57cee4109ce7f6ae930cec65a1">01041</a> <a class="code" href="plist_8c.html#af89e4f57cee4109ce7f6ae930cec65a1">vty_show_prefix_list_prefix</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, 
<a name="l01042"></a>01042                  <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix.html">prefix</a>, <span class="keyword">enum</span> <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9da">display_type</a> <a class="code" href="bgp__open_8h.html#abbb4c0b967acba158c34c110d81b3ab4">type</a>)
<a name="l01043"></a>01043 {
<a name="l01044"></a>01044   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l01045"></a>01045   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l01046"></a>01046   <span class="keyword">struct </span>prefix p;
<a name="l01047"></a>01047   <span class="keywordtype">int</span> ret;
<a name="l01048"></a>01048   <span class="keywordtype">int</span> match;
<a name="l01049"></a>01049 
<a name="l01050"></a>01050   plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, name);
<a name="l01051"></a>01051   <span class="keywordflow">if</span> (! plist)
<a name="l01052"></a>01052     {
<a name="l01053"></a>01053       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Can&#39;t find specified prefix-list%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01054"></a>01054       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01055"></a>01055     }
<a name="l01056"></a>01056 
<a name="l01057"></a>01057   ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (prefix, &amp;p);
<a name="l01058"></a>01058   <span class="keywordflow">if</span> (ret &lt;= 0)
<a name="l01059"></a>01059     {
<a name="l01060"></a>01060       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% prefix is malformed%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01061"></a>01061       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01062"></a>01062     }
<a name="l01063"></a>01063 
<a name="l01064"></a>01064   <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l01065"></a>01065     {
<a name="l01066"></a>01066       match = 0;
<a name="l01067"></a>01067 
<a name="l01068"></a>01068       <span class="keywordflow">if</span> (type == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">normal_display</a> || type == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa7e1c04a1b88f32fbdaedaab215c95578">first_match_display</a>)
<a name="l01069"></a>01069     <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#ac3645297b5669182b5052aa7689712af">prefix_same</a> (&amp;p, &amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>))
<a name="l01070"></a>01070       match = 1;
<a name="l01071"></a>01071 
<a name="l01072"></a>01072       <span class="keywordflow">if</span> (type == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daaec00d791d6317f12d38aa0d34341814f">longer_display</a>)
<a name="l01073"></a>01073     <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (&amp;p, &amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>))
<a name="l01074"></a>01074       match = 1;
<a name="l01075"></a>01075 
<a name="l01076"></a>01076       <span class="keywordflow">if</span> (match)
<a name="l01077"></a>01077     {
<a name="l01078"></a>01078       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;   seq %d %s &quot;</span>, 
<a name="l01079"></a>01079            pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>,
<a name="l01080"></a>01080            <a class="code" href="plist_8c.html#a4427a251943c1308e6a58494a4239619">prefix_list_type_str</a> (pentry));
<a name="l01081"></a>01081 
<a name="l01082"></a>01082       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a57aeba7f4f09a2cefbca6f858ccc4409">any</a>)
<a name="l01083"></a>01083         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;any&quot;</span>);
<a name="l01084"></a>01084       <span class="keywordflow">else</span>
<a name="l01085"></a>01085         {
<a name="l01086"></a>01086           <span class="keyword">struct </span>prefix *p = &amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>;
<a name="l01087"></a>01087           <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l01088"></a>01088           
<a name="l01089"></a>01089           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s/%d&quot;</span>,
<a name="l01090"></a>01090                <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, BUFSIZ),
<a name="l01091"></a>01091                p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l01092"></a>01092 
<a name="l01093"></a>01093           <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>)
<a name="l01094"></a>01094         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ge %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>);
<a name="l01095"></a>01095           <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>)
<a name="l01096"></a>01096         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; le %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>);
<a name="l01097"></a>01097         }
<a name="l01098"></a>01098       
<a name="l01099"></a>01099       <span class="keywordflow">if</span> (type == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">normal_display</a> || type == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa7e1c04a1b88f32fbdaedaab215c95578">first_match_display</a>)
<a name="l01100"></a>01100         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; (hit count: %ld, refcount: %ld)&quot;</span>, 
<a name="l01101"></a>01101              pentry-&gt;<a class="code" href="structprefix__list__entry.html#a9b3fcb078ec13759da069c1349257b9c">hitcnt</a>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a3ed052c80674ec74c1254d0d7bd3f5db">refcnt</a>);
<a name="l01102"></a>01102 
<a name="l01103"></a>01103       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01104"></a>01104 
<a name="l01105"></a>01105       <span class="keywordflow">if</span> (type == <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa7e1c04a1b88f32fbdaedaab215c95578">first_match_display</a>)
<a name="l01106"></a>01106         <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01107"></a>01107     }
<a name="l01108"></a>01108     }
<a name="l01109"></a>01109   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01110"></a>01110 }
<a name="l01111"></a>01111 
<a name="l01112"></a>01112 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l01113"></a><a class="code" href="plist_8c.html#a7267b07ebe24db236720ffd7513fcd6b">01113</a> <a class="code" href="plist_8c.html#a7267b07ebe24db236720ffd7513fcd6b">vty_clear_prefix_list</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, 
<a name="l01114"></a>01114                        <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structprefix.html">prefix</a>)
<a name="l01115"></a>01115 {
<a name="l01116"></a>01116   <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l01117"></a>01117   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l01118"></a>01118   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l01119"></a>01119   <span class="keywordtype">int</span> ret;
<a name="l01120"></a>01120   <span class="keyword">struct </span>prefix p;
<a name="l01121"></a>01121 
<a name="l01122"></a>01122   master = <a class="code" href="plist_8c.html#a1c6cce0123ce7ec82be06154b2bf458a">prefix_master_get</a> (afi);
<a name="l01123"></a>01123   <span class="keywordflow">if</span> (master == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01124"></a>01124     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01125"></a>01125 
<a name="l01126"></a>01126   <span class="keywordflow">if</span> (name == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a> &amp;&amp; prefix == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l01127"></a>01127     {
<a name="l01128"></a>01128       <span class="keywordflow">for</span> (plist = master-&gt;num.<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; plist; plist = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l01129"></a>01129     <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l01130"></a>01130       pentry-&gt;<a class="code" href="structprefix__list__entry.html#a9b3fcb078ec13759da069c1349257b9c">hitcnt</a> = 0;
<a name="l01131"></a>01131 
<a name="l01132"></a>01132       <span class="keywordflow">for</span> (plist = master-&gt;str.<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; plist; plist = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l01133"></a>01133     <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l01134"></a>01134       pentry-&gt;<a class="code" href="structprefix__list__entry.html#a9b3fcb078ec13759da069c1349257b9c">hitcnt</a> = 0;
<a name="l01135"></a>01135     }
<a name="l01136"></a>01136   <span class="keywordflow">else</span>
<a name="l01137"></a>01137     {
<a name="l01138"></a>01138       plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (afi, name);
<a name="l01139"></a>01139       <span class="keywordflow">if</span> (! plist)
<a name="l01140"></a>01140     {
<a name="l01141"></a>01141       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% Can&#39;t find specified prefix-list%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01142"></a>01142       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01143"></a>01143     }
<a name="l01144"></a>01144 
<a name="l01145"></a>01145       <span class="keywordflow">if</span> (prefix)
<a name="l01146"></a>01146     {
<a name="l01147"></a>01147       ret = <a class="code" href="prefix_8c.html#a35f57d44562d00baaf5d227d03214786">str2prefix</a> (prefix, &amp;p);
<a name="l01148"></a>01148       <span class="keywordflow">if</span> (ret &lt;= 0)
<a name="l01149"></a>01149         {
<a name="l01150"></a>01150           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%% prefix is malformed%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l01151"></a>01151           <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l01152"></a>01152         }
<a name="l01153"></a>01153     }
<a name="l01154"></a>01154 
<a name="l01155"></a>01155       <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l01156"></a>01156     {
<a name="l01157"></a>01157       <span class="keywordflow">if</span> (prefix)
<a name="l01158"></a>01158         {
<a name="l01159"></a>01159           <span class="keywordflow">if</span> (<a class="code" href="prefix_8c.html#a8c5d68665a4b036a361330bee254318e">prefix_match</a> (&amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>, &amp;p))
<a name="l01160"></a>01160         pentry-&gt;<a class="code" href="structprefix__list__entry.html#a9b3fcb078ec13759da069c1349257b9c">hitcnt</a> = 0;
<a name="l01161"></a>01161         }
<a name="l01162"></a>01162       <span class="keywordflow">else</span>
<a name="l01163"></a>01163         pentry-&gt;<a class="code" href="structprefix__list__entry.html#a9b3fcb078ec13759da069c1349257b9c">hitcnt</a> = 0;
<a name="l01164"></a>01164     }
<a name="l01165"></a>01165     }
<a name="l01166"></a>01166   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01167"></a>01167 }
<a name="l01168"></a>01168 
<a name="l01169"></a><a class="code" href="plist_8c.html#a8a66d037271f9c3db6ebee840965a075">01169</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list,
<a name="l01170"></a>01170        ip_prefix_list_cmd,
<a name="l01171"></a>01171        <span class="stringliteral">&quot;ip prefix-list WORD (deny|permit) (A.B.C.D/M|any)&quot;</span>,
<a name="l01172"></a>01172        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01173"></a>01173        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01174"></a>01174        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01175"></a>01175        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01176"></a>01176        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01177"></a>01177        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01178"></a>01178        <span class="stringliteral">&quot;Any prefix match. Same as \&quot;0.0.0.0/0 le 32\&quot;\n&quot;</span>)
<a name="l01179"></a>01179 {
<a name="l01180"></a>01180   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 
<a name="l01181"></a>01181                   argv[1], argv[2], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01182"></a>01182 }
<a name="l01183"></a>01183 
<a name="l01184"></a><a class="code" href="plist_8c.html#a16c948bf6b5fb742fbf504dd70b5f674">01184</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_ge,
<a name="l01185"></a>01185        ip_prefix_list_ge_cmd,
<a name="l01186"></a>01186        <span class="stringliteral">&quot;ip prefix-list WORD (deny|permit) A.B.C.D/M ge &lt;0-32&gt;&quot;</span>,
<a name="l01187"></a>01187        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01188"></a>01188        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01189"></a>01189        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01190"></a>01190        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01191"></a>01191        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01192"></a>01192        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01193"></a>01193        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01194"></a>01194        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01195"></a>01195 {
<a name="l01196"></a>01196   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1], 
<a name="l01197"></a>01197                  argv[2], argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01198"></a>01198 }
<a name="l01199"></a>01199 
<a name="l01200"></a><a class="code" href="plist_8c.html#a6c43db5af942ca69c4d9e4219e5121ad">01200</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_ge_le,
<a name="l01201"></a>01201        ip_prefix_list_ge_le_cmd,
<a name="l01202"></a>01202        <span class="stringliteral">&quot;ip prefix-list WORD (deny|permit) A.B.C.D/M ge &lt;0-32&gt; le &lt;0-32&gt;&quot;</span>,
<a name="l01203"></a>01203        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01204"></a>01204        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01205"></a>01205        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01206"></a>01206        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01207"></a>01207        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01208"></a>01208        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01209"></a>01209        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01210"></a>01210        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>
<a name="l01211"></a>01211        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01212"></a>01212        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01213"></a>01213 {
<a name="l01214"></a>01214   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1], 
<a name="l01215"></a>01215                   argv[2], argv[3], argv[4]);
<a name="l01216"></a>01216 }
<a name="l01217"></a>01217 
<a name="l01218"></a><a class="code" href="plist_8c.html#afc970de90bfe9a3660296e4ce097f015">01218</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_le,
<a name="l01219"></a>01219        ip_prefix_list_le_cmd,
<a name="l01220"></a>01220        <span class="stringliteral">&quot;ip prefix-list WORD (deny|permit) A.B.C.D/M le &lt;0-32&gt;&quot;</span>,
<a name="l01221"></a>01221        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01222"></a>01222        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01223"></a>01223        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01224"></a>01224        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01225"></a>01225        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01226"></a>01226        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01227"></a>01227        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01228"></a>01228        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01229"></a>01229 {
<a name="l01230"></a>01230   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01231"></a>01231                   argv[2], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[3]);
<a name="l01232"></a>01232 }
<a name="l01233"></a>01233 
<a name="l01234"></a><a class="code" href="plist_8c.html#a0ee77e0711c97bad40bf0298bfc08c93">01234</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_le_ge,
<a name="l01235"></a>01235        ip_prefix_list_le_ge_cmd,
<a name="l01236"></a>01236        <span class="stringliteral">&quot;ip prefix-list WORD (deny|permit) A.B.C.D/M le &lt;0-32&gt; ge &lt;0-32&gt;&quot;</span>,
<a name="l01237"></a>01237        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01238"></a>01238        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01239"></a>01239        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01240"></a>01240        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01241"></a>01241        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01242"></a>01242        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01243"></a>01243        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01244"></a>01244        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>
<a name="l01245"></a>01245        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01246"></a>01246        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01247"></a>01247 {
<a name="l01248"></a>01248   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01249"></a>01249                   argv[2], argv[4], argv[3]);
<a name="l01250"></a>01250 }
<a name="l01251"></a>01251 
<a name="l01252"></a><a class="code" href="plist_8c.html#a212ea590270f0cb42b7228ec716b12ff">01252</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_seq,
<a name="l01253"></a>01253        ip_prefix_list_seq_cmd,
<a name="l01254"></a>01254        <span class="stringliteral">&quot;ip prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) (A.B.C.D/M|any)&quot;</span>,
<a name="l01255"></a>01255        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01256"></a>01256        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01257"></a>01257        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01258"></a>01258        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01259"></a>01259        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01260"></a>01260        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01261"></a>01261        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01262"></a>01262        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01263"></a>01263        <span class="stringliteral">&quot;Any prefix match. Same as \&quot;0.0.0.0/0 le 32\&quot;\n&quot;</span>)
<a name="l01264"></a>01264 {
<a name="l01265"></a>01265   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], argv[2],
<a name="l01266"></a>01266                   argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01267"></a>01267 }
<a name="l01268"></a>01268 
<a name="l01269"></a><a class="code" href="plist_8c.html#adba09d0167c7e471afd1fd05c6be97ec">01269</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_seq_ge,
<a name="l01270"></a>01270        ip_prefix_list_seq_ge_cmd,
<a name="l01271"></a>01271        <span class="stringliteral">&quot;ip prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) A.B.C.D/M ge &lt;0-32&gt;&quot;</span>,
<a name="l01272"></a>01272        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01273"></a>01273        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01274"></a>01274        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01275"></a>01275        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01276"></a>01276        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01277"></a>01277        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01278"></a>01278        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01279"></a>01279        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01280"></a>01280        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01281"></a>01281        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01282"></a>01282 {
<a name="l01283"></a>01283   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], argv[2],
<a name="l01284"></a>01284                   argv[3], argv[4], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01285"></a>01285 }
<a name="l01286"></a>01286 
<a name="l01287"></a><a class="code" href="plist_8c.html#afd0da5cb0358c7c993b4b0438debf985">01287</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_seq_ge_le,
<a name="l01288"></a>01288        ip_prefix_list_seq_ge_le_cmd,
<a name="l01289"></a>01289        <span class="stringliteral">&quot;ip prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) A.B.C.D/M ge &lt;0-32&gt; le &lt;0-32&gt;&quot;</span>,
<a name="l01290"></a>01290        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01291"></a>01291        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01292"></a>01292        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01293"></a>01293        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01294"></a>01294        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01295"></a>01295        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01296"></a>01296        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01297"></a>01297        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01298"></a>01298        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01299"></a>01299        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>
<a name="l01300"></a>01300        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01301"></a>01301        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01302"></a>01302 {
<a name="l01303"></a>01303   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], argv[2],
<a name="l01304"></a>01304                   argv[3], argv[4], argv[5]);
<a name="l01305"></a>01305 }
<a name="l01306"></a>01306 
<a name="l01307"></a><a class="code" href="plist_8c.html#a50328ffe2a2c8318ff75ccc190f77875">01307</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_seq_le,
<a name="l01308"></a>01308        ip_prefix_list_seq_le_cmd,
<a name="l01309"></a>01309        <span class="stringliteral">&quot;ip prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) A.B.C.D/M le &lt;0-32&gt;&quot;</span>,
<a name="l01310"></a>01310        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01311"></a>01311        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01312"></a>01312        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01313"></a>01313        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01314"></a>01314        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01315"></a>01315        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01316"></a>01316        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01317"></a>01317        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01318"></a>01318        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01319"></a>01319        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01320"></a>01320 {
<a name="l01321"></a>01321   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], argv[2],
<a name="l01322"></a>01322                   argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[4]);
<a name="l01323"></a>01323 }
<a name="l01324"></a>01324 
<a name="l01325"></a><a class="code" href="plist_8c.html#a4a03aaea2ab8f8e6d7b2328c6e52d566">01325</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_seq_le_ge,
<a name="l01326"></a>01326        ip_prefix_list_seq_le_ge_cmd,
<a name="l01327"></a>01327        <span class="stringliteral">&quot;ip prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) A.B.C.D/M le &lt;0-32&gt; ge &lt;0-32&gt;&quot;</span>,
<a name="l01328"></a>01328        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01329"></a>01329        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01330"></a>01330        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01331"></a>01331        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01332"></a>01332        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01333"></a>01333        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01334"></a>01334        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01335"></a>01335        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01336"></a>01336        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01337"></a>01337        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>
<a name="l01338"></a>01338        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01339"></a>01339        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01340"></a>01340 {
<a name="l01341"></a>01341   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], argv[2],
<a name="l01342"></a>01342                   argv[3], argv[5], argv[4]);
<a name="l01343"></a>01343 }
<a name="l01344"></a>01344 
<a name="l01345"></a><a class="code" href="plist_8c.html#a2680231fe7ad64338e7243ca54cd5312">01345</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list,
<a name="l01346"></a>01346        no_ip_prefix_list_cmd,
<a name="l01347"></a>01347        <span class="stringliteral">&quot;no ip prefix-list WORD&quot;</span>,
<a name="l01348"></a>01348        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01349"></a>01349        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01350"></a>01350        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01351"></a>01351        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>)
<a name="l01352"></a>01352 {
<a name="l01353"></a>01353   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l01354"></a>01354                     <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01355"></a>01355 }
<a name="l01356"></a>01356 
<a name="l01357"></a><a class="code" href="plist_8c.html#af92def98feb5310d699bca85f8dd251e">01357</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_prefix,
<a name="l01358"></a>01358        no_ip_prefix_list_prefix_cmd,
<a name="l01359"></a>01359        <span class="stringliteral">&quot;no ip prefix-list WORD (deny|permit) (A.B.C.D/M|any)&quot;</span>,
<a name="l01360"></a>01360        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01361"></a>01361        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01362"></a>01362        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01363"></a>01363        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01364"></a>01364        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01365"></a>01365        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01366"></a>01366        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01367"></a>01367        <span class="stringliteral">&quot;Any prefix match.  Same as \&quot;0.0.0.0/0 le 32\&quot;\n&quot;</span>)
<a name="l01368"></a>01368 {
<a name="l01369"></a>01369   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01370"></a>01370                     argv[2], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01371"></a>01371 }
<a name="l01372"></a>01372 
<a name="l01373"></a><a class="code" href="plist_8c.html#a86243b74dd4739297380580af6687218">01373</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_ge,
<a name="l01374"></a>01374        no_ip_prefix_list_ge_cmd,
<a name="l01375"></a>01375        <span class="stringliteral">&quot;no ip prefix-list WORD (deny|permit) A.B.C.D/M ge &lt;0-32&gt;&quot;</span>,
<a name="l01376"></a>01376        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01377"></a>01377        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01378"></a>01378        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01379"></a>01379        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01380"></a>01380        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01381"></a>01381        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01382"></a>01382        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01383"></a>01383        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01384"></a>01384        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01385"></a>01385 {
<a name="l01386"></a>01386   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01387"></a>01387                     argv[2], argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01388"></a>01388 }
<a name="l01389"></a>01389 
<a name="l01390"></a><a class="code" href="plist_8c.html#a412ed879b9a76115ba4a092a5b083296">01390</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_ge_le,
<a name="l01391"></a>01391        no_ip_prefix_list_ge_le_cmd,
<a name="l01392"></a>01392        <span class="stringliteral">&quot;no ip prefix-list WORD (deny|permit) A.B.C.D/M ge &lt;0-32&gt; le &lt;0-32&gt;&quot;</span>,
<a name="l01393"></a>01393        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01394"></a>01394        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01395"></a>01395        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01396"></a>01396        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01397"></a>01397        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01398"></a>01398        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01399"></a>01399        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01400"></a>01400        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01401"></a>01401        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>
<a name="l01402"></a>01402        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01403"></a>01403        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01404"></a>01404 {
<a name="l01405"></a>01405   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01406"></a>01406                     argv[2], argv[3], argv[4]);
<a name="l01407"></a>01407 }
<a name="l01408"></a>01408 
<a name="l01409"></a><a class="code" href="plist_8c.html#a8b5c86ef8c1af53b14df9ef6be5a9035">01409</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_le,
<a name="l01410"></a>01410        no_ip_prefix_list_le_cmd,
<a name="l01411"></a>01411        <span class="stringliteral">&quot;no ip prefix-list WORD (deny|permit) A.B.C.D/M le &lt;0-32&gt;&quot;</span>,
<a name="l01412"></a>01412        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01413"></a>01413        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01414"></a>01414        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01415"></a>01415        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01416"></a>01416        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01417"></a>01417        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01418"></a>01418        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01419"></a>01419        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01420"></a>01420        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01421"></a>01421 {
<a name="l01422"></a>01422   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01423"></a>01423                     argv[2], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[3]);
<a name="l01424"></a>01424 }
<a name="l01425"></a>01425 
<a name="l01426"></a><a class="code" href="plist_8c.html#aa9f7f514071c139465b465fda73f30d2">01426</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_le_ge,
<a name="l01427"></a>01427        no_ip_prefix_list_le_ge_cmd,
<a name="l01428"></a>01428        <span class="stringliteral">&quot;no ip prefix-list WORD (deny|permit) A.B.C.D/M le &lt;0-32&gt; ge &lt;0-32&gt;&quot;</span>,
<a name="l01429"></a>01429        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01430"></a>01430        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01431"></a>01431        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01432"></a>01432        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01433"></a>01433        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01434"></a>01434        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01435"></a>01435        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01436"></a>01436        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01437"></a>01437        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>
<a name="l01438"></a>01438        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01439"></a>01439        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01440"></a>01440 {
<a name="l01441"></a>01441   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01442"></a>01442                     argv[2], argv[4], argv[3]);
<a name="l01443"></a>01443 }
<a name="l01444"></a>01444 
<a name="l01445"></a><a class="code" href="plist_8c.html#a4d3cd0c2941e212bce98ef94dd8c1577">01445</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_seq,
<a name="l01446"></a>01446        no_ip_prefix_list_seq_cmd,
<a name="l01447"></a>01447        <span class="stringliteral">&quot;no ip prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) (A.B.C.D/M|any)&quot;</span>,
<a name="l01448"></a>01448        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01449"></a>01449        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01450"></a>01450        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01451"></a>01451        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01452"></a>01452        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01453"></a>01453        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01454"></a>01454        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01455"></a>01455        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01456"></a>01456        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01457"></a>01457        <span class="stringliteral">&quot;Any prefix match.  Same as \&quot;0.0.0.0/0 le 32\&quot;\n&quot;</span>)
<a name="l01458"></a>01458 {
<a name="l01459"></a>01459   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], argv[2],
<a name="l01460"></a>01460                     argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01461"></a>01461 }
<a name="l01462"></a>01462 
<a name="l01463"></a><a class="code" href="plist_8c.html#acab6ffc521d3302c1babf5a963b4c3ac">01463</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_seq_ge,
<a name="l01464"></a>01464        no_ip_prefix_list_seq_ge_cmd,
<a name="l01465"></a>01465        <span class="stringliteral">&quot;no ip prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) A.B.C.D/M ge &lt;0-32&gt;&quot;</span>,
<a name="l01466"></a>01466        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01467"></a>01467        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01468"></a>01468        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01469"></a>01469        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01470"></a>01470        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01471"></a>01471        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01472"></a>01472        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01473"></a>01473        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01474"></a>01474        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01475"></a>01475        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01476"></a>01476        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01477"></a>01477 {
<a name="l01478"></a>01478   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], argv[2],
<a name="l01479"></a>01479                     argv[3], argv[4], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01480"></a>01480 }
<a name="l01481"></a>01481 
<a name="l01482"></a><a class="code" href="plist_8c.html#abf2f26eb001d534af45e060401506ba2">01482</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_seq_ge_le,
<a name="l01483"></a>01483        no_ip_prefix_list_seq_ge_le_cmd,
<a name="l01484"></a>01484        <span class="stringliteral">&quot;no ip prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) A.B.C.D/M ge &lt;0-32&gt; le &lt;0-32&gt;&quot;</span>,
<a name="l01485"></a>01485        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01486"></a>01486        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01487"></a>01487        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01488"></a>01488        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01489"></a>01489        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01490"></a>01490        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01491"></a>01491        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01492"></a>01492        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01493"></a>01493        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01494"></a>01494        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01495"></a>01495        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>
<a name="l01496"></a>01496        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01497"></a>01497        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01498"></a>01498 {
<a name="l01499"></a>01499   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], argv[2],
<a name="l01500"></a>01500                     argv[3], argv[4], argv[5]);
<a name="l01501"></a>01501 }
<a name="l01502"></a>01502 
<a name="l01503"></a><a class="code" href="plist_8c.html#a9d3f546ed0b055fc7bbe7afe42c428c6">01503</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_seq_le,
<a name="l01504"></a>01504        no_ip_prefix_list_seq_le_cmd,
<a name="l01505"></a>01505        <span class="stringliteral">&quot;no ip prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) A.B.C.D/M le &lt;0-32&gt;&quot;</span>,
<a name="l01506"></a>01506        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01507"></a>01507        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01508"></a>01508        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01509"></a>01509        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01510"></a>01510        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01511"></a>01511        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01512"></a>01512        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01513"></a>01513        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01514"></a>01514        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01515"></a>01515        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01516"></a>01516        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01517"></a>01517 {
<a name="l01518"></a>01518   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], argv[2],
<a name="l01519"></a>01519                     argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[4]);
<a name="l01520"></a>01520 }
<a name="l01521"></a>01521 
<a name="l01522"></a><a class="code" href="plist_8c.html#a2176114d1b53ccb85383a8e6d4e653aa">01522</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_seq_le_ge,
<a name="l01523"></a>01523        no_ip_prefix_list_seq_le_ge_cmd,
<a name="l01524"></a>01524        <span class="stringliteral">&quot;no ip prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) A.B.C.D/M le &lt;0-32&gt; ge &lt;0-32&gt;&quot;</span>,
<a name="l01525"></a>01525        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01526"></a>01526        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01527"></a>01527        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01528"></a>01528        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01529"></a>01529        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01530"></a>01530        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01531"></a>01531        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01532"></a>01532        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01533"></a>01533        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01534"></a>01534        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01535"></a>01535        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>
<a name="l01536"></a>01536        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01537"></a>01537        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01538"></a>01538 {
<a name="l01539"></a>01539   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], argv[2],
<a name="l01540"></a>01540                     argv[3], argv[5], argv[4]);
<a name="l01541"></a>01541 }
<a name="l01542"></a>01542 
<a name="l01543"></a><a class="code" href="plist_8c.html#ab0c7b904c3dd19e8b942ee6a9e129b59">01543</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_sequence_number,
<a name="l01544"></a>01544        ip_prefix_list_sequence_number_cmd,
<a name="l01545"></a>01545        <span class="stringliteral">&quot;ip prefix-list sequence-number&quot;</span>,
<a name="l01546"></a>01546        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01547"></a>01547        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01548"></a>01548        <span class="stringliteral">&quot;Include/exclude sequence numbers in NVGEN\n&quot;</span>)
<a name="l01549"></a>01549 {
<a name="l01550"></a>01550   prefix_master_ipv4.<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a> = 1;
<a name="l01551"></a>01551   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01552"></a>01552 }
<a name="l01553"></a>01553 
<a name="l01554"></a><a class="code" href="plist_8c.html#a04eddf150b364b9e10238d76c6085e7e">01554</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_sequence_number,
<a name="l01555"></a>01555        no_ip_prefix_list_sequence_number_cmd,
<a name="l01556"></a>01556        <span class="stringliteral">&quot;no ip prefix-list sequence-number&quot;</span>,
<a name="l01557"></a>01557        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01558"></a>01558        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01559"></a>01559        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01560"></a>01560        <span class="stringliteral">&quot;Include/exclude sequence numbers in NVGEN\n&quot;</span>)
<a name="l01561"></a>01561 {
<a name="l01562"></a>01562   prefix_master_ipv4.<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a> = 0;
<a name="l01563"></a>01563   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01564"></a>01564 }
<a name="l01565"></a>01565 
<a name="l01566"></a><a class="code" href="plist_8c.html#a585843caa745bf39ef2056ab24a896d5">01566</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ip_prefix_list_description,
<a name="l01567"></a>01567        ip_prefix_list_description_cmd,
<a name="l01568"></a>01568        <span class="stringliteral">&quot;ip prefix-list WORD description .LINE&quot;</span>,
<a name="l01569"></a>01569        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01570"></a>01570        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01571"></a>01571        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01572"></a>01572        <span class="stringliteral">&quot;Prefix-list specific description\n&quot;</span>
<a name="l01573"></a>01573        <span class="stringliteral">&quot;Up to 80 characters describing this prefix-list\n&quot;</span>)
<a name="l01574"></a>01574 {
<a name="l01575"></a>01575   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l01576"></a>01576 
<a name="l01577"></a>01577   plist = <a class="code" href="plist_8c.html#ae7b9515a190ca9184e5b84d69597409c">prefix_list_get</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0]);
<a name="l01578"></a>01578   
<a name="l01579"></a>01579   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>)
<a name="l01580"></a>01580     {
<a name="l01581"></a>01581       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>);
<a name="l01582"></a>01582       plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l01583"></a>01583     }
<a name="l01584"></a>01584   plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a> = <a class="code" href="command_8c.html#a262c4f7766ffb060fe8b5012d58367a2">argv_concat</a>(argv, argc, 1);
<a name="l01585"></a>01585 
<a name="l01586"></a>01586   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l01587"></a>01587 }       
<a name="l01588"></a>01588 
<a name="l01589"></a><a class="code" href="plist_8c.html#a78c1f4bf9bf5c4124cc8221b5d8fd30b">01589</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ip_prefix_list_description,
<a name="l01590"></a>01590        no_ip_prefix_list_description_cmd,
<a name="l01591"></a>01591        <span class="stringliteral">&quot;no ip prefix-list WORD description&quot;</span>,
<a name="l01592"></a>01592        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01593"></a>01593        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01594"></a>01594        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01595"></a>01595        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01596"></a>01596        <span class="stringliteral">&quot;Prefix-list specific description\n&quot;</span>)
<a name="l01597"></a>01597 {
<a name="l01598"></a>01598   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a967d4bfce3abaf7ff731f83916865769">vty_prefix_list_desc_unset</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0]);
<a name="l01599"></a>01599 }
<a name="l01600"></a>01600 
<a name="l01601"></a><a class="code" href="plist_8c.html#a12ebdaff3ae64a1ca7c6f1ced4c63e7a">01601</a> <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_ip_prefix_list_description,
<a name="l01602"></a>01602        no_ip_prefix_list_description_arg_cmd,
<a name="l01603"></a>01603        <span class="stringliteral">&quot;no ip prefix-list WORD description .LINE&quot;</span>,
<a name="l01604"></a>01604        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01605"></a>01605        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01606"></a>01606        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01607"></a>01607        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01608"></a>01608        <span class="stringliteral">&quot;Prefix-list specific description\n&quot;</span>
<a name="l01609"></a>01609        <span class="stringliteral">&quot;Up to 80 characters describing this prefix-list\n&quot;</span>)
<a name="l01610"></a>01610 
<a name="l01611"></a>01611 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_prefix_list,
<a name="l01612"></a>01612        show_ip_prefix_list_cmd,
<a name="l01613"></a>01613        <span class="stringliteral">&quot;show ip prefix-list&quot;</span>,
<a name="l01614"></a>01614        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01615"></a>01615        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01616"></a>01616        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>)
<a name="l01617"></a>01617 {
<a name="l01618"></a>01618   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">normal_display</a>);
<a name="l01619"></a>01619 }
<a name="l01620"></a>01620 
<a name="l01621"></a><a class="code" href="plist_8c.html#a87a2f91d0c61ccbccf39155a5ee38c51">01621</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_prefix_list_name,
<a name="l01622"></a>01622        show_ip_prefix_list_name_cmd,
<a name="l01623"></a>01623        <span class="stringliteral">&quot;show ip prefix-list WORD&quot;</span>,
<a name="l01624"></a>01624        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01625"></a>01625        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01626"></a>01626        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01627"></a>01627        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>)
<a name="l01628"></a>01628 {
<a name="l01629"></a>01629   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">normal_display</a>);
<a name="l01630"></a>01630 }
<a name="l01631"></a>01631 
<a name="l01632"></a><a class="code" href="plist_8c.html#a1c3456395f2703799931411e5bf55542">01632</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_prefix_list_name_seq,
<a name="l01633"></a>01633        show_ip_prefix_list_name_seq_cmd,
<a name="l01634"></a>01634        <span class="stringliteral">&quot;show ip prefix-list WORD seq &lt;1-4294967295&gt;&quot;</span>,
<a name="l01635"></a>01635        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01636"></a>01636        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01637"></a>01637        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01638"></a>01638        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01639"></a>01639        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01640"></a>01640        <span class="stringliteral">&quot;Sequence number\n&quot;</span>)
<a name="l01641"></a>01641 {
<a name="l01642"></a>01642   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daafaf34fbb84ff2f9c3d86bfdd95808973">sequential_display</a>);
<a name="l01643"></a>01643 }
<a name="l01644"></a>01644 
<a name="l01645"></a><a class="code" href="plist_8c.html#a0a3362875510fee5557cd71ee66930df">01645</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_prefix_list_prefix,
<a name="l01646"></a>01646        show_ip_prefix_list_prefix_cmd,
<a name="l01647"></a>01647        <span class="stringliteral">&quot;show ip prefix-list WORD A.B.C.D/M&quot;</span>,
<a name="l01648"></a>01648        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01649"></a>01649        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01650"></a>01650        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01651"></a>01651        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01652"></a>01652        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l01653"></a>01653 {
<a name="l01654"></a>01654   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af89e4f57cee4109ce7f6ae930cec65a1">vty_show_prefix_list_prefix</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">normal_display</a>);
<a name="l01655"></a>01655 }
<a name="l01656"></a>01656 
<a name="l01657"></a><a class="code" href="plist_8c.html#a628bcdc155e1682405348888a7ee62c9">01657</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_prefix_list_prefix_longer,
<a name="l01658"></a>01658        show_ip_prefix_list_prefix_longer_cmd,
<a name="l01659"></a>01659        <span class="stringliteral">&quot;show ip prefix-list WORD A.B.C.D/M longer&quot;</span>,
<a name="l01660"></a>01660        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01661"></a>01661        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01662"></a>01662        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01663"></a>01663        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01664"></a>01664        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01665"></a>01665        <span class="stringliteral">&quot;Lookup longer prefix\n&quot;</span>)
<a name="l01666"></a>01666 {
<a name="l01667"></a>01667   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af89e4f57cee4109ce7f6ae930cec65a1">vty_show_prefix_list_prefix</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daaec00d791d6317f12d38aa0d34341814f">longer_display</a>);
<a name="l01668"></a>01668 }
<a name="l01669"></a>01669 
<a name="l01670"></a><a class="code" href="plist_8c.html#ab62f53693ac5b897b65edd1bc0cb11c8">01670</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_prefix_list_prefix_first_match,
<a name="l01671"></a>01671        show_ip_prefix_list_prefix_first_match_cmd,
<a name="l01672"></a>01672        <span class="stringliteral">&quot;show ip prefix-list WORD A.B.C.D/M first-match&quot;</span>,
<a name="l01673"></a>01673        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01674"></a>01674        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01675"></a>01675        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01676"></a>01676        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01677"></a>01677        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>
<a name="l01678"></a>01678        <span class="stringliteral">&quot;First matched prefix\n&quot;</span>)
<a name="l01679"></a>01679 {
<a name="l01680"></a>01680   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af89e4f57cee4109ce7f6ae930cec65a1">vty_show_prefix_list_prefix</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1], <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa7e1c04a1b88f32fbdaedaab215c95578">first_match_display</a>);
<a name="l01681"></a>01681 }
<a name="l01682"></a>01682 
<a name="l01683"></a><a class="code" href="plist_8c.html#a24373517346548ca214f49f570e2db78">01683</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_prefix_list_summary,
<a name="l01684"></a>01684        show_ip_prefix_list_summary_cmd,
<a name="l01685"></a>01685        <span class="stringliteral">&quot;show ip prefix-list summary&quot;</span>,
<a name="l01686"></a>01686        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01687"></a>01687        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01688"></a>01688        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01689"></a>01689        <span class="stringliteral">&quot;Summary of prefix lists\n&quot;</span>)
<a name="l01690"></a>01690 {
<a name="l01691"></a>01691   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa4f73a8a3374db92e774557a8fbebf464">summary_display</a>);
<a name="l01692"></a>01692 }
<a name="l01693"></a>01693 
<a name="l01694"></a><a class="code" href="plist_8c.html#a1668f39f4e72392b3dd50c0ff1cc90cf">01694</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_prefix_list_summary_name,
<a name="l01695"></a>01695        show_ip_prefix_list_summary_name_cmd,
<a name="l01696"></a>01696        <span class="stringliteral">&quot;show ip prefix-list summary WORD&quot;</span>,
<a name="l01697"></a>01697        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01698"></a>01698        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01699"></a>01699        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01700"></a>01700        <span class="stringliteral">&quot;Summary of prefix lists\n&quot;</span>
<a name="l01701"></a>01701        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>)
<a name="l01702"></a>01702 {
<a name="l01703"></a>01703   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa4f73a8a3374db92e774557a8fbebf464">summary_display</a>);
<a name="l01704"></a>01704 }
<a name="l01705"></a>01705 
<a name="l01706"></a>01706 
<a name="l01707"></a><a class="code" href="plist_8c.html#a0a96c52266c0a12297095504f05b1a51">01707</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_prefix_list_detail,
<a name="l01708"></a>01708        show_ip_prefix_list_detail_cmd,
<a name="l01709"></a>01709        <span class="stringliteral">&quot;show ip prefix-list detail&quot;</span>,
<a name="l01710"></a>01710        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01711"></a>01711        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01712"></a>01712        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01713"></a>01713        <span class="stringliteral">&quot;Detail of prefix lists\n&quot;</span>)
<a name="l01714"></a>01714 {
<a name="l01715"></a>01715   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daadf476e9d7ac7a27be212c355eaba5289">detail_display</a>);
<a name="l01716"></a>01716 }
<a name="l01717"></a>01717 
<a name="l01718"></a><a class="code" href="plist_8c.html#ae644f4eb1c68d19b79f0559903069a4b">01718</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ip_prefix_list_detail_name,
<a name="l01719"></a>01719        show_ip_prefix_list_detail_name_cmd,
<a name="l01720"></a>01720        <span class="stringliteral">&quot;show ip prefix-list detail WORD&quot;</span>,
<a name="l01721"></a>01721        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l01722"></a>01722        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01723"></a>01723        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01724"></a>01724        <span class="stringliteral">&quot;Detail of prefix lists\n&quot;</span>
<a name="l01725"></a>01725        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>)
<a name="l01726"></a>01726 {
<a name="l01727"></a>01727   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daadf476e9d7ac7a27be212c355eaba5289">detail_display</a>);
<a name="l01728"></a>01728 }
<a name="l01729"></a>01729 
<a name="l01730"></a><a class="code" href="plist_8c.html#abdbc59e171a1e0b5787083eec3a0ea2c">01730</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_ip_prefix_list,
<a name="l01731"></a>01731        clear_ip_prefix_list_cmd,
<a name="l01732"></a>01732        <span class="stringliteral">&quot;clear ip prefix-list&quot;</span>,
<a name="l01733"></a>01733        <a class="code" href="command_8h.html#a315549aca62f71abb3dfe8fd1770039a">CLEAR_STR</a>
<a name="l01734"></a>01734        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01735"></a>01735        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>)
<a name="l01736"></a>01736 {
<a name="l01737"></a>01737   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a7267b07ebe24db236720ffd7513fcd6b">vty_clear_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01738"></a>01738 }
<a name="l01739"></a>01739 
<a name="l01740"></a><a class="code" href="plist_8c.html#abec36b2aa3db9d00e273918e8941d71d">01740</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_ip_prefix_list_name,
<a name="l01741"></a>01741        clear_ip_prefix_list_name_cmd,
<a name="l01742"></a>01742        <span class="stringliteral">&quot;clear ip prefix-list WORD&quot;</span>,
<a name="l01743"></a>01743        <a class="code" href="command_8h.html#a315549aca62f71abb3dfe8fd1770039a">CLEAR_STR</a>
<a name="l01744"></a>01744        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01745"></a>01745        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01746"></a>01746        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>)
<a name="l01747"></a>01747 {
<a name="l01748"></a>01748   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a7267b07ebe24db236720ffd7513fcd6b">vty_clear_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01749"></a>01749 }
<a name="l01750"></a>01750 
<a name="l01751"></a><a class="code" href="plist_8c.html#a1468261263a8752d1af234c1e78bcec4">01751</a> <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_ip_prefix_list_name_prefix,
<a name="l01752"></a>01752        clear_ip_prefix_list_name_prefix_cmd,
<a name="l01753"></a>01753        <span class="stringliteral">&quot;clear ip prefix-list WORD A.B.C.D/M&quot;</span>,
<a name="l01754"></a>01754        <a class="code" href="command_8h.html#a315549aca62f71abb3dfe8fd1770039a">CLEAR_STR</a>
<a name="l01755"></a>01755        <a class="code" href="command_8h.html#af45438f811eb6711be47ea2555b12f75">IP_STR</a>
<a name="l01756"></a>01756        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01757"></a>01757        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01758"></a>01758        <span class="stringliteral">&quot;IP prefix &lt;network&gt;/&lt;length&gt;, e.g., 35.0.0.0/8\n&quot;</span>)
<a name="l01759"></a>01759 {
<a name="l01760"></a>01760   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a7267b07ebe24db236720ffd7513fcd6b">vty_clear_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, argv[0], argv[1]);
<a name="l01761"></a>01761 }
<a name="l01762"></a>01762 
<a name="l01763"></a>01763 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l01764"></a>01764 <span class="preprocessor"></span><a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list,
<a name="l01765"></a>01765        ipv6_prefix_list_cmd,
<a name="l01766"></a>01766        <span class="stringliteral">&quot;ipv6 prefix-list WORD (deny|permit) (X:X::X:X/M|any)&quot;</span>,
<a name="l01767"></a>01767        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01768"></a>01768        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01769"></a>01769        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01770"></a>01770        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01771"></a>01771        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01772"></a>01772        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01773"></a>01773        <span class="stringliteral">&quot;Any prefix match.  Same as \&quot;::0/0 le 128\&quot;\n&quot;</span>)
<a name="l01774"></a>01774 {
<a name="l01775"></a>01775   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, 
<a name="l01776"></a>01776                   argv[1], argv[2], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01777"></a>01777 }
<a name="l01778"></a>01778 
<a name="l01779"></a>01779 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_ge,
<a name="l01780"></a>01780        ipv6_prefix_list_ge_cmd,
<a name="l01781"></a>01781        <span class="stringliteral">&quot;ipv6 prefix-list WORD (deny|permit) X:X::X:X/M ge &lt;0-128&gt;&quot;</span>,
<a name="l01782"></a>01782        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01783"></a>01783        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01784"></a>01784        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01785"></a>01785        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01786"></a>01786        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01787"></a>01787        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01788"></a>01788        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01789"></a>01789        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01790"></a>01790 {
<a name="l01791"></a>01791   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1], 
<a name="l01792"></a>01792                  argv[2], argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01793"></a>01793 }
<a name="l01794"></a>01794 
<a name="l01795"></a>01795 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_ge_le,
<a name="l01796"></a>01796        ipv6_prefix_list_ge_le_cmd,
<a name="l01797"></a>01797        <span class="stringliteral">&quot;ipv6 prefix-list WORD (deny|permit) X:X::X:X/M ge &lt;0-128&gt; le &lt;0-128&gt;&quot;</span>,
<a name="l01798"></a>01798        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01799"></a>01799        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01800"></a>01800        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01801"></a>01801        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01802"></a>01802        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01803"></a>01803        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01804"></a>01804        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01805"></a>01805        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>
<a name="l01806"></a>01806        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01807"></a>01807        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01808"></a>01808 
<a name="l01809"></a>01809 {
<a name="l01810"></a>01810   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1], 
<a name="l01811"></a>01811                   argv[2], argv[3], argv[4]);
<a name="l01812"></a>01812 }
<a name="l01813"></a>01813 
<a name="l01814"></a>01814 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_le,
<a name="l01815"></a>01815        ipv6_prefix_list_le_cmd,
<a name="l01816"></a>01816        <span class="stringliteral">&quot;ipv6 prefix-list WORD (deny|permit) X:X::X:X/M le &lt;0-128&gt;&quot;</span>,
<a name="l01817"></a>01817        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01818"></a>01818        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01819"></a>01819        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01820"></a>01820        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01821"></a>01821        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01822"></a>01822        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01823"></a>01823        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01824"></a>01824        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01825"></a>01825 {
<a name="l01826"></a>01826   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01827"></a>01827                   argv[2], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[3]);
<a name="l01828"></a>01828 }
<a name="l01829"></a>01829 
<a name="l01830"></a>01830 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_le_ge,
<a name="l01831"></a>01831        ipv6_prefix_list_le_ge_cmd,
<a name="l01832"></a>01832        <span class="stringliteral">&quot;ipv6 prefix-list WORD (deny|permit) X:X::X:X/M le &lt;0-128&gt; ge &lt;0-128&gt;&quot;</span>,
<a name="l01833"></a>01833        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01834"></a>01834        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01835"></a>01835        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01836"></a>01836        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01837"></a>01837        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01838"></a>01838        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01839"></a>01839        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01840"></a>01840        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>
<a name="l01841"></a>01841        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01842"></a>01842        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01843"></a>01843 {
<a name="l01844"></a>01844   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01845"></a>01845                   argv[2], argv[4], argv[3]);
<a name="l01846"></a>01846 }
<a name="l01847"></a>01847 
<a name="l01848"></a>01848 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_seq,
<a name="l01849"></a>01849        ipv6_prefix_list_seq_cmd,
<a name="l01850"></a>01850        <span class="stringliteral">&quot;ipv6 prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) (X:X::X:X/M|any)&quot;</span>,
<a name="l01851"></a>01851        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01852"></a>01852        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01853"></a>01853        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01854"></a>01854        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01855"></a>01855        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01856"></a>01856        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01857"></a>01857        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01858"></a>01858        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01859"></a>01859        <span class="stringliteral">&quot;Any prefix match.  Same as \&quot;::0/0 le 128\&quot;\n&quot;</span>)
<a name="l01860"></a>01860 {
<a name="l01861"></a>01861   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], argv[2],
<a name="l01862"></a>01862                   argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01863"></a>01863 }
<a name="l01864"></a>01864 
<a name="l01865"></a>01865 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_seq_ge,
<a name="l01866"></a>01866        ipv6_prefix_list_seq_ge_cmd,
<a name="l01867"></a>01867        <span class="stringliteral">&quot;ipv6 prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) X:X::X:X/M ge &lt;0-128&gt;&quot;</span>,
<a name="l01868"></a>01868        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01869"></a>01869        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01870"></a>01870        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01871"></a>01871        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01872"></a>01872        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01873"></a>01873        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01874"></a>01874        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01875"></a>01875        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01876"></a>01876        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01877"></a>01877        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01878"></a>01878 {
<a name="l01879"></a>01879   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], argv[2],
<a name="l01880"></a>01880                   argv[3], argv[4], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01881"></a>01881 }
<a name="l01882"></a>01882 
<a name="l01883"></a>01883 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_seq_ge_le,
<a name="l01884"></a>01884        ipv6_prefix_list_seq_ge_le_cmd,
<a name="l01885"></a>01885        <span class="stringliteral">&quot;ipv6 prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) X:X::X:X/M ge &lt;0-128&gt; le &lt;0-128&gt;&quot;</span>,
<a name="l01886"></a>01886        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01887"></a>01887        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01888"></a>01888        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01889"></a>01889        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01890"></a>01890        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01891"></a>01891        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01892"></a>01892        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01893"></a>01893        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01894"></a>01894        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01895"></a>01895        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>
<a name="l01896"></a>01896        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01897"></a>01897        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01898"></a>01898 {
<a name="l01899"></a>01899   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], argv[2],
<a name="l01900"></a>01900                   argv[3], argv[4], argv[5]);
<a name="l01901"></a>01901 }
<a name="l01902"></a>01902 
<a name="l01903"></a>01903 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_seq_le,
<a name="l01904"></a>01904        ipv6_prefix_list_seq_le_cmd,
<a name="l01905"></a>01905        <span class="stringliteral">&quot;ipv6 prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) X:X::X:X/M le &lt;0-128&gt;&quot;</span>,
<a name="l01906"></a>01906        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01907"></a>01907        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01908"></a>01908        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01909"></a>01909        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01910"></a>01910        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01911"></a>01911        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01912"></a>01912        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01913"></a>01913        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01914"></a>01914        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01915"></a>01915        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l01916"></a>01916 {
<a name="l01917"></a>01917   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], argv[2],
<a name="l01918"></a>01918                   argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[4]);
<a name="l01919"></a>01919 }
<a name="l01920"></a>01920 
<a name="l01921"></a>01921 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_seq_le_ge,
<a name="l01922"></a>01922        ipv6_prefix_list_seq_le_ge_cmd,
<a name="l01923"></a>01923        <span class="stringliteral">&quot;ipv6 prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) X:X::X:X/M le &lt;0-128&gt; ge &lt;0-128&gt;&quot;</span>,
<a name="l01924"></a>01924        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01925"></a>01925        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01926"></a>01926        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01927"></a>01927        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l01928"></a>01928        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l01929"></a>01929        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01930"></a>01930        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01931"></a>01931        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01932"></a>01932        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01933"></a>01933        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>
<a name="l01934"></a>01934        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01935"></a>01935        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01936"></a>01936 {
<a name="l01937"></a>01937   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a22fd1d8e84ea68e9f5d6e929f1352271">vty_prefix_list_install</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], argv[2],
<a name="l01938"></a>01938                   argv[3], argv[5], argv[4]);
<a name="l01939"></a>01939 }
<a name="l01940"></a>01940 
<a name="l01941"></a>01941 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list,
<a name="l01942"></a>01942        no_ipv6_prefix_list_cmd,
<a name="l01943"></a>01943        <span class="stringliteral">&quot;no ipv6 prefix-list WORD&quot;</span>,
<a name="l01944"></a>01944        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01945"></a>01945        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01946"></a>01946        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01947"></a>01947        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>)
<a name="l01948"></a>01948 {
<a name="l01949"></a>01949   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>,
<a name="l01950"></a>01950                     <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01951"></a>01951 }
<a name="l01952"></a>01952 
<a name="l01953"></a>01953 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_prefix,
<a name="l01954"></a>01954        no_ipv6_prefix_list_prefix_cmd,
<a name="l01955"></a>01955        <span class="stringliteral">&quot;no ipv6 prefix-list WORD (deny|permit) (X:X::X:X/M|any)&quot;</span>,
<a name="l01956"></a>01956        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01957"></a>01957        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01958"></a>01958        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01959"></a>01959        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01960"></a>01960        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01961"></a>01961        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01962"></a>01962        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01963"></a>01963        <span class="stringliteral">&quot;Any prefix match.  Same as \&quot;::0/0 le 128\&quot;\n&quot;</span>)
<a name="l01964"></a>01964 {
<a name="l01965"></a>01965   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01966"></a>01966                     argv[2], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01967"></a>01967 }
<a name="l01968"></a>01968 
<a name="l01969"></a>01969 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_ge,
<a name="l01970"></a>01970        no_ipv6_prefix_list_ge_cmd,
<a name="l01971"></a>01971        <span class="stringliteral">&quot;no ipv6 prefix-list WORD (deny|permit) X:X::X:X/M ge &lt;0-128&gt;&quot;</span>,
<a name="l01972"></a>01972        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01973"></a>01973        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01974"></a>01974        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01975"></a>01975        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01976"></a>01976        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01977"></a>01977        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01978"></a>01978        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01979"></a>01979        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01980"></a>01980        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l01981"></a>01981 {
<a name="l01982"></a>01982   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l01983"></a>01983                     argv[2], argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l01984"></a>01984 }
<a name="l01985"></a>01985 
<a name="l01986"></a>01986 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_ge_le,
<a name="l01987"></a>01987        no_ipv6_prefix_list_ge_le_cmd,
<a name="l01988"></a>01988        <span class="stringliteral">&quot;no ipv6 prefix-list WORD (deny|permit) X:X::X:X/M ge &lt;0-128&gt; le &lt;0-128&gt;&quot;</span>,
<a name="l01989"></a>01989        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l01990"></a>01990        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l01991"></a>01991        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l01992"></a>01992        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l01993"></a>01993        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l01994"></a>01994        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l01995"></a>01995        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l01996"></a>01996        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l01997"></a>01997        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>
<a name="l01998"></a>01998        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l01999"></a>01999        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l02000"></a>02000 {
<a name="l02001"></a>02001   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l02002"></a>02002                     argv[2], argv[3], argv[4]);
<a name="l02003"></a>02003 }
<a name="l02004"></a>02004 
<a name="l02005"></a>02005 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_le,
<a name="l02006"></a>02006        no_ipv6_prefix_list_le_cmd,
<a name="l02007"></a>02007        <span class="stringliteral">&quot;no ipv6 prefix-list WORD (deny|permit) X:X::X:X/M le &lt;0-128&gt;&quot;</span>,
<a name="l02008"></a>02008        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02009"></a>02009        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02010"></a>02010        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l02011"></a>02011        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02012"></a>02012        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l02013"></a>02013        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l02014"></a>02014        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l02015"></a>02015        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l02016"></a>02016        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l02017"></a>02017 {
<a name="l02018"></a>02018   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l02019"></a>02019                     argv[2], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[3]);
<a name="l02020"></a>02020 }
<a name="l02021"></a>02021 
<a name="l02022"></a>02022 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_le_ge,
<a name="l02023"></a>02023        no_ipv6_prefix_list_le_ge_cmd,
<a name="l02024"></a>02024        <span class="stringliteral">&quot;no ipv6 prefix-list WORD (deny|permit) X:X::X:X/M le &lt;0-128&gt; ge &lt;0-128&gt;&quot;</span>,
<a name="l02025"></a>02025        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02026"></a>02026        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02027"></a>02027        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l02028"></a>02028        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02029"></a>02029        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l02030"></a>02030        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l02031"></a>02031        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l02032"></a>02032        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l02033"></a>02033        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>
<a name="l02034"></a>02034        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l02035"></a>02035        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l02036"></a>02036 {
<a name="l02037"></a>02037   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[1],
<a name="l02038"></a>02038                     argv[2], argv[4], argv[3]);
<a name="l02039"></a>02039 }
<a name="l02040"></a>02040 
<a name="l02041"></a>02041 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_seq,
<a name="l02042"></a>02042        no_ipv6_prefix_list_seq_cmd,
<a name="l02043"></a>02043        <span class="stringliteral">&quot;no ipv6 prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) (X:X::X:X/M|any)&quot;</span>,
<a name="l02044"></a>02044        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02045"></a>02045        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02046"></a>02046        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l02047"></a>02047        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02048"></a>02048        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l02049"></a>02049        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l02050"></a>02050        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l02051"></a>02051        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l02052"></a>02052        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l02053"></a>02053        <span class="stringliteral">&quot;Any prefix match.  Same as \&quot;::0/0 le 128\&quot;\n&quot;</span>)
<a name="l02054"></a>02054 {
<a name="l02055"></a>02055   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], argv[2],
<a name="l02056"></a>02056                     argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02057"></a>02057 }
<a name="l02058"></a>02058 
<a name="l02059"></a>02059 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_seq_ge,
<a name="l02060"></a>02060        no_ipv6_prefix_list_seq_ge_cmd,
<a name="l02061"></a>02061        <span class="stringliteral">&quot;no ipv6 prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) X:X::X:X/M ge &lt;0-128&gt;&quot;</span>,
<a name="l02062"></a>02062        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02063"></a>02063        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02064"></a>02064        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l02065"></a>02065        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02066"></a>02066        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l02067"></a>02067        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l02068"></a>02068        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l02069"></a>02069        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l02070"></a>02070        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l02071"></a>02071        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l02072"></a>02072        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l02073"></a>02073 {
<a name="l02074"></a>02074   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], argv[2],
<a name="l02075"></a>02075                     argv[3], argv[4], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02076"></a>02076 }
<a name="l02077"></a>02077 
<a name="l02078"></a>02078 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_seq_ge_le,
<a name="l02079"></a>02079        no_ipv6_prefix_list_seq_ge_le_cmd,
<a name="l02080"></a>02080        <span class="stringliteral">&quot;no ipv6 prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) X:X::X:X/M ge &lt;0-128&gt; le &lt;0-128&gt;&quot;</span>,
<a name="l02081"></a>02081        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02082"></a>02082        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02083"></a>02083        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l02084"></a>02084        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02085"></a>02085        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l02086"></a>02086        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l02087"></a>02087        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l02088"></a>02088        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l02089"></a>02089        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l02090"></a>02090        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l02091"></a>02091        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>
<a name="l02092"></a>02092        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l02093"></a>02093        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l02094"></a>02094 {
<a name="l02095"></a>02095   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], argv[2],
<a name="l02096"></a>02096                     argv[3], argv[4], argv[5]);
<a name="l02097"></a>02097 }
<a name="l02098"></a>02098 
<a name="l02099"></a>02099 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_seq_le,
<a name="l02100"></a>02100        no_ipv6_prefix_list_seq_le_cmd,
<a name="l02101"></a>02101        <span class="stringliteral">&quot;no ipv6 prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) X:X::X:X/M le &lt;0-128&gt;&quot;</span>,
<a name="l02102"></a>02102        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02103"></a>02103        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02104"></a>02104        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l02105"></a>02105        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02106"></a>02106        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l02107"></a>02107        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l02108"></a>02108        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l02109"></a>02109        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l02110"></a>02110        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l02111"></a>02111        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l02112"></a>02112        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>)
<a name="l02113"></a>02113 {
<a name="l02114"></a>02114   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], argv[2],
<a name="l02115"></a>02115                     argv[3], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, argv[4]);
<a name="l02116"></a>02116 }
<a name="l02117"></a>02117 
<a name="l02118"></a>02118 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_seq_le_ge,
<a name="l02119"></a>02119        no_ipv6_prefix_list_seq_le_ge_cmd,
<a name="l02120"></a>02120        <span class="stringliteral">&quot;no ipv6 prefix-list WORD seq &lt;1-4294967295&gt; (deny|permit) X:X::X:X/M le &lt;0-128&gt; ge &lt;0-128&gt;&quot;</span>,
<a name="l02121"></a>02121        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02122"></a>02122        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02123"></a>02123        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l02124"></a>02124        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02125"></a>02125        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l02126"></a>02126        <span class="stringliteral">&quot;Sequence number\n&quot;</span>
<a name="l02127"></a>02127        <span class="stringliteral">&quot;Specify packets to reject\n&quot;</span>
<a name="l02128"></a>02128        <span class="stringliteral">&quot;Specify packets to forward\n&quot;</span>
<a name="l02129"></a>02129        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l02130"></a>02130        <span class="stringliteral">&quot;Maximum prefix length to be matched\n&quot;</span>
<a name="l02131"></a>02131        <span class="stringliteral">&quot;Maximum prefix length\n&quot;</span>
<a name="l02132"></a>02132        <span class="stringliteral">&quot;Minimum prefix length to be matched\n&quot;</span>
<a name="l02133"></a>02133        <span class="stringliteral">&quot;Minimum prefix length\n&quot;</span>)
<a name="l02134"></a>02134 {
<a name="l02135"></a>02135   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a5ee8d4bde496ea10b0d7c257f60dc2e3">vty_prefix_list_uninstall</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], argv[2],
<a name="l02136"></a>02136                     argv[3], argv[5], argv[4]);
<a name="l02137"></a>02137 }
<a name="l02138"></a>02138 
<a name="l02139"></a>02139 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_sequence_number,
<a name="l02140"></a>02140        ipv6_prefix_list_sequence_number_cmd,
<a name="l02141"></a>02141        <span class="stringliteral">&quot;ipv6 prefix-list sequence-number&quot;</span>,
<a name="l02142"></a>02142        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02143"></a>02143        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l02144"></a>02144        <span class="stringliteral">&quot;Include/exclude sequence numbers in NVGEN\n&quot;</span>)
<a name="l02145"></a>02145 {
<a name="l02146"></a>02146   prefix_master_ipv6.<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a> = 1;
<a name="l02147"></a>02147   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l02148"></a>02148 }
<a name="l02149"></a>02149 
<a name="l02150"></a>02150 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_sequence_number,
<a name="l02151"></a>02151        no_ipv6_prefix_list_sequence_number_cmd,
<a name="l02152"></a>02152        <span class="stringliteral">&quot;no ipv6 prefix-list sequence-number&quot;</span>,
<a name="l02153"></a>02153        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02154"></a>02154        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02155"></a>02155        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l02156"></a>02156        <span class="stringliteral">&quot;Include/exclude sequence numbers in NVGEN\n&quot;</span>)
<a name="l02157"></a>02157 {
<a name="l02158"></a>02158   prefix_master_ipv6.<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a> = 0;
<a name="l02159"></a>02159   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l02160"></a>02160 }
<a name="l02161"></a>02161 
<a name="l02162"></a>02162 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (ipv6_prefix_list_description,
<a name="l02163"></a>02163        ipv6_prefix_list_description_cmd,
<a name="l02164"></a>02164        <span class="stringliteral">&quot;ipv6 prefix-list WORD description .LINE&quot;</span>,
<a name="l02165"></a>02165        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02166"></a>02166        <a class="code" href="command_8h.html#a60dc08d3413ebd5540cc1de7b58c7ba0">PREFIX_LIST_STR</a>
<a name="l02167"></a>02167        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02168"></a>02168        <span class="stringliteral">&quot;Prefix-list specific description\n&quot;</span>
<a name="l02169"></a>02169        <span class="stringliteral">&quot;Up to 80 characters describing this prefix-list\n&quot;</span>)
<a name="l02170"></a>02170 {
<a name="l02171"></a>02171   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l02172"></a>02172 
<a name="l02173"></a>02173   plist = <a class="code" href="plist_8c.html#ae7b9515a190ca9184e5b84d69597409c">prefix_list_get</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0]);
<a name="l02174"></a>02174   
<a name="l02175"></a>02175   <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>)
<a name="l02176"></a>02176     {
<a name="l02177"></a>02177       <a class="code" href="memory_8h.html#a29f1ce2c850a3163cd6b1b0bd460705d">XFREE</a> (<a class="code" href="memtypes_8h.html#a7ff5f2dff38e7639981794c43dc9167ba563963518edb70d4cd7492b06f48106e">MTYPE_TMP</a>, plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>);
<a name="l02178"></a>02178       plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02179"></a>02179     }
<a name="l02180"></a>02180   plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a> = <a class="code" href="command_8c.html#a262c4f7766ffb060fe8b5012d58367a2">argv_concat</a>(argv, argc, 1);
<a name="l02181"></a>02181 
<a name="l02182"></a>02182   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l02183"></a>02183 }       
<a name="l02184"></a>02184 
<a name="l02185"></a>02185 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (no_ipv6_prefix_list_description,
<a name="l02186"></a>02186        no_ipv6_prefix_list_description_cmd,
<a name="l02187"></a>02187        <span class="stringliteral">&quot;no ipv6 prefix-list WORD description&quot;</span>,
<a name="l02188"></a>02188        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02189"></a>02189        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02190"></a>02190        PREFIX_LIST_STR
<a name="l02191"></a>02191        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02192"></a>02192        <span class="stringliteral">&quot;Prefix-list specific description\n&quot;</span>)
<a name="l02193"></a>02193 {
<a name="l02194"></a>02194   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a967d4bfce3abaf7ff731f83916865769">vty_prefix_list_desc_unset</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0]);
<a name="l02195"></a>02195 }
<a name="l02196"></a>02196 
<a name="l02197"></a>02197 <a class="code" href="command_8h.html#a7a8f1df2b731617ea7ada9ba5cbdb704">ALIAS</a> (no_ipv6_prefix_list_description,
<a name="l02198"></a>02198        no_ipv6_prefix_list_description_arg_cmd,
<a name="l02199"></a>02199        <span class="stringliteral">&quot;no ipv6 prefix-list WORD description .LINE&quot;</span>,
<a name="l02200"></a>02200        <a class="code" href="command_8h.html#a5b14384572729c1d1b3755d1bea1f17d">NO_STR</a>
<a name="l02201"></a>02201        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02202"></a>02202        PREFIX_LIST_STR
<a name="l02203"></a>02203        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02204"></a>02204        <span class="stringliteral">&quot;Prefix-list specific description\n&quot;</span>
<a name="l02205"></a>02205        <span class="stringliteral">&quot;Up to 80 characters describing this prefix-list\n&quot;</span>)
<a name="l02206"></a>02206 
<a name="l02207"></a>02207 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_prefix_list,
<a name="l02208"></a>02208        show_ipv6_prefix_list_cmd,
<a name="l02209"></a>02209        <span class="stringliteral">&quot;show ipv6 prefix-list&quot;</span>,
<a name="l02210"></a>02210        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l02211"></a>02211        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02212"></a>02212        PREFIX_LIST_STR)
<a name="l02213"></a>02213 {
<a name="l02214"></a>02214   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">normal_display</a>);
<a name="l02215"></a>02215 }
<a name="l02216"></a>02216 
<a name="l02217"></a>02217 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_prefix_list_name,
<a name="l02218"></a>02218        show_ipv6_prefix_list_name_cmd,
<a name="l02219"></a>02219        <span class="stringliteral">&quot;show ipv6 prefix-list WORD&quot;</span>,
<a name="l02220"></a>02220        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l02221"></a>02221        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02222"></a>02222        PREFIX_LIST_STR
<a name="l02223"></a>02223        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>)
<a name="l02224"></a>02224 {
<a name="l02225"></a>02225   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">normal_display</a>);
<a name="l02226"></a>02226 }
<a name="l02227"></a>02227 
<a name="l02228"></a>02228 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_prefix_list_name_seq,
<a name="l02229"></a>02229        show_ipv6_prefix_list_name_seq_cmd,
<a name="l02230"></a>02230        <span class="stringliteral">&quot;show ipv6 prefix-list WORD seq &lt;1-4294967295&gt;&quot;</span>,
<a name="l02231"></a>02231        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l02232"></a>02232        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02233"></a>02233        PREFIX_LIST_STR
<a name="l02234"></a>02234        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02235"></a>02235        <span class="stringliteral">&quot;sequence number of an entry\n&quot;</span>
<a name="l02236"></a>02236        <span class="stringliteral">&quot;Sequence number\n&quot;</span>)
<a name="l02237"></a>02237 {
<a name="l02238"></a>02238   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daafaf34fbb84ff2f9c3d86bfdd95808973">sequential_display</a>);
<a name="l02239"></a>02239 }
<a name="l02240"></a>02240 
<a name="l02241"></a>02241 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_prefix_list_prefix,
<a name="l02242"></a>02242        show_ipv6_prefix_list_prefix_cmd,
<a name="l02243"></a>02243        <span class="stringliteral">&quot;show ipv6 prefix-list WORD X:X::X:X/M&quot;</span>,
<a name="l02244"></a>02244        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l02245"></a>02245        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02246"></a>02246        PREFIX_LIST_STR
<a name="l02247"></a>02247        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02248"></a>02248        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>)
<a name="l02249"></a>02249 {
<a name="l02250"></a>02250   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af89e4f57cee4109ce7f6ae930cec65a1">vty_show_prefix_list_prefix</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa0e4ef50fa4e56455a6d30b1dc7a30738">normal_display</a>);
<a name="l02251"></a>02251 }
<a name="l02252"></a>02252 
<a name="l02253"></a>02253 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_prefix_list_prefix_longer,
<a name="l02254"></a>02254        show_ipv6_prefix_list_prefix_longer_cmd,
<a name="l02255"></a>02255        <span class="stringliteral">&quot;show ipv6 prefix-list WORD X:X::X:X/M longer&quot;</span>,
<a name="l02256"></a>02256        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l02257"></a>02257        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02258"></a>02258        PREFIX_LIST_STR
<a name="l02259"></a>02259        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02260"></a>02260        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l02261"></a>02261        <span class="stringliteral">&quot;Lookup longer prefix\n&quot;</span>)
<a name="l02262"></a>02262 {
<a name="l02263"></a>02263   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af89e4f57cee4109ce7f6ae930cec65a1">vty_show_prefix_list_prefix</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daaec00d791d6317f12d38aa0d34341814f">longer_display</a>);
<a name="l02264"></a>02264 }
<a name="l02265"></a>02265 
<a name="l02266"></a>02266 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_prefix_list_prefix_first_match,
<a name="l02267"></a>02267        show_ipv6_prefix_list_prefix_first_match_cmd,
<a name="l02268"></a>02268        <span class="stringliteral">&quot;show ipv6 prefix-list WORD X:X::X:X/M first-match&quot;</span>,
<a name="l02269"></a>02269        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l02270"></a>02270        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02271"></a>02271        PREFIX_LIST_STR
<a name="l02272"></a>02272        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02273"></a>02273        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>
<a name="l02274"></a>02274        <span class="stringliteral">&quot;First matched prefix\n&quot;</span>)
<a name="l02275"></a>02275 {
<a name="l02276"></a>02276   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af89e4f57cee4109ce7f6ae930cec65a1">vty_show_prefix_list_prefix</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1], <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa7e1c04a1b88f32fbdaedaab215c95578">first_match_display</a>);
<a name="l02277"></a>02277 }
<a name="l02278"></a>02278 
<a name="l02279"></a>02279 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_prefix_list_summary,
<a name="l02280"></a>02280        show_ipv6_prefix_list_summary_cmd,
<a name="l02281"></a>02281        <span class="stringliteral">&quot;show ipv6 prefix-list summary&quot;</span>,
<a name="l02282"></a>02282        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l02283"></a>02283        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02284"></a>02284        PREFIX_LIST_STR
<a name="l02285"></a>02285        <span class="stringliteral">&quot;Summary of prefix lists\n&quot;</span>)
<a name="l02286"></a>02286 {
<a name="l02287"></a>02287   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa4f73a8a3374db92e774557a8fbebf464">summary_display</a>);
<a name="l02288"></a>02288 }
<a name="l02289"></a>02289 
<a name="l02290"></a>02290 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_prefix_list_summary_name,
<a name="l02291"></a>02291        show_ipv6_prefix_list_summary_name_cmd,
<a name="l02292"></a>02292        <span class="stringliteral">&quot;show ipv6 prefix-list summary WORD&quot;</span>,
<a name="l02293"></a>02293        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l02294"></a>02294        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02295"></a>02295        PREFIX_LIST_STR
<a name="l02296"></a>02296        <span class="stringliteral">&quot;Summary of prefix lists\n&quot;</span>
<a name="l02297"></a>02297        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>)
<a name="l02298"></a>02298 {
<a name="l02299"></a>02299   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daa4f73a8a3374db92e774557a8fbebf464">summary_display</a>);
<a name="l02300"></a>02300 }
<a name="l02301"></a>02301 
<a name="l02302"></a>02302 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_prefix_list_detail,
<a name="l02303"></a>02303        show_ipv6_prefix_list_detail_cmd,
<a name="l02304"></a>02304        <span class="stringliteral">&quot;show ipv6 prefix-list detail&quot;</span>,
<a name="l02305"></a>02305        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l02306"></a>02306        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02307"></a>02307        PREFIX_LIST_STR
<a name="l02308"></a>02308        <span class="stringliteral">&quot;Detail of prefix lists\n&quot;</span>)
<a name="l02309"></a>02309 {
<a name="l02310"></a>02310   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daadf476e9d7ac7a27be212c355eaba5289">detail_display</a>);
<a name="l02311"></a>02311 }
<a name="l02312"></a>02312 
<a name="l02313"></a>02313 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (show_ipv6_prefix_list_detail_name,
<a name="l02314"></a>02314        show_ipv6_prefix_list_detail_name_cmd,
<a name="l02315"></a>02315        <span class="stringliteral">&quot;show ipv6 prefix-list detail WORD&quot;</span>,
<a name="l02316"></a>02316        <a class="code" href="command_8h.html#aa19b6d5257cb6f7622eb6b3da8966b32">SHOW_STR</a>
<a name="l02317"></a>02317        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02318"></a>02318        PREFIX_LIST_STR
<a name="l02319"></a>02319        <span class="stringliteral">&quot;Detail of prefix lists\n&quot;</span>
<a name="l02320"></a>02320        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>)
<a name="l02321"></a>02321 {
<a name="l02322"></a>02322   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#af70d99bd08be2b229819b5cca22efe9b">vty_show_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="plist_8c.html#af866fa5b4bc252d5cbed2766e9e5a9daadf476e9d7ac7a27be212c355eaba5289">detail_display</a>);
<a name="l02323"></a>02323 }
<a name="l02324"></a>02324 
<a name="l02325"></a>02325 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_ipv6_prefix_list,
<a name="l02326"></a>02326        clear_ipv6_prefix_list_cmd,
<a name="l02327"></a>02327        <span class="stringliteral">&quot;clear ipv6 prefix-list&quot;</span>,
<a name="l02328"></a>02328        <a class="code" href="command_8h.html#a315549aca62f71abb3dfe8fd1770039a">CLEAR_STR</a>
<a name="l02329"></a>02329        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02330"></a>02330        PREFIX_LIST_STR)
<a name="l02331"></a>02331 {
<a name="l02332"></a>02332   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a7267b07ebe24db236720ffd7513fcd6b">vty_clear_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>, <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02333"></a>02333 }
<a name="l02334"></a>02334 
<a name="l02335"></a>02335 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_ipv6_prefix_list_name,
<a name="l02336"></a>02336        clear_ipv6_prefix_list_name_cmd,
<a name="l02337"></a>02337        <span class="stringliteral">&quot;clear ipv6 prefix-list WORD&quot;</span>,
<a name="l02338"></a>02338        <a class="code" href="command_8h.html#a315549aca62f71abb3dfe8fd1770039a">CLEAR_STR</a>
<a name="l02339"></a>02339        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02340"></a>02340        PREFIX_LIST_STR
<a name="l02341"></a>02341        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>)
<a name="l02342"></a>02342 {
<a name="l02343"></a>02343   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a7267b07ebe24db236720ffd7513fcd6b">vty_clear_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02344"></a>02344 }
<a name="l02345"></a>02345 
<a name="l02346"></a>02346 <a class="code" href="command_8h.html#acc29190d35966eddbcfeceed3aab6d25">DEFUN</a> (clear_ipv6_prefix_list_name_prefix,
<a name="l02347"></a>02347        clear_ipv6_prefix_list_name_prefix_cmd,
<a name="l02348"></a>02348        <span class="stringliteral">&quot;clear ipv6 prefix-list WORD X:X::X:X/M&quot;</span>,
<a name="l02349"></a>02349        <a class="code" href="command_8h.html#a315549aca62f71abb3dfe8fd1770039a">CLEAR_STR</a>
<a name="l02350"></a>02350        <a class="code" href="command_8h.html#a97fa3de206286c30e3efe26747c25352">IPV6_STR</a>
<a name="l02351"></a>02351        PREFIX_LIST_STR
<a name="l02352"></a>02352        <span class="stringliteral">&quot;Name of a prefix list\n&quot;</span>
<a name="l02353"></a>02353        <span class="stringliteral">&quot;IPv6 prefix &lt;network&gt;/&lt;length&gt;, e.g., 3ffe::/16\n&quot;</span>)
<a name="l02354"></a>02354 {
<a name="l02355"></a>02355   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#a7267b07ebe24db236720ffd7513fcd6b">vty_clear_prefix_list</a> (<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, argv[0], argv[1]);
<a name="l02356"></a>02356 }
<a name="l02357"></a>02357 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l02358"></a>02358 
<a name="l02359"></a>02359 <span class="comment">/* Configuration write function. */</span>
<a name="l02360"></a>02360 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02361"></a><a class="code" href="plist_8c.html#aa882e001ef591185a9e5c32b6d9e2f9e">02361</a> <a class="code" href="plist_8c.html#aa882e001ef591185a9e5c32b6d9e2f9e">config_write_prefix_afi</a> (<a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l02362"></a>02362 {
<a name="l02363"></a>02363   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l02364"></a>02364   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l02365"></a>02365   <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l02366"></a>02366   <span class="keywordtype">int</span> write = 0;
<a name="l02367"></a>02367 
<a name="l02368"></a>02368   master = <a class="code" href="plist_8c.html#a1c6cce0123ce7ec82be06154b2bf458a">prefix_master_get</a> (afi);
<a name="l02369"></a>02369   <span class="keywordflow">if</span> (master == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02370"></a>02370     <span class="keywordflow">return</span> 0;
<a name="l02371"></a>02371 
<a name="l02372"></a>02372   <span class="keywordflow">if</span> (! master-&gt;<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a>)
<a name="l02373"></a>02373     {
<a name="l02374"></a>02374       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;no ip%s prefix-list sequence-number%s&quot;</span>, 
<a name="l02375"></a>02375            afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;v6&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02376"></a>02376       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;!%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02377"></a>02377     }
<a name="l02378"></a>02378 
<a name="l02379"></a>02379   <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l02380"></a>02380     {
<a name="l02381"></a>02381       <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>)
<a name="l02382"></a>02382     {
<a name="l02383"></a>02383       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ip%s prefix-list %s description %s%s&quot;</span>,
<a name="l02384"></a>02384            afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;v6&quot;</span>,
<a name="l02385"></a>02385            plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02386"></a>02386       write++;
<a name="l02387"></a>02387     }
<a name="l02388"></a>02388 
<a name="l02389"></a>02389       <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l02390"></a>02390     {
<a name="l02391"></a>02391       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ip%s prefix-list %s &quot;</span>,
<a name="l02392"></a>02392            afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;v6&quot;</span>,
<a name="l02393"></a>02393            plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l02394"></a>02394 
<a name="l02395"></a>02395       <span class="keywordflow">if</span> (master-&gt;<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a>)
<a name="l02396"></a>02396         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;seq %d &quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>);
<a name="l02397"></a>02397     
<a name="l02398"></a>02398       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s &quot;</span>, <a class="code" href="plist_8c.html#a4427a251943c1308e6a58494a4239619">prefix_list_type_str</a> (pentry));
<a name="l02399"></a>02399 
<a name="l02400"></a>02400       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a57aeba7f4f09a2cefbca6f858ccc4409">any</a>)
<a name="l02401"></a>02401         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;any&quot;</span>);
<a name="l02402"></a>02402       <span class="keywordflow">else</span>
<a name="l02403"></a>02403         {
<a name="l02404"></a>02404           <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = &amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>;
<a name="l02405"></a>02405           <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l02406"></a>02406 
<a name="l02407"></a>02407           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s/%d&quot;</span>,
<a name="l02408"></a>02408                <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, BUFSIZ),
<a name="l02409"></a>02409                p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02410"></a>02410 
<a name="l02411"></a>02411           <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>)
<a name="l02412"></a>02412         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ge %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>);
<a name="l02413"></a>02413           <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>)
<a name="l02414"></a>02414         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; le %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>);
<a name="l02415"></a>02415         }
<a name="l02416"></a>02416       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02417"></a>02417       write++;
<a name="l02418"></a>02418     }
<a name="l02419"></a>02419       <span class="comment">/* vty_out (vty, &quot;!%s&quot;, VTY_NEWLINE); */</span>
<a name="l02420"></a>02420     }
<a name="l02421"></a>02421 
<a name="l02422"></a>02422   <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>)
<a name="l02423"></a>02423     {
<a name="l02424"></a>02424       <span class="keywordflow">if</span> (plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>)
<a name="l02425"></a>02425     {
<a name="l02426"></a>02426       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ip%s prefix-list %s description %s%s&quot;</span>,
<a name="l02427"></a>02427            afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;v6&quot;</span>,
<a name="l02428"></a>02428            plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, plist-&gt;<a class="code" href="structprefix__list.html#a6fe4cc87a4b2a1ea58cc500e569f13a1">desc</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02429"></a>02429       write++;
<a name="l02430"></a>02430     }
<a name="l02431"></a>02431 
<a name="l02432"></a>02432       <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l02433"></a>02433     {
<a name="l02434"></a>02434       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ip%s prefix-list %s &quot;</span>,
<a name="l02435"></a>02435            afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;v6&quot;</span>,
<a name="l02436"></a>02436            plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>);
<a name="l02437"></a>02437 
<a name="l02438"></a>02438       <span class="keywordflow">if</span> (master-&gt;<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a>)
<a name="l02439"></a>02439         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;seq %d &quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>);
<a name="l02440"></a>02440 
<a name="l02441"></a>02441       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="plist_8c.html#a4427a251943c1308e6a58494a4239619">prefix_list_type_str</a> (pentry));
<a name="l02442"></a>02442 
<a name="l02443"></a>02443       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a57aeba7f4f09a2cefbca6f858ccc4409">any</a>)
<a name="l02444"></a>02444         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; any&quot;</span>);
<a name="l02445"></a>02445       <span class="keywordflow">else</span>
<a name="l02446"></a>02446         {
<a name="l02447"></a>02447           <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = &amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>;
<a name="l02448"></a>02448           <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l02449"></a>02449 
<a name="l02450"></a>02450           <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; %s/%d&quot;</span>,
<a name="l02451"></a>02451                <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, BUFSIZ),
<a name="l02452"></a>02452                p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02453"></a>02453 
<a name="l02454"></a>02454           <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>)
<a name="l02455"></a>02455         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ge %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>);
<a name="l02456"></a>02456           <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>)
<a name="l02457"></a>02457         <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; le %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>);
<a name="l02458"></a>02458         }
<a name="l02459"></a>02459       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02460"></a>02460       write++;
<a name="l02461"></a>02461     }
<a name="l02462"></a>02462     }
<a name="l02463"></a>02463   
<a name="l02464"></a>02464   <span class="keywordflow">return</span> write;
<a name="l02465"></a>02465 }
<a name="l02466"></a>02466 
<a name="l02467"></a>02467 <span class="keyword">struct </span><a class="code" href="structstream.html">stream</a> *
<a name="l02468"></a><a class="code" href="plist_8h.html#a767f4542a5496e28882cf353713ac8da">02468</a> <a class="code" href="plist_8c.html#afc282a7288efb63da57b4d55d144fff7">prefix_bgp_orf_entry</a> (<span class="keyword">struct</span> <a class="code" href="structstream.html">stream</a> *<a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>, <span class="keyword">struct</span> <a class="code" href="structprefix__list.html">prefix_list</a> *plist,
<a name="l02469"></a>02469               u_char init_flag, u_char permit_flag, u_char deny_flag)
<a name="l02470"></a>02470 {
<a name="l02471"></a>02471   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l02472"></a>02472 
<a name="l02473"></a>02473   <span class="keywordflow">if</span> (! plist)
<a name="l02474"></a>02474     <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l02475"></a>02475 
<a name="l02476"></a>02476   <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l02477"></a>02477     {
<a name="l02478"></a>02478       u_char flag = init_flag;
<a name="l02479"></a>02479       <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = &amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>;
<a name="l02480"></a>02480 
<a name="l02481"></a>02481       flag |= (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a0fd0b49238c4282c6dc6c3f4dc7fa90b">type</a> == <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a6dd95e4ac6d2a01c478cd44b9bc2427a">PREFIX_PERMIT</a> ?
<a name="l02482"></a>02482                permit_flag : deny_flag);
<a name="l02483"></a>02483       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, flag);
<a name="l02484"></a>02484       <a class="code" href="stream_8c.html#af366d780a14cb8de53279378a8a4faeb">stream_putl</a> (s, (u_int32_t)pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>);
<a name="l02485"></a>02485       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, (u_char)pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>);
<a name="l02486"></a>02486       <a class="code" href="stream_8c.html#a8a00e56e71aed4753ee4a21f8dd2aa65">stream_putc</a> (s, (u_char)pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>);
<a name="l02487"></a>02487       <a class="code" href="bgp__attr_8c.html#a003809094eb7833898bd97bf6da16d3b">stream_put_prefix</a> (s, p);
<a name="l02488"></a>02488     }
<a name="l02489"></a>02489 
<a name="l02490"></a>02490   <span class="keywordflow">return</span> <a class="code" href="spgrid_8c.html#a5d97d3b42a0d6c9ec9a3e56f2616a6a5">s</a>;
<a name="l02491"></a>02491 }
<a name="l02492"></a>02492 
<a name="l02493"></a>02493 <span class="keywordtype">int</span>
<a name="l02494"></a><a class="code" href="plist_8h.html#a9903ed6a85a0e11c8aa72b963838fd44">02494</a> <a class="code" href="plist_8c.html#a5e6f89d9e5bf6353d71df9ea21d732d0">prefix_bgp_orf_set</a> (<span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keyword">struct</span> <a class="code" href="structorf__prefix.html">orf_prefix</a> *orfp,
<a name="l02495"></a>02495             <span class="keywordtype">int</span> permit, <span class="keywordtype">int</span> <span class="keyword">set</span>)
<a name="l02496"></a>02496 {
<a name="l02497"></a>02497   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l02498"></a>02498   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l02499"></a>02499 
<a name="l02500"></a>02500   <span class="comment">/* ge and le value check */</span> 
<a name="l02501"></a>02501   <span class="keywordflow">if</span> (orfp-&gt;<a class="code" href="structorf__prefix.html#a2e1e710c6b4d1dbdef92b0ceaf1581ef">ge</a> &amp;&amp; orfp-&gt;<a class="code" href="structorf__prefix.html#a2e1e710c6b4d1dbdef92b0ceaf1581ef">ge</a> &lt;= orfp-&gt;<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l02502"></a>02502     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02503"></a>02503   <span class="keywordflow">if</span> (orfp-&gt;<a class="code" href="structorf__prefix.html#a497407b453789947ab26bbce751c1947">le</a> &amp;&amp; orfp-&gt;<a class="code" href="structorf__prefix.html#a497407b453789947ab26bbce751c1947">le</a> &lt;= orfp-&gt;<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>.<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>)
<a name="l02504"></a>02504     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02505"></a>02505   <span class="keywordflow">if</span> (orfp-&gt;<a class="code" href="structorf__prefix.html#a497407b453789947ab26bbce751c1947">le</a> &amp;&amp; orfp-&gt;<a class="code" href="structorf__prefix.html#a2e1e710c6b4d1dbdef92b0ceaf1581ef">ge</a> &gt; orfp-&gt;<a class="code" href="structorf__prefix.html#a497407b453789947ab26bbce751c1947">le</a>)
<a name="l02506"></a>02506     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02507"></a>02507 
<a name="l02508"></a>02508   <span class="keywordflow">if</span> (orfp-&gt;<a class="code" href="structorf__prefix.html#a2e1e710c6b4d1dbdef92b0ceaf1581ef">ge</a> &amp;&amp; orfp-&gt;<a class="code" href="structorf__prefix.html#a497407b453789947ab26bbce751c1947">le</a> == (afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ? 32 : 128))
<a name="l02509"></a>02509     orfp-&gt;<a class="code" href="structorf__prefix.html#a497407b453789947ab26bbce751c1947">le</a> = 0;
<a name="l02510"></a>02510 
<a name="l02511"></a>02511   plist = <a class="code" href="plist_8c.html#ae7b9515a190ca9184e5b84d69597409c">prefix_list_get</a> (<a class="code" href="plist_8h.html#aa217ec31c92f3842209d9991a42a675c">AFI_ORF_PREFIX</a>, name);
<a name="l02512"></a>02512   <span class="keywordflow">if</span> (! plist)
<a name="l02513"></a>02513     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02514"></a>02514 
<a name="l02515"></a>02515   <span class="keywordflow">if</span> (<span class="keyword">set</span>)
<a name="l02516"></a>02516     {
<a name="l02517"></a>02517       pentry = <a class="code" href="plist_8c.html#a11688eb24d1194d7d1b754d8261dfe9a">prefix_list_entry_make</a> (&amp;orfp-&gt;<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>,
<a name="l02518"></a>02518                        (permit ? <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a6dd95e4ac6d2a01c478cd44b9bc2427a">PREFIX_PERMIT</a> : <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>),
<a name="l02519"></a>02519                        orfp-&gt;<a class="code" href="structorf__prefix.html#a452fdaa3c1a2c63842fc6dc55c231f08">seq</a>, orfp-&gt;<a class="code" href="structorf__prefix.html#a497407b453789947ab26bbce751c1947">le</a>, orfp-&gt;<a class="code" href="structorf__prefix.html#a2e1e710c6b4d1dbdef92b0ceaf1581ef">ge</a>, 0);
<a name="l02520"></a>02520 
<a name="l02521"></a>02521       <span class="keywordflow">if</span> (<a class="code" href="plist_8c.html#a0ba5060c373d3aaa0c858e70e427a1e3">prefix_entry_dup_check</a> (plist, pentry))
<a name="l02522"></a>02522     {
<a name="l02523"></a>02523       <a class="code" href="plist_8c.html#a7b951b9596550f0a9fccca8549d27dcc">prefix_list_entry_free</a> (pentry);
<a name="l02524"></a>02524       <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02525"></a>02525     }
<a name="l02526"></a>02526 
<a name="l02527"></a>02527       <a class="code" href="plist_8c.html#a8905f1c3e46af09014ca59e95c124402">prefix_list_entry_add</a> (plist, pentry);
<a name="l02528"></a>02528     }
<a name="l02529"></a>02529   <span class="keywordflow">else</span>
<a name="l02530"></a>02530     {
<a name="l02531"></a>02531       pentry = <a class="code" href="plist_8c.html#a12fa199b8801b68dff14355b02ea8d68">prefix_list_entry_lookup</a> (plist, &amp;orfp-&gt;<a class="code" href="structorf__prefix.html#a8e00b907259ee9c7101b137f75619046">p</a>,
<a name="l02532"></a>02532                      (permit ? <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a6dd95e4ac6d2a01c478cd44b9bc2427a">PREFIX_PERMIT</a> : <a class="code" href="plist_8h.html#a3bda5ec3d1202bc8eb472b4d97633cf9a697cf8d0db0ead308a6ef01301f9543c">PREFIX_DENY</a>),
<a name="l02533"></a>02533                      orfp-&gt;<a class="code" href="structorf__prefix.html#a452fdaa3c1a2c63842fc6dc55c231f08">seq</a>, orfp-&gt;<a class="code" href="structorf__prefix.html#a497407b453789947ab26bbce751c1947">le</a>, orfp-&gt;<a class="code" href="structorf__prefix.html#a2e1e710c6b4d1dbdef92b0ceaf1581ef">ge</a>);
<a name="l02534"></a>02534 
<a name="l02535"></a>02535       <span class="keywordflow">if</span> (! pentry)
<a name="l02536"></a>02536     <span class="keywordflow">return</span> <a class="code" href="command_8h.html#a92dc6dc30d8ef3651eb9d47a6083b025">CMD_WARNING</a>;
<a name="l02537"></a>02537 
<a name="l02538"></a>02538       <a class="code" href="plist_8c.html#a83dd197123948964d7442e70b9659049">prefix_list_entry_delete</a> (plist, pentry, 1);
<a name="l02539"></a>02539     }
<a name="l02540"></a>02540 
<a name="l02541"></a>02541   <span class="keywordflow">return</span> <a class="code" href="command_8h.html#aa2008c1bc36d9ef42571a6ec52516d02">CMD_SUCCESS</a>;
<a name="l02542"></a>02542 }
<a name="l02543"></a>02543 
<a name="l02544"></a>02544 <span class="keywordtype">void</span>
<a name="l02545"></a><a class="code" href="plist_8h.html#affd3c0bdf2db98e6b63dbdce4fb9c8b3">02545</a> <a class="code" href="plist_8c.html#ab45c235a305a061e5ac9fceecfc90a55">prefix_bgp_orf_remove_all</a> (<span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l02546"></a>02546 {
<a name="l02547"></a>02547   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l02548"></a>02548 
<a name="l02549"></a>02549   plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="plist_8h.html#aa217ec31c92f3842209d9991a42a675c">AFI_ORF_PREFIX</a>, name);
<a name="l02550"></a>02550   <span class="keywordflow">if</span> (plist)
<a name="l02551"></a>02551     <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (plist);
<a name="l02552"></a>02552 }
<a name="l02553"></a>02553 
<a name="l02554"></a>02554 <span class="comment">/* return prefix count */</span>
<a name="l02555"></a>02555 <span class="keywordtype">int</span>
<a name="l02556"></a><a class="code" href="plist_8h.html#ae1c3eed9cf8cbb06132c1e3a6df3e668">02556</a> <a class="code" href="plist_8c.html#ac1c2ab22648edfb9e6182a491aab2341">prefix_bgp_show_prefix_list</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>, <a class="code" href="zebra_8h.html#a0a34f9bd6bbc49876614d274005c6ff1">afi_t</a> afi, <span class="keywordtype">char</span> *<a class="code" href="memory_8c.html#a5ac083a645d964373f022d03df4849c8">name</a>)
<a name="l02557"></a>02557 {
<a name="l02558"></a>02558   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l02559"></a>02559   <span class="keyword">struct </span><a class="code" href="structprefix__list__entry.html">prefix_list_entry</a> *pentry;
<a name="l02560"></a>02560 
<a name="l02561"></a>02561   plist = <a class="code" href="plist_8c.html#adfce5b38dccccdc141ffd3571b73a656">prefix_list_lookup</a> (<a class="code" href="plist_8h.html#aa217ec31c92f3842209d9991a42a675c">AFI_ORF_PREFIX</a>, name);
<a name="l02562"></a>02562   <span class="keywordflow">if</span> (! plist)
<a name="l02563"></a>02563     <span class="keywordflow">return</span> 0;
<a name="l02564"></a>02564 
<a name="l02565"></a>02565   <span class="keywordflow">if</span> (! vty)
<a name="l02566"></a>02566     <span class="keywordflow">return</span> plist-&gt;<a class="code" href="structprefix__list.html#a5eb75f52779c50e8c1aff2d16c961aed">count</a>;
<a name="l02567"></a>02567 
<a name="l02568"></a>02568   <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;ip%s prefix-list %s: %d entries%s&quot;</span>,
<a name="l02569"></a>02569        afi == <a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a> ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot;v6&quot;</span>,
<a name="l02570"></a>02570        plist-&gt;<a class="code" href="structprefix__list.html#af18fa743ac0f45b51adc74e6e2828174">name</a>, plist-&gt;<a class="code" href="structprefix__list.html#a5eb75f52779c50e8c1aff2d16c961aed">count</a>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02571"></a>02571 
<a name="l02572"></a>02572   <span class="keywordflow">for</span> (pentry = plist-&gt;<a class="code" href="structprefix__list.html#aedee8276f06fe5ec983c9eb2115471d0">head</a>; pentry; pentry = pentry-&gt;<a class="code" href="structprefix__list__entry.html#a04c6919aced38b87e961e57d5e4769ce">next</a>)
<a name="l02573"></a>02573     {
<a name="l02574"></a>02574       <span class="keyword">struct </span><a class="code" href="structprefix.html">prefix</a> *<a class="code" href="spgrid_8c.html#a931bc2aa940ac2a4d1601cf842336926">p</a> = &amp;pentry-&gt;<a class="code" href="structprefix__list__entry.html#a5431047ac969345c9e44185b5bad16db">prefix</a>;
<a name="l02575"></a>02575       <span class="keywordtype">char</span> buf[BUFSIZ];
<a name="l02576"></a>02576 
<a name="l02577"></a>02577       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;   seq %d %s %s/%d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a55cec1484090ddedc730a13d2e014d1e">seq</a>,
<a name="l02578"></a>02578            <a class="code" href="plist_8c.html#a4427a251943c1308e6a58494a4239619">prefix_list_type_str</a> (pentry),
<a name="l02579"></a>02579            <a class="code" href="sockunion_8c.html#a5bfb767e8fa3f9ff5d2a1e19d71791f4">inet_ntop</a> (p-&gt;<a class="code" href="structprefix.html#a3848d44348192dc4de7ac89e317399bd">family</a>, &amp;p-&gt;u.<a class="code" href="structprefix.html#af508982a05429729278c96708bd9e337">prefix</a>, buf, BUFSIZ),
<a name="l02580"></a>02580            p-&gt;<a class="code" href="structprefix.html#aae8dafba4797d25cf1d141780d87ff02">prefixlen</a>);
<a name="l02581"></a>02581 
<a name="l02582"></a>02582       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>)
<a name="l02583"></a>02583     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; ge %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#a6b837036928032a495d9bee74c95215b">ge</a>);
<a name="l02584"></a>02584       <span class="keywordflow">if</span> (pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>)
<a name="l02585"></a>02585     <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot; le %d&quot;</span>, pentry-&gt;<a class="code" href="structprefix__list__entry.html#afa7d727834fb7b8b7774a033be9ae91c">le</a>);
<a name="l02586"></a>02586 
<a name="l02587"></a>02587       <a class="code" href="vty_8c.html#a3725db0ec6ad3ffdd31f68abc807ee34">vty_out</a> (vty, <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="vty_8h.html#a3be8ca867e2953936a95c68dc64824b6">VTY_NEWLINE</a>);
<a name="l02588"></a>02588     }
<a name="l02589"></a>02589   <span class="keywordflow">return</span> plist-&gt;<a class="code" href="structprefix__list.html#a5eb75f52779c50e8c1aff2d16c961aed">count</a>;
<a name="l02590"></a>02590 }
<a name="l02591"></a>02591 
<a name="l02592"></a>02592 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02593"></a><a class="code" href="plist_8c.html#ae0ff0783b3f72c3a4590bdc8e680b1ef">02593</a> <a class="code" href="plist_8c.html#ae0ff0783b3f72c3a4590bdc8e680b1ef">prefix_list_reset_orf</a> (<span class="keywordtype">void</span>)
<a name="l02594"></a>02594 {
<a name="l02595"></a>02595   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l02596"></a>02596   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l02597"></a>02597   <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l02598"></a>02598 
<a name="l02599"></a>02599   master = <a class="code" href="plist_8c.html#a1c6cce0123ce7ec82be06154b2bf458a">prefix_master_get</a> (<a class="code" href="plist_8h.html#aa217ec31c92f3842209d9991a42a675c">AFI_ORF_PREFIX</a>);
<a name="l02600"></a>02600   <span class="keywordflow">if</span> (master == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02601"></a>02601     <span class="keywordflow">return</span>;
<a name="l02602"></a>02602 
<a name="l02603"></a>02603   <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = next)
<a name="l02604"></a>02604     {
<a name="l02605"></a>02605       next = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l02606"></a>02606       <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (plist);
<a name="l02607"></a>02607     }
<a name="l02608"></a>02608   <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = next)
<a name="l02609"></a>02609     {
<a name="l02610"></a>02610       next = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l02611"></a>02611       <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (plist);
<a name="l02612"></a>02612     }
<a name="l02613"></a>02613 
<a name="l02614"></a>02614   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02615"></a>02615   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02616"></a>02616 
<a name="l02617"></a>02617   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02618"></a>02618   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02619"></a>02619 
<a name="l02620"></a>02620   master-&gt;<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a> = 1;
<a name="l02621"></a>02621   master-&gt;<a class="code" href="structprefix__master.html#a5bc8b25011ca831bd90c798ae8b01d9c">recent</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02622"></a>02622 }
<a name="l02623"></a>02623 
<a name="l02624"></a>02624 
<a name="l02625"></a>02625 <span class="comment">/* Prefix-list node. */</span>
<a name="l02626"></a><a class="code" href="plist_8c.html#a98c0e5db7a41085c9c01cda8e19da411">02626</a> <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structcmd__node.html">cmd_node</a> <a class="code" href="plist_8c.html#a98c0e5db7a41085c9c01cda8e19da411">prefix_node</a> =
<a name="l02627"></a>02627 {
<a name="l02628"></a>02628   <a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682aa78f0d8ad632def29091e10567cf3a16">PREFIX_NODE</a>,
<a name="l02629"></a>02629   <span class="stringliteral">&quot;&quot;</span>,               <span class="comment">/* Prefix list has no interface. */</span>
<a name="l02630"></a>02630   1
<a name="l02631"></a>02631 };
<a name="l02632"></a>02632 
<a name="l02633"></a>02633 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02634"></a><a class="code" href="plist_8c.html#aaaca676dbf38d10a9a4ca3c8ea86757d">02634</a> <a class="code" href="plist_8c.html#aaaca676dbf38d10a9a4ca3c8ea86757d">config_write_prefix_ipv4</a> (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l02635"></a>02635 {
<a name="l02636"></a>02636   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#aa882e001ef591185a9e5c32b6d9e2f9e">config_write_prefix_afi</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>, vty);
<a name="l02637"></a>02637 }
<a name="l02638"></a>02638 
<a name="l02639"></a>02639 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02640"></a><a class="code" href="plist_8c.html#a89e09069ca9da8cdd7d66b872f30d8e0">02640</a> <a class="code" href="plist_8c.html#a89e09069ca9da8cdd7d66b872f30d8e0">prefix_list_reset_ipv4</a> (<span class="keywordtype">void</span>)
<a name="l02641"></a>02641 {
<a name="l02642"></a>02642   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l02643"></a>02643   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l02644"></a>02644   <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l02645"></a>02645 
<a name="l02646"></a>02646   master = <a class="code" href="plist_8c.html#a1c6cce0123ce7ec82be06154b2bf458a">prefix_master_get</a> (<a class="code" href="zebra_8h.html#a192fcc8cbfb7b9d03c6562c48941a4bd">AFI_IP</a>);
<a name="l02647"></a>02647   <span class="keywordflow">if</span> (master == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02648"></a>02648     <span class="keywordflow">return</span>;
<a name="l02649"></a>02649 
<a name="l02650"></a>02650   <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = next)
<a name="l02651"></a>02651     {
<a name="l02652"></a>02652       next = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l02653"></a>02653       <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (plist);
<a name="l02654"></a>02654     }
<a name="l02655"></a>02655   <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = next)
<a name="l02656"></a>02656     {
<a name="l02657"></a>02657       next = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l02658"></a>02658       <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (plist);
<a name="l02659"></a>02659     }
<a name="l02660"></a>02660 
<a name="l02661"></a>02661   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02662"></a>02662   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02663"></a>02663 
<a name="l02664"></a>02664   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02665"></a>02665   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02666"></a>02666 
<a name="l02667"></a>02667   master-&gt;<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a> = 1;
<a name="l02668"></a>02668   master-&gt;<a class="code" href="structprefix__master.html#a5bc8b25011ca831bd90c798ae8b01d9c">recent</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02669"></a>02669 }
<a name="l02670"></a>02670 
<a name="l02671"></a>02671 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02672"></a><a class="code" href="plist_8c.html#a8a4f9d00c68a9d833e6306323f8bcc3a">02672</a> <a class="code" href="plist_8c.html#a8a4f9d00c68a9d833e6306323f8bcc3a">prefix_list_init_ipv4</a> (<span class="keywordtype">void</span>)
<a name="l02673"></a>02673 {
<a name="l02674"></a>02674   <a class="code" href="command_8c.html#a7ee8a7c258e1e5a6e3ff6173dd1658e3">install_node</a> (&amp;prefix_node, <a class="code" href="plist_8c.html#aaaca676dbf38d10a9a4ca3c8ea86757d">config_write_prefix_ipv4</a>);
<a name="l02675"></a>02675 
<a name="l02676"></a>02676   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_cmd);
<a name="l02677"></a>02677   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_ge_cmd);
<a name="l02678"></a>02678   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_ge_le_cmd);
<a name="l02679"></a>02679   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_le_cmd);
<a name="l02680"></a>02680   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_le_ge_cmd);
<a name="l02681"></a>02681   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_seq_cmd);
<a name="l02682"></a>02682   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_seq_ge_cmd);
<a name="l02683"></a>02683   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_seq_ge_le_cmd);
<a name="l02684"></a>02684   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_seq_le_cmd);
<a name="l02685"></a>02685   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_seq_le_ge_cmd);
<a name="l02686"></a>02686 
<a name="l02687"></a>02687   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_cmd);
<a name="l02688"></a>02688   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_prefix_cmd);
<a name="l02689"></a>02689   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_ge_cmd);
<a name="l02690"></a>02690   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_ge_le_cmd);
<a name="l02691"></a>02691   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_le_cmd);
<a name="l02692"></a>02692   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_le_ge_cmd);
<a name="l02693"></a>02693   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_seq_cmd);
<a name="l02694"></a>02694   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_seq_ge_cmd);
<a name="l02695"></a>02695   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_seq_ge_le_cmd);
<a name="l02696"></a>02696   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_seq_le_cmd);
<a name="l02697"></a>02697   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_seq_le_ge_cmd);
<a name="l02698"></a>02698 
<a name="l02699"></a>02699   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_description_cmd);
<a name="l02700"></a>02700   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_description_cmd);
<a name="l02701"></a>02701   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_description_arg_cmd);
<a name="l02702"></a>02702 
<a name="l02703"></a>02703   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ip_prefix_list_sequence_number_cmd);
<a name="l02704"></a>02704   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ip_prefix_list_sequence_number_cmd);
<a name="l02705"></a>02705 
<a name="l02706"></a>02706   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_prefix_list_cmd);
<a name="l02707"></a>02707   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_prefix_list_name_cmd);
<a name="l02708"></a>02708   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_prefix_list_name_seq_cmd);
<a name="l02709"></a>02709   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_prefix_list_prefix_cmd);
<a name="l02710"></a>02710   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_prefix_list_prefix_longer_cmd);
<a name="l02711"></a>02711   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_prefix_list_prefix_first_match_cmd);
<a name="l02712"></a>02712   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_prefix_list_summary_cmd);
<a name="l02713"></a>02713   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_prefix_list_summary_name_cmd);
<a name="l02714"></a>02714   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_prefix_list_detail_cmd);
<a name="l02715"></a>02715   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ip_prefix_list_detail_name_cmd);
<a name="l02716"></a>02716 
<a name="l02717"></a>02717   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_prefix_list_cmd);
<a name="l02718"></a>02718   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_prefix_list_name_cmd);
<a name="l02719"></a>02719   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_prefix_list_name_seq_cmd);
<a name="l02720"></a>02720   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_prefix_list_prefix_cmd);
<a name="l02721"></a>02721   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_prefix_list_prefix_longer_cmd);
<a name="l02722"></a>02722   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_prefix_list_prefix_first_match_cmd);
<a name="l02723"></a>02723   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_prefix_list_summary_cmd);
<a name="l02724"></a>02724   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_prefix_list_summary_name_cmd);
<a name="l02725"></a>02725   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_prefix_list_detail_cmd);
<a name="l02726"></a>02726   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ip_prefix_list_detail_name_cmd);
<a name="l02727"></a>02727 
<a name="l02728"></a>02728   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;clear_ip_prefix_list_cmd);
<a name="l02729"></a>02729   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;clear_ip_prefix_list_name_cmd);
<a name="l02730"></a>02730   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;clear_ip_prefix_list_name_prefix_cmd);
<a name="l02731"></a>02731 }
<a name="l02732"></a>02732 
<a name="l02733"></a>02733 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l02734"></a>02734 <span class="preprocessor"></span><span class="comment">/* Prefix-list node. */</span>
<a name="l02735"></a>02735 <span class="keyword">static</span> <span class="keyword">struct </span><a class="code" href="structcmd__node.html">cmd_node</a> prefix_ipv6_node =
<a name="l02736"></a>02736 {
<a name="l02737"></a>02737   <a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a5972acab3e98c0a9eb99bdd89b02b5d8">PREFIX_IPV6_NODE</a>,
<a name="l02738"></a>02738   <span class="stringliteral">&quot;&quot;</span>,               <span class="comment">/* Prefix list has no interface. */</span>
<a name="l02739"></a>02739   1
<a name="l02740"></a>02740 };
<a name="l02741"></a>02741 
<a name="l02742"></a>02742 <span class="keyword">static</span> <span class="keywordtype">int</span>
<a name="l02743"></a>02743 config_write_prefix_ipv6 (<span class="keyword">struct</span> <a class="code" href="structvty.html">vty</a> *<a class="code" href="structvty.html">vty</a>)
<a name="l02744"></a>02744 {
<a name="l02745"></a>02745   <span class="keywordflow">return</span> <a class="code" href="plist_8c.html#aa882e001ef591185a9e5c32b6d9e2f9e">config_write_prefix_afi</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>, vty);
<a name="l02746"></a>02746 }
<a name="l02747"></a>02747 
<a name="l02748"></a>02748 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02749"></a>02749 prefix_list_reset_ipv6 (<span class="keywordtype">void</span>)
<a name="l02750"></a>02750 {
<a name="l02751"></a>02751   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *plist;
<a name="l02752"></a>02752   <span class="keyword">struct </span><a class="code" href="structprefix__list.html">prefix_list</a> *<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l02753"></a>02753   <span class="keyword">struct </span><a class="code" href="structprefix__master.html">prefix_master</a> *<a class="code" href="bgp__main_8c.html#af7f9077bc08df049beb65a1c09cde5fa">master</a>;
<a name="l02754"></a>02754 
<a name="l02755"></a>02755   master = <a class="code" href="plist_8c.html#a1c6cce0123ce7ec82be06154b2bf458a">prefix_master_get</a> (<a class="code" href="zebra_8h.html#ad10f30457e426e1d269466d3b6603c3c">AFI_IP6</a>);
<a name="l02756"></a>02756   <span class="keywordflow">if</span> (master == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>)
<a name="l02757"></a>02757     <span class="keywordflow">return</span>;
<a name="l02758"></a>02758 
<a name="l02759"></a>02759   <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = next)
<a name="l02760"></a>02760     {
<a name="l02761"></a>02761       next = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l02762"></a>02762       <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (plist);
<a name="l02763"></a>02763     }
<a name="l02764"></a>02764   <span class="keywordflow">for</span> (plist = master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a>; plist; plist = next)
<a name="l02765"></a>02765     {
<a name="l02766"></a>02766       next = plist-&gt;<a class="code" href="structprefix__list.html#a8253a389b2b9429fc35aefa0aef4715f">next</a>;
<a name="l02767"></a>02767       <a class="code" href="plist_8c.html#aa841158babd5867f2df3fb07a2fe52f2">prefix_list_delete</a> (plist);
<a name="l02768"></a>02768     }
<a name="l02769"></a>02769 
<a name="l02770"></a>02770   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02771"></a>02771   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#ad355de2ebaf47332c87ea05e9bde8de8">num</a>.<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02772"></a>02772 
<a name="l02773"></a>02773   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#ad409cf784013059b6813a02a47b044e2">head</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02774"></a>02774   <a class="code" href="regex_8c.html#ad6d5aaa966ca7424f7cb9bd01f2c838b">assert</a> (master-&gt;<a class="code" href="structprefix__master.html#a7f467aee8ac17abc5642770908c79379">str</a>.<a class="code" href="structprefix__list__list.html#a2433b6b589791f67e4380999de77f2e0">tail</a> == <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>);
<a name="l02775"></a>02775 
<a name="l02776"></a>02776   master-&gt;<a class="code" href="structprefix__master.html#a4d0444dfe327cf23d918114da796d304">seqnum</a> = 1;
<a name="l02777"></a>02777   master-&gt;<a class="code" href="structprefix__master.html#a5bc8b25011ca831bd90c798ae8b01d9c">recent</a> = <a class="code" href="getopt1_8c.html#a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a>;
<a name="l02778"></a>02778 }
<a name="l02779"></a>02779 
<a name="l02780"></a>02780 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l02781"></a>02781 prefix_list_init_ipv6 (<span class="keywordtype">void</span>)
<a name="l02782"></a>02782 {
<a name="l02783"></a>02783   <a class="code" href="command_8c.html#a7ee8a7c258e1e5a6e3ff6173dd1658e3">install_node</a> (&amp;prefix_ipv6_node, config_write_prefix_ipv6);
<a name="l02784"></a>02784 
<a name="l02785"></a>02785   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_cmd);
<a name="l02786"></a>02786   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_ge_cmd);
<a name="l02787"></a>02787   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_ge_le_cmd);
<a name="l02788"></a>02788   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_le_cmd);
<a name="l02789"></a>02789   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_le_ge_cmd);
<a name="l02790"></a>02790   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_seq_cmd);
<a name="l02791"></a>02791   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_seq_ge_cmd);
<a name="l02792"></a>02792   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_seq_ge_le_cmd);
<a name="l02793"></a>02793   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_seq_le_cmd);
<a name="l02794"></a>02794   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_seq_le_ge_cmd);
<a name="l02795"></a>02795 
<a name="l02796"></a>02796   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_cmd);
<a name="l02797"></a>02797   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_prefix_cmd);
<a name="l02798"></a>02798   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_ge_cmd);
<a name="l02799"></a>02799   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_ge_le_cmd);
<a name="l02800"></a>02800   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_le_cmd);
<a name="l02801"></a>02801   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_le_ge_cmd);
<a name="l02802"></a>02802   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_seq_cmd);
<a name="l02803"></a>02803   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_seq_ge_cmd);
<a name="l02804"></a>02804   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_seq_ge_le_cmd);
<a name="l02805"></a>02805   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_seq_le_cmd);
<a name="l02806"></a>02806   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_seq_le_ge_cmd);
<a name="l02807"></a>02807 
<a name="l02808"></a>02808   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_description_cmd);
<a name="l02809"></a>02809   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_description_cmd);
<a name="l02810"></a>02810   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_description_arg_cmd);
<a name="l02811"></a>02811 
<a name="l02812"></a>02812   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;ipv6_prefix_list_sequence_number_cmd);
<a name="l02813"></a>02813   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a50754044f565f7421a152eaa411eebcc">CONFIG_NODE</a>, &amp;no_ipv6_prefix_list_sequence_number_cmd);
<a name="l02814"></a>02814 
<a name="l02815"></a>02815   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_prefix_list_cmd);
<a name="l02816"></a>02816   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_prefix_list_name_cmd);
<a name="l02817"></a>02817   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_prefix_list_name_seq_cmd);
<a name="l02818"></a>02818   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_prefix_list_prefix_cmd);
<a name="l02819"></a>02819   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_prefix_list_prefix_longer_cmd);
<a name="l02820"></a>02820   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_prefix_list_prefix_first_match_cmd);
<a name="l02821"></a>02821   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_prefix_list_summary_cmd);
<a name="l02822"></a>02822   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_prefix_list_summary_name_cmd);
<a name="l02823"></a>02823   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_prefix_list_detail_cmd);
<a name="l02824"></a>02824   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682acfdc7d342a9640147533988ace5fac24">VIEW_NODE</a>, &amp;show_ipv6_prefix_list_detail_name_cmd);
<a name="l02825"></a>02825 
<a name="l02826"></a>02826   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_prefix_list_cmd);
<a name="l02827"></a>02827   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_prefix_list_name_cmd);
<a name="l02828"></a>02828   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_prefix_list_name_seq_cmd);
<a name="l02829"></a>02829   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_prefix_list_prefix_cmd);
<a name="l02830"></a>02830   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_prefix_list_prefix_longer_cmd);
<a name="l02831"></a>02831   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_prefix_list_prefix_first_match_cmd);
<a name="l02832"></a>02832   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_prefix_list_summary_cmd);
<a name="l02833"></a>02833   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_prefix_list_summary_name_cmd);
<a name="l02834"></a>02834   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_prefix_list_detail_cmd);
<a name="l02835"></a>02835   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;show_ipv6_prefix_list_detail_name_cmd);
<a name="l02836"></a>02836 
<a name="l02837"></a>02837   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;clear_ipv6_prefix_list_cmd);
<a name="l02838"></a>02838   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;clear_ipv6_prefix_list_name_cmd);
<a name="l02839"></a>02839   <a class="code" href="command_8c.html#af8546e314a1538d53ef78e4b02804f40">install_element</a> (<a class="code" href="command_8h.html#a6a276b85e2da28c5f9c3dbce61c55682a8eeaebd59fec75e66abd261377c21a2d">ENABLE_NODE</a>, &amp;clear_ipv6_prefix_list_name_prefix_cmd);
<a name="l02840"></a>02840 }
<a name="l02841"></a>02841 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l02842"></a>02842 
<a name="l02843"></a>02843 <span class="keywordtype">void</span>
<a name="l02844"></a><a class="code" href="plist_8h.html#a9262200421fec45de940857a3d3e7130">02844</a> <a class="code" href="plist_8c.html#a198373358b94c257a9a0cb6d02cf8eac">prefix_list_init</a> ()
<a name="l02845"></a>02845 {
<a name="l02846"></a>02846   <a class="code" href="plist_8c.html#a8a4f9d00c68a9d833e6306323f8bcc3a">prefix_list_init_ipv4</a> ();
<a name="l02847"></a>02847 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l02848"></a>02848 <span class="preprocessor"></span>  prefix_list_init_ipv6 ();
<a name="l02849"></a>02849 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l02850"></a>02850 }
<a name="l02851"></a>02851 
<a name="l02852"></a>02852 <span class="keywordtype">void</span>
<a name="l02853"></a><a class="code" href="plist_8h.html#a0a4807d3e91711b36c4b0a734defea81">02853</a> <a class="code" href="plist_8c.html#a6d3ae1194d033d0d7cf9c3b54a7542ac">prefix_list_reset</a> ()
<a name="l02854"></a>02854 {
<a name="l02855"></a>02855   <a class="code" href="plist_8c.html#a89e09069ca9da8cdd7d66b872f30d8e0">prefix_list_reset_ipv4</a> ();
<a name="l02856"></a>02856 <span class="preprocessor">#ifdef HAVE_IPV6</span>
<a name="l02857"></a>02857 <span class="preprocessor"></span>  prefix_list_reset_ipv6 ();
<a name="l02858"></a>02858 <span class="preprocessor">#endif </span><span class="comment">/* HAVE_IPV6 */</span>
<a name="l02859"></a>02859   <a class="code" href="plist_8c.html#ae0ff0783b3f72c3a4590bdc8e680b1ef">prefix_list_reset_orf</a> ();
<a name="l02860"></a>02860 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="plist_8c.html">plist.c</a>      </li>

    <li class="footer">Generated on Tue Apr 24 2012 10:41:05 for OSPFN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.5.1 </li>
   </ul>
 </div>


</body>
</html>
